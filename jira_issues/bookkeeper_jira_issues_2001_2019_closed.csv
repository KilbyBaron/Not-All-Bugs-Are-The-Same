Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Container),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Incorporates),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Required),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Compacted entries are not properly synced before updating index,BOOKKEEPER-926,12964106,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,mmerli,mmerli,30/Apr/16 21:58,16/May/16 21:47,14/Mar/19 02:38,04/May/16 13:56,4.3.1,,4.4.0,,,,,,0,,"I have identified a couple of issues in Bookie compaction code. 

h4. Compacted entries are not properly synced when index is updated

When compacting, we read ""active"" entries from an entry log and we re-append to current entry log. After compacting a number of entries, by default 100K, or at the very end, we need to update the index pointing to the new entry log and offset.

Before updating the index, we need to wait for this entries to be flushed and fsynced, otherwise a bookie crash might leave the index updated, pointing to an invalid offset.

The current code that is supposed to wait until flushed is:

{code:java}
// GarbageCollectorThread.java:178
EntryLocation lastOffset = offsets.get(offsets.size()-1);
long lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.location);
while (lastOffsetLogId < entryLogger.getLeastUnflushedLogId() && running) {
    synchronized (flushLock) {
        flushLock.wait(1000);
    }

    lastOffset = offsets.get(offsets.size()-1);
    lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.location);
}

// update the index 
{code}

The condition {{lastOffsetLogId < entryLogger.getLeastUnflushedLogId()}} is wrong, because if the last compacted entry was written in an earlier entry log than the least unflushed log, it means that the entries are already flushed and thus we don't need to wait.

In the normal case what happens is that {{lastOffsetLogId} is actually the current entryLog and it's equal to {{entryLogger.getLeastUnflushedLogId()}}, so we don't wait. But, in this case the entries appended to the current entrylog are not flushed nor synced, hence the problem. 

h4. Exception during index flush

Having an exception when updating the index, combined with the above issue, makes the bookie GC to stop indefinitely. 
What happens is that the offset list is not cleared, and at the next bookie GC iteration it will find the old compacted entries in that list, for which now the entryLogId is less than the current log id, and that makes the while loop to never exit.

Another problem is that, any IOException during the index flush, will make the GC thread to bail out and it will not remove even the entry logs that were compacted and flushed. Next time, these entry logs will be compacted again.

h4. Proposed solution
I think the best solution is to trigger the {{entryLogger.flush()}} form the bookie GC thread before updating the indexes. That would simplify the code and I don't see any disadvantages in doing that. 
Another improvement would be to delete compacted entry logs individually, as soon as the compacted data is flush, without waiting the end of the whole compaction process. 

The advantages are : 
 * If compaction stop halfway, at least we don't have to re-compact what we just compacted
 * Compaction won't require significant space overhead. Today a major compaction can end up reappending a large amount of data and then deleting all the entry logs at the very end, requiring twice the size of the active data set to be stored on disk at some point in time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-30 22:04:45.855,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:24 UTC 2016,,,,,,0|i2x0bj:,9223372036854775807,,,,,,,,"30/Apr/16 22:04;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/41

    BOOKKEEPER-926: Compacted entries are not properly synced before upda…

    …ting index

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-926

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/41.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #41
    
----
commit 42dff817b5e85a12101d9674b323f237ddeaba78
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-04-29T21:30:25Z

    BOOKKEEPER-926: Compacted entries are not properly synced before updating index

----
",30/Apr/16 22:05;mmerli;[~sijie@apache.org] [~fpj] Please take a look,"02/May/16 07:36;eolivelli;very interesting.
Have you ever noticed this issue in production or staging ?
Is there any symptom to look for in logs ?

it look like a major change and maybe there is no test case we can implement to cover this issue.
Is is safe to add it to 4.4.0 ?","02/May/16 08:24;zhaijia;Yes. Very interesting, maybe add a test case to reproduce and verify it is very useful.

In the description,
""Because if the last compacted entry was written in an earlier entry log than the least unflushed log, it means that the entries are already flushed and thus we don't need to wait.""
How would this happen? I thought we only compact the entries that is always older than ""the least unflushed"".","02/May/16 16:05;jujjuri;[~rithin.shetty] and I noticed this at Salesforce testing.

Our stack looked like this:

""GarbageCollectorThread"" prio=10 tid=0x00007f6981152330 nid=0x13da5 in Object.wait() [0x00007f68cc5d9000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread$CompactionScannerFactory.waitEntrylogFlushed(GarbageCollectorThread.java:182)
        - locked <0x0000000480b13168> (a java.lang.Object)
        - locked <0x0000000480b01a38> (a org.apache.bookkeeper.bookie.GarbageCollectorThread$CompactionScannerFactory)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread$CompactionScannerFactory.flush(GarbageCollectorThread.java:201)
        - locked <0x0000000480b01a38> (a org.apache.bookkeeper.bookie.GarbageCollectorThread$CompactionScannerFactory)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.doCompactEntryLogs(GarbageCollectorThread.java:488)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.run(GarbageCollectorThread.java:388)

Also when [~rithin.shetty] added debug in the while loop mentioned above:

[vagrant@gus-mnds7-1-sfm sfslogs]$ grep ""GC thread stuck"" bookkeeper-bookie-gus-mnds7-1-sfm.gus.2015105437.vpod.sfdc.net.log
2016-05-01 19:59:21,271 - INFO [GarbageCollectorThread:GarbageCollectorThread$CompactionScannerFactory@187] - GC thread stuck waiting: lastOffsetLogId=12234, leastUnflushedLogId=12247
2016-05-01 20:14:21,886 - INFO [GarbageCollectorThread:GarbageCollectorThread$CompactionScannerFactory@187] - GC thread stuck waiting: lastOffsetLogId=12234, leastUnflushedLogId=12268
2016-05-01 20:29:22,181 - INFO [GarbageCollectorThread:GarbageCollectorThread$CompactionScannerFactory@187] - GC thread stuck waiting: lastOffsetLogId=12234, leastUnflushedLogId=12284
2016-05-01 20:44:22,940 - INFO [GarbageCollectorThread:GarbageCollectorThread$CompactionScannerFactory@187] - GC thread stuck waiting: lastOffsetLogId=12234, leastUnflushedLogId=12291
2016-05-01 20:59:28,856 - INFO [GarbageCollectorThread:GarbageCollectorThread$CompactionScannerFactory@187] - GC thread stuck waiting: lastOffsetLogId=12234, leastUnflushedLogId=12305

----
As you can see lastUnflushedLogId is growing pretty fast. [~merlimat] What I see is, leastUnflushedLogId keeps getting updated even after flush started and hence a problem too?","02/May/16 16:35;mmerli;[~jujjuri] Yes, that looks like the same issue. If the {{leastUnflushedEntryLogId}} moves forward (eg: entries are being written, entry log is full and new one is created), then the bookie GC thread is essentially stuck, waiting for an older entry log to be flushed, but that entry log was already flushed.

[~eolivelli] Yes we've seen it happening in production. I mean we've see the bookie GC getting stuck, in the same place that [~jujjuri] pasted above. 

About the other issue, of the compacted entries not being flushed on disk, it's hard to tell whether it has already happened or not. Even if it happens, you might not be aware of it given that : 
 * The other bookie replica might still have the entries
 * You might not try to read these entries

[~zhaijia] The ""compacted"" entries are appended to the current entry log and, before updating the index, we need to make sure the current entry log is flushed. Otherwise, if a bookie crashes during compaction, we might have indexes pointing to an invalid offset in the entry log. 

In the current code, the current entryLogId is typically equal to the ""least unflushed entry log id"". That means, given the current if condition, we are not waiting for entries to be flushed.

I'll definitely add a unit test to trigger this behavior, and I still think this should go into 4.4

",02/May/16 20:52;eolivelli;+1 for committing on 4.4.0,"03/May/16 04:24;zhaijia;Got it now, it happens when new entry log created. Thanks a lot for the explaination.","03/May/16 04:41;hustlmsp;Yup. we also encountered similar problem before. I have a bit concern on the proposed fix - it might potentially cause performance penalty if we flush too frequent. our fix at Twitter is different - in the compaction scanner, we keep tracking the mapping between entry id and its compacted offsets. when entry log file rotated or at the end of compaction, we update the offset for those compacted entries, flushing out the cache and delete the entry log files whose compacted entries' offsets have been updated.

the commit for that improvement is here: https://github.com/twitter/bookkeeper/commit/1b99d9a6f0840c5f8ae4acd74f5c4bdbff498cbe","03/May/16 19:32;mmerli;I have updated the PR with a test case that reproduces the problem. 

Sijie, from what I've tested, having the sync done in the entry logger from GarbageCollectorThread every 100K entries compacted shouldn't degrade the performance. I've checked write throughput/latency and read throughput and couldn't see any difference with and without the patch.
",04/May/16 01:59;hustlmsp;make sense to me.,"04/May/16 02:00;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/41#issuecomment-216720201
  
    the change looks good to me. +1
","04/May/16 13:56;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/41
","04/May/16 13:56;mmerli;Issue resolved by merging pull request 41
            [https://github.com/apache/bookkeeper/pull/41]

            {noformat}
            commit d32010f5fcc6a040a56dc8b983cc14d107cff2df
Author:     Matteo Merli <mmerli@apache.org>
AuthorDate: Wed May 4 06:55:46 2016 -0700
Commit:     Matteo Merli <mmerli@apache.org>
CommitDate: Wed May 4 06:55:46 2016 -0700

    BOOKKEEPER-926: Compacted entries are not properly synced before updating index
    
    …ting index
    
    Author: Matteo Merli <mmerli@apache.org>
    
    Reviewers: Guo Sijie <sijie@apache.org>
    
    Closes #41 from merlimat/bk-926

            {noformat}
            ","04/May/16 14:20;hudson;SUCCESS: Integrated in bookkeeper-master #1368 (See [https://builds.apache.org/job/bookkeeper-master/1368/])
BOOKKEEPER-926: Compacted entries are not properly synced before (mmerli: rev d32010f5fcc6a040a56dc8b983cc14d107cff2df)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix FindBugs discovered issues in master,BOOKKEEPER-925,12963141,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,mmerli,mmerli,27/Apr/16 16:04,16/May/16 21:47,14/Mar/19 02:39,30/Apr/16 00:14,,,4.4.0,,,,,,0,,"After we have fixed unit tests in master, we are seeing FindBugs warnings: 

{noformat}
[INFO] --- findbugs-maven-plugin:2.5.2:check (default-cli) @ bookkeeper-server ---
[INFO] BugInstance size is 6
[INFO] Error size is 0
[INFO] Total bugs: 6
[INFO] Found reliance on default encoding in org.apache.bookkeeper.bookie.BookieShell$ReadLedgerEntriesCmd.runCmd(CommandLine): new String(byte[]) [""org.apache.bookkeeper.bookie.BookieShell$ReadLedgerEntriesCmd""] At BookieShell.java:[lines 403-474]
[INFO] Exception is caught when Exception is not thrown in org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector.gc(GarbageCollector$GarbageCleaner) [""org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector""] At ScanAndCompareGarbageCollector.java:[lines 64-227]
[INFO] org.apache.bookkeeper.client.BookieWatcher.<static initializer>() invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead [""org.apache.bookkeeper.client.BookieWatcher""] At BookieWatcher.java:[lines 60-308]
[INFO] org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager.LOCK_DATA should be package protected [""org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager""] At ZkLedgerUnderreplicationManager.java:[lines 76-664]
[INFO] Synchronization performed on java.util.concurrent.ConcurrentLinkedQueue in org.apache.bookkeeper.proto.AuthHandler$ClientSideHandler.writeRequested(ChannelHandlerContext, MessageEvent) [""org.apache.bookkeeper.proto.AuthHandler$ClientSideHandler""] At AuthHandler.java:[lines 210-302]
[INFO] Synchronization performed on java.util.concurrent.ConcurrentLinkedQueue in org.apache.bookkeeper.proto.AuthHandler$ClientSideHandler$AuthHandshakeCompleteCallback.operationComplete(int, Void) [""org.apache.bookkeeper.proto.AuthHandler$ClientSideHandler$AuthHandshakeCompleteCallback""] At AuthHandler.java:[lines 333-354]
[INFO] ------------------------------------------------------------------------
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-27 17:00:46.969,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:35 UTC 2016,,,,,,0|i2wuen:,9223372036854775807,,,,,,,,27/Apr/16 16:04;mmerli;Complete log at  https://builds.apache.org/job/bookkeeper-master/1358/console,"27/Apr/16 17:00;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/39

    BOOKKEEPER-925: Fix FindBugs discovered issues in master

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-925

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/39.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #39
    
----
commit 05c0db8ca105c5aae2a3a160a1f366d2cebd00ad
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-04-27T16:59:52Z

    BOOKKEEPER-925: Fix FindBugs discovered issues in master

----
","27/Apr/16 17:06;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/39#issuecomment-215150057
  
    Build failure looks like a jenkins/maven issue
","27/Apr/16 17:20;githubbot;Github user sboobna commented on the pull request:

    https://github.com/apache/bookkeeper/pull/39#issuecomment-215157010
  
    :+1:
","27/Apr/16 17:33;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/39#issuecomment-215162370
  
    LGTM +1
","27/Apr/16 19:06;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/39#issuecomment-215195527
  
    Verified findbugs:check is clean locally.
","27/Apr/16 19:11;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/39
","27/Apr/16 19:15;mmerli;{noformat}
commit 101de10a817d2a0704ce746eaed90cc0d73ca078
Author:     Matteo Merli <mmerli@apache.org>
AuthorDate: Wed Apr 27 12:11:27 2016 -0700
Commit:     Matteo Merli <mmerli@apache.org>
CommitDate: Wed Apr 27 12:11:27 2016 -0700

    BOOKKEEPER-925: Fix FindBugs discovered issues in master

    Author: Matteo Merli <mmerli@apache.org>

    Reviewers: Siddharth Boobna <siddharth.boobna@gmail.com>, Guo Sijie <sijie@apache.org>

    Closes #39 from merlimat/bk-925
{noformat}
","27/Apr/16 20:29;hudson;FAILURE: Integrated in bookkeeper-master #1359 (See [https://builds.apache.org/job/bookkeeper-master/1359/])
BOOKKEEPER-925: Fix FindBugs discovered issues in master (mmerli: rev 101de10a817d2a0704ce746eaed90cc0d73ca078)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java
","28/Apr/16 07:27;githubbot;Github user jiazhai commented on the pull request:

    https://github.com/apache/bookkeeper/pull/39#issuecomment-215334350
  
    :+1:

","28/Apr/16 20:55;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/40

    BOOKKEEPER-925: Fix FindBugs discovered issues in master

    @sijie Fixed the other findbugs error

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-925

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/40.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #40
    
----
commit af1f86503ead8f62a999e1bb84e1b173057ee8f0
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-04-28T20:53:00Z

    BOOKKEEPER-925: Fix FindBugs discovered issues in master

----
","29/Apr/16 03:03;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/40#issuecomment-215616532
  
    the change looks good to me +1
","29/Apr/16 03:05;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/40
","29/Apr/16 03:05;hustlmsp;Issue resolved by merging pull request 40
            [https://github.com/apache/bookkeeper/pull/40]

            {noformat}
            commit f8e0331f14a933ad2ed3d933c5eea927020b4967
Author:     Matteo Merli <mmerli@apache.org>
AuthorDate: Thu Apr 28 20:05:37 2016 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Thu Apr 28 20:05:37 2016 -0700

    BOOKKEEPER-925: Fix FindBugs discovered issues in master
    
    sijie Fixed the other findbugs error
    
    Author: Matteo Merli <mmerli@apache.org>
    
    Reviewers: Guo Sijie <sijie@apache.org>
    
    Closes #40 from merlimat/bk-925

            {noformat}
            ","29/Apr/16 03:34;hudson;SUCCESS: Integrated in bookkeeper-master #1361 (See [https://builds.apache.org/job/bookkeeper-master/1361/])
BOOKKEEPER-925: Fix FindBugs discovered issues in master (sijie: rev f8e0331f14a933ad2ed3d933c5eea927020b4967)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java
","29/Apr/16 12:51;eolivelli;I think we should upgrade to findbugs 3.0.0, on my PC I get this error (maybe because I use jdk8)

{code}
INFO] --- findbugs-maven-plugin:2.5.2:findbugs (default-cli) @ bookkeeper-stats-api ---
[INFO] Fork Value is true
     [java] The following errors occurred during analysis:
     [java] apr 29, 2016 2:50:04 PM edu.umd.cs.findbugs.TextUIBugReporter reportAnalysisError
     [java] GRAVE: Unable to get XClass for java/lang/StringBuilder
     [java] java.lang.ArrayIndexOutOfBoundsException: 5747
     [java] 	at org.objectweb.asm.ClassReader.readClass(Unknown Source)
     [java] 	at org.objectweb.asm.ClassReader.accept(Unknown Source)
     [java] 	at edu.umd.cs.findbugs.asm.FBClassReader.accept(FBClassReader.java:44)
     [java] 	at org.objectweb.asm.ClassReader.accept(Unknown Source)
     [java] 	at edu.umd.cs.findbugs.classfile.engine.ClassParserUsingASM.parse(ClassParserUsingASM.java:110)
     [java] 	at edu.umd.cs.findbugs.classfile.engine.ClassParserUsingASM.parse(ClassParserUsingASM.java:554)
     [java] 	at edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine.analyze(ClassInfoAnalysisEngine.java:76)
     [java] 	at edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine.analyze(ClassInfoAnalysisEngine.java:38)
     [java] 	at edu.umd.cs.findbugs.classfile.impl.AnalysisCache.getClassAnalysis(AnalysisCache.java:266)
     [java] 	at edu.umd.cs.findbugs.ba.XFactory.getXClass(XFactory.java:652)
     [java] 	at edu.umd.cs.findbugs.ba.ch.Subtypes2.addInheritanceEdge(Subtypes2.java:1227)
     [java] 	at edu.umd.cs.findbugs.ba.ch.Subtypes2.addSupertypeEdges(Subtypes2.java:1200)
     [java] 	at edu.umd.cs.findbugs.ba.ch.Subtypes2.addClassAndGetClassVertex(Subtypes2.java:275)
     [java] 	at edu.umd.cs.findbugs.ba.ch.Subtypes2.addClass(Subtypes2.java:244)
     [java] 	at edu.umd.cs.findbugs.ba.AnalysisCacheToAnalysisContextAdapter.setAppClassList(AnalysisCacheToAnalysisContextAdapter.java:400)
     [java] 	at edu.umd.cs.findbugs.FindBugs2.setAppClassList(FindBugs2.java:982)
     [java] 	at edu.umd.cs.findbugs.FindBugs2.execute(FindBugs2.java:225)
     [java] 	at edu.umd.cs.findbugs.FindBugs.runMain(FindBugs.java:391)
     [java] 	at edu.umd.cs.findbugs.FindBugs2.main(FindBugs2.java:1300)
     [java]   Unable to get XClass for java/lang/StringBuilder
     [java]     java.lang.ArrayIndexOutOfBoundsException: 5747

{code}","30/Apr/16 00:14;mmerli;The build is still happening in JDK 7 so it not an issue right now, we can switch to findbugs-3.0 when we'll move to JDK 8 for 4.5 release",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in LocalBookkeeper: Use InetAddress.getHostAddress instead of InetAddress,BOOKKEEPER-921,12957852,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,arunmk,arunmk,arunmk,11/Apr/16 20:37,16/May/16 21:47,14/Mar/19 02:39,27/Apr/16 08:06,4.4.0,,4.4.0,,,bookkeeper-server,,,0,easyfix,There was a typo in the fix for Bookkeeper-910 and this bug has the fix since the former is already merged.,,,,,,,,,,,,,,,,,,,11/Apr/16 20:37;arunmk;0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch;https://issues.apache.org/jira/secure/attachment/12798096/0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-04-11 20:52:40.648,,,no_permission,,,,,Patch,,,,,,,,9223372036854775807,,,Mon May 16 21:47:51 UTC 2016,,,,,,0|i2vybz:,9223372036854775807,,,,,,,,"11/Apr/16 20:38;arunmk;[~sijie@apache.org], [~mmerli]: the patch is a one-liner and is attached.",11/Apr/16 20:52;mmerli;+1,"12/Apr/16 03:48;hadoopqa;Testing JIRA BOOKKEEPER-921


Patch [0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch|https://issues.apache.org/jira/secure/attachment/12798096/0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch] downloaded at Tue Apr 12 03:23:54 UTC 2016

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 13 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 674
.    Tests failed: 5
.    Tests errors: 3

.    The patch failed the following testcases:

.      testRWZKSessionLost[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWZKSessionLost[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWZKSessionLost[2](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testReadOnlyBookieExclusionFromURLedgersCheck[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testReadOnlyBookieExclusionFromURLedgersCheck[2](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/982/",12/Apr/16 18:29;arunmk;The test failures are covered by BOOKKEEPER-911 and BOOKKEEPER-919.,27/Apr/16 07:58;hustlmsp;the patch looks good to me. +1,"27/Apr/16 08:06;hustlmsp;committed as

{code}
commit 696a1515bcd4ef41ef27944dad64ac3e1c9d4991
Author: Arun M. Krishnakumar <arunmk95@gmail.com>
Date:   Wed Apr 27 01:05:23 2016 -0700

    BOOKKEEPER-921: Typo in LocalBookkeeper: Use InetAddress.getHostAddress instead of InetAddress
{code}","27/Apr/16 13:29;hudson;FAILURE: Integrated in bookkeeper-master #1358 (See [https://builds.apache.org/job/bookkeeper-master/1358/])
BOOKKEEPER-921: Typo in LocalBookkeeper: Use InetAddress.getHostAddress (sijie: rev 696a1515bcd4ef41ef27944dad64ac3e1c9d4991)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Auditor is sometimes marking as failed a bookie switching from available to read-only mode,BOOKKEEPER-919,12956990,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,07/Apr/16 20:00,16/May/16 21:47,14/Mar/19 02:39,27/Apr/16 07:31,,,4.4.0,,,,,,0,,"AuditorLedgerCheckerTest.testReadOnlyBookieExclusionFromURLedgersCheck intermittently failing

This test too, I've seen it failing in different occasions.

https://builds.apache.org/job/bookkeeper-master-git-pullrequest/59/testReport/junit/org.apache.bookkeeper.replication/AuditorLedgerCheckerTest/testReadOnlyBookieExclusionFromURLedgersCheck_2_/

{noformat}
Error Message

latch should not have completed
Stacktrace

java.lang.AssertionError: latch should not have completed
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertFalse(Assert.java:64)
	at org.apache.bookkeeper.replication.AuditorLedgerCheckerTest.testReadOnlyBookieExclusionFromURLedgersCheck(AuditorLedgerCheckerTest.java:279)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.lang.Thread.run(Thread.java:745)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-13 22:17:04.303,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:53 UTC 2016,,,,,,0|i2vt0f:,9223372036854775807,,,,,,,,"13/Apr/16 19:07;mmerli;The issue with the test appears to be related to the fact that the ledger is marking as under-replicated, even though the bookie is up and it's just switching from available to read-only mode. 

Auditor should ensure to avoid that race condition when getting the list of available bookies.","13/Apr/16 19:20;mmerli;Extract from the failed test logs :

{noformat}
2016-04-07 19:50:12,979 - INFO  - [AuditorElector-10.208.165.209:15051:Auditor@195] - I'm starting as Auditor Bookie. ID: 10.208.165.209:15051
2016-04-07 19:50:12,980 - INFO  - [AuditorElector-10.208.165.209:15051:Auditor@206] - Auditor periodic ledger checking enabled 'auditorPeriodicCheckInterval' 604800 seconds
2016-04-07 19:50:12,985 - INFO  - [AuditorElector-10.208.165.209:15051:Auditor@252] - Auditor periodic bookie checking enabled 'auditorPeriodicBookieCheckInterval' 86400 seconds
2016-04-07 19:50:12,995 - INFO  - [Time-limited test:Bookie@945] - Transitioning Bookie to ReadOnly mode, and will serve only read requests from clients!
2016-04-07 19:50:12,998 - INFO  - [Time-limited test:Bookie@849] - Registered myself in ZooKeeper at /ledgers/available/readonly/10.208.165.209:15053.
2016-04-07 19:50:12,999 - INFO  - [AuditorBookie-10.208.165.209:15051:Auditor@330] - Following are the failed bookies: [10.208.165.209:15053] and searching its ledgers for re-replication
2016-04-07 19:50:13,003 - INFO  - [main-EventThread:NetworkTopology@463] - Removing a node: /default-rack/10.208.165.209:15053
2016-04-07 19:50:13,003 - INFO  - [AuditorBookie-10.208.165.209:15051:Auditor@348] - Following ledgers: [0] of bookie: 10.208.165.209:15053 are identified as underreplicated
{noformat}","13/Apr/16 22:17;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/37

    BOOKKEEPER-919: Auditor is sometimes marking as failed a bookie switc…

    …hing from available to read-only mode

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-919

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/37.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #37
    
----
commit 2b701510b162040f60c5000c9ff07341eb2c660a
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-04-13T22:15:34Z

    BOOKKEEPER-919: Auditor is sometimes marking as failed a bookie switching from available to read-only mode

----
","22/Apr/16 02:04;ayegorov;Got the same error with patch applied. 
Unfortunately it only happens on jenkins server and I cannot repro it locally.  
This is the first failure I got with the patch, 1 out of 3 builds failed so far.

{noformat}
Error Message

latch should not have completed
Stacktrace

    java.lang.AssertionError: latch should not have completed
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertFalse(Assert.java:64)
	at org.apache.bookkeeper.replication.AuditorLedgerCheckerTest.testReadOnlyBookieExclusionFromURLedgersCheck(AuditorLedgerCheckerTest.java:281)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.lang.Thread.run(Thread.java:745)
{noformat}

Relevant logs:

{noformat}
2016-04-21 16:21:50,288 - INFO  - [main-EventThread:NetworkTopology@394] - Adding a new node: /default-rack/127.0.1.1:15004
2016-04-21 16:21:50,288 - INFO  - [main-EventThread:NetworkTopology@394] - Adding a new node: /default-rack/127.0.1.1:15005
2016-04-21 16:21:50,289 - INFO  - [main-EventThread:NetworkTopology@394] - Adding a new node: /default-rack/127.0.1.1:15006
2016-04-21 16:21:50,289 - INFO  - [AuditorElector-127.0.1.1:15004:Auditor@195] - I'm starting as Auditor Bookie. ID: 127.0.1.1:15004
2016-04-21 16:21:50,290 - INFO  - [AuditorElector-127.0.1.1:15004:Auditor@206] - Auditor periodic ledger checking enabled 'auditorPeriodicCheckInterval' 604800 seconds
2016-04-21 16:21:50,291 - INFO  - [AuditorElector-127.0.1.1:15004:Auditor@252] - Auditor periodic bookie checking enabled 'auditorPeriodicBookieCheckInterval' 86400 seconds
2016-04-21 16:21:50,294 - INFO  - [Time-limited test:Bookie@964] - Transitioning Bookie to ReadOnly mode, and will serve only read requests from clients!
2016-04-21 16:21:50,296 - INFO  - [Time-limited test:Bookie@868] - Registered myself in ZooKeeper at /ledgers/available/readonly/127.0.1.1:15006.
2016-04-21 16:21:50,297 - INFO  - [AuditorBookie-127.0.1.1:15004:Auditor@330] - Following are the failed bookies: [127.0.1.1:15006] and searching its ledgers for re-replication
2016-04-21 16:21:50,297 - INFO  - [AuditorBookie-127.0.1.1:15004:Auditor@348] - Following ledgers: [4] of bookie: 127.0.1.1:15006 are identified as underreplicated
2016-04-21 16:21:50,298 - INFO  - [main-EventThread:NetworkTopology@463] - Removing a node: /default-rack/127.0.1.1:15006
2016-04-21 16:21:50,298 - INFO  - [ProcessThread(sid:0 cport:-1)::PrepRequestProcessor@645] - Got user-level KeeperException when processing sessionid:0x1543b212af40000 type:create cxid:0x37 zxid:0x1f txntype:-1 reqpath:n/a Error Path:/ledgers/underreplication/ledgers/0000/0000/0000/0004 Error:KeeperErrorCode = NoNode for /ledgers/underreplication/ledgers/0000/0000/0000/0004
2016-04-21 16:21:50,300 - INFO  - [ProcessThread(sid:0 cport:-1)::PrepRequestProcessor@645] - Got user-level KeeperException when processing sessionid:0x1543b212af40000 type:create cxid:0x3b zxid:0x20 txntype:-1 reqpath:n/a Error Path:/ledgers/underreplication/ledgers/0000/0000/0000 Error:KeeperErrorCode = NoNode for /ledgers/underreplication/ledgers/0000/0000/0000
2016-04-21 16:21:50,300 - INFO  - [main-EventThread:NetworkTopology@463] - Removing a node: /default-rack/127.0.1.1:15006
2016-04-21 16:21:50,301 - INFO  - [ProcessThread(sid:0 cport:-1)::PrepRequestProcessor@645] - Got user-level KeeperException when processing sessionid:0x1543b212af40000 type:create cxid:0x3c zxid:0x21 txntype:-1 reqpath:n/a Error Path:/ledgers/underreplication/ledgers/0000/0000 Error:KeeperErrorCode = NoNode for /ledgers/underreplication/ledgers/0000/0000
2016-04-21 16:21:50,301 - INFO  - [ProcessThread(sid:0 cport:-1)::PrepRequestProcessor@645] - Got user-level KeeperException when processing sessionid:0x1543b212af40000 type:create cxid:0x3d zxid:0x22 txntype:-1 reqpath:n/a Error Path:/ledgers/underreplication/ledgers/0000 Error:KeeperErrorCode = NoNode for /ledgers/underreplication/ledgers/0000
2016-04-21 16:21:50,306 - INFO  - [main-EventThread:AuditorLedgerCheckerTest$ChildWatcher@435] - Received notification for the ledger path : /ledgers/underreplication/ledgers/0000/0000/0000/0004/urL0000000004
2016-04-21 16:21:50,306 - INFO  - [main:Auditor@520] - Shutting down auditor
2016-04-21 16:21:50,306 - INFO  - [AuditorElector-127.0.1.1:15004:AuditorElector$2@217] - Shutting down AuditorElector
2016-04-21 16:21:50,311 - INFO  - [main:BookKeeperClusterTestCase@110] - TearDown
2016-04-21 16:21:50,311 - INFO  - [AuditorElector-127.0.1.1:15006:AuditorElector$2@217] - Shutting down AuditorElector

{noformat}
","22/Apr/16 15:31;githubbot;Github user eolivelli commented on the pull request:

    https://github.com/apache/bookkeeper/pull/37#issuecomment-213475785
  
    +1
    On my machine the patch fixes the AuditorLedgerCheckerTest test
","27/Apr/16 07:10;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/37#issuecomment-214990214
  
    LGTM. +1
","27/Apr/16 07:31;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/37
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocalBookKeeperTest seems to be silently failing,BOOKKEEPER-917,12956808,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,mmerli,fpj,fpj,07/Apr/16 09:23,16/May/16 21:47,14/Mar/19 02:39,10/Apr/16 04:00,4.4.0,,4.4.0,,,bookkeeper-server,,,0,,"I've noticed this while inspecting the output in jenkins:

{noformat}
Running org.apache.bookkeeper.client.BookKeeperCloseTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.074 sec
Running org.apache.bookkeeper.client.LocalBookKeeperTest
Running org.apache.bookkeeper.meta.GcLedgersTest
{noformat}

It sounds like {{LocalBookKeeperTest}} is failing silently. Is it hanging and timing out?

https://builds.apache.org/job/bookkeeper-master-git-pullrequest/57/console",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-07 09:44:19.379,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:54 UTC 2016,,,,,,0|i2vrw7:,9223372036854775807,,,,,,,,"07/Apr/16 09:44;eolivelli;I took a fast look, thsi is the error, introduced with 
{noformat}
b1c12c0 - Ivan Kelly <ivank@yahoo-inc.com> 5-apr-2016
BOOKKEEPER-901: Authentication framework
{noformat}

{code}
java.lang.NullPointerException
	at org.apache.bookkeeper.proto.AuthHandler$ServerSideHandler.channelOpen(AuthHandler.java:72)
	at org.jboss.netty.channel.SimpleChannelHandler.handleUpstream(SimpleChannelHandler.java:104)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelP
{code}",07/Apr/16 09:46;eolivelli;I have to yet looked at the new authentication system maybe we can pass a 'null' to authProviderFactory.newProvider in case of Local connection ?,"07/Apr/16 11:41;eolivelli;Looking at docs of Channel#getRemoteAddress it seems that in can return null in several cases, maybe we should handle null values in any point of BookKeeper code
I see it is used mostly for logging


","07/Apr/16 15:55;fpj;Right, but it doesn't pass even if I comment out the {{LOG.error}} line :

{noformat}
public void channelOpen(ChannelHandlerContext ctx,
                                ChannelStateEvent e) throws Exception {
            LOG.info(""Channel open {}"", ctx.getChannel());
            SocketAddress remote  = ctx.getChannel().getRemoteAddress();
            if (remote instanceof InetSocketAddress) {
                authProvider = authProviderFactory.newProvider((InetSocketAddress)remote,
                        new AuthHandshakeCompleteCallback());
            } else {
                //LOG.error(""Unknown socket type {} for {}"", remote.getClass(), remote);
            }
            super.channelOpen(ctx, e);
        }
{noformat}

There is something else broken with the test.","08/Apr/16 12:41;eolivelli;Just adding a check for LocalChannel fixes the test, mabye it would but I this it is better to search usages of getRemoteAddress and fix all the cases.


On ServerSideHandler class
{code}
@Override
        public void channelOpen(ChannelHandlerContext ctx,
                ChannelStateEvent e) throws Exception {
            if (ctx.getChannel() instanceof LocalChannel) {
                authProvider = authProviderFactory.newProvider(null,
                        new AuthHandshakeCompleteCallback());
            } else {
                SocketAddress remote = ctx.getChannel().getRemoteAddress();
                if (remote instanceof InetSocketAddress) {
                    authProvider = authProviderFactory.newProvider((InetSocketAddress) remote,
                            new AuthHandshakeCompleteCallback());
                } else {
                    LOG.error(""Unknown socket type {} for {}"", remote.getClass(), remote);
                }
            }
            super.channelOpen(ctx, e);
        }
{code}

On ClientSideHandler class
{code}
@Override
        public void channelConnected(ChannelHandlerContext ctx,
                ChannelStateEvent e)
                throws Exception {
            if (ctx.getChannel() instanceof LocalChannel) {
                authProvider = authProviderFactory.newProvider(null,
                            new AuthHandshakeCompleteCallback(ctx));
                    authProvider.init(new AuthRequestCallback(ctx));
            } else {
                SocketAddress remote = ctx.getChannel().getRemoteAddress();
                if (remote instanceof InetSocketAddress) {
                    authProvider = authProviderFactory.newProvider((InetSocketAddress) remote,
                            new AuthHandshakeCompleteCallback(ctx));
                    authProvider.init(new AuthRequestCallback(ctx));
                } else {
                    LOG.error(""Unknown socket type {} for {}"", remote.getClass(), remote);
                }
            }
            super.channelConnected(ctx, e);
        }
{code}",09/Apr/16 09:19;fpj;[~eolivelli] would you mind starting a pull request for this issue? it is important that we resolve this soon because the QA builds are getting stuck on this test and failing consistently as a consequence.,09/Apr/16 09:25;eolivelli;Sorry I can only on next Monday. If anyone can make it before....,09/Apr/16 21:19;mmerli;I think the problem here is that the {{AuthHandler}} doesn't expect the {{LocalChannel}} implementation. We should be good by passing a localhost address to the auth provider in that case.,"09/Apr/16 21:22;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/34

    BOOKKEEPER-917: LocalBookKeeperTest seems to be silently failing

    Fixing the `AuthHandler` to use localhost address when passed a `LocalChannel`

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-917

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/34.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #34
    
----
commit b18f53d0ab73881a3ddbb484df7bb9f16470448c
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-04-09T21:20:32Z

    BOOKKEEPER-917: LocalBookKeeperTest seems to be silently failing

----
","10/Apr/16 00:35;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/34#issuecomment-207890967
  
    It looks like the test failures are already covered in other PRs/Jiras
","10/Apr/16 03:57;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/34#issuecomment-207913267
  
    the change looks good to me. +1. the jekins passed on LocalBookKeeperTest.
","10/Apr/16 03:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/34
",10/Apr/16 04:00;hustlmsp;merged in b42d8db2b03079ce65d603d808442297ad759433,"10/Apr/16 07:31;githubbot;Github user eolivelli commented on the pull request:

    https://github.com/apache/bookkeeper/pull/34#issuecomment-207939556
  
    +1 for me the change is good. Maybe we can continue working on local addresses in next release
","10/Apr/16 13:09;hudson;FAILURE: Integrated in bookkeeper-master #1341 (See [https://builds.apache.org/job/bookkeeper-master/1341/])
BOOKKEEPER-917: LocalBookKeeperTest seems to be silently failing (sijie: rev b42d8db2b03079ce65d603d808442297ad759433)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReadOnlyBookieTest.testBookieShouldTurnWritableFromReadOnly is intermettently failing,BOOKKEEPER-914,12956594,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ayegorov,mmerli,mmerli,06/Apr/16 18:38,16/May/16 21:47,14/Mar/19 02:39,07/Apr/16 19:56,,,4.4.0,,,,,,0,,"I've seen it failing a few times and it seems different that BOOKKEEPER-774.

https://builds.apache.org/job/bookkeeper-master-git-pullrequest/57/testReport/junit/org.apache.bookkeeper.test/ReadOnlyBookieTest/testBookieShouldTurnWritableFromReadOnly/

{noformat}
Error Message

Should fail to create a ledger since there isn't enough bookies alive.
Stacktrace

java.lang.AssertionError: Should fail to create a ledger since there isn't enough bookies alive.
	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.bookkeeper.test.ReadOnlyBookieTest.testBookieShouldTurnWritableFromReadOnly(ReadOnlyBookieTest.java:137)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.lang.Thread.run(Thread.java:745)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-07 03:46:14.122,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:32 UTC 2016,,,,,,0|i2vqkv:,9223372036854775807,,,,,,,,07/Apr/16 03:46;arunmk;[~mmerli] I believe [~ayegorov] has a fix for this. Could you please add him as a contributor so that it can be assigned to him ?,"07/Apr/16 03:51;mmerli;Sure, added and assigned","07/Apr/16 18:55;githubbot;GitHub user dlg99 opened a pull request:

    https://github.com/apache/bookkeeper/pull/32

    BOOKKEEPER-914 testBookieShouldTurnWritableFromReadOnly flapping

    BOOKKEEPER-914 fixed testBookieShouldTurnWritableFromReadOnly flapping. 
    Now test waits for bookie to transition to read-only.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dlg99/bookkeeper bugfix/BOOKKEEPER-914

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/32.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #32
    
----
commit 7ea874051ac7ff81883a9b33f74e71f22ad78e82
Author: Andrey Yegorov <ayegorov@salesforce.com>
Date:   2016-04-07T18:52:44Z

    BOOKKEEPER-914 fixed testBookieShouldTurnWritableFromReadOnly flapping. Now test waits for bookie to transition to read-only.

----
",07/Apr/16 18:58;ayegorov;[~mmerli] I created a pull request. Please review/merge.,07/Apr/16 19:01;jujjuri;+1,"07/Apr/16 19:03;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/32#issuecomment-207051289
  
    lgtm. +1
","07/Apr/16 19:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/32
","07/Apr/16 19:56;mmerli;Issue resolved by pull request 32
[https://github.com/apache/bookkeeper/pull/32]","08/Apr/16 13:39;hudson;FAILURE: Integrated in bookkeeper-master #1339 (See [https://builds.apache.org/job/bookkeeper-master/1339/])
BOOKKEEPER-914: (mmerli: rev 3efde26e0510be38237c73a7bfeeb105f25d8dbe)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flakiness in TestBackwardCompat,BOOKKEEPER-913,12956192,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,mmerli,mmerli,mmerli,05/Apr/16 16:02,27/Jan/17 18:24,14/Mar/19 02:39,10/Apr/16 03:20,,,4.4.0,,,,,,0,,"This test is intermittently failing. It could be related to a timing issue, given that it fails more frequently in Jenkins compared to running the test on the laptop.

{noformat}
Failed tests:   testCompat410(org.apache.bookkeeper.test.TestBackwardCompat): Shouldn't be able to write
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-06 17:03:58.518,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 27 18:24:59 UTC 2017,,,,,,0|i2vo3r:,9223372036854775807,,,,,,,,06/Apr/16 17:02;mmerli;The problem appears to be related to a Bookie instance not being shutdown in a previous tests and that makes the write operation to succeed while the test expects that to fail.,"06/Apr/16 17:02;mmerli;..so, the test it's intermittently failing, because it depends on which bookie gets chosen for the test","06/Apr/16 17:03;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/31

    BOOKKEEPER-913: Fix flakiness in TestBackwardCompat

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-913

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/31.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #31
    
----
commit 33f6c7391ef07fa6fa96abc7d79c4a33817b9b00
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-04-06T17:03:08Z

    BOOKKEEPER-913: Fix flakiness in TestBackwardCompat

----
","10/Apr/16 03:17;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/31#issuecomment-207905502
  
    the change looks good. +1
","10/Apr/16 03:20;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/31
","10/Apr/16 03:20;hustlmsp;Issue resolved by pull request 31
[https://github.com/apache/bookkeeper/pull/31]","10/Apr/16 13:09;hudson;FAILURE: Integrated in bookkeeper-master #1341 (See [https://builds.apache.org/job/bookkeeper-master/1341/])
BOOKKEEPER-913: Fix flakiness in TestBackwardCompat (sijie: rev f2bc62b85e9bb855416fa4ea424cfd19ae9944e5)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,"27/Jan/17 18:23;reddycharan18@gmail.com;[~merlimat] [~mmerli] [~sijie@apache.org] [~hustlmsp]

This testcase is still flapping in Jenkin builds and local runs. ",27/Jan/17 18:24;reddycharan18@gmail.com;I think this bug needs to be reopened.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix TestReplicationWorker test failures,BOOKKEEPER-911,12955528,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,arunmk,arunmk,02/Apr/16 17:38,16/May/16 21:47,14/Mar/19 02:39,27/Apr/16 07:01,4.3.2,,4.4.0,,,bookkeeper-auto-recovery,,,0,tests,"Currently we have the following test failures in master branch:
Results :

Failed tests:   testRWZKSessionLost[0](org.apache.bookkeeper.replication.TestReplicationWorker): Replication worker should have shut down
  testRWZKSessionLost[1](org.apache.bookkeeper.replication.TestReplicationWorker): Replication worker should have shut down
  testRWZKSessionLost[2](org.apache.bookkeeper.replication.TestReplicationWorker): Replication worker should have shut down

Tests in error: 
  testRWShutdownOnLocalBookieReadonlyTransition[0](org.apache.bookkeeper.replication.TestReplicationWorker): test timed out after 20000 milliseconds
  testRWShutdownOnLocalBookieReadonlyTransition[1](org.apache.bookkeeper.replication.TestReplicationWorker): test timed out after 20000 milliseconds
  testRWShutdownOnLocalBookieReadonlyTransition[2](org.apache.bookkeeper.replication.TestReplicationWorker): test timed out after 20000 milliseconds

Tests run: 654, Failures: 3, Errors: 3, Skipped: 0
",,,,,,,,,,,,,,,BOOKKEEPER-594,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-03 04:05:02.612,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:47 UTC 2016,,,,,,0|i2vk0f:,9223372036854775807,,,,,,,,03/Apr/16 04:05;rakeshr;Thanks [~arunmk] for working on this. I could see BOOKKEEPER-594 has changed the {{ReplicationWorker#run()}} exception handling behaviors. We could modify the tests by enabling {{BookKeeperClusterTestCase#setAutoRecoveryEnabled(true)}} and expire the zk session rather than simply stopping zk cluster. Probably you can refer [TestBookieWatcher.java#L96|https://github.com/apache/bookkeeper/blob/master/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestBookieWatcher.java#L96] to signal zk session expired in BK tests.,"03/Apr/16 04:11;rakeshr;On a second thought - while correcting the test case, I think you can take a call to enable BookKeeperClusterTestCase#setAutoRecoveryEnabled(true) or not . It may not be required.",03/Apr/16 18:45;arunmk;Thanks [~rakeshr]. I'll take a look at the code and try out the fixes.,"04/Apr/16 06:38;arunmk;So the main difference now is that when we get the {{UnavailableException}} due to Zookeeper being absent, we {{waitBackOffTime()}} and continue. This is different from the previous code where the {{shutdown()}} would be called. ","04/Apr/16 16:40;arunmk;It looks like the functionality of {{ReplicationWorker}} after the fix for [BOOKKEEPER-594|https://issues.apache.org/jira/browse/BOOKKEEPER-594] is to not to shutdown but to let the {{AutoRecoveryMain}} daemon do the job. Since the current tests directly create the {{ReplicationWorker}} we run into these issues. Some options are:
# Use the {{AutoRecoveryMain}} methods so that we can use the Zookeeper session-expiry watcher it creates, and also use its shutdown methods. Such cases are already covered in {{AutoRecoveryMainTest}}.
# What is the intent behind the removal of the {{shutdown()}} from the {{UnavailableBookieHandling}} ? Is it the same as mentioned above ? Probably we could change the code flow there.

[~rakeshr], [~merlimat] could you please advise ?","04/Apr/16 17:29;arunmk;[~merlimat], the reason I ask this is: as per the comments, the {{ReplicationWorker}} should shutdown in some cases but the code has a change from [https://issues.apache.org/jira/browse/BOOKKEEPER-594] to explicitly not do it. So it will be good to know if we should fix the tests or fix the code. For example, one of the failing tests says:
{noformat}
    /**
     * Test that if the local bookie turns out to be readonly, then no point in running RW. So RW should shutdown.
     */
{noformat}

And the code explicitly has a change to wait for the bookie to become writeable in case there is a {{BKWriteOnReadOnlyBookieException}}.","05/Apr/16 07:11;rakeshr;Thanks [~arunmk], good analysis.

bq. the ReplicationWorker should shutdown in some cases but the code has a change from BOOKKEEPER-594 to explicitly not do it. So it will be good to know if we should fix the tests or fix the code
Like described in BK-594, the idea is not to shutdown the ReplicationWorker due to an error contacting ZooKeeper, instead it should wait for some backoff time and continue running. With this change all the shutdown decisions are unified to one place - DeathWatcher daemon, which is responsible for taking any shutdown action. yes, we should fix the failing test cases.

bq. Use the AutoRecoveryMain methods so that we can use the Zookeeper session-expiry watcher it creates, and also use its shutdown methods. Such cases are already covered in AutoRecoveryMainTest.
Here we need ZK reference to simulate disconnection or expiry. You can use AutoRecoveryMain to get ZK handle or pass zookeeper object reference to RW and simulate session expiry.

{code}
new ReplicationWorker(zk, baseConf, getBookie(0))
{code}

 Test cases should verify that: case-1) ReplicationWorker is still running even after hitting ZK#Disconnected event. case-2) Should be able to perform the operation once ZK connection re-establishes after a disconnection. case-3) on zk session expiry watch notification, DeathWatcher will bring down RW.  I think we can remove the unit test which is already taken care through another well written test case. I meant, case-3 session expiry behavior is already covered through {{AutoRecoveryMainTest#testAutoRecoverySessionLoss}}.","05/Apr/16 07:50;mmerli;[~rakeshr] [~arunmk] Thanks for looking into it. I think that for {{testRWShutdownOnLocalBookieReadonlyTransition}} the fix should be to account for the new state of the replicator staying ""up"" while the bookie is in read-only and check that state. 

And of for the {{testRWZKSessionLost}}, I think we should rename it into {{testRWZKConnectionLost}} and just bounce quickly the ZK server to verify the disconnection/reconnection.","05/Apr/16 07:51;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/29

    BOOKKEEPER-911: Fix TestReplicationWorker tests in master

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-911

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/29.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #29
    
----
commit 999ab9205e12456ea2cdc826d0962a3137e356ac
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-04-05T07:50:16Z

    BOOKKEEPER-911: Fix TestReplicationWorker tests in master

----
","05/Apr/16 16:03;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-205871553
  
    Tests failures are unrelated with this fix. I created a separate Jira for them https://issues.apache.org/jira/browse/BOOKKEEPER-913
","05/Apr/16 16:56;arunmk;Thanks [~mmerli], [~rakeshr]. I was going along the lines of doing something similar to {{AutoRecoveryMainTest}} and had initiated the {{ReplicationWorker}} using the {{startAutoRecovery}} of the daemon. That daemon shuts down the {{ReplicationWorker}} on Zookeeper session-expiry, but the second case of read-only-bookie transition will not be easy to accomplish. But it looks like the pull of [~mmerli] does what you mention above, so I'll stop working on the change.","05/Apr/16 17:53;githubbot;Github user rakeshadr commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-205918589
  
    Thanks for the patch. Apart from the above comments, overall changes looks good.
","05/Apr/16 18:04;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-205923031
  
    @rakeshadr Updated
","10/Apr/16 03:55;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-207913174
  
    the change looks good to me. +1. the jenkins seems to pass on tests, and it failures on pulling sunfire plugin. 
    
    If I didn't hear any objections until Monday, I will merge this PR
","11/Apr/16 12:42;githubbot;Github user fpj commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-208321074
  
    According to the latest build, this is still failing:
    ```
        org.apache.bookkeeper.replication.AuditorLedgerCheckerTest.testReadOnlyBookieExclusionFromURLedgersCheck[0]
        org.apache.bookkeeper.replication.TestReplicationWorker.testRWZKSessionLost[0]
        org.apache.bookkeeper.replication.TestReplicationWorker.testRWShutdownOnLocalBookieReadonlyTransition[0]
        org.apache.bookkeeper.replication.TestReplicationWorker.testRWZKSessionLost[1]
        org.apache.bookkeeper.replication.TestReplicationWorker.testRWShutdownOnLocalBookieReadonlyTransition[1]
        org.apache.bookkeeper.replication.TestReplicationWorker.testRWZKSessionLost[2]
        org.apache.bookkeeper.replication.TestReplicationWorker.testRWShutdownOnLocalBookieReadonlyTransition[2]
    ```
","11/Apr/16 17:48;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-208470391
  
    There is something wrong with the build. The PR hash ref is 38ca7258bd1f011282b7521f8bd9128b0f1ffa8b, but the jenkins build https://builds.apache.org/job/bookkeeper-master-git-pullrequest/68/ did check-out a different revision: b42d8db2b03079ce65d603d808442297ad759433
    
    @fpj Did you manually triggered the ""rebuild"" on Jenkins? It looks like it's building either master or some other revision, but not the one from the PR again.
    
    If you look at the job triggered by my commit:
    https://builds.apache.org/job/bookkeeper-master-git-pullrequest/60/
    
    The only failure there is the LocalBookieTest that's silently failing and fixed in master already.
    
    I'll rebase on last master version to get a clean run.
","11/Apr/16 19:59;githubbot;Github user fpj commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-208530803
  
    @merlimat I did retrigger it
","11/Apr/16 20:26;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/29#issuecomment-208544151
  
    @fpj @merlimat checking the original build : https://builds.apache.org/job/bookkeeper-master-git-pullrequest/60/ it passed.
","16/Apr/16 08:42;zhaijia;Manually test this patch on my machine, and it works, here is the result:
without patch:
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.bookkeeper.replication.TestReplicationWorker
Tests run: 27, Failures: 3, Errors: 3, Skipped: 0, Time elapsed: 128.776 sec <<< FAILURE!
Results :
Failed tests:   testRWZKSessionLost[0](org.apache.bookkeeper.replication.TestReplicationWorker): Replication worker should have shut down
  testRWZKSessionLost[1](org.apache.bookkeeper.replication.TestReplicationWorker): Replication worker should have shut down
  testRWZKSessionLost[2](org.apache.bookkeeper.replication.TestReplicationWorker): Replication worker should have shut down

Tests in error:
  testRWShutdownOnLocalBookieReadonlyTransition[0](org.apache.bookkeeper.replication.TestReplicationWorker): test timed out after 20000 milliseconds
  testRWShutdownOnLocalBookieReadonlyTransition[1](org.apache.bookkeeper.replication.TestReplicationWorker): test timed out after 20000 milliseconds
  testRWShutdownOnLocalBookieReadonlyTransition[2](org.apache.bookkeeper.replication.TestReplicationWorker): test timed out after 20000 milliseconds

Tests run: 27, Failures: 3, Errors: 3, Skipped: 0

with patch:
-------------------------------------------------------
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.bookkeeper.replication.TestReplicationWorker
Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 43.998 sec

Results :
Tests run: 27, Failures: 0, Errors: 0, Skipped: 0","27/Apr/16 07:01;hustlmsp;Issue resolved by pull request 29
[https://github.com/apache/bookkeeper/pull/29]","27/Apr/16 07:01;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/29
","27/Apr/16 13:29;hudson;FAILURE: Integrated in bookkeeper-master #1358 (See [https://builds.apache.org/job/bookkeeper-master/1358/])
BOOKKEEPER-911: Fix TestReplicationWorker tests in master (sijie: rev 91595fc04ac6168b5a652e803e55caadae757f74)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In LocalBookkeeper, Zookeeper server and client use different host addresses",BOOKKEEPER-910,12955364,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,arunmk,arunmk,arunmk,01/Apr/16 17:31,16/May/16 21:47,14/Mar/19 02:39,11/Apr/16 20:39,4.3.2,,4.4.0,,,bookkeeper-server,,,0,easyfix,"In LocalBookkeeper, the Zookeeper server is started at 127.0.0.1 and the client tries to derive the localhost address using getLocalHost API. This has a few issues:
1. There is a possibility of using the ipv6 address for localhost and hence the client will try connecting to ::1, 2181 rather than 127.0.0.1:2181 (this happens commonly on OSX)
2. The getLocalHost API could sometimes return non-loopback addresses as well.

Since the 'localbookie' mode is used with the zookeeper in the same machine, we should use loopback addresses for all invocations. The patch does just that.

 
",,,,,,,,,,,,,,,BOOKKEEPER-921,,,,11/Apr/16 19:58;arunmk;0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch;https://issues.apache.org/jira/secure/attachment/12798092/0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch,05/Apr/16 18:30;arunmk;0001-Use-loopback-IP-address-for-Zookeeper-in-LocalBookke.patch;https://issues.apache.org/jira/secure/attachment/12797141/0001-Use-loopback-IP-address-for-Zookeeper-in-LocalBookke.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2016-04-01 18:03:39.68,,,no_permission,,,,,Patch,,,,,,,,9223372036854775807,,,Mon May 16 21:47:51 UTC 2016,,,,,,0|i2vj07:,9223372036854775807,,,,,,,,"01/Apr/16 17:32;arunmk;There is a similar patch needed for the bookies as well, but due to a slightly different problem. I will create another bug for that.",01/Apr/16 17:32;arunmk;Patch attached.,"01/Apr/16 18:03;hadoopqa;Testing JIRA BOOKKEEPER-910


Patch [0001-For-Zookeeper-in-LocalBookkeeper-use-loopback-addres.patch|https://issues.apache.org/jira/secure/attachment/12796559/0001-For-Zookeeper-in-LocalBookkeeper-use-loopback-addres.patch] downloaded at Fri Apr  1 17:38:26 UTC 2016

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 12 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 658
.    Tests failed: 3
.    Tests errors: 3

.    The patch failed the following testcases:

.      testRWZKSessionLost[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWZKSessionLost[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWZKSessionLost[2](org.apache.bookkeeper.replication.TestReplicationWorker)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/979/",01/Apr/16 21:43;arunmk;These tests seem to be failing on master as well.,05/Apr/16 18:28;arunmk;Pull for better readability: https://github.com/arunmk/bookkeeper/pull/1,05/Apr/16 18:29;arunmk;Attaching a new patch.,"05/Apr/16 19:55;mmerli;Looks good. Merged at 19a5efe21ca0b33156a405f1084ddaa9ba4b28f5

[~arunmk] You can also create PRs directly at https://github.com/apache/bookkeeper and we can easily merge them. ",05/Apr/16 19:59;arunmk;Thanks [~mmerli]. That will be easier for me too.,"05/Apr/16 20:48;hadoopqa;Testing JIRA BOOKKEEPER-910


Patch [0001-Use-loopback-IP-address-for-Zookeeper-in-LocalBookke.patch|https://issues.apache.org/jira/secure/attachment/12797141/0001-Use-loopback-IP-address-for-Zookeeper-in-LocalBookke.patch] downloaded at Tue Apr  5 19:53:48 UTC 2016

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 13 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 667
.    Tests failed: 3
.    Tests errors: 3

.    The patch failed the following testcases:

.      testRWZKSessionLost[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWZKSessionLost[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWZKSessionLost[2](org.apache.bookkeeper.replication.TestReplicationWorker)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/980/","06/Apr/16 13:39;hudson;FAILURE: Integrated in bookkeeper-master #1337 (See [https://builds.apache.org/job/bookkeeper-master/1337/])
BOOKKEEPER-910: In LocalBookkeeper, Zookeeper server and client use (mmerli: rev 19a5efe21ca0b33156a405f1084ddaa9ba4b28f5)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
","11/Apr/16 19:58;arunmk;An issue was found with this change. The fix is in the attached patch: 0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch

@mmerli",11/Apr/16 19:59;arunmk;Patch attached: 0001-BOOKKEEPER-910-fix-InetAddress-InetAddress.getHostAd.patch,11/Apr/16 20:28;hustlmsp;[~arunmk] it would be good to open a new jira rather than reopening it.,11/Apr/16 20:38;arunmk;[~sijie@apache.org]: created BOOKKEEPER-921 and closed this.,16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZooKeeper of LocalBookkeeper should use the correct tickTime,BOOKKEEPER-909,12955079,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,arunmk,arunmk,arunmk,31/Mar/16 20:28,16/May/16 21:47,14/Mar/19 02:39,31/Mar/16 20:56,4.3.2,,4.4.0,,,bookkeeper-server,,,0,easyfix,"ZooKeeperServer should use the correct value for tickTime in LocalBookie. Currently the code uses the port-number 2181, and since it's near to the DEFAULT_TICK_TIME it works.",,,,,,,,,,,,,,,,,,,31/Mar/16 20:33;arunmk;0001-ZooKeeperServer-should-use-the-correct-value-for-tic.patch;https://issues.apache.org/jira/secure/attachment/12796398/0001-ZooKeeperServer-should-use-the-correct-value-for-tic.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-03-31 20:56:05.539,,,no_permission,,,,,Patch,,,,,,,,9223372036854775807,,,Mon May 16 21:47:39 UTC 2016,,,,,,0|i2vh8v:,9223372036854775807,,,,,,,,31/Mar/16 20:33;arunmk;Single-line small change.,"31/Mar/16 20:56;mmerli;Merged in master at e32c38890ffbd0291e24e2b3f2625374b27f1f67
","01/Apr/16 18:30;hudson;FAILURE: Integrated in bookkeeper-master #1332 (See [https://builds.apache.org/job/bookkeeper-master/1332/])
BOOKKEEPER-909: ZooKeeper of LocalBookkeeper should use the correct (mmerli: rev e32c38890ffbd0291e24e2b3f2625374b27f1f67)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
",01/Apr/16 20:20;arunmk;I think the failure is not related to the commit.,16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test BookieInitializationTest.testDuplicateBookieServerStartup fails on non-english machines,BOOKKEEPER-904,12949941,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,eolivelli,eolivelli,eolivelli,14/Mar/16 16:33,16/May/16 21:47,14/Mar/19 02:39,06/Apr/16 16:39,4.4.0,,4.4.0,,,build,,,0,,"The test checks for message ""Address already in use"", which is ""Indirizzo già in uso""  in Italian.
Maybe it is enough to catch BindException and remove the assertion

{code}
Assert.assertTrue(""BKServer allowed duplicate startups!"",
                    ce.getCause().getMessage().contains(""Address already in use""));
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-06 11:30:42.124,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:39 UTC 2016,,,,,,0|i2um13:,9223372036854775807,,,,,,,,"06/Apr/16 11:30;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/30

    BOOKKEEPER-904 test BookieInitializationTest.testDuplicateBookieServerStartup fails on non-english machines

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/30.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #30
    
----
commit 50076a48c84ce05a5acb67761408533b09eb94d1
Author: eolivelli <eolivelli@gmail.com>
Date:   2016-04-06T11:29:22Z

    BOOKKEEPER-904 test BookieInitializationTest.testDuplicateBookieServerStartup fails on non-english machines

----
","06/Apr/16 16:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/30
",06/Apr/16 17:07;eolivelli;Thanks,"07/Apr/16 13:39;hudson;FAILURE: Integrated in bookkeeper-master #1338 (See [https://builds.apache.org/job/bookkeeper-master/1338/])
BOOKKEEPER-904: (mmerli: rev 3fe7e7dad1a1a5a1ac958ef245f244d36523c0ea)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
","09/Apr/16 15:24;githubbot;Github user fpj commented on the pull request:

    https://github.com/apache/bookkeeper/pull/30#issuecomment-207806494
  
    +1, LGTM.
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failures in EntryLogTest,BOOKKEEPER-902,12948158,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,08/Mar/16 20:46,16/May/16 21:47,14/Mar/19 02:39,14/Mar/16 19:12,,,4.4.0,,,,,,0,,"There are 2 tests consistently failing in EntryLogTest

{noformat} 
testRecoverFromLedgersMapOnV0EntryLog(org.apache.bookkeeper.bookie.EntryLogTest)
testRecoverFromLedgersMap(org.apache.bookkeeper.bookie.EntryLogTest)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-08 21:20:45.205,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:36 UTC 2016,,,,,,0|i2ucyf:,9223372036854775807,,,,,,,,"08/Mar/16 21:20;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/22

    BOOKKEEPER-902: Test failures in EntryLogTest

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-902

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/22.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #22
    
----
commit b66998dd2e4e7811c5e21bd84e0accd551b0dbcc
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-03-08T21:19:57Z

    BOOKKEEPER-902: Test failures in EntryLogTest

----
","14/Mar/16 05:38;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/22#issuecomment-196151999
  
    +1 good catch.
","14/Mar/16 05:39;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/22
","14/Mar/16 13:07;hudson;FAILURE: Integrated in bookkeeper-master #1314 (See [https://builds.apache.org/job/bookkeeper-master/1314/])
BOOKKEEPER-902: Test failures in EntryLogTest (sijie: rev 410ff7263a477d4b75a43d006adde3549225a4b9)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
read only bookie runs replicator and does not release the under replicated lock after failing,BOOKKEEPER-900,12945332,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sboobna,sboobna,sboobna,29/Feb/16 03:46,16/May/16 21:47,14/Mar/19 02:39,08/Mar/16 06:16,4.3.2,,4.4.0,,,bookkeeper-auto-recovery,,,0,,"ReplicationWorker throws BkWriteOnReadOnlyBookieException here: https://github.com/apache/bookkeeper/blob/master/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java#L255
and does not release the under replicated lock.

Solution:
Release the under replicated lock before throwing BkWriteOnReadOnlyBookieException and make the replication worker wait till the bookie becomes writable again.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-29 18:27:13.314,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:24 UTC 2016,,,,,,0|i2tw2v:,9223372036854775807,,,,,,,,"29/Feb/16 18:27;githubbot;GitHub user sboobna opened a pull request:

    https://github.com/apache/bookkeeper/pull/17

    BOOKKEEPER-900: release underreplicated lock when replicating to read…

    … only bookie

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sboobna/bookkeeper BOOKKEEPER-900

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/17.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #17
    
----
commit 8c50fd8db4808197112160cdc0faf8a596f2f2b5
Author: Siddharth Boobna <sboobna@yahoo-inc.com>
Date:   2016-02-17T00:49:01Z

    BOOKKEEPER-900: release underreplicated lock when replicating to read only bookie
    
    Change-Id: I46782877af3db29b29c5e1585e54757086763bf0

----
","08/Mar/16 06:15;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/17#issuecomment-193622509
  
    the change looks good to me +1
","08/Mar/16 06:16;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/17
","08/Mar/16 06:16;hustlmsp;Issue resolved by pull request 17
[https://github.com/apache/bookkeeper/pull/17]",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie should return to read-write mode once the disk usage drops before the threshold,BOOKKEEPER-899,12945296,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sboobna,sboobna,sboobna,28/Feb/16 19:16,16/May/16 21:47,14/Mar/19 02:39,08/Mar/16 06:14,4.3.2,,4.4.0,,,bookkeeper-server,,,0,,"Once a bookie goes above the diskUsageThreshold and becomes readOnly, it will never go back to readWrite even if the disk usage drops significantly.
When the LedgerDirsMonitor gets a NoWritableLedgerDirException, it will put the bookie in read only mode, but will also stop monitoring and never goes back to read-write mode when the disk usage drops below threshold.

Solution:
The LedgerDirsMonitor thread should not break out of the while loop when it gets NoWritableLedgerDirException, and should continue monitoring the directories.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-29 18:39:15.136,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:38 UTC 2016,,,,,,0|i2tvuv:,9223372036854775807,,,,,,,,"29/Feb/16 18:39;githubbot;GitHub user sboobna opened a pull request:

    https://github.com/apache/bookkeeper/pull/18

    BOOKKEEPER-899: continue monitoring the ledger disk after it goes int…

    …o read only mode

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sboobna/bookkeeper BOOKKEEPER-899

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/18.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #18
    
----
commit 6ec6d04e373bbc21e523fa5fca926509ac98bf7a
Author: Siddharth Boobna <sboobna@yahoo-inc.com>
Date:   2016-02-16T22:31:32Z

    BOOKKEEPER-899: continue monitoring the ledger disk after it goes into read only mode
    
    Change-Id: I7f10a2c45710cce39cc4706a1ac6becc3628c650

----
","08/Mar/16 06:13;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/18#issuecomment-193621938
  
    the change looks good to me. +1
","08/Mar/16 06:14;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/18
","08/Mar/16 06:14;hustlmsp;Issue resolved by pull request 18
[https://github.com/apache/bookkeeper/pull/18]",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Underreplication doesn't get triggered when a read only bookie is shut down,BOOKKEEPER-898,12945294,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sboobna,sboobna,sboobna,28/Feb/16 19:04,16/May/16 21:47,14/Mar/19 02:39,08/Mar/16 06:19,4.3.2,,4.4.0,,,bookkeeper-auto-recovery,,,0,,"The auditor doesn't pick up a bookie shut down from read only mode. The watcher on child nodes of ""/ledgers/available"" node on zk doesn't get triggered if there is any change in the children of any of those child nodes (""/ledgers/available/readonly"").

Solution:
The auditor needs to set another child watcher on read only bookie node on zk.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-02 02:23:30.601,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:34 UTC 2016,,,,,,0|i2tvuf:,9223372036854775807,,,,,,,,"02/Mar/16 02:23;githubbot;GitHub user sboobna opened a pull request:

    https://github.com/apache/bookkeeper/pull/19

    BOOKKEEPER-898: listen to read only bookie changes also in auditor

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sboobna/bookkeeper BOOKKEEPER-898

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/19.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #19
    
----
commit 287dc536580f6c3c99d1f866634a44d3f62e0674
Author: Siddharth Boobna <sboobna@yahoo-inc.com>
Date:   2016-02-19T20:03:07Z

    BOOKKEEPER-898: listen to read only bookie changes also in auditor
    
    Change-Id: I0c0bb0e8bc2cbf9004aa2144f002d8200d7a1c6b
    
    Conflicts:
    	bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java

----
","08/Mar/16 06:17;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/19#issuecomment-193622796
  
    the change looks good to me. +1
","08/Mar/16 06:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/19
","08/Mar/16 13:09;hudson;FAILURE: Integrated in bookkeeper-master #1308 (See [https://builds.apache.org/job/bookkeeper-master/1308/])
BOOKKEEPER-898: listen to read only bookie changes also in auditor (sijie: rev a77042db1b024b5cb2bdd2a5f49ea18a43bc036b)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix findbugs warnings and missing apache license header,BOOKKEEPER-897,12941500,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,23/Feb/16 18:56,16/May/16 21:47,14/Mar/19 02:39,23/Feb/16 23:39,,,4.4.0,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-23 19:31:01.787,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:49 UTC 2016,,,,,,0|i2t8f3:,9223372036854775807,,,,,,,,"23/Feb/16 19:31;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/15

    BOOKKEEPER-897: Fix findbugs warnings and missing apache license header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper sijie/BOOKKEEPER-897

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/15.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #15
    
----
commit ad36c9ad66bd41bbea01f56aaba8e9446787ecc6
Author: Sijie Guo <sijie@apache.org>
Date:   2016-02-23T18:51:38Z

    fix

commit cee48860fdead3da1704d627eaead44f4c33a3e2
Author: Sijie Guo <sijie@apache.org>
Date:   2016-02-23T19:29:21Z

    Added missing apache license header

----
","23/Feb/16 20:17;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/15#issuecomment-187885196
  
    :+1:
","23/Feb/16 23:34;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/15
",23/Feb/16 23:39;mmerli;Merged in master at 9bd9e061,"24/Feb/16 13:08;hudson;FAILURE: Integrated in bookkeeper-master #1296 (See [https://builds.apache.org/job/bookkeeper-master/1296/])
BOOKKEEPER-897: Fix findbugs warnings and missing apache license header (mmerli: rev 9bd9e061bc225f36d8c9d516d4265aa209e4e90e)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LocalBookieEnsemblePlacementPolicy.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookie exited with status 0 on journal I/O exception,BOOKKEEPER-893,12937420,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,sboobna,sboobna,sboobna,08/Feb/16 06:03,16/May/16 21:47,14/Mar/19 02:39,09/Feb/16 07:37,4.3.2,,4.4.0,,,bookkeeper-server,,09/Feb/16 00:00,0,,"{noformat}
06:13:32.041 [BookieJournal-3181] ERROR org.apache.bookkeeper.bookie.Journal - I/O exception in Journal thread!
java.nio.channels.ClosedChannelException: null
        at sun.nio.ch.FileChannelImpl.ensureOpen(FileChannelImpl.java:110) ~[na:1.8.0_60]
        at sun.nio.ch.FileChannelImpl.position(FileChannelImpl.java:253) ~[na:1.8.0_60]
        at org.apache.bookkeeper.bookie.Journal.run(Journal.java:964) ~[bookkeeper-server-4.3.1.33.jar:4.3.1]
06:13:32.041 [BookieJournal-3181] INFO  org.apache.bookkeeper.bookie.Journal - Journal exited loop!
06:13:32.041 [Bookie-3181] ERROR org.apache.bookkeeper.bookie.Bookie  - Journal manager quits unexpectedly.
06:13:32.042 [Bookie-3181] INFO  org.apache.bookkeeper.bookie.Bookie  - Triggering shutdown of Bookie-3181 with exitCode 5
06:13:32.042 [BookieShutdownTrigger] INFO  org.apache.bookkeeper.bookie.Bookie  - Shutting down Bookie-3181 with exitCode 5
06:13:32.044 [main] INFO  o.a.bookkeeper.proto.BookieServer    - Stop stats provider
06:13:32.045 [bookie-reg-0] INFO  org.apache.zookeeper.ZooKeeper       - Session: 0x14ff63dc02cbd02 closed
06:13:32.045 [bookie-reg-0-EventThread] INFO  org.apache.zookeeper.ClientCnxn      - EventThread shut down
06:13:32.045 [BookieShutdownTrigger] INFO  org.apache.bookkeeper.bookie.Journal - Shutting down Journal
06:13:32.046 [Thread-2] INFO  o.a.bookkeeper.proto.BookieServer    - Shutting down BookieServer
06:13:32.046 [Thread-2] INFO  o.a.b.proto.BookieNettyServer        - Shutting down BookieNettyServer
06:13:32.046 [ForceWriteThread] ERROR org.apache.bookkeeper.bookie.Journal - ForceWrite thread interrupted
java.lang.InterruptedException: null
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2014) ~[na:1.8.0_60]
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2048) ~[na:1.8.0_60]
        at org.apache.bookkeeper.util.UnboundArrayBlockingQueue.take(UnboundArrayBlockingQueue.java:312) ~[bookkeeper-server-4.3.1.33.jar:4.3.1]
        at org.apache.bookkeeper.bookie.Journal$ForceWriteThread.run(Journal.java:448) ~[bookkeeper-server-4.3.1.33.jar:4.3.1]
...
06:13:32.184 [bookie-io-0] WARN  i.n.channel.DefaultChannelPipeline   - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
java.nio.channels.ClosedChannelException: null
{noformat}

When the bookie shuts down due to some exception, it exits with exitCode 0. 
We try to get the exitCode when calling System.exit() here:
https://github.com/apache/bookkeeper/blob/master/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java#L400

But the exitCode is set by the shutdown hook which is triggered by System.exit(). Thus, we will always exit with code 0.

Solution:
We explicitly call bookie shutdown to set the exit code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-08 06:53:09.432,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:49 UTC 2016,,,,,,0|i2sjin:,9223372036854775807,,,,,,,,"08/Feb/16 06:53;githubbot;GitHub user sid825 opened a pull request:

    https://github.com/apache/bookkeeper/pull/14

    BOOKKEEPER-893: explicitly call bk shutdown to set the exit code

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sid825/bookkeeper BOOKKEEPER-893

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/14.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #14
    
----
commit c59cb112dba963628b1cb651b64f3e832c6e30cc
Author: Siddharth Boobna <sboobna@yahoo-inc.com>
Date:   2016-02-08T06:27:12Z

    BOOKKEEPER-893: explicitly call bk shutdown to set the exit code
    
    Change-Id: Id223b8e78b63829d3681d5ca17dff01bb6cea8fe

----
","09/Feb/16 07:37;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/14
","09/Feb/16 07:37;hustlmsp;Issue resolved by pull request 14
[https://github.com/apache/bookkeeper/pull/14]","09/Feb/16 12:50;hudson;FAILURE: Integrated in bookkeeper-master #1281 (See [https://builds.apache.org/job/bookkeeper-master/1281/])
BOOKKEEPER-893: explicitly call bk shutdown to set the exit code (sijie: rev 63395a3e3d9bb253ea2745042631e44a3d195ea0)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Read entries failure should trigger callback only once,BOOKKEEPER-891,12937075,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,05/Feb/16 16:42,16/May/16 21:47,14/Mar/19 02:39,09/Feb/16 07:41,,,4.4.0,,,,,,0,,"When reading multiple entries with {code}LedgerHandle.asyncReadEntries(){code}, in case there is a read error, the callback is currently being invoked for each of the requested entries. 

Since a single ""success"" callback is expected, we should also have a single ""failure"" callback invocation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-05 16:47:15.588,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:49 UTC 2016,,,,,,0|i2she7:,9223372036854775807,,,,,,,,"05/Feb/16 16:47;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/12

    BOOKKEEPER-891: Read entries failure should trigger callback only once

    When reading multiple entries with `LedgerHandle.asyncReadEntries()`, in case there is a read error, the callback is currently being invoked for each of the requested entries.
    Since a single ""success"" callback is expected, we should also have a single ""failure"" callback invocation.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-891-read-callbacks

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/12.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #12
    
----
commit 58e62042b45a72b846e4d69184b9ea074c41f654
Author: Matteo Merli <mmerli@apache.org>
Date:   2015-12-02T01:35:04Z

    BOOKKEEPER-891: Read entries failure should trigger callback only once

----
","09/Feb/16 07:38;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/12#issuecomment-181746901
  
    The change looks good to me. +1
","09/Feb/16 07:40;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/12
",09/Feb/16 07:41;hustlmsp;committed as 9c937f5d814d4079b6134db361a0e2de1e37cd05 in master.,"09/Feb/16 12:50;hudson;FAILURE: Integrated in bookkeeper-master #1281 (See [https://builds.apache.org/job/bookkeeper-master/1281/])
BOOKKEEPER-891: Read entries failure should trigger callback only once (sijie: rev 9c937f5d814d4079b6134db361a0e2de1e37cd05)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrent modification exception when removing listener in Bookkeeper ZK ledger manager,BOOKKEEPER-890,12936459,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,03/Feb/16 19:59,16/May/16 21:47,14/Mar/19 02:39,09/Feb/16 07:24,4.3.2,,4.4.0,,,,,,0,,"The listener set is modified while iterating through it.

{noformat}
00:20:00.283 [main-EventThread] INFO  o.a.b.meta.AbstractZkLedgerManager   - Unregistered ledger metadata listener ReadOnlyLedgerHandle(lid = 10454, id = 839729832) on ledger 10454.
00:20:00.283 [main-EventThread] ERROR org.apache.zookeeper.ClientCnxn      - Error while calling watcher 
java.util.ConcurrentModificationException: null
        at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429) ~[na:1.8.0_60]
        at java.util.HashMap$KeyIterator.next(HashMap.java:1453) ~[na:1.8.0_60]
        at org.apache.bookkeeper.meta.AbstractZkLedgerManager.process(AbstractZkLedgerManager.java:207) ~[bookkeeper-server-4.3.1.36.jar:4.3.1]
        at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:522) [zookeeper-3.4.6.jar:3.4.6-1569965]
        at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:498) [zookeeper-3.4.6.jar:3.4.6-1569965]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-09 07:22:29.069,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:34 UTC 2016,,,,,,0|i2sdlb:,9223372036854775807,,,,,,,,03/Feb/16 20:07;mmerli;Pull request is at https://github.com/apache/bookkeeper/pull/9,"09/Feb/16 07:22;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/9#issuecomment-181742688
  
    the change looks good to me. +1
","09/Feb/16 07:23;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/9
",09/Feb/16 07:24;hustlmsp;committed as 626b7e8bb0b84271df97cfbf0a1b157c6cfe5a18 in master,"09/Feb/16 12:50;hudson;FAILURE: Integrated in bookkeeper-master #1281 (See [https://builds.apache.org/job/bookkeeper-master/1281/])
BOOKKEEPER-890: Concurrent modification exception when removing listener (sijie: rev 626b7e8bb0b84271df97cfbf0a1b157c6cfe5a18)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test timeout in bookkeeper-benchmark,BOOKKEEPER-883,12916308,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,25/Nov/15 23:29,16/May/16 21:47,14/Mar/19 02:39,09/Feb/16 07:16,,,4.3.2,4.4.0,,,,,0,,bookkeeper-benchmark tests usually timeout,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-04 19:27:12.287,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:33 UTC 2016,,,,,,0|i2oydr:,9223372036854775807,,,,,,,,"04/Feb/16 19:27;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/10

    BOOKKEEPER-883: Test timeout in bookkeeper-benchmark

    Problem:
    
    The BenchReadThroughputLatency is tight with FlatLedgerManager. so lots of assumptions are made based on how the znodes are changed when ledgers are created. There was a change introduced LedgerIdGenerator, which broke the assumptions that made by BenchReadThroughputLatency.
    
    Fix:
    
    - Use a hashset to cache processed ledgers on reacting on children changes
    - Remove unpredictable test on next ledger
    - Fix an error logging on FlatLedgerManager processing ledgers

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper BOOKKEEPER-883

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/10.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #10
    
----
commit e9961f2730495974b8cd322665b242fe2c90075f
Author: Sijie Guo <sijie@apache.org>
Date:   2016-02-04T19:12:57Z

    BOOKKEEPER-883: Test timeout in bookkeeper-benchmark
    
    Problem:
    
    The BenchReadThroughputLatency is tight with FlatLedgerManager. so lots of assumptions are made based on how the znodes are changed when ledgers are created. There was a change introduced LedgerIdGenerator, which broke the assumptions that made by BenchReadThroughputLatency.
    
    Fix:
    
    - Use a hashset to cache processed ledgers on reacting on children changes
    - Remove unpredictable test on next ledger
    - Fix an error logging on FlatLedgerManager processing ledgers

----
","04/Feb/16 21:13;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/10#issuecomment-180054024
  
    :+1: 
","09/Feb/16 07:12;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/10
",09/Feb/16 07:16;hustlmsp;committed as 8729d12be50295086e7440dfa5d0256abb7688d5 in master. ,"09/Feb/16 12:50;hudson;FAILURE: Integrated in bookkeeper-master #1281 (See [https://builds.apache.org/job/bookkeeper-master/1281/])
BOOKKEEPER-883: Test timeout in bookkeeper-benchmark (sijie: rev 8729d12be50295086e7440dfa5d0256abb7688d5)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java
* bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java
* bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential resource leak with unclosed LedgerManager in BookieShell,BOOKKEEPER-863,12852623,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,yuzhihong@gmail.com,yuzhihong@gmail.com,yuzhihong@gmail.com,06/Aug/15 17:05,16/May/16 21:47,14/Mar/19 02:39,12/Aug/15 02:01,,,4.4.0,,,,,,0,,"There're more than one occurrence.
Here is an example in ListLedgersCmd#runCmd():
{code}
                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);
                LedgerManager m = mFactory.newLedgerManager();
{code}
m is not closed upon leaving the method.",,,,,,,,,,,,,,,,,,,10/Aug/15 19:07;yuzhihong@gmail.com;bookkeeper-863-v2.patch;https://issues.apache.org/jira/secure/attachment/12749664/bookkeeper-863-v2.patch,10/Aug/15 17:19;yuzhihong@gmail.com;bookkeeper-863-v2.patch;https://issues.apache.org/jira/secure/attachment/12749642/bookkeeper-863-v2.patch,09/Aug/15 18:18;yuzhihong@gmail.com;bookkeeper-863.patch;https://issues.apache.org/jira/secure/attachment/12749481/bookkeeper-863.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2015-08-06 20:57:08.771,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:32 UTC 2016,,,,,,0|i2iff3:,9223372036854775807,,,,,,,,"06/Aug/15 20:57;fpj;hi [~tedyu], I think you're right, we should be calling close on the ledger manager instances, is that what you're suggesting? feel free to assign it to yourself if are interested in contributing a patch.","08/Aug/15 16:04;hadoopqa;Testing JIRA BOOKKEEPER-863


Patch [bookkeeper-863.patch|https://issues.apache.org/jira/secure/attachment/12749422/bookkeeper-863.patch] downloaded at Sat Aug  8 16:01:09 UTC 2015

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",08/Aug/15 16:08;yuzhihong@gmail.com;I generated the patch based on freshly checked out master branch.,09/Aug/15 17:20;hustlmsp;[~tedyu] the fix looks good. could you generate the patch with --no-prefix? so the patch could be applied by Jenkins,"09/Aug/15 17:50;yuzhihong@gmail.com;I cannot assign this to myself.

Please add me as a contributor.","09/Aug/15 17:57;hadoopqa;Testing JIRA BOOKKEEPER-863


Patch [bookkeeper-863.patch|https://issues.apache.org/jira/secure/attachment/12749478/bookkeeper-863.patch] downloaded at Sun Aug  9 17:51:15 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/949/",09/Aug/15 18:15;hustlmsp;[~tedyu] I added you as the contributor and assigned to you. did you compile before generating the patch? It seems that the patch couldn't compile,09/Aug/15 18:18;yuzhihong@gmail.com;This one passes compilation.,"09/Aug/15 19:23;hadoopqa;Testing JIRA BOOKKEEPER-863


Patch [bookkeeper-863.patch|https://issues.apache.org/jira/secure/attachment/12749481/bookkeeper-863.patch] downloaded at Sun Aug  9 18:47:16 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 875
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/951/","10/Aug/15 05:30;rakeshr;Thanks [~yuzhihong@gmail.com] for the contribution. Just few suggestions:
# Please uninitialize factory. Also, good to catch exceptions in the finally block like,
{code}
} finally {
    try{
       m.close();
       mFactory.uninitialize();
   } catch (IOException ioe) {
      LOG.error(""Failed to close ledger manager : "", ioe);
   }
   .......
   .......
}
{code}
# Please close the {{ledgerManager#close();}} before {{zk#close();}}. IMHO, this avoids unwanted ZooKeeper client exception in between closure.","10/Aug/15 19:05;hadoopqa;Testing JIRA BOOKKEEPER-863


Patch [bookkeeper-863-v2.patch|https://issues.apache.org/jira/secure/attachment/12749642/bookkeeper-863-v2.patch] downloaded at Mon Aug 10 19:00:55 UTC 2015

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","10/Aug/15 22:11;hadoopqa;Testing JIRA BOOKKEEPER-863


Patch [bookkeeper-863-v2.patch|https://issues.apache.org/jira/secure/attachment/12749664/bookkeeper-863-v2.patch] downloaded at Mon Aug 10 21:18:09 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/953/","11/Aug/15 05:42;rakeshr;Thanks [~tedyu], +1 lgtm","12/Aug/15 02:01;hustlmsp;committed as c29a4f2601f72f8543cc4b1db419c84b01de75ce in master.

Thanks [~tedyu] for the patch.","12/Aug/15 05:47;hudson;SUCCESS: Integrated in bookkeeper-master #1149 (See [https://builds.apache.org/job/bookkeeper-master/1149/])
BOOKKEEPER-863: Potential resource leak with unclosed LedgerManager in BookieShell (Ted Yu via sijie) (sijie: rev c29a4f2601f72f8543cc4b1db419c84b01de75ce)
* CHANGES.txt
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix broken links and typos in bookkeeper documents,BOOKKEEPER-858,12833969,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,y0un5,y0un5,y0un5,30/May/15 09:42,16/May/16 21:47,14/Mar/19 02:39,02/Jun/15 06:03,,,4.4.0,,,Documentation,,,0,,There are some broken links and trivial typos in bookkeeper documents.,,,,,,,,,,,,,,,,,,,30/May/15 15:05;y0un5;BOOKKEEPER-858.patch;https://issues.apache.org/jira/secure/attachment/12736342/BOOKKEEPER-858.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-05-30 10:04:23.137,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:45 UTC 2016,,,,,,0|i2fetr:,9223372036854775807,,,,,,,,30/May/15 09:54;y0un5;Upload a patch to current master(6286c39),"30/May/15 10:04;hadoopqa;Testing JIRA BOOKKEEPER-858


Patch [BOOKKEEPER-858.patch|https://issues.apache.org/jira/secure/attachment/12736329/BOOKKEEPER-858.patch] downloaded at Sat May 30 10:00:22 UTC 2015

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","30/May/15 15:47;hadoopqa;Testing JIRA BOOKKEEPER-858


Patch [BOOKKEEPER-858.patch|https://issues.apache.org/jira/secure/attachment/12736342/BOOKKEEPER-858.patch] downloaded at Sat May 30 15:10:17 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 951
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/935/",02/Jun/15 06:00;hustlmsp;the patch looks good. +1.,"02/Jun/15 06:03;hustlmsp;committed as 35fbcc357970f126b6b9f9a7bf2a453bd3786044 in master.

thanks [~y0un5]","02/Jun/15 06:48;hudson;SUCCESS: Integrated in bookkeeper-master #1075 (See [https://builds.apache.org/job/bookkeeper-master/1075/])
BOOKKEEPER-858: Fix broken links and typos in bookkeeper documents (Youngjoon Kim via sijie) (sijie: rev 35fbcc357970f126b6b9f9a7bf2a453bd3786044)
* doc/bookkeeperStarted.textile
* CHANGES.txt
* doc/bookkeeperConfigParams.textile
* doc/bookkeeperOverview.textile
* doc/bookkeeperConfig.textile
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE on InterleavedLedgerStorage.onRotateEntryLog,BOOKKEEPER-854,12830941,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,19/May/15 08:18,16/May/16 21:47,14/Mar/19 02:39,20/May/15 04:23,,,4.3.1,4.4.0,,,,,0,,"{code}
testLedgerCacheFlushFailureOnDiskFull(org.apache.bookkeeper.bookie.LedgerCacheTest)  Time elapsed: 0.032 sec  <<< ERROR!
java.lang.NullPointerException
        at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.onRotateEntryLog(InterleavedLedgerStorage.java:350)
        at org.apache.bookkeeper.bookie.SortedLedgerStorage.onRotateEntryLog(SortedLedgerStorage.java:38)
        at org.apache.bookkeeper.bookie.EntryLogger.createNewLog(EntryLogger.java:381)
        at org.apache.bookkeeper.bookie.EntryLogger.addEntry(EntryLogger.java:637)
        at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.processEntry(InterleavedLedgerStorage.java:334)
        at org.apache.bookkeeper.bookie.SortedLedgerStorage.process(SortedLedgerStorage.java:149)
        at org.apache.bookkeeper.bookie.EntryMemTable.flushSnapshot(EntryMemTable.java:236)
        at org.apache.bookkeeper.bookie.EntryMemTable.flush(EntryMemTable.java:214)
        at org.apache.bookkeeper.bookie.SortedLedgerStorage.flush(SortedLedgerStorage.java:154)
        at org.apache.bookkeeper.bookie.LedgerCacheTest.testLedgerCacheFlushFailureOnDiskFull(LedgerCacheTest.java:291)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
{code}",,,,,,,,,,,,,,,,,,,19/May/15 08:33;hustlmsp;0001-NPE.patch;https://issues.apache.org/jira/secure/attachment/12733750/0001-NPE.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-05-19 09:43:24.278,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:53 UTC 2016,,,,,,0|i2ewxr:,9223372036854775807,,,,,,,,19/May/15 08:33;hustlmsp;attach a patch to address the NPE.,"19/May/15 09:43;hadoopqa;Testing JIRA BOOKKEEPER-854


Patch [0001-NPE.patch|https://issues.apache.org/jira/secure/attachment/12733750/0001-NPE.patch] downloaded at Tue May 19 09:05:45 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 951
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/929/",19/May/15 14:48;ikelly;lgtm +1,19/May/15 18:01;rakeshr;+1 patch looks fine,20/May/15 04:17;hustlmsp;committed as 1387b2be44686abfe78bf4efee4ad52d2d699e12 in master,20/May/15 04:23;hustlmsp;committed as b3657b828bfcdf57cdba61f5b8911ebaef56337d in branch 4.3.,"20/May/15 05:02;hudson;SUCCESS: Integrated in bookkeeper-master #1060 (See [https://builds.apache.org/job/bookkeeper-master/1060/])
BOOKKEEPER-854: NPE on InterleavedLedgerStorage.onRotateEntryLog (sijie) (sijie: rev 1387b2be44686abfe78bf4efee4ad52d2d699e12)
* CHANGES.txt
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use volatile for lastAddConfirmed,BOOKKEEPER-848,12820202,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,10/Apr/15 21:12,16/May/16 21:47,14/Mar/19 02:39,21/Apr/15 07:39,4.3.0,,4.4.0,,,,,,0,,"LastAddConfirmed in LedgerHandle is updated when an entry is persisted successfully. 

When sending a new entry, the most recent lastAddConfirmed is sent along. The reason is to start with a reasonable (confirmed) entryId when doing ledger recovery, by reading all entries from lastAddConfirmed until a NoEntryException is reached. 

If lastAddConfirmed updates are not visible to the thread that is writing new entries, new entries will carrie an older lastAddConfirmed value, and recovering the ledger will requiring reading one-by-one many entries.
When writing several thousand of entries per sec, the lastAddConfirmed can lag behind a lot from the real last entry.

We should use volatile, to ensure writing thread sees the updated version.",,,,,,,,,,,,,,,,,,,10/Apr/15 21:13;mmerli;0001-BOOKKEEPER-848-Use-volatile-for-lastAddConfirmed.patch;https://issues.apache.org/jira/secure/attachment/12724665/0001-BOOKKEEPER-848-Use-volatile-for-lastAddConfirmed.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-10 23:38:05.852,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:27 UTC 2016,,,,,,0|i2d4gv:,9223372036854775807,,,,,,,,"10/Apr/15 23:38;hadoopqa;Testing JIRA BOOKKEEPER-848


Patch [0001-BOOKKEEPER-848-Use-volatile-for-lastAddConfirmed.patch|https://issues.apache.org/jira/secure/attachment/12724665/0001-BOOKKEEPER-848-Use-volatile-for-lastAddConfirmed.patch] downloaded at Fri Apr 10 23:00:56 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 1

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/920/",21/Apr/15 07:38;hustlmsp;the patch looks good to me. +1,21/Apr/15 07:39;hustlmsp;committed as 70da24d in master,"21/Apr/15 08:33;hudson;SUCCESS: Integrated in bookkeeper-master #1028 (See [https://builds.apache.org/job/bookkeeper-master/1028/])
BOOKKEEPER-848: Use volatile for lastAddConfirmed (Matteo Merli via sijie) (sijie: rev 70da24d504e3f4cba0d87a0914a0add7ea19394d)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* CHANGES.txt
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock on flushLock on compaction,BOOKKEEPER-840,12780651,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,hustlmsp,hustlmsp,hustlmsp,09/Mar/15 23:40,16/May/16 21:47,14/Mar/19 02:39,18/Mar/15 05:41,,,4.3.1,4.4.0,,bookkeeper-server,,,0,,"the dead lock happens on entry log rolling and compaction.

    entry log rolling will lock entry logger then lock flushLock.
    compaction waiting for flush, will lock flushLock and then entry logger.",,,,,,,,,,,,,,,,,,,12/Mar/15 08:31;hustlmsp;BOOKKEEPER-840.path;https://issues.apache.org/jira/secure/attachment/12704122/BOOKKEEPER-840.path,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-03-10 22:39:24.728,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:37 UTC 2016,,,,,,0|i26jn3:,9223372036854775807,,,,,,,,"10/Mar/15 22:39;fpj;Ok, this is a bit subtle. I think the description is referring to the call to onRotateEntryLog from EntryLogger.createNewLog and the call to CompactionScannerFactory.waitEntrylogFlushed. In waitEntrylogFlushed, it calls getLeastUnflushedLogId, which locks entrylogger. To fix it, can we acquire flushLock inside the while loop in waitEntrylogFlushed? ","12/Mar/15 08:24;hustlmsp;yes. that is the right fix. since the flushLock here is only for notification, we should reduce its locking scope.",12/Mar/15 08:31;hustlmsp;attached a patch to address the deadlock.,"12/Mar/15 09:48;hadoopqa;Testing JIRA BOOKKEEPER-840


Patch [BOOKKEEPER-840.path|https://issues.apache.org/jira/secure/attachment/12704122/BOOKKEEPER-840.path] downloaded at Thu Mar 12 09:09:12 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/903/","12/Mar/15 15:52;fpj;+1, looks good.",18/Mar/15 05:24;hustlmsp;[~fpj] thanks for reviewing. commit as 68c5b5a40c33b813482e8a2371eedcb2e0d224e8 in master.,18/Mar/15 05:41;hustlmsp;committed as 0802d15033f15082104239971bca45108a8b00e9 in branch 4.3.,"18/Mar/15 06:02;hudson;SUCCESS: Integrated in bookkeeper-master #990 (See [https://builds.apache.org/job/bookkeeper-master/990/])
BOOKKEEPER-840: Deadlock on flushLock on compaction (sijie) (sijie: rev 68c5b5a40c33b813482e8a2371eedcb2e0d224e8)
* CHANGES.txt
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AuditorPeriodicCheckTest timeout,BOOKKEEPER-839,12777218,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,fpj,fpj,24/Feb/15 17:07,16/May/16 21:47,14/Mar/19 02:39,12/Mar/15 07:26,,,4.3.1,4.4.0,,,,,0,test,This is failing consistently for me. I'm using a ubuntu vm with Oracle jdk 8. Attaching a log file that I got from running it on the master branch.,,,,,,,,,,,,,,,,,,,10/Mar/15 17:15;rakeshr;001-BOOKKEEPER-839.patch;https://issues.apache.org/jira/secure/attachment/12703689/001-BOOKKEEPER-839.patch,24/Feb/15 17:18;fpj;org.apache.bookkeeper.replication.AuditorPeriodicCheckTest-output.txt.gz;https://issues.apache.org/jira/secure/attachment/12700523/org.apache.bookkeeper.replication.AuditorPeriodicCheckTest-output.txt.gz,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-02-24 18:34:32.404,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:43 UTC 2016,,,,,,0|i25zc7:,9223372036854775807,,,,,,,,"24/Feb/15 18:34;rakeshr;Thanks [~fpj] for sharing the logs. I have the following observation:

- {{AuditorPeriodicCheckTest#testPeriodicCheckWhenDisabled}} test is creating 100 ledgers and adding 100 entries to each ledger. Total of about 10000 ledger entries are adding. This is costlier operation. Secondly, it kills one bookie and start new bookie. Now the test case is expecting to detect the under-replicated ledgers and performs re-replication of these 100 ledgers to the new Bookie. This is again another costlier operation.

- Another observation about this test case is, {{Thread.sleep(CHECK_INTERVAL * 2000);}} is used four times, so total of 8seconds sleeping time . Probably need to see better way by avoiding these sleeps.

In my environment it took around 30 seconds to finish the test case. Could you try reducing the number of ledgers and the number of entries in each ledger. Probably can try with 10 ledgers and 1 or 2 entries each. I feel this will make the test simple.

{code}
        final int numLedgers = 100;
        final int numMsgs = 100;
{code}

","24/Feb/15 22:52;fpj;hi rakesh, thanks for the hints. I forgot to mention that the test case failing is actually testPeriodicCheckWhenLedgerDeleted.","25/Feb/15 02:52;rakeshr;Oh. I could see the log file contains all the test cases in the {{AuditorPeriodicCheckTest}}, how to segregate the log to find the specific testcase. I assume this {{testPeriodicCheckWhenLedgerDeleted}} has started execution from {{2015-02-24 16:47:44,071}} to {{2015-02-24 16:49:02,038}}. Am I correct?","25/Feb/15 03:13;rakeshr;This test case also having {{final int numLedgers = 100;}}, Could you try reducing the number of ledgers and observe the time.",26/Feb/15 17:13;fpj;I've brought down the number of ledgers of both tests to 20 and now it passes. I think we need to calibrate those sleep calls a bit better. Should I propose a patch that brings down the number of ledgers to 20 for now?,"26/Feb/15 18:00;rakeshr;bq.brought down the number of ledgers of both tests to 20 and now it passes
Could you tell me, how much time it is taking now. Is that consistently taking same amount of time to finish the testcase? Could you share the log file after running the testcase.
bq. Should I propose a patch that brings down the number of ledgers to 20 for now?
OK, I agree for this change. Also, I feel its good to increase the test timeout value to higher value {{@Test(timeout=120000)}}",10/Mar/15 02:25;hustlmsp;+1 on decrementing the number of ledgers and increasing the timeout,"10/Mar/15 17:19;rakeshr;Attached patch with the above mentioned changes, please review it. Thanks!","10/Mar/15 18:00;hadoopqa;Testing JIRA BOOKKEEPER-839


Patch [001-BOOKKEEPER-839.patch|https://issues.apache.org/jira/secure/attachment/12703689/001-BOOKKEEPER-839.patch] downloaded at Tue Mar 10 17:20:36 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/901/",12/Mar/15 05:27;rakeshr;Test case failure is unrelated. Could someone help me to review this. Thanks!,12/Mar/15 07:17;hustlmsp;+1 for the patch. committing.,12/Mar/15 07:22;hustlmsp;committed as e89ee080f1894143ed3415f27017b89eefe3ceb1 in master,12/Mar/15 07:25;hustlmsp;committed as ee02679b3a5716459ec7b686174b542f2fbf981b in branch 4.3,12/Mar/15 07:26;hustlmsp;thanks Rakesh,"12/Mar/15 08:03;hudson;SUCCESS: Integrated in bookkeeper-master #982 (See [https://builds.apache.org/job/bookkeeper-master/982/])
BOOKKEEPER-839: AuditorPeriodicCheckTest timeout (rakeshr via sijie) (sijie: rev e89ee080f1894143ed3415f27017b89eefe3ceb1)
* CHANGES.txt
* bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ForceWriteThread::run() leaks “logFile.close()” when interrupt comes,BOOKKEEPER-838,12776617,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,zhaijia,zhaijia,zhaijia,21/Feb/15 05:21,16/May/16 21:47,14/Mar/19 02:39,23/Feb/15 07:21,,,4.3.1,4.4.0,,bookkeeper-server,,,0,,"According to Ivan’s email, I did a check of the build history. Seems recently failing is with this stack:
java.io.IOException: Unable to delete directory /tmp/bkTest3561939033223584760.dir/current/0.
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1337)
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1910)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1910)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.cleanupTempDirs(BookKeeperClusterTestCase.java:186)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.tearDown(BookKeeperClusterTestCase.java:114)

This may be caused by an error in ForceWriteThread::run(), which leaked “logFile.close()” when interrupt comes.

{code}
private class ForceWriteThread {
     public void run() {
            LOG.info(""ForceWrite Thread started"");
            boolean shouldForceWrite = true;
            int numReqInLastForceWrite = 0;
            while(running) {
                ForceWriteRequest req = null;
                try {
                           …
                } catch (IOException ioe) {
                    LOG.error(""I/O exception in ForceWrite thread"", ioe);
                    running = false;
                } catch (InterruptedException e) {
                    LOG.error(""ForceWrite thread interrupted"", e);
                    if (null != req) {
                        req.closeFileIfNecessary();        < ==== 2, when interrupt, “shouldClose” not set properly, so file not close
                    }
                    running = false;
                }
            }
            // Regardless of what caused us to exit, we should notify the
            // the parent thread as it should either exit or be in the process
            // of exiting else we will have write requests hang
            threadToNotifyOnEx.interrupt();
        }
        // shutdown sync thread
        void shutdown() throws InterruptedException {
            running = false;
            this.interrupt();               < ====  1, call interrupt
            this.join();
        }
}

        public void closeFileIfNecessary() {
            // Close if shouldClose is set
            if (shouldClose) {         < ==== 3, “shouldClose” is false here.
                // We should guard against exceptions so its
                // safe to call in catch blocks
                try {
                    logFile.close();
                    // Call close only once
                    shouldClose = false;
                }
                catch (IOException ioe) {
                    LOG.error(""I/O exception while closing file"", ioe);
                }
            }
        }
{code}",,,,,,,,,,,,,,,,,,,21/Feb/15 05:48;zhaijia;BOOKKEEPER-838.patch;https://issues.apache.org/jira/secure/attachment/12700006/BOOKKEEPER-838.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-02-21 08:32:23.816,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:45 UTC 2016,,,,,,0|i25vxb:,9223372036854775807,,,,,,,,"21/Feb/15 08:32;hadoopqa;Testing JIRA BOOKKEEPER-838


Patch [BOOKKEEPER-838.patch|https://issues.apache.org/jira/secure/attachment/12700006/BOOKKEEPER-838.patch] downloaded at Sat Feb 21 07:54:53 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 949
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/899/","21/Feb/15 13:01;fpj;Good catch, the fix looks fine to me. Anyone else sees a problem?",22/Feb/15 03:56;rakeshr;Yeah patch looks nice. Thank you [~zhaijia] for investigating it and contributing a fix.,23/Feb/15 04:39;hustlmsp;good catch. +1. will commit.,23/Feb/15 07:12;hustlmsp;committed as 8b23bd30c5e7388e91f650615671d754a9ee2727 at master.,23/Feb/15 07:21;hustlmsp;committed as 3479802ce09436ae24d6c4bb42ab730a3249fc10 in branch 4.3,"23/Feb/15 07:46;hudson;SUCCESS: Integrated in bookkeeper-master #964 (See [https://builds.apache.org/job/bookkeeper-master/964/])
BOOKKEEPER-838: ForceWriteThread::run() leaks âlogFile.close()â when interrupt comes (zhaijia via sijie) (sijie: rev 8b23bd30c5e7388e91f650615671d754a9ee2727)
* CHANGES.txt
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java
",23/Feb/15 09:33;zhaijia;I am glad to be helpful. Thanks for taking care of it.,16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update copyright for 2015 on all active branches,BOOKKEEPER-835,12768077,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,ikelly,ikelly,16/Jan/15 17:26,16/May/16 21:47,14/Mar/19 02:39,19/May/15 07:38,,,4.3.1,4.4.0,,,,,0,,"As the title says, update the copyright in the notice files to add 2015. I don't think we need to do 4.2 branch as I doubt there'll be more releases on it.",,,,,,,,,,,,,,,,,,,14/Apr/15 07:54;hustlmsp;BOOKKEEPER-835.patch;https://issues.apache.org/jira/secure/attachment/12725173/BOOKKEEPER-835.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-14 07:54:00.757,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:42 UTC 2016,,,,,,0|i24gtj:,9223372036854775807,,,,,,,,14/Apr/15 07:54;hustlmsp;attached a patch to update copy right year.,"14/Apr/15 09:32;hadoopqa;Testing JIRA BOOKKEEPER-835


Patch [BOOKKEEPER-835.patch|https://issues.apache.org/jira/secure/attachment/12725173/BOOKKEEPER-835.patch] downloaded at Tue Apr 14 08:54:04 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/924/",21/Apr/15 07:40;hustlmsp;[~fpj] [~ikelly] could any of you review this?,"24/Apr/15 00:39;hustlmsp;could any committers review this? this is the last ticket for 4.3.1. after it is committed, I am going to cut second candidate for 4.3.1.","24/Apr/15 02:32;rakeshr;Thanks [~hustlmsp].
+1 lgtm. I could see only {{NOTICE}} files has the year references.",25/Apr/15 12:03;ikelly;lgtm +1,19/May/15 07:37;hustlmsp;committed as 6688d96b52072496202f607f8c55976472f4c9a6 in master,19/May/15 07:38;hustlmsp;committed as 6afad3760bc9df8619c2d3e542f0fe827da7edf5 in branch 4.3,"19/May/15 08:02;hudson;FAILURE: Integrated in bookkeeper-master #1058 (See [https://builds.apache.org/job/bookkeeper-master/1058/])
BOOKKEEPER-835: Update copyright for 2015 on all active branches (sijie: rev 6688d96b52072496202f607f8c55976472f4c9a6)
* NOTICE
* hedwig-server/src/main/resources/NOTICE.bin.txt
* bookkeeper-server/src/main/resources/NOTICE.bin.txt
BOOKKEEPER-835: Update copyright for 2015 on all active branches (sijie) (missing CHANGES.txt file) (sijie: rev 5bd2edbf82bd0c8bd9ea9e507b07d23cb856f934)
* CHANGES.txt
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test case error in test class TestDiskChecker,BOOKKEEPER-834,12767034,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,zhaijia,zhaijia,zhaijia,13/Jan/15 05:10,16/May/16 21:47,14/Mar/19 02:39,18/Mar/15 06:37,,,4.3.1,4.4.0,,bookkeeper-server,,,0,,"In test class TestDiskChecker, test case will fail if tmp dir's usableSpace / totalSpace > 0.95, because threshold will be a negative number.
{code}
     public void testCheckDiskFull() throws IOException {
        File file = File.createTempFile(""DiskCheck"", ""test"");
        long usableSpace = file.getUsableSpace();
        long totalSpace = file.getTotalSpace();
        float threshold =
                (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;        
 < === if ""usableSpace / totalSpace"" is 0.99, then threshold is -0.04, this is invalid.
        diskChecker.setDiskSpaceThreshold(threshold, threshold);
        diskChecker.checkDiskFull(file);
    }
{code}

in my running of test:
  1 -------------------------------------------------------------------------------
  2 Test set: org.apache.bookkeeper.util.TestDiskChecker
  3 -------------------------------------------------------------------------------
  4 Tests run: 4, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.557 sec <<< FAILURE!
  5 testCheckDiskFull(org.apache.bookkeeper.util.TestDiskChecker)  Time elapsed: 0.066 sec  <<< ERROR!
  6 java.lang.Exception: Unexpected exception, expected<org.apache.bookkeeper.util.DiskChecker$DiskOutOfSpaceException> but was<java.lang.IllegalArgumentException>
  7     at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)
  8     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
  9     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
 10     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
 11     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
 12     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
 13     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
 14     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
 15     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
 16     at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
 17     at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
 18     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)
 19     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)
 20     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 21     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 22     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 23     at java.lang.reflect.Method.invoke(Method.java:606)
 24     at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
 25     at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
 26     at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
 27     at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:78)
 28     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
 29 Caused by: java.lang.IllegalArgumentException: Disk space threashold -0.04741608 is not valid. Should be > 0 and < 1              < ======
 30     at org.apache.bookkeeper.util.DiskChecker.validateThreshold(DiskChecker.java:163)
 31     at org.apache.bookkeeper.util.DiskChecker.setDiskSpaceThreshold(DiskChecker.java:157)
 32     at org.apache.bookkeeper.util.TestDiskChecker.testCheckDiskFull(TestDiskChecker.java:51)
 33     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 34     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 35     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 36     at java.lang.reflect.Method.invoke(Method.java:606)
 37     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
 38     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
 39     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
 40     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
 41     at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:21)
 42     ... 21 more

print out vars in test to verify these values: 
2015-01-13 12:42:58,448 - INFO  - [main:TestDiskCheckerTest@78] - usableSpace:2062532608, totalSpace:2073448448, threshold: -0.04473542",Linux /tmp dir size > 2GB,,,,,,,,,,,,,,,,,,13/Jan/15 09:35;ikelly;0001-Fix-TestDiskChecker-so-it-can-be-used-on-dev-shm.patch;https://issues.apache.org/jira/secure/attachment/12691905/0001-Fix-TestDiskChecker-so-it-can-be-used-on-dev-shm.patch,14/Mar/15 16:14;zhaijia;BOOKKEEPER-834.patch;https://issues.apache.org/jira/secure/attachment/12704602/BOOKKEEPER-834.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-01-13 09:34:14.525,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:24 UTC 2016,,,,,,0|i24ajb:,9223372036854775807,,,,,,,,"13/Jan/15 05:16;zhaijia;In testCheckDiskFull, testCheckDiskFullOnNonExistFile, testDiskWarnThresholdException tests, they all contain:
""float diskWarnThreshold = (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;""

Need to change this to avoid a negative threshold.","13/Jan/15 09:34;ikelly;I've hit this before also. It happens when you use an empty disk as your temp dir. I have a fix for this internally, will post it
","13/Jan/15 09:52;zhaijia;Hi Ivan,
I have assigned this to you. 

One comment:
threshold in testCheckDiskFull should also be changed.

Thanks.
-Jia","13/Jan/15 10:15;hadoopqa;Testing JIRA BOOKKEEPER-834


Patch [0001-Fix-TestDiskChecker-so-it-can-be-used-on-dev-shm.patch|https://issues.apache.org/jira/secure/attachment/12691905/0001-Fix-TestDiskChecker-so-it-can-be-used-on-dev-shm.patch] downloaded at Tue Jan 13 09:40:19 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 936
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/896/","15/Jan/15 15:04;rakeshr;Thanks for the patch, [~ivank@yahoo-inc.com]

Changing to {{* 1.5f;}} value, is resulting the below exception in my env. 

{code}
Caused by: java.lang.IllegalArgumentException: Disk space threashold: 1.3910533 and warn threshold: 1.3910533 are not valid. Should be > 0 and < 1 and diskSpaceThreshold >= diskSpaceWarnThreshold
	at org.apache.bookkeeper.util.DiskChecker.validateThreshold(DiskChecker.java:203)
	at org.apache.bookkeeper.util.DiskChecker.setDiskSpaceThreshold(DiskChecker.java:196)
	at org.apache.bookkeeper.util.TestDiskChecker.testDiskWarnThresholdException(TestDiskChecker.java:91)
{code}","15/Jan/15 15:40;zhaijia;Seems in that case, any value that makes 
diskSpaceThreshold > diskWarnThreshold 
is OK. 

No need to do  ""* 1.5f""  or  ""+ 0.01f""  for diskSpaceThreshold.
","19/Jan/15 17:55;fpj;Why not compute the max between 

{noformat}
(1f - ((float) usableSpace / (float) totalSpace)) - 0.05f
{noformat}

and 0.05f instead? I suppose the subtraction is there to bound the threshold, so why not do it explicitly?",12/Mar/15 08:21;hustlmsp;[~fpj] [~zhaijia] would any of u help addressing the patch?,"14/Mar/15 01:07;zhaijia;Sure, I will do it.
Thanks","15/Mar/15 01:07;hadoopqa;Testing JIRA BOOKKEEPER-834


Patch [BOOKKEEPER-834.patch|https://issues.apache.org/jira/secure/attachment/12704602/BOOKKEEPER-834.patch] downloaded at Sun Mar 15 00:30:12 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/906/",15/Mar/15 09:43;rakeshr;Thanks [~zhaijia]. Latest patch looks fine +1 from me.,15/Mar/15 11:54;zhaijia;Thanks for your time Rakesh.,"17/Mar/15 08:09;zhaijia;The test case that -1 is not related with this patch.

The failure is like this:

java.io.IOException: Unable to delete directory /tmp/bkTest1550867777962713274.dir/current/0.
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1337)
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1910)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1910)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.cleanupTempDirs(BookKeeperClusterTestCase.java:186)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.tearDown(BookKeeperClusterTestCase.java:114)

2015-03-15 00:48:08,671 - WARN  - [BookieJournal-15017:Journal@927] - Journal exits when shutting down
java.lang.InterruptedException
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2017)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2052)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
	at org.apache.bookkeeper.bookie.Journal.run(Journal.java:822)
2015-03-15 00:48:08,671 - INFO  - [BookieJournal-15017:Journal@936] - Journal exited loop!

seems bookie.Journal.run() not release file when interrupt comes, which is similar to BOOKKEEPER-838. I would like to open another ticket for this error.",17/Mar/15 14:56;zhaijia;BOOKKEEPER-845 is open for this.,"17/Mar/15 22:03;fpj;This patch should go to the 4.3 branch as well, but I'm not sure if we are going to have a second RC for 4.3.1.",18/Mar/15 05:45;rakeshr;I feel this can be included in 4.3.1 RC. [~hustlmsp] Please have a look at this. Thanks!,18/Mar/15 06:26;hustlmsp;[~fpj] we are still working on some tests fixes. so let's get this into 4.3.1.,18/Mar/15 06:31;hustlmsp;committed as 7177f2a03c52ca0457ea7d1a9c946f194ffb1c5f in master,"18/Mar/15 06:37;hustlmsp;committed as 9cbbd659c56b2f357efa7ffbe175a9cf97e5cb43 in branch 4.3

thanks for [~zhaijia] and all other committers for reviewing the patch.","18/Mar/15 07:19;hudson;SUCCESS: Integrated in bookkeeper-master #992 (See [https://builds.apache.org/job/bookkeeper-master/992/])
BOOKKEEPER-834: test case error in test class TestDiskChecker (zhaijia via sijie) (sijie: rev 7177f2a03c52ca0457ea7d1a9c946f194ffb1c5f)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java
* CHANGES.txt
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EntryLogId and EntryLogLimit should not be larger than Integer.MAX_VALUE,BOOKKEEPER-833,12763351,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,23/Dec/14 01:21,16/May/16 21:47,14/Mar/19 02:39,21/Apr/15 08:08,,,4.3.1,4.4.0,,bookkeeper-server,,,0,,"currently the index entry position is combined with log id and entry offset inside a log. so it means that log id and entry log file size shouldn't be larger than Integer.MAX_VALUE. otherwise, it would cause trouble.",,,,,,,,,,,,,,,,,,,24/Mar/15 07:37;hustlmsp;BOOKKEEPER-833.patch;https://issues.apache.org/jira/secure/attachment/12706851/BOOKKEEPER-833.patch,14/Apr/15 08:06;hustlmsp;BOOKKEEPER-833.v2.patch;https://issues.apache.org/jira/secure/attachment/12725175/BOOKKEEPER-833.v2.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-03-24 08:18:18.009,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:37 UTC 2016,,,,,,0|i23pfj:,9223372036854775807,,,,,,,,24/Mar/15 07:37;hustlmsp;add constraints on entry log id and entry log size.,"24/Mar/15 08:18;hadoopqa;Testing JIRA BOOKKEEPER-833


Patch [BOOKKEEPER-833.patch|https://issues.apache.org/jira/secure/attachment/12706851/BOOKKEEPER-833.patch] downloaded at Tue Mar 24 07:40:36 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 1

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/909/","03/Apr/15 23:56;fpj;Sijie, A couple of comments on the patch:

# It is a bit odd that we force preallocatedLogId to be no more that Integer.MAX_VALUE since it is long. Should we make it an int if it needs to fit in 4 bytes then?
# This comment confused me: ""The only exception for the size limitation is if a file grows to be more than 4GB"". Aren't you limiting the log size to be no more than 1GB in this patch?
",13/Apr/15 21:22;fpj;Waiting for feedback on comments.,"14/Apr/15 07:56;hustlmsp;> Should we make it an int if it needs to fit in 4 bytes then?

good point. making the change.

> The only exception for the size limitation is if a file grows to be more than 4GB

need to address the comments.","14/Apr/15 08:06;hustlmsp;attach a new patch to fix the comment.

@fpj changing the logid to long require changing a lot of files. do you mind I doing it in a separated ticket for only 4.4 versions. and do the simplest fix for 4.3.1.","14/Apr/15 08:53;hadoopqa;Testing JIRA BOOKKEEPER-833


Patch [BOOKKEEPER-833.v2.patch|https://issues.apache.org/jira/secure/attachment/12725175/BOOKKEEPER-833.v2.patch] downloaded at Tue Apr 14 08:16:59 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/923/","15/Apr/15 21:09;fpj;looks good, +1. let's create a jira for preallocatedLogId.",21/Apr/15 08:03;hustlmsp;committed as da1a2fa in master.,21/Apr/15 08:08;hustlmsp;committed 49395cf in branch 4.3,"21/Apr/15 08:50;hudson;FAILURE: Integrated in bookkeeper-master #1029 (See [https://builds.apache.org/job/bookkeeper-master/1029/])
BOOKKEEPER-833: EntryLogId and EntryLogLimit should not be larger than Integer.MAX_VALUE (sijie) (sijie: rev da1a2fa6b19ddcdba68834147bf6afbe5bf90cbf)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java
* CHANGES.txt
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Outdated links in tutorial,BOOKKEEPER-831,12762320,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,17/Dec/14 16:06,16/May/16 21:47,14/Mar/19 02:39,12/Mar/15 07:57,,,4.4.0,,,,,,0,,There are some links still pointing to zookeeper.apache.org/bookkeeper. ,,,,,,,,,,,,,,,,,,,17/Dec/14 16:06;ikelly;0001-Update-links-in-tutorial-and-started-guide.patch;https://issues.apache.org/jira/secure/attachment/12687749/0001-Update-links-in-tutorial-and-started-guide.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-17 16:49:51.597,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:31 UTC 2016,,,,,,0|i23j5z:,9223372036854775807,,,,,,,,"17/Dec/14 16:49;hadoopqa;Testing JIRA BOOKKEEPER-831


Patch [0001-Update-links-in-tutorial-and-started-guide.patch|https://issues.apache.org/jira/secure/attachment/12687749/0001-Update-links-in-tutorial-and-started-guide.patch] downloaded at Wed Dec 17 16:10:55 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 935
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/887/",12/Mar/15 07:55;hustlmsp;+1 for the patch. committing.,12/Mar/15 07:57;hustlmsp;committed f2928dca4860b3c1461b99b834992e16901c8a87 in master,"12/Mar/15 08:36;hudson;SUCCESS: Integrated in bookkeeper-master #983 (See [https://builds.apache.org/job/bookkeeper-master/983/])
BOOKKEEPER-831: Outdated links in tutorial (ivank via sijie) (sijie: rev f2928dca4860b3c1461b99b834992e16901c8a87)
* doc/bookkeeperStarted.textile
* CHANGES.txt
* doc/bookkeeperTutorial.textile
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Script for updating docs on website from master branch,BOOKKEEPER-828,12762071,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,16/Dec/14 18:58,16/May/16 21:47,14/Mar/19 02:39,18/Mar/15 06:22,,,4.4.0,,,,,,0,,"Pre TLP, whenever we updated the docs/ directory of trunk, the website docs for trunk would be ""automatically"" updated. Updates to the docs still needed to be built with the old build_trigger mechanism, and the site published through CMS.

The docs were pulled in using a svn:external link. This is no longer possible, as _master_'s docs/ directory is in git. 

We need a new way to sync master docs on the website with what is in git.",,,,,,,,,,,,,,,,,,,16/Dec/14 19:01;ikelly;0001-Script-to-update-master-documentation.patch;https://issues.apache.org/jira/secure/attachment/12687540/0001-Script-to-update-master-documentation.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-16 20:02:42.696,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:35 UTC 2016,,,,,,0|i23hn3:,9223372036854775807,,,,,,,,"16/Dec/14 19:01;ikelly;The attached patch includes a scripts which does the following.

1. Download the current master docs directory from subversion
2. Download the master branch from git
3. Build the javadoc
4. Sync master docs from the site with that from git
5. Sync the javadoc
6. Commit the changes to the site if anything has changed.","16/Dec/14 20:02;hadoopqa;Testing JIRA BOOKKEEPER-828


Patch [0001-Script-to-update-master-documentation.patch|https://issues.apache.org/jira/secure/attachment/12687540/0001-Script-to-update-master-documentation.patch] downloaded at Tue Dec 16 19:23:58 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 935
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/884/","18/Dec/14 23:13;fpj;Just so that I understand, if we change a textile file and commit, then do we need to run this script after committing to stage the changes?","19/Dec/14 17:33;ikelly;Yes, when you commit, you only commit to master in git. There's no way to get this automatically pulled in anymore, so it needs to be manually synced with what is in subversion. In fact the old mechanism wasn't automatic either. You had to modify and commit build_trigger for the site to generate. This script basically replaces that step.

Could you try it out on your mac. I probably won't commit anything, but it would be good to know that the commands and arguments used are valid for mac also. I've only tested on fedora.
","12/Mar/15 07:33;hustlmsp;+1 for the script. and verified on mac. it worked. 

if no objections by tomorrow, I will commit this.",18/Mar/15 06:22;hustlmsp;committed as 4a4802ab5ef1a98eb40cd2bfb4b2f76409745220 in master. thanks [~ikelly],"18/Mar/15 06:46;hudson;FAILURE: Integrated in bookkeeper-master #991 (See [https://builds.apache.org/job/bookkeeper-master/991/])
BOOKKEEPER-828: Script for updating docs on website from master branch (ivank via sijie) (sijie: rev 4a4802ab5ef1a98eb40cd2bfb4b2f76409745220)
* CHANGES.txt
* bin/update-master-docs
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up temp files created by hedwig tests,BOOKKEEPER-823,12760825,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,zhaijia,ikelly,ikelly,10/Dec/14 18:48,16/May/16 21:47,14/Mar/19 02:39,07/Jul/15 06:25,,,4.4.0,,,,,,0,,BOOKKEEPER-814 cleaned up temp files from the bookkeeper tests. This jira is to do the same for hedwig tests (it creates a couple of zookeeper directories).,,,,,,,,,,,,,,,,,,,04/Jul/15 12:32;zhaijia;BOOKKEEPER-823-2.patch;https://issues.apache.org/jira/secure/attachment/12743581/BOOKKEEPER-823-2.patch,09/Jun/15 02:17;zhaijia;BOOKKEEPER-823.patch;https://issues.apache.org/jira/secure/attachment/12738485/BOOKKEEPER-823.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-06-09 02:17:19.401,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:40 UTC 2016,,,,,,0|i23ain:,9223372036854775807,,,,,,,,"09/Jun/15 02:17;zhaijia;Since this is related with BOOKKEEPER-814, I would like to provide this fix.  
Tested Hedwig using ""mvn test"", only found TestPubSubServerStartup left dirs uncleared. ","09/Jun/15 03:04;hadoopqa;Testing JIRA BOOKKEEPER-823


Patch [BOOKKEEPER-823.patch|https://issues.apache.org/jira/secure/attachment/12738485/BOOKKEEPER-823.patch] downloaded at Tue Jun  9 02:26:34 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 951
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/936/","21/Jun/15 08:11;jiannan;For hedwig, there is a org.apache.hedwig.util.FileUtils (in hedwig-client) does the same thing. Since org.apache.hedwig.server.persistence.LocalDBPersistenceManager (in hedwig-server) already uses FileUtils, I think we could employ it similarly in the patch.",04/Jul/15 12:32;zhaijia;Thanks for Jiannan's comments. updated the patch.,"04/Jul/15 15:58;jiannan;New patch looks good to me, thanks Jia Zhai!","04/Jul/15 16:38;hadoopqa;Testing JIRA BOOKKEEPER-823


Patch [BOOKKEEPER-823-2.patch|https://issues.apache.org/jira/secure/attachment/12743581/BOOKKEEPER-823-2.patch] downloaded at Sat Jul  4 16:00:48 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 951
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/937/",07/Jul/15 06:25;hustlmsp;thanks [~zhaijia]. and thanks [~jiannan] for reviewing. committed as 8df7e0f in master.,"07/Jul/15 07:01;hudson;SUCCESS: Integrated in bookkeeper-master #1109 (See [https://builds.apache.org/job/bookkeeper-master/1109/])
BOOKKEEPER-823: Clean up temp files created by hedwig tests (Jia Zhai via sijie) (sijie: rev 8df7e0fb18547e9805238f4bb15d3d0d67978422)
* hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failing to write lastId to ledger directories should not fail startup of bookies,BOOKKEEPER-821,12760061,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,zhaijia,zhaijia,zhaijia,08/Dec/14 04:43,16/May/16 21:47,14/Mar/19 02:39,20/May/15 06:20,4.3.0,,4.4.0,,,bookkeeper-server,,11/Dec/14 00:00,0,,"At the startup of bookie,   the bookie constructor would call setLastLogId() as this trace:
	Bookie() -> InterleavedLedgerStorage() -> EntryLogger() -> Initialize() - >createNewLog() -> allocateNewLog() -> setLastLogId().  

If ""bw.write() and bw.flush()"" in setLastLogId() failed, an IOException would throw and not catch, and cause Bookie constructor fail. 
	{code}
	    private void setLastLogId(File dir, long logId) throws IOException {
	        FileOutputStream fos;
	        fos = new FileOutputStream(new File(dir, ""lastId""));
	        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos, UTF_8));
	        try {     // < ==== original: if write fail in this try, IOException thrown but not catch, and cause bookie startup fail.
	            bw.write(Long.toHexString(logId) + ""\n"");
	            bw.flush();
	        } finally {
	            try {
	                bw.close();
	            } catch (IOException e) {
	                LOG.error(""Could not close lastId file in {}"", dir.getPath());
	            }
	        }
	    }
	{code}

But failing setLastLogId() could be tolerated, and will not cause any problem in next time Bookie startup.  
Next time, when calling EntryLogger constructor again, in getLastLogId(), if read ledgerDir.lastId fail, it will walk through all log files to get LastLogID; If reading an old ledgerDir.lastId, which caused by last failure of setLastLogId(), and it happened to be the largest logId, then allocateNewLog() will find the file already exist, and will allocate newlogfile with bigger ID.
{code}
       BufferedLogChannel allocateNewLog() throws IOException {
            List<File> list = ledgerDirsManager.getWritableLedgerDirs();
            Collections.shuffle(list);
            // It would better not to overwrite existing entry log files
            File newLogFile = null;
            do {
                String logFileName = Long.toHexString(++preallocatedLogId) + "".log"";
                for (File dir : list) {
                    newLogFile = new File(dir, logFileName);
                    currentDir = dir;
                    if (newLogFile.exists()) {  < === this will handle last set fail issue, in which LastId update fail, and get a wrong preallocatedLogId.
                        LOG.warn(""Found existed entry log "" + newLogFile
                               + "" when trying to create it as a new log."");
                        newLogFile = null;
                        break;
                    }
                }
            } while (newLogFile == null);

            FileChannel channel = new RandomAccessFile(newLogFile, ""rw"").getChannel();
            BufferedLogChannel logChannel = new BufferedLogChannel(channel,
                    conf.getWriteBufferBytes(), conf.getReadBufferBytes(), preallocatedLogId);
            logChannel.write((ByteBuffer) LOGFILE_HEADER.clear());

            for (File f : list) {
                setLastLogId(f, preallocatedLogId);
            }
            LOG.info(""Preallocated entry logger {}."", preallocatedLogId);
            return logChannel;
        }
{code}
",,18000,18000,,0%,18000,18000,,,,,,,,,,,,08/Dec/14 12:24;zhaijia;BOOKKEEPER-821_no-prefix.patch;https://issues.apache.org/jira/secure/attachment/12685742/BOOKKEEPER-821_no-prefix.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-08 06:24:41.526,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:43 UTC 2016,,,,,,0|i235x3:,9223372036854775807,,,,,,,,08/Dec/14 06:19;zhaijia;there is already a test case: testMissingLogId,"08/Dec/14 06:24;hadoopqa;Testing JIRA BOOKKEEPER-821


Patch [BOOKKEEPER-821.patch|https://issues.apache.org/jira/secure/attachment/12685675/BOOKKEEPER-821.patch] downloaded at Mon Dec  8 06:20:25 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","08/Dec/14 12:25;zhaijia; Former patch did not use ""--no-prefix"", and cause a patch fail. Updated the patch again.","08/Dec/14 13:06;hadoopqa;Testing JIRA BOOKKEEPER-821


Patch [BOOKKEEPER-821_no-prefix.patch|https://issues.apache.org/jira/secure/attachment/12685742/BOOKKEEPER-821_no-prefix.patch] downloaded at Mon Dec  8 12:30:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 934
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/877/","08/Dec/14 22:42;fpj;I'm a bit confused about your point, @zhaijia. setLastLogId is outside that loop and there could be a few reasons for IOException to be thrown, so I'm not convinced your proposal is correct.","09/Dec/14 03:25;zhaijia;Hi Flavio,
Thanks for you comments, maybe last Description was not very clear, I updated the description with a more detailed one. 
Would you please help review it again?",10/Dec/14 02:03;zhaijia;update description.,"10/Dec/14 07:05;hustlmsp;[~fpj], I think this change is valuable. suppose we have 4 disks, if one disk is unfortunately 100% full, while other disks still have space. during startup, it would fail the bookie because failed to setLogId to that 100% full disk, but it isn't necessary, since the bookie still has other spare disks.","10/Dec/14 09:58;fpj;Agreed about the the disk full case, but I don't think this is the only case. In the case the disk is broken it means we lost data so the bookie shouldn't start, no?","13/Dec/14 07:26;zhaijia;Hi Flavio and Sijie, 
Thanks a lot for you comments. 
""Disk full"" is the case that I met here. Sorry for not considering  ""disk broken"" case here. 
But from my point of view, ""disk full"" is a more common case than ""disk broken"". In ""disk broken"" case, it is also OK to start bookie, because disk broken could be find later when add entry. 

Thanks.
-Jia","16/Dec/14 08:09;hustlmsp;[~fpj] I don't understand why we shouldn't start bookie if disk is broken. I think the patch here is that lastLogId isn't the critical part, and there is already logic handling losing lastLogId case. if we failed writing lastLogId, we should proceed anyway.","06/Feb/15 07:02;hustlmsp;[~fpj] what is your take for this jira? If no objection, I would go ahead to commit this.","13/Feb/15 21:33;fpj;My bad, I missed the question that was here for me. I need to refresh my cache on this one. 

Are we pushing this one for 4.3.2?","13/Feb/15 22:14;hustlmsp;yup. it isn't a blocking issue, it is a nice-to-have fix. so I would push it to 4.3.2.",14/Feb/15 02:41;zhaijia;Thanks for taking care of it.,12/Mar/15 07:54;hustlmsp;[~fpj] what is your opinion on this? any objections?,18/Mar/15 06:25;hustlmsp;[~fpj] ping this again?,20/May/15 06:20;hustlmsp;committed as 6286c39 in master. Thanks [~zhaijia] for your patch.,"20/May/15 07:02;hudson;SUCCESS: Integrated in bookkeeper-master #1061 (See [https://builds.apache.org/job/bookkeeper-master/1061/])
BOOKKEEPER-821: Failing to write lastId to ledger directories should not fail startup of bookies (zhaijia via sijie) (sijie: rev 6286c39eaa8f7422323fc3405c72f9c6333f444f)
* CHANGES.txt
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledger fence state is lost when the ledger file is evicted,BOOKKEEPER-815,12759347,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,cxie,cxie,cxie,04/Dec/14 03:07,16/May/16 21:47,14/Mar/19 02:39,05/Dec/14 11:27,4.2.3,4.3.0,4.0.0,4.3.1,4.4.0,,,,0,,"we observed in our use case that when a ledger file is evicted before flushing. the fence state isn't persisted to disk, which would cause fencing doesn't work correctly.",,,,,,,,,,,,,,,,,,,04/Dec/14 07:40;cxie;BOOKKEEPER-815.patch;https://issues.apache.org/jira/secure/attachment/12685062/BOOKKEEPER-815.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-04 08:43:52.719,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:33 UTC 2016,,,,,,0|i231jr:,9223372036854775807,,,,,,,,"04/Dec/14 07:40;cxie;The problem is when a file info is evicted from ledger cache, the bookie forgets to flush header of the file info which cause the fence bit lost.

The fix is pretty easy. Added a test case to reproduce this behavior.","04/Dec/14 08:43;hustlmsp;we also have similar fix in twitter's branch. looks like you hit the same issue.

the patch looks good to me. +1. and mark the fix version to 4.4.0, 4,3.1. do we need to mark this for 4.2.* branch? [~ikelly] this seems to be a critical bug, since it affects the fundamental fencing mechanism.  ","04/Dec/14 10:47;ikelly;I plan to have a 4.2.4 release to push out BOOKKEEPER-799, so we can put this in there too.",04/Dec/14 11:30;ikelly;Committed 6a94e4 in master.,"04/Dec/14 16:20;ikelly;Actually, going to leave open until it's in all branches.","05/Dec/14 11:27;ikelly;Committed b1493c to branch-4.2
Committed 3a6830 to branch-4.3",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
clean up temp files that generated by test cases.,BOOKKEEPER-814,12759344,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,zhaijia,zhaijia,zhaijia,04/Dec/14 03:00,16/May/16 21:47,14/Mar/19 02:39,10/Dec/14 18:46,4.3.0,,4.3.1,4.4.0,,bookkeeper-server,,,0,,"Currently some of bookkeeper test cases are using temp files for unit tests. Those temp files aren't cleaned up after unit tests finished. 
If running several times of these test cases, /tmp directory will soon be full.",,259200,259200,,0%,259200,259200,,,,,,,,BOOKKEEPER-823,,,,05/Dec/14 04:26;zhaijia;BOOKKEEPER-814.patch;https://issues.apache.org/jira/secure/attachment/12685241/BOOKKEEPER-814.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-05 04:53:44.582,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:33 UTC 2016,,,,,,0|i231j3:,9223372036854775807,,,,,,,,04/Dec/14 03:09;zhaijia;I am preparing a patch for this issue. :),"05/Dec/14 04:26;zhaijia;Here is the patch.
The test class, which not delete tmp dir, is got By searching the /tmp dir, and surefire-reports.

In most of the error, tmp file is managed as this below, and not deleted at the end:
{code:title=Bar.java|borderStyle=solid}
      File tmpDir = File.createTempFile(""bookie"", ""test"");
      tmpDir.delete();
      tmpDir.mkdir();
{code}

The fix is more or less like this, using a List to record the tmpdirs, and remove them at @After func:
{code:title=Bar.java|borderStyle=solid}
    final List<File> tempDirs = new ArrayList<File>();

    File createTempDir(String prefix, String suffix) throws IOException {
        File dir = IOUtils.createTempDir(prefix, suffix);
        tempDirs.add(dir);
        return dir;
    }

    @After
    public void tearDown() throws Exception {
        for (File dir : tempDirs) {
            FileUtils.deleteDirectory(dir);
        }
        tempDirs.clear();
    }
{code}

","05/Dec/14 04:53;hustlmsp;the patch looks good to me. +1. 

submit the patch and wait for jenkins build result to commit.","05/Dec/14 18:14;hadoopqa;Testing JIRA BOOKKEEPER-814


Patch [BOOKKEEPER-814.patch|https://issues.apache.org/jira/secure/attachment/12685241/BOOKKEEPER-814.patch] downloaded at Fri Dec  5 17:38:22 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 17 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 933
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/865/","06/Dec/14 17:08;zhaijia;Hi, 
there is a warning in above Jenkins report:  
""WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP""

I did not find this warning in the full output of it.  Would you please shed some light on how to fix it?

Thanks a lot.","09/Dec/14 19:05;hustlmsp;this WARNING indicates that there is already 1 RAT warning on current HEAD, which it isn't introduced by the patch itself. [~ikelly] do you have any insight on this? I tried to run 'apache-rat:check' and I didn't see any RAT warnings.","09/Dec/14 19:11;ikelly;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/865/artifact/test-patch/reports/RAT-clean.txt

search for derby.log. It's strange it gets created but not cleaned. Probably something in the build not cleaning the git repo.","09/Dec/14 19:13;ikelly;I've just triggered a new build, with one parameter changed to see if it fixes it","09/Dec/14 21:02;hadoopqa;Testing JIRA BOOKKEEPER-814


Patch [BOOKKEEPER-814.patch|https://issues.apache.org/jira/secure/attachment/12685241/BOOKKEEPER-814.patch] downloaded at Tue Dec  9 20:25:49 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 17 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 935
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/881/",10/Dec/14 01:19;zhaijia;There is no warning now. Thanks a lot for the help.,"10/Dec/14 18:46;ikelly;Commited to:
master 0e3d95c
branch-4.3 09714f8

Thanks Zhaijia!

Btw, this only covers bookkeeper, hedwig tests seems to be creating some tmp zookeeper stuff. I'll create another jira for that.","10/Dec/14 19:17;hudson;FAILURE: Integrated in bookkeeper-master #883 (See [https://builds.apache.org/job/bookkeeper-master/883/])
BOOKKEEPER-814: clean up temp files that generated by test cases. (zhaijia via ivank) (ivank: rev 0e3d95c9411289b89961e434ce760e3726290761)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java
* CHANGES.txt
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieShell doesn't find index directory ,BOOKKEEPER-813,12759343,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,cxie,cxie,cxie,04/Dec/14 02:49,16/May/16 21:47,14/Mar/19 02:39,06/Dec/14 06:50,4.3.0,,4.3.1,4.4.0,,bookkeeper-server,,,0,,"we configured our bookie to use indexDirectory, which is supposed to store the index files on it. but when we use BookieShell tool to inspect a ledger's entries, it ends up failing to read any ledger. it seems that the BookieShell doesn't handle indexDirectory correctly.",,,,,,,,,,,,,,,,,,,04/Dec/14 06:51;cxie;BOOKKEEPER-813.patch;https://issues.apache.org/jira/secure/attachment/12685057/BOOKKEEPER-813.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-05 06:05:04.476,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:43 UTC 2016,,,,,,0|i231iv:,9223372036854775807,,,,,,,,"04/Dec/14 06:51;cxie;if indexDirectories is provided in configuration, bookie shell commands should find and use them.",05/Dec/14 06:05;hustlmsp;patch looks good to me. +1,"05/Dec/14 20:38;hadoopqa;Testing JIRA BOOKKEEPER-813


Patch [BOOKKEEPER-813.patch|https://issues.apache.org/jira/secure/attachment/12685057/BOOKKEEPER-813.patch] downloaded at Fri Dec  5 20:02:55 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 933
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/869/","06/Dec/14 06:49;hustlmsp;commit e790cab in master
commit 651bc61 in branch 4.3.",06/Dec/14 06:50;hustlmsp;Thanks [~cxie] for the patch,"06/Dec/14 07:25;hudson;FAILURE: Integrated in bookkeeper-master #874 (See [https://builds.apache.org/job/bookkeeper-master/874/])
BOOKKEEPER-813: BookieShell doesn't find index directory (Charles Xie via sijie) (sijie: rev e790cab6d89de3cff3ee32842347d0176b6e24c5)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
* CHANGES.txt
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong metric on LedgerDeleteOp and LedgerOpenOp,BOOKKEEPER-809,12759336,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,cxie,cxie,cxie,04/Dec/14 02:16,16/May/16 21:47,14/Mar/19 02:39,06/Dec/14 06:16,4.3.0,,4.3.1,4.4.0,,bookkeeper-client,,,0,,"These two operations uses startTime as the latency for metric, which is wrong. 

{code}
    void openComplete(int rc, LedgerHandle lh) {
        if (BKException.Code.OK != rc) {
            openOpLogger.registerFailedEvent(startTime);
        } else {
            openOpLogger.registerSuccessfulEvent(startTime);
        }
        cb.openComplete(rc, lh, ctx);
    }
{code}",,,,,,,,,,,,,,,,,,,04/Dec/14 02:24;cxie;BOOKKEEPER-809.patch;https://issues.apache.org/jira/secure/attachment/12685024/BOOKKEEPER-809.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-04 08:36:59.235,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:28 UTC 2016,,,,,,0|i231hb:,9223372036854775807,,,,,,,,04/Dec/14 02:17;cxie;the fix is pretty straightforward. I'd like to contribute a patch to address this.,04/Dec/14 02:24;cxie;Attach a patch to fix the metrics,"04/Dec/14 08:36;hustlmsp;good catch. +1. thanks for contributing the patch. 

but will hold on committing until go TLP.","05/Dec/14 18:51;hadoopqa;Testing JIRA BOOKKEEPER-809


Patch [BOOKKEEPER-809.patch|https://issues.apache.org/jira/secure/attachment/12685024/BOOKKEEPER-809.patch] downloaded at Fri Dec  5 18:15:26 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 933
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/866/","06/Dec/14 06:16;hustlmsp;commit 0dfb4fb in master.
commit f912141 in branch 4.3

Thanks [~cxie]","06/Dec/14 06:57;hudson;FAILURE: Integrated in bookkeeper-master #873 (See [https://builds.apache.org/job/bookkeeper-master/873/])
BOOKKEEPER-809: Wrong metric on LedgerDeleteOp and LedgerOpenOp (Charles Xie via sijie) (sijie: rev 0dfb4fb94d0ccc98e1050f662712d85bcf2003b1)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java
BOOKKEEPER-809: Wrong metric on LedgerDeleteOp and LedgerOpenOp (Charles Xie via sijie) (missing CHANGES.txt) (sijie: rev ff5d2c5125d7d7fbe48d7935524820c55a887124)
* CHANGES.txt
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointException in bookie server when using twitter-ostrich-provider,BOOKKEEPER-805,12757666,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,y0un5,y0un5,y0un5,25/Nov/14 11:37,16/May/16 21:47,14/Mar/19 02:39,06/Dec/14 05:55,4.3.0,,4.3.1,4.4.0,,,,,0,,"How to reproduce this bug
1) Set configurations in conf/bk_server.conf to use twitter-ostrich-provider.
{noformat}
statsProviderClass=org.apache.bookkeeper.stats.twitter.ostrich.OstrichProvider
statsExport=true
{noformat}

2) Copy twitter-ostrich-provider-4.3.0.jar and required library jars to lib directory.
{noformat}
(library jars)
ostrich_2.9.2-9.1.3.jar
scala-json_2.9.2-3.0.1.jar
scala-library-2.9.2.jar
util-app_2.9.2-6.3.7.jar
util-core_2.9.2-6.3.7.jar
util-eval_2.9.2-6.3.7.jar
util-jvm_2.9.2-6.3.7.jar
util-logging_2.9.2-6.3.7.jar
{noformat}

3) Start a bookie server. Then, the server doesn't start and server log shows NullPointException.
{noformat}
2014-11-25 17:30:27,796 - ERROR [main:BookieServer@396] - Exception running bookie server :
java.lang.NullPointerException
    at com.twitter.ostrich.stats.StatsListener.<init>(StatsListener.scala:90)
    at com.twitter.ostrich.stats.LatchedStatsListener.<init>(StatsListener.scala:144)
    at com.twitter.ostrich.stats.StatsListener$$anonfun$apply$4.apply(StatsListener.scala:68)
    at com.twitter.ostrich.stats.StatsListener$$anonfun$apply$4.apply(StatsListener.scala:68)
    at com.twitter.ostrich.stats.StatsListener$$anonfun$getOrRegister$1.apply(StatsListener.scala:40)
    at com.twitter.ostrich.stats.StatsListener$$anonfun$getOrRegister$1.apply(StatsListener.scala:39)
    at scala.Option.getOrElse(Option.scala:108)
    at com.twitter.ostrich.stats.StatsListener$.getOrRegister(StatsListener.scala:39)
    at com.twitter.ostrich.stats.StatsListener$.apply(StatsListener.scala:67)
    at com.twitter.ostrich.admin.AdminServiceFactory$$anonfun$configureStatsListeners$1.apply(AdminServiceFactory.scala:81)
    at com.twitter.ostrich.admin.AdminServiceFactory$$anonfun$configureStatsListeners$1.apply(AdminServiceFactory.scala:81)
    at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
    at scala.collection.immutable.List.foreach(List.scala:76)
    at com.twitter.ostrich.admin.AdminServiceFactory.configureStatsListeners(AdminServiceFactory.scala:81)
    at com.twitter.ostrich.admin.AdminServiceFactory.apply(AdminServiceFactory.scala:61)
    at org.apache.bookkeeper.stats.twitter.ostrich.OstrichProvider.start(OstrichProvider.java:57)
    at org.apache.bookkeeper.proto.BookieServer.main(BookieServer.java:375)
{noformat}
",,,,,,,,,,,,,,,,,,,01/Dec/14 02:30;y0un5;BOOKKEEPER-805.patch;https://issues.apache.org/jira/secure/attachment/12684341/BOOKKEEPER-805.patch,25/Nov/14 11:57;y0un5;BOOKKEEPER-805.patch;https://issues.apache.org/jira/secure/attachment/12683528/BOOKKEEPER-805.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-11-25 12:04:21.242,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:54 UTC 2016,,,,,,0|i22rbz:,9223372036854775807,,,,,,,,"25/Nov/14 11:57;y0un5;I've attached a patch.

There are two problems in OstrichProvider.java.
1) null values are assigned to parameters require scala's List type. These should be replaced with empty List values.

2) After fixing 1), 'java.lang.IllegalStateException: server in wrong state' is thrown. This is caused by starting AdminHttpService twice. AdminServiceFactory automatically calls AdminHttpService's start(), so we shouldn't call  AdminHttpService's start() again.",25/Nov/14 12:04;ikelly;Best for [~hustlmsp] to review this.,01/Dec/14 02:04;hustlmsp;[~y0un5] the fix looks good to me. could you also fix the IllegalStateException by removing start call? because I don't see the patch removes it.,"01/Dec/14 02:30;y0un5;[~hustlmsp],  sorry for my mistake. I've attached a new patch containing all changes.
",01/Dec/14 04:26;hustlmsp;looks good. thanks [~y0un5]. +1 for the new patch. will hold on committing this until we go TLP.,01/Dec/14 04:34;hustlmsp;assign the task to [~y0un5],"05/Dec/14 19:27;hadoopqa;Testing JIRA BOOKKEEPER-805


Patch [BOOKKEEPER-805.patch|https://issues.apache.org/jira/secure/attachment/12684341/BOOKKEEPER-805.patch] downloaded at Fri Dec  5 18:51:52 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 933
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/867/",06/Dec/14 05:55;hustlmsp;committed 130ebfa in master,06/Dec/14 06:00;hustlmsp;committed b93ff76 in branch 4.3,06/Dec/14 06:01;hustlmsp;Thanks [~y0un5] for your contribution.,"06/Dec/14 06:28;hudson;FAILURE: Integrated in bookkeeper-master #872 (See [https://builds.apache.org/job/bookkeeper-master/872/])
BOOKKEEPER-805: NullPointException in bookie server when using twitter-ostrich-provider (Youngjoon Kim via sijie) (sijie: rev 130ebfa8f3763c1b98b29124a2bb648b2a810281)
* bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java
","06/Dec/14 06:57;hudson;FAILURE: Integrated in bookkeeper-master #873 (See [https://builds.apache.org/job/bookkeeper-master/873/])
BOOKKEEPER-805: NullPointException in bookie server when using twitter-ostrich-provider (Youngjoon Kim via sijie) (missing CHANGES.txt) (sijie: rev 8a5ac72762480f5f972aafcf1fc8207e12ef76e3)
* CHANGES.txt
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Client program is not terminated when using openLedgerNoRecovery,BOOKKEEPER-804,12757378,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,y0un5,y0un5,24/Nov/14 12:17,16/May/16 21:47,14/Mar/19 02:39,06/Dec/14 06:43,4.3.0,,4.3.1,4.4.0,,bookkeeper-client,,,0,,"If a client program does some operations using a ledger handle opened by openLedgerNoRecovery(), the program is not terminated after the handle and bookkeeper object is closed.

Here is a sample code. 
{code}
import java.util.Enumeration;

import org.apache.bookkeeper.client.BookKeeper;
import org.apache.bookkeeper.client.LedgerEntry;
import org.apache.bookkeeper.client.LedgerHandle;

public class BkClient {
  public static void main(String[] args) {
    try {
      BookKeeper bk = new BookKeeper(""localhost:2181"");

      // 9 is a ledger id of an existing ledger
      LedgerHandle lh = bk.openLedgerNoRecovery(9, BookKeeper.DigestType.CRC32, ""passwd"".getBytes());

      Enumeration<LedgerEntry> entries = lh.readEntries(0, 0);

      lh.close();
      bk.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
{code}

Thread dump of this program shows that non-daemon thread ""ZkLedgerManagerScheduler-0""  is alive, after bk.close() is called. 
",,,,,,,,,,,,,,,,,,,01/Dec/14 14:40;ikelly;0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch;https://issues.apache.org/jira/secure/attachment/12684412/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch,24/Nov/14 16:19;ikelly;0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch;https://issues.apache.org/jira/secure/attachment/12683348/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch,24/Nov/14 16:04;ikelly;0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch;https://issues.apache.org/jira/secure/attachment/12683344/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2014-11-24 13:06:11.743,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:37 UTC 2016,,,,,,0|i22plb:,9223372036854775807,,,,,,,,"24/Nov/14 13:06;ikelly;Strange, it only happens if you call readEntries. If you just open the ledger there's no problem. I'll look into it.","24/Nov/14 15:58;ikelly;The problem came in with BOOKKEEPER-654. We wrap the ledger managers catch the callbacks and make sure they get called when we clean up. The wrapper wasn't chaining the close call though (a simple omission issue), so AbstractZkLedgerManager#close() was never called. It only manifested when readEntries was called in this case, because if readEntries hadn't been called, the process would have exited before the thread started.

I've attached a fix. This is really hard to test for, or at least I can't find a clean way. I can't check what threads are alive before and after, since the bookies also run in the same thread, so they could also end up creating threads :/

Thanks for reporting this Youngjoon.","24/Nov/14 16:19;ikelly;Actually, this can be tested using a ThreadGroup. Test added to patch.","24/Nov/14 16:46;hadoopqa;Testing JIRA BOOKKEEPER-804


Patch [0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch|https://issues.apache.org/jira/secure/attachment/12683344/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch] downloaded at Mon Nov 24 16:10:18 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/849/","24/Nov/14 17:22;hadoopqa;Testing JIRA BOOKKEEPER-804


Patch [0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch|https://issues.apache.org/jira/secure/attachment/12683348/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch] downloaded at Mon Nov 24 16:46:43 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 931
.    Tests failed: 1
.    Tests errors: 1

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/850/","24/Nov/14 18:06;hadoopqa;Testing JIRA BOOKKEEPER-804


Patch [0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch|https://issues.apache.org/jira/secure/attachment/12683348/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch] downloaded at Mon Nov 24 17:30:16 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 931
.    Tests failed: 1
.    Tests errors: 1

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/851/","24/Nov/14 21:46;hadoopqa;Testing JIRA BOOKKEEPER-804


Patch [0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch|https://issues.apache.org/jira/secure/attachment/12683348/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch] downloaded at Mon Nov 24 21:10:25 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 931
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/852/","26/Nov/14 02:46;hadoopqa;Testing JIRA BOOKKEEPER-804


Patch [0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch|https://issues.apache.org/jira/secure/attachment/12683348/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch] downloaded at Wed Nov 26 02:10:19 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 924
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/853/","01/Dec/14 02:15;hustlmsp;the fix doesn't seem to be right. you shouldn't put underlying#close in the finally block. there are two drawbacks, 1) it would cause underlying being closed twice. 2) if exception is thrown in final block, the writelock won't be unlocked.

in twitter's branch, we had a fix to close the underlying in the last line after error out all the callbacks.","01/Dec/14 14:42;ikelly;Ah, you're right, about the writelock at least. I've updated the patch as you suggested.

I don't understand the double close though. Where would underlying be closed twice?

Btw, don't commit yet until I've sent out the new TLP source info. Should be monday or tuesday. Mailing lists are broken right now though.","01/Dec/14 21:31;hustlmsp;{code}
        try {
            if (closed) {
                return;
            }
            closed = true;
            keys = new HashSet<GenericCallback>(callbacks.keySet());
        } finally {
            closeLock.writeLock().unlock();
        }
{code}

if you put underlying.close() in finally block, it would be executed ignoring the closed flag, which it potentially be double closed.","05/Dec/14 23:27;hadoopqa;Testing JIRA BOOKKEEPER-804


Patch [0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch|https://issues.apache.org/jira/secure/attachment/12684412/0001-BOOKKEEPER-804-Client-program-is-not-terminated-when.patch] downloaded at Fri Dec  5 22:52:47 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 934
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/874/",06/Dec/14 06:35;hustlmsp;the new patch looks good to me,"06/Dec/14 06:42;hustlmsp;+1

commit 2b88b11 in master
commit 3c86339 in branch 4.3
",06/Dec/14 06:43;hustlmsp;thanks [~ikelly] for the patch,"06/Dec/14 07:25;hudson;FAILURE: Integrated in bookkeeper-master #874 (See [https://builds.apache.org/job/bookkeeper-master/874/])
BOOKKEEPER-804: Client program is not terminated when using openLedgerNoRecovery (ivank via sijie) (sijie: rev 2b88b11fa7597254ccbf828f16efc665e852788d)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* CHANGES.txt
* bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Guide for making a replicated log out of ledgers,BOOKKEEPER-803,12757019,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Nov/14 17:00,16/May/16 21:47,14/Mar/19 02:39,12/Dec/14 11:15,,,4.4.0,,,,,,0,,"We need a guide to show people how to create a replicated log out of ledgers, as ledgers on their own aren't enough.",,,,,,,,,,,,,,,,,,,21/Nov/14 17:01;ikelly;0003-Ledgers-2-logs.patch;https://issues.apache.org/jira/secure/attachment/12682911/0003-Ledgers-2-logs.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-11-21 18:47:52.098,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:49 UTC 2016,,,,,,0|i22nrb:,9223372036854775807,,,,,,,,21/Nov/14 17:01;ikelly;Preview: http://bk.ivankelly.net/bookkeeper/docs/trunk/bookkeeperLedgers2Logs.html,21/Nov/14 17:02;ikelly;https://reviews.apache.org/r/28335/,"21/Nov/14 18:47;hadoopqa;Testing JIRA BOOKKEEPER-803


Patch [0003-Ledgers-2-logs.patch|https://issues.apache.org/jira/secure/attachment/12682911/0003-Ledgers-2-logs.patch] downloaded at Fri Nov 21 18:12:49 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 852
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/830/","21/Nov/14 19:25;hadoopqa;Testing JIRA BOOKKEEPER-803


Patch [0003-Ledgers-2-logs.patch|https://issues.apache.org/jira/secure/attachment/12682911/0003-Ledgers-2-logs.patch] downloaded at Fri Nov 21 18:50:22 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/831/","22/Nov/14 02:29;hadoopqa;Testing JIRA BOOKKEEPER-803


Patch [0003-Ledgers-2-logs.patch|https://issues.apache.org/jira/secure/attachment/12682911/0003-Ledgers-2-logs.patch] downloaded at Sat Nov 22 01:53:38 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/840/","22/Nov/14 21:05;hadoopqa;Testing JIRA BOOKKEEPER-803


Patch [0003-Ledgers-2-logs.patch|https://issues.apache.org/jira/secure/attachment/12682911/0003-Ledgers-2-logs.patch] downloaded at Sat Nov 22 20:30:20 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/841/","26/Nov/14 06:00;hadoopqa;Testing JIRA BOOKKEEPER-803


Patch [0003-Ledgers-2-logs.patch|https://issues.apache.org/jira/secure/attachment/12682911/0003-Ledgers-2-logs.patch] downloaded at Wed Nov 26 05:24:14 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/859/",05/Dec/14 06:03;hustlmsp;+1.,05/Dec/14 15:16;zhaijia;This is a very helpful doc. Thanks.,"05/Dec/14 17:38;hadoopqa;Testing JIRA BOOKKEEPER-803


Patch [0003-Ledgers-2-logs.patch|https://issues.apache.org/jira/secure/attachment/12682911/0003-Ledgers-2-logs.patch] downloaded at Fri Dec  5 17:01:06 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 933
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/864/",12/Dec/14 11:15;ikelly;Committed to master (264995c). Thanks for reviewing guys.,"12/Dec/14 12:00;hudson;FAILURE: Integrated in bookkeeper-master #885 (See [https://builds.apache.org/job/bookkeeper-master/885/])
BOOKKEEPER-803: Guide for making a replicated log out of ledgers (ivank) (ivank: rev 264995cf2fc97ae527a8c24b369790a424d88d87)
* doc/bookkeeperLedgers2Logs.textile
* CHANGES.txt
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper protocol documentation,BOOKKEEPER-802,12757018,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Nov/14 16:56,16/May/16 21:47,14/Mar/19 02:39,07/Sep/15 15:59,,,4.4.0,,,,,,0,,We need a precise description of the bookkeeper protocol and the guarantees therein.,,,,,,,,,,,,,,,,,,,23/Aug/15 16:03;ikelly;0001-BookKeeper-protocol-description.patch;https://issues.apache.org/jira/secure/attachment/12751917/0001-BookKeeper-protocol-description.patch,21/Nov/14 16:57;ikelly;0002-Protocol.patch;https://issues.apache.org/jira/secure/attachment/12682909/0002-Protocol.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-11-21 17:36:27.876,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:28 UTC 2016,,,,,,0|i22nr3:,9223372036854775807,,,,,,,,21/Nov/14 16:57;ikelly;Preview: http://bk.ivankelly.net/bookkeeper/docs/trunk/bookkeeperProtocol.html,21/Nov/14 16:58;ikelly;https://reviews.apache.org/r/28334/,"21/Nov/14 17:36;hadoopqa;Testing JIRA BOOKKEEPER-802


Patch [0002-Protocol.patch|https://issues.apache.org/jira/secure/attachment/12682909/0002-Protocol.patch] downloaded at Fri Nov 21 17:00:20 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/828/","21/Nov/14 20:36;hadoopqa;Testing JIRA BOOKKEEPER-802


Patch [0002-Protocol.patch|https://issues.apache.org/jira/secure/attachment/12682909/0002-Protocol.patch] downloaded at Fri Nov 21 20:01:13 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/833/","22/Nov/14 01:17;hadoopqa;Testing JIRA BOOKKEEPER-802


Patch [0002-Protocol.patch|https://issues.apache.org/jira/secure/attachment/12682909/0002-Protocol.patch] downloaded at Sat Nov 22 00:41:59 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/838/","22/Nov/14 22:18;hadoopqa;Testing JIRA BOOKKEEPER-802


Patch [0002-Protocol.patch|https://issues.apache.org/jira/secure/attachment/12682909/0002-Protocol.patch] downloaded at Sat Nov 22 21:43:13 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 929
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/843/","26/Nov/14 04:47;hadoopqa;Testing JIRA BOOKKEEPER-802


Patch [0002-Protocol.patch|https://issues.apache.org/jira/secure/attachment/12682909/0002-Protocol.patch] downloaded at Wed Nov 26 04:12:06 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/857/",05/Dec/14 06:01;hustlmsp;lgtm. +1.,05/Dec/14 15:28;zhaijia;Good document. It helped me a lot to understand the codes.,"05/Dec/14 17:00;hadoopqa;Testing JIRA BOOKKEEPER-802


Patch [0002-Protocol.patch|https://issues.apache.org/jira/secure/attachment/12682909/0002-Protocol.patch] downloaded at Fri Dec  5 16:24:44 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 932
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/863/",09/Dec/14 10:42;ikelly;-1 yet. Add info on when things hit persistent storage (like fencing flag),"09/Dec/14 13:10;zhaijia;A verify small typo :)
Missed a word ""have"".

h4. Ensembles
When the ledger is created, E bookies are chosen for the entries of that ledger. The bookies are the initial ensemble of the ledger. A ledger can +have+ multiple ensembles, but an entry has only one ensemble. Changes in the ensemble, involves a new fragment being added to the ledger.",18/Dec/14 23:09;fpj;Canceling patch until comments are addressed.,23/Aug/15 16:03;ikelly;I've addressed the comments (including my own) and uploaded a new version.,07/Sep/15 15:55;hustlmsp;the patch looks good to me. +1.,07/Sep/15 15:59;hustlmsp;committed as a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8 in master. thanks [~ikelly],"07/Sep/15 16:32;hudson;SUCCESS: Integrated in bookkeeper-master #1159 (See [https://builds.apache.org/job/bookkeeper-master/1159/])
BOOKKEEPER-802: Bookkeeper protocol documentation (ivank via sijie) (sijie: rev a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8)
* CHANGES.txt
* doc/bookkeeperProtocol.textile
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper client tutorial,BOOKKEEPER-801,12757015,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Nov/14 16:51,16/May/16 21:47,14/Mar/19 02:39,12/Dec/14 11:13,,,4.4.0,,,,,,0,,Taking the tutorial from https://github.com/ivankelly/bookkeeper-tutorial and adding it to the bookkeeper docs.,,,,,,,,,,,,,,,,,,,21/Nov/14 16:53;ikelly;0001-Bookkeeper-tutorial.patch;https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-11-21 18:12:33.347,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:51 UTC 2016,,,,,,0|i22nqf:,9223372036854775807,,,,,,,,21/Nov/14 16:53;ikelly;Postprocessing it looks like: http://bk.ivankelly.net/bookkeeper/docs/trunk/bookkeeperTutorial.html,21/Nov/14 16:55;ikelly;https://reviews.apache.org/r/28333/,"21/Nov/14 18:12;hadoopqa;Testing JIRA BOOKKEEPER-801


Patch [0001-Bookkeeper-tutorial.patch|https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch] downloaded at Fri Nov 21 17:36:44 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/829/","21/Nov/14 20:01;hadoopqa;Testing JIRA BOOKKEEPER-801


Patch [0001-Bookkeeper-tutorial.patch|https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch] downloaded at Fri Nov 21 19:25:44 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/832/","22/Nov/14 01:53;hadoopqa;Testing JIRA BOOKKEEPER-801


Patch [0001-Bookkeeper-tutorial.patch|https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch] downloaded at Sat Nov 22 01:17:48 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/839/","22/Nov/14 21:42;hadoopqa;Testing JIRA BOOKKEEPER-801


Patch [0001-Bookkeeper-tutorial.patch|https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch] downloaded at Sat Nov 22 21:06:16 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/842/","26/Nov/14 05:23;hadoopqa;Testing JIRA BOOKKEEPER-801


Patch [0001-Bookkeeper-tutorial.patch|https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch] downloaded at Wed Nov 26 04:48:01 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/858/",05/Dec/14 06:02;hustlmsp;lgtm +1,05/Dec/14 15:22;zhaijia;This is a good tutorial. Very useful for beginners. Thanks.,"05/Dec/14 15:54;hadoopqa;Testing JIRA BOOKKEEPER-801


Patch [0001-Bookkeeper-tutorial.patch|https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch] downloaded at Fri Dec  5 15:19:08 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 932
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/861/","05/Dec/14 16:24;hadoopqa;Testing JIRA BOOKKEEPER-801


Patch [0001-Bookkeeper-tutorial.patch|https://issues.apache.org/jira/secure/attachment/12682908/0001-Bookkeeper-tutorial.patch] downloaded at Fri Dec  5 16:21:00 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","12/Dec/14 11:13;ikelly;Committed to master, 91b80f

Thanks for reviewing guys.","12/Dec/14 12:00;hudson;FAILURE: Integrated in bookkeeper-master #885 (See [https://builds.apache.org/job/bookkeeper-master/885/])
BOOKKEEPER-801: Bookkeeper client tutorial (ivank) (ivank: rev 91b80f6c8d538fd9c16b30907c95d93ee90af04a)
* CHANGES.txt
* doc/bookkeeperTutorial.textile
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expose whether a ledger is closed or not,BOOKKEEPER-800,12756976,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Nov/14 13:30,16/May/16 21:47,14/Mar/19 02:39,05/Dec/14 13:39,,,4.0.0,4.3.1,4.4.0,,,,0,,"On issue i could writing the tutorial is that when you open a ledger in non-recovery mode, it's not possible to check if the ledger you opened has been closed or is still been written too. This complicates things when you get to the end of the ledger, as you don't know whether to try for more entries in the same ledger, or to look at the next ledger is the list.

This jira is to expose this information (it's in the metadata). This method only makes sense for reading. For writing a ledger, you really should know if you closed the ledger or not, and if you don't then you shouldn't be touching it again.",,,,,,,,,,,,,,,,,,,21/Nov/14 16:09;ikelly;0001-Expose-whether-a-ledger-has-been-closed.patch;https://issues.apache.org/jira/secure/attachment/12682903/0001-Expose-whether-a-ledger-has-been-closed.patch,21/Nov/14 13:37;ikelly;0001-Expose-whether-a-ledger-has-been-closed.patch;https://issues.apache.org/jira/secure/attachment/12682881/0001-Expose-whether-a-ledger-has-been-closed.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-11-21 14:24:04.735,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:50 UTC 2016,,,,,,0|i22nhz:,9223372036854775807,,,,,,,,21/Nov/14 13:37;ikelly;patch is trivial,"21/Nov/14 14:24;hadoopqa;Testing JIRA BOOKKEEPER-800


Patch [0001-Expose-whether-a-ledger-has-been-closed.patch|https://issues.apache.org/jira/secure/attachment/12682881/0001-Expose-whether-a-ledger-has-been-closed.patch] downloaded at Fri Nov 21 14:17:18 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/826/",21/Nov/14 16:09;ikelly;Had forgotten to commit a change locally.,"21/Nov/14 16:45;hadoopqa;Testing JIRA BOOKKEEPER-800


Patch [0001-Expose-whether-a-ledger-has-been-closed.patch|https://issues.apache.org/jira/secure/attachment/12682903/0001-Expose-whether-a-ledger-has-been-closed.patch] downloaded at Fri Nov 21 16:10:22 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/827/","21/Nov/14 21:12;hadoopqa;Testing JIRA BOOKKEEPER-800


Patch [0001-Expose-whether-a-ledger-has-been-closed.patch|https://issues.apache.org/jira/secure/attachment/12682903/0001-Expose-whether-a-ledger-has-been-closed.patch] downloaded at Fri Nov 21 20:37:14 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/834/","22/Nov/14 00:41;hadoopqa;Testing JIRA BOOKKEEPER-800


Patch [0001-Expose-whether-a-ledger-has-been-closed.patch|https://issues.apache.org/jira/secure/attachment/12682903/0001-Expose-whether-a-ledger-has-been-closed.patch] downloaded at Sat Nov 22 00:06:02 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/837/","22/Nov/14 22:54;hadoopqa;Testing JIRA BOOKKEEPER-800


Patch [0001-Expose-whether-a-ledger-has-been-closed.patch|https://issues.apache.org/jira/secure/attachment/12682903/0001-Expose-whether-a-ledger-has-been-closed.patch] downloaded at Sat Nov 22 22:18:38 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/844/","26/Nov/14 04:11;hadoopqa;Testing JIRA BOOKKEEPER-800


Patch [0001-Expose-whether-a-ledger-has-been-closed.patch|https://issues.apache.org/jira/secure/attachment/12682903/0001-Expose-whether-a-ledger-has-been-closed.patch] downloaded at Wed Nov 26 03:35:32 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 927
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/856/",05/Dec/14 06:01;hustlmsp;the patch lgtm. +1,"05/Dec/14 13:39;ikelly;Committed dc7e8f in branch-4.2
Committed 045976 in branch-4.3
Committed 78d6e4 in master",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Distribution schedule coverage sets don't take gaps in response lists into account when writequorum > ackquorum,BOOKKEEPER-799,12756950,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,21/Nov/14 11:33,16/May/16 21:47,14/Mar/19 02:39,09/Dec/14 19:07,,,4.0.0,4.3.1,4.4.0,,,,0,,"The algorithm now be used to check if all quorums are being covered when sending a read lac or fencing message is broken when writeQuorum >= ackQuorum.

The purpose of the algorithm is to tell us when we have heard a response from enough nodes, that an ack quorum could not possibly have been formed without at least one of the nodes that we have heard responses from.

The current algorithm works when writeQuorum == ackQuorum, as we consider all quorums covered if the first |ackQuorum| nodes in the writeQuorum are covered. However, this doesn't work in the case that it's the middle node in the quorum that we have heard.

Take the example, e:4, w:3, a:2, and we've heard from node 0, and node 2. In this case, it is possible for the write quorum, 1,2,3 to get an ack quorum if 1 and 3 response. 
",,,,,,,,,,,,,,,,,,,21/Nov/14 11:38;ikelly;0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch;https://issues.apache.org/jira/secure/attachment/12682858/0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-11-21 12:57:05.993,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:46 UTC 2016,,,,,,0|i22nc7:,9223372036854775807,,,,,,,,"21/Nov/14 11:38;ikelly;Fix is to check each write quorum after each response. If there is no write quorum with |ackQuorum| nodes available, then it is not possible for a writer to form a quorum without at least one of the nodes we have heard a response from.",21/Nov/14 11:40;ikelly;https://reviews.apache.org/r/28326/,"21/Nov/14 12:57;fpj;Good catch! Write quorums are defined in a round-robin fashion so there is no gap in the sequence of ordered server ids for a write quorum, but since an ack quorum can be a subset of a write quorum, an ack quorum might have gaps in the sequence of bookies ids.",21/Nov/14 13:22;ikelly;I think that once this is in we should roll a 4.2.4 and 4.3.1 release. I'd like to wait until TLP stuff is set up first though. Branches are much easier to deal with in git.,"21/Nov/14 14:16;hadoopqa;Testing JIRA BOOKKEEPER-799


Patch [0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch|https://issues.apache.org/jira/secure/attachment/12682858/0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch] downloaded at Fri Nov 21 13:40:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 931
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/825/","21/Nov/14 21:48;hadoopqa;Testing JIRA BOOKKEEPER-799


Patch [0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch|https://issues.apache.org/jira/secure/attachment/12682858/0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch] downloaded at Fri Nov 21 21:13:05 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 931
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/835/","22/Nov/14 00:05;hadoopqa;Testing JIRA BOOKKEEPER-799


Patch [0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch|https://issues.apache.org/jira/secure/attachment/12682858/0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch] downloaded at Fri Nov 21 23:30:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 931
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/836/","22/Nov/14 23:30;hadoopqa;Testing JIRA BOOKKEEPER-799


Patch [0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch|https://issues.apache.org/jira/secure/attachment/12682858/0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch] downloaded at Sat Nov 22 22:54:32 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 931
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/845/","26/Nov/14 03:35;hadoopqa;Testing JIRA BOOKKEEPER-799


Patch [0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch|https://issues.apache.org/jira/secure/attachment/12682858/0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch] downloaded at Wed Nov 26 02:55:49 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 931
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/855/",04/Dec/14 19:05;hustlmsp;the patch lgtm +1,"05/Dec/14 17:32;hudson;SUCCESS: Integrated in bookkeeper-master #871 (See [https://builds.apache.org/job/bookkeeper-master/871/])
BOOKKEEPER-799: Distribution schedule coverage sets don't take gaps in response lists into account when writequorum > ackquorum (ivank) (ivank: rev 5de01f700ede31f186f5d8d97afac382f1e45327)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java
* CHANGES.txt
","05/Dec/14 22:52;hadoopqa;Testing JIRA BOOKKEEPER-799


Patch [0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch|https://issues.apache.org/jira/secure/attachment/12682858/0001-BOOKKEEPER-799-Distribution-schedule-coverage-sets-d.patch] downloaded at Fri Dec  5 22:49:04 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","09/Dec/14 19:07;ikelly;committed in 

master  5de01f7
branch-4.3 669a91
branch-4.2 f98294",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException when calling CodahaleOpStatsLogger#toOpStatsData(),BOOKKEEPER-797,12756403,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmorel,mmorel,mmorel,19/Nov/14 13:38,16/May/16 21:47,14/Mar/19 02:39,19/Nov/14 17:01,4.3.0,,4.4.0,,,bookkeeper-stats,,,0,,"The implementation of CodahaleOpStatsLogger#toOpStatsData() passes incorrect parameters to codahale's Snapshot#getValue method, resulting in the following runtime exception:

java.lang.IllegalArgumentException: 10.0 is not in [0..1]
	at com.codahale.metrics.Snapshot.getValue(Snapshot.java:52)
	at org.apache.bookkeeper.stats.CodahaleOpStatsLogger.toOpStatsData(CodahaleOpStatsLogger.java:64)
...

In order to pass quantiles as [0..1] values, as expected by codahale metrics library, we must divide parameters by 100 before passing them.

",,,,,,,,,,,,,,,,,,,19/Nov/14 14:59;mmorel;codahale-stats-opstats-fix.patch;https://issues.apache.org/jira/secure/attachment/12682422/codahale-stats-opstats-fix.patch,19/Nov/14 13:40;mmorel;codahale-stats-opstats-fix.patch;https://issues.apache.org/jira/secure/attachment/12682418/codahale-stats-opstats-fix.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-11-19 14:25:47.179,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:30 UTC 2016,,,,,,0|i22k2f:,9223372036854775807,,,,,,,,"19/Nov/14 13:40;mmorel;Patch with test, generated using git diff --no-prefix",19/Nov/14 13:42;mmorel;Attached patch includes a small test demonstrating the issue.,"19/Nov/14 14:25;hadoopqa;Testing JIRA BOOKKEEPER-797


Patch [codahale-stats-opstats-fix.patch|https://issues.apache.org/jira/secure/attachment/12682418/codahale-stats-opstats-fix.patch] downloaded at Wed Nov 19 13:50:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/820/",19/Nov/14 14:59;mmorel;Looks like the previous patch was missing some license headers in the test file,"19/Nov/14 15:36;hadoopqa;Testing JIRA BOOKKEEPER-797


Patch [codahale-stats-opstats-fix.patch|https://issues.apache.org/jira/secure/attachment/12682422/codahale-stats-opstats-fix.patch] downloaded at Wed Nov 19 15:00:21 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/821/",19/Nov/14 17:01;ikelly;Committed r1640597. Thanks Matthieu,"19/Nov/14 17:45;hudson;SUCCESS: Integrated in bookkeeper-trunk #855 (See [https://builds.apache.org/job/bookkeeper-trunk/855/])
BOOKKEEPER-797: IllegalArgumentException when calling CodahaleOpStatsLogger#toOpStatsData() (ivank: rev 1640597)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/test
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats/CodahaleOpStatsTest.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition causes writes to hang if ledger is fenced,BOOKKEEPER-795,12750774,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,ikelly,ikelly,27/Oct/14 14:18,16/May/16 21:47,14/Mar/19 02:39,09/Dec/14 19:55,,,4.0.0,4.3.1,4.4.0,,,,0,,"If a ledger is fenced while the write is still writing to it, some of the writes will fail to ever complete.

I've attached the log of this happening along with a test case that will trigger the behaviour.

What appears to be happening is that when the fence occurs, the first write after the fence gets an unrecoverable error, so tries to close the ledger. Closing the ledger sets the closed flag on the ledger metadata, and tries to write it, which fails as the metadata in zookeeper was modified by the fencing operation, so the close op fails, resets the closed status for a moment, a write operation gets through, which then fails with a fencing error, so we try to close the ledger, but the other close operation has since closed the ledger in our metadata, so nothing happens, and the write hangs forever.

There's a number of issues here, but foremost, the ledger metadata that the handle is using should only ever represent what is actually in zookeeper. Having various parts of the code flipping bits just explodes the state space. The LedgerMetadata object itself should be immutable, and should only be modified, as a local variable, using a builder, before writing to zookeeper. Only when the zookeeper operation succeeds should we update the reference which LedgerHandle has access to.

There's also a problem in how we handle pendingaddops when we close. Really it shouldn't be possible for a write op to get through after a closure, but we should be defensive here and error out anything that has gotten through, adding a big old log message to alert us that this cases that shouldn't happen, is happening.",,,,,,,,,,,,,,,BOOKKEEPER-822,,,,27/Oct/14 14:19;ikelly;0001-Demonstrate-race-condition.patch;https://issues.apache.org/jira/secure/attachment/12677301/0001-Demonstrate-race-condition.patch,13/Nov/14 13:58;ikelly;0001-Made-ledger-metadata-immutable.patch;https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch,03/Nov/14 17:00;ikelly;0001-Made-ledger-metadata-immutable.patch;https://issues.apache.org/jira/secure/attachment/12678958/0001-Made-ledger-metadata-immutable.patch,09/Dec/14 07:44;hustlmsp;BOOKKEEPER-795.patch;https://issues.apache.org/jira/secure/attachment/12685958/BOOKKEEPER-795.patch,27/Oct/14 14:19;ikelly;TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml;https://issues.apache.org/jira/secure/attachment/12677302/TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2014-11-03 17:46:10.612,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:31 UTC 2016,,,,,,0|i21m6v:,9223372036854775807,,,,,,,,"03/Nov/14 17:00;ikelly;Patch makes LedgerMetadata immutable.

Ensembles are now ImmutableMap<Long, ImmutableList<BookieSocketAddress>>. The LedgerManager manager interface has changed to avoid implicitly updating the version of a LedgerMetadata object. Recovery, Closing and handling bookie failures have now changed, as there are no longer merge operations. If a write to zookeeper fails, then recovery/closing/failureHandling are retried with the new metadata, provided that assumptions are not broken.
    
The interesting changes are in LedgerHandle and LedgerMetadata.
    
There are a lot of changes from ArrayList -> ImmutableList,List

Also a lot of changes from currentEnsemble -> getCurrentEnsemble.
    
One test had to change. With the old code, if someone fenced a ledger, closing would fail. This isn't always the case now. If there's lac of the writing ledger matches the lastEntryId of the new metadata, then close can succeed. ConditionalSetTest has changed to reflect this.
    ",03/Nov/14 17:02;ikelly;Review board: https://reviews.apache.org/r/27529/,"03/Nov/14 17:46;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12678958/0001-Made-ledger-metadata-immutable.patch] downloaded at Mon Nov  3 17:10:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 2 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/804/","03/Nov/14 23:45;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12678958/0001-Made-ledger-metadata-immutable.patch] downloaded at Mon Nov  3 23:10:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 2 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/805/","04/Nov/14 00:37;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12678958/0001-Made-ledger-metadata-immutable.patch] downloaded at Tue Nov  4 00:01:05 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 2 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/806/","04/Nov/14 01:13;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12678958/0001-Made-ledger-metadata-immutable.patch] downloaded at Tue Nov  4 00:37:32 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 2 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/807/","13/Nov/14 14:36;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch] downloaded at Thu Nov 13 14:00:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/813/","13/Nov/14 19:46;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch] downloaded at Thu Nov 13 19:10:18 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/814/","14/Nov/14 02:46;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch] downloaded at Fri Nov 14 02:10:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 930
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/815/","16/Nov/14 07:03;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch] downloaded at Sun Nov 16 06:27:57 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/818/","18/Nov/14 22:35;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch] downloaded at Tue Nov 18 21:59:56 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 930
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/819/","23/Nov/14 00:09;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch] downloaded at Sat Nov 22 23:34:14 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 931
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/847/","05/Dec/14 23:34;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [0001-Made-ledger-metadata-immutable.patch|https://issues.apache.org/jira/secure/attachment/12681335/0001-Made-ledger-metadata-immutable.patch] downloaded at Fri Dec  5 23:27:34 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 20 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/875/","09/Dec/14 06:07;hustlmsp;I like the code refactor. but I'd still prefer separating addressing the problem from code refactoring, because basically it make things complicated and hard to verify if the fix really address this issue.

And if we address the problem without refactoring, the change could go in 4.2.*, 4,3* too.",09/Dec/14 07:44;hustlmsp;Attach a patch to address the hang issue without refactoring.,"09/Dec/14 09:13;hadoopqa;Testing JIRA BOOKKEEPER-795


Patch [BOOKKEEPER-795.patch|https://issues.apache.org/jira/secure/attachment/12685958/BOOKKEEPER-795.patch] downloaded at Tue Dec  9 09:06:10 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
.    {color:red}WARNING: the current HEAD has 1 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/878/",09/Dec/14 18:20;ikelly;Good point. This fix looks good for me. I'll commit to master/4.3/4.2 and make a patch for the refactor for master only.,"09/Dec/14 19:32;hudson;FAILURE: Integrated in bookkeeper-master #880 (See [https://builds.apache.org/job/bookkeeper-master/880/])
BOOKKEEPER-795: Race condition causes writes to hang if ledger is fenced (sijie via ivank) (ivan: rev e79f8736a7dfc2c7191455e4e88b85a85f0472bf)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java
* CHANGES.txt
","09/Dec/14 19:55;ikelly;Committed

master e79f87
branch-4.3 fed237
branch-4.2 2bc229",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookkeeperProtocol.Response.status is completely ignored,BOOKKEEPER-794,12748859,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,ikelly,ikelly,17/Oct/14 09:53,16/May/16 21:47,14/Mar/19 02:39,05/Apr/16 19:56,,,4.4.0,,,,,,0,,"As the summary says, if you set the status to anything but ok, it will be ignored by PerChannelBookieClient. If you try to handle it, a whole load of tests fail due to different mapping for read and write requests.

I'm running this while rebasing our auth stuff, which i'll push up when it's been validated. I means the auth stuff needs to be aware of all message types, as I can't just send a EUA error in the packet level status.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-05 06:09:47.608,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:48 UTC 2016,,,,,,0|i21ahj:,9223372036854775807,,,,,,,,"05/Dec/14 06:09;hustlmsp;I don't understand this ticket. for old client, it doesn't support auth, why new client would send auth failed status code? the auth stuff should only exists in new client, right? since it is the new feature introduce in the new version.

or do you mind generate a patch or github branch? that I could take a look at what is exactly the issue?","15/Mar/16 00:18;mmerli;[~sijie@apache.org] This jira is required for BOOKKEEPER-901, it's already included in the PR https://github.com/apache/bookkeeper/pull/23",05/Apr/16 19:56;mmerli;This was merged with BOOKKEEPER-901,16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Move to java 7,BOOKKEEPER-793,12747757,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,13/Oct/14 16:18,16/May/16 21:47,14/Mar/19 02:39,15/Oct/14 05:27,,,4.4.0,,,,,,0,,Oracle ended support for java 6 last march. We should follow their lead. As an added bonus we can start to use async io apis with 7.,,,,,,,,,,,,,,,,,,,14/Oct/14 12:14;ikelly;0001-Make-bookkeeper-require-java-7.patch;https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-10-13 17:37:36.984,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:47:26 UTC 2016,,,,,,0|i213yv:,9223372036854775807,,,,,,,,13/Oct/14 17:37;fpj;+1,14/Oct/14 12:14;ikelly;Had to fixup one file because jdk7 is more careful with generic types and heap pollution.,"14/Oct/14 12:26;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 12:20:55 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/791/","14/Oct/14 13:05;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 12:59:52 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/793/","14/Oct/14 13:11;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 13:05:49 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/794/","14/Oct/14 13:24;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 13:18:40 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/795/","14/Oct/14 13:30;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 13:24:34 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/796/","14/Oct/14 13:43;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 13:37:01 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/797/","14/Oct/14 15:23;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 14:48:22 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 929
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-jdk7-test/2/","14/Oct/14 16:35;hadoopqa;Testing JIRA BOOKKEEPER-793


Patch [0001-Make-bookkeeper-require-java-7.patch|https://issues.apache.org/jira/secure/attachment/12674755/0001-Make-bookkeeper-require-java-7.patch] downloaded at Tue Oct 14 16:00:19 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 929
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/798/",15/Oct/14 05:27;hustlmsp;+1 committed as r1631943.,"15/Oct/14 05:31;hudson;FAILURE: Integrated in bookkeeper-trunk #817 (See [https://builds.apache.org/job/bookkeeper-trunk/817/])
BOOKKEEPER-793: Move to java 7 (sijie: rev 1631943)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java
* /zookeeper/bookkeeper/trunk/pom.xml
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove hedwig from source tree,BOOKKEEPER-769,12722460,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,robindhamankar,ikelly,ikelly,19/Jun/14 10:01,16/May/16 21:47,14/Mar/19 02:39,16/Mar/16 03:44,,,4.4.0,,,,,,0,,"As the license issue, isn't forcing the issue right now, I'd like to change this to a general discussion of the future of hedwig. Almost all the comments about the c++ client apply to hedwig as a whole. Hedwig has only had 5 real changes in the last year, only one in 2014. For all intensive purposes, it is inactive, unmaintained and unsupported. AFAIK, noone is using it in production in anything close to the form of the apache codebase.

However, by having it in the codebase, at the same level of bookkeeper-server, we are indicating to users that it is in fact supported software and considered as important as bookkeeper-server. So, I would like to propose that, after the 4.3.0 release, we remove hedwig from the codebase. Obviously, it will still be available in the git/svn history, and in all releases <= 4.3.0.

-The hedwig c++ client has not had any real code change since november 2012. It is not built as part of the main build. It is not tested as part of the main build. It is effectively unmaintained.-

-In addition to this, it contains m4 files whose license status is unclear.-

-I propose we simple remove it from trunk and branch-4.2. The license issue is currently blocking the release of 4.2.3. [~jiannan], [~farrellee], you were the last people to submit anything for the client. Are you using in production? Any objection to its removal from the main code tree?-",,,,,,,,,,,,BOOKKEEPER-857,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-19 12:32:48.411,,,no_permission,,,,,,,,,,,,,400651,,,Mon May 16 21:47:28 UTC 2016,,,,,,0|i1wyun:,400745,,,,,,,,"19/Jun/14 12:32;jiannan;The hedwig c++ client code runs well in our production previously though we now create a new library base on our protocol.
About the removal of the code, could we just resolve the license issue? After all, I remember the c++ client has better performance than Java implementation by Sijie Guo's testing.","19/Jun/14 12:55;fpj;[~jiannan], this comment doesn't make a lot of sense to me. Your comment doesn't imply a use case and there has been no investment in that code that is visible to this community. Given that it is in the way because this license issue, Ivan's suggestion might be the best choice. I'd give a few more days to see if there is any feedback here, but without use cases and investment in the code, I'd say +1 here. ","19/Jun/14 13:22;ikelly;[~jiannan] by my understanding, your code has diverged significantly from hedwig, so really, the internal yahoo branch has become the trunk for that codebase. In the apache project, there has been virtually no movement in the last year on hedwig, and even less on the cpp client. Fixing the license issue doesn't change the fact that this code is rotting and isn't being built/tested. Removing from the source tree, doesn't mean the code will be unavailable. Git/svn keeps everything afterall. It does give a signal that this is unmaintained code, because, it is.","19/Jun/14 17:23;farrellee;no objection to removal from me, thank you for checking.","20/Jun/14 02:39;jiannan;[~fpj] [~ivank@yahoo-inc.com]
The current state is that there is no bug found and no explicit production use case which cause its inactivity. Remove the code from source tree means no formal support (bug fix/new feature/etc.) in community though the code is available from commit history. To me, just remove client library code and leaving server side is a kind of abnormal. I would suggest to have a quick fix on the license issue to get rid of blocking this release and then discuss how Hedwig will go in next release.","20/Jun/14 11:19;fpj;[~jiannan], you need to be a bit more explicit about how you feel about this. Is your vote a 0-, meaning that you don't have a strong preference although you have a bias, or is it -1, meaning that you really don't agree with this happening?

We got feedback on the legal list, which I have forwarded to the dev list. It seems ok to have it as is, but the issue that this part of the code is not maintained still remains. ",20/Jun/14 13:22;jiannan;[~fpj]. Then I would vote 0-.,"22/Jun/14 09:50;umamaheswararao;+1 to remove the code which is not maintained.

{quote}
 I'd give a few more days to see if there is any feedback here, but without use cases and investment in the code, I'd say +1 here.
{quote}
Agreed with this point too.  

","25/Feb/16 00:06;mmerli;+1 for me, I'll provide a pull request to remove it in 4.4 (if no further objections arise)","25/Feb/16 00:27;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/16

    BOOKKEEPER-769: Remove Hedwig from source tree

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-769-remove-hedwig

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/16.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #16
    
----
commit 636caaa26da1009f42069348bc7a1d0c6b8cfbfb
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-02-25T00:16:04Z

    BOOKKEEPER-769: Remove Hedwig from source tree

----
",25/Feb/16 00:28;mmerli;PR submitted at https://github.com/apache/bookkeeper/pull/16,"14/Mar/16 00:09;githubbot;GitHub user robindh opened a pull request:

    https://github.com/apache/bookkeeper/pull/27

    BOOKKEEPER-769: Remove the Hedwig Code

    - Remove code directories for Hedwig code
    - Remove code directories under compat
    - Remove Hedwig related documentation
    - Remove references to Hedwig code in pom files
    
    * There is an unrelated findbugs violation in BookieWatcher which is not related to this change
    * There were flaky tests that failed locally but passed when I reran them
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/robindh/bookkeeper RemoveHedwig

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/27.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #27
    
----
commit 45ad0460555ca62ca58dbf776fba377be6ef1d36
Author: Robin Dhamankar <robindh@robins-macbook-air.local>
Date:   2016-03-13T23:54:31Z

    Remove the Hedwig Code

----
","14/Mar/16 05:34;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/27#issuecomment-196151440
  
    got vote results:
    
    9 +1 (6 from committers)
    0 +0
    0 -1
    
    so +1 for this code change.
","14/Mar/16 16:21;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/16#issuecomment-196394320
  
    Closing in favor of #27
","14/Mar/16 16:21;githubbot;Github user merlimat closed the pull request at:

    https://github.com/apache/bookkeeper/pull/16
","16/Mar/16 03:44;hustlmsp;Issue resolved by pull request 27
[https://github.com/apache/bookkeeper/pull/27]","16/Mar/16 03:51;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/27
","16/Mar/16 14:07;hudson;FAILURE: Integrated in bookkeeper-master #1316 (See [https://builds.apache.org/job/bookkeeper-master/1316/])
BOOKKEEPER-769: Remove the Hedwig Code (sijie: rev 9a8d62b1d1231f2fe6feca7e0c407a426a1278d5)
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java
* hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java
* hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java
* hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java
* hedwig-client/src/main/cpp/lib/data.h
* hedwig-client-jms/src/test/java/org/apache/activemq/JMSMessageTest.java
* hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java
* hedwig-client-jms/src/test/java/org/apache/activemq/ExpiryHogTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java
* hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java
* hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryArithmeticFunction.java
* hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicCompositeSendReceiveTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveTest.java
* doc/hedwigDesign.textile
* hedwig-server/src/main/resources/server.p12
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/MetadataProcessor.java
* hedwig-client-jms/src/test/java/org/apache/activemq/AutoFailTestSupport.java
* hedwig-client/src/main/cpp/scripts/log4cxx.conf
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicBasedLoadShedder.java
* hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java
* hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/package-info.java
* hedwig-client/conf/hw_client.conf
* hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java
* hedwig-client-jms/src/test/java/org/apache/activemq/MessageListenerRedeliveryTest.java
* hedwig-client/src/main/cpp/test/multiplextest.cpp
* hedwig-client/src/main/cpp/test/Makefile.am
* hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java
* hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DispatchMultipleConsumersTest.java
* hedwig-client/src/main/cpp/test/messagefiltertest.cpp
* hedwig-client/src/main/cpp/lib/publisherimpl.cpp
* hedwig-server/conf/hw_server.conf
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubInfo.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveSubscriberTest.java
* hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java
* hedwig-client-jms/src/test/java/org/apache/activemq/ConnectionCleanupTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicNetworkTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/CloseSubscriptionHandler.java
* hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
* hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java
* hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java
* hedwig-client/src/main/cpp/lib/Makefile.am
* hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java
* hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorTest.java
* hedwig-client/src/main/cpp/configure.ac
* hedwig-client/src/main/cpp/test/publishtest.cpp
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/HChannelImpl.java
* hedwig-client/src/main/cpp/m4/ax_boost_base.m4
* hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsResourceProvider.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubScanCallback.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsConnectionStartStopTest.java
* hedwig-client-jms/src/main/grammar/javacc/readme.html
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/TreeDumperSelectorParserVisitor.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendSameMessageTest.java
* doc/index.textile
* hedwig-client/src/main/cpp/lib/clientimpl.h
* hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java
* hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/AlreadyStartDeliveryException.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java
* hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java
* hedwig-client-jms/src/test/java/org/apache/activemq/util/MessageIdList.java
* hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumerTopicTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/Factory.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/InactiveDurableTopicTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ValueComparisonFunction.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/JmsHeader.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java
* hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfConsumer.java
* hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java
* hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java
* hedwig-client/src/main/java/org/apache/hedwig/util/Callback.java
* hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestFactoryLayout.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/LogicalComparisonFunction.java
* hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsRedeliveredTest.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java
* hedwig-server/src/main/resources/findbugsExclude.xml
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscriptionChannelManager.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/MyNode.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsCreateConsumerInOnMessageTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/NonSubscriptionChannelPipelineFactory.java
* hedwig-client/src/main/cpp/test/pubsubtest.cpp
* hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java
* hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java
* hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MapMessageImpl.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/WriteCallback.java
* hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/util/IdGenerator.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendWithAsyncCallbackTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubSelectorDelayTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSelectorTest.java
* hedwig-client-jms/pom.xml
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSessionImpl.java
* hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java
* hedwig-client-jms/src/test/java/org/apache/hedwig/jms/BasicJMSTest.java
* hedwig-client/src/main/cpp/Makefile.am
* hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryCallback.java
* hedwig-client-jms/src/main/protobuf/JmsHeader.proto
* hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MapUtils.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageProducerImpl.java
* hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java
* hedwig-client/src/main/cpp/lib/clientimpl.cpp
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestLocalDBPersistenceManagerBlackBox.java
* hedwig-client-jms/src/test/java/org/apache/activemq/util/ProducerThread.java
* hedwig-client/src/main/cpp/lib/eventdispatcher.h
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java
* hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ChannelDisconnectListener.java
* hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubInfo.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubscriptionHangTestCase.java
* hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java
* doc/hedwigParams.textile
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageConsumerImpl.java
* hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java
* hedwig-client/src/main/cpp/scripts/server-control.sh
* hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java
* hedwig-client-jms/src/test/java/org/apache/activemq/test/rollback/DelegatingTransactionalMessageListener.java
* hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java
* hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt
* compat-deps/hedwig-server-compat-4.2.0/pom.xml
* hedwig-client-jms/src/test/java/org/apache/activemq/ConsumerReceiveWithTimeoutTest.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSentMessageTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckListenerTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContextFactory.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java
* hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DiscriminatingConsumerLoadTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsBenchmark.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheMXBean.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsMultipleClientsTestSupport.java
* hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java
* hedwig-client/src/main/cpp/test/throttledeliverytest.cpp
* hedwig-server/pom.xml
* hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java
* hedwig-server/conf/hw_region_client.conf
* hedwig-client-jms/src/test/java/org/apache/activemq/JMSConsumerTest.java
* doc/metastore.textile
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java
* hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubLoad.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsTest.java
* hedwig-client/src/main/cpp/lib/util.h
* hedwig-client-jms/src/test/java/org/apache/activemq/util/ConsumerThread.java
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadController.java
* hedwig-client/src/main/cpp/inc/hedwig/subscribe.h
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckTest.java
* hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestFIFODeliveryManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JMSIndividualAckTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java
* hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/MMSubscriptionManager.java
* hedwig-server/src/main/java/org/apache/hedwig/data/MessageFormatter.java
* hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheBlackBox.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java
* hedwig-client-jms/src/test/java/org/apache/activemq/util/DefaultTestAppender.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscribeResponseHandler.java
* hedwig-client/src/main/cpp/lib/channel.h
* hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java
* hedwig-server/src/test/java/org/apache/hedwig/server/LoggingExceptionHandler.java
* hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerBean.java
* hedwig-client/src/main/cpp/README
* hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerMXBean.java
* hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java
* compat-deps/hedwig-server-compat-4.0.0/pom.xml
* doc/hedwigBuild.textile
* hedwig-client/src/main/java/org/apache/hedwig/client/handlers/AbstractResponseHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java
* hedwig-server/src/test/java/org/apache/hedwig/server/meta/MetadataManagerFactoryTestCase.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicTransactionTest.java
* hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java
* hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHubSSL.java
* hedwig-client/src/main/cpp/test/main.cpp
* hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilterBase.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicTransactionTest.java
* hedwig-client/src/main/cpp/inc/hedwig/exceptions.h
* hedwig-client-jms/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/package-info.html
* hedwig-client-jms/src/main/resources/log4j.properties
* hedwig-client/src/main/cpp/test/messageboundtest.cpp
* hedwig-client/src/main/cpp/test/util.h
* hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java
* hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleProducer.java
* hedwig-client/src/main/cpp/lib/subscriberimpl.h
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositeConsumeTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannelManager.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/NetworkedSyncTest.java
* hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java
* hedwig-protocol/src/main/resources/findbugsExclude.xml
* hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/InterpretSelectorParserVisitor.java
* hedwig-client/src/main/java/org/apache/hedwig/filter/ServerMessageFilter.java
* hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractHChannelManager.java
* hedwig-client/src/main/cpp/hedwig-0.1.pc.in
* hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/PropertyExprFunction.java
* hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ResubscribeException.java
* hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsTest.java
* hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/StubSubscriptionManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnDurableTopicConsumedMessageTest.java
* hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/HChannelHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveWithMessageExpirationTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/jmx/HedwigMBeanInfo.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java
* hedwig-server/src/main/resources/LICENSE.bin.txt
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionRollbackOrderTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionFactoryImpl.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSubscriberImpl.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableConsumerCloseAndReconnectTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnTopicConsumedMessageTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/test/TestSupport.java
* hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadClient.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvalState.java
* hedwig-client-jms/src/test/java/org/apache/activemq/CombinationTestSupport.java
* hedwig-client/src/main/cpp/lib/client.cpp
* hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java
* hedwig-client/src/main/cpp/lib/channel.cpp
* hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java
* hedwig-client/src/main/java/org/apache/hedwig/util/VarArgs.java
* hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JMSDurableTopicRedeliverTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JMSUsecaseTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java
* hedwig-client/src/main/cpp/inc/hedwig/publish.h
* hedwig-client/src/main/cpp/inc/hedwig/callback.h
* hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryExprFunction.java
* hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java
* hedwig-client-jms/src/test/java/org/apache/activemq/util/SimplePojo.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ProducerConsumerTestSupport.java
* hedwig-client/src/main/cpp/m4/ax_boost_asio.m4
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubLoad.java
* hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/net/BookieSocketAddress.java
* hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java
* hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java
* hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsConsumerResetActiveListenerTest.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubServerManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TestSupport.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java
* hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java
* doc/hedwigConsole.textile
* hedwig-client/src/main/cpp/m4/ax_doxygen.m4
* hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java
* hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsWithJMXTest.java
* hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java
* hedwig-client/src/main/cpp/scripts/tester.sh
* hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java
* hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h
* hedwig-client-jms/src/test/java/org/apache/hedwig/JmsTestBase.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicRedeliverTest.java
* hedwig-client-jms/src/main/resources/findbugsExclude.xml
* hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManagerWithRangeScan.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java
* hedwig-server/src/test/resources/log4j.properties
* hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorParserTest.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java
* hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java
* hedwig-server/conf/hwenv.sh
* hedwig-server/src/test/java/org/apache/hedwig/zookeeper/ZooKeeperTestBase.java
* hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicOwnershipManager.java
* doc/hedwigDocs.textile
* hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ConcurrentProducerDurableConsumerTest.java
* doc/hedwigMetadata.textile
* hedwig-client/src/main/cpp/test/subscribetest.cpp
* hedwig-client/src/main/cpp/aminclude.am
* hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h
* hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java
* hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java
* README
* hedwig-client/src/main/cpp/lib/publisherimpl.h
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageUtil.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubPersistenceManager.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/ObjectMessageImpl.java
* hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java
* hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java
* hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java
* hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java
* hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java
* hedwig-server/src/main/java/org/apache/hedwig/server/meta/FactoryLayout.java
* hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionEventListener.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumer.java
* hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSessionDeliveryModeTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/package-info.html
* hedwig-server/src/test/java/org/apache/hedwig/HelperMethods.java
* hedwig-client-jms/src/test/java/org/apache/activemq/LoadTestBurnIn.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckListenerTest.java
* hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java
* hedwig-server/src/test/java/org/apache/hedwig/zookeeper/TestZkUtils.java
* hedwig-client/src/main/cpp/test/test.sh
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryArithmeticFunction.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNonPersistentTopicTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscriptionChannelPipelineFactory.java
* hedwig-client/src/main/cpp/inc/hedwig/client.h
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsTestSupport.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyCloseSubscriptionHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/SubscribeClosePublishThenConsumeTest.java
* hedwig-client/src/main/java/org/apache/hedwig/util/Either.java
* bookkeeper-server/conf/log4j.properties
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
* hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java
* doc/hedwigJMX.textile
* hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicPersistenceManager.java
* hedwig-client/src/main/java/org/apache/hedwig/util/Option.java
* compat-deps/hedwig-server-compat-4.1.0/pom.xml
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/multiplex/MultiplexSubscribeResponseHandler.java
* hedwig-client/src/main/java/org/apache/hedwig/util/SubscriptionListener.java
* hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHubProxy.java
* hedwig-client/src/main/cpp/lib/filterablemessagehandler.h
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/BytesMessageImpl.java
* hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java
* hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java
* hedwig-server/conf/log4j.properties
* hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/TestSupport.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
* hedwig-client/src/main/java/org/apache/hedwig/filter/ClientMessageFilter.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorConstant.java
* hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java
* hedwig-client/src/main/cpp/c-doc.Doxyfile
* hedwig-protocol/src/main/protobuf/PubSubProtocol.proto
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java
* doc/hedwigUser.textile
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java
* hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryEndPoint.java
* hedwig-client/src/main/cpp/lib/data.cpp
* hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java
* hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java
* hedwig-client/src/main/cpp/lib/exceptions.cpp
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ResubscribeCallback.java
* hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java
* hedwig-server/src/main/java/org/apache/hedwig/server/jmx/HedwigJMXService.java
* hedwig-server/bin/hedwig
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicOwnershipChangeListener.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfRate.java
* hedwig-server/src/main/resources/NOTICE.bin.txt
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/MyObject.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ExprFunction.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/StreamMessageImpl.java
* hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleConsumer.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java
* hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/util/Wait.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryExprFunction.java
* hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerMXBean.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java
* hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CancelScanRequest.java
* hedwig-client/src/main/cpp/test/utiltest.cpp
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/multiplex/MultiplexHChannelManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TopicRedeliverTest.java
* hedwig-client/src/main/cpp/m4/gtest.m4
* hedwig-client/src/main/cpp/lib/util.cpp
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManagerBlackBox.java
* hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowDurableConsumerTopicTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/DefaultServerChannel.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/TextMessageImpl.java
* hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java
* hedwig-client/src/main/cpp/lib/subscriberimpl.cpp
* hedwig-server/src/main/resources/p12.pass
* hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java
* compat-deps/pom.xml
* hedwig-client/pom.xml
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java
* hedwig-server/src/main/java/org/apache/hedwig/server/meta/SubscriptionDataManager.java
* hedwig-server/src/test/java/org/apache/hedwig/server/netty/WriteRecordingChannel.java
* hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* hedwig-client-jms/src/test/java/org/apache/activemq/TimeStampTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveTestSupport.java
* hedwig-client/src/main/cpp/lib/eventdispatcher.cpp
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/multiplex/MultiplexSubscriptionChannelPipelineFactory.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java
* hedwig-server/src/test/java/org/apache/hedwig/StubScanCallback.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/package-info.html
* doc/hedwigMessageFilter.textile
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java
* hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageImpl.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ClientChannelPipelineFactory.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/NonBlockingConsumerRedeliveryTest.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/QueueSessionImpl.java
* hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSendReceiveTest.java
* hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestTopicBasedLoadShedder.java
* hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/BasicSelectorGrammarTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/NumberOfDestinationsTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannel.java
* hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionImpl.java
* pom.xml
* hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java
* hedwig-client/src/main/cpp/m4/ax_boost_thread.m4
* hedwig-server/src/main/java/org/apache/hedwig/server/meta/MsMetadataManagerFactory.java
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
* hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvaluationException.java
* hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java
* hedwig-server/bin/hedwig-daemon.sh
* hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHubRegular.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java
* hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNetworkTest.java
* hedwig-server/src/main/java/org/apache/hedwig/server/jmx/HedwigMBeanRegistry.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubProcessTest.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfProducer.java
* hedwig-protocol/pom.xml
* hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheBean.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java
* formatter.xml
* hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java
* hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java
* hedwig-client/src/main/cpp/scripts/network-delays.sh
* hedwig-server/src/main/java/org/apache/hedwig/server/handlers/Handler.java
* hedwig-server/src/main/java/org/apache/hedwig/server/meta/MetadataManagerFactory.java
* hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java
* hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java
* hedwig-client/src/main/java/org/apache/hedwig/client/netty/SubscriptionEventEmitter.java
* hedwig-server/src/test/java/org/apache/hedwig/StubCallback.java
* hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/package-info.html
* hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/package-info.html
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some entry logs are not removed from the bookie storage,BOOKKEEPER-695,12674198,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,16/Oct/13 21:34,18/Feb/16 21:43,14/Mar/19 02:39,25/Sep/15 06:05,4.3.0,,4.0.0,4.3.2,4.4.0,,,,0,,"Some entry logs appear to be truncated (possible at a momemnt when the bookie
was shut down) and the compaction is never getting rid of them:

{code}
00:00:06.448 [GarbageCollectorThread] INFO o.a.b.bookie.GarbageCollectorThread - Extracting entry log meta from entryLogId: 1497
00:00:07.140 [GarbageCollectorThread] WARN  o.a.b.bookie.GarbageCollectorThread - Premature exception when processing 1497 recovery will take care of the problem
java.io.IOException: Short read for ledger entry from entryLog 1497@718702792(31356!=32840)
        at org.apache.bookkeeper.bookie.EntryLogger.scanEntryLog(EntryLogger.java:514) ~[bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.extractMetaFromEntryLog(GarbageCollectorThread.java:572) [bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.extractMetaFromEntryLogs(GarbageCollectorThread.java:549) [bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.run(GarbageCollectorThread.java:268) [bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
{code}

These entry logs are not being removed: 
{code}
$ ll -h *.log
-rw-r--r-- 1 yahoo users 686M Jul 17 10:45 5d9.log
-rw-r--r-- 1 yahoo users 634M Jul 27 19:31 b2d.log
-rw-r--r-- 1 yahoo users 1.5G Jul 28 15:22 b35.log
-rw-r--r-- 1 yahoo users 2.0G Aug  4 04:57 dbd.log
-rw-r--r-- 1 yahoo users 2.0G Aug  4 04:58 dbe.log
.....
{code}
",,,,,,,,,,,,,,,,,,,09/Apr/15 18:29;mmerli;0001-BOOKKEEPER-695-Some-entry-logs-are-not-removed-from-.patch;https://issues.apache.org/jira/secure/attachment/12724290/0001-BOOKKEEPER-695-Some-entry-logs-are-not-removed-from-.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-18 19:40:28.98,,,no_permission,,,,,,,,,,,,,353820,,,Mon Feb 01 21:10:17 UTC 2016,,,,,,0|i1p01j:,354112,,,,,,,,"16/Oct/13 21:40;mmerli;I'm not sure where it would be best to handle this case. My understanding is that we should ignore the truncated entries and compact/gc the entry log as needed.

Perhaps it would be easier to handle it in GarbageCollectorThead.extractMetaFromEntryLog, so that it will only affect the GC scanning. If there are truncated/corrupted entries, most likely they will be replayed by the journal, but in any case we cannot do anything to bring them back to life, so we can just skip them.

Something like:
{code:java}
try {
    entryLogger.scanEntryLog(entryLogId, scanner);
} catch (IOException e) {
    /// print warning but continue
}
{code}","18/Oct/13 19:40;ikelly;I've seen this before. Basically, you'll get one of these entry logs if you shutdown while an entry is being written. This is a pretty normal case. I think we should just log a warning.",09/Apr/15 17:31;hustlmsp;I feel more comfortable to catch the exception in GarbageCollectorThread. so we know it is gc thread skips this exception explicitly ,09/Apr/15 17:36;mmerli;Disregard the above comment. The patch we had applied internally removed the IOException in case of short read instead of trying to catch them.,"09/Apr/15 18:14;hadoopqa;Testing JIRA BOOKKEEPER-695


Patch [0001-BOOKKEEPER-695-Some-entry-logs-are-not-removed-from-.patch|https://issues.apache.org/jira/secure/attachment/12724266/0001-BOOKKEEPER-695-Some-entry-logs-are-not-removed-from-.patch] downloaded at Thu Apr  9 17:36:57 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testCorruptEntryLog(org.apache.bookkeeper.bookie.EntryLogTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/914/",09/Apr/15 18:29;mmerli;Fixed unit test in attached patch.,"09/Apr/15 19:07;hadoopqa;Testing JIRA BOOKKEEPER-695


Patch [0001-BOOKKEEPER-695-Some-entry-logs-are-not-removed-from-.patch|https://issues.apache.org/jira/secure/attachment/12724290/0001-BOOKKEEPER-695-Some-entry-logs-are-not-removed-from-.patch] downloaded at Thu Apr  9 18:30:17 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/915/",10/Apr/15 01:01;hustlmsp;+1 for the change,21/Apr/15 07:45;hustlmsp;committed as b6dd505 in master,"21/Apr/15 08:33;hudson;SUCCESS: Integrated in bookkeeper-master #1028 (See [https://builds.apache.org/job/bookkeeper-master/1028/])
BOOKKEEPER-695: Some entry logs are not removed from the bookie storage (Matteo Merli via sijie) (sijie: rev b6dd505342051f267ca6af5fba1b70637c1e3fe0)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* CHANGES.txt
",09/Sep/15 18:00;hustlmsp;re-open this task for porting this change back to branch 4.3 and 4.2 (if needed),"17/Sep/15 14:45;eolivelli;actually this issue has fixversion=4.3.1, I think it should be 4.3.2","17/Sep/15 14:45;eolivelli;actually this issue has fixversion=4.3.1, I think it should be 4.3.2",25/Sep/15 06:05;mmerli;Committed as 6b5e5988 on branch-4.3,01/Feb/16 21:10;mmerli;Fixed in 4.3.2 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoRecovery shutting down on SyncDisconnected,BOOKKEEPER-594,12639153,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,mmerli,ikelly,ikelly,26/Mar/13 18:27,16/May/16 21:47,14/Mar/19 02:39,16/Mar/16 03:51,,,4.4.0,,,bookkeeper-auto-recovery,,,0,,"Currently the AutoRecovery daemon will shut down on SyncDisconnected. This is the wrong behaviour. It should wait until it gets a expired signal before shutting down. If autoRecoveryDaemonEnabled=true, then the autorecovery deamon is running in the same process as the bookie, the bookie death watcher will take down the bookie at this point also, but as the bookie hasn't shutdown, exit code will be 0, which is confusing to any monitoring app.
",,,,,,,,,,,,,,,,,,,25/Oct/13 23:38;mmerli;BOOKKEEPER-594.diff;https://issues.apache.org/jira/secure/attachment/12610405/BOOKKEEPER-594.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-25 23:38:16.745,,,no_permission,,,,,,,,,,,,,319623,,,Mon May 16 21:47:52 UTC 2016,,,,,,0|i1j5dj:,319964,,,,,,,,"26/Mar/13 18:29;ikelly;I have two plans to fix this. Firstly, the autorecovery daemon shouldn't take down the bookie, even if it has gone down itself. Secondly, it shouldn't go down itself on sync disconnected. Fixing the former will be very straight forward. The latter may be tricky.",25/Oct/13 23:38;mmerli;Proposed patch to make the ReplicationWorker more resilient to exceptions,"24/Mar/14 23:34;fpj;What's the status of this jira? It has a single sub-task resolved, but it has a patch attached and the status is open.",26/Jul/14 07:25;hustlmsp;ping the ticket. [~merlimat] [~ikelly],"25/Aug/14 17:31;ikelly;This should go into the next release, as it's part of making bookkeeper availability independent of zookeeper sessions.","10/Mar/16 20:58;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/26

    BOOKKEEPER-594: AutoRecovery shutting down on SyncDisconnected

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-594

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/26.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #26
    
----
commit 26aa34b45fe045d1ba54e59ea375f85b9a9b1c20
Author: Matteo Merli <matteo.merli@gmail.com>
Date:   2013-10-25T23:42:41Z

    BOOKKEEPER-594: AutoRecovery shutting down on SyncDisconnected

----
",10/Mar/16 21:00;mmerli;[~sijie@apache.org] Reviving this Jira. We've been use the patch in the PR for a while now without issues.,"16/Mar/16 03:50;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/26#issuecomment-197140462
  
    the change looks good to me. +1
","16/Mar/16 03:51;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/26
","16/Mar/16 03:51;hustlmsp;Issue resolved by pull request 26
[https://github.com/apache/bookkeeper/pull/26]","16/Mar/16 14:07;hudson;FAILURE: Integrated in bookkeeper-master #1316 (See [https://builds.apache.org/job/bookkeeper-master/1316/])
BOOKKEEPER-594: AutoRecovery shutting down on SyncDisconnected (sijie: rev 1a98088e38ca0a43c26d9a4847619b0a27bb90e8)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerCacheImpl is reserving 1/3 of Heap size but allocates NonHeap memory,BOOKKEEPER-578,12634331,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,27/Feb/13 01:02,16/May/16 21:47,14/Mar/19 02:39,05/Apr/16 06:51,,,4.4.0,,,bookkeeper-server,,,0,,"By default the page limit parameter is set to -1, which means to assign 1/3 of Heap space to the LedgerCache. Each LedgerEntryPage is then allocating the memory outside the heap (ByteBuffer.allocateDirect()).

This makes BK to use more memory than the -XmxNN configured setting. Is there any particular reason for the LedgerEntryPage buffer to be allocated outside the java heap? Could that be changed?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-27 06:21:10.895,,,no_permission,,,,,,,,,,,,,314824,,,Mon May 16 21:47:34 UTC 2016,,,,,,0|i1ibs7:,315168,,,,,,,,"27/Feb/13 06:21;hustlmsp;[~merlimat] I think using allocateDirect is for performance consideration. You could check http://stackoverflow.com/questions/5670862/bytebuffer-allocate-vs-bytebuffer-allocatedirect
","04/Mar/13 18:33;ikelly;As I understand it, direct byte buffers can be used for DMA, which skips a memory copy when reading in pages.","04/Mar/13 19:21;mmerli;Yes, I've seen the buffers are read with NIO from disk so it makes sense to direct buffers. The only thing, it's that using the default on 1/3 heap for that is misleading, because one assumes that memory will be allocated from inside the java heap. Say, if I configure the bookie jvm with -Xmx20g then the total amount of memory that the jvm will be using is 27Gb (20 + 20*1/3).","04/Mar/13 19:31;ikelly;yes. It's a documentation issue. I admit that before this issue cropped up, I assumed that direct memory was counted on the heap stats. We have 2 options. Document this better (which might involve updating the scripts to warn if mx is set too high), or switch to using non direct buffers. Direct buffers are slower to allocate, but avoid the read. But maybe the read isn't an issue.","05/Mar/13 19:06;rakeshr;Good catch [~merlimat].

In LedgerEntryPage, we are allocating direct buffer and this page is put into the cache. So each page will consume virtual memory which is outside the java heap and gradually resident memory(RES) usage will become high. IMHO, we could make the 'pages' cache bounded and also feel to use normal bytebuffers.
{code}
LedgerCacheImpl.java
HashMap<Long, HashMap<Long,LedgerEntryPage>> pages = new HashMap<Long, HashMap<Long,LedgerEntryPage>>();
{code}","07/Mar/13 03:18;rakeshr;bq.we could make the 'pages' cache bounded and also feel to use normal bytebuffers.

oops! I haven't seen the (pageCount  < pageLimit) logic, its efficiently sizing the cache. As I understand, directbuffers can be used in areas where native I/O interaction happens. Usually its recommended to use direct buffers for large, long-lived buffers that are subject to the underlying system's native I/O operations.","10/Nov/13 22:37;hustlmsp;[~mmerli] [~ikelly] is this still a problem? If not, could you guys close it?",15/Nov/13 15:02;ikelly;I think this is still something that merits more investigation. Not for 4.3.0 though.,14/Mar/16 06:04;hustlmsp;[~merlimat] do you guys still change from direct buffer to heap buffer?,"14/Mar/16 19:17;mmerli;No, we never changed these to heap buffers, rather we applied the explicit configurations, since it make sense to use direct buffers.","14/Mar/16 23:30;mmerli;Anyway, I would say that, if {{pageLimit}} is set to {{-1}} (the default), we set it to 1/3 of the maximum *direct memory*, instead of the max heap.","14/Mar/16 23:34;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/28

    BOOKKEEPER-578: LedgerCacheImpl is reserving 1/3 of Heap size but allocates NonHeap memory

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/28.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #28
    
----
commit 4521e7a677b7a33354d787cf4bd2928b5210c2ea
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-03-14T23:33:31Z

    BOOKKEEPER-578: LedgerCacheImpl is reserving 1/3 of Heap size but allocates NonHeap memory

----
","15/Mar/16 01:23;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/28#issuecomment-196597671
  
    @merlimat it seems that ""sun.misc.VM.maxDirectMemory();"" this API will be deprecated soon.
    
    [WARNING] <https://builds.apache.org/job/bookkeeper-master-git-pullrequest/ws/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java>:[335,40] sun.misc.VM is internal proprietary API and may be removed in a future release
","16/Mar/16 17:43;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/28#issuecomment-197452672
  
    @sijie updated with better way to get direct memory size
","05/Apr/16 06:48;githubbot;Github user sijie commented on the pull request:

    https://github.com/apache/bookkeeper/pull/28#issuecomment-205678610
  
    the change looks good to me. +1
","05/Apr/16 06:50;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/28
","05/Apr/16 06:51;hustlmsp;Issue resolved by pull request 28
[https://github.com/apache/bookkeeper/pull/28]","05/Apr/16 13:08;hudson;FAILURE: Integrated in bookkeeper-master #1336 (See [https://builds.apache.org/job/bookkeeper-master/1336/])
BOOKKEEPER-578: LedgerCacheImpl is reserving 1/3 of Heap size but (sijie: rev d607b366ba493617408888a768a99ee3f3ffb976)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DirectMemoryUtils.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java
",16/May/16 21:47;mmerli;Closed as part of BookKeeper-4.4.0 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Read zk host list in a wrong way in hedwig server,BOOKKEEPER-543,12626901,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,lvfangmin,lvfangmin,lvfangmin,10/Jan/13 07:49,13/Feb/13 15:46,14/Mar/19 02:39,10/Jan/13 09:39,4.1.0,,4.1.1,4.2.0,,hedwig-server,,,0,,"In ServerConfiguration#getZkHost we use conf.getString(ZK_HOST, ""localhost"") to get the zk host string which will only return the part before comma, need to change to getList.",,,,,,,,,,,,,,,,,,,10/Jan/13 07:57;lvfangmin;BOOKKEEPER-543.patch;https://issues.apache.org/jira/secure/attachment/12564133/BOOKKEEPER-543.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-10 08:05:11.255,,,no_permission,,,,,,,,,,,,,303591,,,Thu Jan 10 10:13:33 UTC 2013,,,,,,0|i17crj:,251036,,,,,,,,"10/Jan/13 08:05;hustlmsp;good catch, Fangmin. +1. after the pre-commit job finished, I will commit it if there was no issue.",10/Jan/13 09:00;lvfangmin;[~hustlmsp] thanks very much.,"10/Jan/13 09:16;hadoopqa;Testing JIRA BOOKKEEPER-543


Patch [BOOKKEEPER-543.patch|https://issues.apache.org/jira/secure/attachment/12564133/BOOKKEEPER-543.patch] downloaded at Thu Jan 10 08:45:10 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 784
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/233/",10/Jan/13 09:39;hustlmsp;committed as r1431232 in trunk. thanks Fangmin.,"10/Jan/13 10:13;hudson;Integrated in bookkeeper-trunk2 #49 (See [https://builds.apache.org/job/bookkeeper-trunk2/49/])
    BOOKKEEPER-543: Read zk host list in a wrong way in hedwig server (Fangmin via sijie) (Revision 1431232)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClientNotSubscribedException & doesn't receive enough messages in TestThrottlingDelivery#testServerSideThrottle,BOOKKEEPER-539,12626710,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,09/Jan/13 06:16,13/Feb/13 15:46,14/Mar/19 02:39,11/Jan/13 04:17,,,4.2.0,,,hedwig-server,,,0,,"ClientNotSubscribedException & doesn't receive enough messages failure in TestThrottlingDelivery#testServerSideThrottle.

{code}
-------------------------------------------------------------------------------
Test set: org.apache.hedwig.server.delivery.TestThrottlingDelivery
-------------------------------------------------------------------------------
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 18.544 sec <<< FAILURE!
testServerSideThrottle[1](org.apache.hedwig.server.delivery.TestThrottlingDelivery)  Time elapsed: 6.776 sec  <<< FAILURE!   junit.framework.AssertionFailedError: Should be expected messages with only 6 expected:<6> but was:<2>
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.failNotEquals(Assert.java:283)
        at junit.framework.Assert.assertEquals(Assert.java:64)
        at junit.framework.Assert.assertEquals(Assert.java:195)
        at org.apache.hedwig.server.delivery.TestThrottlingDelivery.throttleX(TestThrottlingDelivery.java:151)
        at org.apache.hedwig.server.delivery.TestThrottlingDelivery.testServerSideThrottle(TestThrottlingDelivery.java:216)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
{code}

{code}
-------------------------------------------------------------------------------
Test set: org.apache.hedwig.server.delivery.TestThrottlingDelivery
-------------------------------------------------------------------------------
Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 18.294 sec <<< FAILURE!
testServerSideThrottle[1](org.apache.hedwig.server.delivery.TestThrottlingDelivery)  Time elapsed: 6.763 sec  <<< ERROR!
org.apache.hedwig.exceptions.PubSubException$ClientNotSubscribedException: Client is not yet subscribed to Topic:            testServerSideThrottleWithHigherValue, SubscriberId: serverThrottleSub
        at org.apache.hedwig.client.netty.impl.multiplex.MultiplexHChannelManager.startDelivery(MultiplexHChannelManager.    java:221)
        at org.apache.hedwig.client.netty.impl.multiplex.MultiplexHChannelManager.startDelivery(MultiplexHChannelManager.    java:199)
        at org.apache.hedwig.client.netty.HedwigSubscriber.startDelivery(HedwigSubscriber.java:358)
        at org.apache.hedwig.server.delivery.TestThrottlingDelivery.throttleX(TestThrottlingDelivery.java:113)
        at org.apache.hedwig.server.delivery.TestThrottlingDelivery.testServerSideThrottle(TestThrottlingDelivery.java:226)          at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
{code}",,,,,,,,,,,,,,,,,,,10/Jan/13 18:30;ikelly;0001-BOOKKEEPER-539-ClientNotSubscribedException-doesn-t-.patch;https://issues.apache.org/jira/secure/attachment/12564210/0001-BOOKKEEPER-539-ClientNotSubscribedException-doesn-t-.patch,10/Jan/13 09:34;hustlmsp;BOOKKEEPER-539.diff;https://issues.apache.org/jira/secure/attachment/12564146/BOOKKEEPER-539.diff,10/Jan/13 08:43;hustlmsp;org.apache.hedwig.server.delivery.TestThrottlingDelivery-output.txt;https://issues.apache.org/jira/secure/attachment/12564142/org.apache.hedwig.server.delivery.TestThrottlingDelivery-output.txt,09/Jan/13 06:19;hustlmsp;org.apache.hedwig.server.delivery.TestThrottlingDelivery-output.txt;https://issues.apache.org/jira/secure/attachment/12563887/org.apache.hedwig.server.delivery.TestThrottlingDelivery-output.txt,09/Jan/13 06:19;hustlmsp;org.apache.hedwig.server.delivery.TestThrottlingDelivery-output.txt;https://issues.apache.org/jira/secure/attachment/12563886/org.apache.hedwig.server.delivery.TestThrottlingDelivery-output.txt,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2013-01-09 14:04:24.694,,,no_permission,,,,,,,,,,,,,303318,,,Fri Jan 11 04:59:13 UTC 2013,,,,,,0|i179en:,250492,,,,,,,,09/Jan/13 06:19;hustlmsp;here are the detail logs of the failure test case. thanks [~jiannan] for reporting.,"09/Jan/13 06:34;hustlmsp;the test case failed in Multiplex hedwig client. it was a race condition in FIFODeliveryManager#stopServingSubscriber.

it could be reproduced in following sequence.

1) subscriber #subscribe. FIFODeliveryManager#startServingSubscriber.
2) subscriber #closesub. FIFODeliveryManager#stopServingSubscriber (it is important that currently #stopServingSubscriber doesn't remove active subscriber from the mapping)
3) subscriber #subscribe. #startServingSubscriber replaced the active subscriber created at 2) with a newly active subscriber. after the replacement, it inserted another #stopServingSubscriber operatio in the queue.
4) the #stopServingSubscriber operation enqueued in 3) executed and delivered a FORCED_CLOSE_SUBSCRIPTION event to client,which would clear the subscription state established in 3) at the client side.

so 

a) if the clear operation executed before startDelivery, #startDelivery would throw ClientNotSubscribedException.
b) if the clear operation executed after startDelivery, it might cause 'doesn't receive enough messages'.

beside this critical issue, I found that there is a race condition over connected variable in ActiveSubscriber from the attached log. 'connected' variable isn't volatile, but it was used between DeliveryManager thread and ReadAheadCacheThread. some message would still be delivered to client side even someone close the subscription, because two threads see different value of 'connected' in different CPU cores.",09/Jan/13 06:36;hustlmsp;I think the patch in BOOKKEEPER-529 already fixed this issue. so I would move it from 4.3.0 to 4.2.0.,"09/Jan/13 14:04;umamaheswararao;If that is the case, we can close this as duplicate with BK-529 right?","09/Jan/13 18:47;hustlmsp;I would prefer that [~jiannan] could verify it to ensure that BOOKKEEPER-529 did resolve this issue, since this issue found when he ran the tests. Actually, I could not reproduce that issue on my mac.","10/Jan/13 08:43;hustlmsp;Attach another log about ClientNotSubscribedException problem, found in [~jiannan]'s environment. ","10/Jan/13 08:54;hustlmsp;this problem is similar as I described in previous comment.

the sequence caused the problem is :

1) subscriber #subscribe. FIFODeliveryManager#startServingSubscriber.
2) #startServingSubscriber: callback to send subscriber response back to client.
3) delivery manager thread is switched to execute other threads.
4) client received #subscribe response.
5) client #closeSubscription.
6) #closeSubscription would do FIFODeliveryManager#stopServingSubscriber, which removes subscriber from subscriberStates mapping. (the removal isn't executed in delivery manager thread, but in netty worker thread). so actually #stopServingSubscriber do nothing, since subscriberStates is empty now, since DeliveryManagerThread doesn't get the chance to continue execution.
7) delivery manager thread continues execution and put the active subscriber into the subscriberStates map.
8) when next subscribe request came in, it would replace the active subscriber with a new subscriber object and sent SUBSCRIPTION_FORCE_CLOSED event to its channel. since it was multiplexed channel, so the old subscriber event killed the new one, which caused ClientNotSubscribedException.

several places would fix here:

1) subscribe response only sent after the active subscriber is put in subscriberStates map.
2) removal should be executed in DeliveryRequest, running in delivery manager thread.
3) when replace a active subscriber, do checking whether the previous subscriber and the new subscriber are in same channel. if so, we don't sent FORCE_CLOSED event. because this case, might be a retry subscribe request for a previous timeout subscribe request in a multiplexed channel.","10/Jan/13 09:34;hustlmsp;attach a patch to address the issue according to the comment. but I don't have a testcase for it, because it is quite difficult to simulate such race condition.","10/Jan/13 10:45;hadoopqa;Testing JIRA BOOKKEEPER-539


Patch [BOOKKEEPER-539.diff|https://issues.apache.org/jira/secure/attachment/12564146/BOOKKEEPER-539.diff] downloaded at Thu Jan 10 10:14:26 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 784
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/234/","10/Jan/13 18:30;ikelly;Added a test case, which hits it reliably without the fix. Regarding the fix, it looks good, so +1 from me. Once either [~hustlmsp] or [~jiannan] +1 the test to verify I understood the issue correctly, this can be pushed into trunk.","10/Jan/13 18:40;hustlmsp;the test case looks good. +1. thanks so much for providing the test case, [~ikelly]","10/Jan/13 19:02;hadoopqa;Testing JIRA BOOKKEEPER-539


Patch [0001-BOOKKEEPER-539-ClientNotSubscribedException-doesn-t-.patch|https://issues.apache.org/jira/secure/attachment/12564210/0001-BOOKKEEPER-539-ClientNotSubscribedException-doesn-t-.patch] downloaded at Thu Jan 10 18:31:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 787
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/237/","11/Jan/13 03:12;jiannan;patch lgtm +1
I run with the patch for 16 hours and there is not error reported, so this patch do fix the problem.","11/Jan/13 04:17;hustlmsp;committed as r1431869. thanks Ivan for adding test case, thanks Jiannan for verification.","11/Jan/13 04:59;hudson;Integrated in bookkeeper-trunk2 #53 (See [https://builds.apache.org/job/bookkeeper-trunk2/53/])
    BOOKKEEPER-539: ClientNotSubscribedException & doesn't receive enough messages in TestThrottlingDelivery#testServerSideThrottle (sijie) (Revision 1431869)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestFIFODeliveryManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in BookKeeper#close,BOOKKEEPER-538,12626600,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,08/Jan/13 18:37,13/Feb/13 15:46,14/Mar/19 02:39,10/Jan/13 18:14,,,4.2.0,,,,,,0,,"I've seen this with BookieAutoRecoveryTest. Basically, we interrupt and join the replicationworker thread, and then close the BookKeeper instance. This can have caused a bookkeeper operation that never finished. The executor runs it after #close has closed the BookieClient. The operation opens a connection and therefore we get a hang on releaseExternalResources(). 

Solution is pretty simple. We should shutdown all executors before closing the bookieClient. I'll attach a patch which does this.",,,,,,,,,,,,,,,,,,,10/Jan/13 15:34;ikelly;0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch;https://issues.apache.org/jira/secure/attachment/12564189/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch,10/Jan/13 12:24;ikelly;0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch;https://issues.apache.org/jira/secure/attachment/12564155/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch,09/Jan/13 10:31;ikelly;0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch;https://issues.apache.org/jira/secure/attachment/12563925/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch,09/Jan/13 10:27;ikelly;0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch;https://issues.apache.org/jira/secure/attachment/12563921/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch,08/Jan/13 18:40;ikelly;0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch;https://issues.apache.org/jira/secure/attachment/12563795/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2013-01-08 18:56:43.702,,,no_permission,,,,,,,,,,,,,303207,,,Thu Jan 10 18:43:40 UTC 2013,,,,,,0|i178nj:,250370,,,,,,,,"08/Jan/13 18:56;hadoopqa;Testing JIRA BOOKKEEPER-538


Patch [0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch|https://issues.apache.org/jira/secure/attachment/12563795/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch] downloaded at Tue Jan  8 18:51:45 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/220/","08/Jan/13 19:04;rakeshr;Its great catch, also signaling to think more BookieAutoRecovery test cases :)","09/Jan/13 02:11;umamaheswararao;DO you think we have to handle this at BookieClient itself. Client should not allow to open any new channels after closed it right? Not sure I missed something here.

Current patch also looks good and ensuring all executors stopped before waiting to releaseExternalResources. I think this is the Jetty behavior that if there are any channels in open state then this will hang. I have just seen an open issue in Jetty as well JETTY-391 similar to it. 

On answering the first comment +1 on this patch as this can fix the issue as well.",09/Jan/13 03:14;umamaheswararao;oops.... there was a typo: 'JETTY-391' --> NETTY-391 :-) (jetty --> netty ),"09/Jan/13 07:35;hustlmsp;sounds great. I agreed that moving shutting down scheduler and mainWorkerPool before releaseExternalResources would be helpful. but awaitTermination is a kind of violence, it might terminate some ongoing operations forcefully. I am not sure is it possible to cause some channel is still leaking without close then block Netty#releaseExternalResources again. 

I thought that hedwig client already handled similar issue well. You could check hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java. It ensures that all outstanding channels would be closed finally during closing, so it would not block Netty#releaseExternalResources.
","09/Jan/13 09:56;ikelly;awaitTermination doesn't force anything. It waits until any operations on the scheduler finish. #shutdownNow will force the operations to finish, but this patch doesn't use that. I'm making a few changes now, and will attach a new patch shortly.",09/Jan/13 10:27;ikelly;New patch adds test and checks values of awaitTermination.,"09/Jan/13 10:31;ikelly;Last patch was the wrong version, correct one added now.","09/Jan/13 11:32;hadoopqa;Testing JIRA BOOKKEEPER-538


Patch [0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch|https://issues.apache.org/jira/secure/attachment/12563925/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch] downloaded at Wed Jan  9 11:01:48 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 783
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/224/","09/Jan/13 18:21;hustlmsp;checked the javadoc about 'awaitTermination' : Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.

if timeout occurs or current thread is interrupted, is it possible that there are ongoing tasks in the executor? if so, is it possible to have the same issue?","09/Jan/13 22:20;ikelly;{quote}
if timeout occurs or current thread is interrupted, is it possible that there are ongoing tasks in the executor? if so, is it possible to have the same issue?
{quote}
Technically, yes, this can happen if we have some bad logic somewhere that's running stuff in a loop. However, shutdown() will stop the executor from accepting any more tasks, so in reality this shouldn't happen. ",10/Jan/13 04:50;hustlmsp;OK. I am fine with it. +1 for the patch.,"10/Jan/13 04:57;umamaheswararao;Hi Ivan,

Could you please check the below comment before committing? (I have posted this in my previous comment)

{quote}
Do you think we have to handle this at BookieClient itself. Client should not allow to open any new channels after closed it right? Not sure I missed something here.

Current patch also looks good and ensuring all executors stopped before waiting to releaseExternalResources. I think this is the Netty behavior that if there are any channels in open state then this will hang. I have just seen an open issue in Jetty as well NETTY-391 similar to it. 

On answering the first comment +1 on this patch as this can fix the issue as well.
{quote}","10/Jan/13 05:09;hustlmsp;[~umamaheswararao] If I understand your question correctly, this is what I suggested on my comments, it would be better to follow similar pattern use in hedwig client (hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java), which close any open channel after the client is closed. ",10/Jan/13 11:12;ikelly;I'll add some code to BookieClient to block new connections after close.,"10/Jan/13 12:24;ikelly;New patch blocks any new connections being made after close is called, along with the change in ordering of the executor shutdown from the previous patches.","10/Jan/13 12:58;umamaheswararao;Thanks a lot, Ivan for update on the patch!
closed variable can be volatile?
Other than that patch looks great to me. +1","10/Jan/13 13:30;hadoopqa;Testing JIRA BOOKKEEPER-538


Patch [0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch|https://issues.apache.org/jira/secure/attachment/12564155/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch] downloaded at Thu Jan 10 12:59:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 786
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testPeriodicCheckWhenDisabled(org.apache.bookkeeper.replication.AuditorPeriodicCheckTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/235/","10/Jan/13 15:34;ikelly;Added volatile for closed, though it's not strictly necessary. The read write lock should form a memory barrier.

More importantly, fixed the AuditorPeriodicCheckTest issue. The problem had been there all along, but the fix for this made it trigger more. Basically, it was relying on the executor being shutdown later to allow it to check ledgers after the flag is set. As the test was, it was very very timing sensitive. It should be less so now.","10/Jan/13 16:12;hadoopqa;Testing JIRA BOOKKEEPER-538


Patch [0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch|https://issues.apache.org/jira/secure/attachment/12564189/0001-BOOKKEEPER-538-Race-condition-in-BookKeeper-close.patch] downloaded at Thu Jan 10 15:41:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 786
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/236/","10/Jan/13 16:44;umamaheswararao;Make sense. +1, go ahead and push this in.","10/Jan/13 18:14;fpj;+1, Thanks Ivan for the patch and Uma for reviewing. Committed revision 1431536.","10/Jan/13 18:43;hudson;Integrated in bookkeeper-trunk2 #52 (See [https://builds.apache.org/job/bookkeeper-trunk2/52/])
    BOOKKEEPER-538: Race condition in BookKeeper#close (ivank via fpj) (Revision 1431536)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flakeyness in AuditorBookieTest,BOOKKEEPER-534,12626176,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,umamaheswararao,ikelly,ikelly,05/Jan/13 13:01,13/Feb/13 15:46,14/Mar/19 02:39,07/Jan/13 21:54,,,4.2.0,,,,,,0,,See https://builds.apache.org/job/bookkeeper-trunk2/35/,,,,,,,,,,,,,,,,,,,07/Jan/13 09:22;umamaheswararao;BOOKKEEPER-534-Reproduce-with-delays.patch;https://issues.apache.org/jira/secure/attachment/12563532/BOOKKEEPER-534-Reproduce-with-delays.patch,07/Jan/13 09:24;umamaheswararao;BOOKKEEPER-534.patch;https://issues.apache.org/jira/secure/attachment/12563533/BOOKKEEPER-534.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-06 16:40:59.934,,,no_permission,,,,,,,,,,,,,302762,,,Mon Jan 07 23:10:12 UTC 2013,,,,,,0|i1759j:,249821,,,,,,,,"06/Jan/13 16:40;umamaheswararao;I think problem may be looks like, after restarting the Bookies and if it take time to create the vote then waitloop may complete quickly.

{code} while (retryCount > 0) {
            List<BookieServer> auditors = getAuditorBookie();
            if (auditors.size() > 0) {
                newAuditor = auditors.get(0);
                if (auditor == newAuditor) {
                    Thread.sleep(500);
                } else {
                    break;
                }
            }
            retryCount--;
        }
{code}
Auditors size would be 0 if vote is not created yet. then this loop will complete quickly as there won't be any delay between runs. Are you seeing any other reason here?","07/Jan/13 09:22;umamaheswararao;I have added small delay in vote creation, so that wait loop will end quickly. In the logs second election also happend but by that time loop also ends and failed. Needs to run multiple times to reproduce.
","07/Jan/13 09:24;umamaheswararao;Attaching a patch here. With this patch above issue should be solved.
Ivan, please check if you got any another clue on this?","07/Jan/13 10:45;ikelly;The first patch looks nicer I think. Did it not work?

Why have you added the delay to vote creation in the AuditorElector?","07/Jan/13 11:07;umamaheswararao;Hi Ivan, my first patch is just to reproduce the issue. Second patch is for fix. (BOOKKEEPER-534.patch)

{quote}
Why have you added the delay to vote creation in the AuditorElector?
{quote}
I have added that dealy just to reproduce, not as fix. Per my understanding of this issue, if there is small delay in vote creation, by that loop can exit as auditors.size would be 0. By running that patch multiple time (may be 5-6 time )issue will get reproduced. Second one is the patch to have proper dealy for all runs(even though auditors.size if 0). After this change that is passed by applying on top of that.","07/Jan/13 11:51;ikelly;Ah, I read the times on the patches wrong. The 10:24 patch looks good to me.",07/Jan/13 21:54;ikelly;Committed r1430041. Thanks Uma.,"07/Jan/13 23:10;hudson;Integrated in bookkeeper-trunk2 #40 (See [https://builds.apache.org/job/bookkeeper-trunk2/40/])
    BOOKKEEPER-534: Flakeyness in AuditorBookieTest (umamahesh via ivank) (Revision 1430041)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestSubAfterCloseSub fails strangely in tests,BOOKKEEPER-533,12626175,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,05/Jan/13 12:52,13/Feb/13 15:46,14/Mar/19 02:39,09/Jan/13 16:18,,,4.2.0,,,,,,0,,"Example https://builds.apache.org/job/bookkeeper-trunk-precommit-build/204/

It looks like the maven surefire process exits, as if System.exit() is being called. This should be the case since BOOKKEEPER-522, which removes all calls to System.exit()",,,,,,,,,,BOOKKEEPER-513,,,,,,,,,09/Jan/13 15:42;ikelly;0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch;https://issues.apache.org/jira/secure/attachment/12563945/0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch,09/Jan/13 10:31;ikelly;0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch;https://issues.apache.org/jira/secure/attachment/12563924/0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch,08/Jan/13 18:13;ikelly;0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch;https://issues.apache.org/jira/secure/attachment/12563787/0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch,05/Jan/13 16:29;ikelly;BOOKKEEPER-513.diff;https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff,05/Jan/13 15:45;ikelly;BOOKKEEPER-513.diff;https://issues.apache.org/jira/secure/attachment/12563427/BOOKKEEPER-513.diff,07/Jan/13 13:43;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563566/BOOKKEEPER-533.diff,07/Jan/13 13:26;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563562/BOOKKEEPER-533.diff,07/Jan/13 11:50;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563556/BOOKKEEPER-533.diff,07/Jan/13 11:06;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563552/BOOKKEEPER-533.diff,07/Jan/13 11:02;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563551/BOOKKEEPER-533.diff,07/Jan/13 10:52;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563550/BOOKKEEPER-533.diff,05/Jan/13 13:10;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563418/BOOKKEEPER-533.diff,05/Jan/13 13:07;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563417/BOOKKEEPER-533.diff,05/Jan/13 13:06;ikelly;BOOKKEEPER-533.diff;https://issues.apache.org/jira/secure/attachment/12563416/BOOKKEEPER-533.diff,07/Jan/13 15:54;ikelly;hedwig-server.log;https://issues.apache.org/jira/secure/attachment/12563584/hedwig-server.log,07/Jan/13 15:54;ikelly;stack.txt;https://issues.apache.org/jira/secure/attachment/12563583/stack.txt,16.0,,,,,,,,,,,,,,,,,,,2013-01-05 13:11:47.249,,,no_permission,,,,,,,,,,,,,302761,,,Wed Jan 09 16:58:25 UTC 2013,,,,,,0|i1759b:,249820,,,,,,,,05/Jan/13 13:06;ikelly;Marking patch avail so jenkins picks it up,"05/Jan/13 13:11;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563418/BOOKKEEPER-533.diff] downloaded at Sat Jan  5 13:11:42 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce - new RAT warning(s)
.    {color:red}WARNING: the current HEAD has  RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 0
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/19/","05/Jan/13 13:17;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563418/BOOKKEEPER-533.diff] downloaded at Sat Jan  5 13:11:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/206/","05/Jan/13 13:17;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563418/BOOKKEEPER-533.diff] downloaded at Sat Jan  5 13:14:14 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/20/","05/Jan/13 15:43;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563418/BOOKKEEPER-533.diff] downloaded at Sat Jan  5 15:40:33 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/21/","05/Jan/13 16:27;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563427/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 15:51:13 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/208/","05/Jan/13 16:35;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 16:32:32 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/25/","05/Jan/13 16:38;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 16:32:02 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/209/","05/Jan/13 16:39;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 16:37:20 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/26/","05/Jan/13 16:42;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 16:40:02 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/27/","05/Jan/13 16:45;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 16:42:42 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/28/","05/Jan/13 18:54;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 18:52:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/29/","05/Jan/13 18:57;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563433/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 18:55:03 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/30/","07/Jan/13 11:05;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563551/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:03:06 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/32/","07/Jan/13 11:10;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563552/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:07:40 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/33/","07/Jan/13 11:11;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563551/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:05:32 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/211/","07/Jan/13 11:13;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563552/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:10:27 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/34/","07/Jan/13 11:16;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563552/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:14:01 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/35/","07/Jan/13 11:19;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563552/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:16:46 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/36/","07/Jan/13 11:22;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563552/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:19:43 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/37/","07/Jan/13 11:36;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563552/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 11:34:09 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/38/","07/Jan/13 12:34;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563556/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 12:31:33 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/39/","07/Jan/13 13:26;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563556/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 13:20:40 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/213/","07/Jan/13 13:43;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563562/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 13:40:33 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 2
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/40/","07/Jan/13 14:00;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563566/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 13:57:30 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/41/","07/Jan/13 14:29;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563566/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 14:26:31 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/42/","07/Jan/13 15:54;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [BOOKKEEPER-533.diff|https://issues.apache.org/jira/secure/attachment/12563566/BOOKKEEPER-533.diff] downloaded at Mon Jan  7 15:48:41 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/214/","07/Jan/13 15:54;ikelly;Attached a log and stack dump of the failure. It seems to be blocking on a call to asyncCloseSubscription while waiting to acquire a monitor. This shouldn't be, as asyncCloseSubscription doesn't have any synchronization. This is very strange.","07/Jan/13 18:03;ikelly;http://docs.oracle.com/javase/1.4.2/docs/guide/misc/threadPrimitiveDeprecation.html

I'm pretty sure this is whats going on. If you look at the stack.txt you'll see that the DeliveryManagerThread is being blocked in the classloader. I think this is stopping ""new Callback<Void>"" from running, as the class hasn't been loaded. It's a system resource. We should not be blocking it. I'm not sure how to fix this nicely. It may mean putting something into the server to allow us to manually suspend the delivery manager. 

[~hustlmsp] Could you explain the rationale for suspending the delivery manager thread, as I'm not 100% clear on it.

","07/Jan/13 18:52;hustlmsp;suspending delivery manager is to simulate the case that closesub finished later than subscriber, which is the problem before fixing BOOKKEEPER-507.

another question, if Thread.suspend is not suggested to be used, could this issue you described happened on other test cases using Thread.suspend? e.g. BookKeeperClusterTestCase#sleepBookie.","07/Jan/13 19:14;ikelly;{quote}Thread.suspend is not suggested to be used, could this issue you described happened on other test cases using Thread.suspend?{quote}
Yes, this is vulnerable too. I'll make a fix for this tomorrow, and will fix sleepBookie at the same time. ","08/Jan/13 17:40;ikelly;Patch removes all the calls to Thread#suspend that we can remove. There's two calls to it that calls into ZooKeeper. We can't change those.

Also cleaned up some places where ""// VisibleForTesting"" was used instead of the actual annotation.","08/Jan/13 18:11;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch|https://issues.apache.org/jira/secure/attachment/12563783/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch] downloaded at Tue Jan  8 17:41:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 781
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/218/",08/Jan/13 18:13;ikelly;Attached wrong patch last time.,"08/Jan/13 18:51;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch|https://issues.apache.org/jira/secure/attachment/12563787/0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch] downloaded at Tue Jan  8 18:21:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 779
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/219/","08/Jan/13 23:43;fpj;It looks good, one quick clarification: have you intentionally removed IndexCorruptionTest?","09/Jan/13 10:32;ikelly;Ah, I moved it so that it could access the syncThread. Forgot to add it again though. New patch has it.","09/Jan/13 11:01;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch|https://issues.apache.org/jira/secure/attachment/12563924/0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch] downloaded at Wed Jan  9 10:31:25 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 779
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/223/","09/Jan/13 15:39;fpj;The patch still looks wrong to me, IndexCorruptionTest is still being deleted and not added elsewhere. One indication that nothing changed is that the patch size is the same.",09/Jan/13 15:42;ikelly;This one has it.,"09/Jan/13 16:18;fpj;+1, Thanks, Ivan. Committed revision 1430933.","09/Jan/13 16:22;hadoopqa;Testing JIRA BOOKKEEPER-533


Patch [0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch|https://issues.apache.org/jira/secure/attachment/12563945/0001-BOOKKEEPER-533-TestSubAfterCloseSub-fails-strangely-.patch] downloaded at Wed Jan  9 15:51:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 4 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 5 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 782
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/228/","09/Jan/13 16:58;hudson;Integrated in bookkeeper-trunk2 #46 (See [https://builds.apache.org/job/bookkeeper-trunk2/46/])
    BOOKKEEPER-533: TestSubAfterCloseSub fails strangely in tests (ivank via fpj) (Revision 1430933)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java
",,,,,,,,,,,,,,,,,,,,,
AbstractSubscriptionManager#AcquireOp read subscriptions every time even it already owned the topic,BOOKKEEPER-532,12626163,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,05/Jan/13 08:12,13/Feb/13 15:46,14/Mar/19 02:39,07/Jan/13 23:45,,,4.2.0,,,hedwig-server,,,0,,"{code}
    private class AcquireOp extends TopicOpQueuer.AsynchronousOp<Void> {
        public AcquireOp(ByteString topic, Callback<Void> callback, Object ctx) {
            queuer.super(topic, callback, ctx);
        }   

        @Override
        public void run() {
            if (top2sub2seq.containsKey(topic)) {
                cb.operationFinished(ctx, null);
            }   

            readSubscriptions(topic, new Callback<Map<ByteString, InMemorySubscriptionState>>() {
{code}

it doesn't return after it found subscriptions and callback.",,,,,,,,,,,,,,,,,,,05/Jan/13 08:43;hustlmsp;BOOKKEEPER-532.diff;https://issues.apache.org/jira/secure/attachment/12563408/BOOKKEEPER-532.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-05 09:49:43.665,,,no_permission,,,,,,,,,,,,,302746,,,Tue Jan 08 00:15:03 UTC 2013,,,,,,0|i1753z:,249796,,,,,,,,05/Jan/13 08:43;hustlmsp;attach a simple fix.,"05/Jan/13 09:49;hadoopqa;Testing JIRA BOOKKEEPER-532


Patch [BOOKKEEPER-532.diff|https://issues.apache.org/jira/secure/attachment/12563408/BOOKKEEPER-532.diff] downloaded at Sat Jan  5 08:49:41 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/204/","05/Jan/13 10:08;fpj;I'm seeing a lot of failures like this in the precommit build. According to the output of the build, we have:

{noformat}
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.9:test (default-test) on project hedwig-server: Failure or timeout -> [Help 1]
{noformat}

and the test that reports nothing for failures and errors is TestSubAfterCloseSub. It would be great if we could fix it.",05/Jan/13 12:54;ikelly;BOOKKEEPER-513 is hitting this same failure. Its unrelated to this change. I've created BOOKKEEPER-533 to deal with the failure.,"07/Jan/13 12:31;fpj;+1, lgtm. Anyone else wants to have a look at this patch? It is pretty straightforward. Otherwise, I'll go ahead and commit it.",07/Jan/13 12:31;fpj;I forgot to mention that I have run the tests locally and they pass just fine for me.,07/Jan/13 22:01;ikelly;lgtm +1,"07/Jan/13 23:45;fpj;Thanks for the patch, Sijie. Committed revision 1430091.","08/Jan/13 00:15;hudson;Integrated in bookkeeper-trunk2 #41 (See [https://builds.apache.org/job/bookkeeper-trunk2/41/])
    BOOKKEEPER-532: AbstractSubscriptionManager#AcquireOp read subscriptions every time even it already owned the topic. (sijie via fpj) (Revision 1430091)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cache thread should wait until old entries are collected,BOOKKEEPER-531,12626162,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,05/Jan/13 08:04,13/Feb/13 15:46,14/Mar/19 02:39,09/Jan/13 11:30,,,4.2.0,,,hedwig-server,,,0,,"Ivan commented this issue in BOOKKEEPER-461, but seems that the last patch I attached doesn't address this comment.

https://issues.apache.org/jira/browse/BOOKKEEPER-461?focusedCommentId=13503945&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13503945

so when publish speed is larger than deliver/consume speed, it might overwhelm readAhead cache and putting lots of collectOldEntries operations in request queue, finally it OOM.
",,,,,,,,,,,,,,,BOOKKEEPER-461,,,,09/Jan/13 05:15;hustlmsp;BOOKKEEPER-531.patch;https://issues.apache.org/jira/secure/attachment/12563883/BOOKKEEPER-531.patch,06/Jan/13 05:39;hustlmsp;BOOKKEEPER-531.patch;https://issues.apache.org/jira/secure/attachment/12563459/BOOKKEEPER-531.patch,05/Jan/13 08:09;hustlmsp;BOOKKEEPER-531.patch;https://issues.apache.org/jira/secure/attachment/12563407/BOOKKEEPER-531.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2013-01-05 10:20:30.158,,,no_permission,,,,,,,,,,,,,302745,,,Wed Jan 09 12:11:47 UTC 2013,,,,,,0|i1753r:,249795,,,,,,,,"05/Jan/13 08:09;hustlmsp;attach a straightforward patch addressing this.

1) deprecated the cache thread to avoid asynchronous cache eviction.
2) partition the cache into segments, each segment maintain its size and time index, which is easy and simplify synchronization.","05/Jan/13 10:20;hadoopqa;Testing JIRA BOOKKEEPER-531


Patch [BOOKKEEPER-531.patch|https://issues.apache.org/jira/secure/attachment/12563407/BOOKKEEPER-531.patch] downloaded at Sat Jan  5 09:49:55 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 776
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/205/","05/Jan/13 23:26;fpj;Two comments on the patch, Sijie:

- presentCacheSize is read only in an assert statement, so I don't think it is really needed. We can eliminate it and add up the segment sizes instead, no?
- The comment right above the declaration of presentSegmentSize refers to cache and not segment. It seems to be identical to the comment right after the declaration of the Segment class.","06/Jan/13 02:15;hustlmsp;{quote}
presentCacheSize is read only in an assert statement, so I don't think it is really needed.
{quote}

presentCacheSize is used to expose JMX metrics. 

{quote}
The comment right above the declaration of presentSegmentSize refers to cache and not segment.
{quote}

will address the comments.","06/Jan/13 05:39;hustlmsp;attach a patch addressing Flavio's comments.

besides that, add TTL for cache entries. so the published messages could be evicted from the cache according to the TTL is not be consumed for a long period. it might be better for GC friendly.","06/Jan/13 05:50;hustlmsp;I need to clarify one point: seems the cache implementation so for in Hedwig is quite generic as a cache problem. Ivan also raised a comment in BOOKKEEPER-461 to suggest using guava cache. I don't want to do it here is for 2 reasons:

1) changing to guava cache might introduce lots of code changes now. I will keep the change simple and straightforward for a release now, until we ensure guava cache could give better performance or better code maintenance.

2) I am doubting it is not easy to let readahead cache use guava cache. since we had a seq id index in read ahead cache, it would very very useful to remove entries from read ahead after consume. we had to build similar index even using guava cache. I am not sure it worths to do it.

so for this jira, I would keep things simple and straightforward.","06/Jan/13 06:32;hadoopqa;Testing JIRA BOOKKEEPER-531


Patch [BOOKKEEPER-531.patch|https://issues.apache.org/jira/secure/attachment/12563459/BOOKKEEPER-531.patch] downloaded at Sun Jan  6 06:01:45 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 777
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/210/","06/Jan/13 10:33;fpj;+1, lgtm. Since Ivan was also involved in the discussion about this issue previously, it would be nice if he could give it a look. ","07/Jan/13 10:54;jiannan;+1, lgtm.","08/Jan/13 17:23;ikelly;The change looks good. Work is submitted to the OrderedSafeExecutor based on the topic rather than based on the CacheSegment. This could mean two threads accessing the CacheSegment at a time (in reality probably not as OrderedSafeExecutor uses the same hashing I think). It would be better to ensure explicitly that each CacheSegment is only used by one executor.

""cfg.getMaximumCacheSize() / numCacheWorkers"" exists in a number of places, even though you calculate it straight away on construction.","09/Jan/13 05:15;hustlmsp;Attach a new patch to address the comments.

1) change cache segments from array into thread local variable. so each thread would have dedicated cache segment, without worrying to keep consistent hash with order safe executor.

2) compute maxSegmentSize in construction or configuration reloaded.","09/Jan/13 05:52;hadoopqa;Testing JIRA BOOKKEEPER-531


Patch [BOOKKEEPER-531.patch|https://issues.apache.org/jira/secure/attachment/12563883/BOOKKEEPER-531.patch] downloaded at Wed Jan  9 05:21:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 782
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/221/",09/Jan/13 11:01;ikelly;New patch lgtm +1. Committing.,09/Jan/13 11:30;ikelly;Committed as r1430795. Thanks Sijie.,"09/Jan/13 12:11;hudson;Integrated in bookkeeper-trunk2 #43 (See [https://builds.apache.org/job/bookkeeper-trunk2/43/])
    BOOKKEEPER-531: Cache thread should wait until old entries are collected (sijie via ivank) (Revision 1430795)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/doc/hedwigParams.textile
* /zookeeper/bookkeeper/trunk/hedwig-server/conf/hw_server.conf
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheBean.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
data might be lost during compaction.,BOOKKEEPER-530,12625473,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,29/Dec/12 07:38,13/Feb/13 15:46,14/Mar/19 02:39,10/Jan/13 14:34,4.1.0,,4.2.0,,,bookkeeper-server,,,0,,"{code}
        try {
            entryLogger.scanEntryLog(entryLogId, new CompactionScanner(entryLogMeta));
            // after moving entries to new entry log, remove this old one
            removeEntryLog(entryLogId);
        } catch (IOException e) {
            LOG.info(""Premature exception when compacting "" + entryLogId, e); 
        } finally {
            // clear compacting flag
            compacting.set(false);
        }
{code}

currently compaction code has a bit problem: as the code described above, old entry log is removed after new entries are added to new entry log, but new entry log might not be flushed. if failures happened after removal but before flush, data would be lost.

when I implemented compaction feature in BOOKKEEPER-160, I remembered that I took care of letting entry go back to normal addEntry flow to reflect journal and index. But seems that the addEntry doesn't go thru journal, just move entries between entry log files w/o any flush guarantee.

there are two ideas for this solution:

simple one is to let compaction going to normal addEntry flow (adding entry to ledger storage and putting it in journal). the other one is GC thread either wait for ledger storage to flush in sync thread in one flush interval or force a ledger storage flush before removing entry log files.

BTW, it was hard to design a test case by simulating bookie abnormally shut down itself after entry log files are removed.",,,,,,,,,,,,,,,,,,,09/Jan/13 14:49;ikelly;0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch;https://issues.apache.org/jira/secure/attachment/12563939/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch,08/Jan/13 16:15;ikelly;0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch;https://issues.apache.org/jira/secure/attachment/12563771/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch,08/Jan/13 15:37;ikelly;0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch;https://issues.apache.org/jira/secure/attachment/12563765/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch,04/Jan/13 18:17;ikelly;0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch;https://issues.apache.org/jira/secure/attachment/12563332/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-12-29 07:50:00.93,,,no_permission,,,,,,,,,,,,,302015,,,Thu Jan 10 14:58:25 UTC 2013,,,,,,0|i16y1r:,248650,,,,,,,,"29/Dec/12 07:50;fpj;bq. But seems that the addEntry doesn't go thru journal, just move entries between entry log files w/o any flush guarantee.

Sijie, I don't understand what you're trying to say here, we do write and flush addEntry requests to the journal. ","29/Dec/12 08:45;hustlmsp;{code}
    /** 
     * Scanner used to do entry log compaction
     */
    class EntryLogCompactionScanner implements EntryLogger.EntryLogScanner {
        @Override
        public boolean accept(long ledgerId) {
            // bookie has no knowledge about which ledger is deleted
            // so just accept all ledgers.
            return true;
        }   

        @Override
        public void process(long ledgerId, long offset, ByteBuffer buffer)
            throws IOException {
            addEntry(buffer);
        }   
    }
{code}

[~fpj], in compaction scanner, we just call LedgerStorage#addEntry to move entry from old entry log file to new entry log file. we don't add this entry again to journal during moving entries. this is what I mean.","02/Jan/13 21:32;ikelly;I think it has to go through the journal, due to the issues we discussed on BOOKKEEPER-447. To recap, due to the design of LedgerCacheImpl, an index files may be flushed before the corresponding entrylog has been flushed. There is a possibility, that an index file is flushed but the entry logger is not and a crash occurs. The entry is now inaccessible, as the index file points to a bad location.

We can't use the stock Bookie#addEntry though, as this adds to the index before the journal, so the same issue could occur. We need an internal syncAddEntry which does the following sequence.
# add to Journal
# add to entryLogger
# add to ledgerIndex
","02/Jan/13 22:23;fpj;I'm a bit confused here, why do we need to write to the journal during compaction? Can't we write a shadow (compacted) entry log and swap with the original entry log once compaction completes? ","03/Jan/13 01:33;hustlmsp;> I'm a bit confused here, why do we need to write to the journal during compaction?

I think the problem here is that we had separated index files with entry log files. during compaction, we had to modify index entries when moving entry data. if we used SSTable like structure to combine entry data and indices together like what HBase or leveldb did, we can do as you suggested. ","04/Jan/13 00:46;fpj;Got it, it is using the journal for atomicity. ",04/Jan/13 18:17;ikelly;Attached patch which first writes to the journal and then to the ledger storage when compacting a log.,"05/Jan/13 09:01;hustlmsp;looks good. some comments about log statements.

{code}
+    private class BookieSafeEntryAdder implements SafeEntryAdder {
+        @Override
+        public void safeAddEntry(final long ledgerId, final ByteBuffer buffer,
+                                 final GenericCallback<Void> cb) {
+            journal.logAddEntry(buffer, new WriteCallback() {
+                    @Override
+                    public void writeComplete(int rc, long ledgerId2, long entryId,
+                                              InetSocketAddress addr, Object ctx) {
+                        try {
+                            addEntryByLedgerId(ledgerId, buffer);
+                            cb.operationComplete(rc, null);
+                        } catch (IOException ioe) {
+                            LOG.error(""Error adding to ledger storage"", ioe);
+                            // couldn't add to ledger storage
+                            cb.operationComplete(BookieException.Code.IllegalOpException, null);
+                        } catch (BookieException bke) {
+                            LOG.error(""Bookie error adding to ledger storage"", bke);
+                            // couldn't add to ledger storage
+                            cb.operationComplete(bke.getCode(), null);
+                        }
+                    }
+                }, null);
+        }
+    }
{code}

first, it would be better to check the return code 'rc' in #logAddEntry. Although currently it was just return 0, if future someone changed it, he might miss this place.

second, it would be better to log more info in the log statements to indicate which ledger, which entry encountered errors.

BTW, not related to this jira.
currently we have two different addEntry flow in the code now, one is addEntry to ledger storage first and add to journal later. the other one is adding entry to journal first and addEntry to ledger storage later. In 4.3.0, we might need to consider consolidating these two flows, as my first proposed patch for bookkeeper-447. :-) ",05/Jan/13 09:02;hustlmsp;cancel patch until comments addressed.,"07/Jan/13 19:54;rakeshr;Hi Ivan, patch looks nice. Adding entries to the journal is pretty good.

Just adding few more comments...

1) fix typo in log statements:
""Coundn't readd all entries"" -> ""Couldn't re-add all entries""


2) int IOException = -104;  is no where used, can we remove this?


3)I'm bit confused about the usage of asynchronously sending all the entries to the journal#queue and awaitCompete() in the scanner. 
Assume there is a failure in between adding the entries, since we are adding all the entries to the journal#queue the awaitComplete() call would be unnecessarily waiting for all the entries to finish add operation. Anyway the compaction would finally throws IOException.

{code}
            synchronized(outstandingRequests) {
                while (outstandingRequests.get() > 0) {
                    outstandingRequests.wait();
                }
                if (allSuccessful.get() == false) {
                    throw new IOException(""Coundn't readd all entries"");
                }
            }                
{code}

IMHO, how about adding one by one entry to the journal, on writeComplete() add it to entrylogger?
Also, the scanner would see the return code and throws exception if it fails.
",08/Jan/13 15:37;ikelly;Patch addresses comments.,"08/Jan/13 15:51;ikelly;{quote}
3)I'm bit confused about the usage of asynchronously sending all the entries to the journal#queue and awaitCompete() in the scanner.
Assume there is a failure in between adding the entries, since we are adding all the entries to the journal#queue the awaitComplete() call would be unnecessarily waiting for all the entries to finish add operation. Anyway the compaction would finally throws IOException.
IMHO, how about adding one by one entry to the journal, on writeComplete() add it to entrylogger?{quote}
This is what we do. The code adds to the journal, and when the journal callback triggers it adds to the entrylogger and index. If the journal succeeds and the entrylogger or index fails, this is fine due to the order, as the entry remains in the same place until we write the index, which is the last thing.

[~hustlmsp]
{quote}
currently we have two different addEntry flow in the code now, one is addEntry to ledger storage first and add to journal later. the other one is adding entry to journal first and addEntry to ledger storage later. In 4.3.0, we might need to consider consolidating these two flows, as my first proposed patch for bookkeeper-447. 
{quote}
I agree.","08/Jan/13 16:10;hadoopqa;Testing JIRA BOOKKEEPER-530


Patch [0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch|https://issues.apache.org/jira/secure/attachment/12563765/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch] downloaded at Tue Jan  8 16:05:31 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 2 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/216/",08/Jan/13 16:15;ikelly;Forgot to add one change to last patch. ,"08/Jan/13 16:51;hadoopqa;Testing JIRA BOOKKEEPER-530


Patch [0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch|https://issues.apache.org/jira/secure/attachment/12563771/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch] downloaded at Tue Jan  8 16:21:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 781
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/217/","08/Jan/13 18:39;rakeshr;bq.This is what we do. The code adds to the journal, and when the journal callback triggers it adds to the entrylogger and index. If the journal succeeds and the entrylogger or index fails, this is fine due to the order, as the entry remains in the same place until we write the index, which is the last thing.

Oh! seems I hadn't explained clearly my idea. Could you please look at the below snippet of CompactionScanner#process() api. Here just tries to make await() logic simple and fail fast rather than waiting to finish all the entries in case of any failures.
{code}
        @Override
        public void process(final long ledgerId, long offset, ByteBuffer entry)
            throws IOException {
            final CountDownLatch addEntryNotificationLatch = new CountDownLatch(1);
            safeEntryAdder.safeAddEntry(ledgerId, entry, new GenericCallback<Void>() {
                    @Override
                    public void operationComplete(int rc, Void result) {
                        if (rc != BookieException.Code.OK) {
                            LOG.error(""Error {} re-adding entry for ledger {})"",
                                    rc, ledgerId);
                            allSuccessful.set(false);
                        }
                        addEntryNotificationLatch.countDown();
                    }
                });
            awaitComplete(addEntryNotificationLatch);
        }

        private void awaitComplete(CountDownLatch addEntryNotificationLatch) throws IOException {
            try {
                addEntryNotificationLatch.await();
                if (allSuccessful.get() == false) {
                    throw new IOException(""Couldn't re-add all entries"");
                }
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
                LOG.error(""Interrupted while compacting"", ie);
                throw new IOException(""Couldn't re-add all entries"", ie);
            }        
       }
{code}

-Rakesh","09/Jan/13 07:42;hustlmsp;yeah, good point, Rakesh.

Compaction should not overwhelm the journal thread which might affects normal adding operations. One by one might be better.",09/Jan/13 10:43;ikelly;with one by one it could take a very long time to compact a log. How about batching into 1000 entry chunks or something?,"09/Jan/13 12:23;rakeshr;Yeah, smaller chunks would be fine and would help in balancing.","09/Jan/13 14:49;ikelly;Latest patch limits the number of re-added entries to 1000 at a time, and stops processing if there is an error.","09/Jan/13 15:22;hadoopqa;Testing JIRA BOOKKEEPER-530


Patch [0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch|https://issues.apache.org/jira/secure/attachment/12563939/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch] downloaded at Wed Jan  9 14:51:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 782
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/227/",10/Jan/13 09:44;hustlmsp;+1 for the latest patch.,10/Jan/13 14:34;ikelly;Committed as r1431378. Thanks for reviewing guys.,"10/Jan/13 14:58;hudson;Integrated in bookkeeper-trunk2 #51 (See [https://builds.apache.org/job/bookkeeper-trunk2/51/])
    BOOKKEEPER-530: data might be lost during compaction. (ivank) (Revision 1431378)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie journal filesystem gets full after SyncThread is terminated with exception,BOOKKEEPER-524,12624930,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,mmerli,mmerli,mmerli,21/Dec/12 01:29,13/Feb/13 15:46,14/Mar/19 02:39,07/Jan/13 02:48,4.2.0,,4.2.0,,,bookkeeper-server,,,0,,"The SyncThread get a NPE while the rest of the bookie is still running. This causes the journal gc to be stopped and the filesystem get full.

Tue Dec 18 17:01:18 2012: Exception in thread ""SyncThread"" java.lang.NullPointerException
Tue Dec 18 17:01:18 2012:       at org.apache.bookkeeper.bookie.LedgerCacheImpl.getLedgerEntryPage(LedgerCacheImpl.java:153)
Tue Dec 18 17:01:18 2012:       at org.apache.bookkeeper.bookie.LedgerCacheImpl.flushLedger(LedgerCacheImpl.java:421)
Tue Dec 18 17:01:18 2012:       at org.apache.bookkeeper.bookie.LedgerCacheImpl.flushLedger(LedgerCacheImpl.java:363)
Tue Dec 18 17:01:18 2012:       at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.flush(InterleavedLedgerStorage.java:148)
Tue Dec 18 17:01:18 2012:       at org.apache.bookkeeper.bookie.Bookie$SyncThread.run(Bookie.java:221)",,,,,,,,,,,,,,,,,,,27/Dec/12 02:23;mmerli;0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch;https://issues.apache.org/jira/secure/attachment/12562430/0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch,21/Dec/12 02:36;mmerli;0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch;https://issues.apache.org/jira/secure/attachment/12562028/0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch,03/Jan/13 19:22;fpj;BOOKKEEPER-524.patch;https://issues.apache.org/jira/secure/attachment/12563134/BOOKKEEPER-524.patch,03/Jan/13 17:41;fpj;BOOKKEEPER-524.patch;https://issues.apache.org/jira/secure/attachment/12563108/BOOKKEEPER-524.patch,03/Jan/13 16:52;fpj;BOOKKEEPER-524.patch;https://issues.apache.org/jira/secure/attachment/12563093/BOOKKEEPER-524.patch,03/Jan/13 15:37;fpj;BOOKKEEPER-524.patch;https://issues.apache.org/jira/secure/attachment/12563080/BOOKKEEPER-524.patch,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-12-21 03:43:50.467,,,no_permission,,,,,,,,,,,,,301446,,,Mon Jan 07 03:55:55 UTC 2013,,,,,,0|i16snr:,247775,,,,,,,,21/Dec/12 02:36;mmerli;I'm not particularly familiar with the LedgerCache code but I think returning null should be correct when the page is not found.,"21/Dec/12 03:43;hustlmsp;Thanks Matteo. I think the NPE might be caused by a race condition between flushLedger and removeLedger.

when flushLedger, it first get the list of first entry, then flush ledger pages according to the first entry list. if removeLedger happened between them, removeLedger would remove ledger pages for that ledger from mapping, it cause NPE during flush.

I need to check the flush code to ensure there is no other NPE happened. besides that, it would be better to catch the throwable in SyncThread, when SyncThread quits, either turn it into readonly or shutdown. otherwise, it silence the exception until something bad happened (e.g journal disk is full. at this case, a bookie might take a long time to restart replaying its journal).

","21/Dec/12 04:37;hadoopqa;Testing JIRA BOOKKEEPER-524


Patch [0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch|https://issues.apache.org/jira/secure/attachment/12562028/0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch] downloaded at Fri Dec 21 04:34:59 UTC 2012

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",27/Dec/12 02:23;mmerli;Added try/catch for the SyncThread. I've been trying BK with this patch in the same stress tests and the problem didn't reproduce anymore.,"27/Dec/12 03:00;hadoopqa;Testing JIRA BOOKKEEPER-524


Patch [0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch|https://issues.apache.org/jira/secure/attachment/12562430/0001-BOOKKEEPER-524-Bookie-journal-filesystem-gets-full-a.patch] downloaded at Thu Dec 27 02:32:06 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 765
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/170/","27/Dec/12 22:32;fpj;I'm wondering if shutting down the bookie is really the best course of action in the case of an unexpected exception. What happens if we restart the sync thread? What if we just continue to the next iteration of the while loop? 

Also, it would be good to have a test case. Is it doable to produce a test case out of the scenario that sijie mentioned?","03/Jan/13 15:37;fpj;I thought a bit more about this and I agree with shutting down the bookie in the case the sync thread catches a runtime exception. 

I'm attaching a simple test case that checks if getLedgerEntryPage throws an NPE in the case getFromTable returns a null lep.","03/Jan/13 16:40;hadoopqa;Testing JIRA BOOKKEEPER-524


Patch [BOOKKEEPER-524.patch|https://issues.apache.org/jira/secure/attachment/12563080/BOOKKEEPER-524.patch] downloaded at Thu Jan  3 15:41:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 3 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/193/",03/Jan/13 16:52;fpj;Fixed trailing spaces.,"03/Jan/13 17:30;hadoopqa;Testing JIRA BOOKKEEPER-524


Patch [BOOKKEEPER-524.patch|https://issues.apache.org/jira/secure/attachment/12563093/BOOKKEEPER-524.patch] downloaded at Thu Jan  3 17:01:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:red}-1{color} the patch contains 7 line(s) with tabs
.    {color:red}-1{color} the patch contains 3 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 774
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/194/",03/Jan/13 17:41;fpj;Another attempt.,"03/Jan/13 19:11;hadoopqa;Testing JIRA BOOKKEEPER-524


Patch [BOOKKEEPER-524.patch|https://issues.apache.org/jira/secure/attachment/12563108/BOOKKEEPER-524.patch] downloaded at Thu Jan  3 18:42:30 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 2 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 774
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/195/","03/Jan/13 21:36;hadoopqa;Testing JIRA BOOKKEEPER-524


Patch [BOOKKEEPER-524.patch|https://issues.apache.org/jira/secure/attachment/12563134/BOOKKEEPER-524.patch] downloaded at Thu Jan  3 20:15:39 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/196/","03/Jan/13 21:43;fpj;The failure seems to be unrelated to this patch. The only problem I could find in the log output is this on hedwig-server:

{noformat}
# There is insufficient memory for the Java Runtime Environment to continue.
# Cannot create GC thread. Out of system resources.
# An error report file with more information is saved as:
# /home/jenkins/jenkins-slave/workspace/bookkeeper-trunk-precommit-build/hedwig-server/hs_err_pid17129.log
#
{noformat}","04/Jan/13 05:32;hustlmsp;lgtm +1 for the patch, thanks Flavio and Matteo.",06/Jan/13 16:54;fpj;Shall we commit this one or what?,07/Jan/13 02:48;hustlmsp;committed as r1429650. thanks Matteo and Flavio.,"07/Jan/13 03:55;hudson;Integrated in bookkeeper-trunk2 #37 (See [https://builds.apache.org/job/bookkeeper-trunk2/37/])
    BOOKKEEPER-524: Bookie journal filesystem gets full after SyncThread is terminated with exception (Matteo, fpj via sijie) (Revision 1429650)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestHedwigHub is failing silently on Jenkins,BOOKKEEPER-522,12624849,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,20/Dec/12 16:43,13/Feb/13 15:47,14/Mar/19 02:39,24/Dec/12 05:06,,,4.2.0,,,,,,0,,"See
https://builds.apache.org/job/bookkeeper-trunk2/2/console

This is probably because something is calling System.exit(). ",,,,,,,,,,,,,,,,,,,20/Dec/12 18:25;ikelly;0001-BOOKKEEPER-522-TestHedwigHub-is-failing-silently-on-.patch;https://issues.apache.org/jira/secure/attachment/12561954/0001-BOOKKEEPER-522-TestHedwigHub-is-failing-silently-on-.patch,20/Dec/12 16:56;ikelly;BOOKKEEPER-522.diff;https://issues.apache.org/jira/secure/attachment/12561932/BOOKKEEPER-522.diff,20/Dec/12 16:45;ikelly;BOOKKEEPER-522.diff;https://issues.apache.org/jira/secure/attachment/12561930/BOOKKEEPER-522.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-12-20 16:47:59.883,,,no_permission,,,,,,,,,,,,,301357,,,Mon Dec 24 09:40:22 UTC 2012,,,,,,0|i16rw7:,247651,,,,,,,,"20/Dec/12 16:47;hadoopqa;Testing JIRA BOOKKEEPER-522


Patch [BOOKKEEPER-522.diff|https://issues.apache.org/jira/secure/attachment/12561930/BOOKKEEPER-522.diff] downloaded at Thu Dec 20 16:47:09 UTC 2012

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","20/Dec/12 16:53;hadoopqa;Testing JIRA BOOKKEEPER-522


Patch [BOOKKEEPER-522.diff|https://issues.apache.org/jira/secure/attachment/12561930/BOOKKEEPER-522.diff] downloaded at Thu Dec 20 16:52:28 UTC 2012

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","20/Dec/12 16:59;hadoopqa;Testing JIRA BOOKKEEPER-522


Patch [BOOKKEEPER-522.diff|https://issues.apache.org/jira/secure/attachment/12561932/BOOKKEEPER-522.diff] downloaded at Thu Dec 20 16:56:14 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 0
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/17/","20/Dec/12 17:05;hadoopqa;Testing JIRA BOOKKEEPER-522


Patch [BOOKKEEPER-522.diff|https://issues.apache.org/jira/secure/attachment/12561932/BOOKKEEPER-522.diff] downloaded at Thu Dec 20 16:58:08 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 0
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/163/","20/Dec/12 18:25;ikelly;Replaced the TerminateJVMExceptionHandler with one that only logs now. 

The uncaught exception was coming from running out of direct buffers. There's no way to free direct buffers, and everytime you initialize a server you allocate some, which was happening in every test setup. With parameterization there are 150 tests in TestHedwigHub. I split it into 3 tests now, so there's only 50 tests per run per instance. Also changed to forking per test.

Moved surefire duplicate options to the toplevel pom.xml.","20/Dec/12 18:56;hadoopqa;Testing JIRA BOOKKEEPER-522


Patch [0001-BOOKKEEPER-522-TestHedwigHub-is-failing-silently-on-.patch|https://issues.apache.org/jira/secure/attachment/12561954/0001-BOOKKEEPER-522-TestHedwigHub-is-failing-silently-on-.patch] downloaded at Thu Dec 20 18:28:02 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 10 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 764
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/164/",24/Dec/12 05:06;hustlmsp;lgtm +1. will commit it.,24/Dec/12 05:06;hustlmsp;committed as r1425586. thanks Ivan.,"24/Dec/12 09:40;hudson;Integrated in bookkeeper-trunk2 #9 (See [https://builds.apache.org/job/bookkeeper-trunk2/9/])
    BOOKKEEPER-522: TestHedwigHub is failing silently on Jenkins (ivank via sijie) (Revision 1425586)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/LoggingExceptionHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHubProxy.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHubRegular.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHubSSL.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieFailureTest hangs on precommit build,BOOKKEEPER-520,12624496,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,ikelly,ikelly,18/Dec/12 17:05,13/Feb/13 15:46,14/Mar/19 02:39,27/Dec/12 22:17,,,4.2.0,,,,,,0,,https://builds.apache.org/job/bookkeeper-trunk-precommit-build/142/,,,,,,,,,,BOOKKEEPER-355,,,,,,,,,19/Dec/12 18:02;ikelly;0001-BOOKKEEPER-520-BookieFailureTest-hangs-on-precommit-.patch;https://issues.apache.org/jira/secure/attachment/12561745/0001-BOOKKEEPER-520-BookieFailureTest-hangs-on-precommit-.patch,19/Dec/12 15:42;ikelly;0001-Fix-the-callback.patch;https://issues.apache.org/jira/secure/attachment/12561712/0001-Fix-the-callback.patch,27/Dec/12 20:06;hustlmsp;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12562510/BOOKKEEPER-520.diff,27/Dec/12 08:20;hustlmsp;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12562450/BOOKKEEPER-520.diff,19/Dec/12 17:53;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561743/BOOKKEEPER-520.diff,19/Dec/12 17:48;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561741/BOOKKEEPER-520.diff,19/Dec/12 17:39;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561738/BOOKKEEPER-520.diff,19/Dec/12 17:16;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561735/BOOKKEEPER-520.diff,19/Dec/12 16:52;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561730/BOOKKEEPER-520.diff,19/Dec/12 16:25;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561725/BOOKKEEPER-520.diff,19/Dec/12 16:18;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561724/BOOKKEEPER-520.diff,19/Dec/12 16:11;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561721/BOOKKEEPER-520.diff,18/Dec/12 17:11;ikelly;BOOKKEEPER-520.diff;https://issues.apache.org/jira/secure/attachment/12561517/BOOKKEEPER-520.diff,18/Dec/12 17:26;ikelly;bookkeeper-server.log;https://issues.apache.org/jira/secure/attachment/12561524/bookkeeper-server.log,26/Dec/12 23:52;fpj;org.apache.bookkeeper.test.BookieFailureTest-output-halt.txt;https://issues.apache.org/jira/secure/attachment/12562423/org.apache.bookkeeper.test.BookieFailureTest-output-halt.txt,23/Dec/12 20:25;fpj;stack-trace.txt;https://issues.apache.org/jira/secure/attachment/12562287/stack-trace.txt,16.0,,,,,,,,,,,,,,,,,,,2012-12-19 15:49:32.228,,,no_permission,,,,,,,,,,,,,300317,,,Sat Dec 29 15:30:23 UTC 2012,,,,,,0|i1676f:,244295,,,,,,,,18/Dec/12 17:11;ikelly;Not patch available. I want Jenkins to pick up the patch.,18/Dec/12 17:26;ikelly;The hang is another of these cases where the assert is in a callback. No idea about root cause though,19/Dec/12 15:42;ikelly;Fix the callback and put it through again.,"19/Dec/12 15:49;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [0001-Fix-the-callback.patch|https://issues.apache.org/jira/secure/attachment/12561712/0001-Fix-the-callback.patch] downloaded at Wed Dec 19 15:43:21 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/147/","19/Dec/12 15:57;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [0001-Fix-the-callback.patch|https://issues.apache.org/jira/secure/attachment/12561712/0001-Fix-the-callback.patch] downloaded at Wed Dec 19 15:51:00 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/148/","19/Dec/12 16:05;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [0001-Fix-the-callback.patch|https://issues.apache.org/jira/secure/attachment/12561712/0001-Fix-the-callback.patch] downloaded at Wed Dec 19 16:02:59 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 TESTS{color}
.    Tests run: 48
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAsyncBK2[3](org.apache.bookkeeper.test.BookieFailureTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/1/","19/Dec/12 16:14;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561721/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 16:11:20 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 TESTS{color}
.    Tests run: 48
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAsyncBK1[1](org.apache.bookkeeper.test.BookieFailureTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/2/","19/Dec/12 16:21;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561724/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 16:19:17 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/3/","19/Dec/12 16:26;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561724/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 16:21:26 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/149/","19/Dec/12 16:28;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561725/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 16:26:15 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 TESTS{color}
.    Tests run: 48
.    Tests failed: 3
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAsyncBK4[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[3](org.apache.bookkeeper.test.BookieFailureTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/4/","19/Dec/12 17:02;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561730/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 16:59:27 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/5/","19/Dec/12 17:06;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561730/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:03:55 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 TESTS{color}
.    Tests run: 48
.    Tests failed: 3
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAsyncBK2[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[5](org.apache.bookkeeper.test.BookieFailureTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/6/","19/Dec/12 17:19;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561735/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:16:45 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/7/","19/Dec/12 17:22;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561735/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:19:46 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/8/","19/Dec/12 17:27;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561735/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:24:58 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/9/","19/Dec/12 17:31;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561735/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:28:29 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/10/","19/Dec/12 17:42;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561738/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:39:29 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 TESTS{color}
.    Tests run: 48
.    Tests failed: 5
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAsyncBK3[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[5](org.apache.bookkeeper.test.BookieFailureTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/11/","19/Dec/12 17:48;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561738/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:42:15 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 48
.    Tests failed: 6
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAsyncBK2[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[5](org.apache.bookkeeper.test.BookieFailureTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/153/","19/Dec/12 17:58;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561743/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 17:55:56 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/13/","19/Dec/12 18:02;ikelly;Turns out there was a race in handle bookie failure, which was causing the client to try to find a new bookie, but there would be none and it would fail. This should fix a number of -6 errors I've seen recently. Also fixes the callback for BookieFailureTest.","19/Dec/12 18:07;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12561743/BOOKKEEPER-520.diff] downloaded at Wed Dec 19 18:01:25 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 48
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/155/","19/Dec/12 18:32;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [0001-BOOKKEEPER-520-BookieFailureTest-hangs-on-precommit-.patch|https://issues.apache.org/jira/secure/attachment/12561745/0001-BOOKKEEPER-520-BookieFailureTest-hangs-on-precommit-.patch] downloaded at Wed Dec 19 18:11:25 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 505
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/156/",20/Dec/12 05:28;hustlmsp;lgtm +1. thanks Ivan. will commit it.,20/Dec/12 05:49;hustlmsp;committed as r1424335. thanks Ivan.,"20/Dec/12 06:25;hudson;Integrated in bookkeeper-trunk #880 (See [https://builds.apache.org/job/bookkeeper-trunk/880/])
    BOOKKEEPER-520: BookieFailureTest hangs on precommit build (ivank via sijie) (Revision 1424335)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java
","23/Dec/12 20:24;fpj;BookieFailureTest is still hanging, uploading another stack trace.","26/Dec/12 08:10;ewenpower;hi,Flavio.why BookieFailureTest is still hanging?","26/Dec/12 23:41;fpj;I'm not exactly sure why, but I can see in the test logs that it stops here:

{noformat}
2012-12-27 00:33:22,334 - INFO  - [main:BookKeeperClusterTestCase@103] - Tearing down test null
{noformat}

Note that I have also uploaded a stack trace before, it may help.",26/Dec/12 23:52;fpj;Here are the test logs for a run that stalled for me.,"27/Dec/12 00:56;hustlmsp;{quote}
2012-12-27 00:33:11,702 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 14 , ignoring
2012-12-27 00:33:11,702 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 16 , ignoring
2012-12-27 00:33:11,703 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 25 , ignoring
2012-12-27 00:33:11,703 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 28 , ignoring
2012-12-27 00:33:11,703 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 35 , ignoring
2012-12-27 00:33:11,703 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 46 , ignoring
2012-12-27 00:33:11,704 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 55 , ignoring
2012-12-27 00:33:11,704 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 59 , ignoring
2012-12-27 00:33:11,704 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 62 , ignoring
2012-12-27 00:33:11,704 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 65 , ignoring
2012-12-27 00:33:11,705 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 74 , ignoring
2012-12-27 00:33:11,705 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 80 , ignoring
2012-12-27 00:33:11,706 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 83 , ignoring
2012-12-27 00:33:11,706 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 85 , ignoring
2012-12-27 00:33:11,706 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 86 , ignoring
2012-12-27 00:33:11,706 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 91 , ignoring
2012-12-27 00:33:11,706 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 92 , ignoring
2012-12-27 00:33:11,707 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 94 , ignoring
2012-12-27 00:33:11,707 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 98 , ignoring
2012-12-27 00:33:11,708 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 100 , ignoring
2012-12-27 00:33:11,708 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 101 , ignoring
2012-12-27 00:33:11,708 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 103 , ignoring
2012-12-27 00:33:11,709 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 104 , ignoring
2012-12-27 00:33:11,709 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 106 , ignoring
2012-12-27 00:33:11,709 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 107 , ignoring
2012-12-27 00:33:11,709 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 109 , ignoring
2012-12-27 00:33:11,709 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 110 , ignoring
2012-12-27 00:33:11,709 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 112 , ignoring
2012-12-27 00:33:11,710 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for ledger: 3, entry: 113 , ignoring
2012-12-27 00:33:11,710 - ERROR - [pool-28-thread-1:PerChannelBookieClient@574] - Unexpected add response received from bookie: /192.168.1.105:15005 for
{quote}

Saw lots of unexpected add responses received. Not sure whether they caused hanging. But it seems that the problem is caused by some kind of race on addCompletions: channel connected executing adding entry to addCompletions, channel disconnected, addCompletions are error out. if some one added completion after error out, the added completion might not be executed, so no one callback and the test hangs on waiting for callback.","27/Dec/12 07:59;hustlmsp;did more investigation on this issue. it was caused by some race condition on blockAddCompletions.

{code}
    void sendAddSuccessCallbacks() {
        // Start from the head of the queue and proceed while there are
        // entries that have had all their responses come back
        PendingAddOp pendingAddOp;
        while ((pendingAddOp = pendingAddOps.peek()) != null
               && blockAddCompletions.get() == 0) {
            if (!pendingAddOp.completed) {
                return;
            }   
            pendingAddOps.remove();
            lastAddConfirmed = pendingAddOp.entryId;
            pendingAddOp.submitCallback(BKException.Code.OK);
        }   
    } 
{code}

when sendAddSuccessCallback it would check blockAddCompletions (means how many operations are trying to change ensemble). if some entries failed and tried to handleBookieFailure, it would try to acquire blockAddCompletions as below:

{code}
        final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>();
        long completions = blockAddCompletions.incrementAndGet();

        // avoid parallel ensemble changes to same ensemble.
        synchronized (metadata) {
            if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {
                // ensemble has already changed, failure of this addr is immaterial
                LOG.warn(""Write did not succeed to {}, bookieIndex {}, but we have already fixed it."",
                         addr, bookieIndex);
                completions = blockAddCompletions.decrementAndGet();
                return;
            }
{code} 

if these two codes run in different threads, the race happened, and since the responses for first entry already arrived and tried to send add success callback but failed. so no other response came in to trigger #sendAddSuccessCallbacks.

and the root cause is #writeComplete callback runs in different thread, in BookieClient#addEntry. if the client failed to connect target bookie, it failed all the #writeCompletes in its thread not submit by ledgerId order.","27/Dec/12 08:20;hustlmsp;attach a patch to fix this issue according to previous comment. beside that, improve unsetSuccessAndSendWriteRequest to just unset those entries who's write set contain the failed bookie.

run BookieFailureTest using 'while [ 0 -lt 10 ]; do mvn test -Dtest=BookieFailureTest; echo '-----'; done'. it doesn't hang for one hour.","27/Dec/12 09:09;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12562450/BOOKKEEPER-520.diff] downloaded at Thu Dec 27 08:22:07 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/171/","27/Dec/12 17:21;fpj;Great catch, Sijie! I had a look at the patch and in general it looks good to me. if i understand it correctly, the effect of the race in writeComplete is avoided by essentially removing this ""if (lh.pendingAddOps.peek() == this) {"". The patch, however, does not really try to avoid the race itself, only its negative, which is not calling ""lh.sendAddSuccessCallbacks()"" for some entries.

I'm not entirely sure of why you're moving the execution of writeComplete and readEntryComplete to separate thread in BookieClient. Is this for performance or is it related to the bug?

In unsetSuccessAndSendWriteRequest, it might be a good idea to update the comment the if statement:

{noformat}
           if (toSend == null || !writeSet.contains(bookieIndex)) {
             // this addOp hasn't yet had its mac computed. When the mac is
             // computed, its write requests will be sent, so no need to send it
             // now
{noformat}

I checked the pre-commit build, and the problem seems to be with SlowBookieTest. First, we observe this:

{noformat}
Running org.apache.bookkeeper.client.SlowBookieTest
Running org.apache.bookkeeper.client.LedgerRecoveryTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.991 sec
{noformat}

no report about failures and errors. Second, we get the following (not clarifying at all) error message:

{noformat}
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 41:54.662s
[INFO] Finished at: Thu Dec 27 09:09:17 UTC 2012
[INFO] Final Memory: 21M/401M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.9:test (default-test) on project bookkeeper-server: Failure or timeout -> [Help 1]
{noformat}

I'm not sure how this error relates to this patch, if at all.
","27/Dec/12 18:46;hustlmsp;{quote}
The patch, however, does not really try to avoid the race itself, only its negative, which is not calling ""lh.sendAddSuccessCallbacks()"" for some entries.

I'm not entirely sure of why you're moving the execution of writeComplete and readEntryComplete to separate thread in BookieClient. Is this for performance or is it related to the bug?
{quote}

there are two races here.

1) writeComplete called in BookieClient due to channel could not be connected, is raced with successful writeComplete called in PerChannelBookieClient. I resolved it by submitting #writeComplete by ledger as what we did it in PerChannelBookieClient.

2) change ensemble decrement blockAddCompletions in different thread. a success complete should wait until ensemble changed. but after ensemble changed, there is no chance to trigger sendAddSuccessCallbacks. so I removed ""if (lh.pendingAddOps.peek() == this) {"" to trigger success callbacks.

","27/Dec/12 20:06;hustlmsp;I think the slowBookie issue is introduced by the latest patch, which do not send a request if unset doesn't occur in its write set. there is a case described below:

{quote}
+        // E.g.
+        // ensemble (A, B, C, D), entry k is written to (A, B, D). An ensemble change
+        // happened to replace C with E. so entry k could not complete until C is
+        // replaced by E successfully. when ensemble change finished, it tried to
+        // unset entry k. but C is not in k's write set, so no entry is written again,
+        // no one trigger #sendAddSuccessCallbacks. so k would never complete.
+        //
{quote}

the fix would be straightforward as the example. we had to try to send success add callbacks when unset an bookie which isn't in write set, because there might be entries already completed but blocked for ensemble change to be completed.",27/Dec/12 20:06;hustlmsp;Attach a new patch to resolve the comments and slowbookie hang issue.,"27/Dec/12 20:40;hadoopqa;Testing JIRA BOOKKEEPER-520


Patch [BOOKKEEPER-520.diff|https://issues.apache.org/jira/secure/attachment/12562510/BOOKKEEPER-520.diff] downloaded at Thu Dec 27 20:12:07 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 765
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/172/","27/Dec/12 22:17;fpj;+1, great job, sijie! Committed revision 1426349.","29/Dec/12 10:49;ikelly;For future reference, if a JIRA already has a patch committed, either a new jira should be opened for amendments, or the previous should be reverted before applying the new one. ","29/Dec/12 15:30;fpj;agreed, I should I have created a new jira for this.",,,,,,,,,,,,,,,,,,,,,,,
TestDeadLock hanging sometimes,BOOKKEEPER-514,12624012,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,14/Dec/12 17:17,13/Feb/13 15:46,14/Mar/19 02:39,28/Dec/12 11:33,,,4.2.0,,,,,,0,,"I've attached the logs.

Looks to be something with the new channel manager. Also, the test itself is bad because its doing an assert from a callback.",,,,,,,,,,,,,,,,,,,19/Dec/12 15:24;ikelly;0001-BOOKKEEPER-514-TestDeadLock-hanging-sometimes.patch;https://issues.apache.org/jira/secure/attachment/12561709/0001-BOOKKEEPER-514-TestDeadLock-hanging-sometimes.patch,28/Dec/12 05:25;hustlmsp;BOOKKEEPER-514.patch;https://issues.apache.org/jira/secure/attachment/12562557/BOOKKEEPER-514.patch,27/Dec/12 23:29;fpj;BOOKKEEPER-514.patch;https://issues.apache.org/jira/secure/attachment/12562529/BOOKKEEPER-514.patch,14/Dec/12 17:18;ikelly;hedwig-server.log;https://issues.apache.org/jira/secure/attachment/12560997/hedwig-server.log,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-12-23 20:28:36.618,,,no_permission,,,,,,,,,,,,,297913,,,Fri Dec 28 11:33:12 UTC 2012,,,,,,0|i14w7r:,236684,,,,,,,,15/Dec/12 14:53;ikelly;This could possibly be related to BOOKKEEPER-516,"19/Dec/12 15:24;ikelly;The hang itself was caused by an assert in a callback in the test. However, the root cause is opCounterSem once again. So i've removed it, and replaced it with a RateLimiter.","23/Dec/12 20:28;fpj;The changes look good, but I was not able to test the patch, since there are a couple of tests that are failing, one is TestReplicationWorker and the other is BookieFailureTest. I have reopened BOOKKEEPER-520 and attached a stack trace.",27/Dec/12 23:29;fpj;Uploading a new patch to reflect recent changes to trunk.,"28/Dec/12 00:29;hadoopqa;Testing JIRA BOOKKEEPER-514


Patch [BOOKKEEPER-514.patch|https://issues.apache.org/jira/secure/attachment/12562529/BOOKKEEPER-514.patch] downloaded at Thu Dec 27 23:32:06 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/173/","28/Dec/12 00:49;fpj;This patch is failing in bookkeeper-benchmark because of this:

{noformat}
2012-12-28 01:26:23,871 - ERROR - [main-EventThread:ClientCnxn$EventThread@623] - Caught unexpected throwable
java.lang.NoClassDefFoundError: com/google/common/util/concurrent/RateLimiter
	at org.apache.bookkeeper.client.LedgerHandle.<init>(LedgerHandle.java:99)
	at org.apache.bookkeeper.client.LedgerCreateOp.operationComplete(LedgerCreateOp.java:122)
	at org.apache.bookkeeper.client.LedgerCreateOp.operationComplete(LedgerCreateOp.java:40)
	at org.apache.bookkeeper.meta.FlatLedgerManager$1.processResult(FlatLedgerManager.java:88)
	at org.apache.bookkeeper.util.ZkUtils$1.processResult(ZkUtils.java:73)
	at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:609)
	at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
Caused by: java.lang.ClassNotFoundException: com.google.common.util.concurrent.RateLimiter
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
{noformat}","28/Dec/12 05:15;hustlmsp;seems that bookkeeper-benchmark doesn't include bookkeeper-server's dependencies. but I saw hedwig-server did. the results running 'mvn dependency:tree' in bookkeeper-benchmark & hedwig-server :

bookkeeper-benchmark
{code}
[INFO] +- org.apache.bookkeeper:bookkeeper-server:jar:4.2.0-SNAPSHOT:compile
[INFO] |  \- commons-io:commons-io:jar:2.1:compile
{code}

hedwig-server
{code}
[INFO] +- org.apache.bookkeeper:bookkeeper-server:jar:4.2.0-SNAPSHOT:compile
[INFO] |  +- com.google.protobuf:protobuf-java:jar:2.4.1:compile
[INFO] |  +- com.google.guava:guava:jar:13.0.1:compile
[INFO] |  +- commons-cli:commons-cli:jar:1.2:compile
[INFO] |  +- commons-codec:commons-codec:jar:1.6:compile
[INFO] |  \- commons-io:commons-io:jar:2.1:compile
{code}","28/Dec/12 05:25;hustlmsp;seems that bookkeeper-server's dependencies are hided by hadoop-common's dependencies during resolving. I changed the order in bookeeper-benchmark/pom.xml to put bookkeeper-server before hadoop-common. and It resolved the issue here.

attached a new patch.","28/Dec/12 06:00;hadoopqa;Testing JIRA BOOKKEEPER-514


Patch [BOOKKEEPER-514.patch|https://issues.apache.org/jira/secure/attachment/12562557/BOOKKEEPER-514.patch] downloaded at Fri Dec 28 05:32:07 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 757
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/174/","28/Dec/12 11:33;fpj;+1, thanks sijie for the fix and ivan for the original patch. Committed revision 1426461.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestMessageFilter fails periodically,BOOKKEEPER-513,12624011,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,14/Dec/12 16:56,13/Feb/13 15:46,14/Mar/19 02:39,14/Jan/13 12:46,,,4.2.0,,,,,,0,,"Running org.apache.hedwig.server.filter.TestMessageFilter
Tests run: 9, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 6.779 sec <<< FAILURE!

Results :

Tests in error: 
  testChangeSubscriptionPreferences(org.apache.hedwig.server.filter.TestMessageFilter): Server responded with a status code of: TOPIC_BUSY
  testChangeSubscriptionPreferencesForClientFilter(org.apache.hedwig.server.filter.TestMessageFilter): Server responded with a status code of: TOPIC_BUSY
",,,,,,,,,,,,,,,,,,,09/Jan/13 17:18;ikelly;0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch;https://issues.apache.org/jira/secure/attachment/12563962/0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch,04/Jan/13 16:54;ikelly;0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch;https://issues.apache.org/jira/secure/attachment/12563319/0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch,03/Jan/13 18:13;ikelly;0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch;https://issues.apache.org/jira/secure/attachment/12563116/0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch,04/Jan/13 18:27;ikelly;BOOKKEEPER-513.diff;https://issues.apache.org/jira/secure/attachment/12563336/BOOKKEEPER-513.diff,14/Dec/12 16:57;ikelly;TEST-org.apache.hedwig.server.filter.TestMessageFilter.xml;https://issues.apache.org/jira/secure/attachment/12560995/TEST-org.apache.hedwig.server.filter.TestMessageFilter.xml,14/Dec/12 17:25;ikelly;TEST-org.apache.hedwig.server.persistence.MessageBoundedPersistenceTest.xml;https://issues.apache.org/jira/secure/attachment/12560999/TEST-org.apache.hedwig.server.persistence.MessageBoundedPersistenceTest.xml,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-12-20 18:46:37.117,,,no_permission,,,,,,,,,,,,,297912,,,Mon Jan 14 13:14:29 UTC 2013,,,,,,0|i14w7j:,236683,,,,,,,,14/Dec/12 17:25;ikelly;I get a similar error on MessageBoundedPersistenceTest,"20/Dec/12 15:27;ikelly;The following sequence triggers this.
# subscribe
# closeSubscription
# subscribe(attach)

AFAICS, this only happens with the simple client. Basically, closing just closes the channel, but the subscribe can get to the server before the channelDisconnected behaviour can happen, so the channel for the initial subscribe is still in the map. The solution is to send a closeSubscription message for the simple channel manager as well as with the multiplex client. Is there any reason we don't do this already [~hustlmsp]?","20/Dec/12 18:46;hustlmsp;no reason. just keep the behavior same as before for simple client. for simple client, sending the closeSubscription to hub server, the client has to wait until the closeSubscription respond. close subscription channel might be simple and straightforward.

if we want to guarantee subscribe succeed if closeSubscription succeed, we might need to adapt to same solution to kick off a closeSubscription request. if we could relax the guarantee, how about we change the test case to use force attach? both are fine for me.","20/Dec/12 19:57;ikelly;I'd prefer the sending a close subscription request. My only concern is it may cause BC issues. In any case, I won't get around to implementing until the end of next week probably.","29/Dec/12 19:40;hustlmsp;[~ikelly] did you start working on this jira? if not, I could take it.",02/Jan/13 19:55;ikelly;I haven't started on this yet. Will do it tomorrow if you haven't already started.,"02/Jan/13 20:07;hustlmsp;please go ahead, Ivan. I haven't started yet.","03/Jan/13 18:13;ikelly;I'm attaching a preliminary patch, but I think we'll need to go with another approach. 

There's a couple of problems with it. Firstly, it'll break when closing a subscription on a 4.1 server, as OperationType is an enum, and a 4.1 will only recognise the values it had in the OperationType enum, so no CLOSESUBSCRIPTION.

A way to resolve this would be to detect the server protocol version, and only send close if it's greater than what we have in 4.2. However, this doesn't work either. ProtocolVersion is also an enum, so adding another value there will break protobuf compatibility with 4.1.

The attached patch fails TestBackwardCompat (as 2 others also, but BackwardCompat is the most serious). ","03/Jan/13 19:44;fpj;bq. a 4.1 will only recognise the values it had in the OperationType enum, so no CLOSESUBSCRIPTION.

If CLOSESUBSCRIPTION is the last value of the enum, then a 4.1 server won't recognise. We just need to make sure that the 4.1 branch will do the right thing if a server receives an unknown operation type.

bq. A way to resolve this would be to detect the server protocol version, and only send close if it's greater than what we have in 4.2. However, this doesn't work either. ProtocolVersion is also an enum, so adding another value there will break protobuf compatibility with 4.1.

I was wondering if it would be ok to have a patch for 4.1 to make sure that we don't break compatibility. It is not exactly as bug fix for 4.1, but it is not supposed to be a major change either, no?
","04/Jan/13 05:35;hustlmsp;If it introduced compatibility issue, how about we moved it to next release. for this release, it seems that we could avoid it from test case side. anyway, this issue doesn't seem critical for me so far. I am fine with any solution on it.","04/Jan/13 16:54;ikelly;I've modified SimpleHChannelManager to retry subscriptions up to 5 times if it gets a TOPIC_BUSY. This seems to resolve the issue, and the fix is entirely confined to the SimpleHChannel implementation. For TestBackwardsCompat, I've added delays, as we cannot make any modifications to 4.1.0 & 4.0.0","04/Jan/13 17:00;ikelly;[~fpj] Protobufs assert if they find a value for a enum which isn't in the version they have. We can't modify 4.1.0 or 4.0.0 as they've been released, so the OperationType enum in those releases will never have CLOSESUBSCRIPTION. If we could go back in time, the solution would be to change type from being an enum to an int and do the same for protocolVersion. As it is, protocolVersion is absolutely useless as we can't ever add a new version.","04/Jan/13 17:25;fpj;From your response, it sounds like my comment was not clear. We can always have a new release for a branch, and I was wondering if there was any change we could make to the 4.1 branch that could fix the compatibility issue. If there is any such a change, then we could have it in 4.1.1. 

I don't have any great ideas at this point, so it was just a high-level thought.","04/Jan/13 18:01;hadoopqa;Testing JIRA BOOKKEEPER-513


Patch [0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch|https://issues.apache.org/jira/secure/attachment/12563319/0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch] downloaded at Fri Jan  4 17:01:13 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/199/","04/Jan/13 18:10;ikelly;The problem is that it would be incompatible with 4.1.0. Any new 4.1 release is irrelevant. The problem would occur when users are upgrading their cluster to 4.2.0 from 4.1.0. If the client is 4.2.0 and the server is 4.1.0, a close subscriber will crash the server.","04/Jan/13 18:12;ikelly;The failure is with a test crashing. Will look into it.
",04/Jan/13 18:27;ikelly;new patch is to try and trigger on jenkins with extra logging. It won't repro locally. ,"04/Jan/13 20:39;hadoopqa;Testing JIRA BOOKKEEPER-513


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563336/BOOKKEEPER-513.diff] downloaded at Fri Jan  4 20:03:19 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/203/","05/Jan/13 16:31;hadoopqa;Testing JIRA BOOKKEEPER-513


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563336/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 16:29:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/23/",09/Jan/13 17:18;ikelly;Patch rebased onto latest trunk.,"09/Jan/13 17:52;hadoopqa;Testing JIRA BOOKKEEPER-513


Patch [0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch|https://issues.apache.org/jira/secure/attachment/12563962/0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch] downloaded at Wed Jan  9 17:21:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 785
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/230/",10/Jan/13 09:45;hustlmsp;lgtm. +1. [~fpj] could you take a look at the latest patch? since you are involved in this thread.,"10/Jan/13 18:45;fpj;I applied only the changes to TestSubAfterCloseSub.java and it didn't fail. It was supposed to, right? I had a look at the test, and in my understanding it should have thrown an exception and failed because of the exception. For some reason it didn't. Also, if this is the case, why don't we catch the exception and fail the test?","10/Jan/13 18:51;ikelly;Which exception?

The test should fail with a ServiceDownException, but it's a race condition, and probably machine sensitive, so there's no guarantee. I can get it to hit very reliably on a dev machine here. ","10/Jan/13 19:22;fpj;Yeah, it does not fail for me with a ServiceDownException. That was one comment. The second comment was that perhaps we should catch the exception to make it clear that if it happens, it is wrong. The second point is minor, the first one worries me more. If it fails for everyone but me, then my vote is a 0+ for this patch.","11/Jan/13 10:48;ikelly;{quote}it does not fail for me with a ServiceDownException{quote}
This implies it fails with something? what does it fail with? It should be something to do with TOPIC_BUSY. What kind of machine are you using? Num cores? OS? How many times did you run it?

I've just run this on another different quad core linux machine, and it hits about 50% of the time. On my dual core macbook, about 50% of the time also. As I said, it's a race, and it's a race thats very dependent on what the networking stack and scheduler are doing. It's not possible to get a deterministic test for this. The best we can do is have something that creates the conditions in which the test can trigger, and if people start to see intermittent failures it means we have something to fix.","11/Jan/13 10:57;fpj;I'm also running on a dual core macbook. I have even increased the number of iterations of the test to 100 and run multiple times... nothing. I checked to make sure that the new test was there. 

bq. The best we can do is have something that creates the conditions in which the test can trigger, and if people start to see intermittent failures it means we have something to fix.

I have mixed feelings about tests that fail intermittently because passing doesn't really mean anything. But at this point, I don't think it makes sense to hold the release because of it. One option is to create a jira and think some more about it after the release. ","11/Jan/13 11:17;ikelly;{quote}I'm also running on a dual core macbook. I have even increased the number of iterations of the test to 100 and run multiple times... nothing. I checked to make sure that the new test was there. {quote}
Have you ensured that the version of the hedwig-client jar installed is the one without the fix? Do a mvn install -DskipTests from a clean branch just to be sure.

{quote}
I have mixed feelings about tests that fail intermittently because passing doesn't really mean anything. But at this point, I don't think it makes sense to hold the release because of it. One option is to create a jira and think some more about it after the release. {quote}
The other option is to not test it at all. It's impossible to have a deterministic test for this, as it depends on the timing of the kernel notifying netty of the disconnection on the server side and then depends on the timing of netty running the disconnection handler. We can't control these components and therefore can't control their timings.","11/Jan/13 11:23;fpj;bq. Have you ensured that the version of the hedwig-client jar installed is the one without the fix? Do a mvn install -DskipTests from a clean branch just to be sure.

Ok, I'll do it.

bq. The other option is to not test it at all.

Agreed, it is an option. Flaky tests make the process somewhat unreliable, though. I think I'd rather have a smaller set of solid, reliable tests rather than a larger set of somewhat unreliable tests. Note that I also don't have a good suggestion to fix this test.","11/Jan/13 11:31;ikelly;The point of having this test in is to not to say ""the test passes, so the bug doesn't exist"", but rather to say ""the test fails, therefore the bug exists"". It's a canary.","11/Jan/13 12:23;fpj;Ok, after 40 minutes running, it did hit it. 

bq. The point of having this test in is to not to say ""the test passes, so the bug doesn't exist"", but rather to say ""the test fails, therefore the bug exists"". It's a canary.

I understand, and I also understand that these issues are difficult to test. However, tests that fail intermittently tend to cause confusion because there could be a long gap between reintroducing the bug and spotting it in a failed test. Again, I'm not entirely convinced that it is a good thing to have tests like this, but if you feel we should, it is fine with me. 

One point I'd like to make is that it would be good to differentiate errors and failures. If a test is written to capture a given bug, it should add to the number of failures, not the number of errors. Adding to the number of errors should happen only in the case of unexpected events, say the disk is full or a network port is already used. ","12/Jan/13 07:07;hustlmsp;{quote}
Again, I'm not entirely convinced that it is a good thing to have tests like this, but if you feel we should, it is fine with me.
{quote}

As my previous comments, introducing closeSubscription request for simple client would break backward compatibility. At the end of a release, I think it would be better to not break the backward compatibility. Ivan's patch seems to be a suitable solution for current situation.","14/Jan/13 09:09;fpj;I'm not sure if my comment is what is preventing it from being committed. I'm not against the solution, it seems good to me. All points I've been trying to make are about the test case, not the fix itself.
","14/Jan/13 09:42;ikelly;I'm going to commit this as is, as there's one +1 and no -1.",14/Jan/13 12:46;ikelly;Committed as r1432902. Thanks for reviewing guys.,"14/Jan/13 13:14;hudson;Integrated in bookkeeper-trunk2 #59 (See [https://builds.apache.org/job/bookkeeper-trunk2/59/])
    BOOKKEEPER-513: TestMessageFilter fails periodically (ivank) (Revision 1432902)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieZkExpireTest fails periodically,BOOKKEEPER-512,12624009,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,14/Dec/12 16:44,13/Feb/13 15:47,14/Mar/19 02:39,15/Dec/12 02:08,,,4.2.0,,,,,,0,,"BookieZkExpireTest is too timing sensitive. It fails periodically due to simply having a 3 second wait for watchers to trigger. It's better to wait 1 second, and check if they have have run and if not wait again.",,,,,,,,,,,,,,,,,,,14/Dec/12 16:46;ikelly;0001-BOOKKEEPER-512-BookieZkExpireTest-fails-periodically.patch;https://issues.apache.org/jira/secure/attachment/12560993/0001-BOOKKEEPER-512-BookieZkExpireTest-fails-periodically.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-15 01:55:12.585,,,no_permission,,,,,,,,,,,,,297910,,,Sat Dec 15 10:17:03 UTC 2012,,,,,,0|i14w73:,236681,,,,,,,,15/Dec/12 01:55;hustlmsp;looks good to me. +1,15/Dec/12 02:08;hustlmsp;committed as r1422174. thanks Ivan.,"15/Dec/12 10:17;hudson;Integrated in bookkeeper-trunk #866 (See [https://builds.apache.org/job/bookkeeper-trunk/866/])
    BOOKKEEPER-512: BookieZkExpireTest fails periodically (ivank via sijie) (Revision 1422174)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieShell is very noisy,BOOKKEEPER-511,12624002,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,14/Dec/12 15:56,13/Feb/13 15:46,14/Mar/19 02:39,15/Dec/12 01:45,,,4.2.0,,,,,,0,,Bookie shell prints out a lot of stuff it for zookeeper and bookkeeper and the actually shell messages get lost. This JIRA makes zookeeper and bookkeeper only print ERROR level messages for BookieShell. Other commands stay as they are.,,,,,,,,,,,,,,,,,,,14/Dec/12 15:57;ikelly;0001-BOOKKEEPER-511-BookieShell-is-very-noisy.patch;https://issues.apache.org/jira/secure/attachment/12560989/0001-BOOKKEEPER-511-BookieShell-is-very-noisy.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-15 01:45:10.946,,,no_permission,,,,,,,,,,,,,297902,,,Sat Dec 15 02:05:23 UTC 2012,,,,,,0|i14vxz:,236640,,,,,,,,15/Dec/12 01:45;hustlmsp;+1 for the patch.,15/Dec/12 01:45;hustlmsp;committed as r1422173. thanks Ivan.,"15/Dec/12 02:05;hudson;Integrated in bookkeeper-trunk #865 (See [https://builds.apache.org/job/bookkeeper-trunk/865/])
    BOOKKEEPER-511: BookieShell is very noisy (ivank via sijie) (Revision 1422173)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/log4j.shell.properties
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestBookKeeperPersistenceManager failed on latest trunk,BOOKKEEPER-509,12623917,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,14/Dec/12 09:19,13/Feb/13 15:46,14/Mar/19 02:39,18/Dec/12 10:55,,,4.2.0,,,hedwig-server,,,0,,"latest trunk failed at TestBookKeeperPersistenceManager.

sees that it caused by uncaught exception:
{code}
java.util.NoSuchElementException
        at java.util.AbstractQueue.remove(AbstractQueue.java:90)
        at org.apache.bookkeeper.client.PendingReadOp.nextElement(PendingReadOp.java:345)
        at org.apache.bookkeeper.client.PendingReadOp.nextElement(PendingReadOp.java:53)
        at org.apache.bookkeeper.client.LedgerRecoveryOp.readComplete(LedgerRecoveryOp.java:100)
        at org.apache.bookkeeper.client.PendingReadOp.submitCallback(PendingReadOp.java:338)
        at org.apache.bookkeeper.client.PendingReadOp.readEntryComplete(PendingReadOp.java:327)
        at org.apache.bookkeeper.proto.PerChannelBookieClient.handleReadResponse(PerChannelBookieClient.java:627)
        at org.apache.bookkeeper.proto.PerChannelBookieClient$7.safeRun(PerChannelBookieClient.java:529)
        at org.apache.bookkeeper.util.SafeRunnable.run(SafeRunnable.java:31)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:680)
{code}",,,,,,,,,,,,,,,,,,,18/Dec/12 04:58;hustlmsp;BOOKKEEPER-509.diff;https://issues.apache.org/jira/secure/attachment/12561424/BOOKKEEPER-509.diff,16/Dec/12 23:13;hustlmsp;BOOKKEEPER-509.diff;https://issues.apache.org/jira/secure/attachment/12561220/BOOKKEEPER-509.diff,15/Dec/12 03:32;hustlmsp;BOOKKEEPER-509.diff;https://issues.apache.org/jira/secure/attachment/12561096/BOOKKEEPER-509.diff,14/Dec/12 22:40;hustlmsp;BOOKKEEPER-509.diff;https://issues.apache.org/jira/secure/attachment/12561048/BOOKKEEPER-509.diff,14/Dec/12 09:25;hustlmsp;hedwig-server.log;https://issues.apache.org/jira/secure/attachment/12560936/hedwig-server.log,14/Dec/12 22:44;hustlmsp;hedwig-server.log.bak;https://issues.apache.org/jira/secure/attachment/12561049/hedwig-server.log.bak,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-12-15 05:41:01.449,,,no_permission,,,,,,,,,,,,,297815,,,Tue Dec 18 13:02:32 UTC 2012,,,,,,0|i14vef:,236552,,,,,,,,"14/Dec/12 09:25;hustlmsp;attach the log of running the test. I haven't looked at the log because it was too late for me. just guessing it might relate to the uncaught exception, might be introduced by recently changes (maybe speculative reads). 

BTW: for such kind of failure, maven doesn't redirect std out to the output file. I have to change the log4j.properties to using ROLLINGFILE. is there anyone have a good idea that we could get the ouptut info when such failure happens?",14/Dec/12 22:40;hustlmsp;Attach a patch to fix the bug in PendingReadOp which introduced by speculative read. And also improve BookKeeeperPersistenceManager to return meaningful return code rather than default IllegalOp return code.,"14/Dec/12 22:43;hustlmsp;BTW: I fixed this bug, I found an interesting thing in speculative op, each time the speculative read op would be scheduled even the first response is already received. I haven't no idea why it happend. I attached the detail log for it. please grep 'Send speculative'. ","15/Dec/12 03:32;hustlmsp;the 'speculative read' sent each time because we set a delay in the test case, but the delay is only required by one test case. attached a patch to remove the delay, which will let TestBookkeeperPersistenceManager run fast.","15/Dec/12 05:41;hadoopqa;Testing JIRA BOOKKEEPER-509


Patch [BOOKKEEPER-509.diff|https://issues.apache.org/jira/secure/attachment/12561096/BOOKKEEPER-509.diff] downloaded at Sat Dec 15 05:19:56 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 499
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/127/","15/Dec/12 10:52;fpj;The patch looks mostly good, I just have a few quick comments:

# The obvious one is the trailing spaces warning in the jenkins report.
# The first LOG.info in the patch should be LOG.debug instead.
# Really minor, but I don't really like the name of the variable ""isNewCompletedRequest"". Something like ""isComplete"" or ""entryComplete"" might be better, and add a comment to say that it is true for any given entry at most once. It might also be a good idea to add some comment to the complete() call to explain that it returns false in the case the read entry request is not complete and in the case it is complete but has been checked before. Although it is clear from the code, I find that it is good practice to also explain in words so that we can later verify that the code and the explanation match. Again, these are just suggestions based on my preferences. ","15/Dec/12 14:39;ikelly;Just to clarify, the root cause here is that PendingReadOp is completing twice. I think the solution is good but could be simpler. In instead of having ""isNewCompletedRequest"", you could just have:
{code}
if (entry.complete(rctx.to, buffer)) {
    numPendingEntries--;
    
    if (numPendingEntries == 0) {
        submitCallback(BKException.Code.OK);
    }
} 
{code}
","16/Dec/12 18:37;fpj;Agreed, +1 for the change Ivan suggests.","16/Dec/12 23:13;hustlmsp;Attach a patch addressing comments.

> LOG.info

I think this log message is critical message, should be info. if we changed it to DEBUG, when something goes bad in production environment, nothing will be noticed.","17/Dec/12 15:17;ikelly;The log message will be called for every entry that gets read speculatively. In the case of a down bookie, this will cause 1000s of log messages. Perhaps you could take it out of the for loop, and just specify that you sent X speculative reads, when heardFromHosts was Y. This way the log would only be written once per timer and you would get almost as much information.",18/Dec/12 04:58;hustlmsp;Attach a new patch addressed log messages.,"18/Dec/12 05:22;hadoopqa;Testing JIRA BOOKKEEPER-509


Patch [BOOKKEEPER-509.diff|https://issues.apache.org/jira/secure/attachment/12561424/BOOKKEEPER-509.diff] downloaded at Tue Dec 18 05:01:27 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 499
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/139/",18/Dec/12 10:55;ikelly;Committed as r1423405. Thanks Sijie.,"18/Dec/12 13:02;hudson;Integrated in bookkeeper-trunk #877 (See [https://builds.apache.org/job/bookkeeper-trunk/877/])
    BOOKKEEPER-509: TestBookKeeperPersistenceManager failed on latest trunk (sijie via ivank) (Revision 1423405)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client).,BOOKKEEPER-507,12623913,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,14/Dec/12 08:55,13/Feb/13 15:46,14/Mar/19 02:39,03/Jan/13 11:09,,,4.2.0,,,,,,0,,"1) closesub first
2) sub late
3) closesub succeed, but response is delayed to client.
4) since closesub succeed in server side, so sub succeed and tried to deliver message.
5) sub response is back
6) client checked and found that there is already a subscriber there.
7) client failed the subscribe request
8) but the message would still be delivered to same channel. since the sub state is not be cleared. message is still be received.
9) closesub response is back.
10) it clear the subscribe state.
11) message continue delivering but found there is no subscriber state.
at step 11) the problem happened.

this race condition is introduced in multiplexed client (BOOKKEEPER-70).",,,,,,,,,,,,,,,,,,,02/Jan/13 19:36;hustlmsp;BOOKKEEPER-507.diff;https://issues.apache.org/jira/secure/attachment/12562946/BOOKKEEPER-507.diff,29/Dec/12 06:25;hustlmsp;BOOKKEEPER-507.diff;https://issues.apache.org/jira/secure/attachment/12562650/BOOKKEEPER-507.diff,29/Dec/12 01:56;hustlmsp;BOOKKEEPER-507.diff;https://issues.apache.org/jira/secure/attachment/12562636/BOOKKEEPER-507.diff,14/Dec/12 09:04;hustlmsp;subscribeshouldrespondafterstartserving.patch;https://issues.apache.org/jira/secure/attachment/12560932/subscribeshouldrespondafterstartserving.patch,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-12-29 05:25:37.41,,,no_permission,,,,,,,,,,,,,297811,,,Fri Jan 04 15:08:44 UTC 2013,,,,,,0|i14vdj:,236548,,,,,,,,"14/Dec/12 09:04;hustlmsp;although we have queue in hub server to guarantee request for a topic is run in order using queue. 

so for a subscribe/unsubscribe/closesubscription request, it would goes topicmanager -> subscriptionmanager -> deliverymanager in order.

but for subscribe request, we respond too early before startServingSubscription is executed. so two response are sent out-of-order.

Attached a draft patch to resolve this issue by sending respond when #startServingSubscription is executed.

the patch doesn't include a test case. I would try to add one later.",29/Dec/12 01:56;hustlmsp;update the patch with a test case.,"29/Dec/12 05:25;hadoopqa;Testing JIRA BOOKKEEPER-507


Patch [BOOKKEEPER-507.diff|https://issues.apache.org/jira/secure/attachment/12562636/BOOKKEEPER-507.diff] downloaded at Sat Dec 29 04:27:00 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:red}-1{color} the patch contains 3 line(s) longer than 120 characters
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/176/",29/Dec/12 06:25;hustlmsp;attach a patch addressing long length lines and trailings.,"29/Dec/12 07:00;hadoopqa;Testing JIRA BOOKKEEPER-507


Patch [BOOKKEEPER-507.diff|https://issues.apache.org/jira/secure/attachment/12562650/BOOKKEEPER-507.diff] downloaded at Sat Dec 29 06:32:07 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 759
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/177/","02/Jan/13 16:29;ikelly;Patch looks good. From what I see, the non-callback startServingSubscription method is never called. If this is the case, it should just be removed.","02/Jan/13 16:43;fpj;Good job, Sijie. This patch is mostly good for me and I just have a few minor comments and questions:

# The test looks very good, but I'm not exactly sure how it guarantees that the first subscription is not cleared up with the asyncCloseSubscription call. Shouldn't the wakeupLatch.countDown() call come after the closeLatch.await call? If you could clarify, I would appreciate.
# According to my eclipse configuration, the spacing of the added code in SubscribeHandler is not correct. Could you please check?
# The await timeouts for the latches are kind of short and on busy machines that might cause some false positives. Should we raise them a bit, to say 5+ seconds?
# It is unrelated to this patch, but this TODO ""// TODO make use of these variables"" does not seem to make sense. Should we remove it?
# To what operation is this comment referring to exactly ""// Thread sleep for a while to ensure operation complete""? Should it be ""operations"" plural instead? 
# I suggest we replace ""Should receive the message for a succeed subscriber."" with something like ""Message should have been received through successful subscription.""","02/Jan/13 19:36;hustlmsp;> the non-callback startServingSubscription method is never called. 

removed.

> Shouldn't the wakeupLatch.countDown() call come after the closeLatch.await call?

closeSub would never succeed until delivery manager thread is waken up to process stopServingSubscriber requests.

for the original implementation, subscribe responded w/o waiting #startServingSubscription. so when the test case slept delivery thread manager for seconds, the subscribe request responded before close subscription requests. after the delivery manager thread wake up, the close subscription executed and responded, it would clear the state of succeed subscribe request.

> the spacing of the added code in SubscribeHandler is not correct.

It seems that it was all 4 spaces indent. Do you mean 8 spaces indent when folding parameters for #startServingSubscription?

> Should we raise them a bit, to say 5+ seconds

Increased the timeout of operations to 5 seconds.

>  but this TODO ""// TODO make use of these variables"" does not seem to make sense

I am not sure about this ""TODO"", seems that it existed for a long time. And it doesn't make any sense now. just remove it.

> To what operation is this comment referring to exactly

refactor the comments.

> ""Should receive the message for a succeed subscriber.""

made the change as the suggestion.",02/Jan/13 19:37;hustlmsp;resubmit it with a new patch.,"02/Jan/13 20:09;hadoopqa;Testing JIRA BOOKKEEPER-507


Patch [BOOKKEEPER-507.diff|https://issues.apache.org/jira/secure/attachment/12562946/BOOKKEEPER-507.diff] downloaded at Wed Jan  2 19:41:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 759
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/188/","02/Jan/13 22:17;fpj;bq. Do you mean 8 spaces indent when folding parameters for #startServingSubscription?

It is in the body of operationFinished. I haven't checked, but I think the extra spaces are still there.

bq. Increased the timeout of operations to 5 seconds.

Should we also raise the timeout of ""subLatch.await(1, TimeUnit.SECONDS));"" to be consistent? 

If you agree with these small changes, they can be implemented upon committing, I don't think it is necessary to generate a new patch.

 ",03/Jan/13 01:39;hustlmsp;I am OK with these small changes to be fixed upon committing. thanks Flavio.,"03/Jan/13 11:05;ikelly;New patch lgtm, committing. +1",03/Jan/13 11:09;ikelly;Committed as r1428277. Thanks Sijie.,"03/Jan/13 11:44;fpj;Have you made the changes suggested above, Ivan?

https://issues.apache.org/jira/browse/BOOKKEEPER-507?focusedCommentId=13542482&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13542482

Never mind, I checked the commit message and I can see you did it. Thanks a lot!","03/Jan/13 12:12;hudson;Integrated in bookkeeper-trunk2 #26 (See [https://builds.apache.org/job/bookkeeper-trunk2/26/])
    BOOKKEEPER-507: Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client). (sijie via ivank) (Revision 1428277)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java
","04/Jan/13 13:58;hudson;Integrated in bookkeeper-trunk2 #31 (See [https://builds.apache.org/job/bookkeeper-trunk2/31/])
    BOOKKEEPER-507: Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client). (sijie via ivank) (Revision 1428277)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java
","04/Jan/13 15:08;hudson;Integrated in bookkeeper-trunk2 #33 (See [https://builds.apache.org/job/bookkeeper-trunk2/33/])
    BOOKKEEPER-507: Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client). (sijie via ivank) (Revision 1428277)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix findbugs warning in PendingReadOp,BOOKKEEPER-504,12623838,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,fpj,fpj,fpj,13/Dec/12 21:44,13/Feb/13 15:46,14/Mar/19 02:39,14/Dec/12 14:15,,,4.2.0,,,,,,0,,,,,,,,,,,,,,,,,,,,,13/Dec/12 21:46;fpj;BOOKKEEPER-504.patch;https://issues.apache.org/jira/secure/attachment/12560854/BOOKKEEPER-504.patch,13/Dec/12 21:44;fpj;BOOKKEEPER-504.patch;https://issues.apache.org/jira/secure/attachment/12560853/BOOKKEEPER-504.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-12-14 06:18:03.45,,,no_permission,,,,,,,,,,,,,297558,,,Fri Dec 14 15:41:04 UTC 2012,,,,,,0|i14rdr:,235901,,,,,,,,13/Dec/12 21:44;fpj;Trivial patch.,14/Dec/12 06:18;umamaheswararao;+1,14/Dec/12 14:15;ikelly;Committed as r1421875. Thanks Flavio,"14/Dec/12 15:41;hudson;Integrated in bookkeeper-trunk #863 (See [https://builds.apache.org/job/bookkeeper-trunk/863/])
    BOOKKEEPER-504: Fix findbugs warning in PendingReadOp (fpj via ivank) (Revision 1421875)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The test case of TestThrottlingDelivery#testServerSideThrottle failed sometimes,BOOKKEEPER-503,12623785,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,jiannan,jiannan,jiannan,13/Dec/12 17:11,13/Feb/13 15:46,14/Mar/19 02:39,12/Jan/13 17:55,,,4.2.0,,,hedwig-server,,,0,,"Running follow script in hedwig-server project
{code:java}
while mvn test -Dtest=TestThrottlingDelivery; do echo .; done
{code}
We may get assertion failure:
{code:java}
testServerSideThrottle[0](org.apache.hedwig.server.delivery.TestThrottlingDelivery)  Time elapsed: 14.922 sec  <<< FAILURE!
junit.framework.AssertionFailedError: Timed out waiting for messages 31
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at org.apache.hedwig.server.delivery.TestThrottlingDelivery.throttleX(TestThrottlingDelivery.java:159)
	at org.apache.hedwig.server.delivery.TestThrottlingDelivery.testServerSideThrottle(TestThrottlingDelivery.java:206)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
{code}

This is a race issue which may cause messages been throttled by mistake, the root cause is ActiveSubscriberState.messageConsumed() and ActiveSubscriberState.deliverNextMessage() may be executed in different threads by AbstractSubscriptionManager and FIFODeliveryManager.

Read the log in attachement around Line 2420 if you want to get more information, here I replay the logs onto the code (Line XX denotes code listed below):
# Messages 1-30 are to be delivered and the message window size in Hub server is 10.
# Messages 1-10 are delivered to subscriber while message 11-30 is throttled by the window size limitation.
# Subscriber calls consume 1-10 asynchronously.
# CONSUME 1 is handled and FIFODeliveryManager continue to deliver message 11.
# Subscriber receive message 11 and quickly ack CONSUME 11 to Hub.
# Now there are two threads operate on a same ActiveSubscriberState:
#* Thread in AbstractSubscriptionManager: call ActiveSubscriberState.messageConsumed() for message 2, 3, 11 (4-10 is still on the way since it's asynchronous consume). Let's assume this thread happen to run in Line (14) for message 11.
#* Thread in FIFODeliveryManager:  Coincidently, it's in Line (36) now (with last delivered 11, last consumed 1 and variable isThrottled is still false).
# If thread in AbstractSubscriptionManager executed before FIFODeliveryManager, then consume operator for 11 does nothing more.
# CONSUME [4-10] will be just ignored by the if statement in Line (2) since lastSeqIdConsumedUtil is now 11.
# Further messages like 12 have no chance to been delivered at this time.

{code:java}
(01) protected void messageConsumed(long newSeqIdConsumed) {
(02)     if (newSeqIdConsumed <= lastSeqIdConsumedUtil) {
(03)         return;
(04)     }
(05)     if (logger.isDebugEnabled()) {
(06)         logger.debug(""Subscriber ({}) moved consumed ptr from {} to {}."",
(07)                      va(this, lastSeqIdConsumedUtil, newSeqIdConsumed));
(08)     }
(09)     lastSeqIdConsumedUtil = newSeqIdConsumed;
(10)     // after updated seq id check whether it still exceed msg limitation
(11)     if (msgLimitExceeded()) {
(12)         return;
(13)     }
(14)     if (isThrottled) {
(15)         isThrottled = false;
(16)         logger.info(""Try to wake up subscriber ({}) to deliver messages again : last delivered {}, last consumed {}."",
(17)                     va(this, lastLocalSeqIdDelivered, lastSeqIdConsumedUtil));
(18) 
(19)         enqueueWithoutFailure(new DeliveryManagerRequest() {
(20)             @Override
(21)             public void performRequest() {
(22)                 // enqueue 
(23)                 clearRetryDelayForSubscriber(ActiveSubscriberState.this);            
(24)             }
(25)         });
(26)     }
(27) }
(28) 
(29) public void deliverNextMessage() {
(30)     if (!isConnected()) {
(31)         return;
(32)     }
(33) 
(34)     // check whether we have delivered enough messages without receiving their consumes
(35)     if (msgLimitExceeded()) {
(36)         logger.info(""Subscriber ({}) is throttled : last delivered {}, last consumed {}."",
(37)                     va(this, lastLocalSeqIdDelivered, lastSeqIdConsumedUtil));
(38)         isThrottled = true;
(39)         // do nothing, since the delivery process would be throttled.
(40)         // After message consumed, it would be added back to retry queue.
(41)         return;
(42)     }
(43) 
(44)     localSeqIdDeliveringNow = persistenceMgr.getSeqIdAfterSkipping(topic, lastLocalSeqIdDelivered, 1);
(45) 
(46)     ScanRequest scanRequest = new ScanRequest(topic, localSeqIdDeliveringNow,
(47)             /* callback= */this, /* ctx= */null);
(48) 
(49)     persistenceMgr.scanSingleMessage(scanRequest);
(50) }
{code}

By the way, we should also take care of thread-safe issue in other methods for ActiveSubscriberState, which implements some other callback interface.",,,,,,,,,,,,,,,BOOKKEEPER-539,,,,10/Jan/13 17:17;ikelly;0001-BOOKKEEPER-503-Test-case.patch;https://issues.apache.org/jira/secure/attachment/12564201/0001-BOOKKEEPER-503-Test-case.patch,12/Jan/13 06:29;hustlmsp;BOOKKEEPER-503.patch;https://issues.apache.org/jira/secure/attachment/12564558/BOOKKEEPER-503.patch,11/Jan/13 21:59;jiannan;BOOKKEEPER-503.patch;https://issues.apache.org/jira/secure/attachment/12564499/BOOKKEEPER-503.patch,05/Jan/13 10:06;jiannan;logs.tar;https://issues.apache.org/jira/secure/attachment/12563410/logs.tar,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-12-20 18:33:53.519,,,no_permission,,,,,,,,,,,,,297485,,,Sat Jan 12 18:29:15 UTC 2013,,,,,,0|i14p0n:,235518,,,,,,,,20/Dec/12 18:33;ikelly;I had a quick look at this. I think it's something to do with BOOKKEEPER-507.,04/Jan/13 06:50;hustlmsp;I had run 'while [ 0 -lt 10 ]; do mvn test -Dtest=TestThrottlingDelivery; echo '-----'; done' for hours. it doesn't reproduce the issue described as above. I think it is fixed after fixing BOOKKEEPER-507. so is it OK to close it? it could be reopened if it reproduced.,"04/Jan/13 10:44;fpj;Let's close it as you suggest, Sijie. I'm marking it as ""Cannot reproduce"".","04/Jan/13 12:19;jiannan;I pull the newest code and run with command ""while mvn test -Dtest=TestThrottlingDelivery; do echo .; done"" and it failed in my dev box.",04/Jan/13 12:21;jiannan;Reopen since it happen in my dev box.,"04/Jan/13 15:49;fpj;I can't reproduce this one. Jiannan, is there anything special about your setup? Could you have a closer look at the issue to see what's going since you're able to reproduce it?","04/Jan/13 22:03;hustlmsp;[~jiannan]

{quote}
Message 12 has no chance to been delivered.
{quote}

if CONSUME 11 arrives before CONSUME[2-10], so the gap becomes to 1 which is less than the window size, right? so we should deliver message 12, right?

Could you enable DEBUG when you run the test and attach the log for failures? 
","05/Jan/13 04:28;jiannan;Sorry, there are some problem in my description, I didn't post it last night but I run out of battery in my Mac book. I'll update it today.",05/Jan/13 10:06;jiannan;Attach fail logs,"05/Jan/13 17:39;hustlmsp;good job, [~jiannan]

the race condition happened between checking and setting isThrottled variable.

for simplification,

A.1 check #msgLimitExceed
A.2 set isThrottled to true

B.1 modified last consume seq id
B.2 check #msgLimitExceed
B.3 check isThrottled

if the sequence is A.1 B.1 B.2 B.3 A.2, then no one could pick the throttled subscriber back to normal.

we might need some synchronization between these two methods. we could not just simply change messageConsumed to run in DeliveryThread. since #deliveryNextMessage not only run in DeliveryThread, but also run in netty worker thread, in the delivery callback of previous message.

[~jiannan] Could you generate a patch for it?","06/Jan/13 03:16;jiannan;Sure, I'm working on it, I guess I can generate a patch today.
Thanks for Sijie's tip, or I may make the mistake.","07/Jan/13 08:56;jiannan;I find other error messages during test without my patch: ""Client is not yet subscribed to Topic: testServerSideThrottleWithHigherValue, SubscriberId: serverThrottleSub"".

I think I should take a look at it before uploading patch.","09/Jan/13 17:23;ikelly;The fact that deliverNextMessage is in another thread seems to cause a lot of problems (also BOOKKEEPER-529). Could we solve all this, just by making deliverNextMessage submit a task to the executor, which does that deliverNextMessage does now?","10/Jan/13 04:56;hustlmsp;we could do it. if we want to do that way, we need to provide multiple threads for delivery manager first, moving BOOKKEEPER-526 from 4.3.0 to 4.2.0. Otherwise, we might encounter performance issue, since original implementation only #deliverNextMessage first time in delivery manager thread, after that it would #deliverNextMessage in netty worker threads. if we submit deliverNextMessage back to delivery manager thread, there is only one delivery manager now. we have to let BOOKKEEPER-526 in before taking this solution here.",10/Jan/13 17:17;ikelly;I've written a test case which should trigger this (if i understand the description correctly). Do you have a fix for this [~jiannan]?,"10/Jan/13 18:31;ikelly;I used the same test class for BOOKKEEPER-539, so the test attached for this should be applied on top of that.","11/Jan/13 04:17;jiannan;thanks Ivan for adding test case, I'm basing on 539 to generate patch.","11/Jan/13 21:59;jiannan;I go through all variables in ActiveSubscriberState and check which need to be synchronized:
* {color:red}lastLocalSeqIdDelivered{color}
** WRITE by sendingFinished(), which is called in netty thread
** READ by msgLimitExceeded(), which maybe called by messageConsumed() in AbstractSubscriptionManager thread
* connected
** has been synchronized
* {color:red}lastScanErrorTime{color}
** WRITE by clearLastScanErrorTime(), which is called by clearRetryDelayForSubscriber() in delivery manager thread
** WRITE by scanFailed(), which is called in netty thread
* localSeqIdDeliveringNow
** WRITE by doDeliverNextMessage(), which is called in netty thread
** READ by sendingFinished(), which is called in the same thread above
* {color:red}lastSeqIdCommunicatedExternally{color}
** WRITE by sendingFinished(), which is called in netty thread
** READ by doStopServingSubscriber(), which is called in delivery manager thread
* {color:red}lastSeqIdConsumedUtil{color}
** WRITE by messageConsumed(), which is called in AbstractSubscriptionManager thread
** READ by msgLimitExceeded(), which maybe called by doDeliverNextMessage() in netty thread
* {color:red}isThrottled{color}
** WRITE by messageConsumed(), which is called in AbstractSubscriptionManager thread
** READ by sendingFinished(), which is called in netty thread
* Other variables
** assigned in ActiveSubscriberState constructor and only READ in other methods

Since there are many variables require synchronization, I only share a common ReentrantReadWriteLock between them. After [BOOKKEEPER-526|https://issues.apache.org/jira/browse/BOOKKEEPER-526], we can remove this lock and run all operations of ActiveSubscriberState in same thread. By the way, there has been a ReentrantReadWriteLock ""connectedLock"" in ActiveSubscriberState, I think it's Ok to reuse instead of adding a new ReentrantReadWriteLock object, but I don't change it in this patch (should I reuse it?).

And I fix another two problem to make my code pass all test cases:
* StubPersistenceManager#scanSingleMessage doesn't response with seq ID (and then response.getMessage().getMsgId() always return 0)
* TestFIFODeliveryManager#testFIFODeliverySubCloseSubRace() startServingSubscription should start delivery from 1.

With this patch, there is no error found in my dev box with running TestThrottlingDelivery for 2 hours (it taks about 20 minutes to fail test in my dev box before).","12/Jan/13 06:23;hustlmsp;[~jiannan] good job, thanks for detail analyzing the variables. actually you don't need to use ReadWriteLock. Read/Write locks allow in multiple readers a the same time, but only if no writers are already in. Hence under some usage scenarios we can get better concurrency, because the reader populations can proceed together. but in this case, reader and writer are only one. you could use synchronized to make the code simple and clean. in honestly, connectLock could use synchronized too.
",12/Jan/13 06:29;hustlmsp;provide a version using synchronized which might make code clean.,12/Jan/13 06:30;hustlmsp;[~jiannan] could you take a look at the patch using synchronized?,"12/Jan/13 06:39;hadoopqa;Testing JIRA BOOKKEEPER-503


Patch [BOOKKEEPER-503.patch|https://issues.apache.org/jira/secure/attachment/12564499/BOOKKEEPER-503.patch] downloaded at Sat Jan 12 06:08:20 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 3 new Findbugs warning(s) in module(s) [hedwig-server]
{color:green}+1 TESTS{color}
.    Tests run: 788
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/243/","12/Jan/13 07:10;hadoopqa;Testing JIRA BOOKKEEPER-503


Patch [BOOKKEEPER-503.patch|https://issues.apache.org/jira/secure/attachment/12564558/BOOKKEEPER-503.patch] downloaded at Sat Jan 12 06:39:32 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 788
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/244/","12/Jan/13 07:39;jiannan;Thanks sijie for clean the code, it looks much better now. The new patch look good to me, only a line in ActiveSubscriberState.toString():
+            sb.append(""Subscriber: ""); -> sb.append("", Subscriber: "");
+            sb.append(subscriberId.toStringUtf8());
+            sb.append("", DeliveryPtr: "");","12/Jan/13 07:46;jiannan;By the way, thanks for explaining ReadWriteLock usage, I didn't think so deep about it. But I think for this scenario, there may more readers, since the ReadWriteLock of my previous patch is shared by many variables. But I can't agree more to use synchronized instead of ReadWriteLock, my previous patch is very very ugly when it compared to yours :)","12/Jan/13 16:54;ikelly;Patch looks good. +1 from me. synchronized is fine at the ActiveSubscriberState level, as we should only be executing one operation at at time for each subscriber anyhow.",12/Jan/13 17:55;ikelly;Committed as r1432485. Thanks guys.,"12/Jan/13 18:29;hudson;Integrated in bookkeeper-trunk2 #56 (See [https://builds.apache.org/job/bookkeeper-trunk2/56/])
    BOOKKEEPER-503: The test case of TestThrottlingDelivery#testServerSideThrottle failed sometimes (jiannan & sijie via ivank) (Revision 1432485)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestFIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubPersistenceManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fencing doesn't work when restarting bookies.,BOOKKEEPER-500,12623335,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,11/Dec/12 06:31,13/Feb/13 15:46,14/Mar/19 02:39,18/Dec/12 12:05,4.1.0,4.2.0,4.2.0,,,bookkeeper-server,,,0,,"Currently we just record fence state in memory. If the bookies are restarted, all fence states are gone. It would break the correctness that we guarantee about fencing.

We should record the fence state in the file info to make it persistent.

A test case added to produce this issue.",,,,,,,,,,,,,,,,,,,11/Dec/12 06:39;hustlmsp;BOOKKEEPER-500.-testcase.diff;https://issues.apache.org/jira/secure/attachment/12560361/BOOKKEEPER-500.-testcase.diff,18/Dec/12 05:26;hustlmsp;BOOKKEEPER-500.diff;https://issues.apache.org/jira/secure/attachment/12561432/BOOKKEEPER-500.diff,17/Dec/12 04:40;hustlmsp;BOOKKEEPER-500.diff;https://issues.apache.org/jira/secure/attachment/12561240/BOOKKEEPER-500.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-12-11 18:35:57.114,,,no_permission,,,,,,,,,,,,,297031,,,Tue Dec 18 14:59:50 UTC 2012,,,,,,0|i14kxb:,234853,,,,,,,,11/Dec/12 06:39;hustlmsp;added a test case to produce the issue.,"11/Dec/12 18:35;fpj;[~hustlmsp] You have marked this for 4.2.0, but I would say that whatever is not a blocker should be moved to 4.3.0 or even 4.2.1 in the case of bugs. Is this a blocker?","12/Dec/12 06:07;hustlmsp;the users of BOOKKEEPER heavily reply on the correctness of fencing, like Hedwig replies on BOOKKEEPER fencing to provide right sequence id, NameNode of HDFS would also need it too. so if the bug affected or would affect the correctness of fencing, it should be resolved in latest release. so I think it is a blocker.",12/Dec/12 10:12;ikelly;This should be in 4.2.0. Well spotted Sijie.,17/Dec/12 04:40;hustlmsp;Attach a patch to persistent fence state when fencing ledger.,"17/Dec/12 14:58;ikelly;Patch looks good. It's good that the idx format is backward compatible also. I've 2 comments. Firstly, you need to bump JournalChannel#CURRENT_JOURNAL_FORMAT_VERSION, and check for _that_ version when replaying the journal. Secondly, you catch Exception in processPacket, which will fail findbugs. Otherwise, the fix looks ready.",18/Dec/12 05:26;hustlmsp;new patch addressed Ivan's comments.,18/Dec/12 12:05;ikelly;Committed as r1423419. Good work Sijie.,"18/Dec/12 14:59;hudson;Integrated in bookkeeper-trunk #878 (See [https://builds.apache.org/job/bookkeeper-trunk/878/])
    BOOKKEEPER-500: Fencing doesn't work when restarting bookies. (sijie via ivank) (Revision 1423419)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieRecoveryTest.tearDown NPE,BOOKKEEPER-498,12623151,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,fpj,fpj,fpj,10/Dec/12 14:29,13/Feb/13 15:46,14/Mar/19 02:39,10/Dec/12 15:04,,,4.2.0,,,,,,0,,Jenkins build is complaining among other things about this NPE.,,,,,,,,,,,,,,,,,,,10/Dec/12 15:13;fpj;BOOKKEEPER-498.patch;https://issues.apache.org/jira/secure/attachment/12560192/BOOKKEEPER-498.patch,10/Dec/12 14:37;fpj;BOOKKEEPER-498.patch;https://issues.apache.org/jira/secure/attachment/12560184/BOOKKEEPER-498.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-12-10 14:56:27.359,,,no_permission,,,,,,,,,,,,,296750,,,Mon Dec 10 15:34:33 UTC 2012,,,,,,0|i14h2f:,234228,,,,,,,,"10/Dec/12 14:37;fpj;Here is one example:

https://builds.apache.org/job/bookkeeper-trunk/org.apache.bookkeeper$bookkeeper-server/849/testReport/junit/org.apache.bookkeeper.client/BookieRecoveryTest/testSyncBookieRecoveryToRandomBookies_2__2/",10/Dec/12 14:37;fpj;Patch is straightforward.,"10/Dec/12 14:56;umamaheswararao;+1 for change, we will just follow the conventions of having braces for if. May be ok to go as this is test or you can just add while committing. :-)

Is that some issue with jenkins build? because I can see 'Address already in use' errors in logs.","10/Dec/12 15:04;fpj;Thanks for reviewing, Uma, I have added the curly braces. I haven't had a chance to look carefully into the address already in use exception.

Committed revision 1419496.",10/Dec/12 15:13;fpj;Attaching the patch that has been actually committed.,"10/Dec/12 15:34;hudson;Integrated in bookkeeper-trunk #850 (See [https://builds.apache.org/job/bookkeeper-trunk/850/])
    BOOKKEEPER-498: BookieRecoveryTest.tearDown NPE (fpj) (Revision 1419496)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GcLedgersTest has a potential race,BOOKKEEPER-497,12623121,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,10/Dec/12 10:50,13/Feb/13 15:46,14/Mar/19 02:39,12/Dec/12 05:54,,,4.2.0,,,,,,0,,"The callbacks use Object#wait/notify without checking a condition. If the callback completes very quickly, the notify will happen before wait is ever called. The best solution is to use a CountDownLatch. Im seeing this problem when applying patch for BOOKKEEPER-205, probably due to a change in timing on the test.",,,,,,,,,,,,,,,,,,,10/Dec/12 11:08;ikelly;0001-BOOKKEEPER-497-GcLedgersTest-has-a-potential-race.patch;https://issues.apache.org/jira/secure/attachment/12560166/0001-BOOKKEEPER-497-GcLedgersTest-has-a-potential-race.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-10 18:25:22.385,,,no_permission,,,,,,,,,,,,,296716,,,Wed Dec 12 07:57:42 UTC 2012,,,,,,0|i14guf:,234192,,,,,,,,"10/Dec/12 11:08;ikelly;Instead of latch, it now takes the lock before making the call, so the notify can't be called until wait releases the lock.","10/Dec/12 18:25;hustlmsp;the patch lgtm +1. [~ikelly] Do you want to change the notify/wait to a CountDownLatch? or just keep the fix in your patch? If you want to keep the fix, could you submit the patch?",11/Dec/12 11:54;ikelly;I think the fix thats there is fine.,"11/Dec/12 12:29;hadoopqa;Testing JIRA BOOKKEEPER-497


Patch [0001-BOOKKEEPER-497-GcLedgersTest-has-a-potential-race.patch|https://issues.apache.org/jira/secure/attachment/12560166/0001-BOOKKEEPER-497-GcLedgersTest-has-a-potential-race.patch] downloaded at Tue Dec 11 12:01:43 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 439
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/97/",12/Dec/12 05:54;hustlmsp;committed as r1420532. thanks Ivan.,"12/Dec/12 07:57;hudson;Integrated in bookkeeper-trunk #855 (See [https://builds.apache.org/job/bookkeeper-trunk/855/])
    BOOKKEEPER-497: GcLedgersTest has a potential race (ivank via sijie) (Revision 1420532)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
moveLedgerIndexFile might have chance pickup same directory,BOOKKEEPER-493,12619163,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,06/Dec/12 18:21,13/Feb/13 15:46,14/Mar/19 02:39,12/Dec/12 17:27,,,4.2.0,,,,,,0,,"{code}

    public void addToFilledDirs(File dir) {
        if (!filledDirs.contains(dir)) {
            LOG.warn(dir + "" is out of space.""
                    + "" Adding it to filled dirs list"");
            // Update filled dirs list
            List<File> updatedFilledDirs = new ArrayList<File>(filledDirs);
            updatedFilledDirs.add(dir);
            filledDirs = updatedFilledDirs;
            // Update the writable ledgers list
            List<File> newDirs = new ArrayList<File>(writableLedgerDirectories);
            newDirs.removeAll(filledDirs);
            writableLedgerDirectories = newDirs;
            // Notify listeners about disk full
            for (LedgerDirsListener listener : listeners) {
                listener.diskFull(dir);
            }   
        }   
    }

{code}

When a directory is putting into filledDirs, it might not be removed from writableLedgerDirectories. The directory still has chance to be picked up to move index file.

we need same synchronization and check to guarantee that we don't move to same directory.",,,,,,,,,,,,,,,,,,,07/Dec/12 06:59;hustlmsp;BOOKKEEPER-493.diff;https://issues.apache.org/jira/secure/attachment/12559825/BOOKKEEPER-493.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-07 07:21:37.101,,,no_permission,,,,,,,,,,,,,296358,,,Wed Dec 12 18:49:12 UTC 2012,,,,,,0|i148rr:,232884,,,,,,,,07/Dec/12 06:59;hustlmsp;Attach a patch to exclude old ledger dir when pick a new ledger dir to move index file. Adding a test case for LedgerDirsManager.,"07/Dec/12 07:21;hadoopqa;Testing JIRA BOOKKEEPER-493


Patch [BOOKKEEPER-493.diff|https://issues.apache.org/jira/secure/attachment/12559825/BOOKKEEPER-493.diff] downloaded at Fri Dec  7 07:01:27 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 395
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/79/","12/Dec/12 17:27;ikelly;Committed as r1420854. Thanks Sijie. 

I fixed the whitespace issuing during commit.","12/Dec/12 18:49;hudson;Integrated in bookkeeper-trunk #858 (See [https://builds.apache.org/job/bookkeeper-trunk/858/])
    BOOKKEEPER-493: moveLedgerIndexFile might have chance pickup same directory (sijie via ivank) (Revision 1420854)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestFencing hung,BOOKKEEPER-485,12617805,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,ikelly,fpj,fpj,27/Nov/12 15:33,02/May/13 02:29,14/Mar/19 02:39,01/Dec/12 14:05,,,4.2.0,,,,,,0,,"... while testing BOOKKEEPER-477, but I think they are unrelated.",,,,,,,,,,,,,,,,,,,30/Nov/12 19:10;ikelly;0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch;https://issues.apache.org/jira/secure/attachment/12555548/0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch,29/Nov/12 11:58;ikelly;0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch;https://issues.apache.org/jira/secure/attachment/12555345/0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch,27/Nov/12 15:35;fpj;stack-trace-hung.txt;https://issues.apache.org/jira/secure/attachment/12555017/stack-trace-hung.txt,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-11-27 15:45:04.782,,,no_permission,,,,,,,,,,,,,292369,,,Sat Dec 01 18:28:43 UTC 2012,,,,,,0|i0rxhz:,161071,,,,,,,,27/Nov/12 15:35;fpj;Attached stack trace.,27/Nov/12 15:45;ikelly;TestFencing#testManyOpenParallel is a long running test sometimes. how long had it hung for. Situations like this is why we should get BOOKKEEPER-476 in soon.,"27/Nov/12 15:50;fpj;It was a pretty long time. In fact, I forgot about it and came back several minutes later. It was there hung in that test. Now it is making progress just fine.
","27/Nov/12 16:07;ikelly;Crap, looks like something BOOKKEEPER-5ish again. Look at ""TestFencing-LedgerOpenThread-17"".","29/Nov/12 11:15;ikelly;Ok, so it's similar to BOOKKEEPER-5, but not the same. Basically, there's a race between closing the PerChannelBookieClient and the connection completing. If the PerChannelBookieClient requests to connect, and then is closed before the request completes, then the channel object returned on successful connection is orphaned. The fix is simple, im running in loop now. A succinct repo should be easy enough to implement as well. ","29/Nov/12 11:58;ikelly;Fix is simple. Set the channel state to disconnected on close. If, on connection completion, the callback sees the state is in disconnected (rather than connecting), close the channel, and abort ops. The test case will successfully repro the issue if run without the fix, but the whole thing hangs due to releaseExternalResources being completely uninterruptible.","29/Nov/12 12:24;hadoopqa;Testing JIRA BOOKKEEPER-485

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555345/0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch"">/jira/secure/attachment/12555345/0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch</a> downloaded at Thu Nov 29 12:01:14 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 384
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/51/","29/Nov/12 17:50;hustlmsp;{quote}
+                    } else if (future.isSuccess() && state == ConnectionState.DISCONNECTED) {
+                        LOG.error(""Closed before connection completed, clean up: "" + addr);
+                        future.getChannel().close();
+                        rc = BKException.Code.BookieHandleNotAvailableException;
+                        channel = null;
+                        state = ConnectionState.DISCONNECTED;
{quote}

in this case, you assign the rc code to BookieHandleNotAvailableException. But it seems no so suitable, because actually the connect operation succeed and bookie is available. I think we need a better rc code here.

besides that, just be curious why you changed log level from DEBUG to INFO for connecting message.","30/Nov/12 15:22;ikelly;BookieHandleNotAvailableException is the closest to what has happened. The channel has been closed, so the bookie handle, is in fact not available. If clients need more details, they need to look at the logs. This isn't an error they should be able to recover from. If this occurs they need to fix their code.

It's useful to know which thread triggered the connect. The log on connection and disconnection are both INFO, so it made little sense to have this one as DEBUG, and it was annoying to have to enable debug logging just for this output.","30/Nov/12 16:28;fpj;It looks good, just a couple of comments:

- I don't think this statement is needed: state = ConnectionState.DISCONNECTED;
- The test case is not really deterministic, although I understand that running it 1000 times will probably trigger it once. I can't come up with a good way of making it deterministic, though, so it is fine with me to have it like that. I just wanted to make the point and perhaps have a comment on the description of the test case for future reference.
- In ZooKeeper, we often have a {@link http://issues.apache.org/...} tag to link the test case to the jira issue. I like it, so I suggest we use it here too, but if you people don't like, we don't have to do it. Just a text reference as you have now is ok.",30/Nov/12 19:10;ikelly;Addressed review comments.,"30/Nov/12 19:35;hadoopqa;Testing JIRA BOOKKEEPER-485

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555548/0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch"">/jira/secure/attachment/12555548/0001-BOOKKEEPER-485-Fix-race-between-PerChannelBookieClie.patch</a> downloaded at Fri Nov 30 19:11:13 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 384
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/57/","01/Dec/12 09:56;fpj;+1, looks good, Ivan.",01/Dec/12 14:05;fpj;Committed revision 1416000.,"01/Dec/12 18:28;hudson;Integrated in bookkeeper-trunk #833 (See [https://builds.apache.org/job/bookkeeper-trunk/833/])
    BOOKKEEPER-485: TestFencing hung (ivank via fpj)

--THIS line, and those below, will be ignored--

M    CHANGES.txt
A    bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java
M    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java (Revision 1416000)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Misc fixes for test scripts,BOOKKEEPER-484,12617803,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,27/Nov/12 15:14,13/Feb/13 15:46,14/Mar/19 02:39,03/Dec/12 20:32,,,4.2.0,,,,,,0,,"Catchup patch for some annoying issues I've notices with patch test scripts.

# SCM cleanup happens after dir creation (effectively undoing it)
# patch link is displayed wrong
# posts empty message to jira if patch is not in patch available state",,,,,,,,,,,,,,,,,,,27/Nov/12 15:55;ikelly;0002-BOOKKEEPER-484-Fix-precommit-link-display-exit-witho.patch;https://issues.apache.org/jira/secure/attachment/12555022/0002-BOOKKEEPER-484-Fix-precommit-link-display-exit-witho.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 18:54:54.52,,,no_permission,,,,,,,,,,,,,292367,,,Tue Dec 04 09:05:24 UTC 2012,,,,,,0|i0rxhj:,161069,,,,,,,,27/Nov/12 15:15;ikelly;test link display format [0001-Store-test-logs-in-output-file.patch|http://www.google.com/jira/secure/attachment/12554738/0001-Store-test-logs-in-output-file.patch],"27/Nov/12 18:54;hadoopqa;Testing JIRA BOOKKEEPER-484

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555022/0002-BOOKKEEPER-484-Fix-precommit-link-display-exit-witho.patch"">/jira/secure/attachment/12555022/0002-BOOKKEEPER-484-Fix-precommit-link-display-exit-witho.patch</a> downloaded at Tue Nov 27 18:33:42 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/45/","03/Dec/12 20:32;fpj;+1, Thanks, Ivan. Committed revision 1416655.","04/Dec/12 09:05;hudson;Integrated in bookkeeper-trunk #837 (See [https://builds.apache.org/job/bookkeeper-trunk/837/])
    BOOKKEEPER-484: Misc fixes for test scripts (ivank via fpj) (Revision 1416655)

     Result = UNSTABLE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bin/test-patch
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"precommit tests only check toplevel rat file, not the one for submodules.",BOOKKEEPER-483,12617796,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,27/Nov/12 14:25,13/Feb/13 15:46,14/Mar/19 02:39,13/Dec/12 15:44,,,4.2.0,,,,,,0,,"Therefore, not all rat errors are detected.",,,,,,,,,,,,,,,,,,,27/Nov/12 14:47;ikelly;0001-BOOKKEEPER-483-check-all-modules-for-rat-errors.patch;https://issues.apache.org/jira/secure/attachment/12555013/0001-BOOKKEEPER-483-check-all-modules-for-rat-errors.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 18:33:21.597,,,no_permission,,,,,,,,,,,,,292359,,,Fri Dec 14 06:51:27 UTC 2012,,,,,,0|i0rxfj:,161060,,,,,,,,"27/Nov/12 18:33;hadoopqa;Testing JIRA BOOKKEEPER-483

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555013/0001-BOOKKEEPER-483-check-all-modules-for-rat-errors.patch"">/jira/secure/attachment/12555013/0001-BOOKKEEPER-483-check-all-modules-for-rat-errors.patch</a> downloaded at Tue Nov 27 18:12:18 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/43/","03/Dec/12 20:53;fpj;The patch is quite simple and it looks good to me. I checked the output of QA and it looks right to me. I just need a quick clarification: should we see the execution of ""copyRatFiles clean"" in the console output of the build? I can see the ones of ""copyRatFiles patch"" but not the one for clean.","04/Dec/12 15:47;ikelly;because when the RAT task runs for clean, this patch has not been applied, therefore it won't do the copy. Once this patch is in, you'll see it for both.","04/Dec/12 16:09;fpj;Perhaps I don't understand very well what's going on and my observation might be naive. I thought that with the pre-commit I was supposed to see it because it runs with the patch applied, but perhaps it still uses the unpatched scripts. Could you clarify just for my own understanding, please? ",08/Dec/12 15:20;fpj;[~ikelly] Waiting for a clarification.,"10/Dec/12 09:43;ikelly;The precommit runs the the rat check twice. Once with clean trunk, and once with patch applied, and compares the output. 

The precommit build for this patch is going to be comparing what trunk generates (no copyRatFiles) and what the patch generates (with copyRatFiles). ","13/Dec/12 15:44;fpj;+1, Thanks, Ivan. Committed revision 1421346.","14/Dec/12 06:51;hudson;Integrated in bookkeeper-trunk #860 (See [https://builds.apache.org/job/bookkeeper-trunk/860/])
    BOOKKEEPER-483: precommit tests only check toplevel rat file, not the one for submodules. (ivank via fpj) (Revision 1421346)

     Result = FAILURE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bin/test-patch-08-rat
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Precommit is reporting findbugs errors in trunk,BOOKKEEPER-482,12617768,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,27/Nov/12 11:18,13/Feb/13 15:46,14/Mar/19 02:39,01/Dec/12 05:33,,,4.2.0,,,,,,0,,Precommit is reporting findbugs warnings. ,,,,,,,,,,,,,,,,,,,27/Nov/12 11:29;ikelly;0004-BOOKKEEPER-482-fix-for-findbugs-warnings-in-trunk.patch;https://issues.apache.org/jira/secure/attachment/12554997/0004-BOOKKEEPER-482-fix-for-findbugs-warnings-in-trunk.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 14:03:44.449,,,no_permission,,,,,,,,,,,,,292331,,,Sat Dec 01 16:21:53 UTC 2012,,,,,,0|i0rx8v:,161030,,,,,,,,27/Nov/12 11:29;ikelly;Issue was a possible null pointer dereference.,"27/Nov/12 14:03;hadoopqa;Testing JIRA BOOKKEEPER-482

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12554997/0004-BOOKKEEPER-482-fix-for-findbugs-warnings-in-trunk.patch"">/jira/secure/attachment/12554997/0004-BOOKKEEPER-482-fix-for-findbugs-warnings-in-trunk.patch</a> downloaded at Tue Nov 27 13:42:33 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/38/","28/Nov/12 18:03;hustlmsp;ah, sorry, I missed this ticket. [~ikelly] As I indicated in BOOKKEEPER-486, the logic in InMemorySubscriptionManager#readSubscription doesn't work correctly. Do you want to correct it in this ticket? or I opened another one to track it?","29/Nov/12 10:31;ikelly;I don't see how the logic is broken in readSubscription past the fact that there's a possible NPE, which my patch fixes.","30/Nov/12 05:17;hustlmsp;{code}
    protected void readSubscriptions(ByteString topic,
                                     Callback<Map<ByteString, InMemorySubscriptionState>> cb, Object ctx) {
        // Since we backed up in-memory information on lostTopic, we can just return that back
        Map<ByteString, InMemorySubscriptionState> topicSubs = top2sub2seqBackup.remove(topic);
{code}

if #readSubscriptions is called twice, the second time would get nothing.

{code}
    protected void readSubscriptionData(ByteString topic,
            ByteString subscriberId, Callback<InMemorySubscriptionState> cb, Object ctx) {
        // Since we backed up in-memory information on lostTopic, we can just return that back
        InMemorySubscriptionState subState = top2sub2seqBackup.get(topic).remove(subscriberId);
{code}

same things as #readSubscriptions. And if readSubscripitonData first and readSubscriptions later, we got subscriptions w/o first read subscription data. 

I think for InMemorySubscriptionManager we need some kind of in memory store rather than just a backup map. What I am thinking, a better solution is to provide an in-memory metadata manager factory. Then InMemorySubscriptionManager is a special instance of MMSubscriptionManager with in-memory metadata manager factory. That would make things easy and clean.","30/Nov/12 15:34;ikelly;This is a lot of work for what is essentially a test component. For the moment, I think we should just fix the findbugs, and then for 4.3.0 we could replace InMemSubManager with a InMemMetadataFactory. What do you think?",30/Nov/12 18:27;hustlmsp;Yes. I feel OK about it. +1 for this patch just focuses on findbugs error. I will create another JIRA to track this issue here.,01/Dec/12 05:33;hustlmsp;committed as r1415920. thanks Ivan.,"01/Dec/12 16:21;hudson;Integrated in bookkeeper-trunk #832 (See [https://builds.apache.org/job/bookkeeper-trunk/832/])
    BOOKKEEPER-482: Precommit is reporting findbugs errors in trunk (ivank via sijie) (Revision 1415920)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix javadoc warnings,BOOKKEEPER-481,12617764,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,27/Nov/12 11:05,13/Feb/13 15:46,14/Mar/19 02:39,30/Nov/12 03:54,,,4.2.0,,,,,,0,,Precommit is reporting javadoc warnings. ,,,,,,,,,,,,,,,,,,,27/Nov/12 11:28;ikelly;0002-BOOKKEEPER-481-Fix-javadoc-warnings.patch;https://issues.apache.org/jira/secure/attachment/12554996/0002-BOOKKEEPER-481-Fix-javadoc-warnings.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 14:25:15.49,,,no_permission,,,,,,,,,,,,,292327,,,Fri Nov 30 04:27:53 UTC 2012,,,,,,0|i0rx7z:,161026,,,,,,,,"27/Nov/12 14:25;hadoopqa;Testing JIRA BOOKKEEPER-481

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12554996/0002-BOOKKEEPER-481-Fix-javadoc-warnings.patch"">/jira/secure/attachment/12554996/0002-BOOKKEEPER-481-Fix-javadoc-warnings.patch</a> downloaded at Tue Nov 27 14:04:03 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/39/",30/Nov/12 03:47;hustlmsp;the patch looks good to me. +1 thanks Ivan.,30/Nov/12 03:54;hustlmsp;committed as r1415491. thanks Ivan.,"30/Nov/12 04:27;hudson;Integrated in bookkeeper-trunk #829 (See [https://builds.apache.org/job/bookkeeper-trunk/829/])
    BOOKKEEPER-481: Fix javadoc warnings (ivank via sijie) (Revision 1415491)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix javac warnings,BOOKKEEPER-480,12617763,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,27/Nov/12 11:05,13/Feb/13 15:47,14/Mar/19 02:39,30/Nov/12 03:57,,,4.2.0,,,,,,0,,Precommit is reporting javac warnings. ,,,,,,,,,,,,,,,,,,,27/Nov/12 11:27;ikelly;0003-BOOKKEEPER-480-Find-pom.xml-warnings.patch;https://issues.apache.org/jira/secure/attachment/12554995/0003-BOOKKEEPER-480-Find-pom.xml-warnings.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 14:46:34.132,,,no_permission,,,,,,,,,,,,,292326,,,Fri Nov 30 04:27:53 UTC 2012,,,,,,0|i0rx7r:,161025,,,,,,,,27/Nov/12 11:27;ikelly;Problem was actually in pom.xml and not in the java code at all. The precommit looks for [WARNING] in the mvn output.,"27/Nov/12 14:46;hadoopqa;Testing JIRA BOOKKEEPER-480

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12554995/0003-BOOKKEEPER-480-Find-pom.xml-warnings.patch"">/jira/secure/attachment/12554995/0003-BOOKKEEPER-480-Find-pom.xml-warnings.patch</a> downloaded at Tue Nov 27 14:25:25 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/40/",30/Nov/12 03:56;hustlmsp;the patch looks good to me. +1,30/Nov/12 03:57;hustlmsp;committed as r1415492. thanks Ivan.,"30/Nov/12 04:27;hudson;Integrated in bookkeeper-trunk #829 (See [https://builds.apache.org/job/bookkeeper-trunk/829/])
    BOOKKEEPER-480: Fix javac warnings (ivank via sijie) (Revision 1415492)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix apache-rat issues in tree,BOOKKEEPER-479,12617762,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,27/Nov/12 11:05,13/Feb/13 15:46,14/Mar/19 02:39,27/Nov/12 14:36,,,4.2.0,,,,,,0,,"On an absolutely clean branch, mvn apache-rat:check fails. There are two test sources without license. Fix this.",,,,,,,,,,,,,,,,,,,27/Nov/12 11:26;ikelly;0001-BOOKKEEPER-479-Fix-apache-rat-check-errors.patch;https://issues.apache.org/jira/secure/attachment/12554994/0001-BOOKKEEPER-479-Fix-apache-rat-check-errors.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 14:36:53.689,,,no_permission,,,,,,,,,,,,,292325,,,Tue Nov 27 16:10:48 UTC 2012,,,,,,0|i0rx7j:,161024,,,,,,,,"27/Nov/12 14:36;fpj;+1, thanks Ivan. Committed revision 1414207.","27/Nov/12 14:47;hadoopqa;Testing JIRA BOOKKEEPER-479

WARNING: Running test-patch on a dirty local svn workspace","27/Nov/12 16:10;hudson;Integrated in bookkeeper-trunk #823 (See [https://builds.apache.org/job/bookkeeper-trunk/823/])
    BOOKKEEPER-479: Fix apache-rat issues in tree (ivank via fpj) (Revision 1414207)

     Result = FAILURE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In ReadOnlyBookieTest, we should wait for the bookie to die before asserting on it",BOOKKEEPER-477,12617455,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,23/Nov/12 16:26,13/Feb/13 15:47,14/Mar/19 02:39,27/Nov/12 15:53,,,4.2.0,,,,,,0,,"Right now we assert immediately, so the bookie thread has no chance to die. We should only assert after giving it a chance.",,,,,,,,,,,,,,,,,,,27/Nov/12 15:42;ikelly;0002-BOOKKEEPER-477-ReadOnlyBookieTest-Give-the-bookie-a-.patch;https://issues.apache.org/jira/secure/attachment/12555018/0002-BOOKKEEPER-477-ReadOnlyBookieTest-Give-the-bookie-a-.patch,23/Nov/12 16:26;ikelly;0002-ReadOnlyBookieTest-Give-the-bookie-a-chance-to-die.patch;https://issues.apache.org/jira/secure/attachment/12554740/0002-ReadOnlyBookieTest-Give-the-bookie-a-chance-to-die.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-27 11:01:41.372,,,no_permission,,,,,,,,,,,,,291896,,,Tue Nov 27 18:33:34 UTC 2012,,,,,,0|i0rhdj:,158458,,,,,,,,"27/Nov/12 11:01;fpj;We might have discussed this in the past, but isn't there perhaps a more reliable way of detecting that a bookie has shut down? Using time is prone to false positives and often increases the time to run tests. ",27/Nov/12 11:01;fpj;Canceling patch until we converge.,"27/Nov/12 11:07;hadoopqa;Testing JIRA BOOKKEEPER-477

WARNING: Running test-patch on a dirty local svn workspace","27/Nov/12 14:20;ikelly;We have a method, Bookie#isAlive(). This is what the patch checks, in a loop. ","27/Nov/12 14:33;fpj;+1, thanks for the clarification.","27/Nov/12 15:16;fpj;btw, the patch doesn't apply cleanly, since it hasn't been generated against the project root. I'll commit it, but it would be good to upload one that applies cleanly.",27/Nov/12 15:42;ikelly;Should apply cleanly now.,"27/Nov/12 15:53;fpj;Committed revision 1414233. Thanks, Ivan.","27/Nov/12 17:27;hudson;Integrated in bookkeeper-trunk #824 (See [https://builds.apache.org/job/bookkeeper-trunk/824/])
    BOOKKEEPER-477: In ReadOnlyBookieTest, we should wait for the bookie to die before asserting on it (ivank via fpj) (Revision 1414233)

     Result = FAILURE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java
","27/Nov/12 18:33;hadoopqa;Testing JIRA BOOKKEEPER-477

WARNING: Running test-patch on a dirty local svn workspace",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much,BOOKKEEPER-475,12617105,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Nov/12 13:28,13/Feb/13 15:46,14/Mar/19 02:39,04/Dec/12 21:16,,,4.2.0,,,,,,0,,"This test exists to detect the case where a bookie is taken down, and the same another bookie is selected to replace it, but the other bookie is already in the ensemble. BOOKKEEPER-106 fixed this, so it shouldn't happen. However we still need to check. We iterate 10 times, but this is a parametered test, so effectively we iterate 40 times. There's 3 possible bookies to select, two of which are already in the ensemble, so a single iteration, if selecting randomly has a 66% chance of selecting a bad bookie. We have to run four times anyhow because it's a parameterized test, giving us a 66*4 % chance of hitting the bug if we only have one iteration. 

Therefore, we should only iterate once. Also, we don't need to write much data. We only care about whats in zk for this test really.
",,,,,,,,,,,,,,,,,,,21/Nov/12 13:36;ikelly;0001-Reduce-amount-of-iteratons-for-testSyncBookieRecover.patch;https://issues.apache.org/jira/secure/attachment/12554496/0001-Reduce-amount-of-iteratons-for-testSyncBookieRecover.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 10:40:33.196,,,no_permission,,,,,,,,,,,,,259305,,,Tue Dec 04 21:16:45 UTC 2012,,,,,,0|i0lo8v:,124578,,,,,,,,"27/Nov/12 10:40;hadoopqa;Testing JIRA BOOKKEEPER-475

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12554496/0001-Reduce-amount-of-iteratons-for-testSyncBookieRecover.patch"">/jira/secure/attachment/12554496/0001-Reduce-amount-of-iteratons-for-testSyncBookieRecover.patch</a> downloaded at Tue Nov 27 10:20:32 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/21/","27/Nov/12 11:29;hadoopqa;Testing JIRA BOOKKEEPER-475

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12554496/0001-Reduce-amount-of-iteratons-for-testSyncBookieRecover.patch"">/jira/secure/attachment/12554496/0001-Reduce-amount-of-iteratons-for-testSyncBookieRecover.patch</a> downloaded at Tue Nov 27 11:10:05 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/27/","04/Dec/12 21:16;fpj;+1, looks good, Ivan. Committed revision 1417190.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieReadWriteTest#testShutdown doesn't make sense,BOOKKEEPER-474,12617080,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Nov/12 10:17,02/May/13 02:29,14/Mar/19 02:39,08/Dec/12 15:15,,,4.2.0,,,,,,0,,"This test was created to catch the BOOKKEEPER-5, which is where we hang due to orphaned netty connections. Netty connections are made when we first send an add entry to the bookie. 

The creates 10000 ledgers, and writes 200 entries to across these (note, this is not 200 each, but 200 across all ledgers). Therefore, a maximum 200 connections could be created. So the test isn't doing what it think it is doing.

The test takes between 4 & 7 minutes (most of this time creating unused ledgers) on jenkins. It is then run 4 times as BookieReadWriteTest is a Parameterized test.

This adds up to 28 minutes to a build on jenkins. This test should take no longer than 30 seconds.",,,,,,,,,,,,,,,,,,BOOKKEEPER-485,21/Nov/12 11:09;ikelly;0001-Moved-testShutdown-out-of-BookieReadWriteTest-and-ma.patch;https://issues.apache.org/jira/secure/attachment/12554486/0001-Moved-testShutdown-out-of-BookieReadWriteTest-and-ma.patch,30/Nov/12 19:11;ikelly;0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch;https://issues.apache.org/jira/secure/attachment/12555549/0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch,29/Nov/12 12:27;ikelly;0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch;https://issues.apache.org/jira/secure/attachment/12555346/0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-11-27 11:35:31.313,,,no_permission,,,,,,,,,,,,,259014,,,Sun Dec 09 07:12:57 UTC 2012,,,,,,0|i0l8lz:,122045,,,,,,,,"27/Nov/12 11:35;fpj;Hi Ivan, I understand what you trying to do with a rewrite of the test, but I'm not being able to understand exactly what it is supposed to do.

I assume that the bug should occur when closing the ledger handles. If so, when we close the ledger, there must be some path that leads to closing bookie channels so that we can exercise the bug, no? I checked the code of asyncCloseInternal() and I couldn't find it.","27/Nov/12 11:36;fpj;Also, how do we even determine the necessary number of ledgers and timeout value? There is a bit of guess work here I guess.","27/Nov/12 11:49;hadoopqa;Testing JIRA BOOKKEEPER-474

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12554486/0001-Moved-testShutdown-out-of-BookieReadWriteTest-and-ma.patch"">/jira/secure/attachment/12554486/0001-Moved-testShutdown-out-of-BookieReadWriteTest-and-ma.patch</a> downloaded at Tue Nov 27 11:29:54 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 386
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/28/","29/Nov/12 12:27;ikelly;Closing the ledgers isn't even necessary here, what the original testShutdown does, is that it tries to trigger a race in PerChannelBookieClient but having many LedgerHandles attempt addEntry simultaneously, which would cause more than one PerChannelBookieClient to be created in BookieClient for a single address, both would have connect() called on them but all but one would be orphaned after BookieClient tried to putIfAbsent into its channel map. Its a very blunt brute force way of triggering it. 

https://github.com/apache/bookkeeper/commit/00f25f5622e69f063202f7bd46f09ad1d708983d

BOOKKEEPER-5 didn't fix it fully. Races could still occur between connect calls, but BOOKKEEPER-59 fixed that.

I'm attaching a new patch which focuses on the race directly, and removes testShutdown() completely. It depends on BOOKKEEPER-485","29/Nov/12 12:33;hadoopqa;Testing JIRA BOOKKEEPER-474

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555346/0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch"">/jira/secure/attachment/12555346/0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch</a> downloaded at Thu Nov 29 12:31:17 UTC 2012

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","30/Nov/12 16:40;fpj;I'm not sure why the patch didn't apply, but it looks good to me. My only comment is that I think the test of BOOKKEEPER-485 and the test in this patch should be perhaps in the class for organization purposes. They are related.",30/Nov/12 16:40;fpj;Cancelling so that we can upload a patch that applies.,30/Nov/12 18:53;ikelly;The patch doesn't apply because it relies on BOOKKEEPER-485,30/Nov/12 19:11;ikelly;new patch has full URL for issue.,"30/Nov/12 19:37;hadoopqa;Testing JIRA BOOKKEEPER-474

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555549/0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch"">/jira/secure/attachment/12555549/0002-BOOKKEEPER-474-Remove-testShutdown-replace-with-more.patch</a> downloaded at Fri Nov 30 19:35:16 UTC 2012

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",01/Dec/12 14:06;fpj;Resubmitting now that BOOKKEEPER-485 is in.,"08/Dec/12 15:15;fpj;+1, thanks, Ivan. Committed revision 1418685.","09/Dec/12 07:12;hudson;Integrated in bookkeeper-trunk #845 (See [https://builds.apache.org/job/bookkeeper-trunk/845/])
    BOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj) (Revision 1418685)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add scripts for preCommit testing,BOOKKEEPER-471,12616725,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Nov/12 12:28,02/May/13 02:29,14/Mar/19 02:39,27/Nov/12 09:52,,,4.2.0,,,,,,0,,We should have jenkins test patches automatically before submission. This JIRA is to set that up.,,,,,,,,,,,,,,,,,,BOOKKEEPER-467,23/Nov/12 11:05;ikelly;0001-BOOKKEEPER-471-Add-scripts-for-preCommit-testing.patch;https://issues.apache.org/jira/secure/attachment/12554722/0001-BOOKKEEPER-471-Add-scripts-for-preCommit-testing.patch,22/Nov/12 17:04;ikelly;0001-BOOKKEEPER-471-Add-scripts-for-preCommit-testing.patch;https://issues.apache.org/jira/secure/attachment/12554687/0001-BOOKKEEPER-471-Add-scripts-for-preCommit-testing.patch,20/Nov/12 16:20;ikelly;0001-BOOKKEEPER-471-Add-scripts-for-preCommit-testing.patch;https://issues.apache.org/jira/secure/attachment/12554356/0001-BOOKKEEPER-471-Add-scripts-for-preCommit-testing.patch,19/Nov/12 17:12;ikelly;TriggerFindbugsFail.patch;https://issues.apache.org/jira/secure/attachment/12554195/TriggerFindbugsFail.patch,19/Nov/12 14:38;ikelly;TriggerFindbugsFail.patch;https://issues.apache.org/jira/secure/attachment/12554173/TriggerFindbugsFail.patch,19/Nov/12 12:30;ikelly;TriggerFindbugsFail.patch;https://issues.apache.org/jira/secure/attachment/12554167/TriggerFindbugsFail.patch,19/Nov/12 19:27;ikelly;failTests.patch;https://issues.apache.org/jira/secure/attachment/12554217/failTests.patch,19/Nov/12 15:11;ikelly;failTests.patch;https://issues.apache.org/jira/secure/attachment/12554175/failTests.patch,,,,,,,,,8.0,,,,,,,,,,,,,,,,,,,2012-11-19 12:37:03.838,,,no_permission,,,,,,,,,,,,,258583,,,Tue Nov 27 11:27:09 UTC 2012,,,,,,0|i0kv67:,119868,,,,,,,,"19/Nov/12 12:32;ikelly;Not really patch available, I'm testing scripts which need patches attached and marked as patch available before it can pull them.",19/Nov/12 12:37;umamaheswararao;Big +1 for this task. Thanks a lot Ivan for adding the scripts.,"19/Nov/12 14:06;fpj;Same here, +1 for getting this going, Ivan!","19/Nov/12 16:52;hadoopqa;Testing JIRA BOOKKEEPER-471

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 16 new RAT warning(s)
.    {color:red}WARNING: the current HEAD has 7 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:red}-1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/8/","19/Nov/12 17:44;hadoopqa;Testing JIRA BOOKKEEPER-471

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 16 new RAT warning(s)
.    {color:red}WARNING: the current HEAD has 7 RAT warning(s), they should be addressed ASAP{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/9/","19/Nov/12 18:33;hadoopqa;Testing JIRA BOOKKEEPER-471

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 15 javac warning(s)
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 1 new Findbugs warning(s) in module(s) [ bookkeeper-server]

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/10/","19/Nov/12 19:34;hadoopqa;Testing JIRA BOOKKEEPER-471

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 15 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/11/","19/Nov/12 20:30;hadoopqa;Testing JIRA BOOKKEEPER-471

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/12/","19/Nov/12 22:34;hadoopqa;Testing JIRA BOOKKEEPER-471

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:red}-1 TESTS{color}
.    Tests run: 659
.    Tests failed: 204
.    Tests errors: 357

.    The patch failed the following testcases:

.      testClose[0](org.apache.bookkeeper.test.CloseTest)
.      testCloseByOthers[0](org.apache.bookkeeper.test.CloseTest)
.      testClose[1](org.apache.bookkeeper.test.CloseTest)
.      testCloseByOthers[1](org.apache.bookkeeper.test.CloseTest)
.      testCleanStart(org.apache.bookkeeper.bookie.CookieTest)
.      testBadJournalCookie(org.apache.bookkeeper.bookie.CookieTest)
.      testDirectoryMissing(org.apache.bookkeeper.bookie.CookieTest)
.      testDirectoryAdded(org.apache.bookkeeper.bookie.CookieTest)
.      testDirectoryCleared(org.apache.bookkeeper.bookie.CookieTest)
.      testBookiePortChanged(org.apache.bookkeeper.bookie.CookieTest)
.      testNewBookieStartingWithAnotherBookiesPort(org.apache.bookkeeper.bookie.CookieTest)
.      testVerifyCookieWithFormat(org.apache.bookkeeper.bookie.CookieTest)
.      testV2data(org.apache.bookkeeper.bookie.CookieTest)
.      testV1data(org.apache.bookkeeper.bookie.CookieTest)
.      testAsyncBK1[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testSimpleLedger[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testRestartBookie[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testMultipleBookieFailures[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testToggleLedgerReplication[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testSimpleLedger[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testRestartBookie[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testMultipleBookieFailures[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testToggleLedgerReplication[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testConstructionZkDelay[0](org.apache.bookkeeper.client.BookKeeperTest)
.      testConstructionNotConnectedExplicitZk[0](org.apache.bookkeeper.client.BookKeeperTest)
.      testBookkeeperPassword[0](org.apache.bookkeeper.client.BookKeeperTest)
.      testConstructionZkDelay[1](org.apache.bookkeeper.client.BookKeeperTest)
.      testConstructionNotConnectedExplicitZk[1](org.apache.bookkeeper.client.BookKeeperTest)
.      testBookkeeperPassword[1](org.apache.bookkeeper.client.BookKeeperTest)
.      testLedgerRecovery[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecoveryOne[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecovery[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithWrongPassword[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithNotEnoughBookies[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecovery[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecoveryOne[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecovery[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithWrongPassword[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithNotEnoughBookies[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testBasicInteraction(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testLocking(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testMarkingAsReplicated(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testRelease(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testManyFailures(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      test2reportSame(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testMultipleManagersShouldBeAbleToTakeAndReleaseLock(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testMarkSimilarMissingReplica(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testManyFailuresInAnEnsemble(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testDisableLedegerReplication(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testEnableLedegerReplication(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testHierarchyCleanup(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testHierarchyCleanupInterference(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testWithMultipleBookieFailuresInLastEnsemble[0](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[0](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testWithMultipleBookieFailuresInLastEnsemble[1](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[1](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testWithMultipleBookieFailuresInLastEnsemble[2](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[2](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testWithMultipleBookieFailuresInLastEnsemble[3](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[3](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testSimpleBookieLedgerMapping[0](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testWithoutZookeeper[0](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testEnsembleReformation[0](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testSimpleBookieLedgerMapping[1](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testWithoutZookeeper[1](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testEnsembleReformation[1](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testLedgerDelete[0](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testLedgerDeleteWithExistingEntryLogs[0](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testLedgerDelete[1](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testLedgerDeleteWithExistingEntryLogs[1](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testConditionalSet[0](org.apache.bookkeeper.test.ConditionalSetTest)
.      testConditionalSet[1](org.apache.bookkeeper.test.ConditionalSetTest)
.      testOpenException[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testOpenException[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testOpenException[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testOpenException[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testBasicFencing[0](org.apache.bookkeeper.client.TestFencing)
.      testManyOpenParallel[0](org.apache.bookkeeper.client.TestFencing)
.      testNoRecoveryOpen[0](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery[0](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery2[0](org.apache.bookkeeper.client.TestFencing)
.      testFencingBadPassword[0](org.apache.bookkeeper.client.TestFencing)
.      testBasicFencing[1](org.apache.bookkeeper.client.TestFencing)
.      testManyOpenParallel[1](org.apache.bookkeeper.client.TestFencing)
.      testNoRecoveryOpen[1](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery[1](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery2[1](org.apache.bookkeeper.client.TestFencing)
.      testFencingBadPassword[1](org.apache.bookkeeper.client.TestFencing)
.      testAsyncCreateClose[0](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testAsyncCreateClose[1](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testAsyncCreateClose[2](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testAsyncCreateClose[3](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testRWShouldReplicateFragmentsToTargetBookie[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplication[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testMultipleLedgerReplicationWithReplicationWorker[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsUR[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateFragmentsToTargetBookie[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplication[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testMultipleLedgerReplicationWithReplicationWorker[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsUR[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testOldCookieAccessingNewCluster(org.apache.bookkeeper.test.TestBackwardCompat)
.      testCompat400(org.apache.bookkeeper.test.TestBackwardCompat)
.      testCompat410(org.apache.bookkeeper.test.TestBackwardCompat)
.      testBookieRegistration(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testRegNodeExistsAfterSessionTimeOut(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testDuplicateBookieServerStartup(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testStartBookieWithoutZKServer(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testUpgradeV1toCurrent(org.apache.bookkeeper.bookie.UpgradeTest)
.      testUpgradeV2toCurrent(org.apache.bookkeeper.bookie.UpgradeTest)
.      testUpgradeCurrent(org.apache.bookkeeper.bookie.UpgradeTest)
.      testCommandLine(org.apache.bookkeeper.bookie.UpgradeTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/13/","20/Nov/12 01:37;hadoopqa;Testing JIRA BOOKKEEPER-471

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:red}-1 TESTS{color}
.    Tests run: 659
.    Tests failed: 204
.    Tests errors: 357

.    The patch failed the following testcases:

.      testClose[0](org.apache.bookkeeper.test.CloseTest)
.      testCloseByOthers[0](org.apache.bookkeeper.test.CloseTest)
.      testClose[1](org.apache.bookkeeper.test.CloseTest)
.      testCloseByOthers[1](org.apache.bookkeeper.test.CloseTest)
.      testCleanStart(org.apache.bookkeeper.bookie.CookieTest)
.      testBadJournalCookie(org.apache.bookkeeper.bookie.CookieTest)
.      testDirectoryMissing(org.apache.bookkeeper.bookie.CookieTest)
.      testDirectoryAdded(org.apache.bookkeeper.bookie.CookieTest)
.      testDirectoryCleared(org.apache.bookkeeper.bookie.CookieTest)
.      testBookiePortChanged(org.apache.bookkeeper.bookie.CookieTest)
.      testNewBookieStartingWithAnotherBookiesPort(org.apache.bookkeeper.bookie.CookieTest)
.      testVerifyCookieWithFormat(org.apache.bookkeeper.bookie.CookieTest)
.      testV2data(org.apache.bookkeeper.bookie.CookieTest)
.      testV1data(org.apache.bookkeeper.bookie.CookieTest)
.      testAsyncBK1[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[0](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[1](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[2](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK1[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK2[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK3[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testAsyncBK4[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testBookieRecovery[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerNoRecoveryOpenAfterBKCrashed[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testLedgerOpenAfterBKCrashed[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testReadLastConfirmedOp[3](org.apache.bookkeeper.test.BookieFailureTest)
.      testSimpleLedger[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testRestartBookie[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testMultipleBookieFailures[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testToggleLedgerReplication[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testSimpleLedger[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testRestartBookie[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testMultipleBookieFailures[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testToggleLedgerReplication[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testConstructionZkDelay[0](org.apache.bookkeeper.client.BookKeeperTest)
.      testConstructionNotConnectedExplicitZk[0](org.apache.bookkeeper.client.BookKeeperTest)
.      testBookkeeperPassword[0](org.apache.bookkeeper.client.BookKeeperTest)
.      testConstructionZkDelay[1](org.apache.bookkeeper.client.BookKeeperTest)
.      testConstructionNotConnectedExplicitZk[1](org.apache.bookkeeper.client.BookKeeperTest)
.      testBookkeeperPassword[1](org.apache.bookkeeper.client.BookKeeperTest)
.      testLedgerRecovery[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecoveryOne[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecovery[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithWrongPassword[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithNotEnoughBookies[0](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecovery[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecoveryOne[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testEmptyLedgerRecovery[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithWrongPassword[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testLedgerRecoveryWithNotEnoughBookies[1](org.apache.bookkeeper.test.LedgerRecoveryTest)
.      testBasicInteraction(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testLocking(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testMarkingAsReplicated(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testRelease(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testManyFailures(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      test2reportSame(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testMultipleManagersShouldBeAbleToTakeAndReleaseLock(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testMarkSimilarMissingReplica(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testManyFailuresInAnEnsemble(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testDisableLedegerReplication(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testEnableLedegerReplication(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testHierarchyCleanup(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testHierarchyCleanupInterference(org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager)
.      testWithMultipleBookieFailuresInLastEnsemble[0](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[0](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testWithMultipleBookieFailuresInLastEnsemble[1](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[1](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testWithMultipleBookieFailuresInLastEnsemble[2](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[2](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testWithMultipleBookieFailuresInLastEnsemble[3](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[3](org.apache.bookkeeper.client.BookieWriteLedgerTest)
.      testSimpleBookieLedgerMapping[0](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testWithoutZookeeper[0](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testEnsembleReformation[0](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testSimpleBookieLedgerMapping[1](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testWithoutZookeeper[1](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testEnsembleReformation[1](org.apache.bookkeeper.replication.BookieLedgerIndexTest)
.      testLedgerDelete[0](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testLedgerDeleteWithExistingEntryLogs[0](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testLedgerDelete[1](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testLedgerDeleteWithExistingEntryLogs[1](org.apache.bookkeeper.test.LedgerDeleteTest)
.      testConditionalSet[0](org.apache.bookkeeper.test.ConditionalSetTest)
.      testConditionalSet[1](org.apache.bookkeeper.test.ConditionalSetTest)
.      testOpenException[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[0](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testOpenException[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[1](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testOpenException[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[2](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testOpenException[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testStreamingClients[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteRangeAsyncSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncSingleClientThrottle[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testSyncReadAsyncWriteStringsSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteSyncSingleClient[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteZero[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testMultiLedger[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadWriteAsyncLength[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testShutdown[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedger[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerOpenOnce[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testReadFromOpenLedgerZeroAndOne[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testLastConfirmedAdd[3](org.apache.bookkeeper.test.BookieReadWriteTest)
.      testBasicFencing[0](org.apache.bookkeeper.client.TestFencing)
.      testManyOpenParallel[0](org.apache.bookkeeper.client.TestFencing)
.      testNoRecoveryOpen[0](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery[0](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery2[0](org.apache.bookkeeper.client.TestFencing)
.      testFencingBadPassword[0](org.apache.bookkeeper.client.TestFencing)
.      testBasicFencing[1](org.apache.bookkeeper.client.TestFencing)
.      testManyOpenParallel[1](org.apache.bookkeeper.client.TestFencing)
.      testNoRecoveryOpen[1](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery[1](org.apache.bookkeeper.client.TestFencing)
.      testFencingInteractionWithBookieRecovery2[1](org.apache.bookkeeper.client.TestFencing)
.      testFencingBadPassword[1](org.apache.bookkeeper.client.TestFencing)
.      testAsyncCreateClose[0](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testAsyncCreateClose[1](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testAsyncCreateClose[2](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testAsyncCreateClose[3](org.apache.bookkeeper.test.AsyncLedgerOpsTest)
.      testRWShouldReplicateFragmentsToTargetBookie[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplication[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testMultipleLedgerReplicationWithReplicationWorker[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsUR[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR[0](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateFragmentsToTargetBookie[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplication[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testMultipleLedgerReplicationWithReplicationWorker[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsUR[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR[1](org.apache.bookkeeper.replication.TestReplicationWorker)
.      testOldCookieAccessingNewCluster(org.apache.bookkeeper.test.TestBackwardCompat)
.      testCompat400(org.apache.bookkeeper.test.TestBackwardCompat)
.      testCompat410(org.apache.bookkeeper.test.TestBackwardCompat)
.      testBookieRegistration(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testRegNodeExistsAfterSessionTimeOut(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testDuplicateBookieServerStartup(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testStartBookieWithoutZKServer(org.apache.bookkeeper.bookie.BookieInitializationTest)
.      testUpgradeV1toCurrent(org.apache.bookkeeper.bookie.UpgradeTest)
.      testUpgradeV2toCurrent(org.apache.bookkeeper.bookie.UpgradeTest)
.      testUpgradeCurrent(org.apache.bookkeeper.bookie.UpgradeTest)
.      testCommandLine(org.apache.bookkeeper.bookie.UpgradeTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/14/",20/Nov/12 16:20;ikelly;This is the patch with the actual patches. Based heavily on oozie patches. The scripts need to be executable.,"20/Nov/12 16:22;ikelly;Adding dependency on BOOKKEEPER-467, because otherwise tests are very hit or miss.",22/Nov/12 17:04;ikelly;Did some cleanup on the scripts.,"22/Nov/12 18:23;umamaheswararao;Hi Ivan, Thanks a lot for this Work.

one suggestion:

{code}
Testing JIRA BOOKKEEPER-471
{code}

Instead of just displaying JIRA ID, can we display the patch name on which the current results pasted? (Hadoop displays like that way)
So, that we can see which results for which file if at all Jenkins picks multiple patches one another. (Generally picks latest one), that will be useful when you look back the history of results in JIRA.","23/Nov/12 11:05;ikelly;Ah, good catch Uma, new patch addresses this.","26/Nov/12 19:20;umamaheswararao;Thanks a lot Ivan for the update! 
+1 for pushing this in. Nice work.",27/Nov/12 09:52;ikelly;Committed revision 1414044. Thanks for reviewing Uma.,"27/Nov/12 11:27;hudson;Integrated in bookkeeper-trunk #821 (See [https://builds.apache.org/job/bookkeeper-trunk/821/])
    BOOKKEEPER-471: Add scripts for preCommit testing (ivank) (Revision 1414044)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bin
* /zookeeper/bookkeeper/trunk/bin/find-new-patch-available-jiras
* /zookeeper/bookkeeper/trunk/bin/test-patch
* /zookeeper/bookkeeper/trunk/bin/test-patch-00-clean
* /zookeeper/bookkeeper/trunk/bin/test-patch-05-patch-raw-analysis
* /zookeeper/bookkeeper/trunk/bin/test-patch-08-rat
* /zookeeper/bookkeeper/trunk/bin/test-patch-09-javadoc
* /zookeeper/bookkeeper/trunk/bin/test-patch-10-compile
* /zookeeper/bookkeeper/trunk/bin/test-patch-11-findbugs
* /zookeeper/bookkeeper/trunk/bin/test-patch-20-tests
* /zookeeper/bookkeeper/trunk/bin/test-patch-30-dist
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible infinite loop in simple.SubscribeReconnectCallback,BOOKKEEPER-470,12616714,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Nov/12 10:59,13/Feb/13 15:47,14/Mar/19 02:39,04/Dec/12 17:28,,,4.2.0,,,,,,0,,"SubscribeReconnectCallback#operationFailed calls
SubscribeReconnectCallback#retrySubscribeRequest calls
channelManager#submitOpAfterDelay calls
SubscribeReconnectCallback#operationFailed (if closed is true).",,,,,,,,,,,,,,,,,,,19/Nov/12 11:04;ikelly;0005-Remove-infinite-loop-from-SubscribeReconnectCallback.patch;https://issues.apache.org/jira/secure/attachment/12554155/0005-Remove-infinite-loop-from-SubscribeReconnectCallback.patch,04/Dec/12 02:54;hustlmsp;BOOKKEEPER-470.diff;https://issues.apache.org/jira/secure/attachment/12555886/BOOKKEEPER-470.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-27 02:26:07.412,,,no_permission,,,,,,,,,,,,,258571,,,Tue Dec 04 17:28:39 UTC 2012,,,,,,0|i0kv13:,119845,,,,,,,,"19/Nov/12 11:04;ikelly;This is a preliminary patch, though I don't know if it's sufficient. [~hustlmsp] Could you take a look at this when you get a chance?","27/Nov/12 02:26;hustlmsp;I think the behavior before BOOKKEEPER-70 is that we should do resubscribe until succeed if resubscribe is enabled. If you stopped resubscribing, the subscriber got nothing notified about its subscription is stopped unless it registered listener about it. So I think we should keep this behavior but log some critical messages after a specific retires.","03/Dec/12 10:10;ikelly;Resubscribe until success isn't a problem. The problem here is that there's a tight loop, so this will overflow the stack.","04/Dec/12 02:54;hustlmsp;added a patch to stop retrying resubscribe if the channel manager is closed. after this patch, it would also resolve the issue described in BOOKKEEPER-489.",04/Dec/12 16:28;ikelly;+1 on the change. will test and push it in.,04/Dec/12 17:28;ikelly;Committed as r1417046. Thanks Sijie.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove System.out.println from TestLedgerManager,BOOKKEEPER-469,12616713,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Nov/12 10:55,13/Feb/13 15:46,14/Mar/19 02:39,10/Dec/12 09:59,,,4.2.0,,,,,,0,,TestLedgerManager has a System.out.println in it. Tests should only ever go through slf4j.,,,,,,,,,,,,,,,,,,,07/Dec/12 11:59;ikelly;0001-BOOKKEEPER-469-Remove-System.out.println-from-tests.patch;https://issues.apache.org/jira/secure/attachment/12559847/0001-BOOKKEEPER-469-Remove-System.out.println-from-tests.patch,19/Nov/12 11:02;ikelly;0004-Remove-System.out.println-from-tests.patch;https://issues.apache.org/jira/secure/attachment/12554153/0004-Remove-System.out.println-from-tests.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-27 11:41:31.618,,,no_permission,,,,,,,,,,,,,258570,,,Mon Dec 10 11:38:56 UTC 2012,,,,,,0|i0kuzz:,119840,,,,,,,,"27/Nov/12 11:41;fpj;This patch is trivial. The only comment I have is that in my understanding of the behavior of assertTrue, we won't be logging the exception if it is not what we expected. It might be a good idea to log it in the case the assertion fails. Otherwise it is great to remove the System.out.println statement.","27/Nov/12 11:52;hadoopqa;Testing JIRA BOOKKEEPER-469

WARNING: Running test-patch on a dirty local svn workspace",07/Dec/12 19:02;hustlmsp;this fix is quite straightforward. +1 thanks Ivan.,"07/Dec/12 20:17;hadoopqa;Testing JIRA BOOKKEEPER-469


Patch [0001-BOOKKEEPER-469-Remove-System.out.println-from-tests.patch|https://issues.apache.org/jira/secure/attachment/12559847/0001-BOOKKEEPER-469-Remove-System.out.println-from-tests.patch] downloaded at Fri Dec  7 19:57:01 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 393
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/84/","09/Dec/12 20:03;hustlmsp;[~fpj] Could you take a look at the new patch, since you are in the thread? If you are OK with the patch, I think it is ready to be in :-)","10/Dec/12 09:59;fpj;+1, thanks, Ivan. Committed revision 1419306.","10/Dec/12 11:38;hudson;Integrated in bookkeeper-trunk #847 (See [https://builds.apache.org/job/bookkeeper-trunk/847/])
    BOOKKEEPER-469: Remove System.out.println from TestLedgerManager (ivank via fpj) (Revision 1419306)

     Result = UNSTABLE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove <echo> from protobuf generation in hedwig,BOOKKEEPER-468,12616712,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Nov/12 10:54,13/Feb/13 15:46,14/Mar/19 02:39,21/Nov/12 09:32,,,4.2.0,,,,,,0,,There's some debugging <echo> tags in the pom.xml script for generating the protobuf scripts. They should be removed.,,,,,,,,,,,,,,,,,,,19/Nov/12 11:02;ikelly;0003-Remove-echo-from-protobuf-generation.patch;https://issues.apache.org/jira/secure/attachment/12554152/0003-Remove-echo-from-protobuf-generation.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-19 19:05:54.623,,,no_permission,,,,,,,,,,,,,258569,,,Wed Nov 21 10:08:30 UTC 2012,,,,,,0|i0kuzj:,119838,,,,,,,,19/Nov/12 19:05;yx3zhu@gmail.com;Looks good.,21/Nov/12 09:32;ikelly;Committed as r1412025. Thanks for looking at this Yixue.,"21/Nov/12 10:08;hudson;Integrated in bookkeeper-trunk #808 (See [https://builds.apache.org/job/bookkeeper-trunk/808/])
    BOOKKEEPER-468: Remove <echo> from protobuf generation in hedwig (ivank) (Revision 1412025)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-protocol/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allocate ports for testing dynamically,BOOKKEEPER-467,12616711,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Nov/12 10:53,02/May/13 02:29,14/Mar/19 02:39,23/Nov/12 10:51,,,4.2.0,,,,,,1,,"We're getting a lot of failures in jenkins because we use hardcoded ports. If another build is using these ports (jenkins runs builds in parallel), we get a failure. The ZooKeeper port is particularly bad as a lot of apache projects use zookeeper, and therefore use it for testing.",,,,,,,,,,,,,,,,,,BOOKKEEPER-466,22/Nov/12 17:21;ikelly;0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch;https://issues.apache.org/jira/secure/attachment/12554689/0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch,21/Nov/12 16:24;ikelly;0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch;https://issues.apache.org/jira/secure/attachment/12554520/0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch,21/Nov/12 15:44;ikelly;0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch;https://issues.apache.org/jira/secure/attachment/12554513/0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch,21/Nov/12 14:07;ikelly;0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch;https://issues.apache.org/jira/secure/attachment/12554498/0001-Allocate-ports-for-testing-dynamically-rather-than-h.patch,19/Nov/12 11:01;ikelly;0002-Allocate-ports-for-testing-dynamically-rather-than-h.patch;https://issues.apache.org/jira/secure/attachment/12554151/0002-Allocate-ports-for-testing-dynamically-rather-than-h.patch,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-11-19 13:59:39.308,,,no_permission,,,,,,,,,,,,,258568,,,Fri Nov 23 13:21:46 UTC 2012,,,,,,0|i0kuzb:,119837,,,,,,,,"19/Nov/12 11:02;ikelly;The patch is pretty straightforward. There's a portManager which has a counter. It increments nextPort and checks that it's available. Hedwig was using the default port a lot, so I've had to add ClientConfiguration during client creation.","19/Nov/12 13:59;fpj;Minor issue, when I ran mvn install:

{noformat}
bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java:[83,54] cannot find symbol
[ERROR] symbol  : variable ZooKeeperDefaultPort
[ERROR] location: class org.apache.bookkeeper.test.ZooKeeperUtil
[ERROR] -> [Help 1]
{noformat}","20/Nov/12 09:40;hadoopqa;Testing JIRA BOOKKEEPER-467

Cleaning local git workspace","20/Nov/12 09:44;hadoopqa;Testing JIRA BOOKKEEPER-467

Cleaning local git workspace",20/Nov/12 09:48;ikelly;That failure is because it needs BOOKKEEPER-466 applied first.,"21/Nov/12 11:42;hadoopqa;Testing JIRA BOOKKEEPER-467

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 28 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:red}-1 TESTS{color}
.    Tests run: 409
.    Tests failed: 1
.    Tests errors: 1

.    The patch failed the following testcases:

.      testReadFromOpenLedgerOpenOnce[2](org.apache.bookkeeper.test.BookieReadWriteTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/17/","21/Nov/12 14:26;hadoopqa;Testing JIRA BOOKKEEPER-467

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 29 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/18/","21/Nov/12 14:38;fpj;The patch looks good to me overall, although it didn't apply cleanly. The last update of the file for some reason gave me a conflict and it might be due to some extra characters at the end, I'm not sure. ",21/Nov/12 15:44;ikelly;Rebased to latest trunk. ,"21/Nov/12 15:47;ikelly;[~fpj] you applying with eclipse or patch? I would assume they'd act the same, though they haven't in the past.","21/Nov/12 16:00;fpj;If I remove

{noformat}
-- 
1.7.5.4
{noformat}

it applies fine. That's confusing eclipse at least.",21/Nov/12 16:24;ikelly;git format-patch was adding a signature. Fixed now.,"22/Nov/12 17:21;ikelly;New patch fixes an issue in benchmark tests, where it was using the default zk (localhost:2181)
","22/Nov/12 21:36;fpj;+1, looks good.","23/Nov/12 10:51;ikelly;Committed as r1412818, thanks for the reviews Flavio.","23/Nov/12 13:21;hudson;Integrated in bookkeeper-trunk #813 (See [https://builds.apache.org/job/bookkeeper-trunk/813/])
    BOOKKEEPER-467: Allocate ports for testing dynamically (ivank) (Revision 1412818)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/zookeeper/ZooKeeperTestBase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZooKeeper test utility sets the port number as the tickTime,BOOKKEEPER-466,12616710,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Nov/12 10:51,02/May/13 02:29,14/Mar/19 02:39,21/Nov/12 11:24,,,4.2.0,,,,,,0,,"This causes issues if the zookeeper port, is very high, as the minSessionTimeout is 2*tickTime by default. ",,,,,,,,,,,,,,,,,,,20/Nov/12 15:34;ikelly;0001-Set-tickTime-correctly-for-ZKTester.patch;https://issues.apache.org/jira/secure/attachment/12554353/0001-Set-tickTime-correctly-for-ZKTester.patch,19/Nov/12 11:00;ikelly;0001-Set-tickTime-correctly-for-ZKTester.patch;https://issues.apache.org/jira/secure/attachment/12554150/0001-Set-tickTime-correctly-for-ZKTester.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-19 12:05:05.596,,,no_permission,,,,,,,,,,,,,258567,,,Wed Nov 21 11:50:38 UTC 2012,,,,,,0|i0kuz3:,119836,,,,,,,,"19/Nov/12 12:05;fpj;This is a funny one... Are you setting it low to force it to go with 2*tickTime? It might be a better idea to raise the value to something like 10k. Otherwise, the patch is good.
","19/Nov/12 12:27;ikelly;I'm setting it low, so that tests are able to choose their own session timeouts without the min timeout interfering. With 10k, min session timeout would be 20k which is too long for some tests, BookieZKExpireTest. ","19/Nov/12 14:10;fpj;In this case, what do you think of setting it to zero to make it clear that we are really going for the minimum, 2*tickTime?","20/Nov/12 09:37;ikelly;Im reluctant to set to 0, as a 0 tickTime makes no sense. If tickTime is 0, how many ticks happen per second? My guess is that zookeeper will fall over with this. I don't think we ever set sessionTimeout less than 3000. In any case, the real fix here is just not to use the port number as the tickTime which is very unpredictable.","20/Nov/12 11:09;fpj;The session timeout will the largest value between the parameter value for the zookeeper constructor or 2* tickTime. If you set the construction parameter to 0, it will be necessarily 2*tickTime.

Check it here: http://zookeeper.apache.org/doc/r3.4.5/zookeeperProgrammers.html","20/Nov/12 11:28;ikelly;https://github.com/apache/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java#L194

It's tickTime that we're setting here, not minSessionTime. What was happening was that the port number was being set as the tickTime, which then caused the minSessionTime to be too big.","20/Nov/12 11:57;fpj;Ah, I haven't read your patch correctly. Is there any reason why you don't want to set to 3000? If not, then I suggest we have a larger value, like 3000 or even 10000. ",20/Nov/12 15:34;ikelly;New patch uses DEFAULT_TICK_TIME as defined in ZooKeeperServer. It is 3000. 10000 would have been way too high.,20/Nov/12 16:44;yx3zhu@gmail.com;Looks good.,"21/Nov/12 10:14;fpj;+1, looks good.",21/Nov/12 11:24;ikelly;Committed as r1412061,"21/Nov/12 11:50;hudson;Integrated in bookkeeper-trunk #809 (See [https://builds.apache.org/job/bookkeeper-trunk/809/])
    BOOKKEEPER-466: ZooKeeper test utility sets the port number as the tickTime (ivank) (Revision 1412061)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CreateNewLog may overwrite lastLogId with smaller value ,BOOKKEEPER-465,12616022,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,yx3zhu@gmail.com,yx3zhu@gmail.com,yx3zhu@gmail.com,14/Nov/12 05:51,13/Feb/13 15:46,14/Mar/19 02:39,10/Dec/12 10:04,4.2.0,,4.2.0,,,,,,0,patch,"In createNewLog(), only one directory is searched to check for duplicate log id.
Then the id is used to overwrite lastLogId.

It looks like regression from BOOKKEEPER-345. 

     // It would better not to overwrite existing entry log files
    File newLogFile = null;
        do {
            String logFileName = Long.toHexString(++logId) + "".log"";
            File dir = ledgerDirsManager.pickRandomWritableDir();
            newLogFile = new File(dir, logFileName);
            currentDir = dir;
            if (newLogFile.exists()) {
                LOG.warn(""Found existed entry log "" + newLogFile
                        + "" when trying to create it as a new log."");
                newLogFile = null;
                continue;
            }
        } while (newLogFile == null);",,,,,,,,,,,,,,,,,,,09/Dec/12 09:30;fpj;BOOKKEEPER-465.patch;https://issues.apache.org/jira/secure/attachment/12560064/BOOKKEEPER-465.patch,07/Dec/12 02:06;yx3zhu@gmail.com;PortNewLogFile.patch;https://issues.apache.org/jira/secure/attachment/12559791/PortNewLogFile.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-16 18:38:34.289,,,no_permission,,,,,,,,,,,,,257635,,,Mon Dec 10 12:55:52 UTC 2012,,,,,,0|i0k3pj:,115418,,,,,,,,16/Nov/12 18:38;ikelly;Marking as blocker for 4.2.0. ,"06/Dec/12 15:13;fpj;[~yx3zhu@gmail.com] I was wondering if there is any progress here, since this is a blocker. Do you think you'll have time to propose a patch for this one, Andrew?",06/Dec/12 17:10;yx3zhu@gmail.com;Just uploaded the patch.,"06/Dec/12 17:32;hadoopqa;Testing JIRA BOOKKEEPER-465


Patch [PortNewLogId.patch|https://issues.apache.org/jira/secure/attachment/12556374/PortNewLogId.patch] downloaded at Thu Dec  6 17:11:56 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 393
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/77/","06/Dec/12 22:22;hustlmsp;the patch is quite straightforward. there is only concern: you should not only look at the writable dirs. you have to take a look at all the ledger directories using LedgerDirsManager#getAllLedgerDirs to ensure the entry log doesn't exist before writing it.

{code}
+        List<File> list = ledgerDirsManager.getWritableLedgerDirs();
+        Collections.shuffle(list);
{code}

","07/Dec/12 02:09;yx3zhu@gmail.com;Talked with Sijie offline, the concern is due to lastId not reliable in the past.
I have updated the patch to address it.","08/Dec/12 15:36;fpj;The patch looks mostly good to me, but it misses a test case. Should we add a test case? A minor comment is that it would be nice if the patch were named after the jira: ""BOOKKEEPER-465.patch"". ",09/Dec/12 09:30;fpj;Here is a new patch with a test case.,"09/Dec/12 09:49;hadoopqa;Testing JIRA BOOKKEEPER-465


Patch [BOOKKEEPER-465.patch|https://issues.apache.org/jira/secure/attachment/12560064/BOOKKEEPER-465.patch] downloaded at Sun Dec  9 09:31:26 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 14 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 391
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/90/","09/Dec/12 19:49;hustlmsp;the test case lgtm +1. thanks Flavio for adding a test case. [~yx3zhu@gmail.com] Could you take a look at the test case added by Flavio? If you are OK with it, I think the patch is ready to be in.","10/Dec/12 00:26;yx3zhu@gmail.com;Looks good to me.
Thanks Flavio",10/Dec/12 10:04;fpj;Thanks for reviewing guys. Committed revision 1419311.,"10/Dec/12 12:55;hudson;Integrated in bookkeeper-trunk #848 (See [https://builds.apache.org/job/bookkeeper-trunk/848/])
    BOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj) (Revision 1419311)

     Result = UNSTABLE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delivery throughput degrades when there are lots of publishers w/ high traffic.,BOOKKEEPER-461,12615640,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,11/Nov/12 14:39,13/Feb/13 15:46,14/Mar/19 02:39,04/Dec/12 17:56,,,4.2.0,,,,,,0,,"When running benchmarking over the hub server, found that delivery throughput degrades when there are lots of publishers publishing messages. And the delivery throughput will goes up when there is no publishes.

This issue is introduced due to ReadAheadCache only runs a single thread. So when the netty workers are busy handling publish requests, they are pushing lots of messages into ReadAheadCache's queue to put them in to read ahead cache. So the readahead cache is busy on updating keys.",,,,,,,,,,,,,,,,,,,14/Nov/12 09:37;hustlmsp;BOOKKEEPER-461.diff;https://issues.apache.org/jira/secure/attachment/12553480/BOOKKEEPER-461.diff,12/Nov/12 16:08;hustlmsp;BOOKKEEPER-461.diff;https://issues.apache.org/jira/secure/attachment/12553126/BOOKKEEPER-461.diff,11/Nov/12 14:47;hustlmsp;BOOKKEEPER-461.diff;https://issues.apache.org/jira/secure/attachment/12553028/BOOKKEEPER-461.diff,03/Dec/12 07:26;hustlmsp;BOOKKEEPER-461.patch;https://issues.apache.org/jira/secure/attachment/12555718/BOOKKEEPER-461.patch,12/Nov/12 16:10;hustlmsp;pub_sub_multithreads.png;https://issues.apache.org/jira/secure/attachment/12553128/pub_sub_multithreads.png,11/Nov/12 14:42;hustlmsp;pub_sub_singlethread.png;https://issues.apache.org/jira/secure/attachment/12553025/pub_sub_singlethread.png,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-11-12 18:32:35.122,,,no_permission,,,,,,,,,,,,,256939,,,Tue Dec 04 17:56:12 UTC 2012,,,,,,0|i0j0uf:,109065,,,,,,,,11/Nov/12 14:42;hustlmsp;Attach a figure of the benchmark.,11/Nov/12 14:47;hustlmsp;Attach a patch to make ReadAhead running w/ multithreads.,12/Nov/12 16:10;hustlmsp;attach a new figure of the benchmark w/ the patch.,"12/Nov/12 18:32;yx3zhu@gmail.com;I would suggest change ""Weird! Should not have two threads adding message to cache key {} at the same time."" to neutral ""It is unexpected that more than one threads are adding message to cache key {} at the same time."" :->
Otherwise looks good.
 ","13/Nov/12 23:17;fpj;Hi Sijie, I have few questions about this patch

# With enqueueWithoutFailureByTopic, does it make sense to keep enqueueWithoutFailure?
# I'm not entirely sure why you want some of the operations to execute in separate threads. For example, in this block:

{code}
        enqueueWithoutFailure(new CacheRequest() {
            @Override
            public void performRequest() {
                // maintain the index of seq-id
                MapMethods.addToMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(),
                                         cacheKey.getSeqId(), TreeSetLongFactory.instance);

                // maintain the time index of addition
                MapMethods.addToMultiMap(timeIndexOfAddition, currTime,
                                        cacheKey, HashSetCacheKeyFactory.instance);
                // update time index
                if (newCacheSize > maxCacheSize) {
                    collectOldCacheEntries();
                }
            }
        });
{code}

is it the case that the MapMethods operations are expensive? 

# In the following excerpt form your patch, you're inverting the order of execution and I couldn't convince myself that it is not a problem:

{code}
-        // maintain the time index of addition
-        MapMethods.addToMultiMap(timeIndexOfAddition, currTime, cacheKey, HashSetCacheKeyFactory.instance);
-
-        // maintain the index of seq-id
-        MapMethods.addToMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(), cacheKey.getSeqId(),
-                                 TreeSetLongFactory.instance);
-
-        // finally add the message to the cache
-        cacheValue.setMessageAndInvokeCallbacks(message, currTime);
+        synchronized (cacheValue) {
+            // finally add the message to the cache
+            cacheValue.setMessageAndInvokeCallbacks(message, currTime);
+        }
 
         // if overgrown, collect old entries
-        collectOldCacheEntries();
+        enqueueWithoutFailure(new CacheRequest() {
+            @Override
+            public void performRequest() {
+                // maintain the index of seq-id
+                MapMethods.addToMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(),
+                                         cacheKey.getSeqId(), TreeSetLongFactory.instance);
+
+                // maintain the time index of addition
+                MapMethods.addToMultiMap(timeIndexOfAddition, currTime,
+                                         cacheKey, HashSetCacheKeyFactory.instance);
+                // update time index
+                if (newCacheSize > maxCacheSize) {
+                    collectOldCacheEntries();
+                }
+            }
+        });
{code}

# Please update this: ""so dont need to maintain"" -> ""so don't need to maintain""
# In the graph you posted last, what are the sharp drops? Is that you restarting the hub? ","14/Nov/12 07:55;hustlmsp;thanks Yixue and Flavio for reviewing.

{quote}
change ""Weird! Should not have two threads adding message to cache key {} at the same time."" to neutral ""It is unexpected that more than one threads are adding message to cache key {} at the same time.""
{quote}

I will change the text.

{quote}
1. With enqueueWithoutFailureByTopic, does it make sense to keep enqueueWithoutFailure?
2. I'm not entirely sure why you want some of the operations to execute in separate threads.
{quote}

enqueueWithoutFailureByTopic is try to submit to different threads, each threads process portion of topics.

enqueueWithoutFailure is try to use original cache thread to do some other non-critical operations like updating readahead cache index and cleanup readahead cache.

I don't want the non-critical operations affect those critical operations like adding messages to readahead cache (affect publish operations) and delivering next message (affect deliver operations). so it still keeps enqueueWithoutFailure.

The other reason to keep enqueueWithoutFailure is that, the two indices (time index and seq index) is quite difficult to modify them concurrently in high performance. so it keeps cache thread to handle index staffs.

{quote}
In the following excerpt form your patch, you're inverting the order of execution and I couldn't convince myself that it is not a problem.
{quote}

since all the indices operations would be enqueueWithoutFailure to process by cache thread only, so the delay of index  updates is OK.

{quote}
Please update this: ""so dont need to maintain"" -> ""so don't need to maintain""
{quote}

will update the text.

{quote}
In the graph you posted last, what are the sharp drops? Is that you restarting the hub?
{quote}

the drops is because we finished one loop of benchmark and starts a new one.",14/Nov/12 09:37;hustlmsp;Attach a new patch to address text issue as Yixue and Flavio's comments.,"26/Nov/12 18:06;ikelly;[~hustlmsp] The new code moves the cache cleanup from being synchronous to be asynchronous. I.e. If the read ahead cache is getting too full, schedule a flush. This doesn't block many more requests trying to add to the cache before it has been cleaned up. In the post-patch graph you attached, what are the big dips?

The readaheadcache seems to be solving a very common problem. Perhaps we could leverage guava's CacheBuilder, which does the same thing, and cleans up as it goes, rather than removing a lot of entries in one go, as collectOldCacheEntries does.","27/Nov/12 04:37;hustlmsp;> what are the big dips?

the figure is formed by several benchmark runs. so the drop is between benchmarks and the figure is collected from hub server side not from benchmark.

> The new code moves the cache cleanup from being synchronous to be asynchronous. I.e. If the read ahead cache is getting too full, schedule a flush. This doesn't block many more requests trying to add to the cache before it has been cleaned up. 

This is a good point. I will try looking into it and think about your suggestion using CacheBuilder.",03/Dec/12 07:26;hustlmsp;attach a new patch to stop putting entries to cache until old entries are collected.,"03/Dec/12 07:32;hustlmsp;[~ikelly] For 4.2.0, how about keeping the cache implementation here to just use multithreads?

For 4.3.0, we could have a separated jira working on providing a better readahead cache implementation, like using a mature cache library, which we also need to consider memory issue in JVM, one solution is to use on-heap cache implementation like guava cache, the other solution is to use off-heap cache implementation like apache directmemory (http://directmemory.apache.org/).","03/Dec/12 08:40;hadoopqa;Testing JIRA BOOKKEEPER-461

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555718/BOOKKEEPER-461.patch"">/jira/secure/attachment/12555718/BOOKKEEPER-461.patch</a> downloaded at Mon Dec  3 08:15:50 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 3 line(s) with trailing spaces
.    {color:red}-1{color} the patch contains 2 line(s) longer than 120 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 386
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/62/","04/Dec/12 17:56;ikelly;Latest patch committed as r1417066. Thanks Sijie.

Regarding using a cache library, waiting for 4.3 is a good idea.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Annoy BKReadException error when changing ledger.,BOOKKEEPER-458,12614963,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,jiannan,hustlmsp,hustlmsp,06/Nov/12 14:37,13/Feb/13 15:46,14/Mar/19 02:39,13/Dec/12 11:52,,,4.2.0,,,hedwig-server,,,0,,"Some annoy BKReadException are found when changing ledger.

1) suppose Topic T has ledger L1, storing messages starting from 1 - 100.
2) T changed ledger to write entry to ledger L2.
3) Before the entry is added successfully, Subscribe s subscribed topic T. ReadAhead cache tried to schedule a ReadAhead request to scan (103, 104).
4) RangeScanOp in BookKeeperPersistentManager executed to read entry 2 & 3 from L2. but actually there was no entries in L2.

{code:title=BookKeeperPersistentManager.java}
// None of the old ledgers have this seq-id, we must use the
                // current ledger
                long endSeqId = topicInfo.currentLedgerRange.getStartSeqIdIncluded()
                                + topicInfo.lastEntryIdAckedInCurrentLedger;

                if (endSeqId < startSeqId) {
                    request.getCallback().scanFinished(request.ctx, ReasonForFinish.NO_MORE_MESSAGES);                    return;
                }
{code} 

The code in BookKeeperPersistentManager is supposed to not scan any messages whose seq id is larger than lastEntryIdAckedInCurrentLedger. But lastEntryIdAckedInCurrentLedger isn't reset when changing ledger. so when RangeScanOp is executed, last entry id acked in previous ledger was used which causing calculating an error seq id for the boundary checking in RangeScanOp.

The fix would be quite easy to reset lastEntryIdAckedInCurrentLedger when changing ledger. But we need a test case to cover this case.",,,,,,,,,,,,,,,,,,,12/Dec/12 22:44;jiannan;BOOKKEEPER-458.diff;https://issues.apache.org/jira/secure/attachment/12560664/BOOKKEEPER-458.diff,12/Dec/12 22:16;jiannan;BOOKKEEPER-458.diff;https://issues.apache.org/jira/secure/attachment/12560657/BOOKKEEPER-458.diff,12/Dec/12 20:06;jiannan;BOOKKEEPER-458.diff;https://issues.apache.org/jira/secure/attachment/12560628/BOOKKEEPER-458.diff,14/Nov/12 09:56;jiannan;BOOKKEEPER-458.diff;https://issues.apache.org/jira/secure/attachment/12553481/BOOKKEEPER-458.diff,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-11-14 09:56:05.568,,,no_permission,,,,,,,,,,,,,255478,,,Fri Dec 14 06:51:28 UTC 2012,,,,,,0|i0es7j:,84334,,,,,,,,"14/Nov/12 09:56;jiannan;Attach a patch to fix the problem. Also post it to review board:
https://reviews.apache.org/r/8053/

Although the fix is very simple, it's difficult to design a test case. I think the reviewer can check it in mind easily :)","14/Nov/12 18:29;ikelly;This shouldn't be too hard to unit test. You need to construct a BookKeeperPersistenceManager (and unfortunately all the other things it needs), use #persistMessage a few times, and then call #changeLedger. A call to #scanMessages after that should trigger the bug.",15/Nov/12 09:50;jiannan;I'll try to create a test case as your suggestion. Thanks Ivan.,27/Nov/12 10:57;fpj;Canceling patch until comment is addressed and a new patch is uploaded.,"27/Nov/12 12:13;hadoopqa;Testing JIRA BOOKKEEPER-458

WARNING: Running test-patch on a dirty local svn workspace","02/Dec/12 13:27;fpj;Hi Jiannan, I was wondering if you're planning on having a new patch uploaded soon.","02/Dec/12 13:36;jiannan;Yes, I plan to update the patch this week.",12/Dec/12 20:06;jiannan;Update patch which add a test case,"12/Dec/12 20:15;jiannan;When I add test case, I meet with two problem:
  1) Sometimes when I run command ""mvn test -Dtest=TestBookKeeperPersistenceManager"", maven-surefire-plugin cannot detect any testcase and print ""There are no tests to run."" Actually it do run the test, but it runs tearDown() before the test finish! After upgrading the plugin version in pom.xml, this issue gone. So I would suggest to upgrade some dependency plugins' version.
  2) I meet a irrelevant test failed, I think we should have a look at it in a new JIRA. Logs:
{code:java}
testServerSideThrottle[1](org.apache.hedwig.server.delivery.TestThrottlingDelivery)  Time elapsed: 3.314 sec  <<< FAILURE!
junit.framework.AssertionFailedError: Received more messages than throttle value 5
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.assertTrue(Assert.java:20)
        at junit.framework.Assert.assertFalse(Assert.java:34)
        at org.apache.hedwig.server.delivery.TestThrottlingDelivery.throttleX(TestThrottlingDelivery.java:149)
        at org.apache.hedwig.server.delivery.TestThrottlingDelivery.testServerSideThrottle(TestThrottlingDelivery.java:216)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
{java}","12/Dec/12 21:11;hadoopqa;Testing JIRA BOOKKEEPER-458


Patch [BOOKKEEPER-458.diff|https://issues.apache.org/jira/secure/attachment/12560628/BOOKKEEPER-458.diff] downloaded at Wed Dec 12 20:51:33 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 481
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/107/",12/Dec/12 21:31;fpj;This change and patch look good to me. One quick clarification: isn't the assertFalse supposed to be assertNotNull in testReadWhenTopicChangeLedger? ,"12/Dec/12 21:43;jiannan;No, if no entry return normally, ScanCallback#scanFinished will be called. And the code in TestBookKeeperPersistenceManager#RangeScanVerifier#scanFinished push a Boolean into the queue, which indicates whether there is message scanned. But it is very strange that previous code push ""pubMsgs.isEmpty()"", I think this behavior needs to be changed.","12/Dec/12 21:54;fpj;The poll call has a timeout value, so if it times out, the call will return null, no? Will the test throw an NPE instead?","12/Dec/12 22:06;jiannan;Yes, Flavio, you're right. I'll update patch.
I agree with you that NPE may be threw if timeout.","12/Dec/12 22:16;jiannan;Check null for scan result.
Thanks Flavio.","12/Dec/12 22:29;fpj;Cool, thanks. I'm sorry for yet another request, but a last small one. Could you add an error message or a comment around the assertion just to explain what the assertion is checking? It will make it easier for others to understand what it is doing in the future. Otherwise, it looks good to me.","12/Dec/12 22:44;jiannan;It's a good practice to add message for assertion, I'll always do it in future.
Thanks Flavio.",13/Dec/12 05:17;hustlmsp;the patch lgtm +1. if there is another +1 from [~fpj] or [~ikelly]. It would be ready to be in. ,"13/Dec/12 05:19;hustlmsp;BTW, [~jiannan] Could you open another jira tracking the issue you described about the failure fromtestServerSideThrottle?","13/Dec/12 05:31;hadoopqa;Testing JIRA BOOKKEEPER-458


Patch [BOOKKEEPER-458.diff|https://issues.apache.org/jira/secure/attachment/12560664/BOOKKEEPER-458.diff] downloaded at Thu Dec 13 05:10:55 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 481
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/111/","13/Dec/12 09:48;fpj;+1, lgtm.","13/Dec/12 11:52;fpj;Committed revision 1421239. Since the fix version didn't say anything, I haven't committed it to branch 4.1. In the case, this is necessary, please reopen this ticket and comment.",13/Dec/12 17:12;jiannan;To Sijie: has created JIRA BOOKKEEPER-503 for testServerSideThrottle failed,"14/Dec/12 06:51;hudson;Integrated in bookkeeper-trunk #860 (See [https://builds.apache.org/job/bookkeeper-trunk/860/])
    BOOKKEEPER-458:  Annoy BKReadException error when changing ledger. (jiannan via fpj) (Revision 1421239)

     Result = FAILURE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a format command for Hedwig to cleanup its metadata.,BOOKKEEPER-457,12614909,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,06/Nov/12 06:51,13/Feb/13 15:46,14/Mar/19 02:39,29/Nov/12 14:20,4.1.0,,4.2.0,,,,,,0,,Create a format command for Hedwig to cleanup metadata for a clean setup. similar as BOOKKEEPER-300.,,,,,,,,,,,,,,,,,,,14/Nov/12 09:32;hustlmsp;BOOKKEEPER-457.diff;https://issues.apache.org/jira/secure/attachment/12553479/BOOKKEEPER-457.diff,29/Nov/12 02:36;hustlmsp;BOOKKEEPER-457.patch;https://issues.apache.org/jira/secure/attachment/12555299/BOOKKEEPER-457.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-27 12:34:19.37,,,no_permission,,,,,,,,,,,,,255421,,,Fri Nov 30 01:37:25 UTC 2012,,,,,,0|i0eruf:,84275,,,,,,,,14/Nov/12 09:32;hustlmsp;Attach a patch to add format command for Hedwig metadata.,"27/Nov/12 12:34;hadoopqa;Testing JIRA BOOKKEEPER-457

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12553479/BOOKKEEPER-457.diff"">/jira/secure/attachment/12553479/BOOKKEEPER-457.diff</a> downloaded at Tue Nov 27 12:13:13 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 389
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/33/","28/Nov/12 15:30;ikelly;Patch looks good. Before the continueOrQuit(), could you print out what exactly is to be formatted (""i.e. the Metadata factory type etc), so that the use can see what they are formatting so that they can make a well informed decision? 

Also, the help in HedwigCommands, should tell the user that -force skips confirmation.",29/Nov/12 02:36;hustlmsp;Attach a new patch addressing Ivan's comments.,"29/Nov/12 04:52;hadoopqa;Testing JIRA BOOKKEEPER-457

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555299/BOOKKEEPER-457.patch"">/jira/secure/attachment/12555299/BOOKKEEPER-457.patch</a> downloaded at Thu Nov 29 04:29:13 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 383
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/46/","29/Nov/12 14:20;ikelly;Committed as r1415176, thanks Sijie","30/Nov/12 01:37;hudson;Integrated in bookkeeper-trunk #828 (See [https://builds.apache.org/job/bookkeeper-trunk/828/])
    BOOKKEEPER-457: Create a format command for Hedwig to cleanup its metadata. (sijie via ivank) (Revision 1415176)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/FactoryLayout.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MetadataManagerFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hedwig c++ tester script assumes sh is bash,BOOKKEEPER-454,12614574,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Nov/12 20:42,13/Feb/13 15:46,14/Mar/19 02:39,22/Nov/12 17:36,,,4.2.0,,,,,,0,,"in debian, sh is dash. so the tests fail.",,,,,,,,,,,,,,,,,,,02/Nov/12 20:49;ikelly;0001-removed-sh-from-server-control.sh.patch;https://issues.apache.org/jira/secure/attachment/12551923/0001-removed-sh-from-server-control.sh.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-14 09:40:45.36,,,no_permission,,,,,,,,,,,,,254990,,,Thu Nov 22 19:03:47 UTC 2012,,,,,,0|i0eobz:,83704,,,,,,,,14/Nov/12 09:40;hustlmsp;the patch looks good to me. thanks Ivan. +1,22/Nov/12 17:36;ikelly;Committed as r1412629. Thanks Sijie.,"22/Nov/12 19:03;hudson;Integrated in bookkeeper-trunk #812 (See [https://builds.apache.org/job/bookkeeper-trunk/812/])
    BOOKKEEPER-454: hedwig c++ tester script assumes sh is bash (ivank) (Revision 1412629)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/scripts/server-control.sh
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie can fail to recover if index pages flushed before ledger flush acknowledged,BOOKKEEPER-447,12613984,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,yx3zhu@gmail.com,yx3zhu@gmail.com,30/Oct/12 01:30,13/Feb/13 15:46,14/Mar/19 02:39,24/Dec/12 05:23,4.2.0,,4.1.1,4.2.0,,bookkeeper-server,,,0,,"Bookie index page steal (LedgerCacheImpl::grabCleanPage) can cause index file to reflect unacknowledged entries (due to flushLedger). Suppose ledger and entry fail to flush due to Bookkeeper server crash, it will cause ledger recovery not able to use the bookie afterward, due to InterleavedStorageLedger::getEntry throws IOException.
If the ackSet bookies all experience this problem (DC environment), the ledger will not be able to recover.
The problem here essentially a violation of WAL. One reasonable fix is to track ledger flush progress (either per-ledger entry, or per-topic message). Do not flush index pages which tracks entries whose ledger (log) has not been flushed.",,,,,,,,,,,,,,,,,,,20/Dec/12 15:58;ikelly;0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch;https://issues.apache.org/jira/secure/attachment/12561910/0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch,19/Dec/12 18:31;ikelly;0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch;https://issues.apache.org/jira/secure/attachment/12561759/0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch,15/Dec/12 18:39;ikelly;0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch;https://issues.apache.org/jira/secure/attachment/12561137/0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch,13/Dec/12 10:10;ikelly;0001-BOOKKEEPER-447-LedgerCacheImpl-waits-on-lock-object-.patch;https://issues.apache.org/jira/secure/attachment/12560746/0001-BOOKKEEPER-447-LedgerCacheImpl-waits-on-lock-object-.patch,12/Dec/12 16:43;ikelly;0001-BOOKKEEPER-447-LedgerCacheImpl-waits-on-lock-object-.patch;https://issues.apache.org/jira/secure/attachment/12560591/0001-BOOKKEEPER-447-LedgerCacheImpl-waits-on-lock-object-.patch,02/Dec/12 16:46;ikelly;0001-BOOKKEEPER-447-LedgerCacheImpl-waits-on-semaphore-no.patch;https://issues.apache.org/jira/secure/attachment/12555674/0001-BOOKKEEPER-447-LedgerCacheImpl-waits-on-semaphore-no.patch,14/Dec/12 14:07;ikelly;0001-BOOKKEEPER-447-Throw-NoSuchEntry-if-entry-is-not-fou.patch;https://issues.apache.org/jira/secure/attachment/12560972/0001-BOOKKEEPER-447-Throw-NoSuchEntry-if-entry-is-not-fou.patch,24/Dec/12 05:26;hustlmsp;BOOKKEEPER-447.diff;https://issues.apache.org/jira/secure/attachment/12562308/BOOKKEEPER-447.diff,01/Nov/12 00:24;hustlmsp;BOOKKEEPER-447.diff;https://issues.apache.org/jira/secure/attachment/12551652/BOOKKEEPER-447.diff,15/Dec/12 09:56;hustlmsp;BOOKKEEPER-447_bitset.diff;https://issues.apache.org/jira/secure/attachment/12561103/BOOKKEEPER-447_bitset.diff,15/Dec/12 01:40;hustlmsp;BOOKKEEPER-447_force_flush_entry_logger.patch;https://issues.apache.org/jira/secure/attachment/12561080/BOOKKEEPER-447_force_flush_entry_logger.patch,03/Dec/12 14:30;ikelly;perf.png;https://issues.apache.org/jira/secure/attachment/12555757/perf.png,,,,,12.0,,,,,,,,,,,,,,,,,,,2012-10-30 10:43:11.998,,,no_permission,,,,,,,,,,,,,252913,,,Mon Dec 24 09:40:22 UTC 2012,,,,,,0|i0daaf:,75596,,,,,,,,"30/Oct/12 01:31;yx3zhu@gmail.com;Assign to Robin as he is adding progress counter as part of Group-commit work, which can be used to tweak the index flush.","30/Oct/12 10:43;hustlmsp;{quote}
Bookie index page steal (LedgerCacheImpl::grabCleanPage) can cause index file to reflect unacknowledged entries (due to flushLedger). Suppose ledger and entry fail to flush due to Bookkeeper server crash, it will cause ledger recovery not able to use the bookie afterward, due to InterleavedStorageLedger::getEntry throws IOException.
{quote}

If failed to flush entry log, the last mark will not be rolled. so the entries are still in journal, they would be replayed and added to new entry log files and update the ledger index. I assumed that it should not throw IOException when getEntry. Could you describe more about the case? is it easy to reproduce that?","30/Oct/12 16:10;yx3zhu@gmail.com;The recent journal is not flushed to begin with, they cannot possibly be replayed. In the mean time, index page stealth forced the index file be flushed. The index file contains unacknowledged entries.
Now, the client did not close the ledger, trying to recover, asking bookies for recent entry. The bookie looked at index file to get latest entry id, then look up entry log, which is not there, and throw IOException.
Client got bad response from bookie. If the AckSet bookies all have same issue, the client simply give up recovering the ledger.
All entries get lost, including those already acknowledged.
","30/Oct/12 17:41;fpj;Great catch, guys! I also would like to know if you have a reliable way of reproducing it, but it seems plausible to me that it can happen. I can only see two ways around it:

# Tracking what has been flushed to the journal as you propose
# Adding an entry to the index only after it has been flushed to the journal

I was wondering if you have thoughts on using the second.","30/Oct/12 17:45;robindhamankar;Since in the common case the journal would have been flushed before index entries are written out, it is better to follow the approach of tracking what has been flushed and if it hasn't (in the uncommon case) then waiting for it to be flushed.","30/Oct/12 20:36;fpj;Thanks for the feedback, Robin. Here is a another thought. In the case we end up writing to the ledger device before we write to the journal, as you report here, it is a problem if we have a pointer in the index of a ledger to an entry, but the entry doesn't exist. It shouldn't be a problem, however, to have an entry in the entry log, but not a pointer in the index. If you agree, then what if we simply flush the entry log before we flush the ledger cache in InterleavedLedgerStorage flush? we already write in the opposite order in InterleavedLedgerStorage.addEntry.

","30/Oct/12 22:56;yx3zhu@gmail.com;Flavio, the proposal of forcing entry log to be flushed before index would work, though the data is force flushed unnecessarily. Besides, when we optimize the entry log to cluster it by (ledger-id, entry-id), it will make things complicated than necessary.(BOOKKEEPER-432)","30/Oct/12 23:53;hustlmsp;{quote}
The recent journal is not flushed to begin with, they cannot possibly be replayed.
{quote}

OK. I got the issue. Thanks [~yx3zhu@gmail.com] for clarification.

{quote}
If you agree, then what if we simply flush the entry log before we flush the ledger cache in InterleavedLedgerStorage flush?
{quote}
[~fpj] I think the problem here is ledger storage flushed before journal flushed. Although it could avoid IOException reading ledger index as your proposal to change the flush order in ledger storage, it volatiles the contract for a bookie server, who ack an entry after the entry has been committed to journal. I would prefer Robin's proposal.","31/Oct/12 08:26;fpj;bq. the proposal of forcing entry log to be flushed before index would work, though the data is force flushed unnecessarily.

[~yx3zhu@gmail.com] We already force it to disk, so there is no extra penalty. Check InterleavedLedgerStore.flush()->entryLogger.flush()->logChannel.flush(true)

bq. I think the problem here is ledger storage flushed before journal flushed.

[~hustlmsp] Agreed, and my proposal does not prevent us from flushing to the ledger device before we do it to the journal, but it makes sure that if we do, we won't get the IOException. This change involves no more code and we only need to swap the order, it is very simple.

bq. it volatiles the contract for a bookie server, who ack an entry after the entry has been committed to journal.

It does not violate the contract because I'm not suggesting the we ack after flushing to the ledger device. We keep acking only when it is persisted in the journal. 


","31/Oct/12 09:47;robindhamankar;Flavio, the index is also flushed in LedgerCacheImpl#grabCleanPage. We dont want to flush all ledgers and all entry logs as in case of InterleavedLedgerStore#flush just to make a clean page available. In general since when we have to order I/Os, it is better to have the other writes depend on the journal write since we write much more frequently to the journal and also journal writes are sequential making the I/O cheaper that relying on writes to ledger entries.","31/Oct/12 13:19;hustlmsp;Revisited the steps of adding entry in bookie server:
1) add entry to ledger storage; (add to entry logger then update ledger index entry)
2) add entry to journal queue;
3) journal thread flushes journal queue to commit entry to disks.
4) in journal's adding callback, it respond to client.

so the entry is available for read after step 1) even the entry is not committed to journal. This behavior is OK for BookKeeper since there was last confirmed hint guarantee in BookKeeper.

But it was not so safe to make an entry to be available for read before committing to journal. Imaging that it was K/V storage (not bookkeeper), it first adding a key to memory for read then commit to journal for persistence. After the key is in memory, which is readable to client, client would read the value of key. But if crashed happend before committing to journal, the storage restarts and the key is gone. client would not read the key again, which causes inconsistent state.

A better sequence for adding entry for a journal-based storage would be:
1) added to journal queue first
2) journal thread committed the add operation to journal
3) in the callback of adding entry to journal, it put addEntry operation in a writer thread's queue.
4) the write thread adds entry to ledger storage. 
5) respond to client.

In such sequence, we just make the entry available for read only after it was safely committed to disk. It would avoid inconsistent state as described above and also address this issue here.

Performance consideration:

the original steps: the latency of an addEntry operation would be (latency of adding entry to ledger storage) + (latency of committing entry to journal).

the changed steps: the latency of an addEntry operation would be (latency of committing entry to journal) + (latency of adding entry to ledger storage). Since we don't add entry to ledger storage directly in the callback committing entry to journal, we just put the addEntry operation in a writer's thread (as improvement introduced in BOOKKEEPER-429), the latency of committing entry is still same as the original one. so the total latency of an addEntry operation remains same.

Complexity:

it just needs to change the order of adding entry, which doesn't introduce any other code. (I assumed that we would have a separated write thread and have a queue for those pending addEntry operations, which would be introduced in BOOKKEEPER-429). And the benefit of this change would make the behavior predicate even encountering crashes.
","31/Oct/12 13:57;fpj;I don't think this change is necessary, Sijie, exactly because of the point you make about not violating any of our guarantees. It is true that the change is not complex, but we are now adding more threads to the story and the change is not strictly necessary. ","31/Oct/12 14:17;hustlmsp;Flavio,

{quote}
but we are now adding more threads to the story and the change is not strictly necessary.
{quote}
As my comment, I assumed that a write thread would be added in BOOKKEEPER-429 to separated read/write threads. so no more threads added to the story. It would be a clear fix for this issue.

","31/Oct/12 14:24;fpj;In this case, I would feel more comfortable if we first work on the jiras that have been mentioned here (BOOKKEEPER-429 and BOOKKEEPER-432) before making further progress here. Shall we mark this jira as related those other two jiras? ","31/Oct/12 14:42;robindhamankar;Sijie, Not reading data that has not been persisted can be achieved without having to delay inserting to the index or the log files. WAL enforcement would associate a monotonically increasing sequence number with each batch of queue entries that are written to the journal and use this timestamp to detect if all entries in an index page have already been persisted. The same check that is used before the index is persisted can be used when the index is read if we want to provide readers isolation from data that is persisted. In the common case, the journal flushes will be ahead of the subscriber consumption (read) so we will basically not introduce any overhead. 

Flavio, I dont think we want to couple these with 429 and 432. Those are performance optimizations, this is correctness.   ","31/Oct/12 15:58;fpj;bq. I dont think we want to couple these with 429 and 432. Those are performance optimizations, this is correctness. 

I'm also not a big fan of mixing up performance and correctness, but the discussions in this jira are referencing other changes, so I can't really say what the best way is with all these changes in flight.","01/Nov/12 00:21;hustlmsp;{quote}
Not reading data that has not been persisted can be achieved without having to delay inserting to the index or the log files.
{quote}

Changing the order of committing to journal and  adding to ledger storage doesn't affect the time that an entry to be readable from BookKeeper client. since there was a semantic guarantee in BookKeeper that a client would not read an entry before the entry has been Acked succeed. Ack means the entry should be committed to journal at least before responding to client.",01/Nov/12 00:24;hustlmsp;wrote a draft patch of the idea changing the order of adding entry to ledger storage and committing it to journal. there is no test case added yet to reproduce the issue here.,"01/Nov/12 00:52;yx3zhu@gmail.com;Sijie,
The patch you have will ends up stall index/entry log caching and flushing, which could well be done in parallel.
Robin is already working on group commit of ledgers (in separat thread). The approach I described initially is classical database WAL technique.
I think it is best to coordinate with Robin on addressing this issue, if you are eager to work on it.:-)","01/Nov/12 02:40;hustlmsp;Yixue, I would say sorry if it made you uncomfortable. I am pleased that we could have great improvement using group commit idea as you proposal. I attached a draft just to show my idea about this issue since we are discussing different opinions for it, and I don't change the patch to be available since it was still a draft to show the idea and there are still different opinions about this problem. I am not to interrupt Robin's work.","01/Nov/12 03:01;yx3zhu@gmail.com;Sijie,
NP. I did not mean to discourage discussion.","14/Nov/12 18:01;ikelly;I think the root problem here is that the entrylog must be flushed monolithically, while the index files are flushed individually. This means to clear up space for the index files, we need to flush the whole entrylog, or else get the problem described. This, at its core, is the same problem. Basically, if all entries are interleaved, then it's impossible for a bookie to flush all entries associated with an index page, without flushing everything around them.

I had been thinking of a solution for BOOKKEEPER-432, which is somewhat similar to Aniruddha's.

Basically, we have a SlabAllocator, which has blocks of memory, maybe 8k in size. Each ledger has two slabs, the entrylog and index slab. Entries for a ledger are written to the entrylog slab, and then the offset is written to the index slab. 

For a normal flush, we go through all ledgers, flush the entrylog slab (long sequential write), and then the index slab for each of them (using the offset from the entrylog flush to calculate the real offsets). 

For a ""reclaim me some memory"", we can flush a single entrylog slab, and then the index slab. Of course, in implementation it would be more complex, but the basic idea is that, for a single ledger, the entrylog segment is independent until the point that it is on the disk.
","15/Nov/12 17:06;yx3zhu@gmail.com;HI Ivan,

I have a patch for BOOKKEEPER-432 rolled out internally, will post it shortly.
After some benchmark, we decided not go with Aniruddha's approach.

I will also creates a separate jira to eliminate/reduce on-disk index (my original proposal to BOOKKEEPER-432), as it hurt sync/write through put. Suppose there are thousands of ledgers per bookie, sync potentially needs to flush thousands of index files.
  
 
","15/Nov/12 17:07;yx3zhu@gmail.com;Assign myself, as we can separate group commit with this jira.","16/Nov/12 18:49;ikelly;By BOOKKEEPER-432, do you mean the skiplist approach specifically? Or simply sorting before flushing? I have a flight next week, so I have a plan to try out the slab based approach. I'll let you know what I find.

I was thinking about this JIRA again last night. I think it can be very easily be solved by a Semaphore, and removing the explicit flush in #grabCleanPage(). 

The crux of the problem here is that we flush an index file before the entrylogger has flushed. The entrylogger should be flushing every 100ms. The flush mechanism is, flush the entrylog, and then flush all index page. If we cannot grab a free index, it means that index pages are not currently being flushed, i.e. the entrylog is flushing or we're waiting for the next flush (this is doubtful, if we're running out of pages, flushes are taking longer than 100ms, so once one flush ends another begins immediately).

Now, it is only safe to grab a clean page once the entrylog is flushed. Once the entrylog has finished flushing, it will start flushing pages and freeing them. Therefore, to grab a clean page, we just need to wait for the current running flush to free one rather than flushing it outselves.

What will happen from the client perspective is that messages will queue while we're waiting for a free page. But this is fine, as the system is over capacity, so queuing is inevitable.","16/Nov/12 23:52;yx3zhu@gmail.com;I was referring to first-cut of BOOKKEEPER-432, skipList is used as caching layer to sort entries, before they make it to entry log or index buffers.
We have run benchmark, it is better (read throughput) than the slab-based approach which Aniruddah experimented with. Some of the details of slab-based approach may be different though.

When we experimented with thousands of active ledgers per hub, the sync thread takes quite a hit while flushing (thousands of files). I am not sure if it is good idea to peg the sync interval as 100ms. 
  ","17/Nov/12 10:58;ikelly;{quote}I am not sure if it is good idea to peg the sync interval as 100ms. {quote}
During heavy load, the sync interval is irrelevant, it's syncing constantly.

How does the skipList approach do on write throughput/latency?","20/Nov/12 17:06;yx3zhu@gmail.com;The skipList approach does not impact write throughput, which will be tracked separately:
The write operation tends to compete with read on disk I/O. The interval should be larger by default, with adaptiveness built in.
We are going to eliminate/reduce index files write separately, to measure improvement on the work throughput. ","02/Dec/12 16:46;ikelly;Implemented semaphore solution and added test case which triggers the problem without the flush. I haven't checked how it affects performance, but I think it will improve performance if anything, as a flush initialiated by the LedgerCacheImpl would interfere with an SyncThread flush, causing more disk head movement.","02/Dec/12 16:47;ikelly;Will test performance monday, when I have access to a dedicated disk.","03/Dec/12 14:36;ikelly;!perf.png!

The benchmark was run with bkvhbase benchmark [1]. Entry size was 100, each run was 5 minutes. For each number of ledgers I ran 3 times.

Graph is quite bumpy, but it shows that, using the attached patch, performance is actually better for 1, 10 & 10000 ledgers, and a bit worse for 100 & 1000 ledgers. Previous tests have running against the complete bookie gives a max tpt of 108k[2] so all these numbers are much better. 

[1] https://github.com/ivankelly/bkvhbase
[2] Running against a complete bookie means having to write to WAL first. This will slow us down, as we lose a degree of batching","03/Dec/12 22:59;fpj;I have a few comments and questions here:

* I'm not sure what this is doing:

{code}
+                        cleanPages.tryAcquire(100, TimeUnit.MILLISECONDS);
{code}

if the 100 ms elapses and there has been no release, then it means that there is no clean page, no?

* Should we rename BookieTest to something less general, like BookieLedgerIndexTest?
* Check the javadoc for testIndexPageEviction(), it has typos.
* There is this comment in this same test:

{noformat}
// don't start the bookie, this way sync thread wont run
{noformat}

but the code does start the bookie right after. Is this correct? Is it referring to second occurrence of ""new Bookie""? 
","04/Dec/12 02:02;hustlmsp;{code}
+                        cleanPages.tryAcquire(100, TimeUnit.MILLISECONDS);
{code}

Should this time interval align with sync thread time interval?","04/Dec/12 16:25;ikelly;Having looked at it again, the patch isn't safe. Theres no guarantee that the thread acquiring the semaphore will be the one which takes the freed page (it's guaranteed by being single threaded, but that should change). I'll need to take another look (it really should be as simple as using a semaphore, but LedgerCacheImpl is far more complex than it needs to be).","12/Dec/12 16:43;ikelly;New patch gets rid of the semaphore, and just uses notify()/wait(). The semaphore was unnecessary as LedgerCacheImpl does its own bookkeeping on which pages are clean and which are dirty.

Basically, if there are no clean pages available, we wait for 100 ms, and then see if we can find any. It's kind of busy waiting, but the 100 ms will stop it going into a tight loop.","13/Dec/12 06:19;hustlmsp;Although this fix is quite simple and straightforward, I still could not be convinced using this solution. Because all writing requests are blocked until a flush is scheduled by SyncThread, so the latency heavily depends on the *flushInterval*. Also, it just resolve the problem force flushing ledger when grabbing a clean page. but if sync thread happens to flush the ledger before journal flushes, same problem occurred. 

the right direction resolving this issue is that we should guarantee journal flushing before ledger index flushed. A possible way is to add a listener on Journal, when it flushed entires, it notified LedgerStorage which ledger is flushed. so LedgerStorage could know which ledger page it should flush, which page it should not flush.

so the waiting time to grab a clean page is different for different solution, either depends on journal flushing latency or sync thread flush interval. journal flushing latency supposed to be very very low since it was used as a separated disk. but sync thread flush interval depends on user's setting and also it was a shared disk with read requests.

","13/Dec/12 10:40;ikelly;
I've uploaded a small tweak to the patch, but the basic principle stays the same. 

The only time you will wait is if there are no clean pages available. There will only be no clean pages available if there is heavy write load on the server. In this case, the server can be in one of 2 states,  a) flushing the entrylog, and b) flushing the ledger. 

If the server is in a) it is not safe to flush the page, the corresponding entry log entries may not have been flushed, and also if you did flush you'd be interrupting the sequential write.

If the server is in b) then ledger pages are already being flushed, you will only wait until a single ledger page has been marked as clean to try and acquire one again.

You could have a situation where the flushInterval is configured very high, and in that case it would be good to trigger a flush when capacity is low, but in that case, I think it would be better to trigger a full flush, entrylog and ledgers. I think taking Yixue's CacheCallback solution from BOOKKEEPER-432 would fix that (basically to take the changes from Bookie.java). However, I'm not sure this is necessary for 4.2.0. For 4.2.0 we need to prevent the flush occurring before the journal write. This patch does that. 4.3.0 will include major ledger storage changes anyhow, so it may be best to leave the CacheCallback until then.

","13/Dec/12 18:37;hustlmsp;CacheCallback is required for a skip list solution in BOOKKEEPER-432, because you had to flush the buffered entries to make spaces for newly added entries. You could use CacheCallback here to notify sync thread to force a full flush or just force flush entry logger, after that it is safe to force flush an ledger to steal its ledger cache page. I think it would be better than a busy-waiting, although it still not so perfect.

","13/Dec/12 18:46;hustlmsp;{quote}
For 4.2.0 we need to prevent the flush occurring before the journal write.
{quote}

One more point, I don't think you solution prevent flushing occurring before journal write. You just prevent flushing a ledger index before flushing entry logger, since flushing ledger storage and flushing journal are different threads. ledger storage had no idea whether its entry is committed to journal or not. 

The result of your fix is just guaranteeing an entry is persisted in ledger storage having its index entry and its data in entry log file, so we wouldn't got IOException when accessing it. It doesn't do as described.","13/Dec/12 21:37;ikelly;Actually, even requesting a flush of just the entrylog and then flushing the ledger page doesn't guarantee anything, as we don't use double buffering. It's possible that we could flush the entrylog, an entry is added to the ledger page, and then we flush the ledger page. Unless we put a big lock around everything which is ugly as hell and couples this stuff in a way I really dont like.

How about another approach (not sure if it's been suggested before), that if we find an entry in the index and then we can't find it in the entrylog, we throw an exception the same way as if we never found it in the index?","14/Dec/12 14:07;ikelly;Adding patch containing solution where we just throw the NoEntryException if we get an IOException from the entrylogger trying to read an offset that doesn't exist.
","15/Dec/12 01:35;hustlmsp;-1 for this patch. since I don't like the idea converting IOException to NoEntryException, actually IOException might means a valid add entry but it corrupts due to disk bad sectors. also, NoEntryException is a critical exception that we used for the termination condition for ledger recovery (see BOOKKEEPER-365). It would be better not to equal IOException to NoEntryException.","15/Dec/12 01:40;hustlmsp;Attach a patch to flush entry logger before flushing ledger index. Although it is not the best and graceful way to resolve it, it is better than previous patches.

The patch also fixed Ivan's test case. ","15/Dec/12 09:56;hustlmsp;a draft patch based on yixue and robin previous discussion's idea. It used a BitSet to track the sync status of its journal entries. only flush a dirty page when the BitSet is empty (all entries in this page are synced to journal).

why BitSet? it is a bit trouble is although we adding entries in order, but this order is preserved by client not a bookie. the entries added in a bookie would be in any order due to retry and change ensemble logic. so it is not safe to use something like last entry id to track the progress of committing a ledger's entries to journal.

Also this patch improved ledger flushing to prevent updating a ledger page when flushing it. updating a ledger page when flushing, which would cause unsynced journal entry's index is flushed. this is an already existed bug in current ledger flush, which would cause this issue even not force flush ledger when grabbing a clean page.

this patch passed existed test cases. I haven't added test case for it. but I think we might need to cover more cases when adding tests, especially the issues I described in above paragraphs.

BTW: there is an interesting project called hawtjournal. I followed its JournalListener idea in this patch.(https://github.com/fusesource/hawtjournal/blob/master/src/main/java/org/fusesource/hawtjournal/api/JournalListener.java)
","15/Dec/12 10:05;hustlmsp;As I described in the previous comment, currently flushing page is not safe: sync thread flushed a page, other thread adds offset in the page. sync thread brings uncommitted entry (neither journal nor entry log) to index page. Any final solution is required to fix this potential issue, otherwise it is an unsafe solution.","15/Dec/12 10:22;hadoopqa;Testing JIRA BOOKKEEPER-447


Patch [BOOKKEEPER-447_bitset.diff|https://issues.apache.org/jira/secure/attachment/12561103/BOOKKEEPER-447_bitset.diff] downloaded at Sat Dec 15 10:01:27 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 3 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 499
.    Tests failed: 0
.    Tests errors: 4

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/129/","15/Dec/12 11:39;ikelly;I prefer the entrylog flush approach to the bitset approach, but I don't particularly like either as the both introduce a lot of coupling. At least with the entrylog approach, the coupling can be hidden behind the LedgerStorage interface and the Journal doesn't need to be touched. With the bitset approach you can't exercise the production LedgerStorage paths without having a journal running at the same time. The entrylog approach can be cleaned up to reduce coupling also, by adding EntryFlusher interface, I'll attach an patch for that.

Regarding the IOException patch, to a client how is it any different if the bookie couldn't find a entry, or a bookie had an I/O error reading an entry? Does it change the behaviour the client will take?","15/Dec/12 11:47;ikelly;Actually, the entrylog approach won't work because of the lack of double buffering. Also, the bitset approach could lead to a situation where your spinning where pages are getting updated as fast as the journal is marking them as flushed.

Really the solution for this is double buffering, which will come in with the skiplist approach.","15/Dec/12 14:51;ikelly;Going back to the IOException, we can even distinguish between disk corruptions and short reads at the EntryLogger level. EntryLogger#readEntry throws 4 IOExceptions apart from those which may be thrown from the file channel. 2 are for short data reads, and 2 are for the ledger id and entry id being incorrect. These could all be replaced with NoEntryException. ","15/Dec/12 18:39;ikelly;Patch throws NoEntryException on short read from the entry log, IOException in all other cases. The entrylog doesn't prewrite, so this is safe.","16/Dec/12 23:46;hustlmsp;I still can't be convinced by NoEntryException solution. As NoEntryException is treated as the termination condition for ledger recovery. you might end up mixing IOException of a valid entry with NoSuchEntry. In honestly, it is difficult to say what caused short read.

I am more comfortable on the solutions making data flushing only after journal committed, which is a more traditional way for a WAL implementation. Even using skipList solution, you still could not flush (maybe flush is not the best concept) skipList before journal commits, otherwise it still volatile WAL contract. If you worry about ledger storage and journal are too coupled in this way, why not use my first solution converting the order, committing journal first, adding entry to ledger storage later (https://issues.apache.org/jira/browse/BOOKKEEPER-447?focusedCommentId=13487755&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13487755)? I don't see any drawbacks of this solution so far for now and it would not make the code coupled.

These are just my preferences. I have to say that I am fine with NoSuchEntry solution. But I would keep my +1 until I am convinced NoSuchEntryException is a safe way. Would like to see others' opinions.","17/Dec/12 09:42;ikelly;{quote}I still can't be convinced by NoEntryException solution. As NoEntryException is treated as the termination condition for ledger recovery. you might end up mixing IOException of a valid entry with NoSuchEntry. In honestly, it is difficult to say what caused short read.{quote}
In the latest patch, there are two conditions in which IOException now throws NoEntryException instead. The first one is where you try to read the entry length, and you don't get a full integer. The second one is where you try to read the entry and the number of bytes read is shorter than the number requests. Both these are consistent with the case where the entry simply hasn't been added to the entrylog. In the case of a bad segment, or FS corruption, the FileChannel#read itself would fail with a IOException, so we're not masking those errors. If the data on disk is corrupt, the check for the ledger id & entry id will fail with IOException so we're not masking that either. Finally, if the data is corrupt, the digest check will pick this up on the client side.

{quote}
If you worry about ledger storage and journal are too coupled in this way, why not use my first solution converting the order, committing journal first, adding entry to ledger storage later{quote}
I actually like this solution most of all, because it hits the core issue. We should benchmark to ensure it doesn't hurt performance. Also, I'd make a few changes to the patch you provided. You only complete the client callback after adding to the ledger storage. I can see the reason for this (client will throttle if there's many outstanding ops), but this doesn't do anything for the case where many clients are writing a lot. It would be better to start queueing requests if the bookie is overwhelmed. This may cause some timeout errors, but this is good. It means the clients will start moving off the overwhelmed machine, to hopefully less loaded machines.

At the moment, the ledger storage acts as the throttler effectively. If adds are going too fast, it will start flushing ledgers and waiting for new pages to become available. Changing the order removes that, so perhaps we should actually put a limit on the size of Journal#queue. Also, I would make the write thread a plain thread and use a queue to push requests to it. It would avoid the construction of a lot of Runnable objects.

I'm fine with either the exception based solution or the order swap solution. The first one is a smaller change, while the second could have larger side effects, so I'm leaning towards the first, but I'm willing to have my mind changed.","18/Dec/12 05:35;hustlmsp;{quote}
The second one is where you try to read the entry and the number of bytes read is shorter than the number requests.
{quote}

if the length field is corrupted with a larger number? maybe it is a corner case here. so If you are OK with allowing such case. I am fine with changing IOException to NoSuchEntryException, since it is indeed a minor change.",18/Dec/12 10:57;ikelly;I don't think there's much we can do about arbitrary bitflip failures like this except depend on the fact that we have a quorum which makes the probability of such a failure much much lower.,"19/Dec/12 05:31;hustlmsp;I am fine with your explanation. but could you put some comments when throwing NoSuchEntry to list the concern about NoSuchEntry since it would be used as a condition for ledger recovery.

besides that, your test code seems not right.

{code}
+        for (int i = 1; i <= numLedgers; i++) {
+            ByteBuffer packet = generateEntry(i, 1);
+            b.addEntry(packet, new Bookie.NopWriteCallback(), null, ""passwd"".getBytes());
+        }
+
{code}

{code}
+        for (int i = 0; i < numLedgers; i++) {
+            try {
+                b.readEntry(i, 1);
+            } catch (Bookie.NoLedgerException nle) {
+                // this is fine
+            } catch (Bookie.NoEntryException nee) {
+                // this is fine
+            } catch (IOException ioe) {
+                LOG.info(""Shouldn't have received IOException"", ioe);
+                fail(""Shouldn't throw IOException, should say that entry is not found"");
+            }
+        }
{code}

you added ledger starting from 1 to numLedgers, but read ledgers starting from 0.. besides that, you should not catch NoLedgerException. because from the test, it supposed to not throw NoLedgerException.","19/Dec/12 18:32;ikelly;Bookie.NoLedgerException can occur if the ledger never writes an index file. Note that this is different to BKException.NoSuchLedgerException, which is only triggered by the ledger not existing in ZK.

I've addressed the remaining comments.","19/Dec/12 19:02;hadoopqa;Testing JIRA BOOKKEEPER-447


Patch [0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch|https://issues.apache.org/jira/secure/attachment/12561759/0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch] downloaded at Wed Dec 19 18:41:25 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 506
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/158/","20/Dec/12 04:57;hustlmsp;{quote}
Bookie.NoLedgerException can occur if the ledger never writes an index file. Note that this is different to BKException.NoSuchLedgerException, which is only triggered by the ledger not existing in ZK.
{quote}

In the test case, you have limited pageLimit to 1. so [1 - (numLedgers - 1)] should be already flushed to index, only the last ledger doesn't flush. so you checked 1 to (numLedgers - 1), there should be no NoLedgerException. It is better to make it explicit not just catch all.",20/Dec/12 15:58;ikelly;test now explicit checks that NoLedgerException only comes for final ledger.,"20/Dec/12 16:45;hadoopqa;Testing JIRA BOOKKEEPER-447


Patch [0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch|https://issues.apache.org/jira/secure/attachment/12561910/0001-BOOKKEEPER-447-EntryLog-throws-NoSuchEntry-on-short-.patch] downloaded at Thu Dec 20 16:23:33 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 506
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/162/",24/Dec/12 05:07;hustlmsp;lgtm +1.,24/Dec/12 05:23;hustlmsp;committed as r1425588. thanks Ivan. thanks all guys involving the discussion. ,24/Dec/12 05:26;hustlmsp;attach the new patch resolving the confliction when committing.,"24/Dec/12 09:40;hudson;Integrated in bookkeeper-trunk2 #9 (See [https://builds.apache.org/job/bookkeeper-trunk2/9/])
    BOOKKEEPER-447: Bookie can fail to recover if index pages flushed before ledger flush acknowledged (ivank via sijie) (Revision 1425588)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
"
Failed to deliver messages due to inconsistency between SubscriptionState and LedgerRanges.,BOOKKEEPER-442,12613433,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,jiannan,hustlmsp,hustlmsp,25/Oct/12 05:10,13/Feb/13 15:46,14/Mar/19 02:39,03/Dec/12 15:28,4.1.0,4.2.0,4.2.0,,,hedwig-server,,,0,,"The problems encountered when failed to updateSubscriptionState but deleted consumed ledgers. 

The issue is described as below:

1) A subscriber setLastConsumeSeqId to move consume ptr. If the consume ptr is moved over consume interval, an update subscription state operation is issued to update to ZooKeeper.

{code}

AbstractSubscriptionManager:

            
            if (subState.setLastConsumeSeqId(consumeSeqId, cfg.getConsumeInterval())) {                updateSubscriptionState(topic, subscriberId, subState, cb, ctx);
            }
{code}

2) when move consume ptr, it also changed in-memory subscription state before the subscription state is persisted to ZooKeeper.

{code}
    public boolean setLastConsumeSeqId(MessageSeqId lastConsumeSeqId, int consumeInterval) {
        long interval = lastConsumeSeqId.getLocalComponent() - subscriptionState.getMsgId().          getLocalComponent();
        if (interval <= 0) {
            return false;
        }

        // set consume seq id when it is larger
        this.lastConsumeSeqId = lastConsumeSeqId;
        if (interval < consumeInterval) {
            return false;
        }

        // subscription state will be updated, marked it as clean
        subscriptionState = SubscriptionState.newBuilder(subscriptionState).                          setMsgId(lastConsumeSeqId).build();
        return true;
    }
{code}

3) MessageConsumedTask runs periodically to delete consumed ledgers. it would use in-memory subscription state to perform such deletion. so if ledger is deleted first and failed to update subscription state. it would cause inconsistent state, when hub restarts and subscriber reconnects, it would use old seq id to start delivering but the ledger has messages with old seq id has been deleted.

{code}
for (InMemorySubscriptionState curSubscription : topicSubscriptions.values()) {
                    if (curSubscription.getSubscriptionState().getMsgId().getLocalComponent() <       minConsumedMessage)
                        minConsumedMessage = curSubscription.getSubscriptionState().getMsgId().       getLocalComponent();
                    hasBound = hasBound && curSubscription.getSubscriptionPreferences().              hasMessageBound();
                }
{code} 

The fix would be let message consume task only use persistence state to performance deletions only. ",,,,,,,,,,,,,,,BOOKKEEPER-439,,,,03/Dec/12 12:25;jiannan;BOOKKEEPER-442.diff;https://issues.apache.org/jira/secure/attachment/12555748/BOOKKEEPER-442.diff,05/Nov/12 10:38;jiannan;BOOKKEEPER-442.diff;https://issues.apache.org/jira/secure/attachment/12552085/BOOKKEEPER-442.diff,30/Oct/12 10:18;jiannan;BOOKKEEPER-442.diff;https://issues.apache.org/jira/secure/attachment/12551331/BOOKKEEPER-442.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-10-30 10:18:14.618,,,no_permission,,,,,,,,,,,,,250938,,,Tue Dec 04 09:05:25 UTC 2012,,,,,,0|i0b2lj:,62533,,,,,,,,"30/Oct/12 10:18;jiannan;https://reviews.apache.org/r/7775
Diff revision 1","02/Nov/12 11:49;ikelly;Patch looks good. I have one question about the point where you throw a runtime exception, but otherwise this is ready to go.","04/Nov/12 12:51;jiannan;Thanks Ivan for review, I'll update the patch.

Sorry for delay reply, I'm make a moving and cannot access internet these days.",05/Nov/12 10:38;jiannan;Change follows Ivan's comment: logging the error instead of throw a runtime exception,"27/Nov/12 13:19;hadoopqa;Testing JIRA BOOKKEEPER-442

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12552085/BOOKKEEPER-442.diff"">/jira/secure/attachment/12552085/BOOKKEEPER-442.diff</a> downloaded at Tue Nov 27 13:17:20 UTC 2012

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","27/Nov/12 16:02;ikelly;I added a new comment to the review board. Basically, it's not enough to just log either, as that will hang the client request. You need to complete the callback also.","03/Dec/12 12:25;jiannan;Update patch by Ivan's suggestion, also update it in review board.",03/Dec/12 15:28;ikelly;Committed as r1416560. Great work Jiannan!,"04/Dec/12 09:05;hudson;Integrated in bookkeeper-trunk #837 (See [https://builds.apache.org/job/bookkeeper-trunk/837/])
    BOOKKEEPER-442: Failed to deliver messages due to inconsistency between SubscriptionState and LedgerRanges. (jiannan via ivank) (Revision 1416560)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InMemorySubscriptionManager should back up top2sub2seq before change it,BOOKKEEPER-441,12613298,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,yx3zhu@gmail.com,yx3zhu@gmail.com,yx3zhu@gmail.com,24/Oct/12 16:37,13/Feb/13 15:46,14/Mar/19 02:39,26/Oct/12 10:13,4.2.0,,4.2.0,,,hedwig-server,,,0,patch,"On topic loss, InMemorySubscriptionManager currently does not clear top2sub2seq. The intent is to allow readSubscription to get the information there. This introduce dependency outside the class, evidence is that general ReleaseOp has to use a boolean parameter which targets this implementation detail. Further, this prevents Acquire-topic to notify listeners (notifyFirstLocalSubscribe is not called) of first subscription to act appropriately.",unix,,,,,,,,,,,,,,,,,,25/Oct/12 16:48;yx3zhu@gmail.com;BackupTop2Sub2Seq.patch;https://issues.apache.org/jira/secure/attachment/12550799/BackupTop2Sub2Seq.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-24 16:51:35.793,,,no_permission,,,,,,,,,,,,,250788,,,Fri Oct 26 12:57:14 UTC 2012,,,,,,0|i0b1h3:,62351,,,,,,,,24/Oct/12 16:44;yx3zhu@gmail.com;I cannot assign the issue to myself for some reason (Edit/More Actions do not have the option).,24/Oct/12 16:51;fpj;I have added you to the list of contributors and assigned it to you. You have marked the fix version to 4.3.0. Is it right?,"24/Oct/12 17:05;yx3zhu@gmail.com;Thanks Flavio, the target version is 4.3.0.","24/Oct/12 23:19;hustlmsp;Hmm, 4.2.0 is current release. 4.3.0 is next release. Is it OK for you?",24/Oct/12 23:53;yx3zhu@gmail.com;4.2.0 sounds good. will update it.,"25/Oct/12 08:55;ikelly;Patch looks good, and its a nice cleanup. Two comments, could you rename _top2sub2seq to top2seq2subBackup. Underscores are not very informative. Also, since after readSubscriptions, the sub info is put back into top2sub2seq, _top2sub2seq.get() in readSubscriptions should be _top2sub2seq.remove()","25/Oct/12 16:48;yx3zhu@gmail.com;The consideration of not removing from _top2sub2seq was that operation could fail afterwards. Given that InMemorySubscriptionManager is for test only, agreed with the change.
Updated patch. ",26/Oct/12 10:13;ikelly;Committed r1402459. Thanks Yixue.,"26/Oct/12 12:57;hudson;Integrated in bookkeeper-trunk #774 (See [https://builds.apache.org/job/bookkeeper-trunk/774/])
    BOOKKEEPER-441: InMemorySubscriptionManager should back up top2sub2seq before change it (Yixue via ivank) (Revision 1402459)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No more messages delivered after deleted consumed ledgers.,BOOKKEEPER-439,12612647,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,19/Oct/12 10:08,13/Feb/13 15:46,14/Mar/19 02:39,26/Oct/12 13:17,4.1.0,4.2.0,4.2.0,,,hedwig-server,,,0,,"We encountered exception as below:

{quote}

2012-10-18 09:27:27,248 - DEBUG [CacheThread:BookkeeperPersistenceManager$RangeScanOp@247] - Issuing a bk read for ledger: L2 from entry-id: 100 to entry-id: 103
2012-10-18 09:27:27,248 - ERROR [CacheThread:BookkeeperPersistenceManager$RangeScanOp$2@261] - Error while reading from ledger: L2 for topic: TOPIC
org.apache.bookkeeper.client.BKException$BKReadException
        at org.apache.bookkeeper.client.BKException.create(BKException.java:48)
        at org.apache.hedwig.server.persistence.BookkeeperPersistenceManager$RangeScanOp$2.safeReadComplete(BookkeeperPersistenceManager.java:260)
        at org.apache.hedwig.zookeeper.SafeAsynBKCallback$ReadCallback.readComplete(SafeAsynBKCallback.java:61)
        at org.apache.bookkeeper.client.LedgerHandle.asyncReadEntries(LedgerHandle.java:380)
        at org.apache.hedwig.server.persistence.BookkeeperPersistenceManager$RangeScanOp.read(BookkeeperPersistenceManager.java:252)
        at org.apache.hedwig.server.persistence.BookkeeperPersistenceManager$RangeScanOp.startReadingFrom(BookkeeperPersistenceManager.java:327)
        at org.apache.hedwig.server.persistence.BookkeeperPersistenceManager$RangeScanOp.runInternal(BookkeeperPersistenceManager.java:217)
        at org.apache.hedwig.server.common.TopicOpQueuer$SynchronousOp.run(TopicOpQueuer.java:77)
        at org.apache.hedwig.server.common.TopicOpQueuer.pushAndMaybeRun(TopicOpQueuer.java:105)
        at org.apache.hedwig.server.persistence.BookkeeperPersistenceManager.scanMessages(BookkeeperPersistenceManager.java:336)
        at org.apache.hedwig.server.persistence.ReadAheadCache$ScanRequestWrapper.performRequest(ReadAheadCache.java:704)
        at org.apache.hedwig.server.persistence.ReadAheadCache.run(ReadAheadCache.java:291)
        at java.lang.Thread.run(Thread.java:662)

{quote}

topic TOPIC has 2 ledgers L1, L2, each ledger has 100 entries.

1) all the 100 entries in L1 has been delivered and consumed.
2) 100 entries have been wrote to L2 but not delivered.
3) L1 is deleted since all its entries have been consumed.
4) hub server shuts down
5) TOPIC recovered L2 and started delivering from 101.

TOPIC was expected to issue a read [0-3] from L2, but a read [100-103] was issued from the exception log, so no entries would be expected to read from L2 at [100-103].

The problem of this issue is that we used 0 and 1 for the start of message id and ledger id even we had some consumed ledgers deleted.

{code}
        void processTopicLedgerRanges(final LedgerRanges ranges, final Version version) {
            Iterator<LedgerRange> lrIterator = ranges.getRangesList().iterator();
            TopicInfo topicInfo = new TopicInfo();

            long startOfLedger = 1;

            while (lrIterator.hasNext()) {
                LedgerRange range = lrIterator.next();

                if (range.hasEndSeqIdIncluded()) {
                    // this means it was a valid and completely closed ledger
                    long endOfLedger = range.getEndSeqIdIncluded().getLocalComponent();
                    topicInfo.ledgerRanges.put(endOfLedger, new InMemoryLedgerRange(range,           startOfLedger));                             startOfLedger = endOfLedger + 1;
                    continue;
                }        

                // If it doesn't have a valid end, it must be the last ledger
                if (lrIterator.hasNext()) {
                    String msg = ""Ledger-id: "" + range.getLedgerId() + "" for topic: "" + topic.       toStringUtf8()                                            + "" is not the last one but still does not have an end seq-id"";
                    logger.error(msg);
                    cb.operationFailed(ctx, new PubSubException.UnexpectedConditionException(msg));
                    return;                }

                // The last ledger does not have a valid seq-id, lets try to
                // find it out
                recoverLastTopicLedgerAndOpenNewOne(range.getLedgerId(), version, topicInfo);
                return;
            }
{code}

{code}
                            long prevLedgerEnd = topicInfo.ledgerRanges.isEmpty() ? 0 : topicInfo.   ledgerRanges
                                                 .lastKey();
                            LedgerRange lr = LedgerRange.newBuilder().setLedgerId(ledgerId)
                                             .setEndSeqIdIncluded(lastMessage.getMsgId()).build();
                            topicInfo.ledgerRanges.put(lr.getEndSeqIdIncluded().getLocalComponent(),
                                    new InMemoryLedgerRange(lr, prevLedgerEnd + 1, lh));
{code}",,,,,,,,,,,,,,,,,,,26/Oct/12 10:44;hustlmsp;BOOKKEEPER-439.diff;https://issues.apache.org/jira/secure/attachment/12550947/BOOKKEEPER-439.diff,23/Oct/12 07:38;hustlmsp;BOOKKEEPER-439.diff;https://issues.apache.org/jira/secure/attachment/12550421/BOOKKEEPER-439.diff,22/Oct/12 13:41;hustlmsp;BOOKKEEPER-439.diff;https://issues.apache.org/jira/secure/attachment/12550271/BOOKKEEPER-439.diff,22/Oct/12 07:21;hustlmsp;BOOKKEEPER-439.diff;https://issues.apache.org/jira/secure/attachment/12550252/BOOKKEEPER-439.diff,22/Oct/12 18:21;yx3zhu@gmail.com;TopicMetadataAddStartSeqId.patch;https://issues.apache.org/jira/secure/attachment/12550318/TopicMetadataAddStartSeqId.patch,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-10-20 03:28:02.574,,,no_permission,,,,,,,,,,,,,249896,,,Fri Oct 26 15:18:40 UTC 2012,,,,,,0|i0an0v:,60003,,,,,,,,"19/Oct/12 10:10;hustlmsp;the fix would be quite simple, we just need to compute the right start seq id of the topic. Besides that, hedwig console have same issue to print right range about topic's persistence info.",20/Oct/12 03:28;i0exception;[~hustlmsp] How about persisting this in Zookeeper? ,"20/Oct/12 19:45;yx3zhu@gmail.com;I have a patch ready and tested, since we encountered this issue in our production system.
Trying to figure out how to enlist to the repository to rebase my patch. ","22/Oct/12 06:48;hustlmsp;Ah, [~yx3zhu@gmail.com] I missed your comment last friday. I had a patch when I created this jira but forgot to attach it interrupted by other things. I would attach it here for review to see whether it works for you or not.","22/Oct/12 07:21;hustlmsp;Attach a patch to address the issue. The main idea is to open first ledger to get num entries to compute right start seq id.

but it could not resolve a case (a test case I added in the patch testScanMessagesOnEmptyLedgerAfterDeleteLedger).

1) published 2 messages into a topic.
2) release/acquire topic to force a new ledger
3) consumed published messages, so the previous ledger is deleted, but no messages are in current ledger.
4) release/acquire topic, the ledger created in 2) will be pruned due to there is no ledgers in it. a new ledger is created to serving new messages.
5) publish 2 more messages.

the expected message ids published in 5) would be 3 and 4. but we had no knowledge about start seq id, so messages would assigned seq id with 1 and 2.

in order to fix this case, I improve protocol of LedgerRanges to add a field 'startSeqId'.

Besides these two fixes, I added 3 test cases to verify them.",22/Oct/12 07:22;hustlmsp;[~i0exception] I added 'startSeqId' in LedgerRanges to address an issue I described in above comment. Could you take a look at the patch to see whether it works for you or not?,"22/Oct/12 13:41;hustlmsp;update a patch to cover another case when failed to update ledger ranges.

1) suppose T has L1, L2.
2) consumeUntil to delete L1 and L2.
3) delete ledger L1 and updateLedgerRange to remove L1 range. update failed.
4) delate ledger L2 and updateLedgerRange to remove L2 range. update succeed.
5) topic is acquired again, but there is range L1 existed (L2 has been removed). so message seq id is assigned starting from last seq id of L1, which is duplicated with consumed L2.

the fix is to update delete ledgers in batch to avoid gap existed in ledger ranges.","22/Oct/12 16:53;yx3zhu@gmail.com;Sijie,

In my patch, startSeqId is added inside LedgerRange itself. (I was told that it is ok to introduce breaking change).
It should be simpler.",22/Oct/12 18:21;yx3zhu@gmail.com;Added my patch.,"22/Oct/12 18:25;yx3zhu@gmail.com;Sijie,
I feel that my patch is simpler. Could you take a look?","22/Oct/12 23:21;hustlmsp;[~yx3zhu@gmail.com] your patch looks simpler. but there are several issues that the patch doesn't fix.

1) the patch break backward compatibility. the patch could not process the metadata introduced in previous building (4.1.0).

2) the patch doesn't address the gap of ledger ranges introduced by deleted consumed ledgers. there was still gap existed in ledger ranges when deleting consumed ledgers, which would introduce duplicated sequence id, those messages have duplicated sequence id would not be delivered to consumer since their sequence id is smaller than consume ptr although they are newly published messages.

my patch focused on fixing the above 2 issues.

Either adding startSeqId in LedgerRange or in LedgerRanges could not resolve 2). We need to change ConsumedUntilOp to avoid gap introduced ledger ranges. If there is no gap could be introduced in LedgerRanges, I think we just only need to add startSeqId in LedgerRanges. I don't feel strong where to add startSeqId. I just want to clarify my changes for this issue is not just adding startSeqId.","22/Oct/12 23:45;yx3zhu@gmail.com;Hi Sijie,

Thanks for your comment -
As to 1), As stated in ""comment - 22/Oct/12 09:53"", it is Ok to introduce breaking change in hedwig per folks in our team.
As to 2), the gap of ledger ranges are Ok, as you may observe, anytime we delete consumed ledgers, we always add current-ledger-range in the ledger metadata, which carries the start-seq-id in itself.
Your patch to fix 2) is due to the usage of start-seq-id only in LedgerRanges, which lack this kind of information.

let me know if you see any issues.
Best Regards
","22/Oct/12 23:46;yx3zhu@gmail.com;Sijie,
I can add the unit-test you introduced.","22/Oct/12 23:53;i0exception;To clarify (1), I believe there have been a few breaking changes introduced in Hedwig that are not compatible with 4.1.0 (Storing topic ownership information/storing hub load information etc.) I feel it should be okay to introduce breaking changes in a major version update. ","23/Oct/12 00:06;hustlmsp;[~i0exception] I don't think topic ownership info and hub load info break compatibility. All compatibilities are introduced by features like message filter, message bound, which are documented in TestBackward. I think for metadata, we need to take care of it, since there are already systems running using old version. It is not a good idea to ask users to delete their metadata and use new package directly.","23/Oct/12 00:26;hustlmsp;[~yx3zhu@gmail.com] Ur right about 2) adding startSeqId in ledger range. You could add unit tests (in order to pass unit tests, you need include changes in bookkeeper-server to throw BKNoSuchLedgerExistsException when delete non-existed ledger and catch it when deleteLedger otherwise that ledger range entry would never removed from ledger ranges).","23/Oct/12 00:54;hustlmsp;More points added for ConsumeUntilOp changes:
1) I changed deleteLedger from synchronous call to asynchronous call, so it would not block other requests in topic queuer.
2) Batching removed deleted ledgers would reduce number of UpdateLedgerOp in topic queuer, while UpdateLedgerOp is asynchronous op, which also block other requests in topic queuer.","23/Oct/12 00:59;i0exception;[~hustlmsp] Well, the metadata that they're currently running with is inconsistent so I'm assuming they would want to clear state and get into a correct state. I'd prefer storing the start sequence ID with LedgerRange instead of LedgerRanges. One way to keep BC would be to make this an optional field and as we invoke UpdateLedgerOp, update this lazily. ","23/Oct/12 01:40;yx3zhu@gmail.com;Sijie,
The async and batching can be tracked as a separate task.
I will add unit-test and update the patch.","23/Oct/12 02:09;hustlmsp;[~i0exception] 

{quote}
Well, the metadata that they're currently running with is inconsistent so I'm assuming they would want to clear state and get into a correct state. 
{quote}

The problem here is a scan on wrong entry id so continuous message would not be delivered. it just needs to fix the computation of offset.

{quote}
I'd prefer storing the start sequence ID with LedgerRange instead of LedgerRanges.
{quote}

I would change startSeqId to LedgerRange, since you already have it. I would attach a patch moving startSeqId from LedgerRanges to LedgerRange, since my patch already addressed BC issue, which would be easy to do the change.","23/Oct/12 04:26;yx3zhu@gmail.com;Sijie,
Just fixing the computation wont adress the already-wrong metadata, where all closed ranges GCed.
I understand that you have worked on it, but I am not sure if your patch is closer to the solution, rather the other way around.
To be clear, I started with adding startSeqId in LedgerRanges, the switch is non-trivial work.","23/Oct/12 05:01;hustlmsp;{quote}
Just fixing the computation wont adress the already-wrong metadata, where all closed ranges GCed.
{quote}

At least, the new code needs to read 1) correct old version metadata, 2) the metadata described in #testScanMessagesOnClosedLedgerAfterDeleteLedger and #testScanMessagesOnUnclosedLedgerAfterDeleteLedger (in my patch).

The ledger ranges introduced gap like #testScanMessagesOnEmptyLedgerAfterDeleteLedger and #failedToDeleteLedgersTest. The sequence is already wrong as you described but it would not block delivering continuous messages if future published messages fill up the gap. The only bad part of these topics would be missing the messages in this gap.

I think my patch works same as your patch to address this issue. the only difference between your patch with mine is different place to put start seq id, it introduced different LedgerRanges metadata. since you already had a metadata change, I am OK to align with your changes putting startSeqId in LedgerRange rather than LedgerRanges, which would not break your running system.

I had a patch ready now, but needs to run the tests before attaching it. You could take a look at it after that.",23/Oct/12 07:38;hustlmsp;Attach a new patch to move startSeqId from LedgerRanges to LedgerRange while keeping the code to maintain BC.,"25/Oct/12 12:55;ikelly;Why are you changing the return code for delete?

You never close the ledger opened in getStartSeqIdToProcessTopicLedgerRanges()
You never close the ledger in recoverLastTopicLedgerAndOpenNewOne()

in getStartSeqIdToProcessTopicLedgerRanges, for
{code}
if (!range.hasEndSeqIdIncluded()) {
    // process topic ledger ranges directly
    processTopicLedgerRanges(rangesList, version, START_SEQ_ID);
    return;
}
{code}
add a comment that, as the ledger will be recovered, the start seq id will be discovered at that point.

for the NoSuchLedgerExistsException case in getStartSeqIdToProcessTopicLedgerRanges(),
shouldn't we try the next ledger in this case? what if the next ledger is also missing the start id?

In UpdateLedgerOp#run, doRemove is a confusing name, I expected it to be used later on to decide whether the update was done, and it was only when i looked at the later code that i realised that keysToRemove.empty() was what was used. I would rename it to foundUnconsumedLedger.

It would be good to have a backwards compat test for this.","26/Oct/12 00:03;hustlmsp;{quote}
Why are you changing the return code for delete?
{quote}

Delete ledger doesn't throw the right exception according to the returned rc. So when you delete a non-existent ledger, you will got ZKException rather than NoSuchLedgerExistsException.

{quote}
You never close the ledger opened in getStartSeqIdToProcessTopicLedgerRanges()
{quote}

Ur right. will close ledger handle in next patch.

{quote}
You never close the ledger in recoverLastTopicLedgerAndOpenNewOne()
{quote}

The ledger handle could not be closed, since it passed to InMemoryLedgerRanges to future reading.

{quote}
for the NoSuchLedgerExistsException case in getStartSeqIdToProcessTopicLedgerRanges(),
shouldn't we try the next ledger in this case? what if the next ledger is also missing the start id?
{quote}

No, we don't need to. Because the end seq id of current ledger plus 1 would be the the start id of next ledger id, it could be calculated using previous one's ledger id.

{quote}
I would rename it to foundUnconsumedLedger.
{quote}

Will update it in next patch.

{quote}
It would be good to have a backwards compat test for this.
{quote}

I did it on TestBookKeeperPersistenceManager. I removed start seq id in LedgerRanges to test reading old version metadata.",26/Oct/12 10:44;hustlmsp;Update a new patch addressing Ivan's comments.,26/Oct/12 13:17;ikelly;Committed r1402501. Good work Sijie.,"26/Oct/12 15:18;hudson;Integrated in bookkeeper-trunk #776 (See [https://builds.apache.org/job/bookkeeper-trunk/776/])
    BOOKKEEPER-439: No more messages delivered after deleted consumed ledgers. (sijie via ivank) (Revision 1402501)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Journal#rollLog may leak file handler,BOOKKEEPER-436,12612072,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,umamaheswararao,umamaheswararao,umamaheswararao,16/Oct/12 17:38,13/Feb/13 15:46,14/Mar/19 02:39,16/Oct/12 21:21,,,4.2.0,,,,,,0,,"Just seen the peice of code in Jouranl#rollLog 
{code}
try {
                    FileOutputStream fos = new FileOutputStream(file);
                    fos.write(buff);
                    fos.getChannel().force(true);
                    fos.close();
                } catch (IOException e) {
                    LOG.error(""Problems writing to "" + file, e);
                }
{code}

On exception It is just logging and continuing.
Even though FileOutputStream provides finalize implementation and which will clean streams, I don't think it's a good idea to depend on it as it will not be garanteed.

cleaning with more care would avoid this.",,,,,,,,,,,,,,,,,,,16/Oct/12 18:07;umamaheswararao;BOOKKEEPER-436.patch;https://issues.apache.org/jira/secure/attachment/12549352/BOOKKEEPER-436.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-16 21:21:32.343,,,no_permission,,,,,,,,,,,,,249075,,,Wed Oct 17 10:23:08 UTC 2012,,,,,,0|i0a4lj:,57018,,,,,,,,16/Oct/12 18:09;umamaheswararao;attached a simple patch,16/Oct/12 21:21;ikelly;Committed as r1398995. Thanks Uma,"17/Oct/12 10:23;hudson;Integrated in bookkeeper-trunk #756 (See [https://builds.apache.org/job/bookkeeper-trunk/756/])
    BOOKKEEPER-436: Journal#rollLog may leak file handler (umamahesh via ivank) (Revision 1398995)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Hedwig CPP Client] Delay resolving default host until necessary.,BOOKKEEPER-434,12611805,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,15/Oct/12 10:22,13/Feb/13 15:47,14/Mar/19 02:39,31/Oct/12 17:19,,,4.2.0,,,hedwig-client,,,0,,"1) default host might a VIP like name, we could delay resolving default host until necessary. so we could leverage the round-robin mechanism behind default server.

2) we should not fail the process (throwing exception) when the default server isn't reachable temporary. we could fail the request at that time.",,,,,,,,,,,,,,,,,,,30/Oct/12 11:10;hustlmsp;BOOKKEEPER-434.diff;https://issues.apache.org/jira/secure/attachment/12551336/BOOKKEEPER-434.diff,15/Oct/12 10:43;hustlmsp;BOOKKEEPER-434.diff;https://issues.apache.org/jira/secure/attachment/12549125/BOOKKEEPER-434.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-10-31 17:19:07.861,,,no_permission,,,,,,,,,,,,,248668,,,Wed Oct 31 22:14:11 UTC 2012,,,,,,0|i09xnb:,55892,,,,,,,,15/Oct/12 10:43;hustlmsp;Attach a patch to delay resolving default host and a test case for it. The patch is generated based on BOOKKEEPER-369.,30/Oct/12 11:10;hustlmsp;Attach a patch generated with --no-prefix.,31/Oct/12 17:19;ikelly;Committed r1404255. Thanks Sijie.,"31/Oct/12 22:14;hudson;Integrated in bookkeeper-trunk #783 (See [https://builds.apache.org/job/bookkeeper-trunk/783/])
    BOOKKEEPER-434: [Hedwig CPP Client] Delay resolving default host until necessary. (sijie via ivank) (Revision 1404255)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/clientimpl.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/clientimpl.h
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/test/publishtest.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/test/util.h
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestConcurrentTopicAcquisition hangs every so often,BOOKKEEPER-427,12610956,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,09/Oct/12 09:39,13/Feb/13 15:46,14/Mar/19 02:39,23/Oct/12 13:24,4.2.0,,4.2.0,,,hedwig-server,,,0,,"I'm seeing this test hang every so often. To repro:
{code}
while [ $? = 0 ]; do mvn test -Dtest=TestConcurrentTopicAcquisition; done
{code}",,,,,,,,,,,,,,,,,,,22/Oct/12 16:19;ikelly;0001-Fixed-npe-in-subscriber-response-handler.patch;https://issues.apache.org/jira/secure/attachment/12550310/0001-Fixed-npe-in-subscriber-response-handler.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-22 23:33:42.383,,,no_permission,,,,,,,,,,,,,245953,,,Tue Oct 23 17:45:06 UTC 2012,,,,,,0|i07egf:,41108,,,,,,,,"22/Oct/12 16:19;ikelly;patch fixes a npe in the subscriber response handler, which was causing a clients callback to never be called. it triggered when the subscription info had not been set when a disconnection event occurred. this can happen if the channel is disconnected before the subscription reqesu is successful.
","22/Oct/12 23:33;hustlmsp;good catch, thanks Ivan. +1 for the patch.",23/Oct/12 13:24;ikelly;Committed as r1401286. Thanks for reviewing Sijie,"23/Oct/12 17:45;hudson;Integrated in bookkeeper-trunk #768 (See [https://builds.apache.org/job/bookkeeper-trunk/768/])
    BOOKKEEPER-427: TestConcurrentTopicAcquisition hangs every so often (ivank) (Revision 1401286)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscribeResponseHandler.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup Bookie id generation,BOOKKEEPER-425,12610948,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,ikelly,ikelly,09/Oct/12 08:23,13/Feb/13 15:46,14/Mar/19 02:39,26/Oct/12 14:27,,,4.2.0,,,,,,0,,"Bookie id generation (InetAddress.getLocalHost().getHostAddress() + "":"" + port) is scattered all over the place. It would be better to have it centrallized somewhere in a static call.",,,,,,,,,,,,,,,,,,,25/Oct/12 15:58;ikelly;0001-BOOKKEEPER-425-Cleanup-up-address-generation.patch;https://issues.apache.org/jira/secure/attachment/12550790/0001-BOOKKEEPER-425-Cleanup-up-address-generation.patch,09/Oct/12 09:07;ikelly;BOOKKEEPER-425.diff;https://issues.apache.org/jira/secure/attachment/12548382/BOOKKEEPER-425.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-10-25 15:25:43.082,,,no_permission,,,,,,,,,,,,,245936,,,Fri Oct 26 16:39:13 UTC 2012,,,,,,0|i07eav:,41083,,,,,,,,09/Oct/12 09:07;ikelly;Created static in Bookie to generate InetSocketAddress from conf. StringUtils can be used to convert to a String.,"25/Oct/12 15:25;fpj;The patch does not apply cleanly to trunk. Bookie.java and AutoRecoveryMain.java have conflicts. Do you want me to fix the conflicts, Ivan?",25/Oct/12 15:58;ikelly;new patch rebased on trunk,25/Oct/12 16:27;fpj;AuditorLedgerCheckTest still has a conflict. I'm not sure why the conflict was not there before.,25/Oct/12 17:11;ikelly;did you update your source? applies fine for me.,25/Oct/12 17:22;fpj;I just did another update and still got a conflict on that test. I'm not sure what's wrong...,"26/Oct/12 10:49;umamaheswararao;I just tried this patch in my environment. Applied cleanly for me with clean update. 
{noformat}
uma@uma-PC /cygdrive/e/BK-trunk
$ cat 0001-BOOKKEEPER-425-Cleanup-up-address-generation.patch |patch -p0
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Booki
e.java
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cooki
e.java
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/client/Ledge
rMetadata.java
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/Bookie
Server.java
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/Bookie
ServerBean.java
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/
AutoRecoveryMain.java
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/
BookieLedgerIndexer.java
patching file bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringU
tils.java
patching file bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/Booki
eInitializationTest.java
patching file bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/
AuditorBookieTest.java
patching file bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/
AuditorLedgerCheckerTest.java
{noformat}

@Flavio, could you please clean your source and update once? Not sure what might be the actual cause in your env.","26/Oct/12 11:16;fpj;I was trying with eclipse and it was giving me a conflict. I tried from the command line and it worked, but now I'm getting a lot of test failures. Do tests pass for you?","26/Oct/12 14:27;fpj;Tests were failing because I had a stray zookeeper instance running. The patch is good, so I committed. Thanks, Ivan. Committed revision 1402526.","26/Oct/12 16:39;hudson;Integrated in bookkeeper-trunk #777 (See [https://builds.apache.org/job/bookkeeper-trunk/777/])
    BOOKKEEPER-425: Cleanup Bookie id generation (ivank via fpj) (Revision 1402526)

     Result = UNSTABLE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie start is failing intermittently when zkclient connection delays,BOOKKEEPER-424,12610747,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,07/Oct/12 08:46,13/Feb/13 15:46,14/Mar/19 02:39,25/Oct/12 13:36,4.0.0,4.1.0,4.2.0,,,bookkeeper-server,,,0,,"I'm seeing the following intermittent failure, when there is a delay in establishing zkclient connection with zkserver. 
{code}
org.apache.bookkeeper.bookie.BookieException$InvalidCookieException: org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /ledgers/INSTANCEID
	at org.apache.bookkeeper.bookie.Bookie.checkEnvironment(Bookie.java:329)
	at org.apache.bookkeeper.bookie.Bookie.<init>(Bookie.java:378)
	at org.apache.bookkeeper.bookie.BookieInitializationTest.testStartBookieWithoutZKServer(BookieInitializationTest.java:253)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
Caused by: org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /ledgers/INSTANCEID
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
	at org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1131)
	at org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1160)
	at org.apache.bookkeeper.bookie.Bookie.getInstanceId(Bookie.java:346)
	at org.apache.bookkeeper.bookie.Bookie.checkEnvironment(Bookie.java:280)
	... 11 more
{code}",,,,,,,,,,,,,,,,,,,08/Oct/12 01:49;rakeshr;BOOKKEEPER-424-1.patch;https://issues.apache.org/jira/secure/attachment/12548186/BOOKKEEPER-424-1.patch,14/Oct/12 18:15;rakeshr;BOOKKEEPER-424-2.patch;https://issues.apache.org/jira/secure/attachment/12549080/BOOKKEEPER-424-2.patch,14/Oct/12 18:26;rakeshr;BOOKKEEPER-424-3.patch;https://issues.apache.org/jira/secure/attachment/12549081/BOOKKEEPER-424-3.patch,15/Oct/12 02:21;rakeshr;BOOKKEEPER-424-4.patch;https://issues.apache.org/jira/secure/attachment/12549101/BOOKKEEPER-424-4.patch,17/Oct/12 18:32;rakeshr;BOOKKEEPER-424-5.patch;https://issues.apache.org/jira/secure/attachment/12549543/BOOKKEEPER-424-5.patch,21/Oct/12 19:20;rakeshr;BOOKKEEPER-424-6.patch;https://issues.apache.org/jira/secure/attachment/12550199/BOOKKEEPER-424-6.patch,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-10-08 07:01:37.177,,,no_permission,,,,,,,,,,,,,244946,,,Thu Oct 25 15:53:59 UTC 2012,,,,,,0|i05wsn:,32410,,,,,,,,"08/Oct/12 01:55;rakeshr;Attached latest patch which have the following changes. Please review.
# zkutil.createConnectedZookeeperClient
# also removed unused var 'isZkExpired' from Bookie

Thanks,
Rakesh","08/Oct/12 07:01;umamaheswararao;@Rakesh, thanks for the patch.
 I have a comment on the patch.
 {code}
// register watcher for receiving expired event
+        newZk.register(watcher);
         return newZk;
{code}
There will be a small race here, which may resulted to miss the events.
Race is between event and reregistration. Original newConnectedZK method events from ZKutil will not handle any expire events. So, just before reregistering if it gets expired event, we may miss that event handling.
later operations may thow conn loss exception and may miss proper cleanup.
So, how about having isConnected check after reregistration of watcher?
if ZK is in non connected state and ZK state has expired event then shutdown as watcher event does the same. This way we will not miss any events right? ( assuming reresistration will not reset any event states at ZK obj)
","14/Oct/12 17:56;rakeshr;Thanks Uma for your time and reviews. Could you please give your opinion on the following.

{quote}There will be a small race here, which may resulted to miss the events.
Race is between event and reregistration. Original newConnectedZK method events from ZKutil will not handle any expire events. So, just before reregistering if it gets expired event, we may miss that event handling.
 later operations may thow conn loss exception and may miss proper cleanup.{quote}
Actually the window gap between Syncconnected event and Expired event is the sessiontimeout configured for the client. I couldn't see any race between Syncconnected event and expiry event. I agree there could be a high chance of sending Disconnected event to the previous watcher in ZKUtil, but Bookie doesn't have any event handling other than just logging.

Consider in corner case where the client is very busy(in GCing or other cases) and got expired before registering new watcher. In this case anyway down the layer, after instantiation, bookie is using zkclient for checking env(as shown below code) here it would get ZKConnectionLossException and consequently would get shutdown.
{code}
        this.zk = instantiateZookeeperClient(conf);
        checkEnvironment(this.zk);
{code}

So IMHO, we can continue without having anymore extra checks. Whats your opinion?","14/Oct/12 18:31;umamaheswararao;{quote}
Consider in corner case where the client is very busy(in GCing or other cases) and got expired before registering new watcher. In this case anyway down the layer, after instantiation, bookie is using zkclient for checking env(as shown below code) here it would get ZKConnectionLossException and consequently would get shutdown.
this.zk = instantiateZookeeperClient(conf);
        checkEnvironment(this.zk);
So IMHO, we can continue without having anymore extra checks. Whats your opinion?
{quote}

 Here by luck, we have ZK access due to getting Cookie instance, otherwise, we may end up in non-grace full shutdown. i.e, we would have not executed any of the clean up activities which are performed in shutdown. 
Also, semantically checkEnvironment check is not for ZK validation, it was for fileSystem structure consistency. So, I don't feel it is correct to depending on that check. If tomorrow we change the check env conditions, no one will came back to this position and care about this zk connection race right. Also it is right to me that checkEnvironment  is for other purpose and not for zk handle validation.","14/Oct/12 18:31;rakeshr;Plase have a look at the latest patch.
I had missed zkstate change logs previously.  Also have done simple correction in the exception block of readjournal() invocation by returning in case of any exception. ","14/Oct/12 19:00;umamaheswararao;{code}
 } else if (event.getState().equals(
                        Watcher.Event.KeeperState.Expired)) {
{code}
Expired can be with None Event as well right? Seems to me that we are having check here only for non None events right per the latest patch?",15/Oct/12 02:21;rakeshr;Attached latest patch addressing Uma's comment.,16/Oct/12 15:56;ikelly;[~rakeshr] Perhaps you could break out the ZooKeeperWatcher stuff from BOOKKEEPER-390 and put it in this patch. It would solve this problem also and make the BOOKKEEPER-390 more focussed on the ACL stuff. I've also made some comments on BOOKKEEPER-390 about those changes.,"17/Oct/12 18:37;rakeshr;Thanks Ivan. Attached reworked patch, which includes ZooKeeperWatcherBase and please have a look at it.","21/Oct/12 19:23;rakeshr;Attached reworked patch, done small correction on re-checking zookeeper connection status.",25/Oct/12 13:36;ikelly;Committed r1402146. Thanks Rakesh,"25/Oct/12 13:47;hudson;Integrated in bookkeeper-trunk #771 (See [https://builds.apache.org/job/bookkeeper-trunk/771/])
    BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank) (Revision 1402146)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
",25/Oct/12 14:19;ikelly;Added missing file in r1402159,"25/Oct/12 15:53;hudson;Integrated in bookkeeper-trunk #772 (See [https://builds.apache.org/job/bookkeeper-trunk/772/])
    BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank) [missing files] (Revision 1402159)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rename DeliveryThrottle to MessageWindowSize,BOOKKEEPER-415,12610340,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Oct/12 15:00,13/Feb/13 15:46,14/Mar/19 02:39,10/Oct/12 09:46,,,4.2.0,,,,,,0,,"In hedwig server, DeliveryThrottle is a little inaccurate as it suggests that the rate is being limited, rather than a outstanding message limit being reached. I think MessageWindowSize is more accurate, and is analogous to windowing in tcp, which this mechanism actually replaces.",,,,,,,,,,,,,,,,,,,04/Oct/12 15:02;ikelly;BOOKKEEPER-415.diff;https://issues.apache.org/jira/secure/attachment/12547767/BOOKKEEPER-415.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-10 09:44:51.962,,,no_permission,,,,,,,,,,,,,240172,,,Wed Oct 10 17:59:04 UTC 2012,,,,,,0|i00xwv:,3426,,,,,,,,04/Oct/12 15:02;ikelly;Patch is a simple rename,10/Oct/12 09:44;hustlmsp;+1 for renaming. I would bring it in.,10/Oct/12 09:46;hustlmsp;committed as r1396524. thanks Ivan.,"10/Oct/12 17:59;hudson;Integrated in bookkeeper-trunk #747 (See [https://builds.apache.org/job/bookkeeper-trunk/747/])
    BOOKKEEPER-415: Rename DeliveryThrottle to MessageWindowSize (ivank via sijie) (Revision 1396524)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hedwig C++ client: Rename RUN_AS_SSL_MODE to SSL_ENABLED,BOOKKEEPER-413,12609753,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,ikelly,ikelly,ikelly,01/Oct/12 13:38,13/Feb/13 15:46,14/Mar/19 02:39,10/Oct/12 10:10,,,4.2.0,,,,,,0,,"Minor change, SSL_ENABLED is neater IMO.",,,,,,,,,,,,,,,,,,,01/Oct/12 14:03;ikelly;BOOKKEEPER-413.diff;https://issues.apache.org/jira/secure/attachment/12547216/BOOKKEEPER-413.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-10 10:10:28.18,,,no_permission,,,,,,,,,,,,,246942,,,Wed Oct 10 18:24:18 UTC 2012,,,,,,0|i07wvz:,44095,,,,,,,,10/Oct/12 10:10;hustlmsp;SSL_ENABLED is better. +1 for the patch.,10/Oct/12 10:10;hustlmsp;committed as r1396531. thanks Ivan. ,"10/Oct/12 18:24;hudson;Integrated in bookkeeper-trunk #748 (See [https://builds.apache.org/job/bookkeeper-trunk/748/])
    BOOKKEEPER-413: Hedwig C++ client: Rename RUN_AS_SSL_MODE to SSL_ENABLED (ivank via sijie) (Revision 1396531)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/inc/hedwig/client.h
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/channel.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/client.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/test/util.h
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieReadWriteTest will enter the endless loop and will not leave out,BOOKKEEPER-408,12607880,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,liuyang@huawei,liuyang@huawei,17/Sep/12 09:28,13/Feb/13 15:46,14/Mar/19 02:39,13/Dec/12 17:34,4.1.0,,4.2.0,,,bookkeeper-server,,,0,,"When I run the tests of BookKeeper, I found that the test running forever and cannot be finished. The log has the exception that is ""junit.framework.AssertionFailedError: Return code is not OK: -6"". 

I thought this issuse might be come from the synchronization mechanism used by the BookieReadWriteTest.

for example in BookieReadWriteTest.TestReadWriteAsyncSingleClient()
1. when called the function lh.asyncAddEntry(entry.array(), this ,sync), the call back function is addComplete(int, LedgerHandle, long, Object)
2. we can see that in addComplete(..) the function will be fail when rc != BKException.Code.OK, and the x.counter++ will not be called never.
3. we assume that the function addComplete(..) is fail. so, in TestReadWriteAsyncSingleClient(), the while loop enter endless loop because sync.counter < numEntriesToWrite is right forever.

","SUSE System
ZooKeeper server
three BookKeepers",,,,,,,,,,,,,,BOOKKEEPER-525,,,,12/Dec/12 11:25;ikelly;0001-BOOKKEEPER-408-BookieReadWriteTest-will-enter-the-en.patch;https://issues.apache.org/jira/secure/attachment/12560543/0001-BOOKKEEPER-408-BookieReadWriteTest-will-enter-the-en.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-17 10:32:49.258,,,no_permission,,,,,,,,,,,,,249288,,,Mon Dec 24 02:24:15 UTC 2012,,,,,,0|i0a6lr:,57343,,,,,,,,"17/Sep/12 10:32;hustlmsp;-6 means NotEnoughBookiesException. Did you have any other log statements about the bookie failure, which causes not enough bookies.

BTW, I am assuming 'fail()' of a unit test would stop the process, not sure why it doesn't quit.","17/Sep/12 11:06;ikelly;fail() only works if it's called in the junit thread. In this case it'll be run by the bookkeeper callback thread. These calls to fail are all broken, and need to be rejigged. It would be interesting to see why there aren't enough bookies though.","17/Sep/12 12:50;hustlmsp;ah, got it. thanks Ivan for explanation.","18/Sep/12 01:56;liuyang@huawei;when we cannot get enough bookies, the operation about add entry will throw exception, then 'fail()' will be called, the callback function will be done. So, the 'counter' cannot be increment, that cause the while loop enter endless loop.

we must guarantee the test case will be end although we cannot get enough bookies.","18/Sep/12 02:07;umamaheswararao;The question here is, why there are bookie failures inside?
Any logs regarding to that failures?

BTW, if you are running it throw eclipse, you just add the below property in eclipse src/test/resource/log4j.properties file. So, that logs will come on eclipse console.

log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE","18/Sep/12 02:10;umamaheswararao;Instead of using some syncCounter and increment on each entry write callback, if we use ContDownLatch and set the wait timeout, then test will fail if we are not getting the response in time as well right?","18/Sep/12 02:20;umamaheswararao;or, change it to timed waits and add assertion as expected after that to ensure, loop exited only after counter reaches expected entries, otherwise assertion will fail.
But we have to figure out why there are Bookie failure in your tests.",18/Sep/12 03:40;i0exception;[~umamahesh] How about using junit test timeouts @Test(timeout=X)? ,"18/Sep/12 04:17;liuyang@huawei;The warn log show that may be ReadTimeOutException, I am looking the reason why could not connect bookkeeper server frequently? 

/**
* the partial log information about the error
*/
WARN  - [Hashed wheel timer #4:PerChannelBookieClient@488] - Couldn't connect to bookkeeper server
     org.jboss.netty.handler.timeout.ReadTimeoutException
	at org.jboss.netty.handler.timeout.ReadTimeoutHandler.<clinit>(ReadTimeoutHandler.java:84)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.getPipeline(PerChannelBookieClient.java:450)
	at org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:212)
	at org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:188)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connect(PerChannelBookieClient.java:135)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connectIfNeededAndDoOp(PerChannelBookieClient.java:203)
	at org.apache.bookkeeper.proto.BookieClient.addEntry(BookieClient.java:108)
	at org.apache.bookkeeper.client.PendingAddOp.sendWriteRequest(PendingAddOp.java:76)
	at org.apache.bookkeeper.client.PendingAddOp.initiate(PendingAddOp.java:117)
	at org.apache.bookkeeper.client.LedgerHandle$2.safeRun(LedgerHandle.java:539)
	at org.apache.bookkeeper.util.SafeRunnable.run(SafeRunnable.java:31)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
","18/Sep/12 04:17;umamaheswararao;Can do it. That will be one good practice, to ensure no tests will block due to flaky behaviours in tests. I used to follow in my tests, ex: see zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java
At the same time, we should not depend 100% depend on that, untill unless we don't have option for proper assertion. Otherwise we may loose the track where we exactly test hanged. If we have an option to track that, we can assert and throw out with the problem.","18/Sep/12 05:30;umamaheswararao;{noformat}
testOpenException                        =11.381s
testStreamingClients                     =9.793s
testReadWriteAsyncSingleClient           =7.660s
testReadWriteRangeAsyncSingleClient      =6.944s
testReadWriteAsyncSingleClientThrottle   =94.505s
testSyncReadAsyncWriteStringsSingleClient=10.330s
testReadWriteSyncSingleClient            =57.973s
testReadWriteZero                        =75.294s
testMultiLedger                          =128.302s
testReadWriteAsyncLength                 =6.218s
testShutdown                             =899.927s
testReadFromOpenLedger                   =32.631s
testReadFromOpenLedgerOpenOnce           =13.526s
testReadFromOpenLedgerZeroAndOne         =2.478s
testLastConfirmedAdd                     =67.694s
{noformat}

Here is the info ragarding time taken by each test in my local env.",12/Dec/12 11:25;ikelly;Removed fail() calls from callbacks as they do nothing there.,13/Dec/12 06:32;hustlmsp;the new patch looks good for me. +1,13/Dec/12 06:32;hustlmsp;resubmit the patch to trigger pre-commit job.,"13/Dec/12 17:32;ikelly;Jenkins has been down for a couple of days, I've run manually with bin/test-patch --jira=BOOKKEEPER-408 --reset-scm and it comes out clean. Committing",13/Dec/12 17:34;ikelly;Committed as r1421401. Thanks for reviewing Sijie.,"14/Dec/12 06:51;hudson;Integrated in bookkeeper-trunk #860 (See [https://builds.apache.org/job/bookkeeper-trunk/860/])
    BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank) (Revision 1421401)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java
","17/Dec/12 11:37;yians;Good revision. I find the BookieWriteLedgerTest also has the problem. Maybe another jira is needed to clean all the problems.

The source code:
    @Override
    public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {
        if (rc != BKException.Code.OK)
            fail(""Return code is not OK: "" + rc);","18/Dec/12 12:30;yians;BookieFailureTest also has same problem.

like this:
    public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {
        if (rc != 0)
            fail(""Failed to write entry: "" + entryId);
        SyncObj x = (SyncObj) ctx;
        synchronized (x) {
            x.counter++;
            x.notify();
        }
    }",18/Dec/12 12:35;umamaheswararao;Do you mind rising a separate JIRA as this is already closed? Thanks for noticing them.,"24/Dec/12 02:24;yians;@[~umamaheswararao], I don't know whether it is necessary to do this, cause there are many jiras like this, as BOOKKEEPER-523.
Anyway, using the 'Junit Assert' in callback is not a good way. It must be revised through all the test project. The jira is created as BOOKKEEPER-525.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecate non-SubscriptionOptions Subscriber Apis,BOOKKEEPER-404,12607421,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,13/Sep/12 09:33,13/Feb/13 15:46,14/Mar/19 02:39,13/Dec/12 06:27,,,4.2.0,,,hedwig-client,,,0,,"Add deprecation annotation. Add more doc for the SubscriptionOptions versions. Add util methods, to easily create SubscriptionOptions, so that usage is no harder than using the non-SubscriptionOptions versions",,,,,,,,,,,,,,,,,,,12/Dec/12 11:48;ikelly;0001-BOOKKEEPER-404-Deprecate-non-SubscriptionOptions-Sub.patch;https://issues.apache.org/jira/secure/attachment/12560547/0001-BOOKKEEPER-404-Deprecate-non-SubscriptionOptions-Sub.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-12 12:22:12.291,,,no_permission,,,,,,,,,,,,,295927,,,Thu Dec 13 18:44:10 UTC 2012,,,,,,0|i1431b:,231954,,,,,,,,12/Dec/12 11:48;ikelly;Will create new JIRA for utils.,"12/Dec/12 12:22;hadoopqa;Testing JIRA BOOKKEEPER-404


Patch [0001-BOOKKEEPER-404-Deprecate-non-SubscriptionOptions-Sub.patch|https://issues.apache.org/jira/secure/attachment/12560547/0001-BOOKKEEPER-404-Deprecate-non-SubscriptionOptions-Sub.patch] downloaded at Wed Dec 12 11:53:01 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 527
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testServerSideThrottle[1](org.apache.hedwig.server.delivery.TestThrottlingDelivery)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/105/",13/Dec/12 06:26;hustlmsp;+1 for the patch.,13/Dec/12 06:27;hustlmsp;committed as r1421083. thanks Ivan.,"13/Dec/12 18:44;hudson;Integrated in bookkeeper-trunk #859 (See [https://builds.apache.org/job/bookkeeper-trunk/859/])
    BOOKKEEPER-404: Deprecate non-SubscriptionOptions Subscriber Apis (ivank via sijie) (Revision 1421083)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReReadMetadataCb is not executed in the thread responsible for that ledger,BOOKKEEPER-403,12607370,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,i0exception,i0exception,13/Sep/12 00:18,13/Feb/13 15:46,14/Mar/19 02:39,14/Sep/12 09:55,4.2.0,,4.2.0,,,bookkeeper-client,,,0,,Attached a patch to execute the callback in bk.mainWorkerPool instead of on the zookeeper thread.,,,,,,,,,,,,,,,,,,,13/Sep/12 00:22;i0exception;BK-403.patch;https://issues.apache.org/jira/secure/attachment/12544910/BK-403.patch,13/Sep/12 16:29;ikelly;BOOKKEEPER-403.diff;https://issues.apache.org/jira/secure/attachment/12544999/BOOKKEEPER-403.diff,13/Sep/12 11:13;ikelly;BOOKKEEPER-403.diff;https://issues.apache.org/jira/secure/attachment/12544969/BOOKKEEPER-403.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-09-13 11:13:16.394,,,no_permission,,,,,,,,,,,,,293560,,,Fri Sep 14 09:55:18 UTC 2012,,,,,,0|i0tc5z:,169280,,,,,,,,"13/Sep/12 11:13;ikelly;I was chatting to Sijie earlier about how this is a more general problem. Basically, we submit callbacks to the LedgerManager which, in normal operation run in the ZK callback thread. I proposed we create a wrapper around GenericCallback, which, when passed to the LedgerManager, will run the callback in the correct thread. The attached patch implements this.",13/Sep/12 14:09;hustlmsp;the patch looks good for me. +1.,"13/Sep/12 15:08;rakeshr;Hi Ivan, its nice idea of abstraction and looks good. Just few comments:

- @Override tag is missing in OrderedSafeGenericCallback implemetation
{code}
public final void operationComplete(final int rc, final T result) {
    executor.submitOrdered(orderingKey, new SafeRunnable() {
{code}
- I feel, following places also could use OrderedSafeGenericCallback. Whats your opinion?
{code}
LedgerOpenOp.public void operationComplete(int rc, LedgerMetadata metadata)

LedgerHandle.
rereadMetadata(new GenericCallback<LedgerMetadata>() {
     @Override
     public void operationComplete(int rc, LedgerMetadata newMeta) {
           if (rc != BKException.Code.OK) {
              cb.operationComplete(rc, null);
           } else {
              metadata = newMeta;
              recover(cb);
           }
{code}",13/Sep/12 16:21;i0exception;Thanks Ivan. The patch looks good. ,13/Sep/12 16:29;ikelly;New patch addresses Rakesh's comments.,14/Sep/12 08:13;hustlmsp;new patch looks good. +1,14/Sep/12 08:23;rakeshr;Thanks Ivan for the patch. Looking good +1,14/Sep/12 09:55;ikelly;Committed as r1384700. Thanks for reviewing guys.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make the hedwig client in RegionManager configurable.,BOOKKEEPER-397,12606939,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,i0exception,i0exception,i0exception,10/Sep/12 20:50,13/Feb/13 15:47,14/Mar/19 02:39,26/Sep/12 11:05,4.2.0,,4.2.0,,,,,,0,,"The hedwig client used by the region manager uses default client settings. We should provide a way to make this configurable. 

Reviewboard : https://reviews.apache.org/r/7118/",,,,,,,,,,,,,,,,,,,14/Sep/12 18:28;i0exception;BK-397.patch;https://issues.apache.org/jira/secure/attachment/12545187/BK-397.patch,18/Sep/12 04:29;i0exception;BK-397.patch.v1;https://issues.apache.org/jira/secure/attachment/12545520/BK-397.patch.v1,18/Sep/12 16:42;i0exception;BK-397.patch.v2;https://issues.apache.org/jira/secure/attachment/12545580/BK-397.patch.v2,19/Sep/12 05:07;i0exception;BK-397.patch.v3;https://issues.apache.org/jira/secure/attachment/12545671/BK-397.patch.v3,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-09-26 11:05:00.503,,,no_permission,,,,,,,,,,,,,293555,,,Wed Sep 26 11:45:31 UTC 2012,,,,,,0|i0tc1b:,169259,,,,,,,,26/Sep/12 11:05;hustlmsp;committed as r1390401. thanks Aniruddha.,"26/Sep/12 11:45;hudson;Integrated in bookkeeper-trunk #726 (See [https://builds.apache.org/job/bookkeeper-trunk/726/])
    BOOKKEEPER-397: Make the hedwig client in RegionManager configurable. (Aniruddha via sijie) (Revision 1390401)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig
* /zookeeper/bookkeeper/trunk/hedwig-server/conf/hw_region_client.conf
* /zookeeper/bookkeeper/trunk/hedwig-server/conf/hwenv.sh
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compilation issue in TestClient.java of BenchMark ( showing this in eclipse),BOOKKEEPER-396,12606613,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,umamaheswararao,umamaheswararao,umamaheswararao,07/Sep/12 16:25,13/Feb/13 15:46,14/Mar/19 02:39,11/Sep/12 08:31,4.1.0,,4.1.1,4.2.0,,,,,0,,"{code}
import java.util.concurrent.Future;;
{code}

showing here. Simply we can remove one ';'",,,,,,,,,,,,,,,,,,,10/Sep/12 05:09;umamaheswararao;BOOKKEEPER-396.patch;https://issues.apache.org/jira/secure/attachment/12544430/BOOKKEEPER-396.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-10 02:25:30.327,,,no_permission,,,,,,,,,,,,,293579,,,Tue Sep 11 09:07:39 UTC 2012,,,,,,0|i0tcef:,169318,,,,,,,,07/Sep/12 16:30;umamaheswararao;attached a trivial patch.,"10/Sep/12 02:25;hustlmsp;@Uma, seems you are attaching a wrong patch.","10/Sep/12 05:10;umamaheswararao;Yep, sorry, I picked wrong patch while attaching :-) .
I just attached correct one.
",11/Sep/12 08:31;hustlmsp;committed as r1383286. thanks Uma.,"11/Sep/12 08:50;hudson;Integrated in bookkeeper-trunk #702 (See [https://builds.apache.org/job/bookkeeper-trunk/702/])
    BOOKKEEPER-396: Compilation issue in TestClient.java of BenchMark ( showing this in eclipse) (umamahesh via sijie) (Revision 1383286)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java
",11/Sep/12 09:07;hustlmsp;committed as r1383299 in branch 4.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HDFS dep transitively depends on a busted pom,BOOKKEEPER-395,12606507,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,stuhood,stuhood,stuhood,06/Sep/12 23:43,13/Feb/13 15:47,14/Mar/19 02:39,07/Sep/12 05:13,,,4.2.0,,,bookkeeper-client,,,0,,"hadoop-hdfs-0.23.1 depends on commons-daemon-1.0.3, which has a corrupted pom. Without running artifactory in a loosey-goosey [less restrictive mode|http://wiki.jfrog.org/confluence/display/RT12/Using+Artifactory#UsingArtifactory-OvercomingPathErrors], it will refuse to cache that particular dep:
{noformat}
HTTP/1.1 409 The target deployment path 'commons-daemon/commons-daemon/1.0.3/commons-daemon-1.0.3.pom' does not match the POM's expected path prefix 'org/apache/commons/commons-daemon/1.0.3'. Please verify your POM content for correctness and make sure the source path is a valid Maven repository root path.
{noformat}

Since the bookkeeper-benchmark only uses the HDFS Filesystem and config intefaces, commons-daemon is unnecessary, and can be excluded.",,,,,,,,,,,,,,,,,,,06/Sep/12 23:44;stuhood;395.diff;https://issues.apache.org/jira/secure/attachment/12544137/395.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-07 03:30:28.276,,,no_permission,,,,,,,,,,,,,293575,,,Fri Sep 07 05:41:23 UTC 2012,,,,,,0|i0tcdj:,169314,,,,,,,,06/Sep/12 23:44;stuhood;Patch to exclude/explain the commons-daemon dep.,07/Sep/12 03:30;hustlmsp;+1 for the patch. thanks Stu.,07/Sep/12 05:13;hustlmsp;committed as r1381874. thanks Stu.,"07/Sep/12 05:41;hudson;Integrated in bookkeeper-trunk #695 (See [https://builds.apache.org/job/bookkeeper-trunk/695/])
    BOOKKEEPER-395: HDFS dep transitively depends on a busted pom (Stu Hood via sijie) (Revision 1381874)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Racey ConcurrentMap usage in java hedwig-client,BOOKKEEPER-392,12606138,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,stuhood,stuhood,stuhood,04/Sep/12 19:25,13/Feb/13 15:46,14/Mar/19 02:39,13/Sep/12 13:53,,,4.2.0,,,hedwig-client,,,0,,The java hedwig-client misuses ConcurrentMap in various ways.,,,,,,,,,,,,,,,,,,,10/Sep/12 21:13;stuhood;392.diff;https://issues.apache.org/jira/secure/attachment/12544530/392.diff,04/Sep/12 19:43;stuhood;392.diff;https://issues.apache.org/jira/secure/attachment/12543732/392.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-09-05 00:33:16.29,,,no_permission,,,,,,,,,,,,,293558,,,Thu Sep 13 18:13:39 UTC 2012,,,,,,0|i0tc33:,169267,,,,,,,,"04/Sep/12 19:43;stuhood;Merges containsKey+get or get+remove calls into gets/removes, respectively. Uses putIfAbsent or precise remove where appropriate. Also replaces the LinkedList in HedwigClientImpl.host2topic with a threadsafe linked list (CLQ).",04/Sep/12 19:43;stuhood;Applies to trunk.,"05/Sep/12 00:33;hustlmsp;@Stu, the changes looks good.

But I had a question about storeTopic2HostMapping

{code}
+        if (topic2Host.putIfAbsent(pubSubData.topic, host) == null) {
+            if (logger.isDebugEnabled())
+                logger.debug(""Stored info for topic: "" + pubSubData.topic.toStringUtf8() + "", old host: ""
+                            + existingHost + "", new host: "" + host);
+        }
+        ConcurrentLinkedQueue<ByteString> topicsForHost = host2Topics.get(host);
+        if (topicsForHost == null) {
+            ConcurrentLinkedQueue<ByteString> newTopicsList = new ConcurrentLinkedQueue<ByteString>();
+            topicsForHost = host2Topics.putIfAbsent(host, newTopicsList);
+            if (topicsForHost == null) {
+              topicsForHost = newTopicsList;
+            }
         }
+        topicsForHost.add(pubSubData.topic);
     }
{code}

if we failed to put host into topic2Host, I don't think we need to put it into host2Topics. And seems that you had assumption that there is not entry for the given host in topic2Host, which is a bit strict.

I had a different change when working for BOOKKEEPER-70.
https://github.com/sijie/bookkeeper/commit/5ac124f2013f4f1d39559c908320dd91184f806c#L6R452
(my changes for clearAllTopicsForHost has a bit problem. It should use conditional remove #remove(key, oldvalue) to remove from concurrent map in my changes)

Could you take a look at it? How is your opinion?

","10/Sep/12 21:13;stuhood;Good point Sijie: updated.

https://github.com/sijie/bookkeeper/commit/5ac124f2013f4f1d39559c908320dd91184f806c looks like a solid improvement: nice work! It also addresses many of the races I encountered here. What is your timeframe for committing that component of BOOKKEEPER-70? If you think that that linked review will be landing sometime soon (which ticket is it associated with?) I'd be fine with waiting for it to land rather than committing this.","11/Sep/12 05:08;hustlmsp;@Stu, thanks for updating the patch.

the changes are for the subtask BOOKKEEPER-364 of BOOKKEEPER-70. We had finished the works for BOOKKEEPER-70 and began to generate the patches for review and commit. But I think it might take a period. since you had a patch for the race condition and the patch looks pretty good, which is almost ready to be in. I would prefer to commit your patch first.

+1 for the new patch.",13/Sep/12 13:53;hustlmsp;committed as r1384336. thanks Stu.,"13/Sep/12 18:13;hudson;Integrated in bookkeeper-trunk #708 (See [https://builds.apache.org/job/bookkeeper-trunk/708/])
    BOOKKEEPER-392: Racey ConcurrentMap usage in java hedwig-client (Stu Hood via sijie) (Revision 1384336)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper Upgrade is not working.,BOOKKEEPER-387,12606047,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,surendrasingh,surendrasingh,surendrasingh,04/Sep/12 09:27,13/Feb/13 15:46,14/Mar/19 02:39,07/Sep/12 05:27,4.1.0,,4.1.1,4.2.0,,bookkeeper-server,,,0,,"I am trying to upgrade BK from 4.1.0 to 4.2.0, but it will log as ""Directory is current, no need to upgrade” even then it will continue and fail.
and throwing following exception.
{code}
2012-09-03 17:25:12,468 - ERROR - [main:FileSystemUpgrade@229] - Error moving upgraded directories into place /home/BK4.1/bookkeeper1/ledger/upgradeTmp.2433718456734190 -> /home/BK4.1/bookkeeper1/ledger/current
org.apache.commons.io.FileExistsException: Destination '/home/BK4.1/bookkeeper1/ledger/current' already exists
        at org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2304)
        at org.apache.bookkeeper.bookie.FileSystemUpgrade.upgrade(FileSystemUpgrade.java:225)
        at org.apache.bookkeeper.bookie.FileSystemUpgrade.main(FileSystemUpgrade.java:367)
{code}
",,,,,,,,,,,,,,,,,,,07/Sep/12 03:28;hustlmsp;BOOKKEEPER-387.diff;https://issues.apache.org/jira/secure/attachment/12544156/BOOKKEEPER-387.diff,04/Sep/12 13:49;surendrasingh;BOOKKEEPER-387.patch;https://issues.apache.org/jira/secure/attachment/12543671/BOOKKEEPER-387.patch,05/Sep/12 13:54;surendrasingh;BOOKKEEPER-387_1.patch;https://issues.apache.org/jira/secure/attachment/12543855/BOOKKEEPER-387_1.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-09-04 11:29:26.592,,,no_permission,,,,,,,,,,,,,250332,,,Fri Sep 07 06:00:57 UTC 2012,,,,,,0|i0ax6f:,61648,,,,,,,,"04/Sep/12 11:29;hustlmsp;@surendra, Upgrade just needed to be run when upgrading from 4.0.0 to 4.1.0, since there is directories layout changes. from 4.1.0 to 4.2.0, there is no directory layout changes as far now, so you don't need to run upgrade tool. ","04/Sep/12 11:56;surendrasingh;@sijie
Thanks for looking this issue.
But I have one question.

If in 4.1 and 4.2 directory layout same then after logging this log upgrade process should stop but it will continue and fail when UpgradeTemp Dir move to Current Dir.


{code}
 if (version == Cookie.CURRENT_COOKIE_LAYOUT_VERSION){
                    LOG.info(""Directory is current, no need to upgrade"");
 }
{code}","04/Sep/12 13:04;vinayrpet;Hi Surendra,
You are correct. Upgrade should not continue when upgrade not at all required. It can return from there.. ","04/Sep/12 13:07;hustlmsp;@surendra,

yes, ur right. could you help generating a patch for it?",04/Sep/12 13:49;surendrasingh;Attached patch for issue,"05/Sep/12 10:53;hustlmsp;{code}
                if (version == Cookie.CURRENT_COOKIE_LAYOUT_VERSION) {
                    LOG.info(""Directory is current, no need to upgrade"");
                    return;
                }
{code}

Actually, the version checking is per directory. so you just could skip the directory has been upgraded, it would be better to use 'continue' instead of 'return'.

besides that, if there is no directory to upgrade. I think we don't need to write the new cookie to ZooKeeper.

{code}

if (deferredMoves.isEmpty()) {
    return;
}
            try {
                c.writeToZooKeeper(zk, conf);
            } catch (KeeperException ke) {
                LOG.error(""Error writing cookie to zookeeper"");
                throw new BookieException.UpgradeException(ke);
            }
{code}

","05/Sep/12 12:18;surendrasingh;@sijie
 
Thanks

yes, you are rite.

i will generate new path and attach here.",05/Sep/12 13:55;surendrasingh;I have attached updated patch.,07/Sep/12 03:15;hustlmsp;+1 for the patch.,"07/Sep/12 03:28;hustlmsp;@surendra, I forgot that we had a test case for upgrade tool. so it would be better to add a test case for it. I wrote a test case based on your patch. (w/o your changes, the test case would fail which reproduces the issue your report).

could you help taking a look at the test case?","07/Sep/12 05:11;surendrasingh;@Sijie

Thanks

+1, it’s good.

This test case is able reproduce issue w/o my changes.
",07/Sep/12 05:27;hustlmsp;committed as r1381879 in trunk. thanks surendra.,07/Sep/12 05:31;hustlmsp;committed as r1381882 in branch 4.1.,"07/Sep/12 06:00;hudson;Integrated in bookkeeper-trunk #696 (See [https://builds.apache.org/job/bookkeeper-trunk/696/])
    BOOKKEEPER-387: BookKeeper Upgrade is not working. (surendra via sijie) (Revision 1381879)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in BookieJournalTest,BOOKKEEPER-383,12605072,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,hustlmsp,hustlmsp,hustlmsp,27/Aug/12 13:28,13/Feb/13 15:46,14/Mar/19 02:39,07/Sep/12 13:24,4.1.0,,4.2.0,,,,,,0,,"Running org.apache.bookkeeper.bookie.BookieJournalTest
Exception in thread ""GarbageCollectorThread"" java.lang.NullPointerException
	at org.apache.bookkeeper.meta.AbstractZkLedgerManager.asyncGetLedgersInSingleNode(AbstractZkLedgerManager.java:191)
	at org.apache.bookkeeper.meta.AbstractZkLedgerManager.getLedgersInSingleNode(AbstractZkLedgerManager.java:268)
	at org.apache.bookkeeper.meta.FlatLedgerManager.garbageCollectLedgers(FlatLedgerManager.java:144)
	at org.apache.bookkeeper.bookie.GarbageCollectorThread.doGcLedgers(GarbageCollectorThread.java:226)

The exception is found in https://builds.apache.org/job/bookkeeper-trunk/671/console",,,,,,,,,,,,,,,,,,,03/Sep/12 10:44;hustlmsp;BOOKKEEPER-383.diff;https://issues.apache.org/jira/secure/attachment/12543529/BOOKKEEPER-383.diff,27/Aug/12 13:31;hustlmsp;BOOKKEEPER-383.diff;https://issues.apache.org/jira/secure/attachment/12542603/BOOKKEEPER-383.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-08-27 16:46:51.644,,,no_permission,,,,,,,,,,,,,293572,,,Fri Sep 07 14:41:37 UTC 2012,,,,,,0|i0tccn:,169310,,,,,,,,"27/Aug/12 13:30;hustlmsp;this exception thrown in BookieJournalTest, because BookieJournalTest starts bookie with null zkserver.

the fix is quite straightforward, changing #start to #readJournal.",27/Aug/12 13:31;hustlmsp;attach a patch to fix NPE in BookieJournalTest.,"27/Aug/12 16:46;ikelly;i've seen the same in TestProtoVersions & BookieClientTest. TestProtoVersions uses BookieClientTest. I don't think they can be fixed in the same manner, as BookieClientTest needs to start the bookie server to listen on connections. One option is to never start GC if zk is null.",03/Sep/12 10:44;hustlmsp;attach a patch to avoid garbage collecting when zookeeper handle is null.,03/Sep/12 10:46;hustlmsp;currently garbage collection thread isn't bound with zookeeper after BOOKKEEPER-203. so we still start GC thread but skips real gc actions in those ledger manager who uses ZooKeeper.,07/Sep/12 13:24;ikelly;Committed as r1382016. Thanks Sijie.,"07/Sep/12 14:41;hudson;Integrated in bookkeeper-trunk #698 (See [https://builds.apache.org/job/bookkeeper-trunk/698/])
    BOOKKEEPER-383: NPE in BookieJournalTest  (sijie via ivank) (Revision 1382016)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
space missed at concatenations in GarbageCollectorThread logging,BOOKKEEPER-382,12604964,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,,brahmareddy,brahmareddy,25/Aug/12 09:08,13/Feb/13 15:46,14/Mar/19 02:39,27/Aug/12 13:16,4.0.0,4.1.0,4.2.0,,,bookkeeper-server,,,0,,,,,,,,,,,,,,,,,,,,,25/Aug/12 09:31;brahmareddy;BOOKKEEPER-382.patch;https://issues.apache.org/jira/secure/attachment/12542402/BOOKKEEPER-382.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-25 13:04:11.672,,,no_permission,,,,,,,,,,,,,293577,,,Mon Aug 27 13:49:47 UTC 2012,,,,,,0|i0tcdz:,169316,,,,,,,,"25/Aug/12 13:04;umamaheswararao;Thanks Brahma for noticing this.

+1 for the change.

@Sijie, could you please push this in if you like this change? ( it's just a trivial change)",27/Aug/12 13:16;hustlmsp;committed as r1377671. thanks Brahma. thanks Uma for reviewing.,"27/Aug/12 13:20;hustlmsp;committed as r1377673 in 4.1 branch.

BTW, Ivan, could you help assign this jira to Brahma. seems that I could not assign to him :-(","27/Aug/12 13:49;hudson;Integrated in bookkeeper-trunk #672 (See [https://builds.apache.org/job/bookkeeper-trunk/672/])
    BOOKKEEPER-382: space missed at concatenations in GarbageCollectorThread logging (Brahma via sijie) (Revision 1377671)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReadLastConfirmedOp's Logger class name is wrong,BOOKKEEPER-381,12604963,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,surendrasingh,surendrasingh,surendrasingh,25/Aug/12 08:46,13/Feb/13 15:46,14/Mar/19 02:39,27/Aug/12 12:44,,,4.2.0,,,bookkeeper-client,,,0,,"In ReadLastConfirmedOp class logger name configured LedgerRecoveryOp.class.

{code}
class ReadLastConfirmedOp implements ReadEntryCallback {
static final Logger LOG = LoggerFactory.getLogger(LedgerRecoveryOp.class);
{code}

It should be ReadLastConfirmedOp.class.",,,,,,,,,,,,,,,,,,,25/Aug/12 10:08;surendrasingh;BOOKKEEPER-381.patch;https://issues.apache.org/jira/secure/attachment/12542403/BOOKKEEPER-381.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-25 13:10:42.624,,,no_permission,,,,,,,,,,,,,293578,,,Mon Aug 27 13:35:02 UTC 2012,,,,,,0|i0tce7:,169317,,,,,,,,25/Aug/12 10:08;surendrasingh;Attaching patch for issue,"25/Aug/12 13:10;umamaheswararao;Hey Surendra,

Patch looks good.

Thanks a lot, for niticing this. also good that you have cleaned some of the existing unused imports in the code.

+1 for the change.",27/Aug/12 04:36;surendrasingh;Thanks Uma for reviewing,"27/Aug/12 12:20;hustlmsp;thanks Surendra. +1 for the patch. also thanks Uma for reviewing.

committing it now.",27/Aug/12 12:44;hustlmsp;committed as r1377656.,"27/Aug/12 13:19;hudson;Integrated in bookkeeper-trunk #671 (See [https://builds.apache.org/job/bookkeeper-trunk/671/])
    BOOKKEEPER-381: ReadLastConfirmedOp's Logger class name is wrong (surendra via sijie) (Revision 1377656)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java
",27/Aug/12 13:35;hustlmsp;committed as r1377678 in branch 4.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Check service name in bookie start/stop script.,BOOKKEEPER-372,12603861,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,nijel,hustlmsp,hustlmsp,17/Aug/12 14:02,13/Feb/13 15:46,14/Mar/19 02:39,17/Aug/12 16:26,,,4.1.1,4.2.0,,,,,0,,Created a patch to check service name in start/stop script mentioned in BOOKKEEPER-296.,,,,,,,,,,,,,,,,,,,17/Aug/12 14:04;hustlmsp;BOOKKEEPER-372.diff;https://issues.apache.org/jira/secure/attachment/12541363/BOOKKEEPER-372.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-17 16:26:38.956,,,no_permission,,,,,,,,,,,,,293545,,,Fri Sep 07 05:51:36 UTC 2012,,,,,,0|i0tbuf:,169228,,,,,,,,17/Aug/12 14:04;hustlmsp;put the delta patch for BOOKKEEPER-296 here.,"17/Aug/12 16:26;ikelly;Committed as r1374345. Thanks for the fix nijel, and Sijie for moving it over.","17/Aug/12 17:03;hudson;Integrated in bookkeeper-trunk #655 (See [https://builds.apache.org/job/bookkeeper-trunk/655/])
    BOOKKEEPER-372: Check service name in bookie start/stop script. (nijel via ivank) (Revision 1374345)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper-daemon.sh
",07/Sep/12 05:51;hustlmsp;committed as r1381888 in branch 4.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in hedwig hub client causes hedwig hub to shut down.,BOOKKEEPER-371,12603840,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,i0exception,i0exception,i0exception,17/Aug/12 10:42,13/Feb/13 15:47,14/Mar/19 02:39,28/Aug/12 12:54,,,4.2.0,,,hedwig-client,,,0,,"The hedwig client was connected to a remote region hub that restarted resulting in the channel getting disconnected. 


2012-08-15 17:47:42,443 - ERROR - [pool-20-thread-1:TerminateJVMExceptionHandler@28] - Uncaught exception in thread pool-20-thread-1
java.lang.NullPointerException
        at org.apache.hedwig.client.netty.HedwigClientImpl.getResponseHandlerFromChannel(HedwigClientImpl.java:323)
        at org.apache.hedwig.client.handlers.MessageConsumeCallback.operationFinished(MessageConsumeCallback.java:75)
        at org.apache.hedwig.client.handlers.MessageConsumeCallback.operationFinished(MessageConsumeCallback.java:41)
        at org.apache.hedwig.server.regions.RegionManager$1$1$1.operationFinished(RegionManager.java:208)
        at org.apache.hedwig.server.regions.RegionManager$1$1$1.operationFinished(RegionManager.java:202)
        at org.apache.hedwig.server.persistence.ReadAheadCache$PersistCallback.operationFinished(ReadAheadCache.java:194)
        at org.apache.hedwig.server.persistence.ReadAheadCache$PersistCallback.operationFinished(ReadAheadCache.java:171)
        at org.apache.hedwig.server.persistence.BookkeeperPersistenceManager$PersistOp$1.safeAddComplete(BookkeeperPersistenceManager.java:548)
        at org.apache.hedwig.zookeeper.SafeAsynBKCallback$AddCallback.addComplete(SafeAsynBKCallback.java:93)
        at org.apache.bookkeeper.client.PendingAddOp.submitCallback(PendingAddOp.java:165)
        at org.apache.bookkeeper.client.LedgerHandle.sendAddSuccessCallbacks(LedgerHandle.java:643)
        at org.apache.bookkeeper.client.PendingAddOp.writeComplete(PendingAddOp.java:159)
        at org.apache.bookkeeper.proto.PerChannelBookieClient.handleAddResponse(PerChannelBookieClient.java:577)
        at org.apache.bookkeeper.proto.PerChannelBookieClient$7.safeRun(PerChannelBookieClient.java:525)
        at org.apache.bookkeeper.util.SafeRunnable.run(SafeRunnable.java:31)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:722)


At 2012-08-15 17:47:42,443, the channel was disconnected as well. 

I believe the following code in the MessageConsumeCallback is causing this problem. 

 Channel topicSubscriberChannel = client.getSubscriber().getChannelForTopic(topicSubscriber);
        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()
        .messageConsumed(messageConsumeData.msg);

The channel was retrieved without checking if it was closed and then getPipeline().getLast() was called which returned a null value resulting in a NPE. Moreover, we need to check if the returned Response handler is not null because there is a race here if channel.close() is called after we retrieve the channel and before we call messageConsumed(). 

I guess the same applies for other instances where we use this.
Does the above explanation seem right? 

",,,,,,,,,,,,BOOKKEEPER-144,,,,,,,22/Aug/12 17:39;i0exception;BK-371.patch;https://issues.apache.org/jira/secure/attachment/12542001/BK-371.patch,20/Aug/12 08:11;i0exception;BK-371.patch;https://issues.apache.org/jira/secure/attachment/12541567/BK-371.patch,28/Aug/12 12:52;hustlmsp;BOOKKEEPER-371.diff;https://issues.apache.org/jira/secure/attachment/12542763/BOOKKEEPER-371.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-08-17 14:13:48.97,,,no_permission,,,,,,,,,,,,,293552,,,Tue Aug 28 13:49:06 UTC 2012,,,,,,0|i0tbzr:,169252,,,,,,,,"17/Aug/12 14:13;hustlmsp;@Aniruddha. yup, your explanation is right. this bug is same to BOOKKEEPER-144. we need to check ResponseHandler is null or not before calling its methods. 

Could you generate a patch for it?","20/Aug/12 08:11;i0exception;It would be great if you could review the patch. Also, is there some thing similar to reviewboard where I can view the patches? ","20/Aug/12 12:55;hustlmsp;thanks Aniruddha.

the fix looks good to me. but seems that the patch could not apply to latest trunk. I think your code base is before BOOKKEEPER-331. could you rebase the patch to latest trunk?

> is there some thing similar to reviewboard where I can view the patches?
apache's review board is here : https://reviews.apache.org/
you could find those patch available's jiras in https://issues.apache.org/jira/browse/BOOKKEEPER#selectedTab=com.atlassian.jira.plugin.system.project%3Aissues-panel
","22/Aug/12 17:44;i0exception;Here's the reviewboard diff addressing this. 

https://reviews.apache.org/r/6734/","28/Aug/12 12:54;hustlmsp;committed as r1378112.

thanks Aniruddha for the patch. 

BTW: it would be better to put the patch in jira when you uploading to review board :-)","28/Aug/12 13:49;hudson;Integrated in bookkeeper-trunk #679 (See [https://builds.apache.org/job/bookkeeper-trunk/679/])
    BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie) (Revision 1378112)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledger will never recover if one of the quorum bookie is down forever and others dont have entry,BOOKKEEPER-365,12603455,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,14/Aug/12 14:09,13/Feb/13 15:46,14/Mar/19 02:39,13/Dec/12 11:33,4.0.0,4.1.0,4.2.0,,,,,,0,,"As discussed in BOOKKEEPER-355, current fix to handle the below issue is not correct. Need to find out new solution
If some bookies of a quorum gone forever, some bookies of this quorum are still alive but doesn't have that entry (NoSuchEntry or NoSuchLedger), then the ledger doesn't have any evidence to recovery/close it.",,,,,,,,,,BOOKKEEPER-355,,BOOKKEEPER-361,BOOKKEEPER-356,,,,,,12/Dec/12 19:58;hustlmsp;BOOKKEEPER-365.diff;https://issues.apache.org/jira/secure/attachment/12560626/BOOKKEEPER-365.diff,12/Dec/12 05:46;hustlmsp;BOOKKEEPER-365.diff;https://issues.apache.org/jira/secure/attachment/12560509/BOOKKEEPER-365.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-04 19:30:23.904,,,no_permission,,,,,,,,,,,,,255149,,,Fri Dec 14 06:51:28 UTC 2012,,,,,,0|i0epof:,83922,,,,,,,,"14/Aug/12 15:09;hustlmsp;I would try to summarize the problem of recovery read causing by current read strategy.

suppose A, B, C is the quorum that an entry try to read.

1) if A, B returns NoSuchEntry/NoSuchLedger, C couldn't connect. the read response return CouldNotConnectException.
2) if A couldn't connect, B, C returns NoSuchEntry/NoSuchLedger. the read response return NoSuchEntry/NoSuchLedger.

LedgerRecovery treats 1) as failure would not close ledger while treats 2) as normal case to close the ledger.

But neither 1) nor 2) acts correctly.

For 1), if recovery read tries read an non-existed entry, all A, B, C don't have the entry. if C goes down't forever, BookKeeperAdmin runs BookieRecovery to replace C. But it still can't close the ledger to proceed recovery. so the ledger would not be available for read.

For 2), closing the ledger would cause entry loss if A encountering a transient failure such as network partition.

One possible idea for recovery read of last entry, we only close the ledger when received NoSuchLedger/NoSuchEntry from all quorums, which resolves 2). But it still have problem 1) if a machine is gone forever. for 1), the ledger status is undetermined. it would cause lots of ledgers are unreadable (could not be open) if we try to replace a bookie (using BookieAdmin) which happens to be the last bookie in last ensemble. 

Just wrote down my previous ideas. Welcome for comments.","04/Nov/12 19:30;yx3zhu@gmail.com;In general, Quorum based read/write requires that Qw + Qr > Q. e.g. the ensemble size is 3, write quorum is 2, read quorum needs to be at least 2.

In BK, we relax it by using read quorum 1. It works because it never updates an entry once its written.

In your example, it seems the ensemble size 3, read quorum 1, write quorum 2.

During recovery, we can raise the standard, requiring read quorum 2, which address above issue.

","04/Nov/12 20:15;yx3zhu@gmail.com;To add more detail, the recovery needs to consult at least read-quorum (2) bookies to get last-confirmed entry id, instead of max of all, uses the max entry id which at least two bookies have. Let us call this read_quorum_rule.

Now we go back to your example,
1) can proceed since both A, B claim no entries for the ledger, the last-confirmed-entry-id is 0 based on the read_quorum_rule.
2) is correct, as B and C claim no entries for the ledger.

Of course, if recovery cannot reach at least read-quorum(2) bookies, then it cannot close the ledger.

The reasoning is based on the fact that if Write-quorum is not reached, then the entry is not acknowledged to clients. It is legal for it to be lost.
","11/Dec/12 16:02;fpj;Let me add a few comments to this discussion.

In Sijie's example, has the entry is being read ever written successfully to all of A, B, and C? From the example, it is not clear, but I'm assuming that the write quorum is 3. If so, then it violates an assumption we make for the system. We can detect corrupt entries with the digest, but we can't really always guarantee recovery in the case that bookies drop entries altogether. 

To simplify perhaps the discussion and illustrate what we guarantee, say that we write entries to two bookies. When it is time to read a given entry (successfully written) let's say that one bookie has corrupted it and the other is partitioned away. The client executing the recovery procedure see the corrupt copy of the entry and it doesn't know if the other bookie has a good copy or not. If it does, then the entry has been written successfully. If it doesn't, then the entry hasn't been written successfully. To decide, we need the second bookie, so we can't close the ledger until the second bookie comes back. We should perhaps review what exception we would get in this case. 

In Andrew's observation, it is correct that if the client hasn't written enough copies (ack quorum), then we don't guarantee that the entry will be there when the ledger is closed. Keep in mind that we don't use all possible read/write quorums, since we pick quorums in a round-robin fashion. When recovering a ledger, we need to touch every write quorum we can possibly use to fence off the writer. Read and write quorums overlap fully by design. 

One point I don't understand is why we should expect to get the same LAC (Last Add Confirmed) from two different bookies. Each bookie could have a different one, and it would be ok. Also, keep in mind that LAC is only a hint. After we pick a LAC, we still try to read after that value to see how far we can go.

Finally, it would be good to decide if there is anything here to fix for 4.2.0. I'm smelling that there isn't, but I'd like to hear opinions.","11/Dec/12 22:22;hustlmsp;Rethinking a bit of BOOKKEEPER-365 and BOOKKEEPER-355. They are quite irrelative.

NoSuchEntry and NoSuchLedger are treated as the termination condition for LedgerRecovery. So it is important that how to decide it was NoSuchEntry/NoSuchLedger. otherwise, the client would be be mislead.

Currently we used a kind of read-all-write-quorums to ensure it was actually NoSuchLedger and NoSuchEntry. But it wasn't necessary, we just need check at least (write_quorum_size - ack_quorum_size + 1) bookies regarding entries missing case. So when the write_quorum_size and ack_quorum_size is same, we just need 1 bookie to confirm NoSuchLedger and NoSuchEntry (it is what we did currently). But it should be fixed since we already separated ack_quorum_size from write_quorum_size. This jira tends to fix it.

Go back to entries/ledgers missing case. How would missing case happen?

1) a ledger disk (ledger directory) doesn't mount correctly. All the ledgers in that ledger disk would be lost and respond NoSuchLedger.
2) an entry is corrupted. 
3) A brand new bookie is replaced when changing ensemble.
4) a ledger index file is removed or truncated by mistake.
5) some other bugs causing entries missing.

1) is already addressed by Cookie. 

for 2), bookie should respond ReadException rather than NoSuchLedger and NoSuchEntry. so it would be treated as a valid read instead of NoSuchLedger and NoSuchEntry. so it would not affect how we decide if it was NoSuchEntry.

for 3), it was actually the root cause of BOOKKEEPER-355. A brand new bookie is introduced in last ensemble which affect how we decide if it was NoSuchEntry/NoSuchLedger. Lets take an example from BOOKKEEPER-355.

Suppose there are 3 bookie A, B, C. ensemble size = 2, write quorum size = 2, ack quorum size = 1.

1) Ledger L is created with A, B.
2) Add entry 0. entry 0 is written to A. but failed to add to B.
3) A client came in and fence ledger L.
4) client reads entry 0 and try to add this entry back to A, B again.
5) network partition happened, client could not connect to A.
6) C is picked up to replace A.
7) B, C are not connected. client failed the recovery
8) another client tried to recover again.
9) it connected to B, C. they respond NoSuchLedger. and the ledger is closed with zero entries. and entry 0 is lost.

the problem is that we replaced C with A before writing recovered entries, which caused the info in A are lost, which would cause wrong decision during ledger recover. even worse, if the whole ensemble is replaced totally, we lost all the info to recover a ledger. it would be pretty bad.

so fixing BOOKKEEPER-355 doesn't depend on how we read from the quorum, but how we could avoid such replacement by mistake.

for 4), I think it should not be addressed by the project itself, shouldn't it?

for 5), I have to say we need to avoid such bugs at the best.

I think for BOOKKEEPER-355, we have to fix it in 4.2.0. otherwise, it looks bad. for BOOKKEEPER-365, we need to add some code to cover the cases we separating write_quorum_size and ack_quorum_size. so it tends to be in 4.2.0 too.","12/Dec/12 05:46;hustlmsp;Attach a patch tries to address the issue separating write_quorum_size and ack_quorum_size.

the patch includes:

1) a test case produce the issue separating write_quorum_size and ack_quorum_size.
2) move LedgerRecoveryTest to client package, for ease to access ledger metadata. and it also make more sense that ledger recovery is a client procedure.
3) the fix check how many missed read (NoSuchLedger/NoSuchEntry) we had received and if it reaches more than (write_quorum_size - ack_quorum_size + 1) and there was no sensible exceptions (like ReadException) found during reading. we treated the entry is missed, return submit NoSuchEntry to client.","12/Dec/12 14:47;ikelly;Part of the problem here is that we're updating ledger metadata on recovery before we actually write anything to the new bookie. On an active ledgerhandle we need to update the metadata before writing so that we don't loose data. But on a recovery ledger handle, we can do all the recovery, and just update the ledger handle when we close. So why don't we do just that? We already have a ReadOnlyLedgerHandle. We can just block metadata updates for handleBookieFailure and that should solve the problem.

","12/Dec/12 16:21;ikelly;Actually, the client will never get NoSuchLedger back from the bookie. It only ever gets NoSuchEntry. See PerChannelBookieClient.java. This should allow you to make your patch simpler. I'm unclear on what maxMissedReadsAllowed actually means.","12/Dec/12 18:29;hustlmsp;{quote}
But on a recovery ledger handle, we can do all the recovery, and just update the ledger handle when we close. So why don't we do just that? We already have a ReadOnlyLedgerHandle. We can just block metadata updates for handleBookieFailure and that should solve the problem.
{quote}

yup. this is the idea fixing BOOKKEEPER-355, which the case 3) I described in previous comment.

for this jira, I tends to fix the issue caused by separating write_quorum_size and ack_quorum_size.

{quote}
It only ever gets NoSuchEntry. See PerChannelBookieClient.java. This should allow you to make your patch simpler
{quote}

You are right. I missed that part in PerChannelBookieClient.

{quote}
I'm unclear on what maxMissedReadsAllowed actually means.
{quote}

maxMissedReadsAllowed means the max number of NoSuchEntry reads happened in a quorum. if this number is larger than (write_quorum_size - ack_quorum_size), it means that the entry hasn't ack'ed successfully based on the guarantee provides by 'ack_quorum'.

 ","12/Dec/12 19:19;ikelly;ah, so the test in BOOKKEEPER-355 and your test are different. I didn't go through them line by line, as they looked very similiar, I thought you were fixing 355 within this patch also. In that case, I have a preliminary patch for 355, ill post it tomorrow after I submit this.

{quote}
maxMissedReadsAllowed means the max number of NoSuchEntry reads happened in a quorum. if this number is larger than (write_quorum_size - ack_quorum_size), it means that the entry hasn't ack'ed successfully based on the guarantee provides by 'ack_quorum'.{quote}
Ok, I understand now. If the number of NoSuchEntry is greater than the difference between ack quorum and write quorum, then the ack quorum could never have been completed. However, in your patch, you have
{code}
maxMissedReadsAllowed = lh.metadata.getWriteQuorumSize() - lh.metadata.getAckQuorumSize() + 1;
{code}
Is the + 1 correct?",12/Dec/12 19:58;hustlmsp;Update a new patch to reflect right meaning for maxMissingReadsAllowed. and also remove NoSuchLedger checking in the code.,"12/Dec/12 20:01;hustlmsp;{quote}
ah, so the test in BOOKKEEPER-355 and your test are different. I didn't go through them line by line, as they looked very similiar, I thought you were fixing 355 within this patch also.
{quote}

I think it would fix BOOKKEEPER-355 because the test case in BOOKKEEPER-355 is not perfect to cover the reason you described.

the solution you described in the previous comment would be the right way to fix BOOKKEEPER-355.

{quote}
Is the + 1 correct?
{quote}

Update a new patch to reflect to right meaning of maxMissingReadsAllowed.","12/Dec/12 22:15;fpj;Hey guys, I'm trying to catch up with all the updates. If I understand your patch, Sijie, you're making sure that we return NoSuchEntry when enough bookies say they don't know about a given entry. Your patch also performs this check using write and quorum sizes. If this is the case, it sounds reasonable to me.

I don't particularly like the example you used here, though:  

https://issues.apache.org/jira/browse/BOOKKEEPER-365?focusedCommentId=13529398&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13529398

If ack quorum size is 1, then we can't tolerate a single failure, consequently the example is not fault tolerant by definition. Replacing the bookie actually is the wrong thing to do, but I think it is a special case that we shouldn't take care of. 

I was actually wondering about warning users in the case they use such a value for ack quorums.","13/Dec/12 05:13;hustlmsp;{quote}
If this is the case, it sounds reasonable to me.
{quote}

Yes, as you described.

{quote}
If ack quorum size is 1, then we can't tolerate a single failure, consequently the example is not fault tolerant by definition.
{quote}

Taking quorum size 1 just to ease explaining that it was a bad idea to replace a bookie before writing entries for a recover procedure. I think we need to avoid it using Ivan's proposal. This would be adressed in BOOKKEEPER-355. Ivan already worked on it, I think.","13/Dec/12 11:31;ikelly;new patch lgtm +1

committing.",13/Dec/12 11:33;ikelly;Committed as r1421235. Thanks Sijie.,"14/Dec/12 06:51;hudson;Integrated in bookkeeper-trunk #860 (See [https://builds.apache.org/job/bookkeeper-trunk/860/])
    BOOKKEEPER-365: Ledger will never recover if one of the quorum bookie is down forever and others dont have entry (sijie via ivank) (Revision 1421235)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Ledger recovery will mark ledger as closed with -1, in case of slow bookie is added to ensemble during  recovery add",BOOKKEEPER-355,12602144,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,vinayrpet,vinayrpet,08/Aug/12 10:02,13/Feb/13 15:46,14/Mar/19 02:39,07/Jan/13 11:25,4.1.0,4.2.0,4.2.0,,,bookkeeper-server,,,0,,"Scenario:
------------
1. Ledger is created with ensemble and quorum size as 2, written with one entry
2. Now first bookie is in the ensemble is made down.
3. Another client fence and trying to recover the same ledger
4. During this time ensemble change will happen and new bookie will be added. But this bookie is not able to connect.
5. This recovery will fail.
7. Now previously added bookie came up.
8. Another client trying to recover the same ledger.
9. Since new bookie is first in the ensemble, doRecoveryRead() is reading from that bookie and getting NoSuchLedgerException and closing the ledger with -1

i.e. Marking the ledger as empty, even though first client had successfully written one entry.",,,,,,,,,,,,,,HDFS-3769,,,,,04/Jan/13 13:13;ikelly;0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch;https://issues.apache.org/jira/secure/attachment/12563287/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch,02/Jan/13 16:15;ikelly;0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch;https://issues.apache.org/jira/secure/attachment/12562919/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch,18/Dec/12 11:28;ikelly;0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch;https://issues.apache.org/jira/secure/attachment/12561468/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch,14/Dec/12 10:20;ikelly;0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch;https://issues.apache.org/jira/secure/attachment/12560947/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch,13/Dec/12 16:30;ikelly;0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch;https://issues.apache.org/jira/secure/attachment/12560802/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch,19/Dec/12 18:12;ikelly;0003-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch;https://issues.apache.org/jira/secure/attachment/12561749/0003-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch,09/Aug/12 14:51;vinayrpet;BOOKKEEPER-355.patch;https://issues.apache.org/jira/secure/attachment/12540037/BOOKKEEPER-355.patch,08/Aug/12 16:03;vinayrpet;BOOKKEEPER-355.patch;https://issues.apache.org/jira/secure/attachment/12539886/BOOKKEEPER-355.patch,,,,,,,,,8.0,,,,,,,,,,,,,,,,,,,2012-08-09 00:50:39.178,,,no_permission,,,,,,,,,,,,,295933,,,Mon Jan 07 12:31:28 UTC 2013,,,,,,0|i1432n:,231960,,,,,,,,08/Aug/12 16:03;vinayrpet;Attaching patch,"09/Aug/12 00:50;hustlmsp;Thanks Vinay.

I think this issue is related to jira BOOKKEEPER-163. But it is a bit different. NoSuchLedger is due to a new bookie is selected to do recovery add, but the new bookie failed to add the entry. so next recovery operation would encountered NoSuchLedger exception and close ledger.

The test case you added seems OK for me. A few comments about your patch:
1) it would be better to not add separated read code path in LedgerRecoveryOp. You could still leverage PendingReadOp, but added a method #initiateWithRecovery() to tell PendingReadOp is a recovery read.
2) I don't like the idea to send all request to the quorum and wait all responses. It is totally bad in a distributed system that you could not depends on all bookies are alive. And I think NoSuchLedger is a rare case, so how about reading the first bookie, if it responded with NoSuchLedger, we had to check next bookie until we received all bookies in quorum responded NoSuchLedger. Then we know it is NoSuchLedger and finished recovery and close it.

As the explanation, it is a kind of special read strategy used for recovery read. so I think this jira could leverage a clean ReadStrategy we introduced in BOOKKEEPER-336 to provide a recovery read strategy.","09/Aug/12 06:19;rakeshr;Hi Vinay its good catch.

@Sijie
I like the approach. IMHO little more needs to see the case of disk failures.

bq.And I think NoSuchLedger is a rare case, so how about reading the first bookie, if it responded with NoSuchLedger, we had to check next bookie until we received all bookies in quorum responded NoSuchLedger. Then we know it is NoSuchLedger and finished recovery and close it.

Also, we could look at NoSuchEntryException. Consider a case where disk failed and here closing ledger may cause inconsistency. It needs to check with next bookie until quorum sends NoSuchEntry(that couldn't afford since we crossed more than tolerated failures).","09/Aug/12 07:01;hustlmsp;@Rakesh,

I agreed to check NoSuchLedger and NoSuchEntry exception. Waiting for all responses is pessimistic solution. I would prefer to do it in optimistic way. For NoSuchLedger and NoSuchEntry, we just wait for all responses to confirm it is really a NoSuchLedger and NoSuchEntry.","09/Aug/12 07:05;vinayrpet;Thanks [~hustlmsp] for taking a look here.
{quote} would be better to not add separated read code path in LedgerRecoveryOp. You could still leverage PendingReadOp, but added a method #initiateWithRecovery() to tell PendingReadOp is a recovery read.{quote}
In {{PendingReadOp#readComplete()}} following snippet is present, which is the one who created the problem in this case. Otherwise it would have tried to next bookie if NoSuchLedger encountered on first bookie exactly as suggested.
{code}        // if we just read only one entry, and this entry is not existed (in recoveryRead case)
        // we don't need to do ReattemptRead, otherwise we could not handle following case:
        //
        // an empty ledger with quorum (bk1, bk2), bk2 is failed forever.
        // bk1 return NoLedgerException, client do ReattemptRead to bk2 but bk2 isn't connected
        // so the read 0 entry would failed. this ledger could never be closed.
        if (startEntryId == endEntryId) {
            if (BKException.Code.NoSuchLedgerExistsException == rc
                    || BKException.Code.NoSuchEntryException == rc) {
                lh.opCounterSem.release();
                submitCallback(rc);
                return;
            }
        }{code}
According to comment here, If one bookie throws NoSuchLedger and other bookie not able to connect, then why we need to assume that next entry is not written and close the ledger with one less entry.

In current case, first client ( Original writer) had successfully written the entry and got success response also. But problem created during recoveryAdd. 

Just removal of above code will solve the problem. No other changes required.
","09/Aug/12 07:42;hustlmsp;ah, If I remembered correctly, the code is added to try to resolve a bookie is gone for-ever as comments. but seems that the fix isn't right, which introduce the issue here. You fix to remove above code is right. 

But we need to think how to address the case described in the comments, which is a generic problem:
If some bookies of a quorum gone forever, some bookies of this quorum are still alive but doesn't have that entry (NoSuchEntry or NoSuchLedger), then the ledger doesn't have any evidence to recovery/close it. But it would be a separated jira to discuss. 

",09/Aug/12 08:26;vinayrpet;I will post the patch with above changes. I will rise one Jira in sometime(as of now i am unable to rise due to some problem in Jira) to handle the mentioned issue.,"09/Aug/12 08:53;umamaheswararao;{quote}
If some bookies of a quorum gone forever, some bookies of this quorum are still alive but doesn't have that entry (NoSuchEntry or NoSuchLedger), then the ledger doesn't have any evidence to recovery/close it. But it would be a separated jira to discuss. 
{quote}
Yeah, this we have to discuss more to find better way to close or recover in that situation.

BTW, great catch Vinay. Thanks a lot, for your analysis.
","09/Aug/12 09:17;hustlmsp;@Vinay, thanks. good job.","09/Aug/12 12:28;vinayrpet;{quote}If some bookies of a quorum gone forever, some bookies of this quorum are still alive but doesn't have that entry (NoSuchEntry or NoSuchLedger), then the ledger doesn't have any evidence to recovery/close it. But it would be a separated jira to discuss.{quote}
BOOKKEEPER-356 is rised to handle this problem",09/Aug/12 14:51;vinayrpet;Attaching the patch with fixed comments,14/Aug/12 13:36;hustlmsp;the patch would fail test case 'BookieRecoveryTest#testBookieRecoveryOnOpenedLedgers'. so I think we need to reach an agreement about the cases described in BOOKKEEPER-356 before pushing it.,21/Aug/12 08:30;ikelly;The current patch fails tests. Cancelling the patch until we have a fix for this and possibly BOOKKEEPER-356 first.,"13/Dec/12 16:30;ikelly;BOOKKEEPER-356 fixed this problem in one way, but it's still possible to hit the root cause, and i've included a test case which does hit it (testLedgerRecoveryWithRollingRestart). Its a corner case, but a case that will kill your ledger.

The buggy sequence of events is.

You have a ledger with ensemble (B1, B2, B3)
     
# B1 brought down for maintenance
# Ledger recovery started
# B2 answers read last confirmed.
# B1 replaced in ensemble by B4
# Write to B4 fails for some reason
# B1 comes back up.
# B2 goes down for maintenance.
# Ledger recovery starts (ledger is now unavailable)


The core of the issue is that recovery updates the ensemble for a ledger before writing anything. Recovery only needs to update ensembles when closing the ledger, and the patch does exactly that.
","13/Dec/12 19:36;hustlmsp;two minor questions about ledger close need you to clarify.

after this change, two clients openLedger and tried ledger recovery at the same time. so these two clients might recover this ledger with different ensembles. during closing, there are two chances:

1) client1 closed the ledger succeed. client2 tried to update ledger metadata with its recovered ensemble but failed. client2 reread ledger metadata and find the conflicts between these two ledger metadata could be resolved. so client2 update the ledger metadata with its version, which overwrite client1's.

for example, ensemble (A, B, C) is changed to (A, B, D) by client 1, overwritten to (A, B, E) by client 2.
so in client 1, it still see the ensemble as (A, B, D) not (A, B, E). both (A, B, D) and (A, B, E) are right from the logic. but these two different reads seems different views. could it be a problem? if not, we need to clarify it.

2) if the confliction between these two ledger metadata could not be resolved. one client would fail with openLedger. then the behavior of two current readers of a un-closed ledger is undefined as 1). so the question is if the ledger is closed by other client, should we need to fail the client trying opening the ledger? If not, we need to improve the close logic. otherwise, we need clarify the undefined behavior.

for example, ensemble N => (A, B, C) is changed to N => (A, B, D) and M => (A, B, E) (N < M) in client 1. ensemble N => (A, B, C) is changed to N => (A, B, E) in client 2.


","13/Dec/12 21:45;ikelly;Hmm, there's also GC implications. If the new bookie isn't in the metadata, the entries may be GC'd. ","14/Dec/12 10:01;ikelly;The changes I attached raise a couple of issues, and isn't safe with 4.2 GC (it will be fine with 4.3 changes). Therefore, im going to move those changes to a new JIRA for 4.3 and for this jira ill just attach the testcase to verify that the original case doesn't exist anymore.","15/Dec/12 01:52;hustlmsp;hmm. I don't think it isn't safe with 4.2 GC, since 4.2 GC is ScanAndCompare GC, not a ledger metadata based GC. 4.3 GC would have some problems with that, but I think a FULL gc could avoid it.

The point I raised the comment is to figure out if two closed ledger hold different version of ledger metadata in memory, is it OK? if it was OK, then I think the fix looks good.

I think this issue is a know issue which would affect correctness of ledger recovery. if we knew it, it would be better to fix it not leaving to next release.","15/Dec/12 11:57;ikelly;Ah, this is true. in 4.2 is just checks if the ledger exists in the metadata, not whether the bookie is part of that ledger. Regarding two closing at the same time. 

For concurrent closes, this LedgerMetadata should resolve fine, as we don't check the bookie details in resolveConflict(), just when the ensemble changes, which should be the same if both have recovered correctly.","17/Dec/12 00:11;hustlmsp;conflict resolve failed when the number of ensembles are different. 

c1: ensemble N => (A, B, C) is changed to N => (A, B, D) and M => (A, B, E) (N < M)
c2: ensemble N => (A, B, C) is changed to N => (A, B, E)

this two ensemble change are treated as conflicted so one would fail when opening ledger.","17/Dec/12 09:36;rakeshr;Thanks guys for the good progress. Sorry for pitching late, I'm busy with our internal releases and other schedules.

{quote}
c1: ensemble N => (A, B, C) is changed to N => (A, B, D) and M => (A, B, E) (N < M)
c2: ensemble N => (A, B, C) is changed to N => (A, B, E)
{quote}
I've gone through the latest code. As Ivan mentioned, concurrent closes have Ledger#resolveConflicts() mechanism and would help to handle most of the cases. I could also see one possible case of concurrency and what you guys feel about the following race condition:

1) Assume, c1 & c2 both initiates recovery and sees the failure of C. 

2) Say c1 would try replacing C with D and at same time c2 would try replacing C with E. 

3) Again assume, c1 & c2 sends the metadata update request simulataneously.

Consider c1 would succeeded and c2 recevies the metadataversion exception. Now c2 will enters into LedgerHandle#resolveconflicts(), here its checking whether C (failed bookie) exists in the new zkmetadata. As c1 would previously modified the metadata (C with D), c2 will be thinking the failed bookie is replaced with E and go ahead with unnecessary writes to E. Below is existing code:
{code}
             metadata.setVersion(newMeta.getVersion());
            // Resolve the conflicts if zk metadata still contains failed bookie
            if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals(
                    ensembleInfo.addr)) {
            } else {
                // the failed bookie has been replaced
                blockAddCompletions.decrementAndGet();
                unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);
            }
{code}


IMHO, we would add the following checks in the LedgerHandle#resolveConflicts() for ""failed bookie has been replaced in ZK"":

{code}
            if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals(
                    ensembleInfo.addr)) {
                 .....
            }else if (metadata.currentEnsemble.get(ensembleInfo.bookieIndex)
                    .equals(newMeta.currentEnsemble
                            .get(ensembleInfo.bookieIndex))) {
                // the failed bookie has been replaced
                blockAddCompletions.decrementAndGet();
                unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);
            }else {
                // some other client would have replaced the failed
                // bookie with new one. Hence failing!
                ......
            }
{code}

-Rakesh","17/Dec/12 15:12;ikelly;[~rakeshr] In this case, the code path you're talking about doesn't get executed, as we don't use ChangeEnsembleCb during recovery with my patch. However, LedgerMetadata#resolveConflict does get called. 

[~hustlmsp] The scenario you're talking about would only happen if 2 clients try to recover, and the one of them encounters chooses a faulty bookie when selecting a new bookie to replicate to. I think it's pretty safe to remove the check on the number of ensembles, if the ledger is closed and the end entry matches. What do you think?",18/Dec/12 04:45;hustlmsp;[~ikelly] sounds good for me. +1 for remove checking if the ledger is closed and end entry matches.,18/Dec/12 11:28;ikelly;New patch allows resolution if the ledger is closed but ensembles have a different count (is possible as discussed in previous comments).,"19/Dec/12 05:35;hustlmsp;hmm. you new patch just added code for resolving conflicts, but doesn't include the fixes. I am a bit confused. if the conflicts could be resolved, I assume that it is safe to include your fixes, right?","19/Dec/12 18:12;ikelly;Oops, forgot to roll back my branch. Attaching new patch. Requires BOOKKEEPER-520, as it modifies the same area.","19/Dec/12 18:35;hadoopqa;Testing JIRA BOOKKEEPER-355


Patch [0003-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch|https://issues.apache.org/jira/secure/attachment/12561749/0003-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch] downloaded at Wed Dec 19 18:33:06 UTC 2012

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","20/Dec/12 05:50;hustlmsp;resubmitted the patch to trigger pre-commit build, since BOOKKEEPER-520 is in.","20/Dec/12 05:50;hustlmsp;BTW, [~rakeshr] could you take a look at the patch when you had time?","30/Dec/12 19:06;rakeshr;Hi Ivan, patch looks nice.

- Could you please add '@Test(timeout = )' for the test cases.

- I doubt whether similar situation comes during normal add entries also. Here, we are first updating the ledger metadata and then tries writing the entries.
I feel its safe if we could reverse the logic of LedgerHandle#handleBookieFailure() like:
1)Replace the new bookie to the metadata.currentEnsemble, now sends a write entry.
2)Then update the zkmetadata only after the successful writes of an entry. Otherwise finds another bookie..

How does it sound to you?","02/Jan/13 16:21;ikelly;New patch adds timeout.

{quote}
I doubt whether similar situation comes during normal add entries also. Here, we are first updating the ledger metadata and then tries writing the entries.
I feel its safe if we could reverse the logic of LedgerHandle#handleBookieFailure() like:
1)Replace the new bookie to the metadata.currentEnsemble, now sends a write entry.
2)Then update the zkmetadata only after the successful writes of an entry. Otherwise finds another bookie..
{quote}
We could change it to do this, but i don't see any compelling reason to, so we should leave it as is, as it works now. A similar situation cannot occur with normal adds, as a fails bookie will not contain the entry in any case, so replacing it is safe.","02/Jan/13 16:50;hadoopqa;Testing JIRA BOOKKEEPER-355


Patch [0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch|https://issues.apache.org/jira/secure/attachment/12562919/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch] downloaded at Wed Jan  2 16:21:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 759
.    Tests failed: 1
.    Tests errors: 2

.    The patch failed the following testcases:

.      testBookieClusterRestart(org.apache.bookkeeper.replication.AuditorBookieTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/185/","02/Jan/13 17:54;rakeshr;@Ivan
bq.We could change it to do this, but i don't see any compelling reason to, so we should leave it as is, as it works now. A similar situation cannot occur with normal adds, as a fails bookie will not contain the entry in any case, so replacing it is safe
Yeah, I agree. 


Latest patch looks good, apart from the build failures -1 TESTS
",02/Jan/13 23:08;fpj;It looks like this assertion in LedgerMetadata is failing: assert ensembles.isEmpty() || startEntryId >= ensembles.lastKey();,"02/Jan/13 23:54;fpj;For the testBookieClusterRestart failure, if I'm reading the log messages right, an auditor is being elected after restarting the electors:

{noformat}
2013-01-02 16:26:53,908 - INFO  - [AuditorElector-67.195.138.27:15020:Auditor@169] - I'm starting as Auditor Bookie
{noformat}

but I'm not exactly sure why waitForNewAuditor is failing.",04/Jan/13 13:13;ikelly;Last patch was bad. Didn't actually have the handleBookieFailure changes.,"04/Jan/13 16:04;hadoopqa;Testing JIRA BOOKKEEPER-355


Patch [0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch|https://issues.apache.org/jira/secure/attachment/12563287/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch] downloaded at Fri Jan  4 14:42:14 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/197/","04/Jan/13 16:40;hadoopqa;Testing JIRA BOOKKEEPER-355


Patch [0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch|https://issues.apache.org/jira/secure/attachment/12563287/0001-BOOKKEEPER-355-Ledger-recovery-will-mark-ledger-as-c.patch] downloaded at Fri Jan  4 16:09:45 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 780
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/198/",05/Jan/13 08:48;hustlmsp;+1 for the latest patch.,07/Jan/13 11:25;ikelly;Committed as r1429756. Thanks for reviewing guys.,"07/Jan/13 12:31;hudson;Integrated in bookkeeper-trunk2 #38 (See [https://builds.apache.org/job/bookkeeper-trunk2/38/])
    BOOKKEEPER-355: Ledger recovery will mark ledger as closed with -1, in case of slow bookie is added to ensemble during recovery add (ivank) (Revision 1429756)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
",,,,,,,,,,,,,,,,,,,,,,,
[BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml,BOOKKEEPER-354,12601668,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,kiran_bc,kiran_bc,kiran_bc,07/Aug/12 06:00,13/Feb/13 15:47,14/Mar/19 02:39,21/Aug/12 09:41,4.2.0,,4.1.1,4.2.0,,bookkeeper-server,,,0,,"Need to modify the bookkeeper start script and need to add content for bookkeeper stop.
",,,,,,,,,,,,,,,,,,,13/Aug/12 10:19;kiran_bc;BOOKKEEPER-354.patch;https://issues.apache.org/jira/secure/attachment/12540636/BOOKKEEPER-354.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-07 06:15:54.951,,,no_permission,,,,,,,,,,,,,293536,,,Fri Sep 07 05:58:33 UTC 2012,,,,,,0|i0tblb:,169187,,,,,,,,"07/Aug/12 06:15;rakeshr;Hi Kiran, could you please give a link to BOOKKEEPER-296 issue as its related to that changes.",07/Aug/12 06:31;umamaheswararao;updated Affect versions to 4.2.0 as BK-296 updated in 4.2.0,13/Aug/12 10:20;kiran_bc;Attached the patch for this issue. Please review.,"13/Aug/12 10:45;umamaheswararao;Thanks a lot, Kiran for the patch.
Changes looks good.

@Ivan, could you please add your comments? if you like, please push this in.",17/Aug/12 09:18;ikelly;Looks good. Will commit after the delta changes from BOOKKEEPER-296 are put into a new JIRA.,"21/Aug/12 05:05;kiran_bc;Thanks a lot, Ivan.",21/Aug/12 09:38;ikelly;Committed as r1375448. Thanks Kiran.,"21/Aug/12 09:55;hudson;Integrated in bookkeeper-trunk #660 (See [https://builds.apache.org/job/bookkeeper-trunk/660/])
    BOOKKEEPER-354: [BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml (Kiran BC via ivank) (Revision 1375448)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
","21/Aug/12 11:02;kiran_bc;Thanks, Ivan.",07/Sep/12 05:58;hustlmsp;committed as r1381891 in branch 4.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Should not use static ServerStats/BKStats instance in TestServerStats/TestBKStats,BOOKKEEPER-352,12600270,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,26/Jul/12 06:58,13/Feb/13 15:46,14/Mar/19 02:39,27/Jul/12 13:52,4.2.0,,4.1.1,4.2.0,,,,,0,,"TestServers failed when running whole test. Because TestServers uses ServerStats instance directly. ServerStats is a static instance, which will be used across whole testing. so the numSuccessOps would not be zero, the assertion would fail.

Same problem occurs in TestBKStats. TestBKStats doesn't fail because statistics is turned off by default. The value happened to be zero. But it still is not a good idea to use static instance during testing.",,,,,,,,,,,,,,,,,,,26/Jul/12 07:00;hustlmsp;BOOKKEEPER-352.diff;https://issues.apache.org/jira/secure/attachment/12537964/BOOKKEEPER-352.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-26 17:19:04.983,,,no_permission,,,,,,,,,,,,,293532,,,Mon Jul 30 06:32:42 UTC 2012,,,,,,0|i0tbgv:,169167,,,,,,,,"26/Jul/12 07:00;hustlmsp;attach a patch to fix it. the fix is quite simple, just new an OpStats instead of using OpStats from a static instance.","26/Jul/12 17:19;fpj;Hi Sijie, The patch is indeed simple. With these modifications, getInstance() in BKStats and ServerStats are still used, right? ",27/Jul/12 00:28;hustlmsp;the modifications just fixed test cases. getInstance() are still used for a server to collect statistics.,"27/Jul/12 13:52;fpj;+1, thanks, Sijie. Committed revision 1366384.","27/Jul/12 14:23;hudson;Integrated in bookkeeper-trunk #622 (See [https://builds.apache.org/job/bookkeeper-trunk/622/])
    BOOKKEEPER-352: Should not use static ServerStats/BKStats instance in TestServerStats/TestBKStats (sijie via fpj) (Revision 1366384)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java
",27/Jul/12 15:08;fpj;Branch 4.1 commit. CommitCommitted revision 1366409.,"30/Jul/12 06:32;umamaheswararao;Oh, Thanks Sijie for the patch. I couldn't take a look (I was on leave). 
Also I should have run the suit once. Since the changes are pretty straight forward and had full confidence that tests will pass.
I remember surefire will fork separate JVM for each test. no?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
asyncAddEntry should not throw an exception,BOOKKEEPER-351,12599903,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,23/Jul/12 21:14,13/Feb/13 15:46,14/Mar/19 02:39,03/Dec/12 05:24,4.2.0,,4.2.0,,,,,,0,,"There are cases where LedgerHandle.asyncAddEntry() fails with a RuntimeException that is thrown by executor.submit(). 

It should better invoke the callback with a failure result.",,,,,,,,,,,,,,,,,,,03/Dec/12 02:55;mmerli;0001-BOOKKEEPER-351-asyncAddEntry-should-not-throw-an-exc.patch;https://issues.apache.org/jira/secure/attachment/12555699/0001-BOOKKEEPER-351-asyncAddEntry-should-not-throw-an-exc.patch,23/Jul/12 21:17;mmerli;0001-BOOKKEEPER-351-asyncAddEntry-should-not-throw-an-exc.patch;https://issues.apache.org/jira/secure/attachment/12537611/0001-BOOKKEEPER-351-asyncAddEntry-should-not-throw-an-exc.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-07-25 05:37:13.457,,,no_permission,,,,,,,,,,,,,292726,,,Mon Dec 03 08:15:57 UTC 2012,,,,,,0|i0sblj:,163355,,,,,,,,23/Jul/12 21:17;mmerli;Attached patch with test case showing the issue,"25/Jul/12 05:37;hustlmsp;thanks Matteo. the fix is clear, but I had some comments on the test case.

1. It is not a good idea to put the test in TestReadTimeout. from the name of 'TestReadTimeout', it was used to test read timeout cases. it would be better to put the test case in other test cases like BookKeeperTest.

2. 

{code}
+    @Test
+    void testAsyncReadWithError() throws Exception {
+        LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, ""testPasswd"".getBytes());
+        stopBKCluster();
{code}

I think the runtime exception is thrown due the sheduler is closed when closing BookKeeper client. so actually you could just close BookKeeper client only instead of stopping bookkeeper cluster.",29/Nov/12 06:40;hustlmsp;[~merlimat] Is there any updates about this JIRA?,03/Dec/12 02:55;mmerli;2nd version of the patch,"03/Dec/12 02:57;mmerli;[~hustlmsp] I've updated the test case with the above suggestions. Thanks for reminding this, I had it forgotten.",03/Dec/12 05:21;hustlmsp;the patch lgtm +1. Thanks Matteo.,03/Dec/12 05:24;hustlmsp;committed as r1416352. thanks Matteo.,"03/Dec/12 08:15;hudson;Integrated in bookkeeper-trunk #835 (See [https://builds.apache.org/job/bookkeeper-trunk/835/])
    BOOKKEEPER-351: asyncAddEntry should not throw an exception (Matteo Merli via sijie) (Revision 1416352)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Entry logger should close all the chennels which are there in Map, instead of closing only current channel.",BOOKKEEPER-349,12599810,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,umamaheswararao,umamaheswararao,umamaheswararao,23/Jul/12 06:33,13/Feb/13 15:46,14/Mar/19 02:39,26/Jul/12 02:33,4.1.0,,4.2.0,,,bookkeeper-server,,,0,,"I have seen this on restarting the same bookies from same JVM( in one of mey testcase which I was writing for autoRecovery work), i.e, all channels are not getting closed.
When we restart the same bookie, there are 0.log channel will be a older channel. Since the current code cares about only current logChannel. So, we are not releasing the older channels on EntryLogger shutdown. ",,,,,,,,,,,BOOKKEEPER-233,,,,,,,,23/Jul/12 12:49;umamaheswararao;BOOKKEEPER-349.patch;https://issues.apache.org/jira/secure/attachment/12537561/BOOKKEEPER-349.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-25 05:44:27.037,,,no_permission,,,,,,,,,,,,,293520,,,Thu Jul 26 12:36:09 UTC 2012,,,,,,0|i0tb33:,169105,,,,,,,,"23/Jul/12 12:49;umamaheswararao;Attached a simple patch.
I have ran all recovery tests in windows, with this patch all were passing. Without this patch, some tests were failing while cleaning resources of data dirs.","25/Jul/12 05:44;hustlmsp;although I don't have windows environment to run it to verify it, the changes are necessary and right to me. +1.","25/Jul/12 09:06;umamaheswararao;Thanks a lot Sijie, for reviewing the patch.
I noticed there is on unused import. 
Do you mind removing it while committing?

-Thanks
 Uma","25/Jul/12 09:50;hustlmsp;@Uma, I would remove unused imports when committing, thanks for reminder.",26/Jul/12 02:33;hustlmsp;committed as r1365869. thanks Uma.,"26/Jul/12 12:36;hudson;Integrated in bookkeeper-trunk #620 (See [https://builds.apache.org/job/bookkeeper-trunk/620/])
    BOOKKEEPER-349: Entry logger should close all the chennels which are there in Map, instead of closing only current channel. (umamaheswararao via sijie) (Revision 1365869)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to register hedwig JMX beans in test cases,BOOKKEEPER-343,12598970,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,16/Jul/12 14:24,13/Feb/13 15:46,14/Mar/19 02:39,03/Aug/12 17:42,4.1.0,,4.2.0,,,hedwig-server,,,0,,"failed to register jmx beans for hedwig running test cases.

the exception is as below:

{code}
2012-07-16 22:13:54,849 - WARN  - [Thread-134:ReadAheadCache@729] - Failed to register readahead cache with JMX
javax.management.InstanceAlreadyExistsException: org.apache.HedwigServer:name0=ReadAheadCache
        at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482)
        at org.apache.zookeeper.jmx.MBeanRegistry.register(MBeanRegistry.java:98)
        at org.apache.hedwig.server.persistence.ReadAheadCache.registerJMX(ReadAheadCache.java:727)
        at org.apache.hedwig.server.netty.PubSubServer.registerJMX(PubSubServer.java:300)
        at org.apache.hedwig.server.netty.PubSubServer$3.run(PubSubServer.java:395)
        at java.lang.Thread.run(Thread.java:680)
{code}",,,,,,,,,,,,,,,,,,,16/Jul/12 14:28;hustlmsp;BOOKKEEPER-343.patch;https://issues.apache.org/jira/secure/attachment/12536637/BOOKKEEPER-343.patch,27/Jul/12 09:20;hustlmsp;BOOKKEEPER-343.patch_v2;https://issues.apache.org/jira/secure/attachment/12538142/BOOKKEEPER-343.patch_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-08-03 17:42:42.667,,,no_permission,,,,,,,,,,,,,293533,,,Fri Aug 03 18:05:35 UTC 2012,,,,,,0|i0tbhz:,169172,,,,,,,,16/Jul/12 14:28;hustlmsp;the fix is quite straightforward. just add port and sslport as suffix in ServerBean to distinguish between different hub server instances.,27/Jul/12 09:20;hustlmsp;attach a new patch for it. just pass name to jmx bean instead of passing an unused configuration object.,03/Aug/12 17:42;ikelly;Committed as r1369115. Thanks Sijie.,"03/Aug/12 18:05;hudson;Integrated in bookkeeper-trunk #631 (See [https://builds.apache.org/job/bookkeeper-trunk/631/])
    BOOKKEEPER-343: Failed to register hedwig JMX beans in test cases (sijie via ivank) (Revision 1369115)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerBean.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create Version.NEW and Version.ANY static instances of Version so that were not passing around nulls,BOOKKEEPER-338,12598521,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,hustlmsp,ikelly,ikelly,12/Jul/12 10:02,13/Feb/13 15:46,14/Mar/19 02:39,17/Aug/12 09:59,,,4.2.0,,,,,,0,,"Passing null as a parameter into a method makes the intention abiguous. It would be better to pass in defined constants, such as Version.NEW & Version.ANY. This makes the code clearer and more readable.",,,,,,,,,,,,,,,,,,,10/Aug/12 00:34;hustlmsp;BOOKKEEPER-338.diff;https://issues.apache.org/jira/secure/attachment/12540170/BOOKKEEPER-338.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-10 00:34:23.582,,,no_permission,,,,,,,,,,,,,293571,,,Fri Aug 17 10:11:13 UTC 2012,,,,,,0|i0tccf:,169309,,,,,,,,10/Aug/12 00:34;hustlmsp;attach a patch to introduce NEW and ANY for Version.,17/Aug/12 09:59;ikelly;Commits as r1374189. Thanks Sijie.,"17/Aug/12 10:11;hudson;Integrated in bookkeeper-trunk #650 (See [https://builds.apache.org/job/bookkeeper-trunk/650/])
    BOOKKEEPER-338: Create Version.NEW and Version.ANY static instances of Version so that were not passing around nulls (sijie via ivank) (Revision 1374189)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicOwnershipManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add entry fails with MetadataVersionException when last ensemble has morethan one bookie failures,BOOKKEEPER-337,12598377,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,brahmareddy,brahmareddy,11/Jul/12 14:03,13/Feb/13 15:46,14/Mar/19 02:39,28/Aug/12 08:52,4.0.0,,4.2.0,,,,,,0,,"Scenario:
========
Start Five BK's
Write ledger's with ensemble three and quroum size=2
while write inprogress down two bookies(Bookies should be in ensemble)
",,,,,,,,,,,,,,,,,,,13/Jul/12 14:30;rakeshr;BOOKKEEPER-337-testtoreproduce.patch;https://issues.apache.org/jira/secure/attachment/12536389/BOOKKEEPER-337-testtoreproduce.patch,12/Jul/12 08:23;hustlmsp;BOOKKEEPER-337-try.patch;https://issues.apache.org/jira/secure/attachment/12536188/BOOKKEEPER-337-try.patch,15/Jul/12 14:06;hustlmsp;BOOKKEEPER-337-try2.patch;https://issues.apache.org/jira/secure/attachment/12536553/BOOKKEEPER-337-try2.patch,07/Aug/12 14:49;rakeshr;BOOKKEEPER-337.1.patch;https://issues.apache.org/jira/secure/attachment/12539578/BOOKKEEPER-337.1.patch,25/Aug/12 12:58;rakeshr;BOOKKEEPER-337.2.patch;https://issues.apache.org/jira/secure/attachment/12542409/BOOKKEEPER-337.2.patch,13/Jul/12 15:51;ikelly;BOOKKEEPER-337.diff;https://issues.apache.org/jira/secure/attachment/12536400/BOOKKEEPER-337.diff,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-07-12 05:42:16.62,,,no_permission,,,,,,,,,,,,,293553,,,Tue Aug 28 09:13:05 UTC 2012,,,,,,0|i0tc0f:,169255,,,,,,,,"11/Jul/12 14:09;brahmareddy;I had faced this in HDFS-HA,where ANN got shutdown by throwing following..Here availoble bookies are seven even then addentry failed because continuous fail bookie fail which are in ensemble
{noformat}
2012-07-11 04:02:50,445 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Invoked callback method: 1058
2012-07-11 04:02:50,445 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Could not write request for adding entry: 1058 ledger-id: 364 bookie: /HOST****.168:3183
2012-07-11 04:02:50,445 WARN hidden.bkjournal.org.apache.bookkeeper.client.PendingAddOp: Write did not succeed: 364, 1058
2012-07-11 04:02:50,445 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Invoked callback method: 1058
2012-07-11 04:02:50,445 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Unexpected add response received from bookie: /HOST****.168:3183 for ledger: 364, entry: 1058 , ignoring
2012-07-11 04:02:50,445 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Unexpected add response received from bookie: /HOST****.168:3182 for ledger: 364, entry: 1058 , ignoring
2012-07-11 04:02:50,981 ERROR hidden.bkjournal.org.apache.bookkeeper.client.LedgerHandle: Could not resolve ledger metadata conflict while changing ensemble to: [/HOST****.20:3181, /HOST****.168:3181, /10.18.52.55:3187], old meta data is 
BookieMetadataFormatVersion	1
2
3
0
0	HOST****.168:3183	HOST****.168:3181	HOST****.168:3182
, new meta data is 
BookieMetadataFormatVersion	1
2
3
0
0	HOST****.168:3183	HOST****.168:3181	HOST****.168:3182
1058	HOST****.168:3183	HOST****.168:3181	10.18.52.55:3187
 ,closing ledger
2012-07-11 04:02:51,366 FATAL org.apache.hadoop.hdfs.server.namenode.FSEditLog: Error: flush failed for required journal (JournalAndStream(mgr=org.apache.hadoop.contrib.bkjournal.BookKeeperJournalManager@f73f2c5, stream=org.apache.hadoop.contrib.bkjournal.BookKeeperEditLogOutputStream@5476b70))
java.io.IOException: Failed to write to bookkeeper; Error is (-9) Error while using ZooKeeper
	at org.apache.hadoop.contrib.bkjournal.BookKeeperEditLogOutputStream.flushAndSync(BookKeeperEditLogOutputStream.java:141)
	at org.apache.hadoop.hdfs.server.namenode.EditLogOutputStream.flush(EditLogOutputStream.java:105)
	at org.apache.hadoop.hdfs.server.namenode.JournalSet$JournalSetOutputStream$8.apply(JournalSet.java:460)
	at org.apache.hadoop.hdfs.server.namenode.JournalSet.mapJournalsAndReportErrors(JournalSet.java:319)
	at org.apache.hadoop.hdfs.server.namenode.JournalSet.access$200(JournalSet.java:50)
	at org.apache.hadoop.hdfs.server.namenode.JournalSet$JournalSetOutputStream.flush(JournalSet.java:456)
	at org.apache.hadoop.hdfs.server.namenode.FSEditLog.logSync(FSEditLog.java:550)
	at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getAdditionalBlock(FSNamesystem.java:2007)
	at org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.addBlock(NameNodeRpcServer.java:471)
	at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.addBlock(ClientNamenodeProtocolServerSideTranslatorPB.java:292)
	at org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientNamenodeProtocolProtos.java:42676)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:427)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:916)
	at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1692)
	at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1688)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:396)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1232)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:1686)
{noformat}","12/Jul/12 05:42;rakeshr;I just tried the following test case by putting break points in the AbstractZkLedgerManager.writeLedgerMetadata()

Consider the case, where added 5 entries and now the writer is idle.
Ledger metadata as follows: 0 - A B C
Say bookies A and B got shutdown. Now, when the writer tries to add more entries it will try reforming the ensemble for A in first pass:
0  - A B C
5 - F B C
Then in the second pass when tries to reform the ensemble for B, it is throwing ZK BadVersionException and not able to resolve the conflicts.

----

??I think the cause is simple, +due to the async setdata+, on handleBookieFailure() its just passing the request to zk and moving to process next ChannelBookieClient response. As the zk callback didn't responsed, this client response seeing the previous zkVersion and is causing the trouble.??

AbstractZkLedgerManager.java
{code}
public void writeLedgerMetadata(final long ledgerId, final LedgerMetadata metadata,
                                    final GenericCallback<Void> cb) {
        //.....
        //.....
        zk.setData(getLedgerPath(ledgerId),
                   metadata.serialize(), zv.getZnodeVersion(),
                   new StatCallback() {
{code}

It would be great to know the opinion from others also.","12/Jul/12 08:23;hustlmsp;yup, ur right. the confliction occurred due to there are more than two changing-same-ensemble requests sending on-the-fly. but LedgerMetadata#resolveConflict doesn't handle this case. so it threw the MetadataVersionException. 

I think the simple fix would be improve LedgerMetadata#resolveConflict to handle this case. I attached a draft about it and also add some logging messages to inform users that there are more than two changing-same-ensemble requests are processing.

but I don't think the fix is best. since it introduced overhead to maintain confliction cases that we need to handle in LedgerMetadata#resolveConflict. for long term plan, seems that we need to find better solution to resolve confliction. ","13/Jul/12 13:06;rakeshr;@Sijie
Is there any chance of multiple-thread execution in the following snippet? (I'm just doubting, since all these callbacks are getting invoked upon netty server notifications)
{code}BookieClient.addEntry(args....){
final PerChannelBookieClient client = lookupClient(addr);
        client.connectIfNeededAndDoOp(new GenericCallback<Void>() {
            @Override
            public void operationComplete(int rc, Void result) {
                if (rc != BKException.Code.OK) {
                    cb.writeComplete(rc, ledgerId, entryId, addr, ctx);
                    return;
                }
                client.addEntry(ledgerId, masterKey, entryId, toSend, cb, ctx, options);
            }
        });
}
{code}

Assume we have ensemble like 0 A B C D E
Say, A B C are down in a row and now reached the callback of A's failure, sametime B's connect failure, then sametime C's connect failure?
If yes, all three guys will do modifying the ledger metadata(ensemble) at the sametime and will clash eachother. Any thoughts?",13/Jul/12 14:30;rakeshr;Attached the test case to reproduce the issue.,"13/Jul/12 15:51;ikelly;The solution has to be at the handleBookieFailure level and not the resolveConflict level, because otherwise it could try replace both failed bookie with the same new bookie. I think it's quite straightforward though. 

Suggested fix attached.","15/Jul/12 14:05;hustlmsp;yup, Ivan's patch is quite simple and straightforward. but as Rakesh mentioned in previous comment, #handleBookieFailure would be called concurrently to recover same ensemble. so metadata.currentEnsemble would be changed several times before the write callback executed.

suppose, we had ensemble [ A, B, C, D, E ]. A, B, C are down, F, G, H is available.
A -> handleBookieFailure to replace A with F. [F, B, C, D, E]. write request 1 is sent to zookeeper.
B -> handleBookieFailure to replace B with G. [F, G, C, D, E]. write request 2 is sent to zookeeper.
C -> handleBookieFailure to replace C with H. [F, G, H, D, E]. write request 3 is sent to zookeeper.

write request 1 is back. succeed.
write request 2 should fail due to metadata version conflict. so it would call #handleBookieFailure again, but its current ensemble is [F, G, H, D, E], there is no other bookie could be picked up to replace G.

the problem here is we don't have any synchronization on metadata.currentEnsemble. so we got confused when metadata version conflicts. so we had to have synchronized on metadata.currentEnsemble to avoid correct bookie replacement is modified by wrong replacement. also we not only check new metadata's currentEnsemble but also need to check current metadata's currentEnsemble to see whether that bookie has been replaced before. if it has been replaced before, we should not do #handleBookieFailure again.

attach a new patch based on Ivan's patch and Rakesh's test case.","08/Aug/12 05:06;rakeshr;@Ivan @Sijie
Thanks a lot for your thoughts. I've modified the logic little bit, please review.

Latest patch contains:
# synchronized block while replacing the failed bookie in the ensemble. This is done to avoid concurrent ensemble modification (same as mentioned in the above discussion threads)
# When there is a zversion conflict, 
 - first would check the metadata state, return false and throws exception if the state mismatches
 - update znode version
 - then if my changes doesn't exists in zk, writeLedgerConfig(), otw again back to handleFailure
 - return success and continue with write req, if in-memory structure is insync with zk.


@Sijie
I'm thinking the resolveconflicts() would not required to have the currentStartEntryId checks. Instead it can be generic by only checking the states. Any thoughts?
","08/Aug/12 05:32;hustlmsp;seems that the patch is based my last patch just changing currentStartEntryId check to state check, right? 

state check is missed in my last patch, which is necessary. as you described, there would be only one ensemble used to write at that time, checking currentStartEntryId is trivial. so I am OK with this change.

","08/Aug/12 05:44;rakeshr;@Sijie
Thanks for your time and review.
Yup, I've rebased the patch as mentioned in my above comments. Also added one more test case with async writes.","14/Aug/12 11:37;rakeshr;@Ivan 
It would be great if you could also review the proposed changes and push the issue in.","17/Aug/12 16:23;ikelly;{code}
// Update ledger metadata in zk, if in-memory metadata doesn't contains
// the failed bookie.
if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {
    LOG.info(""Resolve ledger metadata conflict while changing ensemble to: ""
             + newEnsemble + "", old meta data is \n""
             + new String(metadata.serialize())
             + ""\n, new meta data is \n"" + new String(newMeta.serialize()));
    writeLedgerConfig(new ChangeEnsembleCb());
} else {
    handleBookieFailure(addr, bookieIndex);
}
{code}
I don't think the else part of this can ever be reached. Could you give an example of how it could be?

Also, it would be good to move define the callback for rereadMetadata in the same way as ChangeEnsembleCb as the nesting is going a bit too deep.","21/Aug/12 06:45;rakeshr;Thanks a lot Ivan for the reviews.

@Ivan
bq.I don't think the else part of this can ever be reached. Could you give an example of how it could be?

Yeah you're correct, there is no straight away scenario. What I referred is, LedgerHandle#recover() is directly replacing ""metadata = newMeta;"". (Will come only if recovery and write calls from same bkclient)

{code}
synchronized void recover(final GenericCallback<Void> cb) {
  public void operationComplete(int rc, LedgerMetadata newMeta) {
     if (rc != BKException.Code.OK) {
         cb.operationComplete(rc, null);
     } else {
         metadata = newMeta;
         recover(cb);
      }
  }
{code}

Also, I know its a very corner case and I just included it as defensive coding.

bq.Also, it would be good to move define the callback for rereadMetadata in the same way as ChangeEnsembleCb as the nesting is going a bit too deep

Sure. I'll refactor it.","24/Aug/12 05:44;rakeshr;Hi Sijie,

Its great and will help us to shape our thoughts on the following case. I hope you were also thinking about handlingBookieFailure?
Also, could you please check my previous comment to get more on my view.

bq.I don't think the else part of this can ever be reached.
{code}
if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {

} else {
    handleBookieFailure(addr, bookieIndex);
}
{code}

Thanks,
Rakesh","25/Aug/12 13:17;rakeshr;Hi Ivan,

bq.I don't think the else part of this can ever be reached. Could you give an example of how it could be?
If I understood your point, you are saying an optimistic approach of resolveConflicts. 
As I mentioned in the above [comments|https://issues.apache.org/jira/browse/BOOKKEEPER-337?focusedCommentId=13438490&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13438490],  I could see only the close/recovery logic can concurrently do the metadata modifications. Anyway in that scenario, after the ensemble change while sendWrite() request this guy will get fenced exception. So I agree with you to remove the ""else block"" as part of this issue.

I've attached new patch with the following changes:
# removed the else part
# refactored the deep callbacks


Could you please look at the new patch.",28/Aug/12 08:52;ikelly;Committed r1378023. Good work Rakesh.,"28/Aug/12 09:13;hudson;Integrated in bookkeeper-trunk #676 (See [https://builds.apache.org/job/bookkeeper-trunk/676/])
    BOOKKEEPER-337: Add entry fails with MetadataVersionException when last ensemble has morethan one bookie failures (rakeshr via ivank) (Revision 1378023)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookie readEntries is taking more time if the ensemble has failed bookie(s),BOOKKEEPER-336,12598127,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,brahmareddy,brahmareddy,10/Jul/12 04:49,13/Feb/13 15:46,14/Mar/19 02:39,13/Dec/12 12:08,4.1.0,,4.2.0,,,,,,0,,"Scenario:

1) Start three bookies. Create ledger with ensemblesize=3, quorumsize=2
2) Add 100 entries to this ledger
3) Make first bookie down and read the entries from 0-99

Output: Each entry is going to fetch from the failed bookie and is waiting for the bookie connection timeout, only after failure going to next bookie.
This is affecting the read entry performance.

Impact: Namenode switching time will be affected by adding this failed bookie readTimeOut also.",,,,,,,,,,,,,,,,,,,13/Dec/12 12:12;ikelly;0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch;https://issues.apache.org/jira/secure/attachment/12560768/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch,12/Dec/12 20:50;ikelly;0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch;https://issues.apache.org/jira/secure/attachment/12560633/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch,03/Dec/12 10:47;ikelly;0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch;https://issues.apache.org/jira/secure/attachment/12555734/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch,30/Nov/12 16:24;ikelly;0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch;https://issues.apache.org/jira/secure/attachment/12555517/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch,31/Oct/12 17:57;ikelly;0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch;https://issues.apache.org/jira/secure/attachment/12551593/0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch,31/Oct/12 16:00;ikelly;0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch;https://issues.apache.org/jira/secure/attachment/12551569/0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch,26/Oct/12 17:51;ikelly;0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch;https://issues.apache.org/jira/secure/attachment/12550990/0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch,24/Jul/12 12:59;rakeshr;BOOKKEEPER-336.1.patch;https://issues.apache.org/jira/secure/attachment/12537686/BOOKKEEPER-336.1.patch,22/Aug/12 15:25;ikelly;BOOKKEEPER-336.draft1.diff;https://issues.apache.org/jira/secure/attachment/12541985/BOOKKEEPER-336.draft1.diff,11/Jul/12 09:58;rakeshr;BOOKKEEPER-336.patch;https://issues.apache.org/jira/secure/attachment/12536005/BOOKKEEPER-336.patch,,,,,,,10.0,,,,,,,,,,,,,,,,,,,2012-07-10 05:02:28.461,,,no_permission,,,,,,,,,,,,,250195,,,Fri Dec 14 06:51:27 UTC 2012,,,,,,0|i0auif:,61216,,,,,,,,"10/Jul/12 04:51;brahmareddy;For each entry retry it'll take 10seconds
{noformat}
2012-07-06 22:07:59,734 ERROR hidden.bkjournal.org.apache.bookkeeper.client.PendingReadOp: Bookie handle is not available while reading entry: 18 ledgerId: 3 from bookie: /HOST.24:3181
2012-07-06 22:08:10,234 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Could not connect to bookie: /HOST.24:3181
2012-07-06 22:08:10,234 ERROR hidden.bkjournal.org.apache.bookkeeper.client.PendingReadOp: Bookie handle is not available while reading entry: 21 ledgerId: 3 from bookie: /HOST.24:3181
2012-07-06 22:08:21,234 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Could not connect to bookie: /HOST.24:3181
2012-07-06 22:08:21,234 ERROR hidden.bkjournal.org.apache.bookkeeper.client.PendingReadOp: Bookie handle is not available while reading entry: 24 ledgerId: 3 from bookie: /HOST.24:3181
2012-07-06 22:08:31,734 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Could not connect to bookie: /HOST.24:3181
2012-07-06 22:08:31,734 ERROR hidden.bkjournal.org.apache.bookkeeper.client.PendingReadOp: Bookie handle is not available while reading entry: 27 ledgerId: 3 from bookie: /HOST.24:3181
2012-07-06 22:08:42,734 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Could not connect to bookie: /HOST.24:3181
2012-07-06 22:08:42,734 ERROR hidden.bkjournal.org.apache.bookkeeper.client.PendingReadOp: Bookie handle is not available while reading entry: 30 ledgerId: 3 from bookie: /HOST.24:3181
2012-07-06 22:08:53,234 ERROR hidden.bkjournal.org.apache.bookkeeper.proto.PerChannelBookieClient: Could not connect to bookie: /HOST.24:3181
{noformat}","10/Jul/12 05:02;rakeshr;In the Netty code I've seen 'connectTimeout' parameter with default value 10000ms - Time to wait for a socket connection to be available. 

Also, I could see if the machine is reachable(and just shutdown the bookie server) the timeout is very less and immediately retrying to the other bookie in the ensemble. This scenario is occurring if the machine is unreachable and come out as connection timeout.","11/Jul/12 06:51;umamaheswararao;For some reason my reply did not go I think. Below is the reply for Ivan's mail.

===================================================================

Yep, We are also thinking in the same lines.
One Idea is that, we can add the failed BKto blackList and from the next entry onwards, we will try first to the healthy bks then we will try for the blackListed bookie from the quorum trails.
Why we are planning to retry on blackListed bookies also is, that bookie may come back or can serve well for next reads. But we will give chance only after reamaining bookies faild for the read. 
How does it sound? 
Brahma already filed a JIRA BK-336 and Rakesh signed up that same.

Regards,
Uma
________________________________________
From: Ivan Kelly [ivank@apache.org]
Sent: Tuesday, July 10, 2012 4:22 PM
To: bookkeeper-dev@zookeeper.apache.org
Subject: Re: Read entry performance when bookie in the ensemble in unreachable.....

Hmmm, perhaps we should add a blacklist to the PendingReadOp, or we
could decide to only read from bookies which are in /ledgers/available

Could you open a JIRA for this.

Cheers
Ivan

=======================================================================","11/Jul/12 06:52;umamaheswararao;Flavio's reply in mailing list about this issue:

=================================================
I'm not sure blacklisting is a good idea, the bookie could be simply a little slow at that point for whatever reason. It might be a better idea to have a separate timeout for reads. We send read requests to the quorum sequentially to optimize the use bandwidth, but it is clear that slow/dead bookies can hurt performance. We have essentially optimized for what we believed to be the common case. 

-Flavio

================================================

","11/Jul/12 06:59;umamaheswararao;Hi Ivan, If we check available bookie's check, we may end up in checking for every entry right, whether bookie is available or not. 
Instead how does the above suggesion sounds to you? We will read the entry from that fault bookie only after the trails for remaining good bookis in the quorum. So, that we are just changing the oreder of read trails in quorum bookies for entries by keeping track of the failed bookies in a faultBookie list. So, that we are not completely avaoiding the reads from that fault bookies. We will to read from this fault bookies only if all other bookies also failed in quorum.","11/Jul/12 07:57;fpj;Changing the order of reads for a readEntry request for a single request makes sense because the problem might be transient. If the problem persists, we should drop the bookie and change the ensemble. 

My suggestion is to have a short read timeout and simply move on to the next bookie quickly. This way does not require keeping a blacklist.

We could also provide another scheduler that sends reads to all bookies in parallel (or to any subset greater than 1). ","11/Jul/12 08:30;umamaheswararao;Thanks a lot, Flavio for your opinion.

{quote}
If the problem persists, we should drop the bookie and change the ensemble. 
{quote}
This would be taken care by AutoRecovery worker if really Bookie is unavailable little later. read can continue with others until we have other bookies in quorum.

{quote}
My suggestion is to have a short read timeout and simply move on to the next bookie quickly. This way does not require keeping a blacklist.
{quote}
Yep, this would be a simplest option. But need to check the scenarios like, if quorum of bookies present in the slow network may create read failure due to this short timeout ..etc. In network down case, whatever whatever timeout we set that much time it will wait.
If n entries present in X bookie and its NW down, then n-y entries may be required to read first from this bookie based scheduling algorithm.

So, overall latency would be (n-y)* configured timeout. So, when compared to normal reads this will have little latency. Ofcource, I understand this is the initial design for the best optimization and have roundrobin fashion.
May be our first option may be more better than this as we will not talk to that failed bookie for next entries?

My worry here is, whatever latency in this read, it will get added to the NameNode switch time. Currently ZKFC will find and switch within 5secs I guess. This read latency will get added to that 5secs switch time due to some bookie are in outof network. 

Thanks in advance, Ivan and Flavio for your valuable opinions.
","11/Jul/12 09:32;hustlmsp;{quote}
One Idea is that, we can add the failed BKto blackList and from the next entry onwards, we will try first to the healthy bks then we will try for the blackListed bookie from the quorum trails.
Why we are planning to retry on blackListed bookies also is, that bookie may come back or can serve well for next reads. But we will give chance only after reamaining bookies faild for the read. 
{quote}

If I understood correctly, the blackList could be a list which maintains the slow bookies based on previous requests. following requests could first tried bookies not in this list, then tried bookies in this this. I think it is a good solution to improve read latency for following requests.

but seems the problem mentioned in Rakesh's comment. the timeout latency hitting a unreachable bookie still would still be 10s, due to netty setting. so the above solution could not resolve it. and the long latency might introduced due to other reasons like slow disks on bookie server. Flavio is trying to introduce a solution to switch bookies in fixed timeout period to avoid long read latency: a new read request would be send if previous one does not respond. then we had two requests on-the-fly reading same entry from two bookies, the quick one would win and callback.

I think we may consider including these two solutions: blacklist use to pick a might-be-better bookie as start to read entry, read timeout mechanism to avoid long latency and quick switch to next bookie.

","11/Jul/12 09:46;umamaheswararao;{quote}
but seems the problem mentioned in Rakesh's comment. the timeout latency hitting a unreachable bookie still would still be 10s, due to netty setting.
{quote}
Yes, 10s is deffenitely we may have to reduce or make it configurable, because our NN switch itself will take just 5secs. By including my proposal, this latency will be only for one entry.

Yep, I agree, keeping the both option will solve the things. And we can tune the config value however user wants depending on his clusters.
","11/Jul/12 09:56;fpj;The thing I don't like about the blacklist idea is the following. Keeping a blacklist requires determining which bookies are misbehaving by not responding fast enough or at all. Since we are targeting performance, we don't want to wait too long to go to the next bookie to read an entry. With a short timeout, we will possibly have a lot of false positives because a request may have been caused by a transient problem. False positives make maintaining the blacklist difficult.   ","11/Jul/12 10:06;rakeshr;I just prepared an initial draft version and uploaded, here the idea is just re-ordering the replica indexes:

On read failure, it will just queued the bookie to the 'unhealthybookies' list. Next sendRead() request will consider the 'unhealthybookies' and prepare the replicabookieIndex in such a way that good bookies will come first in the list and then the unhealthy bookie. This way we would be able to move the slow/bad bookies last in the queue and will do the read. 

On successful read from an unhealthy bookie will clear the entry from the 'unhealthybookies' list.

I'd like to know the suggestion on this approach.","11/Jul/12 10:25;rakeshr;Thanks all for the suggestions and thoughts.

Presently in our code base, we are configuring the ""readTimeout"" in the channel bookie. 
As Uma suggested I'd also prefer providing ""connectionTimeOut' as a configurable item. Both the re-ordering and ""timeouts"" will help to improve the read performance.
","11/Jul/12 10:39;hustlmsp;{quote}
With a short timeout, we will possibly have a lot of false positives because a request may have been caused by a transient problem. False positives make maintaining the blacklist difficult.
{quote}

short timeout provided the mechanism to quick switch to try next bookie. but it doesn't change read sequence, next read still started from same slow bookie. same long latency needs for following read requests.

re-ordering the read sequence could avoid it. I treated blacklist as a kind of mechanism to achieve re-ordering. I think both needs for read latency.","11/Jul/12 11:12;rakeshr;bq.re-ordering the read sequence could avoid it. I treated blacklist as a kind of mechanism to achieve re-ordering

The attached patch is based on the re-ordering mechanism and treated failed bookies are unhealthy and kept last in the list. 
Please review.","11/Jul/12 21:54;fpj;bq. short timeout provided the mechanism to quick switch to try next bookie. but it doesn't change read sequence, next read still started from same slow bookie. same long latency needs for following read requests.

@sijie In general we have been taking an optimistic approach to reading. If you're not happy with that approach, perhaps we should have a pessimistic approach implemented in a different scheduler so that we can switch between the two.

bq. The attached patch is based on the re-ordering mechanism and treated failed bookies are unhealthy and kept last in the list. 

@rakesh Could you post it on the review board, please, Rakesh? I haven't looked at the patch yet, but I'm still wondering if we should have a separate scheduler just so that we still have the option of using the approach we have currently implemented.  ","12/Jul/12 00:19;hustlmsp;{code}
@sijie In general we have been taking an optimistic approach to reading. If you're not happy with that approach, perhaps we should have a pessimistic approach implemented in a different scheduler so that we can switch between the two.
{code}

I think both 're-ordering' and 'timeout' are needed to solve this problem. They resolved the problem in two different aspects.

Let me explaining my understandings as below.

suppose we have an ensemble (bk1, bk2, bk3). bk1 is slow and it needs 10s to get read response; bk2 and bk3 are fast and it needs 1s to get read response. 

for success case:

using current strategy: the read needs 10s to get the response.
'timeout' strategy: suppose we had 5s timeout. we don't received response from bk1 at 5s. it does switch to read entry from bk2. bk2 responded at 1s. we need total 6s to get response.
're-ordering' strategy: we had some latency statistics to know which bookies are slow (unreachable bookie is a kind of slow bookie whose latency is infinite). now we know bk1 is 10s slow, we start trying reading from bk2. so we just need 1s to get the response.

for failure case: (suppose bk1 returned failure response after 10s)

using current strategy: the read first try bk1 and then try bk2. the total time is 11s.
'timeout' strategy: as above. we need 6s.
're-ordering' strategy: just need 1s if we had know bk1 is a slow bookie.


As my explanation, 'timeout' resolve the read latency problem when hitting a slow bookie, while 're-ordering' try to avoid hitting a slow bookie based on previous requests' statistics. They are two different aspects of this problem. They doesn't conflict on resolving this issue.

And I think we could abstract it to provide different strategies.

","12/Jul/12 00:34;hustlmsp;@Rakesh

{code}
private Set<InetSocketAddress> unhealthyBookies = new HashSet<InetSocketAddress>();
{code}

seems unhealthyBookies is a local variable in PendingReadOp. so it is only useful for a readEntries request. it doesn't make sense if readEntries are just reading little entries. As my understanding, it would be a shared status across different readEntries requests.

>> bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java

for 're-ordering', it is a read sequence problem. I'd prefer 're-ordering' changes would behind an interface. the interface might just return next bookie to read. and you could put the original solution (in-ordering read sequence) and 're-ordering' solution as different implementation.

as Flavio's suggestion, seems that it could be done in a separated distribution schedule. ","20/Jul/12 11:03;rakeshr;@Flavio
bq. Could you post it on the review board, please, Rakesh?
There are few more refactoring to be done as part of the comments in the JIRA, Is that ok to post for review after the changes? Also it would be great to see your thoughts on the following refactoring.


@Sijie
bq.as Flavio's suggestion, seems that it could be done in a separated distribution schedule. 

Yeah, I agree to make more generic to the LedgerHandle level rather than for each LedgerEntry. I feel we should have few more details of the health/proirity of bookies in the DistributionSchedule interface.

----
Following are just my thoughts to refactor the scheduling algo, please have a look and would like to know your opinon?
*Proposal:*
I'm just thinking to call this as different scheduling strategies:
{code}
org.apache.bookkeeper.client.DistributionSchedule.java

    ScheduleStrategy getScheduleStrategy();

    public enum ScheduleStrategy {
        ROUNDROBIN, ORDEREDROUNDROBIN;
    }
{code}

Also, introducing new interface(thought of not adding ordering to the existing DistributionSchedule algo). New interface is an extended version of DistributionSchedule, which has the api getBookieIndexes(SchedulerContext) as follows: 
{code}
org.apache.bookkeeper.client.OrderedDistributionSchedule.java

public interface OrderedDistributionSchedule extends DistributionSchedule {
    SchedulerContext getSchedulerContext();
    /**
     * Get the bookieIndexes of the given context. This bookie index will be ordered
     * according to the priority of bookies and high priority bookies will be first
     * in the list.
     */
    public Set<Integer> getBookieIndexes(SchedulerContext schedulerContext);

    public interface SchedulerContext {
        void setEntryId();
        void setQuorumSize();
        void addCurrentEnsemble(ArrayList<InetSocketAddress> ensemble);
        void addLowPriorityBookie(InetSocketAddress bookieAddr);
        void removeLowPriorityBookie(InetSocketAddress bookieAddr);
    }
}
{code}
----

How the strategies will be used?

{code}
Will expose the strategy as a configuration item in bk_server.conf like:
schedulingStrategy=RoundRobin (by default)
schedulingStrategy=OrderedRoundRobin
{code}

When initializing the LedgerHandle, based on the strategy will create schedulers. Other modules will use like:
{code}
if(lh.distributionSchedulegetScheduleStrategy() == ScheduleStrategy.ORDEREDROUNDROBIN)
           // casting to specifc strategy algo and do necessary operations
           (OrderedDistributionSchedule)lh.distributionSchedule
{code}
","20/Jul/12 12:26;rakeshr;These are just my thoughts, but I don't think this is the best, since it requires specific typecasting.

Another simple approach is to modify the existing distributionSchedule interface, this needs dummy implementation to the RRDistributionSchedule algo and other OrderedRRDistributionSchedule algo will have ordered implementation. 


Hi All, Could you please help me to give your ideas as its core part.

Thanks, 
Rakesh","23/Jul/12 03:15;hustlmsp;@Rakesh, thanks for providing such proposal. 

I'd have a different opinion on the interface. *DistributionSchedule* is an interface determines how entries are distributed to store among bookies. It is a strategy how we store the entries but not a strategy how we read/write the entries. For this jira, you are proposing different way to read entries from current strategy deployed in BookKeeper client. so I think we'd need a clean interface how to read entries from an ensemble instead of adding new methods in *DistributionSchedule*.

How about define an interface as below?
{code}
interface ReadStrategy {

	/**
	 * Read entry <ledgerId, entryId>.
	 * The implementation should handle the logic how to retry reading all replicas.
	 *
	 * The entry would be returned in callback' context object.
	 */
	public void readEntry(LedgerHandle lh, LedgerEntry entry, ReadEntryCallback callback);

}
{code} 

the *ReadStrategy* interface provides a method for PendingReadOp to read an entry. the implementations should implement their logics to retry reading all replicas. 

you could move PendingReadOp#sendRead and PendingReadOp#logErrorAndReattemptRead to a default read strategy. And you could implement your re-ordering read logic in a ReorderingReadStrategy.

What is your opinion? And Would like to see others' comments.","24/Jul/12 13:06;rakeshr;Thanks a lot Sijie for the idea.

Hi All, I've uploaded latest patch which defines the following read strategies and is maintianed in distribution schedule. Please have a look.
- ReadStrategy
 -- SimpleReadStrategy
 -- OrderedReadStrategy

-Rakesh",25/Jul/12 04:15;rakeshr;review board: https://reviews.apache.org/r/6128/,25/Jul/12 05:28;hustlmsp;I had added my comments in review board : https://reviews.apache.org/r/6128/,"06/Aug/12 17:40;ikelly;I'd prefer to only have one implementation of the reading schedule, which covers all usecases, and that it is completely encapsulated in PendingReadOp. Flavio and I discussed this last week and came up with something like the following (it has changed a little since I've thought about it more).

For each bookie, record the response time of the last read request. When making a read request, if the last response time for the replica is greater than a configured threshold, make the read request for the next replica also. 

To do this, we maintain a array of int in PendingReadOp, int[] responseTimes = new int[ensembleSize]; 
The response time can be UNKNOWN, PENDING, or a positive integer.
Initially all will be initialized to UNKNOWN. When a read request is made to a bookie, we check the response time. If it is UNKNOWN, we make the request to the bookie, and to the next bookie also. If is PENDING, we do not send to the bookie, but we do send to the next bookie. If it is a positive int, we check it against the threshold and send to the next bookie also if it exceeds the threshold. 


This does mean quite a large change to PendingReadOp, as at the moment it tries to read all entries in parallel. ","08/Aug/12 08:52;rakeshr;@Ivan Thanks a lot for the new idea. Just few clarifications.

bq. I'd prefer to only have one implementation of the reading schedule
@Flavio @Sijie
Would like to know your opinion on this. As we had talked about to have a separate scheduling algo for the perf oriented strategies?


bq.When making a read request, if the last response time for the replica is greater than a configured threshold, make the read request for the next replica also.

You are suggesting to have parallel reads and whoever wins will send the result back to the client. Also collect statistics of the previous reads.

Will the parallel read (to the quorum bookies) makes the bkserver busy/exhaust with many read requests ?


bq.To do this, we maintain a array of int in PendingReadOp, int[] responseTimes = new int[ensembleSize]; 

Since PendingReadOp is for single entry, bookie statistics should be maintained behind and in the bkclient like, 
HashSet bkResponseTimes <InetAddress, Integer> = new HashSet <InetAddress, Integer>(). 
When reading, it justs initialize the PendingReadOp with previous statistics(UNKNOWN/PENDING/+ve integer) and will send the requests to the bookie which has good response time. Also I feel, the bookies can be reordered based on the statistics by sending request to the good/fast bookies first.","08/Aug/12 08:56;rakeshr;oops..just few correction. Please read the datastructure as 
HashMap<InetAddress, Integer> bkResponseTimes = new HashMap <InetAddress, Integer>();","08/Aug/12 09:56;hustlmsp;{quote}
 Would like to know your opinion on this. As we had talked about to have a separate scheduling algo for the perf oriented strategies?
{quote}

@Rekesh, @Ivan:

I think we still need a clean interface ReadStrategy to allow the possibility to provide different read strategies. For code maintain, it would be better to have only one read strategy in codebase.

{quote}
To do this, we maintain a array of int in PendingReadOp, int[] responseTimes = new int[ensembleSize]; 
The response time can be UNKNOWN, PENDING, or a positive integer.
Initially all will be initialized to UNKNOWN. When a read request is made to a bookie, we check the response time. If it is UNKNOWN, we make the request to the bookie, and to the next bookie also. If is PENDING, we do not send to the bookie, but we do send to the next bookie. If it is a positive int, we check it against the threshold and send to the next bookie also if it exceeds the threshold.
{quote}

it did the 'timeout' part as my previous comment. If we choose bookie to start reading according to the response time, it would be kind of 're-order'. the idea matches my previous comment. I am OK with it.
","09/Aug/12 10:49;ikelly;My previously suggested solution won't work with the current implementation of PendingReadOp. We read all entries in parallel, so we can't decide whether to make more than one read based on previous reads. Generally, all read requests are sent at the start, so there'll never be an opportunity to make the decision. 
","09/Aug/12 13:21;hustlmsp;ah, if the responseTimes is only internal structure for a read operation. it doesn't help make the decision. but if the responseTimes is a kind of statistics shared by the client, it would help.

Ivan's comment reminder me that there might be a problem for 're-order' Rakesh proposed.

currently, the read requests for a bunch of entries would be issued round-robin way, which balanced the load. if 're-order' as proposed, the read requests load might be not balanced. so 're-order' may improve nothing but introduced complexity.

seems timeout is a simple and straightforward solution. ","09/Aug/12 15:43;ikelly;Yes, i think having a timeout is the most straightforward solution to this. As kicking off all reads requests at the same time, we won't have to wait on the timeout for each individual request as I had initially thought. We can have this timeout as configurable, but I think that 2 seconds is a reasonable default. 

- Kick off a timer at end of PendingReadOp#initiate()
- When timer times out, iterate through PendingReadOp#seq.
   - For each entry, if not completed, kick off next speculative read
- Set timer again

We must allow a response from either of the read requests to complete the entry. We also have to modify error handling to only propagate to client if all read requests have failed. 
","10/Aug/12 01:31;fpj;It sounds like we cannot avoid an extra timeout unless we send a read request for a given entry to all replicas in parallel (we assume that at least one will be available; if not, the request will eventually fail). Consequently, it sounds like we need a timeout in the way Ivan is proposing.

I'm not against having another scheme that enables parallel read requests for the same entry of a ledger. It is a way of trading throughput for latency upon crash events. ","22/Aug/12 15:25;ikelly;I've attached a first draft at the proposed fix. There's still a few things missing, such as the timeout is hardcoded now, and there's no testing yet, so I really don't know how well it works. All current tests pass though.

https://github.com/ivankelly/bookkeeper/tree/BOOKKEEPER-336","21/Oct/12 19:49;rakeshr;Hi Ivan, The idea of timeout approach also works well and improves read perf.

Just to conclude our discussion, the following approaches has been discussed so far.
- reordering of bkclients based on health
- read timeouts with sequential reads
- read timeouts with parallel reads
- provide multiple read schemes

Hi All, Could you please give your vote to select better one:-)
","22/Oct/12 16:27;ikelly;I think ""read timeouts with parallel reads"" is best, and i've already implemented it. I'll try to add tests this week.
","23/Oct/12 01:45;stuhood;bq. I think ""read timeouts with parallel reads"" is best, and i've already implemented it.
+1. This is the simplest place to start, and gives the best benefits for availability and latency. Optimizations for throughput can come later.","24/Oct/12 07:18;rakeshr;Thanks Ivan, Stud for the participation. I also agree to go with read timeouts.

I could see the parallel read to quorum bookies would make the bkserver busy/exhaust with many read requests and may affect the write latency in worst case. But good thing is, we have BOOKKEEPER-429 idea of separate read/write threads, this would help us in latency and IMO this issue also go together.
 ",26/Oct/12 17:51;ikelly;Added tests and made configurable. Ready for review,"26/Oct/12 17:55;ikelly;https://reviews.apache.org/r/7749/

requires BOOKKEEPER-444 to apply","28/Oct/12 19:47;rakeshr;Thanks Ivan for the patch and BitSet usage is very nice. I've added few comments in review board, could you please have a look.","31/Oct/12 16:00;ikelly;I've just realized I posted the wrong patch. The proper patch already addressed most of your comments, plus it had tests. Ive updated on reviewboard and here.","31/Oct/12 17:57;ikelly;new patch switches back where the timer is started, but the requestsSent flag wasnt needed anyhow. Also, there was a possible ConcurrentModificationException. Fixed by switching to ArrayBlockingQueue","27/Nov/12 13:42;hadoopqa;Testing JIRA BOOKKEEPER-336

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12551593/0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch"">/jira/secure/attachment/12551593/0002-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch</a> downloaded at Tue Nov 27 13:19:57 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 8 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:red}-1 JAVADOC{color}
.    {color:red}-1{color} the patch seems to introduce 1 new Javadoc warning(s)
.    {color:red}WARNING{color}: the current HEAD has 8 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
.    {color:red}WARNING{color}: the current HEAD has 9 javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 397
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/37/",30/Nov/12 16:24;ikelly;New patch fixes precommit complaints.,"30/Nov/12 16:56;hadoopqa;Testing JIRA BOOKKEEPER-336

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555517/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch"">/jira/secure/attachment/12555517/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch</a> downloaded at Fri Nov 30 16:31:14 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:green}+1 TESTS{color}
.    Tests run: 391
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/56/","03/Dec/12 11:16;hadoopqa;Testing JIRA BOOKKEEPER-336

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555734/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch"">/jira/secure/attachment/12555734/0001-BOOKKEEPER-336-bookie-readEntries-is-taking-more-tim.patch</a> downloaded at Mon Dec  3 10:52:06 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 394
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/64/","03/Dec/12 18:56;rakeshr;Good work Ivan, +1 for the speculative reads.","04/Dec/12 05:44;hudson;Integrated in bookkeeper-trunk #836 (See [https://builds.apache.org/job/bookkeeper-trunk/836/])
    [REVERT] BOOKKEEPER-336 bookie readEntries is taking more time if the ensemble has failed bookie(s) Basic speculative functionality  in place
Accidently committed this change, before approval. Reverting (ivank) (Revision 1416408)
BOOKKEEPER-336 bookie readEntries is taking more time if the ensemble has failed bookie(s) Basic speculative functionality  in place (Revision 1416393)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
","10/Dec/12 12:22;fpj;Overall it looks pretty good. I have a number of comments, not necessarily blockers for this patch:

# In the case the digest of an entry doesn't match, we will discard the entry, although we have heard from the bookie. Consequently, we need to request another entry, and possibly this is handled through a different code path. Is it the case? In the case there is a different code path to deal with invalid entries, we may want to consider coalescing them as much as possible. 
# It would be great to add documentation for the new parameter and to update conf/bk_server.conf
# The default value for the speculative read seems a large. Is there any reason why we shouldn't be a bit more aggressive with the default value, especially because we can turn off speculative reads altogether?
# Please fix typos in the comments. I've seen at least a couple, like ""functionallity"".
# In the future, it might be a good idea to use failure detection techniques like phi accrual for the speculative read timeout instead of having a fixed value. ",10/Dec/12 12:23;fpj;Sorting out comments.,"10/Dec/12 14:38;ikelly;{quote}
1. In the case the digest of an entry doesn't match, we will discard the entry, although we have heard from the bookie. Consequently, we need to request another entry, and possibly this is handled through a different code path. Is it the case? In the case there is a different code path to deal with invalid entries, we may want to consider coalescing them as much as possible.{quote}
In the case of a digest fail, it will go through the same path as before. i.e. it will try the next replica anyhow.


{quote}2. It would be great to add documentation for the new parameter and to update conf/bk_server.conf{quote}
The option is client side only so it doesn't belong in bk_server.conf. Will add something in bookkeeperConfigParams.textile.

{quote}3. The default value for the speculative read seems a large. Is there any reason why we shouldn't be a bit more aggressive with the default value, especially because we can turn off speculative reads altogether?{quote}
It's much lower than connection timeout which is what was being hit originally (10 seconds). I have no problem with lowering it, but at this stage selecting a default value is guess work, and 2s seems reasonable to me.

{quote}4. Please fix typos in the comments. I've seen at least a couple, like ""functionallity"".{quote}
Will fix and put up a new patch.

{quote}
5. In the future, it might be a good idea to use failure detection techniques like phi accrual for the speculative read timeout instead of having a fixed value.
{quote}
This would be nice. Has this stuff gone into ZK yet, perhaps we could reuse some of that code. In any case, future work.","10/Dec/12 14:54;fpj;bq. The option is client side only so it doesn't belong in bk_server.conf.

You're right, my bad.

bq. This would be nice. Has this stuff gone into ZK yet, perhaps we could reuse some of that code. In any case, future work.

No, it implied too many changes and the guy who did it didn't push very hard either. Here it would be a lot more focused, so less of a concern.
","10/Dec/12 18:20;hustlmsp;two comments about the patch.

1. Using Timer per reading op is not a good idea, because each timer would create a thread associated with it. Image that there are lots of ledgers being used (e.g. Hedwig case), there might be lot of threads created, which is bad. I would suggest using (maybe reuse existing one) ScheduledExecutorService to schedule speculative reads instead of creating a new timer each time.

2. could you define -1 to meaningful constants? it might make code more readable.

otherwise, the remaining part of the patch looks good to me.","12/Dec/12 20:50;ikelly;new patch addresses comments.

[~hustlmsp] I couldn't remove all the -1s as some come from List#indexOf.","13/Dec/12 05:31;hustlmsp;{quote}
I couldn't remove all the -1s as some come from List#indexOf.
{quote}

Sounds OK for me.

+1 for the new patch. Great work, Ivan. Thanks.",13/Dec/12 12:08;ikelly;Committed as r1421242. Thanks for reviewing guys.,13/Dec/12 12:12;ikelly;I had to manually merge with BOOKKEEPER-365. Attaching final patch.,"14/Dec/12 06:51;hudson;Integrated in bookkeeper-trunk #860 (See [https://builds.apache.org/job/bookkeeper-trunk/860/])
    BOOKKEEPER-336: bookie readEntries is taking more time if the ensemble has failed bookie(s) (ivank) (Revision 1421242)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
",,,,,,,
System.currentTimeMillis usage in Hedwig,BOOKKEEPER-330,12597985,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,umamaheswararao,hustlmsp,hustlmsp,09/Jul/12 06:45,13/Feb/13 15:46,14/Mar/19 02:39,26/Jul/12 03:23,4.0.0,4.1.0,4.2.0,,,hedwig-server,,,0,,Need same changes in hedwig server as what did in bookkeeper as BOOKKEEPER-327.,,,,,,,,,,,,,,,BOOKKEEPER-327,,,,18/Jul/12 20:49;umamaheswararao;BOOKKEEPER-330.patch;https://issues.apache.org/jira/secure/attachment/12537066/BOOKKEEPER-330.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-09 06:50:20.969,,,no_permission,,,,,,,,,,,,,293530,,,Thu Jul 26 12:36:09 UTC 2012,,,,,,0|i0tbfj:,169161,,,,,,,,"09/Jul/12 06:50;umamaheswararao;I am not familiar in hedwig code, I will try to change in hedwig part also as the changes are straightforward.
Sijie, is there for review :-).",18/Jul/12 20:50;umamaheswararao;Updated a simple patch reflecting to BK-327.,"18/Jul/12 21:13;mridulm80;I should have raised the note in BOOKKEEPER-327.
In multi-core (and/or) multi-processor machines (particularly which are running for long) this method is practically useless for fine measurement.
The precision ('fine') depends on a variety of factors I guess.

System.currentTimeMillis() is at lower resolution (and with time jumps, via ntp updates, clock skew, etc) - but the measured difference would be what the system 'thought' the time difference was : should average out to the same (unless the nodes clock is chronically loosing time).","25/Jul/12 05:31;umamaheswararao;Yes, I have seen that backward times in multicore machines in both the cases (CurrentTimeMillis and nanoTime). Also added the same comment in BK-327 as well.
I think we should not completely depend on this system times for sensitive opretaions like array access ..etc. This patch adds the check for negative on latency because there will be chance for backward times in all the cases. counter based time calculation would be better than currentTimeMillis. But I am not sure the change you are proposing here will be really required. 
You mean, we will calculate all the time diffs with currentMillis, nanoTime and average out the elapsed time? That may messup the things I feel. Because always there may inaccuracy in times due to the mismatches in currentMillis and nanoTime right. Please correct me, If I understand your point wrongly.","25/Jul/12 07:36;mridulm80;No, my point was changing from one api to another in the assumption that the bug will be resolved is misplaced - the same issues will recur (in a more unpredictable manner) with nanotime too ...
","25/Jul/12 07:46;umamaheswararao;Thanks a lot, Mridul for taking a look. 
Yep. we did not assume that switching to nanoTime will completely resolve the issue. That is the reason why we added nagative check for latency in the patch where we have faced the problem. Going like better than other one.
{code}
 if (latency < 0) {
{code}","26/Jul/12 02:40;hustlmsp;the patch looks good to me. +1 

",26/Jul/12 03:23;hustlmsp;committed as r1365873. thanks Uma.,26/Jul/12 03:47;hustlmsp;committed as r1365875 in 4.1 branch.,"26/Jul/12 12:36;hudson;Integrated in bookkeeper-trunk #620 (See [https://builds.apache.org/job/bookkeeper-trunk/620/])
    BOOKKEEPER-330: System.currentTimeMillis usage in Hedwig (uma via sijie) (Revision 1365873)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
provide stop scripts for hub server,BOOKKEEPER-329,12597971,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,09/Jul/12 02:32,13/Feb/13 15:47,14/Mar/19 02:39,11/Jul/12 17:25,4.0.0,4.1.0,4.1.1,4.2.0,,hedwig-server,,,0,,"as what we did in BOOKKEEPER-296, it would be better to provide similar script to start/stop hub server.",,,,,,,,,,,,,,,BOOKKEEPER-296,,,,09/Jul/12 02:36;hustlmsp;BOOKKEEPER-329.diff;https://issues.apache.org/jira/secure/attachment/12535608/BOOKKEEPER-329.diff,11/Jul/12 06:02;hustlmsp;BOOKKEEPER-329.diff_v2;https://issues.apache.org/jira/secure/attachment/12535989/BOOKKEEPER-329.diff_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-07-10 16:00:51.297,,,no_permission,,,,,,,,,,,,,293529,,,Fri Sep 07 05:54:53 UTC 2012,,,,,,0|i0tbf3:,169159,,,,,,,,09/Jul/12 02:36;hustlmsp;attach a patch to provide script to stop hub server.,"10/Jul/12 16:00;ikelly;The script doesn't work as I would expect it to (this also holds for bookkeeper-daemon.sh).

{quote}
$ sh hedwig-server/bin/hedwig-daemon.sh start
starting , logging to /Users/test/src/bookkeeper/hedwig-server/logs/hedwig--sweetgreat-lm.log
JMX enabled by default
Usage: hedwig <command>
where command is one of:
    server           Run the hedwig server
    console          Run the hedwig admin console
    help             This help message

or command is the full name of a class with a defined main() method.

Environment variables:
{quote}

Being a daemon only makes sense for the server command, in this case, and in the bookkeeper case.  The behaviour I expect from this script is that I run:
{quote}
$ bin/hedwig-daemon.sh start
{quote}
and the daemon starts. 

I run
{quote}
$ bin/hedwig-daemon.sh stop
{quote}
and the daemon stops.

There should not be any other commandline arguments. Any configuration should be through hwenv.sh. Could you make the same changes for bookkeeper-daemon.sh also? ","10/Jul/12 16:28;hustlmsp;actually for bookkeeper-daemon.sh, you could use it to start a bookie server or a localbookie instance. if changed to what you suggested, we had to use it to just start a bookie server.

to keep consistent style, I provided similar start/stop script as bookkeeper for hedwig.","10/Jul/12 16:45;ikelly;Hmmm, i disagree with needing it for localbookie, but we will need it for auditor pretty soon. The error needs to be more explicit though. If the <service> is not provided, we should error early and error loudly. Also, there are things which we should never ever ever daemonize, such as console. 

I think for there should be a list of approved daemonizable commands, 
{code}
case $command in 
    bookie|auditor)
	echo doing $command
	;;
    *)
	echo service must be one of bookie,auditor
	;;
esac
{code}",11/Jul/12 02:06;hustlmsp;agreed on checking service. would do the changes in the new patch.,"11/Jul/12 04:22;umamaheswararao;{quote}
Also, there are things which we should never ever ever daemonize, such as console. 
{quote}
Excellent point you have raised Ivan. Agree, accepting console options in daemon scripts will not be good. We should have restricted to accept only required stuff from daemon scripts.

Shall I reopen BK-296 for the amendment patch (instead of giving here for addressing Ivan's comments in BK scripts)? because relevant changes will be with the correct JIRA.",11/Jul/12 06:02;hustlmsp;attach a new patch to check service in hedwig-daemon.sh,"11/Jul/12 06:03;hustlmsp;@Uma, I am ok to reopen BK-296 if it made changes more clearly.","11/Jul/12 17:25;ikelly;New script looks good. 

Committed revision 1360311. Good work Sijie.

I was also thinking, should we put this and bookkeeper-daemon.sh into 4.1.1 also?","11/Jul/12 18:03;hudson;Integrated in bookkeeper-trunk #601 (See [https://builds.apache.org/job/bookkeeper-trunk/601/])
    BOOKKEEPER-329: provide stop scripts for hub server (sijie via ivank) (Revision 1360311)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper-daemon.sh
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig-daemon.sh
* /zookeeper/bookkeeper/trunk/hedwig-server/conf/hwenv.sh
* /zookeeper/bookkeeper/trunk/hedwig-server/conf/log4j.properties
","11/Jul/12 23:43;hustlmsp;@Ivan. +1 for 4.1.1. these scripts are useful for users. and they are newly added scripts, which are easy to put them in 4.1.1.",07/Sep/12 05:54;hustlmsp;committed as r1381890 in branch 4.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System.currentTimeMillis usage in BookKeeper,BOOKKEEPER-327,12597624,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,umamaheswararao,rakeshr,rakeshr,05/Jul/12 18:04,13/Feb/13 15:46,14/Mar/19 02:39,24/Jul/12 17:03,4.0.0,4.1.0,4.1.1,4.2.0,,,,,0,,"The following exception occured in the bookie statistics logic due to the System time changes. In our bookie cluster its running a periodic syncup scripts just to unify the SystemTime in all the machines. This is causing the problem and resulting ArrayIndexOutOfBoundException.
{code}
Exception in thread ""BookieJournal-3181"" java.lang.ArrayIndexOutOfBoundsException: -423
at org.apache.bookkeeper.proto.BKStats$OpStats.updateLatency(BKStats.java:126)
at org.apache.bookkeeper.proto.BookieServer.writeComplete(BookieServer.java:655)
at org.apache.bookkeeper.bookie.Journal.run(Journal.java:507)
{code}

This jira is raised to discuss whether to use ??System.nanoTime()?? instead of ??System.currentTimeMillis()??",,,,,,,,,,,,,,,,,,,09/Jul/12 03:00;umamaheswararao;BOOKKEEPER-327-1.patch;https://issues.apache.org/jira/secure/attachment/12535610/BOOKKEEPER-327-1.patch,16/Jul/12 19:10;umamaheswararao;BOOKKEEPER-327-2.patch;https://issues.apache.org/jira/secure/attachment/12536695/BOOKKEEPER-327-2.patch,24/Jul/12 21:18;fpj;BOOKKEEPER-327-Branch4.1.patch;https://issues.apache.org/jira/secure/attachment/12537752/BOOKKEEPER-327-Branch4.1.patch,08/Jul/12 05:30;umamaheswararao;BOOKKEEPER-327.patch;https://issues.apache.org/jira/secure/attachment/12535557/BOOKKEEPER-327.patch,05/Jul/12 20:16;umamaheswararao;BOOKKEEPER-327.patch;https://issues.apache.org/jira/secure/attachment/12535253/BOOKKEEPER-327.patch,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-07-05 20:22:43.455,,,no_permission,,,,,,,,,,,,,293570,,,Wed Jul 25 05:22:44 UTC 2012,,,,,,0|i0tcc7:,169308,,,,,,,,"05/Jul/12 20:22;umamaheswararao;@Rakesh, can you please set the effect versions field?

Since this JIRA raised for System.currentTimeMillis() discussion, I have changed currentMillis to nanoTime in BKServer code.
This particular changes we have done in Hadoop also. So, the above patch should work with the systems where monotonicness supports.

But seeing the trace you have given looks to be different than this problem.

{code}
 synchronized public void updateLatency(long latency) {
            totalLatency += latency;
            ++numSuccessOps;
            if (latency < minLatency) {
                minLatency = latency;
            }
            if (latency > maxLatency) {
                maxLatency = latency;
            }
            int bucket;
            if (latency <= 100) { // less than 100ms
                bucket = (int)(latency / 10);
            } else if (latency <= 1000) { // 100ms ~ 1000ms
                bucket = 1 * 9 + (int)(latency / 100);
            } else if (latency <= 10000) { // 1s ~ 10s
                bucket = 2 * 9 + (int)(latency / 1000);
            } else { // more than 10s
                bucket = 3 * 9 + 1;
            }
            ++latencyBuckets[bucket];
        }
{code}

trace shows the last line. I don't see system time here.
","06/Jul/12 01:46;hustlmsp;ah, I got the reason why it throws ArrayIndexOutOfBoundsException. seems that the latency becomes negative due to SystemTime changed. we need check latency when updateLatency. I think the fix is quite simple.","06/Jul/12 02:38;umamaheswararao;Oops, I missed it. elapsed time passed with 

long elapsedTime = System.currentTimeMillis() - startTime;
bkStats.getOpStats(BKStats.STATS_ADD).updateLatency(elapsedTime);

etc.

@Sijie, you mean you are proposing to check negative value while passing? shall we keep the currentTimeMillis to nanoTime above?

or how about, checking for negative latency value, if it is negative value, that is for sure system time change, we can warn saying ""System time might have changed, the calculated latency will not be correct/accurate one'. 
then fall into the below category by setting latency to 0 ? But while calculating averageLatency, it will mess up. It will produce almost wrong values about avgLatency.
{code}
if (latency <= 100) { // less than 100ms
                bucket = (int)(latency / 10);
            }
{code}
","07/Jul/12 12:14;umamaheswararao;Update:

We have seen again this issue. I am not sure about 1st occurance. 
But with NanoTime we have seen this negative value in one of our BK cluster.

We have just ran one small sample test with this elapsed time calculation.

Elapsed Time: -4294965969
Elapsed Time: -4287444203
Elapsed Time: -4287387003
Elapsed Time: -4286339034
Elapsed Time: -4287371149
Elapsed Time: -4287349218
Elapsed Time: -4287274419


We have 8 CPU machine running BK cluster and many other processes running on it.

Also I have seen some posts abaout the similar experience.
http://stackoverflow.com/questions/510462/is-system-nanotime-completely-useless

System.currentMillis also gav backwards it seems run 'backwards', in the absence of clock adjustments.

Finally it turns out to me that, we should not depend on this time where we are doing some sensitive operations. There should be a recovery even it went wrong in time diff value slightly.

What I am thinking here is:

{code}
 if (latency < 0) { // less than 0ms . Ideally this should not
                // happen. We have seen this latency negative in
                // some cases.
                LOG.warn(""Latency time coming negative"");
                bucket = 0;
            }
{code}

we will reserve 0th bucket for this kind of values which are coming with negative latency.

From 1 + (int) (latency / 10); --> 1 * 9 + (int) (latency / 100); can be for less than 100ms latency metrics.

Can you check the impact with this proposal, as I did not try Statistics till now in any of our clusters. temporarily I have disabled statistics in our cluster till this issue solved.",07/Jul/12 13:35;umamaheswararao;http://stackoverflow.com/questions/2978598/will-sytem-currenttimemillis-always-return-a-value-previous-calls,"08/Jul/12 04:51;hustlmsp;@Uma, yes. we need to negative checking for latency. but I don't think we need to reserve bucket for negative latency, because it doesn't help on calculating totalLatency and avgLatency. inorder to keep consistency between numSuccessOps and buckets, so I think the changes could be just outputting error message.

{code}
synchronized public void updateLatency(long latency) {

            if (latency < 0) { // less than 0ms . Ideally this should not
                // happen. We have seen this latency negative in
                // some cases.
                LOG.warn(""Latency time coming negative"");
                return;
            }

            totalLatency += latency;
            ++numSuccessOps;
            if (latency < minLatency) {
                minLatency = latency;
            }
            if (latency > maxLatency) {
                maxLatency = latency;
            }
            int bucket;
            if (latency <= 100) { // less than 100ms
                bucket = (int)(latency / 10);
            } else if (latency <= 1000) { // 100ms ~ 1000ms
                bucket = 1 * 9 + (int)(latency / 100);
            } else if (latency <= 10000) { // 1s ~ 10s
                bucket = 2 * 9 + (int)(latency / 1000);
            } else { // more than 10s
                bucket = 3 * 9 + 1;
            }
            ++latencyBuckets[bucket];
        }
{code}

>>> for nanoTime

+1 for the changes on nanoTime.","08/Jul/12 05:37;umamaheswararao;Thanks a lot, Sijie for taking a look.

I also convened with you about negative check. Because that is the case where it should not happen, Just logged the warn.
Why I was thinking to reserve one bucket is, if some wants to check whether there are many such cases are there or not. But thinking again, this is an unexpected case and may not occur regularly, so that bucket will not utilized and also may not help to the user. Warn message can help in that case.

Updated the patch. Could you please take a look.
 ","09/Jul/12 02:04;hustlmsp;@Uma, thanks for the new patch.

It looks good for me. just one line in BKStats. I think you copied and pasted it from LocalBookKeeper. It would be better to change it to BKStats and remove the import of LocalBookKeeper.

{code}
private static final Logger LOG = LoggerFactory.getLogger(LocalBookKeeper.class);
{code}","09/Jul/12 03:03;umamaheswararao;Oops, my mistake...sorry Sijie, somehow forgot to change that, after copy.
I have just removed LocalBooKeeper reference.

Thanks a lot for the review Sijie.","09/Jul/12 06:04;rakeshr;Just one comment. 

{code}
System.nanoTime() / NANOSECONDS_PER_MILLISECOND;
{code}

Its good to use the 'java.util.concurrent.TimeUnit' for the nanos to millis conversion
{code}TimeUnit.NANOSECONDS.toMillis(System.nanoTime()){code}

","09/Jul/12 06:46;umamaheswararao;{noformat}
 /**
     * Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>.
     * @param duration the duration
     * @return the converted duration,
     * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
     * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
     * @see #convert
     */
{noformat}
Here it will automatically conevrting on overflow the values and returning Long.MAX_VALUES or MIN_VALUE respectively.

Here in latency we want to ignore on such nagative cases. Also it present in concurrent package. I feel, its ok for this small math operation in MathUtils.java.
","09/Jul/12 09:43;rakeshr;Hi Uma, BTW patch looks good. Its just a suggestion only and there is no functional issue.
","09/Jul/12 09:49;umamaheswararao;@Rakesh, If you feel strognly, I can change it.",09/Jul/12 09:50;rakeshr;+1 patch looks good me.,09/Jul/12 13:57;hustlmsp;+1 new patch looks good to me.,"15/Jul/12 15:02;hustlmsp;seems the patch is ready to go. could anyone take a look at it? if there is no concern, I would like to let it in.","15/Jul/12 21:40;fpj;It looks good to me, I just have one comment. monotonicNow() seems to be relying on System.nanoTime() to return values that monotonically increase. To make it really monotonic despite non-monotonic implementations of System.nanoTime(), perhaps we should save the last returned value and return the last saved in the case that the value System.nanoTime() evaluates to a smaller value compared to any value it has returned before. In general, I just think it is a good idea to make sure that monotonicNow() returns monotonically increasing values.","16/Jul/12 04:44;umamaheswararao;Thanks a lot , Flavio for the comments.
I will take a look on it today in some time.
","16/Jul/12 06:50;umamaheswararao;{code}
 public static long monotonicNow() {
        long currentNanoTime = System.nanoTime();
        
        if (currentNanoTime < previousNanoTime) {
            currentNanoTime = previousNanoTime;
        } else {
            previousNanoTime = currentNanoTime;
        }
        
        return currentNanoTime / NANOSECONDS_PER_MILLISECOND;
    }
{code}

I hope your suggetsion is like above.
Here I need to add synchronization to acheive the correct results out of it right.( please correct me if I unserstood your sugestion wrongly)
So, I am worried here, whether that will create any overhead on read/writes as they will get called in that flows as well.

Alternatively I thought of ThreadLocal, but that also may not work as we are spawning many childthreads in the single read/write flow. If we have any comparision from parent thread and child thread generated value may have diff values in that case. So, I am not preferring this approach.


Also we don't have any the Atomic* API's for greater/lesser values comparion setters.

What is your opinion on adding synchronizations to that block?
Alternatively do you any Idea running in your mind?

Thanks a lot,

Uma
","16/Jul/12 12:21;fpj;Agreed, we need to perform the operation atomically, and the skeleton you present is pretty much what I had in mind. 

My perception is that the synchronized block would be short and simple, so the performance overhead should be minimal, but frankly I'm not sure. 

If you're worried about the overhead, which I believe is justifiable, perhaps we could simply rename the method since in my understanding it is not guaranteed to return monotonically increasing values.","16/Jul/12 12:31;hustlmsp;making it monotonic base on non-monotonic method would introduce overhead. I'd prefer keeping it as simple as possible since it is a utility function would be used very frequently. as Flavio mentioned, in order to not make user confused, it would be better to use other name.","16/Jul/12 19:10;umamaheswararao;Thanks a lot for the comments.
Now changed the monitonicNow method name to just 'now'. This represents just the current time and using internally System.nanoTime.",17/Jul/12 08:49;hustlmsp;thanks Uma for updating. +1 for new patch.,"23/Jul/12 21:40;fpj;+1, thanks a lot, Uma! Committed revision 1364808.","23/Jul/12 21:47;fpj;This issue is marked for 4.0.0, but the patch doesn't apply to the 4.0 branch. Uma, Do you want to produce a patch for the 4.0 branch? Let me also point out that we don't have a bug fix release schedule for the 4.0 branch, but we could still check this one in the case we have one eventually.

","23/Jul/12 22:16;hudson;Integrated in bookkeeper-trunk #617 (See [https://builds.apache.org/job/bookkeeper-trunk/617/])
    BOOKKEEPER-327: System.currentTimeMillis usage in BookKeeper (uma via fpj) (Revision 1364808)

     Result = ABORTED
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java
","24/Jul/12 14:54;umamaheswararao;Thanks a lot, Flavio.

IMO, this is not required in 4.0.0 as we did not decide to release any point release on that yet.
If any one expecting this to go into 4.0.0, I would be happy to create a patch on 4.0.0 as well.

Otherwise we can mark it as closed.

Thanks,
Uma

",24/Jul/12 17:03;fpj;I have also committed to branch 4.1. Committed revision 1365171.,"25/Jul/12 05:22;umamaheswararao;Thanks a lot, Flavio for 4.1 patch. Also thanks for resolving it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeadLock during ledger recovery ,BOOKKEEPER-326,12597399,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,rakeshr,vinayrpet,vinayrpet,04/Jul/12 04:38,13/Feb/13 15:46,14/Mar/19 02:39,13/Aug/12 09:39,4.1.0,,4.1.1,4.2.0,,,,,0,,Deadlock found during ledger recovery. please find the attached thread dump.,,,,,,,,,,,,,,,BOOKKEEPER-239,,,,13/Aug/12 10:20;surendrasingh;BK326.png;https://issues.apache.org/jira/secure/attachment/12540637/BK326.png,04/Jul/12 04:40;vinayrpet;BK_DeadLock.log;https://issues.apache.org/jira/secure/attachment/12535037/BK_DeadLock.log,16/Jul/12 09:36;rakeshr;BOOKKEEPER-326.1.patch;https://issues.apache.org/jira/secure/attachment/12536609/BOOKKEEPER-326.1.patch,23/Jul/12 08:42;rakeshr;BOOKKEEPER-326.2.patch;https://issues.apache.org/jira/secure/attachment/12537552/BOOKKEEPER-326.2.patch,10/Aug/12 10:53;rakeshr;BOOKKEEPER-326.3.patch;https://issues.apache.org/jira/secure/attachment/12540468/BOOKKEEPER-326.3.patch,13/Jul/12 15:24;ikelly;BOOKKEEPER-326.part2.diff;https://issues.apache.org/jira/secure/attachment/12536396/BOOKKEEPER-326.part2.diff,05/Jul/12 06:18;rakeshr;BOOKKEEPER-326.patch;https://issues.apache.org/jira/secure/attachment/12535151/BOOKKEEPER-326.patch,,,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2012-07-04 05:33:48.246,,,no_permission,,,,,,,,,,,,,293515,,,Tue Aug 14 05:06:45 UTC 2012,,,,,,0|i0tasn:,169058,,,,,,,,"04/Jul/12 04:39;vinayrpet;{code}Found one Java-level deadlock:
=============================
""pool-91-thread-1"":
  waiting to lock monitor 0x000000004039bce0 (object 0x00007f3dc329b6a0, a org.apache.bookkeeper.proto.PerChannelBookieClient),
  which is held by ""main-EventThread""
""main-EventThread"":
  waiting to lock monitor 0x00000000401f4e50 (object 0x00007f3dc329b958, a org.apache.bookkeeper.client.ReadLastConfirmedOp),
  which is held by ""pool-91-thread-1""

Java stack information for the threads listed above:
===================================================
""pool-91-thread-1"":
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connectIfNeededAndDoOp(PerChannelBookieClient.java:184)
	- waiting to lock <0x00007f3dc329b6a0> (a org.apache.bookkeeper.proto.PerChannelBookieClient)
	at org.apache.bookkeeper.proto.BookieClient.readEntry(BookieClient.java:144)
	at org.apache.bookkeeper.client.PendingReadOp.sendRead(PendingReadOp.java:109)
	at org.apache.bookkeeper.client.PendingReadOp.initiate(PendingReadOp.java:93)
	at org.apache.bookkeeper.client.LedgerHandle.asyncReadEntries(LedgerHandle.java:382)
	at org.apache.bookkeeper.client.LedgerRecoveryOp.doRecoveryRead(LedgerRecoveryOp.java:92)
	at org.apache.bookkeeper.client.LedgerRecoveryOp.access$000(LedgerRecoveryOp.java:46)
	at org.apache.bookkeeper.client.LedgerRecoveryOp$1.readLastConfirmedDataComplete(LedgerRecoveryOp.java:70)
	at org.apache.bookkeeper.client.ReadLastConfirmedOp.readEntryComplete(ReadLastConfirmedOp.java:116)
	- locked <0x00007f3dc329b958> (a org.apache.bookkeeper.client.ReadLastConfirmedOp)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.handleReadResponse(PerChannelBookieClient.java:634)
	at org.apache.bookkeeper.proto.PerChannelBookieClient$7.safeRun(PerChannelBookieClient.java:539)
	at org.apache.bookkeeper.util.SafeRunnable.run(SafeRunnable.java:31)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
""main-EventThread"":
	at org.apache.bookkeeper.client.ReadLastConfirmedOp.readEntryComplete(ReadLastConfirmedOp.java:79)
	- waiting to lock <0x00007f3dc329b958> (a org.apache.bookkeeper.client.ReadLastConfirmedOp)
	at org.apache.bookkeeper.proto.BookieClient$3.operationComplete(BookieClient.java:132)
	at org.apache.bookkeeper.proto.BookieClient$3.operationComplete(BookieClient.java:128)
	at org.apache.bookkeeper.proto.PerChannelBookieClient$1.operationComplete(PerChannelBookieClient.java:168)
	at org.jboss.netty.channel.DefaultChannelFuture.notifyListener(DefaultChannelFuture.java:381)
	at org.jboss.netty.channel.DefaultChannelFuture.addListener(DefaultChannelFuture.java:148)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connect(PerChannelBookieClient.java:137)
	- locked <0x00007f3dc329b6a0> (a org.apache.bookkeeper.proto.PerChannelBookieClient)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connectIfNeededAndDoOp(PerChannelBookieClient.java:200)
	- locked <0x00007f3dc329b6a0> (a org.apache.bookkeeper.proto.PerChannelBookieClient)
	at org.apache.bookkeeper.proto.BookieClient.readEntryAndFenceLedger(BookieClient.java:128)
	at org.apache.bookkeeper.client.ReadLastConfirmedOp.initiateWithFencing(ReadLastConfirmedOp.java:69)
	at org.apache.bookkeeper.client.LedgerRecoveryOp.initiate(LedgerRecoveryOp.java:84)
	at org.apache.bookkeeper.client.LedgerHandle$5.processResult(LedgerHandle.java:804)
	at org.apache.bookkeeper.util.RetryableZookeeper$6.processResult(RetryableZookeeper.java:633)
	at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:545)
	at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)

Found 1 deadlock.{code}
",04/Jul/12 04:40;vinayrpet;Attached jstack threaddump.,"04/Jul/12 05:33;rakeshr;After analyzing the threaddump I could see, the DefaultChannelFuture.notifyListener() is notifying in the same thread where the PerChannelBookieClient.connect() is invoked. Now the pendingOp.operationComplete(rc, null); is executing and inturn reaches the ReadLastConfirmedOp.readEntryComplete() and is waiting for ReadLastConfirmedOp lock acquisition.
{code}
at org.apache.bookkeeper.client.ReadLastConfirmedOp.readEntryComplete(ReadLastConfirmedOp.java:79)
	- waiting to lock <0x00007f3dc329b958> (a org.apache.bookkeeper.client.ReadLastConfirmedOp)
	at org.apache.bookkeeper.proto.BookieClient$3.operationComplete(BookieClient.java:132)
	at org.apache.bookkeeper.proto.BookieClient$3.operationComplete(BookieClient.java:128)
	at org.apache.bookkeeper.proto.PerChannelBookieClient$1.operationComplete(PerChannelBookieClient.java:168)
	at org.jboss.netty.channel.DefaultChannelFuture.notifyListener(DefaultChannelFuture.java:381)
	at org.jboss.netty.channel.DefaultChannelFuture.addListener(DefaultChannelFuture.java:148)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connect(PerChannelBookieClient.java:137)
	- locked <0x00007f3dc329b6a0> (a org.apache.bookkeeper.proto.PerChannelBookieClient)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connectIfNeededAndDoOp(PerChannelBookieClient.java:200)
	- locked <0x00007f3dc329b6a0> (a org.apache.bookkeeper.proto.PerChannelBookieClient)
{code}


I think the contract mentioned in the comment 'trick to not do operations under the lock' is broken, since the DefaultChannelFuture.notifyListener() is coming in the same thread where PerChannelBookieClient.connect() is invoked.
{code}
synchronized private void connect() {
        future.addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                int rc;
                Queue<GenericCallback<Void>> oldPendingOps;

                synchronized (PerChannelBookieClient.this) {
                    .....
                    .....
                    .....
                    // trick to not do operations under the lock, take the list
                    // of pending ops and assign it to a new variable, while
                    // emptying the pending ops by just assigning it to a new
                    // list
                    oldPendingOps = pendingOps;
                    pendingOps = new ArrayDeque<GenericCallback<Void>>();
                }
                for (GenericCallback<Void> pendingOp : oldPendingOps) {
                    pendingOp.operationComplete(rc, null);
                }
            }
        });
}
{code}


-Rakesh","04/Jul/12 06:24;vinayrpet;Hi Rakesh,

I did some investigation on netty behaviour while invoking the listeners.

Here it is:
1. The race is between following 2 lines of PerChannelBookieClient.
    {code}
         ChannelFuture future = bootstrap.connect(addr);

        future.addListener(new ChannelFutureListener() {code}
2. bootstrap.connect(addr) will put a connection request to one queue which will be processed by another thread and set the connection result.  
  If the result of connection is available before  adding the listener to future in future.addListener(..), 
    then listener will be invoked in same thread immediately still holding the locks.
 

Overall scenario 
--------------------------
# Ledger is created and entries are writter to 3 bookies.
# one of bookie is killed. (say this bookie is not the first bookie in the ensemble)
# New bookie started.
# now openLedger() call is made to recover the ledger. as part of this readLastConfirmed request will be added each of the bookies with callback ReadLastConfirmedOp.readEntryComplete which is synchronized.
# First callback came from first bookie which is alive in separate thread and entered ReadLastConfirmedOp.readEntryComplete() and processing.
# Another Callback came for the failed bookie from connect() method by holding the lock of PerChannelBookieClient instance of failed bookie, and trying to invoke the same callback, but BLOCKED. ( Here to invoke the listener in same thread, need to wait before future.addListener(..) by putting debug point)
# As part of first call back, doRecoveryRead() will put one PendingReadOp request for asyncread. If this PendingReadOp selects same PerChannelBookieClient of failed bookie for read, then it will enter to deadlock. (To reproduce, bookieIndex variable can be changed to index of the failed bookie in PendingReadOp.sendRead(..))

( Can reuse the existing test BookieFailureTest.testLedgerOpenAfterBKCrashed())","04/Jul/12 12:51;umamaheswararao;Will it be a good idea to execute the callback on separate thread always? that would be one options to solve.

Shall we mark this as blocker as this is coming frequently in CI(internal)? also this is at main flows.



","05/Jul/12 02:39;hustlmsp;ah, this issue is quite similar as BOOKKEEPER-215 and BOOKKEEPER-239. The common cause of these jiras are we call bookkeeper operations (addEntry/readEntry) in previous operations' callbacks. 

a possible fix (as Uma mentioned) is to submit bookkeeper operations in another OrderedSafeExecutor (callbackWorker) not call them directly in previous operations' callback, which is in the early patch for BOOKKEEPER-215. I think this fix could resolve deadlock issue encountered in ledger recovery both BOOKKEEPER-239 and BOOKKEEPER-326.

{code}
 import org.apache.bookkeeper.client.DigestManager.RecoveryData;
 import org.apache.bookkeeper.proto.BookieProtocol;
 import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;
+import org.apache.bookkeeper.util.SafeRunnable;
 
 import org.apache.zookeeper.KeeperException;
 import org.slf4j.Logger;
@@ -89,16 +90,22 @@ class LedgerRecoveryOp implements ReadCallback, AddCallback {
      */
     private void doRecoveryRead() {
         lh.lastAddConfirmed++;
-        lh.asyncReadEntries(lh.lastAddConfirmed, lh.lastAddConfirmed, this, null);
+        LOG.debug(""Submit recovery read entry {} for ledger {}"", lh.lastAddConfirmed, lh.getId());
+        lh.bk.callbackWorker.submitOrdered(lh.getId(), new SafeRunnable() {
+            @Override
+            public void safeRun() {
+                lh.asyncReadEntries(lh.lastAddConfirmed, lh.lastAddConfirmed, LedgerRecoveryOp.this, null);
+            }
+        });
     }
 
     @Override
-    public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {
+    public void readComplete(int rc, final LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {
         // get back to prev value
         lh.lastAddConfirmed--;
         if (rc == BKException.Code.OK) {
             LedgerEntry entry = seq.nextElement();
-            byte[] data = entry.getEntry();
+            final byte[] data = entry.getEntry();
 
             /*
              * We will add this entry again to make sure it is written to enough
@@ -106,7 +113,12 @@ class LedgerRecoveryOp implements ReadCallback, AddCallback {
              * be added again when processing the call to add it.
              */
             lh.length = entry.getLength() - (long) data.length;
-            lh.asyncRecoveryAddEntry(data, 0, data.length, this, null);
+            lh.bk.callbackWorker.submitOrdered(lh.getId(), new SafeRunnable() {
+                @Override
+                public void safeRun() {
+                    lh.asyncRecoveryAddEntry(data, 0, data.length, LedgerRecoveryOp.this, null);
+                }
+            });
 
             return;
         }
{code}
","05/Jul/12 02:42;hustlmsp;marked it as blocker, since the deadlock issue is in ledger recovery which is a core operation.",05/Jul/12 02:43;hustlmsp;similar issue in BOOKKEEPER-239.,"05/Jul/12 06:29;rakeshr;Hi All,

I just moved the addlistener() outside the lock, so that notifications will invoke all the pendingOps not under the PerChannelBookieClient.this lock.

I've uploaded initial draft patch to discuss more on the problem and identifying better approach.

IMHO, it would be good if we able to correct the PerChannelBookieClient rather than fixing in the callbacks.","12/Jul/12 16:07;ikelly;I don't think the problem here is that callbacks are running in the same thread. Rather, in LedgerHandle, even though we have an executor, we only use it for add operations. If we put all read operations and readLastConfirmed operations into the executor, we shouldn't be able to get deadlocks like this, as operations on a single ledger should be serialized. 

Of course this doesn't address the Semaphore based deadlock. I was thinking recently that we could start using something like http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/util/concurrent/RateLimiter.html to alleviate the problem.  ",12/Jul/12 16:08;ikelly;Is this deadlock easily reproducible? ,"13/Jul/12 04:48;rakeshr;@Ivan
bq.I don't think the problem here is that callbacks are running in the same thread

ChannelFuture javadoc says that if the connection has already established before adding the listener, it will be notified immediately.
{code}
    /**
     * Adds the specified listener to this future.  The
     * specified listener is notified when this future is
     * {@linkplain #isDone() done}.  If this future is already
     * completed, the specified listener is notified immediately.
     */
    void addListener(ChannelFutureListener listener);
{code}

Also, I've seen netty is creating 'DefaultChannelFuture' instance and the addListener() method invokes operationComplete() call in the same thread.
{code}
    public void addListener(ChannelFutureListener listener) {
        if (listener == null) {
            throw new NullPointerException(""listener"");
        }

        boolean notifyNow = false;
        synchronized (this) {
            if (done) {
                notifyNow = true;
            } else {
                //.......
            }
        }

        if (notifyNow) {
            notifyListener(listener);
        }
    }
{code}


We will be able to see this by just hold(debug point) the 'future.addListener()' invocation for few ms/secs. After connection establishment if we execute future.addListener will notifies the operationComplete() in the same thread. ","13/Jul/12 05:06;rakeshr;I'm thinking the following contract broken due to this behaviour of netty notifications. 
Either we should have an executor for 'pendingOp.operationComplete(rc, null);' or like the uploaded patch we will fully exclude addlistener() call outside PerChannelBookieClient lock?

{code}
// trick to not do operations under the lock, take the list
// of pending ops and assign it to a new variable, while
// emptying the pending ops by just assigning it to a new
// list
{code}","13/Jul/12 10:33;ikelly;{quote}
We will be able to see this by just hold(debug point) the 'future.addListener()' invocation for few ms/secs. After connection establishment if we execute future.addListener will notifies the operationComplete() in the same thread. 
{quote}
What test case are you executing when you do this? I've added a mod, to await on the future and then add the listener, but it's not hitting the deadlock.

","13/Jul/12 11:59;rakeshr;Hi Ivan, Hope you have seen the netty notification are coming in the same thread after adding the wait before addListener()?

Test case: BookieFailureTest.testLedgerOpenAfterBKCrashed()

Scenario link:
https://issues.apache.org/jira/browse/BOOKKEEPER-326?focusedCommentId=13406296&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13406296
","13/Jul/12 15:24;ikelly;I managed to repro this.

I think the solution should be two-fold.
1. We should tighten up the the synchronization as Rakesh's patch does.
2. We should ensure that call to the client don't reenter. I've attached a patch which insures it doesn't happen on the public methods of LedgerHandle.

In fact, I think 1 could go even further. The only thing that needs to be protected by synchronization in PerChannelBookieClient#connect is the state variable. As such, that's all we should be protecting.","16/Jul/12 09:49;rakeshr;Thanks a lot Ivan for your time:)

I've uploaded new patch by incorporating Ivan's point. Here I tried to keep only the 'state' and 'channel' under the PerChannelBookieClient.this lock.

Also, I've added a test case but this will only forcing to establish new client connections. With this there is high chance of getting notifications in the same thread and invoke the pending operations in the caller thread itself. We would be able to reproduce the deadlock scenario only by putting debug points.

Hi others, Please have a look on the latest patch.

Thanks, 
Rakesh ","16/Jul/12 12:58;hustlmsp;thanks for Rakesh providing the patch.

{code}
-    synchronized private void connect() {
-        if (state == ConnectionState.CONNECTING) {
-            return;
-        } 
-        // Start the connection attempt to the input server host.
-        state = ConnectionState.CONNECTING;
-
+    private void connect() {
{code}

I am not sure I understood the above changes. but if you removed the above codes. how you could prevent concurrently call to #connect method? as Ivan suggested, synchronized on state variable would be enough.


{quote}
2. We should ensure that call to the client don't reenter. I've attached a patch which insures it doesn't happen on the public methods of LedgerHandle.
{quote}

-1 on the changes Ivan made to LedgerHandle. it breaks the throttle mechanism we deployed in BookKeeper now. for now, we use semaphore to do rate limit on both read/write operations, if permits are exhausted, the client which called addEntry/readEntries would be blocked until the permits are releases. the changes would not block client when permits are exhausted.

so before we had a new throttling mechanism (may be using RateLimit as Ivan mentioned), we don't need to include these changes in this jira. And I think it would be in BOOKKEEPER-239 discussing new throttling mechanism.","16/Jul/12 13:42;rakeshr;Thanks a lot Sijie for your time and review.

bq.as Ivan suggested, synchronized on state variable would be enough.
@Sijie
As I understood from Ivan's comment, we should protect only the state variable in the synchronization and suggested to move the connection logic outside the sync block. 

Could you please clarify whether you are suggesting to use 'synchronized on state variable'? IMHO shouldn't use enum as lock(since the object will change when state changes and lock will be no more)

Ivan's comment: ""The only thing that needs to be protected by synchronization in PerChannelBookieClient#connect is the state variable""


bq.but if you removed the above codes. how you could prevent concurrently call to #connect method?
I haven't completely cleared, instead just moved the checks to connectIfNeededAndDoOp() so that if the state is connecting then returning silently by adding op to 'pendingOps'. Here the flow will not come to connect at all.
{code}
synchronized (this) {
   //....
   //...
  if (state == ConnectionState.CONNECTING) {
      // just return as connection request has already send
      // and waiting for the response.
      return;
  }
  // switch state to connecting and do connection attempt
  state = ConnectionState.CONNECTING;

  if (!doOpNow) {
    // Start the connection attempt to the input server host.
    connect();
  }
{code}


{quote}-1 on the changes Ivan made to LedgerHandle. it breaks the throttle mechanism we deployed in BookKeeper now. for now, we use semaphore to do rate limit on both read/write operations, if permits are exhausted, the client which called addEntry/readEntries would be blocked until the permits are releases. the changes would not block client when permits are exhausted.
so before we had a new throttling mechanism (may be using RateLimit as Ivan mentioned), we don't need to include these changes in this jira. And I think it would be in BOOKKEEPER-239 discussing new throttling mechanism.{quote}

BTW, if you have any suggestions/logic to be done as part of this JIRA, could you please explain me so that I'll take care.
","16/Jul/12 14:04;hustlmsp;ah, sorry, I just missed the part you move from #connect() to #connectIfNeededAndDoOp(). you changes are correct.

>> BTW, if you have any suggestions/logic to be done as part of this JIRA, could you please explain me so that I'll take care

I don't have any logic to add here. As my comment, if we want to change throttling mechanism, it would be in BOOKKEEPER-239 not here.

+1 on Rakesh's changes.","23/Jul/12 08:42;rakeshr;Hi Sijie, as per the suggestion uploaded latest patch includes only PerChannelBookieClient changes. 

It would be great if others can have a look on the changes.

Thanks,
Rakesh","23/Jul/12 09:38;umamaheswararao;@Rakesh, change looks good to me.

I have some observations in test but they are not be really related to this chnage alone.
In Tests: Default BookieRecoveryTest taking the number of bookies as argument in constructors.
So, setUp will start the number of bookies for testCase. If we start any bookies our own, do we need to clean all the resources( ex: bsConf) to that Bookie our own? what is the contract here?
Otherwise I have seen one problem with restartBookies API. This API is useing the bsConf for restarting the bookies. But tearDown is leaving that extra started Bookies confs in bsConf. So, restartBookies may start that older bookies also.
In my opinion, we should clean that bsConf in tearSown or stopBKCluster.
Since this change is not related to this particular change, does it make sense to file a separate JIRA? Why I raised this concerne here is, when I saw the test code observed there are extra bookies started in this test.
What do you say Sijie?

Also, I am not sure, that test will reproduce the case, but it may be worth keeping the test as he is using newer clients. I am not sure, is there a better way to automat this deadLock here by tests. So,keeping this test should be ok from me.

Thanks
Uma

","06/Aug/12 15:31;ikelly;{quote}
-1 on the changes Ivan made to LedgerHandle. it breaks the throttle mechanism we deployed in BookKeeper now. for now, we use semaphore to do rate limit on both read/write operations, if permits are exhausted, the client which called addEntry/readEntries would be blocked until the permits are releases. the changes would not block client when permits are exhausted.{quote}
I had forgotten that PendingReadOp reaches into the ledger handle to take the permit. I think, even if don't move to a rate limiting semaphore, we should move all calls to the semaphore into LedgerHandle and remove all accesses from without. This way, we could make the change I suggested, which would be another safeguard against deadlocking, and is generally better software engineering practice also.

@Rakesh
The patch you have up is good. Is there a reason this JIRA isn't patch available?","07/Aug/12 04:51;rakeshr;@Ivan
I was trying to reproduce deadlock through test case, but couldn't:(","07/Aug/12 07:40;ikelly;I think it's near impossible to automatically and reliably trigger this deadlock, as it's reliant on a delay occurring between bootstrap.connect, and adding the FutureListener. I think I could get it to trigger fairly reliably with some hacks in the code (no suitable for putting into production), so you you submit a patch with the fix, forgetting about the test case, run with the hack to ensure it hits, apply your patch, and then run with the hack again to verify the deadlock does not occur.","07/Aug/12 12:33;rakeshr;bq.I think it's near impossible to automatically and reliably trigger this deadlock

@Ivan
Then could you have a look on 'BOOKKEEPER-326.2.patch'. Here I had kept only the necessary changes.",10/Aug/12 10:53;rakeshr;I've rebased the patch in the latest trunk code. Could you please help to review.,"10/Aug/12 11:04;surendrasingh;@Ivan
{quote}
I think it's near impossible to automatically and reliably trigger this deadlock, as it's reliant on a delay occurring between bootstrap.connect, and adding the FutureListener. I think I could get it to trigger fairly reliably with some hacks in the code (no suitable for putting into production), so you you submit a patch with the fix, forgetting about the test case, run with the hack to ensure it hits, apply your patch, and then run with the hack again to verify the deadlock does not occur.
{quote}

The following scenario was tested by applying the patch and ""JCarder agent"" enabled (for deadlock detection).

1.Ledger is created and entries are writter to 3 bookies.
2.one of bookie is killed. (say this bookie is not the first bookie in the ensemble)
3.New bookie started.
4.now openLedger() call is made to recover the ledger. as part of this readLastConfirmed request will be added each of the bookies with callback ReadLastConfirmedOp.readEntryComplete which is synchronized.
5.First callback came from first bookie which is alive in separate thread and entered ReadLastConfirmedOp.readEntryComplete() and processing.
6.Another Callback came for the failed bookie from connect() method by holding the lock of PerChannelBookieClient instance of failed bookie, and trying to invoke the same callback, but BLOCKED. ( Here to invoke the listener in same thread, need to wait before future.addListener(..) by putting debug point)
7.As part of first call back, doRecoveryRead() will put one PendingReadOp request for asyncread. If this PendingReadOp selects same PerChannelBookieClient of failed bookie for read, then it will enter to deadlock. (To reproduce, bookieIndex variable can be changed to index of the failed bookie in PendingReadOp.sendRead(..))

JCarder Output:
==================
Loaded from database files:
   Nodes: 4112
   Edges: 5946 (excluding 5786 duplicated)

Cycle analysis result:
   Cycles:          0
   Edges in cycles: 0
   Nodes in cycles: 0
   Max cycle depth: 0
   Max graph depth: 2

Ignoring 0 gated cycle(s).
No cycles found!

","10/Aug/12 11:13;ikelly;@surendra
Do you have the same output for the scenario without the patch applied?",13/Aug/12 09:39;ikelly;Committed as r1372343. Thanks Rakesh,"13/Aug/12 10:16;hudson;Integrated in bookkeeper-trunk #645 (See [https://builds.apache.org/job/bookkeeper-trunk/645/])
    BOOKKEEPER-326: DeadLock during ledger recovery (rakeshr via ivank) (Revision 1372343)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java
","13/Aug/12 10:22;surendrasingh;@Ivan

Jcarder Report without applying the patch : 

========================================================================
Opening for reading: D:\out\jcarder_contexts.db
Opening for reading: D:\out\jcarder_events.db

Loaded from database files:
   Nodes: 843
   Edges: 774 (excluding 10449 duplicated)

Cycle analysis result:
   Cycles:          1
   Edges in cycles: 2
   Nodes in cycles: 2
   Max cycle depth: 2
   Max graph depth: 3

Ignoring 0 gated cycle(s).
Ignoring 0 almost identical cycle(s).

===================================================================================

Here one cycle is found.
I have attached one BK326.PNG file which show the graphically Deadlock cycle.",13/Aug/12 11:05;ikelly;Committed to 4.1 branch as r1372362.,13/Aug/12 11:16;ikelly;Thanks for the numbers Surendra,"14/Aug/12 05:06;rakeshr;Thanks a lot Surendra. Its great work!
Also Thanks Sijie & Ivan for the reviews and committing the issue:)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flakeyness in LedgerCreateDeleteTest,BOOKKEEPER-324,12597132,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,03/Jul/12 10:35,13/Feb/13 15:46,14/Mar/19 02:39,04/Jul/12 14:18,,,4.1.1,4.2.0,,,,,0,,"Fails when running in a loop for about 40 minutes. Failure is a ConcurrentModificationException

{code}
  <testcase time=""3.018"" classname=""org.apache.bookkeeper.test.LedgerCreateDeleteTest"" name=""testCreateDeleteLedgers"">
    <error type=""java.util.ConcurrentModificationException"">java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$EntryIterator.next(HashMap.java:834)
	at java.util.HashMap$EntryIterator.next(HashMap.java:832)
	at org.apache.bookkeeper.bookie.LedgerCacheImpl.close(LedgerCacheImpl.java:781)
	at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.shutdown(InterleavedLedgerStorage.java:73)
	at org.apache.bookkeeper.bookie.Bookie.shutdown(Bookie.java:644)
	at org.apache.bookkeeper.bookie.Bookie.shutdown(Bookie.java:630)
	at org.apache.bookkeeper.proto.BookieServer.shutdown(BookieServer.java:110)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.stopBKCluster(BookKeeperClusterTestCase.java:146)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.tearDown(BookKeeperClusterTestCase.java:94)
	at junit.framework.TestCase.runBare(TestCase.java:140)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
{code}",,,,,,,,,,,,,,,,,,,03/Jul/12 13:57;ikelly;BOOKKEEPER-324.diff;https://issues.apache.org/jira/secure/attachment/12534871/BOOKKEEPER-324.diff,03/Jul/12 10:36;ikelly;TEST-org.apache.bookkeeper.test.LedgerCreateDeleteTest.xml;https://issues.apache.org/jira/secure/attachment/12534760/TEST-org.apache.bookkeeper.test.LedgerCreateDeleteTest.xml,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-07-03 12:08:01.863,,,no_permission,,,,,,,,,,,,,293527,,,Wed Jul 04 20:39:48 UTC 2012,,,,,,0|i0tbdj:,169152,,,,,,,,"03/Jul/12 10:38;ikelly;the exception is on access to fileInfoCache.

","03/Jul/12 12:08;umamaheswararao;I think we should synchronize on  fileInfoCache in  LedgerCacheImpl#close method.

Because, if some threads are putting the element in fileInfoCache and at the same time of shutdown called, close is iterating them. SO, at this time this exception can come. I just reproduce it with LedgerCacheImpl.

Added two threads to test with debug mode, one for getFileInfo and other for close. then I blocked fileInfo before putting the lelement and allowed close to do one iteration. After the I released getFileInfo thread.


{noformat}
2012-07-03 17:32:06,984 - INFO  - [main:LedgerCacheImpl@71] - openFileLimit is 900, pageSize is 8192, pageLimit is 2712
Exception in thread ""Thread-1"" java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$EntryIterator.next(HashMap.java:834)
	at java.util.HashMap$EntryIterator.next(HashMap.java:832)
	at org.apache.bookkeeper.bookie.LedgerCacheImpl.close(LedgerCacheImpl.java:840)
	at org.apache.bookkeeper.bookie.LedgerCacheImpl$5.run(LedgerCacheImpl.java:953)
{noformat}","03/Jul/12 13:19;ikelly;Yup, the fix is quite straight forward. I wanted to check what was causing it though, because by the time close is called, there should be nothing accessing the ledger cache. I tracked it down to:
{code}
Thread: SyncThread state RUNNABLE
 +java.lang.Object.wait(Native Method)
 +org.apache.bookkeeper.bookie.LedgerCacheImpl.flushLedger(LedgerCacheImpl.java:323)
 +org.apache.bookkeeper.bookie.InterleavedLedgerStorage.flush(InterleavedLedgerStorage.java:147)
 +org.apache.bookkeeper.bookie.Bookie$SyncThread.run(Bookie.java:205)
{code}","03/Jul/12 13:57;ikelly;Fix is simple, but i've made a few extra safety changes. 

* the close now synchronizes on the file info cache before doing anything. 
* close clears the file info cache, so that if anything calls anything on the LedgerCacheImpl after close, nothing will happen.
* Order of creation of the sync thread and entrylogger were the wrong way around. sync thread uses entrylogger, so should only be used after entrylogger is initialized. Viceversa for cleanup.
* evictFileInfoIfNecessary didn't necessarily need to sync on fileInfoCache as it is only ever called from within a block which is sync. I made it sync explicitly so that in future it can't become a problem

The problem here had nothing specific to LedgerCreateDeleteTest. It could have happened on any test which shuts down a bookie.
",04/Jul/12 10:14;hustlmsp;lgtm +1. ,"04/Jul/12 11:30;umamaheswararao;{quote}
Yup, the fix is quite straight forward. I wanted to check what was causing it though, because by the time close is called, there should be nothing accessing the ledger cache. I tracked it down to:
{quote}
Ok. Thanks Ivan.

Looks good +1 from me as well.",04/Jul/12 14:18;ikelly;Committed r1357277. Thanks for reviewing guys.,"04/Jul/12 20:39;hudson;Integrated in bookkeeper-trunk #588 (See [https://builds.apache.org/job/bookkeeper-trunk/588/])
    BOOKKEEPER-324: Flakeyness in LedgerCreateDeleteTest (ivank) (Revision 1357277)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New protobufs generates findbugs errors,BOOKKEEPER-322,12596097,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,ikelly,ikelly,27/Jun/12 14:09,13/Feb/13 15:46,14/Mar/19 02:39,28/Jun/12 17:33,,,4.2.0,,,,,,0,,"We need to exclude the protobuf generated classes from findbugs. Also, the generated sources should be excluded from the apache-rat:check.

Also, there's one other findbug in LedgerMetadata",,,,,,,,,,,,,,,,,,,27/Jun/12 14:50;ikelly;BOOKKEEPER-322.diff;https://issues.apache.org/jira/secure/attachment/12533662/BOOKKEEPER-322.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-28 13:27:09.665,,,no_permission,,,,,,,,,,,,,293565,,,Thu Jun 28 17:58:50 UTC 2012,,,,,,0|i0tcb3:,169303,,,,,,,,28/Jun/12 13:27;hustlmsp;the patch looks good. +1.,28/Jun/12 17:33;ikelly;Committed as r1355083. Thanks for looking Sijie.,"28/Jun/12 17:58;hudson;Integrated in bookkeeper-trunk #583 (See [https://builds.apache.org/job/bookkeeper-trunk/583/])
    BOOKKEEPER-322: New protobufs generates findbugs errors (ivank) (Revision 1355083)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/resources/findbugsExclude.xml
* /zookeeper/bookkeeper/trunk/hedwig-protocol/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/resources
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/resources/findbugsExclude.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieShell introduces 4 findbugs warnings,BOOKKEEPER-307,12595450,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Jun/12 16:34,13/Feb/13 15:46,14/Mar/19 02:39,27/Jun/12 05:11,,,4.2.0,,,,,,0,,One is an empty store. The other is about synchronized access to the journal. Easy fixes.,,,,,,,,,,,,,,,,,,,22/Jun/12 09:24;ikelly;BOOKKEEPER-307.diff;https://issues.apache.org/jira/secure/attachment/12533019/BOOKKEEPER-307.diff,21/Jun/12 16:35;ikelly;BOOKKEEPER-307.diff;https://issues.apache.org/jira/secure/attachment/12532899/BOOKKEEPER-307.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-22 02:49:52.006,,,no_permission,,,,,,,,,,,,,293522,,,Wed Jun 27 05:23:03 UTC 2012,,,,,,0|i0tb5z:,169118,,,,,,,,22/Jun/12 02:49;umamaheswararao;+1 patch looks good to me. One question: long length = recBuff.getLong(); is this one a mistake of including length in out message before?,"22/Jun/12 05:12;rakeshr;simple and good fix.
I have one suggestion, few unused imports also exists in the BookieShell class. It would be good doing the cleanup now as we are touching the class.
{code}
import java.io.RandomAccessFile;
import java.util.List;
import org.apache.commons.configuration.ConfigurationException;
{code}",22/Jun/12 09:24;ikelly;Removed unused imports.,27/Jun/12 04:53;hustlmsp;+1 for the patch.,27/Jun/12 05:11;hustlmsp;committed as r1354326. thanks Ivan for the patch. thanks Rakesh and Uma for reviewing.,"27/Jun/12 05:23;hudson;Integrated in bookkeeper-trunk #578 (See [https://builds.apache.org/job/bookkeeper-trunk/578/])
    BOOKKEEPER-307: BookieShell introduces 4 findbugs warnings (ivank via sijie) (Revision 1354326)

     Result = FAILURE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change C++ client to use gtest for testing,BOOKKEEPER-306,12595421,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Jun/12 12:20,13/Feb/13 15:46,14/Mar/19 02:39,16/Jul/12 10:36,,,4.2.0,,,,,,0,,"http://code.google.com/p/googletest/

It looks a lot nicer to run tests with than cppunit which we are using now.",,,,,,,,,,,,,,,,,,,05/Jul/12 11:03;ikelly;BOOKKEEPER-306.diff;https://issues.apache.org/jira/secure/attachment/12535180/BOOKKEEPER-306.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-16 09:55:53.927,,,no_permission,,,,,,,,,,,,,293521,,,Tue Jul 17 09:04:24 UTC 2012,,,,,,0|i0tb4n:,169112,,,,,,,,"05/Jul/12 11:03;ikelly;Check the readme for how to run the tests now. I didn't change the tests, except for changing the test framework. GTest is much more concise than Cppunit. ",16/Jul/12 09:55;hustlmsp;the patch looks good to me. +1,"16/Jul/12 10:36;hustlmsp;committed as r1361968. great work, thanks Ivan.","17/Jul/12 09:04;hudson;Integrated in bookkeeper-trunk #608 (See [https://builds.apache.org/job/bookkeeper-trunk/608/])
    BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie) (fix wrong entry in CHANGES.txt) (Revision 1362408)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerMetadata should serialized using protobufs,BOOKKEEPER-303,12595240,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,20/Jun/12 09:32,13/Feb/13 15:47,14/Mar/19 02:39,27/Jun/12 13:35,,,4.2.0,,,,,,0,,"Google protobufs is a library for serializing and deserializing data. It elegantly handles the cases where new data is added to a data format. This is useful in the case of something like LedgerMetadata, which may change over time. However, at the moment, whenever we make a change to the LedgerMetadata serialization format we have to break compatibility with old clients. By using protobufs, even if we add something to the format, old clients should be able to read the ledgers. 

We should also change our protocols to use protobufs for the same reason, but this should be done in 4.3.0.

http://code.google.com/p/protobuf/",,,,,,,,,,,,,,,,,,,26/Jun/12 08:40;ikelly;BOOKKEEPER-303.diff;https://issues.apache.org/jira/secure/attachment/12533449/BOOKKEEPER-303.diff,21/Jun/12 17:37;ikelly;BOOKKEEPER-303.diff;https://issues.apache.org/jira/secure/attachment/12532911/BOOKKEEPER-303.diff,20/Jun/12 18:41;ikelly;BOOKKEEPER-303.diff;https://issues.apache.org/jira/secure/attachment/12532738/BOOKKEEPER-303.diff,20/Jun/12 09:35;ikelly;BOOKKEEPER-303.diff;https://issues.apache.org/jira/secure/attachment/12532675/BOOKKEEPER-303.diff,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-06-20 10:02:59.581,,,no_permission,,,,,,,,,,,,,293525,,,Wed Jun 27 14:08:32 UTC 2012,,,,,,0|i0tbaf:,169138,,,,,,,,"20/Jun/12 09:35;ikelly;Patch adds protobuf for ledgermetadata. To regenerate the protocol file, run maven with the protobuf profile.

{code}
mvn install -Pprotobuf
{code}
","20/Jun/12 10:02;hustlmsp;good work, Ivan.

I haven't go thru all the patch. but just one question, why there are changes about Hedwig PubSubProtocol?","20/Jun/12 10:06;ikelly;Just to keep the version harmonized. It was 2.3.0, it's 2.4.1. I have no real preference for which version we use, but as HDFS uses 2.4.1, i need to keep that one installed. Also I changed hedwig-protocol to build the protobuf using the profile approach also. ",20/Jun/12 18:41;ikelly;Updated patch to fix a few small oversights. (and empty try {} finally {} and writing the correct version number for the ledger metadata),21/Jun/12 17:37;ikelly;Updated patch so that fencing an old client with a new client doesn't stop the old client from reading the ledger it was writing to.,"26/Jun/12 04:17;umamaheswararao;@Sijie, Could you please review this patch? It is touching hedwig related protocols.
Many of the BK-237 JIRAs are marking as dependent on this JIRA and BK-2.",26/Jun/12 08:40;ikelly;New patch adds protobuf entry to NOTICE.bin.txt and LICENSE.bin.txt,"27/Jun/12 02:49;hustlmsp;the patch is OK for me. but I had a question, should we need to put the generated protobuf java files in svn? why not let it be generated during build? in hedwig, we put generated java file in svn path but we don't put generated c++ files in svn path. If I remembered correctly, in the early version of hedwig, it also doesn't put the generated java files in svn path. I am not sure when we started put them in svn path.","27/Jun/12 06:36;ikelly;Because to generate during build, it requires that a person has protoc installed on their computer. Whats more, it requires that specific version is installed. Putting the generated files in, removes that headache from people downloading and trying out bookkeeper. ",27/Jun/12 07:56;hustlmsp;OK. I got the idea. but the generated files aren't included for hedwig cpp client. It is inconsistent behavior for cpp project. How is your opinion?,"27/Jun/12 08:12;ikelly;For the C++ client, you need the protobuf library installed, as well as other dependencies, so requiring protoc isn't too much (I should install with library anyhow). But for java, protobuf comes as a mvn dependency. So, for C++, generating the files doesn't add extra overhead. For java it does.","27/Jun/12 09:10;hustlmsp;OK. thanks Ivan for explanation. it makes sense for me.

+1 for the patch. thanks Ivan for this work.",27/Jun/12 13:35;ikelly;Committed r1354492. Thanks for reviewing Sijie.,"27/Jun/12 14:08;hudson;Integrated in bookkeeper-trunk #580 (See [https://builds.apache.org/job/bookkeeper-trunk/580/])
    BOOKKEEPER-303: LedgerMetadata should serialized using protobufs (ivank) (Revision 1354492)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/proto
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/proto/DataFormats.proto
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/resources/LICENSE.bin.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/resources/NOTICE.bin.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No more messages delivered when hub server scans messages over two ledgers.,BOOKKEEPER-302,12595234,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,20/Jun/12 08:48,13/Feb/13 15:46,14/Mar/19 02:39,28/Jun/12 17:22,4.1.0,,4.2.0,,,,,,0,,"This issue introduce when fixing BOOKKEEPER-215.

suppose topic T has four messages, message 1 is in ledger 1 while message 2~4
are in ledger 2. Hub server issue scan (1, 2) and scan (3, 4).

If hub server works correctly, it just tried to read entry 0 in ledger 1 and
entry 0 in ledger 2 during scan (1,2), while reading entry 1, 2 in ledger 2
during scan (3,4).

But unfortunately, after fixing BOOKKEEPER-215, scan (1,2) would read 0 in
ledger 1 and read 0, 1 in ledger 2. so reading entry 1 of ledger 2 would be
issued concurrently in different scans and one reading would fail without any callback (this issue is BOOKKEEPER-49).

Then the systems would be blocked there wait for the response of reading 1 of
ledger 2 and no messages would be delivered.


To fix this issue, two thing would be done.

1) fix scan issue in hub server to avoid overlapping scanning.
2) fix read issue in bookkeeper client.

fixing 1) could resolve this issue, but it would be better to fix 2) also. it should be in jira BOOKKEEPER-49.",,,,,,,,,,,,,,,BOOKKEEPER-49,,,,20/Jun/12 13:28;hustlmsp;BOOKKEEPER-302.diff;https://issues.apache.org/jira/secure/attachment/12532688/BOOKKEEPER-302.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-28 16:19:36.599,,,no_permission,,,,,,,,,,,,,293526,,,Thu Jun 28 17:44:34 UTC 2012,,,,,,0|i0tbcn:,169148,,,,,,,,"20/Jun/12 13:28;hustlmsp;attach a patch to fix this issue, which includes a test case reproduce the problem.

this fix is quite simple, just carrying *numMessagesRead* and *totalSizeRead* to next scanMessages call to avoid scanning too much messages.",28/Jun/12 16:19;ikelly;Fix is good +1. Committing.,"28/Jun/12 16:24;ikelly;Just to summarize, due to the changes in BOOKKEEPER-49, the numMessagesRead was not being passed between subsequent calls to read entries (which occurred when ledgers changed). This resulted in some requests reading too many entries, which could interfere(BOOKKEEPER-49) with later reads from the persistence manager.","28/Jun/12 17:22;ikelly;Committed r1355079. Good work Sijie.
","28/Jun/12 17:44;hudson;Integrated in bookkeeper-trunk #582 (See [https://builds.apache.org/job/bookkeeper-trunk/582/])
    BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank) (Revision 1355079)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
We run with preferIPv4Stack in the scripts but not in the tests,BOOKKEEPER-298,12560640,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,14/Jun/12 13:30,13/Feb/13 15:46,14/Mar/19 02:39,18/Jun/12 14:55,,,4.1.1,4.2.0,,,,,0,,"Bookkeeper doesn't work with IPv6, but if it's enabled, java will try to use it. We get around this by setting the java.net.preferIPv4Stack in the startup scripts but we don't set it for the tests.",,,,,,,,,,,,,,,,,,,14/Jun/12 13:59;ikelly;BOOKKEEPER-298.diff;https://issues.apache.org/jira/secure/attachment/12532081/BOOKKEEPER-298.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-18 06:11:53.91,,,no_permission,,,,,,,,,,,,,293519,,,Mon Jun 18 15:32:42 UTC 2012,,,,,,0|i0tb07:,169092,,,,,,,,14/Jun/12 13:59;ikelly;Patch added preferIPv4Stack to surefire configuration.,18/Jun/12 06:11;hustlmsp;the patch looks good to me. +1,"18/Jun/12 14:55;ikelly;Committed revision 1351371 for branch-4.1
Committed r1351374 for trunk

Thanks for reviewing Sijie.","18/Jun/12 15:32;hudson;Integrated in bookkeeper-trunk #566 (See [https://builds.apache.org/job/bookkeeper-trunk/566/])
    BOOKKEEPER-298: We run with preferIPv4Stack in the scripts but not in the tests (ivank) (Revision 1351374)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
It's better provide stop script for bookie,BOOKKEEPER-296,12560620,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,nijel,brahmareddy,brahmareddy,14/Jun/12 09:47,13/Feb/13 15:46,14/Mar/19 02:39,17/Aug/12 09:16,4.0.0,,4.1.1,4.2.0,,bookkeeper-server,,,0,,Currently there is no command to stop bookie in 4.0.0..It's better to provide stop command for bookie.,,,,,,,,,,,,,,,BOOKKEEPER-354,,,,19/Jun/12 13:27;nijel;BOOKKEEPER-296.1.patch;https://issues.apache.org/jira/secure/attachment/12532543/BOOKKEEPER-296.1.patch,20/Jun/12 16:22;nijel;BOOKKEEPER-296.2.patch;https://issues.apache.org/jira/secure/attachment/12532718/BOOKKEEPER-296.2.patch,21/Jun/12 16:35;nijel;BOOKKEEPER-296.3.patch;https://issues.apache.org/jira/secure/attachment/12532897/BOOKKEEPER-296.3.patch,30/Jun/12 13:04;nijel;BOOKKEEPER-296.4.patch;https://issues.apache.org/jira/secure/attachment/12534105/BOOKKEEPER-296.4.patch,31/Jul/12 16:18;hustlmsp;BOOKKEEPER-296.diff_improve;https://issues.apache.org/jira/secure/attachment/12538567/BOOKKEEPER-296.diff_improve,18/Jun/12 16:34;nijel;BOOKKEEPER-296.patch;https://issues.apache.org/jira/secure/attachment/12532424/BOOKKEEPER-296.patch,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-06-18 16:37:16.718,,,no_permission,,,,,,,,,,,,,293544,,,Fri Sep 07 05:49:26 UTC 2012,,,,,,0|i0tbtz:,169226,,,,,,,,"18/Jun/12 16:37;nijel;The following modificatiosn are done to make the script better

1. Implemented the pid based stop command
2. While stopping used kill command to stop it gracefully and after some timeout (configurable using system property, default 3 sec) used kill -9 to stop the bookie
3. While starting the pid file is being checked, if available the process existance is checked and if not continue with startup.

The same is implemented for localbookie

Attached the patch for this work. Pls review",19/Jun/12 09:25;nijel;Patch for the script modifications,19/Jun/12 13:27;nijel;Changed the echo statements,"19/Jun/12 14:15;umamaheswararao;Hi Nijel,

Patch looks good. A few comments:

- 
{noformat}
  $KILL $TARGET_PID
+      sleep $BOOKKEEPER_STOP_TIMEOUT
+      if kill -0 $TARGET_PID > /dev/null 2>&1; then
+          echo ""Bookkeeper Instance did not stop gracefully after $BOOKKEEPER_STOP_TIMEOUT seconds: killing with kill -9""
+          $KILL -9 $TARGET_PID
+      fi
{noformat}

After kill, always it will wait for that timeout right? is it good to move it to while and have intermediate timeouts with very less?

- There are some indentation issues. It will be good to maintain the indentation correctly for more readability.

example:
{noformat}
+   if [ -f $BOOKKEEPER_PIDFILE ]; then
+      if kill -0 `cat $BOOKKEEPER_PIDFILE` > /dev/null 2>&1; then
+         echo Bookkeeper Instance already running as process `cat $BOOKKEEPER_PIDFILE`. 
+         exit 0
+      fi     
+    fi
{noformat} there is one character diff in closing if.

- Bookkeeper Instance --> BookKeeper instance

- echo STOPPED the Bookkeeper instance. --->echo Stopped the BookKeeper instance

- killing with kill -9 --> forcibly(kill -9) stopping the BookKeeper instance?

- Failed to Write --> Failed to write

-      nohup java $OPTS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@ >> bookkeeper.out 2>&1 < /dev/null &
+

 Looks this is directly starting process as background process. This may not prompt the confimation options..etc for format commands tomorrow.
Shall we have deamon scripts separately like how Hadoop has today? 

@Sijie, Ivan, Falvio,  could you please add your comments?","19/Jun/12 15:43;hustlmsp;thanks nijel's patch.

comments based on Uma's previous comment.

1. I prefer using ""Bookie Server"" than ""Bookkeeper Instance"" to make things clearer.

2. 'kill -9' is a bad idea to shutdown a bookie server. We had a shutdown hook to flush data to ensure data durability. 'kill -9' would skip shutdown hook, which would make data corrupted. If you had huge number of ledgers owned in a bookie, it might take a long time to shutdown a bookie. I suggested to print a WARN message to let admin guys know 'the bookie server doesn't shutdown in a timeout period', so admin guys could look into log files to know what happened.

3. is it able to make bookkeeper.out to store in a configurable path (in environment variable), like logs directory? 

4. It would be better to let user decide whether to start the process in background or foreground. (Uma's proposal having deamon scripts as Hadoop might be a good choice). running bookie server in foreground would be easy and useful for development.","20/Jun/12 05:58;umamaheswararao;#1 Agreed.

#2. Right. But after the experience's, I think we have this kind of pattern in Hadoop and Zookeeper also.

Hadoop script:

{noformat}
 if [ -f $pid ]; then
      TARGET_PID=`cat $pid`
      if kill -0 $TARGET_PID > /dev/null 2>&1; then
        echo stopping $command
        kill $TARGET_PID
        sleep $HADOOP_STOP_TIMEOUT
        if kill -0 $TARGET_PID > /dev/null 2>&1; then
          echo ""$command did not stop gracefully after $HADOOP_STOP_TIMEOUT seconds: killing with kill -9""
          kill -9 $TARGET_PID
        fi
      else
{noformat}

ZK script:

{noformat}
echo -n ""Stopping zookeeper ... ""
    if [ ! -f ""$ZOOPIDFILE"" ]
    then
      echo ""no zookeeper to stop (could not find file $ZOOPIDFILE)""
    else
      $KILL -9 $(cat ""$ZOOPIDFILE"")
      rm ""$ZOOPIDFILE""
      echo STOPPED
    fi
    exit 0
{noformat}

Even though we have many ledgers, that information will be flushed periodically by SyncThread in Bookie right. I am not sure, there is a chance of accumulating huge data to flush here even after some timeout wait. That situation is always risk, because of sudden poweroff or rack shutdown. can increase this time to some reasonable period?
 ","20/Jun/12 08:24;hustlmsp;@Uma

> #2.

How about making it as an option to let user decide when shutting down a bookie. like 'stop -force' if the bookie doesn't shutdown in a timeout period, it call 'kill -9'. if no '-force' option, just print a warning message.",20/Jun/12 09:25;umamaheswararao;I am ok to have the option like force. +1 from my side.,20/Jun/12 16:22;nijel;Updated patch,"20/Jun/12 16:24;nijel;Thanks Uma and Sijie for the comments.

Comments are reworked.

Pls review","20/Jun/12 17:50;umamaheswararao;Thanks a lot for the update on patch!

Few small comments:


- 
+#/**
+# * Copyright 2007 The Apache Software Foundation
+# *

Apache header has 2007. we can remove that line.


- 
+usage=""Usage: bookkeeper-daemon.sh (start|stop) <command> <args...>""

Usage can have about -force option explicitely?

- 
do
+          echo ""Shutdown is in progress... Please wait...""
+          sleep 1
+          count=`expr $count + 1`

will this echo statement prints 30 times, if you have 30 sec wait time? can we print once and give the wait time?

- 
BookKeeper is not stopped completely. -> decided as Bookie Server right?


- 
+              fileName=$location/$command.out
+              $JAVA_HOME/bin/jstack $TARGET_PID > $fileName
+              echo Thread dumps are taken for analysis at $fileName

I like this. It is a good idea to take thread dumps on force kill.


- 
{noformat}
-log4j.appender.ROLLINGFILE=org.apache.log4j.DailyRollingFileAppender
+log4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender
{noformat}

changing the default log format can go into different JIRA, as that is not related to this JIRA?","21/Jun/12 16:35;nijel;Thanks Uma for reviewing

Updated the comments.

Pls review the updated patch","22/Jun/12 07:10;umamaheswararao;I think latest patch good to go. +1 from my side.
@Sijie, could you please push this in if you don't have any objections?

We have just verified start, stop options it works fine. Thanks Surendra for verifications.","27/Jun/12 05:32;hustlmsp;the patch is pretty good, Surendra.

one question about the dailyrolling appender. this appender doesn't have maxFileSize property as below. it would be better to remove this property to match the appender.

{quote}
log4j:WARN No such property [maxFileSize] in org.apache.log4j.DailyRollingFileAppender.
{quote}

btw, it is better to put BOOKIE_STOP_TIMEOUT & BOOKIE_PID_DIR in bkenv.sh as default and comment out them.","27/Jun/12 05:51;umamaheswararao;
{quote}
log4j:WARN No such property [maxFileSize] in org.apache.log4j.DailyRollingFileAppender.
log4j:WARN No such property [maxBackupIndex] in org.apache.log4j.DailyRollingFileAppender.
{quote}
I am seeing this in test log4j.properties. I suggested to file a separate JIRA for log related changes in my above comment. This JIRA mainly providing the scripts for stop. 

Is it fine with you Sijie? If yes, Nijel, could you please file a JIRA for log4j fixes?","27/Jun/12 06:01;hustlmsp;@Uma, either a new jira or changing it in this one is OK, since the changes are quite minor.","30/Jun/12 13:03;nijel;Thanks for the comments

""one question about the dailyrolling appender. this appender doesn't have maxFileSize property as below""
Commented the particular property

""btw, it is better to put BOOKIE_STOP_TIMEOUT & BOOKIE_PID_DIR in bkenv.sh as default and comment out them""

Added in bkenv.sh

Updated the new patch
",03/Jul/12 05:06;hustlmsp;the new patch looks good to me. +1,"05/Jul/12 05:27;hustlmsp;committed as r1357466. thanks nijel and Uma.

@Flavio, could you help assigning it to nijel. seems that I couldn't do it :(","11/Jul/12 18:09;umamaheswararao;Please handle the Ivan's comments in BK-329 as a amendment patch here.

Thanks a lot.
Uma",31/Jul/12 16:17;hustlmsp;improve the script as Ivan's suggestions in BOOKKEEPER-329. ,"01/Aug/12 14:16;umamaheswararao;Thanks a lot Sijie, for your time.

I have just taken look on this delta.

+1 for the delta changes.","17/Aug/12 09:16;ikelly;New patch is good. However, BOOKKEEPER-296 was already committed, so committing another patch under it would confuse the changelog. It needs to be in a new JIRA.","21/Aug/12 09:55;hudson;Integrated in bookkeeper-trunk #660 (See [https://builds.apache.org/job/bookkeeper-trunk/660/])
    BOOKKEEPER-354: [BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml (Kiran BC via ivank) (Revision 1375448)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
",07/Sep/12 05:49;hustlmsp;committed as r1381886 in branch 4.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Not able to start the bookkeeper before the ZK session timeout.,BOOKKEEPER-294,12560438,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,gopinathan.av,gopinathan.av,13/Jun/12 04:56,11/Sep/13 04:27,14/Mar/19 02:39,05/Jul/12 13:10,4.1.0,,4.1.1,4.2.0,,bookkeeper-server,,,0,,"Not able to start the bookkeeper before the ZK session timeout.

Here i killed the bookie and started again.

{noformat}
2012-06-12 20:00:25,220 - INFO  [main:LedgerCache@65] - openFileLimit is 900, pageSize is 8192, pageLimit is 456781
2012-06-12 20:00:25,238 - ERROR [main:Bookie@453] - ZK exception registering ephemeral Znode for Bookie!
org.apache.zookeeper.KeeperException$NodeExistsException: KeeperErrorCode = NodeExists for /ledgers/available/10.18.40.216:3181
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:119)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
	at org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:778)
	at org.apache.bookkeeper.bookie.Bookie.registerBookie(Bookie.java:450)
	at org.apache.bookkeeper.bookie.Bookie.<init>(Bookie.java:348)
	at org.apache.bookkeeper.proto.BookieServer.<init>(BookieServer.java:64)
	at org.apache.bookkeeper.proto.BookieServer.main(BookieServer.java:249)
{noformat}",,,,,,,,,,,,,,,,,,,13/Jun/12 14:59;rakeshr;BOOKKEEPER-294.1.patch;https://issues.apache.org/jira/secure/attachment/12531978/BOOKKEEPER-294.1.patch,13/Jun/12 15:42;fpj;BOOKKEEPER-294.2.patch;https://issues.apache.org/jira/secure/attachment/12531986/BOOKKEEPER-294.2.patch,14/Jun/12 06:03;rakeshr;BOOKKEEPER-294.3.patch;https://issues.apache.org/jira/secure/attachment/12532042/BOOKKEEPER-294.3.patch,14/Jun/12 13:45;fpj;BOOKKEEPER-294.4.patch;https://issues.apache.org/jira/secure/attachment/12532077/BOOKKEEPER-294.4.patch,21/Jun/12 15:03;rakeshr;BOOKKEEPER-294.5.patch;https://issues.apache.org/jira/secure/attachment/12532881/BOOKKEEPER-294.5.patch,02/Jul/12 12:07;rakeshr;BOOKKEEPER-294.6.patch;https://issues.apache.org/jira/secure/attachment/12534270/BOOKKEEPER-294.6.patch,02/Jul/12 13:05;rakeshr;BOOKKEEPER-294.7.patch;https://issues.apache.org/jira/secure/attachment/12534272/BOOKKEEPER-294.7.patch,04/Jul/12 14:10;rakeshr;BOOKKEEPER-294.8.patch;https://issues.apache.org/jira/secure/attachment/12535103/BOOKKEEPER-294.8.patch,13/Jun/12 13:29;fpj;BOOKKEEPER-294.patch;https://issues.apache.org/jira/secure/attachment/12531967/BOOKKEEPER-294.patch,13/Jun/12 09:49;rakeshr;BOOKKEEPER-294.patch;https://issues.apache.org/jira/secure/attachment/12531944/BOOKKEEPER-294.patch,,,,,,,10.0,,,,,,,,,,,,,,,,,,,2012-06-13 07:08:49.735,,,no_permission,,,,,,,,,,,,,293528,,,Thu Jul 05 13:28:04 UTC 2012,,,,,,0|i0tben:,169157,,,,,,,,"13/Jun/12 07:08;fpj;I think this is included in another jira already. We have discussed zookeeper session expiration initially in BOOKKEEPER-281 and created a new issue, BOOKKEEPER-284. The scope of BOOKKEEPER-284 is broader, though, since we'd like to review our use of ZK there. I suggest we close this jira and focus on BOOKKEEPER-284.","13/Jun/12 07:23;umamaheswararao;Hi Flavio, This is not about retries on disconnects or session timeouts.
Seems like, before session timeout, if we restart bookie immedaiately, it is failing with NodeExistsException. Because prevous bookie has the znode /ledgers/available/10.18.40.216:3181. On restart if it tries to create, It throws this error. Let's clean that path if exists. 
 ","13/Jun/12 08:04;rakeshr;Yeah. On bookie start up, it will delete the bookie registration path on NodeExistsException and the new zk client will again creates the path and continue startup.","13/Jun/12 08:21;fpj;Right, I should have looked more carefully at the log excerpt, it is about bookies not clients. If the znode still exists, then the session from the previous instance of the bookie hasn't expired. I don't see a problem right now with just deleting the znode if it still exists.","13/Jun/12 08:42;fpj;Let me add another comment. One potential problem with deleting the znode is in the case that we have two bookies with the same identity. I'm assuming that independent of the identification scheme we use, the administrator will be careful not to let it happen. Having two bookies with the same identity could cause inconsistencies in the state of a ledger. Is it ok to assume that there won't be two bookies with the same identity up?","13/Jun/12 08:53;hustlmsp;I think we could do this assumption. because only one process could listen on same port. For different machines use same ip to fake same identity, we have Cookie to avoid fake one to start.","13/Jun/12 10:03;rakeshr;Thanks all. I have uploaded patch by assuming, there will not be any fake bookie exists with same identity. In the patch, I'm removing the old bookie's registration path if exists and continue bookie startup. 

Please review the patch.","13/Jun/12 10:03;rakeshr;Thanks all. I have uploaded patch by assuming, there will not be any fake bookie exists with same identity. In the patch, I'm removing the old bookie's registration path if exists and continue bookie startup. 

Please review the patch.","13/Jun/12 10:21;fpj;Thanks, Rakesh. Why don't you simply submit zk.delete right before zk.create asynchronously? This way we can replace removeOldBookieRegistration with a pretty simple callback. Also, could you give a more descriptive name to the test, like ""BookieInitializationTest"" or something similar, instead of BookieTest?","13/Jun/12 11:27;rakeshr;Thanks Flavio for the review.

Hope you are pointing me to use like:-
During bk registration, first will call zk.delete(path,-1,new VoidCallback()) directly without having any zk.exists() check. Inside the delete callback will do the creation of bkRegistrationPath. 

Am I correct?
","13/Jun/12 13:29;fpj;What about something like this, Rakesh? (I haven't changed the name of the test case, btw)",13/Jun/12 13:30;fpj;Canceling until we agree on the way to do this.,"13/Jun/12 13:59;rakeshr;Oh! You meant zookeeper server will first process the zkc.delete request and after that will process the zkc.create request?
","13/Jun/12 14:55;fpj;Yes, that's what I meant. This way we don't have to wait for the delete to complete and we eliminate the exists call. The delete will only have effect if the znode exists.",13/Jun/12 15:04;rakeshr;I didn't think about the ZK ordered execution behaviour. Thanks a lot. I've changed the test case name and modified the usage of KeeperException.create(int) as it is a deprecated api.,"13/Jun/12 15:42;fpj;Thanks for changing the deprecated API, I keep forgetting about that.

While checking that the test fails without the patch I realized that you had changed the the access privileges to package protected. Although not a big deal, I thought that we could try to keep at least protected. I didn't want make you do another change, so I made a few modifications myself to see how it looks for you, Rakesh. Let me know what you think. I'm ok to drop it if it makes the test cumbersome. ","13/Jun/12 16:03;rakeshr;:) Thanks, it looks more cleaner now.","13/Jun/12 20:54;fpj;+1, it is good for me. Is that a +1 from you as well, Rakesh?

I was also wondering if we want to commit this to the 4.1 branch too. We don't have a 4.1.1 queue on jira right now.",14/Jun/12 04:45;rakeshr;+1 from me. I'd also prefer to commit in 4.1 as well.,"14/Jun/12 05:11;umamaheswararao;+1 from me as well.

There is one small suggestion in test:

{code}
 try {
+            b.testRegisterBookie(conf.getBookiePort());
+        } catch (IOException e) {
+            Assert.fail(""Shouldn't throw exception on re-registring ""
+                    + ""same bookie!"");
+        }
{code}

We need not catch this exception and suppress that exception. Anyway not catching that exception also test will fail with exception trace. Otherwise we may need to go and serach logs/ edit tests to get the exception trace what it is. I don't think it is worth give another patch for this tiny nit. Lets go ahead and we can keep this in mind for next time :-).

Thanks Rakesh and Flavio for the patches. Looks great.",14/Jun/12 06:11;rakeshr;Thanks Uma for pointing out. Since it helps maintainability I've reworked and updated the patch. Please have a look.,"14/Jun/12 07:16;fpj;I'd rather have in the previous way because it makes clear in the test the part we expect to fail if the bug is present. In general, my preference is to have a explicit assertion statement causing the test to fail.

I'm canceling the patch until we converge on this one.  ","14/Jun/12 07:19;hustlmsp;the patch is good except one place 'new_bkRegNode'. I think we should keep naming consistent using camel words. 
{code}
+        Stat new_bkRegNode = zkc.exists(bkRegPath, false);
{code}

Although this jira is not a blocker, but it makes user inconvenient using bookie server. I think it worths being included in 4.1 branch. +1 for creating 4.1.1 queue.","14/Jun/12 08:48;umamaheswararao;{quote}
my preference is to have a explicit assertion statement causing the test to fail.
{quote}
Here we are not asserting any of the data or anything. That statement is just for failing the test on any IOException. I agree to keep the assertion if we are making any content assertion at that place. Keeping explicit catch just for making the test fail will supress that exception trace.

If we are not expecting any exception but if the flow throws that, Junit test itself will automatically fail and also we will get that exception trace to console.
","14/Jun/12 13:18;ikelly;-1 on this approach. 

We add a shutdown hook in BookieServer, precisely for this type of situation. We can just delete the znode from Bookie#shutdown. ","14/Jun/12 13:24;umamaheswararao;Abrupt kill (kill -9 and start) can not invoke shutdown hook right? So, still problem exists even if we use shutdown hook. Am I missing something from your case?","14/Jun/12 13:47;fpj;bq. I agree to keep the assertion if we are making any content assertion at that place. Keeping explicit catch just for making the test fail will supress that exception trace.

Agreed, that's an excellent point, Uma. I don't like the idea of mixing failures and errors, though, so let me propose a modification to the patch, check the last patch attached, please.","14/Jun/12 13:47;ikelly;yes, kill -9 will skip shutdown hook, but I think this is ok. If you're using kill -9 there's a problem. You shouldn't be starting a bookie right away after that. I think having to wait in situations like this is preferable than possibly being able to delete someone else's availability znode.

The solution in the patch is actually broken. Bookie#start is called before NIOServerFactory#start, which means that if you try to start a bookie on a machine where the bookie is already running, the running bookie's availability znode is deleted, the new bookie creates one, the new bookie tries to start NIOServerFactory and fails as the socket is already bound, so crashes, taking it's availability znode with it. The initial bookie is now running, without a availability znode, so noone can contact it. 

If just the shutdown hook isn't enough, I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again. Again though, kill -9 should be a very rare case.","14/Jun/12 14:10;fpj;bq. If just the shutdown hook isn't enough, I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again. Again though, kill -9 should be a very rare case.

By deleting the znode, we are certainly violating the lease contract, that's why I asked before if it was ok to assume that there is no other possible node running with the same id. I didn't consider the case of two processes on the same node, but I suppose that is a viable scenario. Waiting for the session to expire is a sound solution to me. I suppose that if the znode is still there after zkTimeout has elapsed we crash?   ","14/Jun/12 14:17;ikelly;Yup, if the znode is still there, then there's still a running node, so starting a new node is ill advised.","14/Jun/12 14:25;umamaheswararao;@Flavio
{quote}
Agreed, that's an excellent point, Uma. I don't like the idea of mixing failures and errors, though, so let me propose a modification to the patch, check the last patch attached, please.
{quote}
Looks fine.


@Ivan
 Good point.
{quote}
If just the shutdown hook isn't enough, I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again. Again though, kill -9 should be a very rare case.
{quote}
Initially me and Rakesh was thinking in this lines. As Sijie pointed in other [comment|https://issues.apache.org/jira/browse/BOOKKEEPER-294?focusedCommentId=13294280&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13294280]
 saying that, Cookies will guard from fake bookies startup.
To be honest, we did not verify this point and thought multiple Bookies will not start on same address and moved to the simple fix of deleting.
","14/Jun/12 14:36;ikelly;{quote}
Cookies will guard from fake bookies startup.
{quote}
Cookies will protect against two bookie's with different configurations starting. This is useful for case were you replace a machine completely, and reuse the ip. The cluster will think that any ledger which was on the original machine is still available.

However, in the case you did,
{code}
$ bookkeeper-server/bin/bookkeeper bookie &
$ bookkeeper-server/bin/bookkeeper bookie
{code}
you would have nothing to protect you. The availability znode existing protects you at the moment.","14/Jun/12 15:00;rakeshr;Thanks a lot Ivan for the good point.

{quote}
I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again.
{quote}

As we thought before, need to have a sliced sleeping till zkSessionTimeOut. Is it fine for others?

Also would like to know whether it should be a blocking wait/sleep and the number of retries?","14/Jun/12 15:28;fpj;bq. As we thought before, need to have a sliced sleeping till zkSessionTimeOut. Is it fine for others?

+1.

bq. Also would like to know whether it should be a blocking wait/sleep and the number of retries?

I would say no retry. If after the session expiration period the znode is still there, then it is an indication that the admin should have a look at what is going on.","14/Jun/12 22:24;hustlmsp;{quote}
you would have nothing to protect you. The availability znode existing protects you at the moment.
{quote}

@Ivan, ur right. After checking the code how bookie server starts, the bookie server registers itself before running NIOServer. There is a bit problem, registration means the bookie server is available and ready for accepting requests, but actually NIOServer is not started. so during the gap, the requests would fail.

A better sequence to start the bookie is first start bookie, start NIOServer and register bookie.

If the start sequence is described as above, we could prevent two bookie servers running at same port, which could achieve the assumption I commented before. Even we could ensure such assumption, I prefer the wait/sleep proposal which is a safer way.

+1 for wait/sleep solution. Besides that, I would suggest adjusting the start sequence to remove the gap between znode available and NIOServer ready.

","14/Jun/12 22:59;hustlmsp;{code}
$ bookkeeper-server/bin/bookkeeper bookie &
$ bookkeeper-server/bin/bookkeeper bookie
{code}

think a bit more about the case Ivan mentioned. I found that we lack the ability to prevent two processes accessing (writing entry log files when replaying entries) same directories when instantiating bookies. It might make data corrupted during instantiation.

I think we need some file locking on the data directories to prevent two process accessing the data directories at the same time. but it would be in another jira.

","15/Jun/12 02:49;umamaheswararao;{code}
I think we need some file locking on the data directories to prevent two process accessing the data directories at the same time. but it would be in another jira.
{code}
This sounds very good point Sijie. NN also has this file lock concept for protecting its storage directories from others while it is running. If others also agrees to introduce this file locking fir directories, feel free to assign this task to me.


@Sijie

{code}
A better sequence to start the bookie is first start bookie, start NIOServer and register bookie.

If the start sequence is described as above, we could prevent two bookie servers running at same port, which could achieve the assumption I commented before. Even we could ensure such assumption, I prefer the wait/sleep proposal which is a safer way.
{code}

But both Bookie and NIOServer are threads. Again we may have to wait for their successful initialization to register right. I don't like this wait here again.
Currently DeathWatcher is checking for their successful startups and shutting down if not started. Am i missing some thing from ur case?

How about waiting for DeathWatcherInterval+, Since NIOServer can start on same bookie, It might have failed. So, DW should have identified after that Interval priod and will kill the fake bookie. If after DeathWatcherInterval+ also not killed means, that will be valid bookie. So, register bookei can wait for DeathWatcherInterval+ before deleting existig node? I am not sure this is a good suggestion, just a thought.","15/Jun/12 05:38;rakeshr;Thanks everyone. If I understand the discussion correctly. I'm trying to summarize, now we have the following cases:
# ??New bookie tries to start and fails as the socket is already bound, so crashes, taking it's availability znode with it.??
How about moving the new 'NIOServerFactory(conf, this); to the BookieServer constructor. NIOServerFactory internally doing the ss.socket().bind(new InetSocketAddress(conf.getBookiePort())); and will protect the already running bookie by throwing BindException. If I do this modification, I will be able to safely delete the znode if exists. How does it sound?
{code}
    public BookieServer(ServerConfiguration conf) 
            throws IOException, KeeperException, InterruptedException, BookieException {
        this.conf = conf;

        nioServerFactory = new NIOServerFactory(conf, this);

        this.bookie = newBookie(conf);
        isStatsEnabled = conf.isStatisticsEnabled();
    }
{code}
----
# ??Before finishing the NIO startup, if client gets the available bookie would cause the client requests to fail.??
I'm thinking, this is a small gap in milliseconds. Still if everyone feels is a problem. Registration of the bookie can be delayed till successful NIOServer startup. Because the bkclient will not see the server unless it is registered.
----
# ??file lock concept for protecting its storage directories from others while it is running.??
I agree to open another JIRA and work on there.

-Rakesh","15/Jun/12 07:34;fpj;I'm not convinced that we need a separate lock mechanism for directories. Why can't we use the zookeeper lock to imply that the directories are locked? In my view, the zookeeper lock implies that a bookie with a given identity is available and there is some process responsible for that identity. That includes the directories it is using. 

bq. A better sequence to start the bookie is first start bookie, start NIOServer and register bookie.

If my rationale is correct, I think we can achieve this, without a race, by making this simple change in BookieServer:

{code}
public void start() throws IOException {
        nioServerFactory = new NIOServerFactory(conf, this);

        this.bookie.start();

        nioServerFactory.start();
        running = true;
        deathWatcher = new DeathWatcher(conf);
        deathWatcher.start();

        // register jmx
        registerJMX();
    }
{code}

I simply swapped the first two statements. My rationale is: we create the socket and start/register the bookie. We may receive a request before starting the NIOServerFactory, but the socket is there already. ","15/Jun/12 08:17;ikelly;Swapping these around is a good idea. There's no need for a separate locking mechanism on the filesystem, we already have a lock in zookeeper and a lock on the port. If an admin is trying to start two bookies, with different port configurations, but the same disk configurations, the cookie will stop them. ","15/Jun/12 09:11;umamaheswararao;{quote}
I simply swapped the first two statements. My rationale is: we create the socket and start/register the bookie. We may receive a request before starting the NIOServerFactory, but the socket is there already. 
{quote}
Yep, simply swapping should work as it is binding in NIOServerFactory ctor itself. +1 to go with this idea.","15/Jun/12 11:07;rakeshr;bq. Swapping these around is a good idea.

Swapping is a simple and good solution. 
But the reason I tried to keep NIOServerFactory in BookieServer constructor is:

In the case,
{code}
$ bookkeeper-server/bin/bookkeeper bookie &
$ bookkeeper-server/bin/bookkeeper bookie
{code}

If I just swap the NIOServerFactory and this.bookie.start(); statements. Here the BookieServer will creates newBookie(conf) and this inturn will do replay journals readJournal();. After this, when starting the bookie will get BindException.

I feel, immediately can fail even before bookie creation by keeping NIOServerFactory in BookieServer constructor. Is this fine?


","15/Jun/12 12:58;fpj;If I understand your concern correctly, Rakesh, you don't want to perform an I/O-intensive task if the bookie is not going to start, so it is an optimization. Do you have any other concern with respect to correctness? 

If newBookie(conf) is I/O-intensive, then perhaps it is better off in start(), not in the constructor.","15/Jun/12 13:13;rakeshr;@Flavio
Yeah exactly, just my thought is to fail fast.",16/Jun/12 02:20;hustlmsp;+1 for swapping.,"16/Jun/12 05:06;hustlmsp;> If newBookie(conf) is I/O-intensive, then perhaps it is better off in start(), not in the constructor.

we'd move readJournal() to bookie#start(). otherwise swapping could not avoid two processes accessing directories at same time.","21/Jun/12 15:11;rakeshr;Attached latest patch. 
Here I just done the following:
- swapped NIOFactory and bookie.start()
- moved the readJournal() to bookie#start()
- modified NONODE log priority to debug, considering normal startup.","26/Jun/12 07:06;rakeshr;@Sijie
Could you please review the latest patch.","26/Jun/12 08:41;fpj;After a comment from Ivan, I thought we had agreed to not delete the znode lock. Have I misunderstood it?","26/Jun/12 09:36;rakeshr;@Flavio
bq.After a comment from Ivan, I thought we had agreed to not delete the znode lock. Have I misunderstood it?

As I understand, the reason why Ivan disagrees due to the following issue:

bq.The solution in the patch is actually broken. Bookie#start is called before NIOServerFactory#start, which means that if you try to start a bookie on a machine where the bookie is already running, the running bookie's availability znode is deleted, the new bookie creates one, the new bookie tries to start NIOServerFactory and fails as the socket is already bound, so crashes, taking it's availability znode with it. The initial bookie is now running, without a availability znode, so noone can contact it.

This problem is resolved after the swapping of NIO and bookie#start. Now the chance of corrupting already running bookie is no more. So is the reason I continued with znode deletion during bookie#registration. 


Hi Ivan, please correct me if I interpreted your comments wrongly.

","26/Jun/12 10:12;fpj;Hi Rakesh, Check please the followup comments starting with this one:

https://issues.apache.org/jira/browse/BOOKKEEPER-294?focusedCommentId=13295044&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13295044

I ack that I see no explicit agreement, though, but not deleting is what I gathered from the followup comments. The znode should go away by itself in the case the previous incarnation of the bookie is really gone.","26/Jun/12 11:34;rakeshr;From the discussions we have the following solutions:-
# delete the znode in shutdownhook
# delete the znode in startup
# if znode exists, wait till the session expiry (here changing the zkTimeout and starts back will cause inconsistencies)

I'd like to know which among is good. Hi folks, please help us to find good approach:-)","26/Jun/12 12:00;fpj;My preference is 3 with no retries. If after the timeout period the znode is still there, then the operators needs to go figure out what's wrong.","27/Jun/12 02:39;hustlmsp;{quote}
+1 for wait/sleep solution. 
{quote}

from my previous comment, I'd prefer solution 3.","02/Jul/12 12:11;rakeshr;Thanks all, I've uploaded latest patch includes timeout if node exists. Please review.","02/Jul/12 12:28;ikelly;I discussed this with Flavio last week, and we concluded that the best solution would be 3. 

I also had a look at the code, and the situation where the znode persists past the process should only ever occur on a kill -9 shutdown, because the Bookie#shutdown closes the zookeeper sessions for the bookie, which should mean all ephemerals have been removed. ","02/Jul/12 12:37;ikelly;Patch looks good. However, could you move the Watcher out of the if () clause. i.e.
{code}
Watcher w = new Watcher() {
    @Override
    public void process(WatchedEvent event) {
        // Check for prev znode deletion. Connection expiration is
        // not handling, since bookie has logic to shutdown.
        if (EventType.NodeDeleted == event.getType()) {
             prevNodeLatch.countDown();
        }
    }
}
if (null != zk.exists(zkBookieRegPath,w)) {
    LOG.info(""Previous bookie registration znode: ""
             + zkBookieRegPath
             + "" exists, so waiting zk sessiontimeout: ""
             + conf.getZkTimeout() + ""ms for znode deletion"");
    // waiting for the previous bookie reg znode deletion
    if (!prevNodeLatch.await(conf.getZkTimeout(),
                             TimeUnit.MILLISECONDS)) {
        throw new KeeperException.NodeExistsException(
            zkBookieRegPath);
    }
}
{code}
As it is, it makes the flow of the method harder to follow.",02/Jul/12 13:08;rakeshr;Thanks Ivan. Latest patch addressing the above comment.,"02/Jul/12 16:35;ikelly;Latest patch looks good to me. +1. Will commit tomorrow, unless any says otherwise.","03/Jul/12 09:59;ikelly;The tests don't check out for this. 
In BookieInitializationTest you shouldn't check for the exact text, as I guess it changes across java implementations.
{code}
Assert.assertEquals(""BKServer allowed duplicate startups!"",
                    ""Address already in use: bind"", be.getMessage());
{code}
On mac, the error code is ""Address already in use"". Nothing about bind. It's better to change this to assertTrue() on be.getMessage().contains(""Address already in use"").

There are failures in BookieJournalTest. The journal is no longer read in the constructor, so anywhere a Bookie is created in these tests, you need to call readJournal afterwards. Don't call start, as that starts GC and stuff we're not interested in in the test, and which may interfere.

","03/Jul/12 11:58;rakeshr;Oh! thats correct. I'll soon upload the patch.

bq.There are failures in BookieJournalTest. The journal is no longer read in the constructor, so anywhere a Bookie is created in these tests, you need to call readJournal afterwards.

How about changing the visibility of readJournal() to default?",04/Jul/12 14:09;rakeshr;Addressing Ivan's comment. I've increased the readJournal() visibility to default.,"05/Jul/12 13:10;ikelly;Committed revision 1357587 for 4.1.1
Committed revision 1357581 for trunk.","05/Jul/12 13:28;hudson;Integrated in bookkeeper-trunk #592 (See [https://builds.apache.org/job/bookkeeper-trunk/592/])
    BOOKKEEPER-294: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank) (Revision 1357581)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
"
Test backward compatibility automatically between versions.,BOOKKEEPER-292,12560194,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,11/Jun/12 16:45,13/Feb/13 15:46,14/Mar/19 02:39,19/Jun/12 10:58,,,4.2.0,,,,,,0,,"At the moment, backward compatibility between 4.1.0 and 4.0.0 can only be tested manually. This JIRA is the set up the code base, so we can validate behaviour between versions automatically, and spot if a change breaks functionallity between versions.",,,,,,,,,,,,,,,,,,,18/Jun/12 08:39;ikelly;BOOKKEEPER-292.diff;https://issues.apache.org/jira/secure/attachment/12532380/BOOKKEEPER-292.diff,11/Jun/12 16:54;ikelly;BOOKKEEPER-292.diff;https://issues.apache.org/jira/secure/attachment/12531689/BOOKKEEPER-292.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-18 06:27:42.059,,,no_permission,,,,,,,,,,,,,293518,,,Wed Jun 20 07:15:59 UTC 2012,,,,,,0|i0tazj:,169089,,,,,,,,"11/Jun/12 16:54;ikelly;Patch adds a new module for generating shaded[1] jars for the older versions of bookkeeper. These can then be used to test against the current version. 

This patch requires 4.1.0 to be able in public repositories to use. If it is not, do a mvn install from the 4.1 branch.",18/Jun/12 06:27;hustlmsp;the patch looks good. but seems that there is lots of tabs in newly added pom files.,18/Jun/12 08:39;ikelly;New patch removes tabs. ,"19/Jun/12 10:33;hustlmsp;new patch is OK for me. +1 

Thanks Ivan for providing compatibility testing.",19/Jun/12 10:58;ikelly;Committed as r1351651. Thanks Sijie.,"19/Jun/12 11:20;hudson;Integrated in bookkeeper-trunk #568 (See [https://builds.apache.org/job/bookkeeper-trunk/568/])
    BOOKKEEPER-292: Test backward compatibility automatically between versions. (ivank) (Revision 1351651)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/compat-deps
* /zookeeper/bookkeeper/trunk/compat-deps/bookkeeper-server-compat-4.0.0
* /zookeeper/bookkeeper/trunk/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml
* /zookeeper/bookkeeper/trunk/compat-deps/bookkeeper-server-compat-4.1.0
* /zookeeper/bookkeeper/trunk/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml
* /zookeeper/bookkeeper/trunk/compat-deps/pom.xml
* /zookeeper/bookkeeper/trunk/pom.xml
","19/Jun/12 20:24;mridulm80;This fix breaks the build.
In particular, it introduces dependency issues :



$ mvn -DskipTests=true clean
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] The projects in the reactor contain a cyclic reference: Edge between 'Vertex{label='org.apache.bookkeeper:bookkeeper-server'}' and 'Vertex{label='org.apache.bookkeeper:bookkeeper-server-compat400'}' introduces to cycle in the graph org.apache.bookkeeper:bookkeeper-server-compat400 --> org.apache.bookkeeper:bookkeeper-server --> org.apache.bookkeeper:bookkeeper-server-compat400
[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Wed Jun 20 01:54:37 IST 2012
[INFO] Final Memory: 3M/26M
[INFO] ------------------------------------------------------------------------
","19/Jun/12 21:01;ikelly;This only happened on one build. Those after are fine from this perspective. The reason they have failed though, is that i made findbugs errors a failing condition. Some have crept in to trunk, so they need to be fixed.","19/Jun/12 21:05;mridulm80;When I tried with trunk from 30 mins back, it was still failing (as part of attempting to merge changes for jms provider branch with trunk).
","19/Jun/12 21:10;ikelly;Ah, You saw this on your local machine? In that case, I guess it must be a maven version issue. What version are you using? I thought you were referring to the builds on https://builds.apache.org/job/bookkeeper-trunk/. One of them failed like this earlier today, but the rest were ok.",19/Jun/12 21:26;fpj;I fresh copy of trunk does not give me any problem on my machine.,"20/Jun/12 07:11;mridulm80;My mistake, until now I was on Maven 2.2.1 and it had been working fine.
With this change, that is no longer the case ...

With 3.0.4, it works, but makes it tricky for my build environment - not all my projects are on 3.x :-)

Apologies for not reading README properly !","20/Jun/12 07:15;ikelly;Yup, readme does say maven 3, but i think we should work with maven 2 as well (we did up until this change). I'll have a look today to see if I can fix it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BKMBeanRegistry uses log4j directly,BOOKKEEPER-291,12560192,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,fpj,ikelly,ikelly,11/Jun/12 16:34,13/Feb/13 15:46,14/Mar/19 02:39,03/Dec/12 09:55,,,4.2.0,,,,,,0,,It should use slf4j.,,,,,,,,,,,,,,,,,,,02/Dec/12 15:05;fpj;BOOKKEEPER-291.patch;https://issues.apache.org/jira/secure/attachment/12555671/BOOKKEEPER-291.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-02 15:05:29.656,,,no_permission,,,,,,,,,,,,,293310,,,Tue Dec 04 05:44:44 UTC 2012,,,,,,0|i0swn3:,166765,,,,,,,,02/Dec/12 15:05;fpj;Patch to fix this issue.,"02/Dec/12 15:34;hadoopqa;Testing JIRA BOOKKEEPER-291

WARNING: Running test-patch on a dirty local svn workspace

Patch <a href=""/jira/secure/attachment/12555671/BOOKKEEPER-291.patch"">/jira/secure/attachment/12555671/BOOKKEEPER-291.patch</a> downloaded at Sun Dec  2 15:11:12 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 384
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/60/",03/Dec/12 09:55;ikelly;Committed as r1416400. Thanks Flavio.,"04/Dec/12 05:44;hudson;Integrated in bookkeeper-trunk #836 (See [https://builds.apache.org/job/bookkeeper-trunk/836/])
    BOOKKEEPER-291: BKMBeanRegistry uses log4j directly (fpj via ivank) (Revision 1416400)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/jmx/BKMBeanRegistry.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NOTICE files don't have the correct year,BOOKKEEPER-288,12559691,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,07/Jun/12 13:19,14/Jan/13 16:15,14/Mar/19 02:39,07/Jun/12 14:19,,,4.1.0,,,,,,0,,NOTICE files only have 2011. They should have 2012 also.,,,,,,,,,,,,,,,,,,,07/Jun/12 13:21;ikelly;BOOKKEEPER-288.diff;https://issues.apache.org/jira/secure/attachment/12531261/BOOKKEEPER-288.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-07 14:09:14.727,,,no_permission,,,,,,,,,,,,,250344,,,Thu Jun 07 14:31:23 UTC 2012,,,,,,0|i0axbz:,61673,,,,,,,,07/Jun/12 14:09;hustlmsp;thanks for Ivan pointing the issue. +1 for the patch.,"07/Jun/12 14:19;hustlmsp;committed as r1347628 on trunk, r1347629 on branch 4.1.

thanks Ivan.","07/Jun/12 14:31;hudson;Integrated in bookkeeper-trunk #551 (See [https://builds.apache.org/job/bookkeeper-trunk/551/])
    BOOKKEEPER-288: NOTICE files don't have the correct year (ivank via sijie) (Revision 1347628)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/NOTICE
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/resources/NOTICE.bin.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/resources/NOTICE.bin.txt
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NoSuchElementException in LedgerCacheImpl,BOOKKEEPER-287,12559455,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,fpj,fpj,05/Jun/12 22:09,14/Jan/13 16:14,14/Mar/19 02:39,06/Jun/12 16:38,,,4.1.0,,,,,,0,,"2012-06-05 16:24:29,596 - WARN  [NIOServerFactory-3181:NIOServerFactory@128] - Exception in server socket loop: /0.0.0.0
java.util.NoSuchElementException
        at java.util.LinkedList.getFirst(LinkedList.java:109)
        at org.apache.bookkeeper.bookie.LedgerCacheImpl.grabCleanPage(LedgerCacheImpl.java:478)
        at org.apache.bookkeeper.bookie.LedgerCacheImpl.grabLedgerEntryPage(LedgerCacheImpl.java:169)
        at org.apache.bookkeeper.bookie.LedgerCacheImpl.putEntryOffset(LedgerCacheImpl.java:199)
        at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.addEntry(InterleavedLedgerStorage.java:109)
        at org.apache.bookkeeper.bookie.LedgerDescriptorImpl.addEntry(LedgerDescriptorImpl.java:81)
        at org.apache.bookkeeper.bookie.Bookie.addEntryInternal(Bookie.java:656)
        at org.apache.bookkeeper.bookie.Bookie.addEntry(Bookie.java:691)
        at org.apache.bookkeeper.proto.BookieServer.processPacket(BookieServer.java:368)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.readRequest(NIOServerFactory.java:310)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.doIO(NIOServerFactory.java:208)
        at org.apache.bookkeeper.proto.NIOServerFactory.run(NIOServerFactory.java:123)
",,,,,,,,,,,,,,,,,,,06/Jun/12 03:02;hustlmsp;BK-287-test-case.diff;https://issues.apache.org/jira/secure/attachment/12531057/BK-287-test-case.diff,06/Jun/12 09:41;hustlmsp;BOOKKEEPER-287.diff;https://issues.apache.org/jira/secure/attachment/12531087/BOOKKEEPER-287.diff,06/Jun/12 03:36;hustlmsp;BOOKKEEPER-287.diff;https://issues.apache.org/jira/secure/attachment/12531059/BOOKKEEPER-287.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-06-06 02:46:16.35,,,no_permission,,,,,,,,,,,,,250340,,,Wed Jun 06 17:26:08 UTC 2012,,,,,,0|i0ax8f:,61657,,,,,,,,"05/Jun/12 22:25;fpj;Sounds like a blocker to me, is it right?

My findings so far. It seems to happen in the case that in LedgerCacheImpl.grabCleanPage we have that:

# pageCount >= pageLimit
# cleanLedger is empty
# pages is empty

It doesn't sound like a race on cleanLedgers because it is only manipulated in grabCleanPages and deleteLedger, both accesses synchronized. Consequently, it sounds like an issue with pages. If pages were not empty, then the for loop in the ""if (cleanLedgers.isEmpty())"" would have added elements to cleanLedgers. My conclusion is that pages is empty. We remove elements from pages in deleteLedger, so I'm wondering if all ledgers have been deleted between the first ""synchronized(this)"" block and outerLoop. If this is the case, the only solution I see is to make the whole method synchronized.

I don't know how to reproduce this.

","06/Jun/12 02:46;hustlmsp;@Flavio:

yes, ur right. this is a blocker.

synchronized whole method doesn't resolve the issue. the worst thing of this issue is that deleteLedger remove LedgerPages from LedgerCache without decrementing pageCount, which would exhaust ledger cache. it is similar as BOOKKEEPER-198 .",06/Jun/12 03:02;hustlmsp;Attach a test case to reproduce the issue.,06/Jun/12 03:36;hustlmsp;Attach a patch to fix the issue by decrementing pageCount when deleteLedger. ,"06/Jun/12 07:30;fpj;Great catch, Sijie! I have two comments on the patch:

# In grabCleanPage, there is only a small block that is not synchronized under ""this"". I think that if we synchronize the method, we would be able to get rid of that outerLoop jump and I'm thinking that it shouldn't make much of a difference with respect to concurrency because most of the code is synchronized under ""this"" anyway. How do you feel about this?
# I think that the log message inside ""if (pageCount < 0) {"" this block should be at least an error. 

There are a bunch of typos in comments (not in your patch, but there is one in our patch too) across LedgerCacheImpl. It would be good to fix those. They shouldn't be in the diff file, since they would mix up with the real fix, but it would be good if the committer who commits it could fix the typos.   ","06/Jun/12 08:59;hustlmsp;{quote}
I think that if we synchronize the method, we would be able to get rid of that outerLoop jump and I'm thinking that it shouldn't make much of a difference with respect to concurrency because most of the code is synchronized under ""this"" anyway. How do you feel about this?
{quote}

I don't think so. Actually flushLedger is an expensive operation, if we synchronized the whole method, all grabCleanPage would be blocked on a flush. it effects the performance in following situation.

request1 => grabCleanPage => flushLedger
gc thread => deleteLedgers (some pages are returned to ledger cache)
request2 => grabCleanPage

if we synchronized whole method, request2 could only grab page after request1 finished.

if we don't synchronize whole method, during request1 flushing some pages. gc thread could delete ledgers to return pages back to ledger cache. so request2 could get the pages quickly.

{quote}
I think that the log message inside ""if (pageCount < 0) {"" this block should be at least an error.
{quote}

would improve it to error level.

{quote}
There are a bunch of typos in comments (not in your patch, but there is one in our patch too) across LedgerCacheImpl. It would be good to fix those. 
{quote}

could you point the typos, so that I could find them quickly? :)
","06/Jun/12 09:08;fpj;bq. Actually flushLedger is an expensive operation

That's a good point, I agree.

bq. could you point the typos

Search for: exhuasting, Yeild., incorret
In your patch: Weired! (sorry for being boring, but I would simply remove the ""Weird!"" interjection)","06/Jun/12 09:25;ikelly;{quote}
1. In grabCleanPage, there is only a small block that is not synchronized under ""this"". I think that if we synchronize the method, we would be able to get rid of that outerLoop jump and I'm thinking that it shouldn't make much of a difference with respect to concurrency because most of the code is synchronized under ""this"" anyway. How do you feel about this?
{quote}
A small section in code, but a long running section. It calls flushLedgers() which does I/O to disk. synchronizing on this would prevent pages from other ledgers being accessed.","06/Jun/12 09:31;ikelly;Ah, i hadn't refreshed the page before i commented. Ignore.",06/Jun/12 09:33;fpj;reinforcement is good :-),06/Jun/12 09:41;hustlmsp;attach a new patch addressing Flavio's comments.,"06/Jun/12 10:11;fpj;+1, it works for me.",06/Jun/12 13:17;ikelly;lgtm +1,06/Jun/12 15:42;hustlmsp;thanks Flavio & Ivan for reviewing it. we had two +1 on it. I would commit it.,"06/Jun/12 16:38;hustlmsp;committed as r1346966 on trunk, as r1346976 on branch 4.1.","06/Jun/12 17:26;hudson;Integrated in bookkeeper-trunk #549 (See [https://builds.apache.org/job/bookkeeper-trunk/549/])
    BOOKKEEPER-287: NoSuchElementException in LedgerCacheImpl (sijie) (Revision 1346966)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compilation warning,BOOKKEEPER-286,12559279,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,fpj,fpj,04/Jun/12 21:38,14/Jan/13 16:14,14/Mar/19 02:39,05/Jun/12 11:21,4.1.0,,4.1.0,,,,,,0,,"I'm getting the following warning when building the project:

{noformat}
:hedwig-server fpj$ mvn clean
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for org.apache.bookkeeper:hedwig-server:jar:4.2.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.codehaus.mojo:findbugs-maven-plugin is missing. @ line 140, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
{noformat}

Note that this is only for hedwig-server.",,,,,,,,,,,,,,,,,,,05/Jun/12 09:53;ikelly;BOOKKEEPER-286.diff;https://issues.apache.org/jira/secure/attachment/12530928/BOOKKEEPER-286.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-05 09:53:49.016,,,no_permission,,,,,,,,,,,,,250348,,,Tue Jun 05 11:27:13 UTC 2012,,,,,,0|i0axhz:,61700,,,,,,,,"04/Jun/12 21:44;fpj;A solution is simply to add a version like this to hedwig-server/pom.xml:

{noformat}
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>
        </configuration>
      </plugin>
{noformat}

But, given that we have it in the top-level pom.xml, I'm not sure why we have it again in the pom file of hedwig-server. Should we simply delete the plugin description in hedwig-server/pom.xml? Should we bump the plugin version to 2.5 (it is current 2.1 in the top-level pom)?

",05/Jun/12 09:53;ikelly;mvn compile findbugs:findbugs to test patch,"05/Jun/12 10:13;fpj;+1, works fine for me.","05/Jun/12 10:27;ikelly;To clarify, what i did here wasn't to bump the version from 2.1 to 2.3.2. The specification of 2.1 was in the reporting section of the pom, so it was never being picked up anyhow. Because of this it was picking up the highest available on the machine, which was 2.3.2 when i was fixing the findbugs errors previously. As such, i've specified 2.3.2 as the used version of findbugs. ","05/Jun/12 10:28;ikelly;2.5 adds some warning around style and i18n, we can fix these in 4.2 if we want, but it's a lot of little changes for very little benefit, so we shouldn't do it for 4.1",05/Jun/12 10:30;hustlmsp;thanks Ivan for clarification. +1 for the patch.,"05/Jun/12 10:30;hustlmsp;since we had two +1 on it, I would commit it.","05/Jun/12 11:21;hustlmsp;committed as r1346340 on trunk, r1346343 on branch-4.1","05/Jun/12 11:27;hudson;Integrated in bookkeeper-trunk #546 (See [https://builds.apache.org/job/bookkeeper-trunk/546/])
    BOOKKEEPER-286: Compilation warning (ivank via sijie) (Revision 1346340)

     Result = UNSTABLE
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TestZkSubscriptionManager quits due to NPE, so other tests are not run in hedwig server.",BOOKKEEPER-285,12559236,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,04/Jun/12 18:02,14/Jan/13 16:14,14/Mar/19 02:39,05/Jun/12 10:12,4.1.0,,4.1.0,,,hedwig-server,,,0,,"{code}
2012-06-05 01:33:46,366 - ERROR - [main-EventThread:TerminateJVMExceptionHandler@28] - Uncaught exception in thread main-EventThread
java.lang.NullPointerException
        at org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager.updateMessageBound(AbstractSubscriptionManager.java:457)
        at org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager$AcquireOp$1.operationFinished(AbstractSubscriptionManager.java:207)
        at org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager$AcquireOp$1.operationFinished(AbstractSubscriptionManager.java:157)
        at org.apache.hedwig.server.meta.ZkMetadataManager$7.safeProcessResult(ZkMetadataManager.java:352)
        at org.apache.hedwig.zookeeper.SafeAsyncZKCallback$ChildrenCallback.processResult(SafeAsyncZKCallback.java:66)
        at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:594)
        at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
{code}

",,,,,,,,,,,,,,,,,,,04/Jun/12 18:08;hustlmsp;BOOKKEEPER-285.diff;https://issues.apache.org/jira/secure/attachment/12530827/BOOKKEEPER-285.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-05 08:36:32.736,,,no_permission,,,,,,,,,,,,,250350,,,Tue Jun 05 10:45:49 UTC 2012,,,,,,0|i0axjj:,61707,,,,,,,,04/Jun/12 18:08;hustlmsp;attach a patch to fix this issue by using LocalDBPersistenceManager instead of null.,05/Jun/12 08:36;ikelly;lgtm +1,"05/Jun/12 10:12;hustlmsp;committed as r1346321 in trunk, r1346328 in branch 4.1 

thanks Ivan for reviewing.","05/Jun/12 10:45;hudson;Integrated in bookkeeper-trunk #545 (See [https://builds.apache.org/job/bookkeeper-trunk/545/])
    BOOKKEEPER-285: TestZkSubscriptionManager quits due to NPE, so other tests are not run in hedwig server. (sijie) (Revision 1346321)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BKClient is failing when zkclient connection delays,BOOKKEEPER-281,12558934,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,01/Jun/12 09:41,14/Jan/13 16:12,14/Mar/19 02:39,05/Jun/12 06:22,,,4.1.0,,,,,,0,,"I have started the ZK cluster and when tries to create a BookKeeper client from my application, it is throwing following ZooKeeper ConnectionLossException and is exitting.



12/06/01 11:44:31 WARN client.ZooKeeperSaslClient: SecurityException: java.lang.SecurityException: Unable to locate a login configuration occurred when trying to find JAAS configuration.
12/06/01 11:44:31 INFO client.ZooKeeperSaslClient: Client will not SASL-authenticate because the default JAAS configuration section 'Client' could not be found. If you are not using SASL, you may ignore this. On the other hand, if you expected SASL to work, please fix your JAAS configuration.
12/06/01 11:44:31 INFO zookeeper.ClientCnxn: Client session timed out, have not heard from server in 4540ms for sessionid 0x0, closing socket connection and attempting reconnect
12/06/01 11:44:32 INFO zookeeper.ClientCnxn: Opening socket connection to server /10.18.40.91:2182
Exception in thread ""main"" org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss
       at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)
       at org.apache.bookkeeper.client.BookieWatcher.readBookiesBlocking(BookieWatcher.java:151)
       at org.apache.bookkeeper.client.BookKeeper.<init>(BookKeeper.java:139)
       at BKClient1.main(BKClient1.java:40)
12/06/01 11:44:36 WARN client.ZooKeeperSaslClient: SecurityException: java.lang.SecurityException: Unable to locate a login configuration occurred when trying to find JAAS configuration.



When analyzed more, the root cause is:

BookKeeper.java:
--------------------
In the constructor of BookKeeper, immediately after creating the ZK client , it is going to bookieWatcher.readBookiesBlocking() for available bookies from ZK server before reaching SyncConnected event.

I think, we would properly use the existing countdown latch and wait till ZooKeeper client connection establishment before continue reading Bookies.
",,,,,,,,,,,,,,,,,,,04/Jun/12 10:42;ikelly;BOOKKEEPER-281.diff;https://issues.apache.org/jira/secure/attachment/12530758/BOOKKEEPER-281.diff,01/Jun/12 16:46;ikelly;BOOKKEEPER-281.diff;https://issues.apache.org/jira/secure/attachment/12530570/BOOKKEEPER-281.diff,01/Jun/12 11:10;ikelly;BOOKKEEPER-281.diff;https://issues.apache.org/jira/secure/attachment/12530538/BOOKKEEPER-281.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-06-02 00:44:27.526,,,no_permission,,,,,,,,,,,,,250352,,,Tue Jun 05 06:22:17 UTC 2012,,,,,,0|i0axlb:,61715,,,,,,,,"01/Jun/12 11:10;ikelly;Patch defers initialization of any zk dependent part until after sync connected has been received.

test included","01/Jun/12 11:10;ikelly;ignore, fails a test.",01/Jun/12 16:46;ikelly;Tests pass cleanly now. ,"02/Jun/12 00:44;hustlmsp;Thanks Ivan. the patch seems good. but I had two questions need your clarification.

1)
{code}
-        Thread.sleep((baseClientConf.getReadTimeout()*2)*1000);
+        Thread.sleep((baseClientConf.getReadTimeout()*3)*1000);
{code}
why you change it from 2 to 3?


2)
{code}
+        bookieWatcher = new BookieWatcher(conf, this);
+        
+        // assume that a passed in zk is already connected
+        bootstrapWithZK();
{code}

in BookKeeper constructor with passed zk instance, you assumed that the passed zk instance is already connected. By in BookKeeperAdmin, the passed zk instance doesn't wait until connected to construct a bookkeeper instance. so BookKeeperAdmin would encounter same issue when zk connection delays.

","02/Jun/12 04:01;rakeshr;Nice work. Just few thoughts:

# Consider the case ZK server not running and fails, should we now wait for the full session timeout? IMHO, the latch should listen either SyncConnected or Disconnected events. 
# BookKeeper(final ClientConfiguration conf) is not throwing timeout/interrupted exception back to the client. I feel, would great pass exceptions back to the client. How does it sound?
# Also, earlier I guess BookKeeper(conf) was throwing the following exception back to the client, but in the patch it is suppressing. Any thoughts on this?
{noformat}
+        } catch (KeeperException ke) {
+            LOG.error(""Exception accessing zookeeper"", ke);
+        } catch (IOException ioe) {
+            LOG.error(""I/O exception accessing zookeeper"", ioe);
+        } catch (InterruptedException ie) {
+            LOG.error(""Interrupted accessing zookeeper"", ie);
+        }
{noformat}","04/Jun/12 08:18;ikelly;@Sijie
1. This is a change to fix a intermittent failure of the test, due to the change in how BOOKKEEPER-258 made timeouts work. Before 258, we set the timeout and when it hit, we just killed everything. Now we set the timeout, and when it triggers, we check if that amount of time has passed with the request outstanding and if so error the request. As the timeout timer is set on the connection and not the individual requests, and the requests can be made a couple of ms after the connection is set up, sometimes it can take 2 timeout periods for the requests to be timed out. This change ensures that this happens.

2. This is true. I think the overall problem here is that its not possible to set a Watcher on a ZooKeeper without overriding the previous one. This means that there's no real clean way to say ""Don't process anything on this zk until it has connected"". 

@Rakesh
1. I'll look into how best to fail fast and generate a new patch.
2. Passing the exception back would require waiting for the exception to occur, i.e. blocking. If this is acceptable, we would be better off just making the whole BookKeeper constructor to be blocking (I'm considering this as a possible solution).
3. Same answer as 2.","04/Jun/12 08:29;fpj;bq. in BookKeeper constructor with passed zk instance, you assumed that the passed zk instance is already connected. By in BookKeeperAdmin, the passed zk instance doesn't wait until connected to construct a bookkeeper instance. so BookKeeperAdmin would encounter same issue when zk connection delays.

Assuming that the zk instance is already connected seems reasonable to me. The underlying assumption is that the application which passed the zk instance is responsible for passing a working zk handle. In the case the application passes the zk handle, I'm not sure it is a good idea to have the bk client sort of managing it.","04/Jun/12 08:39;fpj;bq. Passing the exception back would require waiting for the exception to occur, i.e. blocking. If this is acceptable, we would be better off just making the whole BookKeeper constructor to be blocking (I'm considering this as a possible solution).

Since this is an initialization step, I find it acceptable to block. But, my preference, which seem to be a bit tight to do for this patch, is perhaps to implement a simple state machine and notify the application as the state changes. For example, we can notify the application when the object is ready (state READY) and when it loses its session to zk (state DISCONNECTED_FROM_ZK).
","04/Jun/12 08:39;ikelly;In that case, if we receive a non connected handle we should fail straight away. For BookKeeperAdmin, I may need to refactor to ensure that it passes in a connected handle.","04/Jun/12 08:43;hustlmsp;> In that case, if we receive a non connected handle we should fail straight away. For BookKeeperAdmin, I may need to refactor to ensure that it passes in a connected handle.

yes. we need to ensure zookeeper handle is connected in BookKeeperAdmin. :)","04/Jun/12 08:44;hustlmsp;> Assuming that the zk instance is already connected seems reasonable to me. The underlying assumption is that the application which passed the zk instance is responsible for passing a working zk handle. In the case the application passes the zk handle, I'm not sure it is a good idea to have the bk client sort of managing it.

I agreed. My point is not to resolve the passed zk handle in bookkeeper constructor. actually we need to do same thing in BookKeeperAdmin, which is from our code.","04/Jun/12 09:58;rakeshr;@Ivan
bq.  Passing the exception back would require waiting for the exception to occur, i.e. blocking

Here I'm just thinking about the application side logic, how does the user knows about the bkclient is ready to use?. 
I also feel a similar approach like state notification would be good(Flavio's suggestion).",04/Jun/12 10:42;ikelly;New patch makes makes BookKeeper client constructor block until zookeeper has connected. This will effectively be the same behaviour as before as we always called readBookiesBlocking in the constructors anyhow.,"04/Jun/12 10:52;ikelly;Regarding state notifications, I think this is a bad idea. A user of the api shouldn't need to know if the client is ready to use or not. They should be able to just submit an async request to the client, and either the client does it and completes with success or failure due to an unrecoverable error state. The user isn't going to check the state and, on seeing that the client isn't connected, decide that it doesn't want to add an entry. My biggest problem with the ZooKeeper api is that it doesn't allow a user to submit an async request without having to ensure that its in connected state. The api is supposed to hide these kind of details. In fact, the HBase guys wrapped the whole zookeeper api to get around this problem[1]. I think, in 4.2 we should perhaps take a similar approach.

[1] https://github.com/apache/hbase/blob/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/zookeeper/RecoverableZooKeeper.java","04/Jun/12 11:32;fpj;bq. Regarding state notifications, I think this is a bad idea. A user of the api shouldn't need to know if the client is ready to use or not. They should be able to just submit an async request to the client, and either the client does it and completes with success or failure due to an unrecoverable error state.

These are independent paths. If the application wants, it can wait until it is connected. If it doesn't check and it submits operations, then its operations might fail as you say.

bq. The user isn't going to check the state and, on seeing that the client isn't connected, decide that it doesn't want to add an entry. 

Adding an entry is probably not a good example because it doesn't depend on zookeeper in a regular run. Creating/Closing a ledger are perhaps more relevant, no? In any case, I see that as being useful, since an application might not want to submit a whole bunch of asynchronous operations to later find that none of them went through. It's true that it can happen independent of the case we are discussing here, but under the conditions we are discussing here, the application could know that it is better ti wait if we notify.  

bq. My biggest problem with the ZooKeeper api is that it doesn't allow a user to submit an async request without having to ensure that its in connected state. The api is supposed to hide these kind of details. 

If the client session is expired, then we can't guarantee ordering. If we don't fail the operations, then we might end up violating our ordering guarantees.  

bq. In fact, the HBase guys wrapped the whole zookeeper api to get around this problem[1]. I think, in 4.2 we should perhaps take a similar approach.

I haven't looked at the particular repository you pointed us to, but in general I find embedding zookeeper, trying to make its use completely transparent, a bad idea. If it is a separate component, it is best for debugging that the developer is aware.   ",04/Jun/12 11:36;fpj;Let me also mention that this is possibly a longer discussion that we possibly don't want to have now. I suggest we try to wrap up the patch for this issue and leave a discussion on how to deal with zookeeper for a later release.,"04/Jun/12 13:09;hustlmsp;agreed that a separated jira on how to deal with zookeeper.

@Ivan, the new patch is simple and clear. just one question, why you change to count down the latch on all events? is there any consideration?

{code}
-                        if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {
-                            connectLatch.countDown();
-                        }
+                        // countdown the latch on all events, even if we haven't
+                        // successfully connected.
+                        zkConnectLatch.countDown();
+
{code}

{code}
         zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {
             @Override
             public void process(WatchedEvent event) {
+                latch.countDown();
                 if (LOG.isDebugEnabled()) {
                     LOG.debug(""Process: "" + event.getType() + "" "" + event.getPath());
                 }
             }
         });
{code}","04/Jun/12 13:24;ikelly;ZooKeeper usage is definitely another issue. I've created BOOKKEEPER-284 for this.

@Sijie
The countDown for all events assumes that the first event from ZooKeeper will be a connection event. This will either be SyncConnected or Disconnected. In either case, in the following if statement, we check if the zk client is connected, and if not throw an exception. ","04/Jun/12 13:28;umamaheswararao;@Sijie,
 I think Ivan's idea is coundown on all the events and later have a check on isConnected. If clinet gets some event means, connection might established and got the event. if connection is not in a connected state he is throwing exception. Please correct me Ivan if my understanding is wrong.

Patch looks good for me.  +1 from my side on answering to Sijie's queries.
","04/Jun/12 13:41;umamaheswararao;Oh, thanks Ivan. Comment overlap...Did not see your comment above. :-)","04/Jun/12 15:00;hustlmsp;@Ivan @Uma, thanks for explanation. My origin concern is that the countDownLatch will be called each time receiving a event from ZooKeeper. It might heart performance. Looking into the source code of CountDownLatch, seems it returns immediately if the count has reached zero. So the new patch is OK for me. +1.","04/Jun/12 21:18;fpj;+1, looks good.","05/Jun/12 04:50;rakeshr;+1, latest patch looks nice for me.",05/Jun/12 05:43;hustlmsp;we had three +1 on it. I would commit it.,"05/Jun/12 06:11;hudson;Integrated in bookkeeper-trunk #543 (See [https://builds.apache.org/job/bookkeeper-trunk/543/])
    BOOKKEEPER-281: BKClient is failing when zkclient connection delays (ivank via sijie) (Revision 1346247)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
","05/Jun/12 06:22;hustlmsp;Committed as r1346247 in trunk, r1346253 in 4.1.0 branch.

Thanks Ivan for nice work. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerHandle.addEntry() should return an entryId,BOOKKEEPER-280,12558835,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,31/May/12 18:06,13/Feb/13 15:46,14/Mar/19 02:39,29/Jun/12 16:44,4.2.0,,4.2.0,,,bookkeeper-client,,,0,,"LedgerHandle.asyncAddEntry callback provides the entryId of the newly added entry, but the synchronous version return void. 
",,,,,,,,,,,,,,,,,,,31/May/12 18:41;mmerli;0001-BOOKKEEPER-280-LedgerHandle.addEntry-should-return-a.patch;https://issues.apache.org/jira/secure/attachment/12530425/0001-BOOKKEEPER-280-LedgerHandle.addEntry-should-return-a.patch,31/May/12 18:10;mmerli;0001-BOOKKEEPER-280-LedgerHandle.addEntry-should-return-a.patch;https://issues.apache.org/jira/secure/attachment/12530423/0001-BOOKKEEPER-280-LedgerHandle.addEntry-should-return-a.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-01 03:39:35.331,,,no_permission,,,,,,,,,,,,,293567,,,Fri Jun 29 17:08:23 UTC 2012,,,,,,0|i0tcbj:,169305,,,,,,,,"01/Jun/12 03:39;hustlmsp;[~mmerli] the patch seems good to me. only one place, it would be better to change -1 to use a constant define in ""long entryId = -1;"". The constant define you could refer BOOKKEEPER-260.

But one thing that I concerned is that changing return value breaks binary compatibility (i.e. bytecodes that was previously compiled against the old API will no longer run).
http://stackoverflow.com/questions/3589946/retrofitting-void-methods-to-return-its-argument-to-facilitate-fluency-breaking

In order not to block BOOKKEEPER-220, I would suggest you implement sync addEntry based on bookkeeper's asyncAddEntry first to get the entry id.","13/Jun/12 10:41;ikelly;Patch looks fine except for the magic number Sijie mentioned. 

Re: binary compability, I think it's fine to break, as people tend to recompile when they dump a dependency version anyhow. Its source compatibility we need to worry about, and compatibility between nodes running different versions.",27/Jun/12 05:35;hustlmsp;I am OK for the binary compability. +1 for the patch.,29/Jun/12 16:44;ikelly;Committed r1355467. Thanks Matteo,"29/Jun/12 17:08;hudson;Integrated in bookkeeper-trunk #585 (See [https://builds.apache.org/job/bookkeeper-trunk/585/])
    BOOKKEEPER-280: LedgerHandle.addEntry() should return an entryId (mmerli via ivank) (Revision 1355467)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocalBookKeeper is failing intermittently due to zkclient connection establishment delay,BOOKKEEPER-279,12558760,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,31/May/12 11:25,14/Jan/13 16:11,14/Mar/19 02:39,05/Jun/12 06:57,4.0.0,,4.1.0,,,bookkeeper-client,,,0,,"LocalBookKeeper is initializing the zkclient and immediately trying to create ""/ledgers"" and ""/ledgers/available"" znodes without waiting for the ZooKeeper SyncConnected state. The client operation should be guarded with ZKConnectionWatcher.

LocalBookKeeper.java
{noformat}
zkc = new ZooKeeper(""127.0.0.1"", ZooKeeperDefaultPort, new emptyWatcher());
/*	User for testing purposes, void */
static class emptyWatcher implements Watcher {
public void process(WatchedEvent event) {}
}
{noformat}
",,,,,,,,,,,,,,,,,,,31/May/12 15:43;rakeshr;BOOKKEEPER-279.1.patch;https://issues.apache.org/jira/secure/attachment/12530402/BOOKKEEPER-279.1.patch,01/Jun/12 10:33;rakeshr;BOOKKEEPER-279.2.patch;https://issues.apache.org/jira/secure/attachment/12530532/BOOKKEEPER-279.2.patch,31/May/12 12:04;rakeshr;BOOKKEEPER-279.patch;https://issues.apache.org/jira/secure/attachment/12530380/BOOKKEEPER-279.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-05-31 15:30:53.815,,,no_permission,,,,,,,,,,,,,250356,,,Tue Jun 05 07:16:41 UTC 2012,,,,,,0|i0axtb:,61751,,,,,,,,"31/May/12 12:04;rakeshr;Attached the patch. Didnot include any test case as the zk instance is not visible. Appreciate any ideas:)

Also, I have corrected the sessiontimeout parameter in the patch.","31/May/12 15:30;hustlmsp;the patch seems good to me. just one comment.

{code}
-            zkc = new ZooKeeper(""127.0.0.1"", ZooKeeperDefaultPort, new emptyWatcher());
+            CountdownWatcher zkConnectionWatcher = new CountdownWatcher();
+            zkc = new ZooKeeper(""127.0.0.1"", zkSessionTimeOut,
+                    zkConnectionWatcher);
{code}

from my knowledge, if user doesn't specify zookeeper port in connect string, it would use default port to connect. so if I changed ZooKeeperDefaultPort, the ZooKeeper instance would not work probably. So why not append ZooKeeperDefaultPort after '127.0.0.1'?

","31/May/12 15:43;rakeshr;Thanks Sijie. Updated the patch by fixing the comment. Since ZooKeeperDefaultPort is always 2181, I have reused the HOSTPORT='127.0.0.1:2181' as connectstring.","01/Jun/12 03:16;hustlmsp;oh, I just noticed that the jira is marked as 4.1.0. But I have cut a release 4.1.0 before this jira.

[~rakeshr] I would suggest moving it into 4.2.0. Is it OK for me?","01/Jun/12 06:03;rakeshr;Since you already cut the branch and not a blocker issue, agree moving to 4.2.0 version. If you have chance to do one more RC, then will include this also. I'll manage internally this.","01/Jun/12 07:03;fpj;Assuming the vote on the current release candidate passes, one option is to have a bug fix release 4.1.1 that includes this issue rather than wait until 4.2.0.","01/Jun/12 07:09;umamaheswararao;{quote}
Assuming the vote on the current release candidate passes, one option is to have a bug fix release 4.1.1 that includes this issue rather than wait until 4.2.0.
{quote}
+1, we can include this in 4.1.1, Until we did not find any blockers in this RC.",01/Jun/12 09:57;hustlmsp;[~rakeshr] the patch introduced junit package in LocalBookKeeper. but junit package scope is just for testing. It would be better to remove junit-related staffs from LocalBookKeeper.,01/Jun/12 09:58;hustlmsp;cancel the patch until fix junit issue.,"01/Jun/12 10:33;rakeshr;Oh! thats correct. Thanks Sijie. Attached latest patch by addressing Sijie comment.
Please review.","03/Jun/12 05:44;hustlmsp;the patch looks good to me, [~rakeshr]. +1","05/Jun/12 06:57;hustlmsp;committed as r1346257 in trunk, r1346258 in branch 4.1.

Thanks Rakesh.","05/Jun/12 07:16;hudson;Integrated in bookkeeper-trunk #544 (See [https://builds.apache.org/job/bookkeeper-trunk/544/])
    BOOKKEEPER-279: LocalBookKeeper is failing intermittently due to zkclient connection establishment delay (Rakesh R via sijie) (Revision 1346257)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hedwig cpp client library should not link to cppunit which is just used for test.,BOOKKEEPER-274,12558548,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,hustlmsp,hustlmsp,hustlmsp,30/May/12 06:51,13/Feb/13 15:47,14/Mar/19 02:39,12/Jun/12 16:37,4.0.0,4.1.0,4.2.0,,,,,,0,,,,,,,,,,,,,,,,,,,,,30/May/12 06:59;hustlmsp;BOOKKEEPER-274.diff;https://issues.apache.org/jira/secure/attachment/12530169/BOOKKEEPER-274.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-12 16:37:47.79,,,no_permission,,,,,,,,,,,,,293566,,,Tue Jun 12 16:47:13 UTC 2012,,,,,,0|i0tcbb:,169304,,,,,,,,30/May/12 06:59;hustlmsp;quite simple a fix to remove cppunit from lib dependencies.,"12/Jun/12 16:37;ikelly;Committed as r1349423. Thanks Sijie.
","12/Jun/12 16:47;hudson;Integrated in bookkeeper-trunk #558 (See [https://builds.apache.org/job/bookkeeper-trunk/558/])
    BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank) (Revision 1349423)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/configure.ac
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerHandle.deleteLedger() should be idempotent,BOOKKEEPER-273,12558515,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,30/May/12 00:09,22/Oct/12 14:50,14/Mar/19 02:39,30/May/12 15:14,4.1.0,,4.1.0,,,bookkeeper-client,,,0,,"Deleting a non-existing ledger should silently succeed. 

Current behavior is to raise a ZKException, but it's not possible to know whether there was some error or the ledger does not exists anymore. 

This scenario will happen when a previous deleteLedger() call succeeded but the client crashed before updating its own ledger list.",,,,,,,,,,,,,,,,,,,30/May/12 14:51;mmerli;0001-BOOKKEEPER-273-LedgerHandle.deleteLedger-should-be-i.patch;https://issues.apache.org/jira/secure/attachment/12530210/0001-BOOKKEEPER-273-LedgerHandle.deleteLedger-should-be-i.patch,30/May/12 14:28;mmerli;0001-BOOKKEEPER-273-LedgerHandle.deleteLedger-should-be-i.patch;https://issues.apache.org/jira/secure/attachment/12530209/0001-BOOKKEEPER-273-LedgerHandle.deleteLedger-should-be-i.patch,30/May/12 00:16;mmerli;0001-BOOKKEEPER-273-LedgerHandle.deleteLedger-should-be-i.patch;https://issues.apache.org/jira/secure/attachment/12530123/0001-BOOKKEEPER-273-LedgerHandle.deleteLedger-should-be-i.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-05-30 01:28:07.049,,,no_permission,,,,,,,,,,,,,250353,,,Wed May 30 15:31:29 UTC 2012,,,,,,0|i0axlz:,61718,,,,,,,,"30/May/12 01:28;umamaheswararao;
I agree the case. Even normal file system also will not throw any exceptions on delete failures, but it will indicate with false about the opeation status.
Unfortunately deleteLedger is void API. But this will be a behaviour change, So, let's discuss with Ivan/Flavio. Existing customers might have the opinion of throwing exception when NoNode also. If the change approves, you may want to add test for this behavior... .Alternatively, can we set a different exception code in this case?","30/May/12 03:03;hustlmsp;I like the idea Uma proposed, changing deleteLedger to return a boolean result indicating whether the file is deleted succeed or not. If we want to do it, it would be API change and I would suggest marking it as 4.2.0. 

BTW, it would be better to generate the patch with '-no-prefix' option, which might be easy for users to apply.","30/May/12 07:40;fpj;@matteo I agree with the change. Interestingly, there is a mismatch between the synchronous version of delete ledger and the asynchronous version. The asynchronous version propagates the zookeeper error code, but the synchronous one doesn't, it simply logs the error code. The asynchronous version seems to be leaking some info about the internals.

@uma,sijie At the time we were designing the api, we've set as one of our guidelines to have synchronous calls indicating an error by throwing an exception and asynchronous calls indicating errors with a return code. If we make the change Uma proposes, then we will be breaking this guideline and symmetry. Do you guys feel that it is a strong enough reason to break compatibility? Of course, doing it earlier is better, so now it is a good time to talk about it. Also, I think that a change that breaks compatibility should be in 5.0, no?

With respect to the issue of this jira, I believe we would return true in the case the ledger has already been deleted and return false if the operation really fails, right? Throwing an exception compared to just returning a boolean enables us to convey more information about the error, even if we are not conveying a lot right now. ","30/May/12 09:41;hustlmsp;

> With respect to the issue of this jira, I believe we would return true in the case the ledger has already been deleted and return false if the operation really fails, right?

I think the proposal is returning true when deleting the ledger successfully, returning false when the ledger doesn't exist, throwing exception when encountering exceptions during deletion. Just as File#delete() in JDK, http://docs.oracle.com/javase/1.4.2/docs/api/java/io/File.html#delete()

>  At the time we were designing the api, we've set as one of our guidelines to have synchronous calls indicating an error by throwing an exception and asynchronous calls indicating errors with a return code.

I agreed that we need to keep compatibility in 4.x versions. One bad thing for now is user can't know the detail reason when receiving ZKException return code in ledger deletion. I would suggest returning NoSuchLedgerExistsException when deleting non-existed ledgers, which could keep compatibility and make user clear about what happened.","30/May/12 10:22;umamaheswararao;{quote}
 would suggest returning NoSuchLedgerExistsException when deleting non-existed ledgers, which could keep compatibility and make user clear about what happened.
{quote}
This is one more option alternatively I proposed in my previous comment.
see in my above comment: [Alternatively, can we set a different exception code in this case?|https://issues.apache.org/jira/browse/BOOKKEEPER-273?focusedCommentId=13285315&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13285315]
I too agreed with Flavio about maintainng the compatibility for 4.x versions. For this version, fix could be like this suggestion. So, that we can maintain compatiobility for 4.x versions and also will be able to indicate the users about the status with correct exception.

For version 5.0, may be we can think/ discuss more about this API behavior change. Since we don't want to break the compatibility in 4.x versions, Let's go ahead with above suggestion? If yes, it may be better to move to separate JIRA about the below discussions then?
{quote}
I think the proposal is returning true when deleting the ledger successfully, returning false when the ledger doesn't exist, throwing exception when encountering exceptions during deletion. Just as File#delete() in JDK, http://docs.oracle.com/javase/1.4.2/docs/api/java/io/File.html#delete()
{quote}
{quote}
@uma,sijie At the time we were designing the api, we've set as one of our guidelines to have synchronous calls indicating an error by throwing an exception and asynchronous calls indicating errors with a return code. If we make the change Uma proposes, then we will be breaking this guideline and symmetry. Do you guys feel that it is a strong enough reason to break compatibility? Of course, doing it earlier is better, so now it is a good time to talk about it. Also, I think that a change that breaks compatibility should be in 5.0, no?
{quote}

Thanks,
Uma","30/May/12 11:05;ikelly;+1 on NoSuchLedgerExistsException. Any code already has to catch BKException, so this won't break BC, but it will allow them to know that the failure was only due to the ledger not existing.",30/May/12 11:43;fpj;+1 for me too on NoSuchLedgerExistsException.,30/May/12 14:29;mmerli;Updated the patch to throw BKNoSuchLedgerExistsException when the ledger doesn't exist.,"30/May/12 14:42;ikelly;Two small niggles with the patch.
a) the javadoc should specify BKException.BKNoSuchLedgerExistsException rather than BKNoSuchLedgerExistsException, so that javadoc can generate a link for it. (mvn javadoc:aggregate generates the javadoc btw)
b) the else should be on the same line. Use zookeeper's coding standard, which in turn uses the sun standard. [1][2]

[1] https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute
[2] http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-142311.html#449",30/May/12 14:52;mmerli;Updated the patch with formatting and exception full name.,30/May/12 14:55;ikelly;lgtm +1. committing,30/May/12 15:14;ikelly;Committed as r1344301. Thanks Matteo.,"30/May/12 15:31;hudson;Integrated in bookkeeper-trunk #536 (See [https://builds.apache.org/job/bookkeeper-trunk/536/])
    BOOKKEEPER-273: LedgerHandle.deleteLedger() should be idempotent (Matteo Merli via ivank) (Revision 1344301)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZK ledgers root path is hard coded,BOOKKEEPER-263,12556119,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,i0exception,i0exception,i0exception,16/May/12 20:55,22/Oct/12 14:50,14/Mar/19 02:39,24/May/12 05:13,4.1.0,,4.1.0,,,bookkeeper-client,bookkeeper-server,,0,,Currently the ZK ledger root path is not picked up from the config file (It is hardcoded). This patch fixes this. ,,,,,,,,,,,,,,,,,,,18/May/12 00:02;i0exception;BK-263-v1.patch;https://issues.apache.org/jira/secure/attachment/12527957/BK-263-v1.patch,18/May/12 07:15;i0exception;BK-263-v2.patch;https://issues.apache.org/jira/secure/attachment/12528010/BK-263-v2.patch,16/May/12 20:56;i0exception;BK-263.patch;https://issues.apache.org/jira/secure/attachment/12527705/BK-263.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-05-17 05:14:20.057,,,no_permission,,,,,,,,,,,,,250354,,,Thu May 24 06:01:03 UTC 2012,,,,,,0|i0axmv:,61722,,,,,,,,"17/May/12 05:14;hustlmsp;thanks Aniruddha. the patch seems good. just one comment, sees that AVAILABLE_NODE spreads over several files. could we consider moving it to a common place (which could be shared by client and server), such as AbstractConfiguration to have a method getAvailableBookiesPath(), which is similar what Hedwig did in ServerConfiguration to manage its znode path.",18/May/12 00:03;i0exception;Thanks for reviewing. I have updated the patch. ,"18/May/12 02:05;hustlmsp;Thanks Aniruddha for quick response.

sorry that I don't explain it more clearly. it would be better to have a method #getZkAvailableBookiesPath().
so user doesn't need to write code as below 
{code}
this.bookieRegistrationPath = conf.getZkLedgersRootPath() + ""/"" + conf.getBookiesAvailableNode();
{code} 
instead, they could write code as
{code}
this.bookieRegistrationPath = conf.getZkAvailableBookiesPath();
{code}

in AbstractionConfiguration, 'available' could be defined as a constant value, and do string concatenation in method #getZkAvailableBookiesPath().
{code}
static final String AVAILABLE_ZNODE = 'available';

public String getZkAvailableBookiesPath() {
    return getZkLedgersRootPath() + ""/"" + AVAILABLE_ZNODE;
}
{code}

seems it could make the code clearer. How is your opinion?","18/May/12 07:13;i0exception;Yes, now it's clearer. I've updated the patch. ",21/May/12 06:27;hustlmsp;the patch is pretty good to me. +1.,24/May/12 05:13;hustlmsp;committed as r1342145. thanks Aniruddha.,"24/May/12 06:01;hudson;Integrated in bookkeeper-trunk #523 (See [https://builds.apache.org/job/bookkeeper-trunk/523/])
    BOOKKEEPER-263: ZK ledgers root path is hard coded (Aniruddha via sijie) (Revision 1342145)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Define constant for -1 (invalid entry id),BOOKKEEPER-260,12555631,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,15/May/12 14:34,22/Oct/12 14:50,14/Mar/19 02:39,25/May/12 15:14,,,4.1.0,,,,,,0,,"We should define a constant for -1, as we use it all over the place to signify an invalid entry id. We should call it INVALID_ENTRY_ID or NO_ENTRY or something to the same affect.",,,,,,,,,,,,,,,,,,,25/May/12 13:28;ikelly;BOOKKEEPER-260.diff;https://issues.apache.org/jira/secure/attachment/12529711/BOOKKEEPER-260.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-25 15:08:15.944,,,no_permission,,,,,,,,,,,,,250346,,,Fri May 25 16:38:06 UTC 2012,,,,,,0|i0axe7:,61683,,,,,,,,25/May/12 13:28;ikelly;Constant added. Also fixed some javadoc warnings. ,25/May/12 15:08;hustlmsp;the patch looks good to me. +1,"25/May/12 15:14;fpj;+1, lgtm.",25/May/12 15:14;fpj;Committed revision 1342678.,"25/May/12 16:38;hudson;Integrated in bookkeeper-trunk #527 (See [https://builds.apache.org/job/bookkeeper-trunk/527/])
    BOOKKEEPER-260: Define constant for -1 (invalid entry id) (ivank via fpj) (Revision 1342678)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompactionTest failed,BOOKKEEPER-258,12555249,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,fpj,fpj,14/May/12 23:11,22/Oct/12 14:50,14/Mar/19 02:39,26/May/12 17:17,,,4.1.0,,,bookkeeper-server,,,0,,"{noformat}
-------------------------------------------------------------------------------
Test set: org.apache.bookkeeper.bookie.CompactionTest
-------------------------------------------------------------------------------
Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 32.557 sec <<< FAILURE!
testCompactionSmallEntryLogs(org.apache.bookkeeper.bookie.CompactionTest)  Time elapsed: 6.507 sec  <<< ERROR!
org.apache.bookkeeper.client.BKException$BKBookieHandleNotAvailableException
        at org.apache.bookkeeper.client.BKException.create(BKException.java:62)
        at org.apache.bookkeeper.client.LedgerHandle.readEntries(LedgerHandle.java:347)
        at org.apache.bookkeeper.bookie.CompactionTest.verifyLedger(CompactionTest.java:128)
        at org.apache.bookkeeper.bookie.CompactionTest.testCompactionSmallEntryLogs(CompactionTest.java:317)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at junit.framework.TestCase.runTest(TestCase.java:168)
        at junit.framework.TestCase.runBare(TestCase.java:134)
        at junit.framework.TestResult$1.protect(TestResult.java:110)
        at junit.framework.TestResult.runProtected(TestResult.java:128)
        at junit.framework.TestResult.run(TestResult.java:113)
        at junit.framework.TestCase.run(TestCase.java:124)
        at junit.framework.TestSuite.runTest(TestSuite.java:232)
        at junit.framework.TestSuite.run(TestSuite.java:227)
        at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)
        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
        at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
        at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:78)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)

{noformat}",,,,,,,,,,,,,,,,,,,25/May/12 16:18;ikelly;BOOKKEEPER-258.diff;https://issues.apache.org/jira/secure/attachment/12529739/BOOKKEEPER-258.diff,25/May/12 16:17;ikelly;BOOKKEEPER-258.diff;https://issues.apache.org/jira/secure/attachment/12529738/BOOKKEEPER-258.diff,18/May/12 10:52;ikelly;BOOKKEEPER-258.diff;https://issues.apache.org/jira/secure/attachment/12528036/BOOKKEEPER-258.diff,17/May/12 15:14;ikelly;BOOKKEEPER-258.diff;https://issues.apache.org/jira/secure/attachment/12527846/BOOKKEEPER-258.diff,16/May/12 08:35;hustlmsp;BOOKKEEPER-258.diff;https://issues.apache.org/jira/secure/attachment/12527591/BOOKKEEPER-258.diff,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-05-15 02:48:46.449,,,no_permission,,,,,,,,,,,,,250345,,,Sat May 26 17:37:31 UTC 2012,,,,,,0|i0axdb:,61679,,,,,,,,"15/May/12 02:48;hustlmsp;@Flavio, from the exception seems that there is no available bookies to connect. I tried to reproduce this issue by running ' while [ $? = 0 ]; do mvn test -Dtest=CompactionTest; done '. but there is no failure for 15 minutes. I will try to run it longer time. 

in additional to it, could you provide more details about this, for example any logs?","15/May/12 03:50;fpj;Hi Sijie, I got it while checking BOOKKEEPER-145, but I don't think it is related to the patch. Unfortunately, I was not logging so I only had the exception. I'll also see if I can reproduce it.","15/May/12 05:10;hustlmsp;I have reproduced the issue by running 'while [ $? = 0 ]; do mvn test -Dtest=CompactionTest; done ' with logging. but I failed to upload the error log seems that the jira system has some problems. I attached parts of logging infos as below.

{code}
2012-05-15 12:53:16,530 - INFO  - [Hashed wheel timer #5:PerChannelBookieClient@438] - Disconnected from bookie: /10.82.129.91:5000
2012-05-15 12:53:16,531 - ERROR - [pool-28-thread-1:PerChannelBookieClient$5@352] - Could not write  request for reading entry: 5 ledger-id: 4 bookie: /10.82.129.91:5000
2012-05-15 12:53:16,566 - ERROR - [pool-28-thread-1:PendingReadOp@114] - Error: Bookie handle is not available while reading entry: 5 ledgerId: 4 from bookie: /10.  82.129.91:5000
2012-05-15 12:53:16,567 - ERROR - [pool-28-thread-1:PerChannelBookieClient$5@352] - Could not write  request for reading entry: 0 ledger-id: 4 bookie: /10.82.129.91:5000
2012-05-15 12:53:16,567 - ERROR - [pool-28-thread-1:PendingReadOp@114] - Error: Bookie handle is not available while reading entry: 0 ledgerId: 4 from bookie: /10.  82.129.91:5000
2012-05-15 12:53:16,567 - ERROR - [pool-28-thread-1:PerChannelBookieClient$5@352] - Could not write  request for reading entry: 1 ledger-id: 4 bookie: /10.82.129.91:5000
2012-05-15 12:53:16,567 - INFO  - [main:BookKeeperClusterTestCase@92] - TearDown
2012-05-15 12:53:16,567 - ERROR - [pool-28-thread-1:PendingReadOp@114] - Error: Bookie handle is not available while reading entry: 1 ledgerId: 4 from bookie: /10.  82.129.91:5000
2012-05-15 12:53:16,568 - ERROR - [pool-28-thread-1:PerChannelBookieClient$5@352] - Could not write  request for reading entry: 2 ledger-id: 4 bookie: /10.82.129.91:5000
2012-05-15 12:53:16,568 - ERROR - [pool-28-thread-1:PendingReadOp@114] - Error: Bookie handle is not available while reading entry: 2 ledgerId: 4 from bookie: /10.  82.129.91:5000
2012-05-15 12:53:16,568 - ERROR - [pool-28-thread-1:PerChannelBookieClient$5@352] - Could not write  request for reading entry: 3 ledger-id: 4 bookie: /10.82.129.91:5000
2012-05-15 12:53:16,568 - ERROR - [pool-28-thread-1:PendingReadOp@114] - Error: Bookie handle is not available while reading entry: 3 ledgerId: 4 from bookie: /10.  82.129.91:5000
2012-05-15 12:53:16,568 - ERROR - [pool-28-thread-1:PerChannelBookieClient$5@352] - Could not write  request for reading entry: 4 ledger-id: 4 bookie: /10.82.129.91:5000
2012-05-15 12:53:16,569 - ERROR - [pool-28-thread-1:PendingReadOp@114] - Error: Bookie handle is not available while reading entry: 4 ledgerId: 4 from bookie: /10.  82.129.91:5000
2012-05-15 12:53:16,575 - INFO  - [ProcessThread(sid:0 cport:-1)::PrepRequestProcessor@466] - Processed session termination for sessionid: 0x1374ed7ba800001
2012-05-15 12:53:16,576 - INFO  - [main:ZooKeeper@679] - Session: 0x1374ed7ba800001 closed
2012-05-15 12:53:16,576 - INFO  - [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxn@1000] - Closed socket connection for client /fe80:0:0:0:0:0:0:1%1:58923   which had sessionid 0x1374ed7ba800001
{code}","15/May/12 05:41;hustlmsp;looked at the logging messages, seems that it is a race in channel timeout (which is introduced in BOOKKEEPER-23).

{code}
    public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback cb, Object ctx) {
        final CompletionKey key = new CompletionKey(ledgerId, entryId);
        readCompletions.put(key, new ReadCompletion(cb, ctx));

        int totalHeaderSize = 4 // for the length of the packet
                              + 4 // for request type
                              + 8 // for ledgerId
                              + 8; // for entryId

        try{
            ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);
            tmpEntry.writeInt(totalHeaderSize - 4); 

            tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,
                                               BookieProtocol.READENTRY, BookieProtocol.FLAG_NONE).toInt());
            tmpEntry.writeLong(ledgerId);
            tmpEntry.writeLong(entryId);

            ChannelFuture future = channel.write(tmpEntry);
            future.addListener(new ChannelFutureListener() {
                @Override
                public void operationComplete(ChannelFuture future) throws Exception {
                    if (future.isSuccess()) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(""Successfully wrote request for reading entry: "" + entryId + "" ledger-id: ""
                                                            + ledgerId + "" bookie: "" + channel.getRemoteAddress());
                        }
                    } else {
                        errorOutReadKey(key);
                    }
                }
            });
        } catch(Throwable e) {
            LOG.warn(""Read entry operation failed"", e);
            errorOutReadKey(key);
        }
    }
{code}

in PerChannelBookieClient#readEntry, it first added CompletionKey and ReadCompletion in readCompletions queue and then write the request to bookie server.

If the channel timeout happened (in CompactionTest there is a time period waiting for compaction finished, so there are no activities in that channel, a timeout would happen), it will try to error out all pending requests.

{code}
    @Override
    public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
        LOG.info(""Disconnected from bookie: "" + addr);
        errorOutOutstandingEntries(); // <-- here to error all pending requests.
        channel.close();
        synchronized (this) {
            state = ConnectionState.DISCONNECTED;
        }

        // we don't want to reconnect right away. If someone sends a request to
        // this address, we will reconnect.
    }
{code} 

did a summary of this issue, the read operations are failed due to a channel timeout. the channel timeout is because there is no activities on the channel.","15/May/12 06:02;hustlmsp;the timeout mechanism deployed in BOOKKEEPER-23 is to use Netty's ReadTimeoutHandler, which monitors a connection rather than an individual messages. this mechanism is quite simple and useful when the traffic is continuous. but the side-effect of such mechanism is if the traffic arrives per timeout interval. these requests would be failed by mistake when connection timeout.

I don't think we have good idea to handle it using ReadTimeoutHandler unless employing new timeout mechanism for individual messages like in Hedwig Client. Because the channel timeout behavior is in Netty, we have no control on it. If the connection timeouts, the channel would be closed by Netty.

From the Netty mailist ( http://lists.jboss.org/pipermail/netty-users/2010-August/003088.html ), modifying pipeline is relatively an expensive operation, so it is expensive to set a new ReadTimeoutHandler for every single write to avoid the above issue.

So I suggested that we added a configuration setting to disable readTimeout for the test, and we needed a new jira to discuss a more robust timeout mechanism. ","15/May/12 10:36;ikelly;Why does the connection timing out cause a problem though? It should reconnect the next time a request comes in. This error indicates to me that the read request itself is timing out, which means the client is making a request and of receiving a response for the length of the readTimeout. This is bad, and indicates that the serverside is hung. Does the compaction block client requests from completing?","16/May/12 08:35;hustlmsp;I did set readTimeout to a large value to disable readTimeout during testing. and I ran "" while [ $? = 0 ]; do mvn test -Dtest=CompactionTest >> compaction.log; done "" for several hours, it doesn't reproduce the issue.","16/May/12 08:44;ikelly;This indicates that compaction is causing big GC waits though, or something similar, which is bad. We should run this test with profiling on to see what GC is doing.","16/May/12 08:53;hustlmsp;@Ivan

to explain why readTimeout cause this issue. we had to clarify two things, 1) how readTimeout works? 2) how the test runs.

for first thing, from Netty documents (http://docs.jboss.org/netty/3.1/api/org/jboss/netty/handler/timeout/ReadTimeoutHandler.html). The timeout happened when no data was read within a certain of period time.

for second thing, CompactionTest#testCompactionSmallEntryLogs ran as below:
1) add several messages to bookkeeper. (so the connection will be established to bookie server)
2) delete ledgers and sleep to wait for GC. the sleep interval is {MajorCompactionInterval + GcWaitTime}, which is 5 seconds, equals to ReadTimeout (is also 5 seconds). so during 5 seconds, there is no activities. The channel might be time out after the sleep interval.
3) read entries to verify them.
{code}

        client.connectIfNeededAndDoOp(new GenericCallback<Void>() {
            @Override
            public void operationComplete(int rc, Void result) {

                if (rc != BKException.Code.OK) {
                    cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);
                    return;
                }   
                client.readEntry(ledgerId, entryId, cb, ctx);
            }   
        }); 
{code}

As the code indicated above, the channel is only checked when calling client.connectIfNeededAndDoOp. If  the channel is not set to disconnected, the client.readEntry will be called to send requests. After client.readEntry put the completion keys in completion pending queue, the channel timeout happened (there is no data read from channel, and the time has been up to 5 seconds due to sleep), all those requests would be error out.


For continuous traffic, it is OK because there is data to read on the channel. But if the traffic arrives in readtimeout interval, there is no data to read for readtimeout interval, the channel has to be closed due to readtimeout.

For more, the timeout callback is triggered by Netty. so we have no idea that when the timeout callback will be triggered. So it is difficult to guarantee the readEntry/addEntry operations be executed atomically before/after timeout callback.  
","16/May/12 09:21;ikelly;ah, so it's a race between the check of connection state and the timeout. If the timeout occurs between the check for being connected, and the op being done, then we get this error.

Im not sure how to fix this nicely. I need to think about it.","17/May/12 15:14;ikelly;This patch takes a different approach. I keep track of whether there has been any request on the channel when we receive a read timeout. If there is no unacked request, do not disconnect, if I timeout waiting for a response, disconnect (the bookie is down or unresponsive).",17/May/12 15:34;ikelly;This is still failing after about 30 minutes of running. Fix must be incomplete.,17/May/12 23:54;hustlmsp;the problem of the new patch here is there is no synchronization between calling ctx.getChannel().disconnect() and channlDisconnected() is called. so the read operations would have chances to be executed after you called ctx.getChannel().diconnect().,"18/May/12 10:52;ikelly;Another new approach. Now I don't timeout the whole channel, just the individual requests on the channel. This means that a timeout can't kill the channel half way through a request. ","18/May/12 13:09;ikelly;After running for 2 hours, no failures, so i'd consider this last fix to be good.","21/May/12 06:39;hustlmsp;@Ivan, the patch seems good to me. I was thinking that is there any side effects in this approach. You don't close the channel when first read timeout. If another {readTimeout} seconds goes again and no read activities came in, will the readTimeout be triggered again? should we add another test case for such case?

","22/May/12 09:35;ikelly;The ReadTimeoutHandler sets the timeout again after triggering the exceptionCaught callback.

http://www.grepcode.com/file/repo1.maven.org/maven2/org.jboss.netty/netty/3.2.4.Final/org/jboss/netty/handler/timeout/ReadTimeoutHandler.java

In terms of sideeffects, there shouldn't be any. The Channel will stay around, but any ledger handle using it will stop using it, once write or read requests have been timed out. The channel will eventually go away. At this point, there'll be no outstanding requests, so nothing will happen to the client. If there are outstanding requests, they'll simply be errored out. 

","24/May/12 03:19;hustlmsp;Thanks Ivan for explanation. The patch looks good to me. +1

@Flavio, could you take a look at this patch and give your opinion on it?","24/May/12 11:29;fpj;I don't fully understand the consequences of removing ""ctx.getChannel().disconnect();"" in this patch. Can we get sockets lingering over if we don't call disconnect? Could you guys please clarify?","24/May/12 16:25;ikelly;The removal of the disconnect means that the channel will not immediately be closed on a read timeout. If anything is subsequently written to the socket, it will timeout. Se 4.2.3.5 of [1]. From a quick test I did of this on one of our clusters, the retransmits are exhausted after about 15 minutes. 

So the upshot of this is that the channel may stick around for 15 minutes after failure, even though any requests to the socket will be failed after readTimeout. In practice, after the read timeout occurs on the socket, no new requests will be sent to the socket, as it should have been removed from the ensemble of the writing ledger. 

[1] http://tools.ietf.org/html/rfc1122","24/May/12 20:52;fpj;I'm a bit confused about the semantics of that exception. This page:

http://docs.jboss.org/netty/3.2/api/org/jboss/netty/handler/timeout/ReadTimeoutHandler.html

says: Raises a ReadTimeoutException when no data was read within a certain period of time. We don't do heartbeats, so the absence of data to read does not necessarily imply that the bookie is gone.

bq. If anything is subsequently written to the socket, it will timeout.

I'm not sure how you're drawing this conclusion, Ivan.

bq. even though any requests to the socket will be failed after readTimeout. 

Same here, I'm not sure how we can guarantee this.

bq. In practice, after the read timeout occurs on the socket, no new requests will be sent to the socket, as it should have been removed from the ensemble of the writing ledger.

Is it guaranteed that after a read timeout exception, a new attempt to write to the socket will fail? The description of the read timeout exception does not seem to imply that the socket has gone broken once such an exception is thrown.  ","25/May/12 08:25;ikelly;bq.  {quote}If anything is subsequently written to the socket, it will timeout. {quote} I'm not sure how you're drawing this conclusion, Ivan.
Section 4.2.3.5 of the TCP rfc[1] states this. 
{quote}
(c)  When the number of transmissions of the same segment
     reaches a threshold R2 greater than R1, close the
     connection.
{quote}
R2 & R1 are defined by the kernel. they are 15 & 3 respectively on the machines I tested on.

bq. {quote}even though any requests to the socket will be failed after readTimeout. {quote} Same here, I'm not sure how we can guarantee this.

The requests on the sockets are stored in addCompletions and readCompletions. This patch errors out the completions on receiving a ReadTimeoutException.

bq. {quote} In practice, after the read timeout occurs on the socket, no new requests will be sent to the socket, as it should have been removed from the ensemble of the writing ledger. {quote} Is it guaranteed that after a read timeout exception, a new attempt to write to the socket will fail? The description of the read timeout exception does not seem to imply that the socket has gone broken once such an exception is thrown. 

The ReadTimeoutException is simply a notification that nothing has been read from the channel in the timeout period. It does nothing to modify the state of the channel/socket[2].

[1] http://tools.ietf.org/html/rfc1122
[2] http://www.grepcode.com/file/repo1.maven.org/maven2/org.jboss.netty/netty/3.2.4.Final/org/jboss/netty/handler/timeout/ReadTimeoutHandler.java","25/May/12 09:35;hustlmsp;> says: Raises a ReadTimeoutException when no data was read within a certain period of time. We don't do heartbeats, so the absence of data to read does not necessarily imply that the bookie is gone.

yes. you are right.

as Ivan indicated in the previous comment, the ReadTimeoutException is a simple notification to tell the client that there is no data read in the timeout period. And this readTimeout notification is running periodically every ${readTimeout} seconds when there is no data read from channel. (the channel would still be alive.)

the issue to do 'ctx.getChannel().disconnect()' when read timeout happened is that it would fail those requests issued right at that time by mistake. Checking the request time when read timeout instead of killing the channel would avoid this mistake.


",25/May/12 14:43;fpj;Ivan and I discussed offline and Ivan proposed to disconnect from BookieWatcher once the client determines that a bookie has failed (through ZooKeeper). Cancelling this patch until Ivan uploads a new one.,"25/May/12 16:17;ikelly;Same as before, but closes channels when it sees bookies go away in /ledgers/available",25/May/12 16:18;ikelly;Forgot to rebase before old patch. This one has rebase,"25/May/12 16:55;fpj;+1, it is good for me. I have also verified that tests run fine.

Sijie, what do you say?",26/May/12 01:27;hustlmsp;new patch looks good to me too. closing channels when bookies go away is a good idea. +1,26/May/12 17:17;hustlmsp;committed as r1342933.,26/May/12 17:17;hustlmsp;Thanks Ivan for the work.,"26/May/12 17:37;hudson;Integrated in bookkeeper-trunk #529 (See [https://builds.apache.org/job/bookkeeper-trunk/529/])
    BOOKKEEPER-258: CompactionTest failed (ivank via sijie) (Revision 1342933)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent failures in PersistanceManager tests,BOOKKEEPER-245,12554464,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,09/May/12 10:55,22/Oct/12 14:50,14/Mar/19 02:39,10/May/12 09:58,,,4.1.0,,,,,,0,,"TestLocalDBPersistenceManagerBlackBox sometimes fails[1]. As does TestBookKeeperPersistenceManagerWhiteBox[2].

[1] https://builds.apache.org/job/bookkeeper-trunk/481/
[2] https://builds.apache.org/job/bookkeeper-trunk/498/",,,,,,,,,,,,,,,,,,,09/May/12 11:02;ikelly;BOOKKEEPER-245.diff;https://issues.apache.org/jira/secure/attachment/12526141/BOOKKEEPER-245.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-09 13:04:20.536,,,no_permission,,,,,,,,,,,,,238706,,,Thu May 10 13:23:29 UTC 2012,,,,,,0|i0axbb:,61670,,,,,,,,"09/May/12 10:59;ikelly;TestLocalDBPersistenceManagerBlackBox failure is caused by DERBY-2074. Bumping the derby dependency fixes it.

TestBookKeeperPersistenceManagerWhiteBox fails because the PM thinks that it doesn't own the topic. This is because we randomly clear the topic list so that we will use multiple ledgers. If we do this on the last iteration of the outer loop, when we try to scan it will think that we don't own the topic. The solution is to acquire the topic before to scan to ensure that we have it.
{code}
// once in every 10 times, give up ledger
if (r.nextInt(10) == 9) {
    // Make the bkpm lose its memory
    bkpm.topicInfos.clear();
    numPrevLedgers++;
}
{code}","09/May/12 11:02;ikelly;The patch fixes as stated in previous comment, and also fixes it so that if the white box bug manifests, it shows as a proper exception, and not a NPE.","09/May/12 13:04;hustlmsp;yes, ur right. I did find this issue and fix it in BOOKKEEPER-191. 

It would be better to fix it in separated issue. thanks Ivan. the patch looks good to me. +1",10/May/12 09:58;ikelly;Committing as r1336569. Thanks for reviewing Sijie.,"10/May/12 13:23;hudson;Integrated in bookkeeper-trunk #502 (See [https://builds.apache.org/job/bookkeeper-trunk/502/])
    BOOKKEEPER-245: Intermittent failures in PersistanceManager tests (ivank) (Revision 1336569)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper not able to connect other zookeeper when shutdown the zookeeper server where the BK has connected.,BOOKKEEPER-242,12554300,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,surendrasingh,surendrasingh,08/May/12 09:50,22/Oct/12 14:50,14/Mar/19 02:39,09/May/12 08:18,4.0.0,,4.1.0,,,bookkeeper-server,,,0,,"Scenario : 
1. Start three zookeeper cluster.
2. start three bookKeeper.
3. shutdown zookeeper server where bookkeeper has connected.

Expected Result:
bookkeeper should be able to connect other zookeeper

Actual Result :
All three bookkeepers retry to connect zookeeper node which has been shutdown.



BookKeeper log for Retry :

{noformat} 
2012-04-25 13:35:15,319 - WARN  [main-EventThread:Bookie$2@456] - ZK client has been disconnected to the ZK server!
2012-04-25 13:35:17,194 - INFO  [main-SendThread(HOST-10-18-40-91:2181):ClientCnxn$SendThread@933] - Opening socket connection to server HOST-10-18-40-91/10.18.40.91:2181
2012-04-25 13:35:17,196 - WARN  [main-SendThread(HOST-10-18-40-91:2181):ClientCnxn$SendThread@1063] - Session 0x136e87b50ce0002 for server null, unexpected error, closing socket connection and attempting reconnect
java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:567)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:264)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1041)
2012-04-25 13:35:19,125 - INFO  [main-SendThread(HOST-10-18-40-91:2181):ClientCnxn$SendThread@933] - Opening socket connection to server HOST-10-18-40-91/10.18.40.91:2181
2012-04-25 13:35:19,126 - WARN  [main-SendThread(HOST-10-18-40-91:2181):ClientCnxn$SendThread@1063] - Session 0x136e87b50ce0002 for server null, unexpected error, closing socket connection and attempting reconnect
java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:567)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:264)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1041)
2012-04-25 13:35:20,276 - INFO  [main-SendThread(HOST-10-18-40-91:2181):ClientCnxn$SendThread@933] - Opening socket connection to server HOST-10-18-40-91/10.18.40.91:2181
2012-04-25 13:35:20,277 - WARN  [main-SendThread(HOST-10-18-40-91:2181):ClientCnxn$SendThread@1063] - Session 0x136e87b50ce0002 for server null, unexpected error, closing socket connection and attempting reconnect
java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:567)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:264)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1041)

{noformat} ",,,,,,,,,,,,,,,,,,,08/May/12 14:57;hustlmsp;BK-242.diff;https://issues.apache.org/jira/secure/attachment/12525998/BK-242.diff,09/May/12 05:30;hustlmsp;BK-242.diff_v2;https://issues.apache.org/jira/secure/attachment/12526104/BK-242.diff_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-05-08 10:01:32.111,,,no_permission,,,,,,,,,,,,,238530,,,Wed May 09 08:39:43 UTC 2012,,,,,,0|i0axof:,61729,,,,,,,,"08/May/12 10:01;rakeshr;ServerConfiguration is a type of 'org.apache.commons.configuration.CompositeConfiguration' and for parsing the list of comma separated values, we need to use config.getStringArray() or config.getList(). 

But it is using getString() and I think that is the reason not retrying to the cluster when the connected ZK is down. From the logs, its trying only HOST-10-18-40-91/10.18.40.91:2181

{noformat}
    public String getZkServers() {
        return getString(ZK_SERVERS, null);
    }
{noformat}


-Rakesh","08/May/12 10:28;hustlmsp;@Rakesh

I don't think we need to parse the list of comma separated values. because, ZooKeeper client would handle it when constructing a ZooKeeper object. 

http://zookeeper.apache.org/doc/r3.4.3/api/org/apache/zookeeper/ZooKeeper.html#ZooKeeper(java.lang.String, int, org.apache.zookeeper.Watcher) 

@surendra

could you tell more about your configuration about ZK_SERVERS ?

","08/May/12 11:00;rakeshr;@Sijie
*getString(ZK_SERVERS, null); is returning only the first server ip:port and ignoring values after the comma*

Say, configured as zkServers=zk1:2181,zk2:2181,zk3:2181
In ServerConfiguration, it is using getString(ZK_SERVERS, null) and returning only the first zk1:2181 and the same is passing to the ZK client. Here it is missing the other two 'zk2:2181,zk3:2181' values.","08/May/12 11:35;surendrasingh;Thanks for looking into this.

@Sijie
I have 3 ZK servers and configured like:
zkServers=10.18.40.155:2181,10.18.40.155:2182,10.18.40.155:2183

-Surendra","08/May/12 14:35;hustlmsp;@Rakesh

Got it. Thanks for pointing out this issue.",08/May/12 14:57;hustlmsp;attach a patch to fix getZkServers issue. thanks Rakesh for help.,"08/May/12 15:08;rakeshr;Hi Sijie, I have few suggestions:


*comment-1)* getStringArray() internally using getList() and preparing array of string. Instead can we directly use getList()?


*comment-2)*
{noformat}
+            sb.append(servers[i]);
+            if (i < servers.length - 1) {
+                sb.append("","");
+            }
{noformat}

instead of this can we use like, 

{noformat}
  if( sb.length() > 0 ){
     sb.append("","");
  }
  sb.append(servers[i]);
{noformat}

-Rakesh","08/May/12 15:42;ikelly;This is very similar to BOOKKEEPER-171[1].

I suggest we use the first Rakesh is suggesting, but instead of manually doing the string stuff, use StringUtils#join [2]. Internally the client configuration should store the list as a String[]

[1] https://github.com/apache/bookkeeper/commit/3defe9e5110472da995789b5ae14c286f58f1293
[2] http://commons.apache.org/lang/api-2.5/org/apache/commons/lang/StringUtils.html",08/May/12 15:42;ikelly;Making this a blocker as it seriously affects availability.,"08/May/12 15:44;ikelly;Ah, i hadn't spotted there was already a patch. Could you change it to use StringUtils#join. I'll push it in then.","09/May/12 04:44;rakeshr;Yeah Ivan, StringUtils.join(servers, ',') would do the stuff and pretty simple.

Also, its good practise(improve readability) to provide message in test assertions like, assertEquals( message, expected, actual)",09/May/12 05:30;hustlmsp;attach a new patch addressed Ivan and Rakesh's suggestion. thanks all.,09/May/12 08:18;ikelly;Committed as r1335973. Thanks Rakesh & Sijie.,"09/May/12 08:39;hudson;Integrated in bookkeeper-trunk #497 (See [https://builds.apache.org/job/bookkeeper-trunk/497/])
    BOOKKEEPER-242: Bookkeeper not able to connect other zookeeper when shutdown the zookeeper server where the BK has connected. (sijie & rakeshr via ivank) (Revision 1335973)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad syncing in entrylogger degrades performance for many concurrent ledgers,BOOKKEEPER-235,12553778,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,03/May/12 15:24,22/Oct/12 14:50,14/Mar/19 02:39,09/May/12 11:01,,,4.1.0,,,,,,0,,"EntryLogger flush syncs on the wrong object, which really hurts performance.",,,,,,,,,,,,,,,,,,,07/May/12 16:09;ikelly;BOOKKEEPER-235.diff;https://issues.apache.org/jira/secure/attachment/12525868/BOOKKEEPER-235.diff,04/May/12 12:04;ikelly;BOOKKEEPER-235.diff;https://issues.apache.org/jira/secure/attachment/12525604/BOOKKEEPER-235.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-05-04 13:44:39.516,,,no_permission,,,,,,,,,,,,,237987,,,Wed May 09 11:22:11 UTC 2012,,,,,,0|i0ax93:,61660,,,,,,,,"04/May/12 12:04;ikelly;The problem was that the flush thread was syncing on entryLogger, while EntryLogger#addEntry is also synchronised, so they were holding each other off. 

Fix is two liner.","04/May/12 13:44;fpj;The description refers to EntryLogger flush synchronizing on the wrong object, but the patch changes a synchronization block in InterleavedLedgerStore. For InterleavedLedgerStore flush, it is only called from Bookie SyncThread, and I'm not convinced that it is ok to change the synchronized block like that.","04/May/12 13:53;ikelly;InterleavedLedgerStorage#flush was syncing on the entrylogger to ensure that only #flush was not called concurrently. It was something i introduced in BOOKKEEPER-196 as an extra check even though it was only called by SyncThread. I didn't realize at the time that EntryLogger#addEntry was also synchronized. Because of this, each call to #addEntry from the bookie thread would block the sync block of #flush in the sync thread.","04/May/12 15:07;fpj;InterleavedLedgerStorage#flush essentially calls LedgerCacheImpl#flushLedger and EntryLogger#flush. They both have synchronization in some form. Given that flushLock is kind of dangling in this patch, what if we simply remove the synchronization block in InterleavedLedgerStorage#flush and drop flushLock?",05/May/12 10:36;fpj;Canceling patch until we converge.,"07/May/12 16:09;ikelly;New patch removes syncing completely, as a) this is only called from SyncThread and b) LedgerCacheImpl#flushLedger and EntryLogger#flush both have their own synchronisation.","09/May/12 11:01;fpj;+1, thanks ivan.",09/May/12 11:01;fpj;Committed revision 1336083.,"09/May/12 11:22;hudson;Integrated in bookkeeper-trunk #499 (See [https://builds.apache.org/job/bookkeeper-trunk/499/])
    BOOKKEEPER-235: Bad syncing in entrylogger degrades performance for many concurrent ledgers (ivank via fpj) (Revision 1336083)

     Result = UNSTABLE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"EntryLogger will throw NPE, if any dir does not exist or IO Errors.",BOOKKEEPER-234,12553749,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,umamaheswararao,umamaheswararao,umamaheswararao,03/May/12 12:53,22/Oct/12 14:50,14/Mar/19 02:39,09/May/12 08:52,4.1.0,,4.1.0,,,bookkeeper-server,,,0,,"I think, Entry log should check the exitance of directories, before going to get the last Log entries. Because, listFiles will retunr null on non existant directories or any IO Errors. We have to add the check for directory existnace check and null checks in side getLastLogID api in EntryLogger.

We may need to handle in LedgerCacheImpl also.

Do we need to add them in bad disks list? and others will refer this list before they use the dirs.",,,,,,,,,,,,,,,,,,,08/May/12 20:52;umamaheswararao;BOOKKEEPER-234.patch;https://issues.apache.org/jira/secure/attachment/12526040/BOOKKEEPER-234.patch,07/May/12 19:46;umamaheswararao;BOOKKEEPER-234.patch;https://issues.apache.org/jira/secure/attachment/12525907/BOOKKEEPER-234.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-05-08 07:43:24.675,,,no_permission,,,,,,,,,,,,,237956,,,Wed May 09 08:53:37 UTC 2012,,,,,,0|i0ax8n:,61658,,,,,,,,"07/May/12 19:47;umamaheswararao;Attached the patch, which addresses the issue in EntryLogger.",08/May/12 07:43;hustlmsp;lgtm +1,"08/May/12 08:39;umamaheswararao;Thanks a lot, Sijie for the review!",08/May/12 14:19;ikelly;Where are you seeing the error occurring? There's a check when Bookie is created already to ensure that the directories exist.,"08/May/12 15:18;umamaheswararao;Yep, Ivan, I have seen it in checkEnvironment call. If directory does not exist then it is creating it.

Yes, In my  testing environment it happened on the the startup of BK, unfortunately dirs have been cleaned(through some test scripts) . I am assuming that, after this step(checkEnvironment) only that might have happend. So, I directly verified that EntryLogger code and found that peice for NPE possibility. Do we need to throw the exception if we meet that situation, as we may not have Version files and all right? Now I can see this is very very rare case. Do we need to handle it?","08/May/12 15:27;ikelly;I think this is a very exceptional scenario (where the directory is deleted, after checkEnvironment and while the bookie is running). We shouldn't allow the bookie to continue as normal if an admin is doing this. That said NPEs are ugly. It would be better if the entry logger checked for the existence of the directory, and if it doesn't exist, throw a FileNotFoundException. ",08/May/12 15:40;umamaheswararao;true...Let me update the patch with this change in some time.,08/May/12 20:52;umamaheswararao;Attached the patch as discussed.,09/May/12 08:39;ikelly;Committed as r1335996. Thanks Uma.,"09/May/12 08:53;hudson;Integrated in bookkeeper-trunk #498 (See [https://builds.apache.org/job/bookkeeper-trunk/498/])
    BOOKKEEPER-234: EntryLogger will throw NPE, if any dir does not exist or IO Errors. (umamaheswararao via ivank) (Revision 1335996)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncBK tests failing ,BOOKKEEPER-232,12553269,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,umamaheswararao,umamaheswararao,umamaheswararao,29/Apr/12 06:26,22/Oct/12 14:50,14/Mar/19 02:39,07/May/12 16:48,4.1.0,,4.1.0,,,bookkeeper-server,,,0,,"
Trace:
java.io.IOException: Unable to delete file: C:\Users\uma\AppData\Local\Temp\bookie7010257841258186070test\current\136fcc63892.txn
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1919)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1910)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.stopBKCluster(BookKeeperClusterTestCase.java:150)
	at org.apache.bookkeeper.test.BookKeeperClusterTestCase.tearDown(BookKeeperClusterTestCase.java:94)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	",Windows,,,,,,,,,,,,,,,,,,07/May/12 14:33;umamaheswararao;BOOKKEEPER-232.patch;https://issues.apache.org/jira/secure/attachment/12525854/BOOKKEEPER-232.patch,01/May/12 03:54;umamaheswararao;BOOKKEEPER-232.patch;https://issues.apache.org/jira/secure/attachment/12525152/BOOKKEEPER-232.patch,29/Apr/12 11:16;umamaheswararao;BOOKKEEPER-232.patch;https://issues.apache.org/jira/secure/attachment/12525015/BOOKKEEPER-232.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-04-30 04:50:07.394,,,no_permission,,,,,,,,,,,,,237380,,,Mon May 07 16:48:37 UTC 2012,,,,,,0|i0axq7:,61737,,,,,,,,"29/Apr/12 06:29;umamaheswararao;I just analysed the cause for this failures.
After stopping bk, we are not closing the EntryLogger and LedgerCache. Seems like ledger cache and entryLogger holding the locks on that files (*.txn, *.idx files).
If we clear the cache and entrylogger can help in this tests to pass.","29/Apr/12 11:17;umamaheswararao;Attached the patch. with this fix, all async tests passing.","29/Apr/12 12:32;umamaheswararao;{quote}
2012-04-29 17:01:11,382 - INFO  - [main:FinalRequestProcessor@423] - shutdown of
 request processor complete
2012-04-29 17:01:11,383 - INFO  - [main:ClientBase@227] - connecting to localhos
t 2181
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 50.091 sec

Results :

Tests run: 14, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 55.195s
[INFO] Finished at: Sun Apr 29 17:01:12 IST 2012
[INFO] Final Memory: 7M/17M
[INFO] ------------------------------------------------------------------------

{quote}",30/Apr/12 04:48;umamaheswararao;Closing streams in finally would have a bad properties. It will mask the root exceptions. Let me try to bring IOUtils clean up with null checks and close the streams in side try itself and retry on finally with IOUtils. for example: HDFS-2330,"30/Apr/12 04:50;rakeshr;I feel, before closing the streams, it would be good to have null checks to avoid unwanted exceptions.","30/Apr/12 04:51;umamaheswararao;Yep, Rakesh, I will bring IOUtils cleanup methods here. That would handle this checks.",01/May/12 03:54;umamaheswararao;Attached the patch with IOUtils.close api.,"07/May/12 08:14;umamaheswararao;@Flavio, Do you have time to review it?. So, that our tests will pass in windows ( our dev env).",07/May/12 10:12;fpj;Looking into it...,"07/May/12 10:33;fpj;It doesn't compile for me, it looks like import org.apache.bookkeeper.util.IOUtils is missing. The patch also contains tabs. Just in case you haven't seen it yet, please have a look at the format we have been using here:

https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute

","07/May/12 10:57;umamaheswararao;Yes, Flavio, I forgot to include IOUtils class in the patch...my bad. I just ran the tests in my env. Did not re apply the patch and check. Let me re-generate the patch. Also will correct formatting issues. Thanks for taking a look.
","07/May/12 13:26;ikelly;Another issue with the patch is that it leaks internal implementation detail of LedgerCache. Basically, LedgerCache should not be called that. It should be called LedgerIndex as all methods on the interface have to do with indexing. In fact, ill open a JIRA to rename it after this comment. The problem is that clearCache tells the user of the API that it maybe a cache there. I think it would be much better to simply call this method ""close()"" and implement the Closeable interface. This way the interface is kept a lot cleaner.

","07/May/12 14:41;umamaheswararao;Hi Ivan, Nice point about LedgerCache naming. I will leave it for other JIRA to rename it as you mentioned.( if it is ok for you, you can directly assign that issue to me, i will upload patch). As discussed, now LedgerCache extends Closeable and just implemented close method. Also formatted correctly as per BK guidelines.

If you have time, please take a look.","07/May/12 16:15;fpj;+1, looks good. Ivan?",07/May/12 16:20;ikelly;lgtm +1. Don't worry about the rename of LedgerCache yet. It needs to be done when the patch queue is small because otherwise it'll probably hit a conflict. We should do before 4.1 though.,07/May/12 16:48;ikelly;Submitted to r1335117. Thanks Uma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 ZKUtil.killServer not closing the FileTxnSnapLog from ZK.,BOOKKEEPER-231,12553234,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,umamaheswararao,umamaheswararao,umamaheswararao,28/Apr/12 04:50,22/Oct/12 14:50,14/Mar/19 02:39,28/Apr/12 09:11,4.1.0,,4.1.0,,,bookkeeper-server,,,0,,"Trace:
java.io.IOException: Unable to delete file: C:\Users\uma\AppData\Local\Temp\zookeeper5673563636069246854test\version-2\log.1
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1919)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1910)
	at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1399)
	at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1331)
	at org.apache.bookkeeper.test.ZooKeeperUtil.killServer(ZooKeeperUtil.java:131)
	at org.apache.bookkeeper.bookie.CookieTest.tearDownZooKeeper(CookieTest.java:59)

When I ran the tests, I found the above trace and all tests were failing.",Windows,,,,,,,,,,,,,,,,,,28/Apr/12 07:46;umamaheswararao;BOOKKEEPER-231.patch;https://issues.apache.org/jira/secure/attachment/12524969/BOOKKEEPER-231.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-28 07:35:04.559,,,no_permission,,,,,,,,,,,,,237317,,,Sat Apr 28 12:40:49 UTC 2012,,,,,,0|i0ax9b:,61661,,,,,,,,"28/Apr/12 04:55;umamaheswararao;After the analysis, reason is same. ZKUtil is using the below ctor.
{code}
 public ZooKeeperServer(File snapDir, File logDir, int tickTime)
            throws IOException {
        this( new FileTxnSnapLog(snapDir, logDir),
                tickTime, new BasicDataTreeBuilder());
    }
{code}

but shutdown is not taking care of closing this FileTxnSnapLog. 

{code}
public void shutdown() {
        LOG.info(""shutting down"");

        // new RuntimeException(""Calling shutdown"").printStackTrace();
        this.running = false;
        // Since sessionTracker and syncThreads poll we just have to
        // set running to false and they will detect it during the poll
        // interval.
        if (sessionTracker != null) {
            sessionTracker.shutdown();
        }
        if (firstProcessor != null) {
            firstProcessor.shutdown();
        }
        if (zkDb != null) {
            zkDb.clear();
        }

        unregisterJMX();
    }
{code}

So, as a work around in ZKUtil#killServer can close the FileTxnSnapLog. So, that when it is deleting the tmp dirs, there will not be any problem. Otherwise, depending on OS, we may not be able to delete the tmp dirs if that tmp dirs in-use by process.","28/Apr/12 04:57;umamaheswararao;Can some one please add the environment field for JIRA?
Actually my dev environment is in windows, so i faced this problems.","28/Apr/12 07:35;fpj;The field is there, it only shows up if you add something.","28/Apr/12 07:48;umamaheswararao;Yep, I have seen it now :-). For some reason, i did not notice it.

Thanks a lot for updating it.

I have updated the patch. With this patch, all CookieTest tests passed.",28/Apr/12 08:29;hustlmsp;thanks Uma for troubleshooting. the patch looks good to me. +1,28/Apr/12 09:11;hustlmsp;committed as r1331720. thanks Uma.,"28/Apr/12 09:27;hudson;Integrated in bookkeeper-trunk #480 (See [https://builds.apache.org/job/bookkeeper-trunk/480/])
    BOOKKEEPER-231: ZKUtil.killServer not closing the FileTxnSnapLog from ZK. (Uma Maheswara Rao G via sijie) (Revision 1331720)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
","28/Apr/12 12:40;umamaheswararao;Thanks a lot, Sijie for the review!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deleted entry log files would be garbage collected again and again.,BOOKKEEPER-229,12552804,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,26/Apr/12 07:22,22/Oct/12 14:50,14/Mar/19 02:39,08/May/12 07:36,4.1.0,,4.1.0,,,bookkeeper-server,,,0,,"after BOOKKEEPER-188 is applied, extractMetaFromEntryLogs is moved from EntryLogger to GarbageCollectorThread with some changed.

Before BOOKKEEPER-188 is applied,  we just add the entryLogMeta to entryLogMetaMap only when we could extract the entry log file. If a log file is garbage collected, its entryLogMeta would not be put in the map.

{code}
-    protected Map<Long, EntryLogMetadata> extractMetaFromEntryLogs(Map<Long, EntryLogMetadata> entryLogMetaMap) throws IOException {
-        // Extract it for every entry log except for the current one.
-        // Entry Log ID's are just a long value that starts at 0 and increments
-        // by 1 when the log fills up and we roll to a new one.
-        long curLogId = logId;
-        for (long entryLogId = 0; entryLogId < curLogId; entryLogId++) {
-            // Comb the current entry log file if it has not already been extracted.
-            if (entryLogMetaMap.containsKey(entryLogId)) {
-                continue;
-            }
-            LOG.info(""Extracting entry log meta from entryLogId: "" + entryLogId);
-            EntryLogMetadata entryLogMeta = new EntryLogMetadata(entryLogId);
-            ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);
-            // Read through the entry log file and extract the entry log meta
-            try {
-                scanEntryLog(entryLogId, scanner);
-                LOG.info(""Retrieved entry log meta data entryLogId: "" + entryLogId + "", meta: "" + entryLogMeta);
-                entryLogMetaMap.put(entryLogId, entryLogMeta);
-            } catch(IOException e) {
-              LOG.warn(""Premature exception when processing "" + entryLogId +
-                       ""recovery will take care of the problem"", e);
-            }
-
-        }
-        return entryLogMetaMap;
-    }
{code}

But after BOOKKEEPER-188 is applied,  an empty entryLogMeta would be put into entryLogMetaMap for those deleted entry log files. So GarbageCollectorThread would gc those deleted entry log files again. Then there is lots of such kind of error messages, these are noise error message but doesn't affect the logic.

{code}
+    protected Map<Long, EntryLogMetadata> extractMetaFromEntryLogs(Map<Long, EntryLogMetadata> entryLogMetaMap)
+            throws IOException {
+        // Extract it for every entry log except for the current one.
+        // Entry Log ID's are just a long value that starts at 0 and increments
+        // by 1 when the log fills up and we roll to a new one.
+        long curLogId = entryLogger.logId;
+        for (long entryLogId = 0; entryLogId < curLogId; entryLogId++) {
+            // Comb the current entry log file if it has not already been extracted.
+            if (entryLogMetaMap.containsKey(entryLogId)) {
+                continue;
+            }
+            LOG.info(""Extracting entry log meta from entryLogId: "" + entryLogId);
+
+            // Read through the entry log file and extract the entry log meta
+            entryLogMetaMap.put(entryLogId,
+                                extractMetaFromEntryLog(entryLogger, entryLogId));
+        }
+        return entryLogMetaMap;
+    }
+
+    static EntryLogMetadata extractMetaFromEntryLog(EntryLogger entryLogger, long entryLogId)
+            throws IOException {
+        EntryLogMetadata entryLogMeta = new EntryLogMetadata(entryLogId);
+        ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);
+        try {
+            // Read through the entry log file and extract the entry log meta
+            entryLogger.scanEntryLog(entryLogId, scanner);
+            LOG.info(""Retrieved entry log meta data entryLogId: ""
+                     + entryLogId + "", meta: "" + entryLogMeta);
+        } catch(IOException e) {
+            LOG.warn(""Premature exception when processing "" + entryLogId +
+                     ""recovery will take care of the problem"", e);
+        }
+
+        return entryLogMeta;
+    }
{code}",,,,,,,,,,,,,,,,,,,26/Apr/12 08:22;hustlmsp;BK-229.diff;https://issues.apache.org/jira/secure/attachment/12524408/BK-229.diff,26/Apr/12 09:42;hustlmsp;BK-229.diff_v2;https://issues.apache.org/jira/secure/attachment/12524417/BK-229.diff_v2,07/May/12 13:24;hustlmsp;BK-229.diff_v3;https://issues.apache.org/jira/secure/attachment/12525843/BK-229.diff_v3,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-05-04 15:48:38.359,,,no_permission,,,,,,,,,,,,,236870,,,Tue May 08 08:24:26 UTC 2012,,,,,,0|i0axl3:,61714,,,,,,,,26/Apr/12 08:22;hustlmsp;attach a patch to fix this noise error messages.,26/Apr/12 09:42;hustlmsp;attach a new patch adding an assertion in EntryLogTest based on previous patch.,"04/May/12 15:48;fpj;The patch looks good to me, but the test change does not fail when I only apply the test change, ignoring the change to GarbageCollectorThread. Cancelling the patch until we figure it out.","07/May/12 05:48;hustlmsp;the test change is not related to code change. because the patch changed extractMetaFromEntryLog to throw IOException, so EntryLogTest can't get EntryLogMeta. I just changed the method used in EntryLogTest not to break the test.","07/May/12 07:44;fpj;Got it, thanks. One small issue, I think that extractMetaFromEntryLogs does not need to throw an IOException any longer. If you remove it, I believe there is only one compilation error to fix.",07/May/12 08:10;hustlmsp;OK thanks for pointing out. will update it ASAP.,07/May/12 13:24;hustlmsp;attach a new patch addressing Flavio's comments.,"08/May/12 07:36;fpj;+1, thanks sijie.",08/May/12 07:36;fpj;Committed revision 1335367.,"08/May/12 08:24;hudson;Integrated in bookkeeper-trunk #493 (See [https://builds.apache.org/job/bookkeeper-trunk/493/])
    BOOKKEEPER-229: Deleted entry log files would be garbage collected again and again. (sijie via fpj) (Revision 1335367)

     Result = ABORTED
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in hedwig client when enable DEBUG,BOOKKEEPER-217,12551014,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,16/Apr/12 03:32,22/Oct/12 14:50,14/Mar/19 02:39,24/Apr/12 17:42,4.1.0,,4.1.0,,,hedwig-client,,,0,,subscription options may be null. NPE may be thrown in debug message.,,,,,,,,,,,,,,,,,,,24/Apr/12 16:39;hustlmsp;BK-217.diff;https://issues.apache.org/jira/secure/attachment/12524005/BK-217.diff,16/Apr/12 04:40;hustlmsp;BK-217.diff;https://issues.apache.org/jira/secure/attachment/12522736/BK-217.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-24 15:20:49.65,,,no_permission,,,,,,,,,,,,,235878,,,Tue Apr 24 17:55:06 UTC 2012,,,,,,0|i0axc7:,61674,,,,,,,,16/Apr/12 04:40;hustlmsp;attach a patch fix NPE in debug message.,"24/Apr/12 15:20;ikelly;Sijie, I think you uploaded the wrong patch for this one. This patch is to limit the number of messages in a ledger.",24/Apr/12 16:39;hustlmsp;sorry for making this mistake. attach the right diff file.,24/Apr/12 17:42;ikelly;Committed as r1329886. Thanks Sijie.,"24/Apr/12 17:55;hudson;Integrated in bookkeeper-trunk #475 (See [https://builds.apache.org/job/bookkeeper-trunk/475/])
    BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank) (Revision 1329886)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie doesn't exit with right exit code,BOOKKEEPER-216,12550794,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,hustlmsp,hustlmsp,hustlmsp,13/Apr/12 08:22,22/Oct/12 14:50,14/Mar/19 02:39,16/Apr/12 14:12,4.1.0,,4.1.0,,,,,,0,,"there is typo in Bookie#shutdown. so it doesn't quit with right exit code when encountering exceptions.
{code}
    synchronized int shutdown(int exitCode) {
        try {
            if (running) { // avoid shutdown twice
                // the exitCode only set when first shutdown usually due to exception found
                this.exitCode = exitCode;
                // mark bookie as in shutting down progress
                shuttingdown = true;
                // shut down gc thread, which depends on zookeeper client
                // also compaction will write entries again to entry log file
                gcThread.shutdown();
                // Shutdown the ZK client
                if(zk != null) zk.close();
                this.interrupt();
                this.join();
                syncThread.shutdown();

                // Shutdown the EntryLogger which has the GarbageCollector Thread running
                entryLogger.shutdown();
                // close Ledger Manager
                ledgerManager.close();
                // setting running to false here, so watch thread in bookie server know it only after bookie shut down
                running = false;
            }    
        } catch (InterruptedException ie) {
            LOG.error(""Interrupted during shutting down bookie : "", ie); 
        }    
        return exitCode;
    }
{code}",,,,,,,,,,,,,,,,,,,13/Apr/12 08:25;hustlmsp;BK-216.diff;https://issues.apache.org/jira/secure/attachment/12522543/BK-216.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-16 14:09:23.007,,,no_permission,,,,,,,,,,,,,235658,,,Mon Apr 16 14:27:39 UTC 2012,,,,,,0|i0axnj:,61725,,,,,,,,13/Apr/12 08:25;hustlmsp;attach a patch to fix this issue. should return this.exitCode instead of exitCode.,16/Apr/12 14:09;ikelly;lgtm +1 ,"16/Apr/12 14:12;ikelly;Committed as r1326624, thanks Sijie.","16/Apr/12 14:27;hudson;Integrated in bookkeeper-trunk #461 (See [https://builds.apache.org/job/bookkeeper-trunk/461/])
    BOOKKEEPER-216: Bookie doesn't exit with right exit code (sijie via ivank) (Revision 1326624)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock occurs under high load,BOOKKEEPER-215,12550470,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,hustlmsp,i0exception,i0exception,11/Apr/12 05:16,22/Oct/12 14:50,14/Mar/19 02:39,09/May/12 07:45,4.1.0,,4.1.0,,,hedwig-server,,,0,,"LedgerHandle uses a Semaphore(opCounterSem) with a default value of 5000 permits to implement throttling for outstanding requests. This is causing a deadlock under high load. What I've observed is the following - There are a fixed number of threads created by OrderedSafeExecutor(mainWorkerPool in BookKeeper) and this is used to execute operations by PerChannelBookieClient. Under high load, the bookies are not able to satisfy requests at the rate at which they are being generated. This exhausts all permits in the Semaphore and any further operations block on lh.opCounterSem.acquire(). In this scenario, if the connection to the bookies is shut down, channelDisconnected in PerChannelBookieClient tries to error out all outstanding entries. The errorOutReadKey and errorOutAddKey functions enqueue these operations in the same mainWorkerPool, all threads in which are blocked on acquire. So, handleBookieFailure is never executed and the server stops responding. 

Blocking operations in a fixed size thread pool doesn't sound quite right. Temporarily, I fixed this by having another ExecutorService for every PerChannelBookieClient and queuing the operations from the errorOut* functions in it, but this is just a quick fix. I feel that the server shouldn't rely on LedgerHandle to throttle connections, but do this itself. Any other ideas on how to fix this? I'd be happy to contribute a patch. ",,,,,,,,,,,,,,,BOOKKEEPER-240,BOOKKEEPER-239,,,24/Apr/12 14:54;hustlmsp;BK-215-check-deadlock.patch;https://issues.apache.org/jira/secure/attachment/12523990/BK-215-check-deadlock.patch,12/Apr/12 17:16;hustlmsp;BK-215.patch;https://issues.apache.org/jira/secure/attachment/12522451/BK-215.patch,20/Apr/12 09:36;hustlmsp;BK-215.patch_v2;https://issues.apache.org/jira/secure/attachment/12523471/BK-215.patch_v2,24/Apr/12 16:37;hustlmsp;BK-215.patch_v3;https://issues.apache.org/jira/secure/attachment/12524004/BK-215.patch_v3,08/May/12 09:20;hustlmsp;BK-215.patch_v4;https://issues.apache.org/jira/secure/attachment/12525973/BK-215.patch_v4,24/Apr/12 14:54;hustlmsp;DeadlockCheckOrderedSafeExecutor.java;https://issues.apache.org/jira/secure/attachment/12523989/DeadlockCheckOrderedSafeExecutor.java,11/Apr/12 20:59;i0exception;hedwig_ts.log;https://issues.apache.org/jira/secure/attachment/12522316/hedwig_ts.log,,,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2012-04-11 06:50:45.861,,,no_permission,,,,,,,,,,,,,235334,,,Wed May 09 07:56:40 UTC 2012,,,,,,0|i0axgn:,61694,,,,,,,,"11/Apr/12 06:50;fpj;Hi Aniruddha, The thread blocking due to the exhaustion of permits is the application thread, not a thread from the bk client pool. Consequently, I don't see how the deadlock situation you describe can happen. Is there anything I'm missing?","11/Apr/12 08:29;ikelly;opCounterSem is only acquired in PendingReadOp#initiate and LedgerHandle#doAsyncAddEntry, which are only run in the context of the application thread, so this deadlock cannot happen as described. 

@Aniruddha, a dump of all thread stacks would be very helpful in diagnosing the problem here.","11/Apr/12 21:13;i0exception;Hi Ivan and Flavio, 

I've attached the thread dump of the hedwig-server when it is deadlocked. As you can see, both pool-1-thread-1 and pool-52-thread-1 are blocked on the semaphore. pool-52-thread-1 is one of the threads in the mainWorkerPool. It seems that PendingReadOp is executed in pool-1-thread-1 always, except for just before I get the error, when it's executed in pool-52-thread-1. Now, when the channel is disconnected, the errorOut* functions enqueue all their SafeRunnables in this same thread (using OrderedSafeExecutor.submitOrdered with ledgerId as the key) - pool-52-thread-1. Even when PerChannelBookieClient closes the channel after errorOutOutstandingEntries, the callbacks that would release the semaphore are never called because all of them are being queued in the same thread. So, now you have a PendingReadOp waiting to acquire a lock at the front of the queue while operations that will release the lock are queued behind it. 

In short, there is a PendingReadOp being queued in pool-52-thread-1 which shouldn't be there. The only operations in that thread should be PendingAddOps. 

edit : From the logfile it seems that PendingReadOps are being queued in pool-52-thread-1 quite a few times. In all previous instances, it could acquire the Semaphore. ","12/Apr/12 03:05;hustlmsp;thanks Aniruddha providing thread stacks. 

yes, pool-52-thread-1 introduced the deadlock. in Hedwig bookkeeper persistence manager, it call next asyncReadEntries in the callback of previous asyncReadEntries. 

One possible fix is in hedwig part, we need to submit a Runnable to execute asyncReadEntries in other thread, not in the bookkeeper threads pool to avoid such deadlock. This solution could fix the hedwig issue.

beside that, we can't assume that other users would not do such action to call readEntries in a callback. so a fix in bookkeeper itself may be needed.","12/Apr/12 06:29;fpj;I don't think it is good practice to have calls to bookkeeper itself from a callback. The callback will be executed by a bookkeeper thread, so you really want to give control back to the application shortly.

My preference is to leave the bookkeeper client as is.","12/Apr/12 17:16;hustlmsp;adding a patch, 1) includes a test case which reproduce the hedwig issue as thread stacks provided in this jira, 2) includes a test case to test ledger recovery with limited permits, which also introduce same deadlock issue as hedwig, 3) add a possible fix to avoid call bookkeeper operation in bookkeeper callback.

this patch is based on BOOKKEEPER-173 's patch, because I need to limit the number of worker threads in the test case to 1, so I could let the ledger operations are executed in same thread to reproduce deadlock issue.","12/Apr/12 22:18;i0exception;Thanks. The deadlock does not happen after I apply the patch. However, it might be worth looking into moving the lock acquisition out of PendingReadOp and putting it into the application. Is there any reason why the acquire is inside the initiate method and not in an application thread? ","12/Apr/12 23:13;fpj;This is the code for asyncReadEntries:

{noformat}
public void asyncReadEntries(long firstEntry, long lastEntry,
                                 ReadCallback cb, Object ctx) {
        // Little sanity check
        if (firstEntry < 0 || lastEntry > lastAddConfirmed
                || firstEntry > lastEntry) {
            cb.readComplete(BKException.Code.ReadException, this, null, ctx);
            return;
        }

        try {
            new PendingReadOp(this, firstEntry, lastEntry, cb, ctx).initiate();
        } catch (InterruptedException e) {
            cb.readComplete(BKException.Code.InterruptedException, this, null, ctx);
        }
    }
{noformat}

initiate() is called form the application thread, right?","12/Apr/12 23:53;i0exception;Sorry, should have been clearer. Would it be better if we have a doAsyncReadEntry function inside LedgerHandle, call this from asyncReadEntries and let it acquire the lock and queue the PendingReadOp into a threadpool? This is similar to what is being done for add operations. ","13/Apr/12 00:26;hustlmsp;I don't think we need to do that. from an application they call asyncReadEntries and asyncAddEntry, it has done the same thing to acquire lock. (one thing we might need to add is more documentation to let user know they acquire the lock when calling these two methods) 

Beside that, add operation is quite different from read operation.

for add operation, bookkeeper needs to guarantee order so it has a PendingAddOps queue to queue all the add operations, so the acquire is better to execute in LedgerHandle before putting it in the pending queue.

for read operation, we don't need to guarantee the order between different asycReadEntries calls, so we don't has a queue for read ops. beside that, read is actually a range read so we have to acquire the lock per entry for a asyncReadEntries operation, so PendingReadOp is a better place to manage such logic for a read op. 

does it make sense for you?

BTW, just curious, why the issue is marked as fixed?","16/Apr/12 02:10;hustlmsp;the patch is not passed reviewing, so just reopen it.","18/Apr/12 14:31;fpj;Hi Sijie, Here are some comments on the patch:

* One clarification. I understand the call to lh.bk.callbackWorker.submitOrdered in readComplete, but not the one in doRecoveryRead. Why do we need to give it to a worker thread in this case?
* It is not performance critical in this case, but it sounds like a good ideal in general to have LOG.debug statements wrapped with isDebugEnabled() (LedgerRecoveryOp:86). You may have simply missed this one.
* Is this change gratuitous or really necessary:
{noformat}
    protected Bookie newBookie(ServerConfiguration conf)
        throws IOException, KeeperException, InterruptedException, BookieException {
        return new Bookie(conf);
    }

{noformat} 

* testRecoveryDeadlockWithLimitedPermits() has no assertion or fail clause. What is it testing?
* I'm not entirely sure why we need this method:

{noformat}
    /**
     * Add configuration object.
     *
     * @param conf configuration object
     */
    public void addConf(Configuration otherConf) throws ConfigurationException {
        conf.addConfiguration(otherConf);
    }
{noformat}
Why can't we set the bk client configuration in the constructor?

* Typo: ""... so a scan request need to scan over two ledger"" -> ""... so a scan request need to scan over two ledgers""
* In TestDeadlock, if I understand the test correctly, consumeQueue.take() is supposed to hang due to the bug of this jira. Consequently, we have to wait until junit times out the test? I was wondering if there is a way of avoiding the time out.
* Suggestion for rephrasing comment:

{noformat}
// it obtains the permit and wait for a response,
// but the response is delayed and readEntries is called
// in the readComplete callback to read entries of the 
// same ledger. since there is no permit, it blocks.
{noformat}
",18/Apr/12 14:31;fpj;Cancelling patch until comments are addressed.,"18/Apr/12 14:59;hustlmsp;thanks Flavio for reviewing.

> but not the one in doRecoveryRead. Why do we need to give it to a worker thread in this case?

doRecoveryRead() will be executed in #addComplete, which is also in the callback of bookkeeper. so it should do same as what it did in #readComplete.

> It is not performance critical in this case, but it sounds like a good ideal in general to have LOG.debug statements wrapped with isDebugEnabled() (LedgerRecoveryOp:86). You may have simply missed this one.

if we use '+' to concatenate string it would introduce the performance issue. but we don't concatenate the string in debug message, so it would not introduce the performance issue. besides that, I remembered that because we use slf4j, Ivan suggested to use such kind of pattern to log debug message.

> Is this change gratuitous or really necessary:

actually I used this method in hedwig BookKeeperTestBase class, which extends existed Bookie class to simulate response delay for #readEntry. It helps testing the deadlock in bookkeeper persistence manager.

> testRecoveryDeadlockWithLimitedPermits() has no assertion or fail clause. What is it testing?

if we don't apply the patch, the test case will hang due to deadlock. so I am not sure how to add assertion and fail clause. what is your opinion?

> I'm not entirely sure why we need this method:

the method is used in TestDeadLock#getServerConfiguration. it used to load a bookkeeper client configuration object. so the hub server could use bookkeeper client settings we provided.

> In TestDeadlock, if I understand the test correctly, consumeQueue.take() is supposed to hang due to the bug of this jira. Consequently, we have to wait until junit times out the test? I was wondering if there is a way of avoiding the time out.

yes. we have to wait until timeout if we don't apply this patch. I have no perfect solution to test such hang due to deadlock.

> typos & comments

yeah. thanks for fixing them. I would update them to new patch.

",20/Apr/12 09:36;hustlmsp;attach a new patch to improve comments according to Flavio's suggestions.,"21/Apr/12 13:49;fpj;One idea occurred to me and I wanted to run it by you guys. I don't think it is critical that we throttle for recovery, so I was wondering if it makes sense that the calls to read entries from LedgerRecoveryOp do not try to acquire permits. This way we avoid the problem altogether. ","22/Apr/12 07:04;hustlmsp;I think it is OK to not try to acquire permits in LedgerRecoveryOp, it could resolve the issue in LedgerRecoveryOp. but it could not resolve the issue in BookKeeper persistence manager in hedwig. so I am not sure I understand what you said that ""we avoid the problem altogether"".
","22/Apr/12 08:37;fpj;Your patch seems to fix the hedwig issue without changing the flow of regular asyncReadEntries. It only changes LedgerRecoveryOp on the bookkeeper side, right? One option I see is to keep your changes to hedwig and not have recovery acquiring permits.

One clarification, if you don't mind, Sijie. It is not clear from your patch how your modifications to the persistence manager prevents callbacks from calling asyncReadEntries. Could you give me some more insight, please?  ","23/Apr/12 05:13;hustlmsp;sure, the code change in bookkeeper persistence manager is to put the asyncReadEntries in opQueue instead of calling asyncReadEntries directly in the callback.

{code}
                         }
                     }
 
-                    startReadingFrom(imlr.startSeqIdIncluded + entry.getEntryId() + 1);
-
+                    // continue scanning messages
+                    scanMessages(request, imlr.startSeqIdIncluded + entry.getEntryId() + 1);
                 }
             }, request.ctx);
         }

{code}

the detail code change is as above. it call scanMessages, which put a range scan op again in topic op queue, instead of startReadingFrom. so the asyncReadEntries would be executed only the range op is executed, which is in hedwig thread not in bookkeeper thread.","24/Apr/12 08:39;hustlmsp;Flavio and I had a discussion about this jira, 

1) for LedgerRecoveryOp, it would better to acquire permit per recovery op. we don't need to acquire permits for the read/add ops executed in a recovery op. so the issue could be resolved. to do the change, we need a flag in PendingAddOp/PendingReadOp to control whether acquire/release permits when read/add. we leverage PendingAddOp#enableRecoveryAdd() as the flag.

2) in Bookkeeper SafeOrderExecutor, I proposed to introduce deadlock checking mechanism in runtime. when a callback is submitted to SafeOrderExecutor, we would check whether the thread is blocked on the semaphore or not. If the thread is blocked, we would fail the callback directly. Doing such deadlock checking would affect performance, so it would better to provide a flag to control whether enabling it or not. The benefit of introducing such mechanism, we could avoid using timeout in the test case.

I would like to come out a draft patch about the above proposal, then we could discuss more.","24/Apr/12 14:54;hustlmsp;Attach a prototype of deadlock check executor for discussion.

the idea for deadlock check executor is used Semaphore#getQueuedThreads() to check whether  a thread is blocked when summiting a task to it.

If a deadlock is found, a RejectedExecutionException is thrown. so the thread should catch such exception to handle it (such as fail the response directly).

Unfortunately, I found that submitOrdered is used at least 5 places. It would make the source code unmaintainable.

so I am not sure it worth doing such deadlock checking. Flavio, how is your opinion?


another thing that I were thinking is the way using Semaphore to throttle the best way. I thought throttle is to not overwhelm a bookie server, so why not throttle in PerChannelBookieClient which talks with a bookie server directly.

","24/Apr/12 16:37;hustlmsp;BTW, attach a v3 patch that address 1) in previous comment, not acquire/release permits in ledger recovery op. 

the deadlock checking idea introduced is trying to remove timeout mechanism in testing deadlock. but from my draft patch, seems that is not easy to adapt a deadlock checking mechanism. so how about creating a separated for it?","05/May/12 12:56;fpj;It really feels like we have three issues here: the hedwig deadlock, the changes to recovery, deadlock detection. In this jira, it sounds like we only need to solve the first. The other two we should address in different jiras.

On the changes to recovery to not acquire/release permits, I don't really like the conditional acquire/permit, and I was thinking if we could remove it by just acquiring and releasing in different places. For adds, we could acquire the permits before doAsyncAddEntry, while for the release part, we may need a different callback in PendingAddOp. What do you think, Sijie? ","07/May/12 06:32;hustlmsp;I agreed to separated it into three jiras and we fix the first one.

> For adds, we could acquire the permits before doAsyncAddEntry, while for the release part, we may need a different callback in PendingAddOp.

for Add it is OK, but how about readEntries? since releasing permits in PendingReadOp is not in single place, if you want to fix it in a different callback, I think you have to wrap the callback passed by user and do release in the wrapper. 

What I am thinking to resolve recovery deadlock issue is to revisit the throttle mechanism used in bookkeeper.","08/May/12 09:20;hustlmsp;Attach a new patch just resolve the deadlock issue in Hedwig bookkeeper persistence manager.

for the ledger recovery issue, it would be discussion in BOOKKEEPER-239. And the deadlock checking mechanism would be resolved in BOOKKEEPER-240","09/May/12 07:43;ikelly;lgtm +1,

committing",09/May/12 07:45;ikelly;Committed as r1335958,"09/May/12 07:56;hudson;Integrated in bookkeeper-trunk #496 (See [https://builds.apache.org/job/bookkeeper-trunk/496/])
    BOOKKEEPER-215: Deadlock occurs under high load (sijie via ivank) (Revision 1335958)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PerChannelBookieClient calls the wrong errorOut function when encountering an exception,BOOKKEEPER-213,12549920,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,i0exception,i0exception,i0exception,06/Apr/12 18:58,22/Oct/12 14:50,14/Mar/19 02:39,19/Apr/12 01:03,,,4.1.0,,,,,,0,,"In PerChannelBookieClient.java, addEntry calls errorOutReadKey on encountering an exception instead of errorOutAddKey. ",,,,,,,,,,,,,,,,,,,18/Apr/12 21:16;i0exception;BK-213.patch;https://issues.apache.org/jira/secure/attachment/12523257/BK-213.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-06 20:22:47.288,,,no_permission,,,,,,,,,,,,,234911,,,Thu Apr 19 01:46:46 UTC 2012,,,,,,0|i0axfr:,61690,,,,,,,,"06/Apr/12 20:22;fpj;Hi Aniruddha, Great that you spotted it, thanks for reporting. Do you want to produce a patch? We also need to fix the log message right before. ",06/Apr/12 23:29;i0exception;I will submit a patch soon.,"17/Apr/12 21:51;fpj;Aniruddha, I was wondering if you're still planning on submitting a patch for this issue.","17/Apr/12 22:54;i0exception;Sorry, forgot about this issue. I just submitted the patch. ","18/Apr/12 02:15;hustlmsp;thanks, Aniruddha. the patch is good. just one place, it would be better to change the line of error message above your change :)",18/Apr/12 21:16;i0exception;Made that change. ,19/Apr/12 00:38;hustlmsp;the patch is good to me. +1.,"19/Apr/12 01:03;hustlmsp;committed as r1327761. Thanks, Aniruddha.","19/Apr/12 01:08;hustlmsp;one thing that I can't find Aniruddha in the assignee list, so I have no idea how to change the assignee to him. :(

Is there anyone tell me how to do that?","19/Apr/12 01:46;hudson;Integrated in bookkeeper-trunk #466 (See [https://builds.apache.org/job/bookkeeper-trunk/466/])
    BOOKKEEPER-213: PerChannelBookieClient calls the wrong errorOut function when encountering an exception (Aniruddha via sijie) (Revision 1327761)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie stops responding when creating and deleting many ledgers,BOOKKEEPER-212,12549872,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,fpj,fpj,06/Apr/12 12:40,22/Oct/12 14:50,14/Mar/19 02:39,09/Apr/12 09:44,,,4.1.0,,,,,,0,,"I have written down a short app to try to reproduce one problematic case reported on the user list. The app does the following:

# It creates initially a number of ledgers, say 2000;
# Once it reaches 2000, for each new ledger it creates, it deletes the one at the head of the list;
# Before closing the ledger, it adds 5 entries of 1k, just to generate some traffic for any given ledger.

What I tried to achieve is to have thousands of active ledgers and delete new ledgers as I create new ones. I'll post a link to my test code later. 

At some point, one bookie stops responding. The bookie seems to be up, but it is not responsive. Looking at the logs, this is what I see:

{noformat}
2012-04-06 12:22:05,765 - INFO  [SyncThread:LedgerCacheImpl@682] - Ledger 1726 is evicted from file info cache.
2012-04-06 12:22:05,769 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1727 is evicted from file info cache.
2012-04-06 12:22:05,772 - INFO  [SyncThread:LedgerCacheImpl@682] - Ledger 1728 is evicted from file info cache.
2012-04-06 12:22:05,780 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1729 is evicted from file info cache.
2012-04-06 12:22:05,787 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1730 is evicted from file info cache.
2012-04-06 12:22:05,794 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1731 is evicted from file info cache.
2012-04-06 12:22:05,801 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1732 is evicted from file info cache.
2012-04-06 12:22:05,807 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1733 is evicted from file info cache.
2012-04-06 12:22:05,822 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1734 is evicted from file info cache.
2012-04-06 12:22:05,828 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1735 is evicted from file info cache.
2012-04-06 12:22:05,842 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1736 is evicted from file info cache.
2012-04-06 12:22:05,851 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1737 is evicted from file info cache.
2012-04-06 12:22:05,856 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1738 is evicted from file info cache.
2012-04-06 12:22:05,864 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1739 is evicted from file info cache.
2012-04-06 12:22:05,874 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1740 is evicted from file info cache.
2012-04-06 12:22:05,885 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1741 is evicted from file info cache.
2012-04-06 12:22:05,894 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1742 is evicted from file info cache.
2012-04-06 12:22:05,902 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1743 is evicted from file info cache.
2012-04-06 12:22:05,987 - INFO  [GarbageCollectorThread:LedgerCacheImpl@682] - Ledger 1744 is evicted from file info cache.
2012-04-06 12:22:05,987 - ERROR [GarbageCollectorThread:GarbageCollectorThread$1@244] - Exception when deleting the ledger index file on the Bookie: 
java.io.IOException: /home/fpj/bk/current/1/b/10b.idx not found
        at org.apache.bookkeeper.bookie.FileInfo.checkOpen(FileInfo.java:118)
        at org.apache.bookkeeper.bookie.FileInfo.close(FileInfo.java:194) 
        at org.apache.bookkeeper.bookie.LedgerCacheImpl.deleteLedger(LedgerCacheImpl.java:619) 
        at org.apache.bookkeeper.bookie.GarbageCollectorThread$1.gc(GarbageCollectorThread.java:242)
        at org.apache.bookkeeper.meta.AbstractZkLedgerManager.doGc(AbstractZkLedgerManager.java:274)
        at org.apache.bookkeeper.meta.FlatLedgerManager.garbageCollectLedgers(FlatLedgerManager.java:168)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.doGcLedgers(GarbageCollectorThread.java:237)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.run(GarbageCollectorThread.java:206) 
2012-04-06 12:22:05,987 - INFO  [GarbageCollectorThread:LedgerCacheImpl@682] - Ledger 1745 is evicted from file info cache.
{noformat}

There are lots of exceptions like that, but otherwise I don't see anything that could make the bookie unresponsive. I'll upload the logs as well.   ",,,,,,,,,,,,,,,,,,,09/Apr/12 08:27;hustlmsp;BK-212.diff;https://issues.apache.org/jira/secure/attachment/12521920/BK-212.diff,06/Apr/12 13:04;fpj;bookkeeper-server.log;https://issues.apache.org/jira/secure/attachment/12521672/bookkeeper-server.log,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-09 05:32:28.634,,,no_permission,,,,,,,,,,,,,234863,,,Mon Apr 09 09:53:21 UTC 2012,,,,,,0|i0axrz:,61745,,,,,,,,06/Apr/12 12:51;fpj;Here is the git repository for the test code: https://github.com/fpj/bk-ledger-load,"06/Apr/12 13:04;fpj;I'm attaching the log file of the bookie that became unresponsive. In this run, the app stopped with these error messages:

{noformat}
2012-04-06 12:22:07,565 - ERROR - [pool-3-thread-1:PerChannelBookieClient@550] - Add for ledger: 2382, entry: 0 failed on bookie: /IP2:3181 with code: 101
2012-04-06 12:22:07,566 - WARN  - [pool-3-thread-1:PendingAddOp@146] - Write did not succeed: 2382, 0
2012-04-06 12:22:07,572 - ERROR - [pool-3-thread-1:LedgerHandle@659] - Could not get additional bookie to remake ensemble, closing ledger: 2382
org.apache.bookkeeper.client.BKException$BKNotEnoughBookiesException
	at org.apache.bookkeeper.client.BKException.create(BKException.java:58)
	at org.apache.bookkeeper.client.LedgerHandle.addEntry(LedgerHandle.java:410)
	at org.apache.bookkeeper.client.LedgerHandle.addEntry(LedgerHandle.java:387)
	at org.apache.bookkeeper.loader.LedgerLoader.main(LedgerLoader.java:38)
2012-04-06 12:22:12,588 - INFO  - [Hashed wheel timer #1:PerChannelBookieClient@447] - Disconnected from bookie: /IP2:3181
2012-04-06 12:22:12,600 - INFO  - [Hashed wheel timer #2:PerChannelBookieClient@447] - Disconnected from bookie: /IP1:3181
2012-04-06 12:22:12,627 - INFO  - [Hashed wheel timer #3:PerChannelBookieClient@447] - Disconnected from bookie: /IP3:3181
{noformat}","07/Apr/12 16:02;fpj;I investigated a little further and it looks like the culprit of this exception:

{noformat}

2012-04-07 15:25:47,325 - ERROR [GarbageCollectorThread:FileInfo@76] - MasterKey is null
2012-04-07 15:25:47,328 - INFO  [NIOServerFactory-3181:LedgerCacheImpl@682] - Ledger 1131 is evicted from file info cache. 2012-04-07 15:25:47,329 - ERROR [GarbageCollectorThread:GarbageCollectorThread$1@244] - Exception when deleting the ledger index file on the Bookie: 
java.io.IOException: *path*/current/0/3/3.idx not found
        at org.apache.bookkeeper.bookie.FileInfo.checkOpen(FileInfo.java:120)
        at org.apache.bookkeeper.bookie.FileInfo.close(FileInfo.java:196)
        at org.apache.bookkeeper.bookie.LedgerCacheImpl.deleteLedger(LedgerCacheImpl.java:619)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread$1.gc(GarbageCollectorThread.java:242)
        at org.apache.bookkeeper.meta.AbstractZkLedgerManager.doGc(AbstractZkLedgerManager.java:274)
        at org.apache.bookkeeper.meta.FlatLedgerManager.garbageCollectLedgers(FlatLedgerManager.java:168)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.doGcLedgers(GarbageCollectorThread.java:237)
        at org.apache.bookkeeper.bookie.GarbageCollectorThread.run(GarbageCollectorThread.java:206)
{noformat}

is this call in LedgerCacheImpl.deleteLedger(): 

{noformat}
fi = getFileInfo(ledgerId, null);
{noformat}

Because the masterKey is set to null, when the call path reaches checkOpen, it ends up throwing an IOException:

{noformat}
         if (masterKey == null && !exists) {
            throw new IOException(lf + "" not found"");
        }
{noformat}
  
There are two things I don't understand here:
# Why do we set the masterKey to null in the call to getFileInfo in deleteLedger?
# Why do we check if masterKey is null in checkOpen and throw an exception if it is (along with the file not existing)? 
","09/Apr/12 05:32;hustlmsp;@Flavio

checkOpen is introduced in BOOKKEEPER-137. The case that masterKey is null and the index file is not existed, which means we don't have the master key to create index file, so we have to throw an exception. 

the exception you found is a weird case, may be introduced by BOOKKEEPER-190, where we forced the index creation when a ledger is evicted from ledger cache.

from the exception stack, it seems that the exception is thrown when deleting ledger 3. but ledger 3 was evicted from ledger cache before, and its ledger index file should be forced to create when the eviction happened. it is so strange why the index file didn't exist. ","09/Apr/12 08:15;hustlmsp;did some investigation on this issue, I found that it is caused due to ledger cache deletes index file first then closes it.

{code}
        FileInfo fi = null;
        try {
            fi = getFileInfo(ledgerId, null);
            fi.delete();
            fi.close(false);
        } finally {
            // should release use count
            // otherwise the file channel would not be closed.
            if (null != fi) {
                fi.release();
            }   
        }
{code}

in common case, the above code is OK. since we use *useCount*, we can ensure file existed if the useCount is not zero. but if the file info is evicted from ledger cache before, when ledger cache wants to delete such file info, it tries to get file info again but doesn't open the file channel, so fi#delete() will delete index file immediately. when we tried to close it again, it would fail due to FileNotFound exception.

fail to removed deleted ledger file info will exhaust openFileLimit, so following creating ledgers would fail because we don't have buffer to open new ledger file info.

the fix is quite simply, just need to change the order of fi#delete and fi#close. I would attach a test case and a patch later.","09/Apr/12 08:27;hustlmsp;attach a patch to fix this issue, including a test case.","09/Apr/12 09:44;fpj;+1, it looks good to me. I have also run a version with this patch against my simple test case and I don't see the issue any more. Good job, Sijie!

Committed revision 1311177.","09/Apr/12 09:53;hudson;Integrated in bookkeeper-trunk #449 (See [https://builds.apache.org/job/bookkeeper-trunk/449/])
    BOOKKEEPER-212: Bookie stops responding when creating and deleting many ledgers (sijie via fpj) (Revision 1311177)

     Result = UNSTABLE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie fails to to start,BOOKKEEPER-211,12549863,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,fpj,fpj,06/Apr/12 11:44,22/Oct/12 14:50,14/Mar/19 02:39,10/Apr/12 05:44,,,4.1.0,,,,,,0,,"A number of times when I start a bookie with a clean state, it fails to start and I get the following exceptions:

{noformat}
2012-04-06 10:54:42,201 - ERROR [main:Bookie@348] - Error accessing cookie on disks
java.io.FileNotFoundException: *path*/current/VERSION (No such file or directory)
        at java.io.FileOutputStream.open(Native Method)
        at java.io.FileOutputStream.<init>(FileOutputStream.java:179)
        at java.io.FileOutputStream.<init>(FileOutputStream.java:131)
        at org.apache.bookkeeper.bookie.Cookie.writeToDirectory(Cookie.java:114)
        at org.apache.bookkeeper.bookie.Bookie.checkEnvironment(Bookie.java:337)
        at org.apache.bookkeeper.bookie.Bookie.<init>(Bookie.java:401)
        at org.apache.bookkeeper.proto.BookieServer.<init>(BookieServer.java:75)
        at org.apache.bookkeeper.proto.BookieServer.main(BookieServer.java:294)
2012-04-06 10:54:42,203 - ERROR [main:BookieServer@308] - Exception running bookie server :
org.apache.bookkeeper.bookie.BookieException$InvalidCookieException: java.io.FileNotFoundException: *path*/current/VERSION (No such file or directory)
        at org.apache.bookkeeper.bookie.Bookie.checkEnvironment(Bookie.java:349)
        at org.apache.bookkeeper.bookie.Bookie.<init>(Bookie.java:401)
        at org.apache.bookkeeper.proto.BookieServer.<init>(BookieServer.java:75)
        at org.apache.bookkeeper.proto.BookieServer.main(BookieServer.java:294)
Caused by: java.io.FileNotFoundException: *path*/current/VERSION (No such file or directory)
        at java.io.FileOutputStream.open(Native Method)
        at java.io.FileOutputStream.<init>(FileOutputStream.java:179)
        at java.io.FileOutputStream.<init>(FileOutputStream.java:131)
        at org.apache.bookkeeper.bookie.Cookie.writeToDirectory(Cookie.java:114)
        at org.apache.bookkeeper.bookie.Bookie.checkEnvironment(Bookie.java:337)

{noformat}",,,,,,,,,,,,,,,,,,,09/Apr/12 09:25;hustlmsp;BK-211.diff;https://issues.apache.org/jira/secure/attachment/12521932/BK-211.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-09 08:45:02.58,,,no_permission,,,,,,,,,,,,,234854,,,Tue Apr 10 03:37:54 UTC 2012,,,,,,0|i0axf3:,61687,,,,,,,,"09/Apr/12 08:45;hustlmsp;oh, this issue seems that we don't create *current* directory on ledger directories.

{code}
            try {
                checkDirectoryStructure(journalDirectory);

                Cookie journalCookie = Cookie.readFromDirectory(journalDirectory);
                journalCookie.verify(masterCookie);
                for (File dir : ledgerDirectories) {
                    checkDirectoryStructure(dir);
                    Cookie c = Cookie.readFromDirectory(dir);
                    c.verify(masterCookie);
                }    
            } catch (FileNotFoundException fnf) {
                if (!newEnv){
                    LOG.error(""Cookie exists in zookeeper, but not in all local directories"", fnf);
                    throw new BookieException.InvalidCookieException();
                }    

                masterCookie.writeToDirectory(journalDirectory);
                for (File dir : ledgerDirectories) {
                    masterCookie.writeToDirectory(dir);
                }
                masterCookie.writeToZooKeeper(zk, conf);
            }
{code}

in a clean state, the FileNotFoundException is thrown when checking cookie file in journal directory. so there is no chance to checkDirectory on ledger directories, the *current* directory would not be created.

the fix would be simple, would attach a patch later.","09/Apr/12 09:25;hustlmsp;attach a patch to fix the issue, including a test case.","09/Apr/12 22:12;fpj;+1, it looks good to me, Sijie, thanks! ",10/Apr/12 03:22;hustlmsp;committed as r1311564. thanks Flavio for reviewing.,"10/Apr/12 03:37;hudson;Integrated in bookkeeper-trunk #451 (See [https://builds.apache.org/job/bookkeeper-trunk/451/])
    BOOKKEEPER-211: Bookie fails to to start (sijie) (Revision 1311564)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in ServerConfiguration for READAHEAD_ENABLED,BOOKKEEPER-209,12549812,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,i0exception,i0exception,05/Apr/12 22:49,22/Oct/12 14:50,14/Mar/19 02:39,15/May/12 10:29,4.1.0,,4.1.0,,,hedwig-server,,,0,,"The variable READAHEAD_ENABLED in org.apache.hedwig.server.common.ServerConfiguration has a value ""readhead_enabled"" when it should be ""readahead_enabled"". There is an ""a"" missing. ",,,,,,,,,,,,,,,,,,,14/May/12 15:08;ikelly;BOOKKEEPER-209.diff;https://issues.apache.org/jira/secure/attachment/12526767/BOOKKEEPER-209.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-14 15:42:35.51,,,no_permission,,,,,,,,,,,,,234803,,,Tue May 15 10:29:06 UTC 2012,,,,,,0|i0axnz:,61727,,,,,,,,14/May/12 15:42;hustlmsp;lgtm +1 thanks Ivan.,15/May/12 10:29;ikelly;Committed as r1338630. Thanks Sijie.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BenchBookie doesn't run correctly,BOOKKEEPER-207,12549158,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Apr/12 13:31,22/Oct/12 14:50,14/Mar/19 02:39,03/Apr/12 16:03,,,4.1.0,,,,,,0,,"Bench bookie tests latency of addEntry to a single bookie. Currently it simply writes to a specified ledger id. If this ledger id doesn't exist in zookeeper, the ledger is GC'd from the bookie and errors occur in the bench.",,,,,,,,,,,,,,,,,,,02/Apr/12 13:33;ikelly;BOOKKEEPER-207.diff;https://issues.apache.org/jira/secure/attachment/12520973/BOOKKEEPER-207.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-02 13:50:07.871,,,no_permission,,,,,,,,,,,,,234149,,,Tue Apr 03 16:52:46 UTC 2012,,,,,,0|i0axcv:,61677,,,,,,,,02/Apr/12 13:33;ikelly;Fix makes the benchmark create a ledger to write to. This prevents GC from interfering.,"02/Apr/12 13:50;fpj;It looks mostly good, I just have one small question. In trunk, we refer to ledger+1 and ledger+2, which seems to imply that we are writing to different ledgers. Your patch makes it uniform. Is it the right behavior?","02/Apr/12 13:59;ivank@yahoo-inc.com;I generate a new ledger for each of the runs, so the value is different in each. 



","02/Apr/12 14:05;fpj;True, thanks for the clarification, +1.",03/Apr/12 16:03;fpj;Committed revision 1309007.,"03/Apr/12 16:52;hudson;Integrated in bookkeeper-trunk #444 (See [https://builds.apache.org/job/bookkeeper-trunk/444/])
    BOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj) (Revision 1309007)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
replaying entries of deleted ledgers would exhaust ledger cache.,BOOKKEEPER-198,12548798,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,30/Mar/12 07:57,22/Oct/12 14:50,14/Mar/19 02:39,31/Mar/12 08:31,,,4.1.0,,,,,,0,,"we found that replaying entries of deleted ledgers would exhaust ledger cache. then ledger cache would no clean page to grab, it would throw following exception.

{code}
java.util.NoSuchElementException
        at java.util.LinkedList.getFirst(LinkedList.java:109)
        at org.apache.bookkeeper.bookie.LedgerCacheImpl.grabCleanPage(LedgerCacheImpl.java:454)
        at org.apache.bookkeeper.bookie.LedgerCacheImpl.putEntryOffset(LedgerCacheImpl.java:165)
{code}

this issue is because bookie grabs a clean page but fail to updating page due to NoLedgerException, but bookie doesn't return this clean page back to ledger cache. so the ledger cache is exhausted, when new ledger want to grab a clean page, it failed to find available page.",,,,,,,,,,,,,,,,,,,30/Mar/12 08:10;hustlmsp;BK-198.patch;https://issues.apache.org/jira/secure/attachment/12520579/BK-198.patch,30/Mar/12 09:16;hustlmsp;BK-198.patch_v2;https://issues.apache.org/jira/secure/attachment/12520582/BK-198.patch_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-03-30 08:51:38.249,,,no_permission,,,,,,,,,,,,,233895,,,Sat Mar 31 07:57:27 UTC 2012,,,,,,0|i0axhr:,61699,,,,,,,,30/Mar/12 08:10;hustlmsp;quite simple a patch. it just returns the failed to be used clean page back to ledger cache.,"30/Mar/12 08:51;fpj;It is mostly good, Sijie. I just think that pageCount has to be in a synchronized block when decremented here:

{noformat}
catch (IOException ie) {
+            // if we grab a clean page, but failed to update the page
+            // we are exhuasting the count of ledger entry pages.
+            // since this page will be never used, so we need to decrement
+            // page count of ledger cache.
+            lep.releasePage();
+            --pageCount;
+            throw ie; 
{noformat}

no?","30/Mar/12 09:16;hustlmsp;ah, ur right. It should do synchronization when decrementing page count.

attach a new patch to address this issue.","30/Mar/12 09:34;fpj;Thanks, Sijie. The patch looks good, but I'm now confused by a different thing. I couldn't find code to decrement pageCount in trunk. Shouldn't we decrement pageCount as we flush pages? Consequently, there should a line somewhere decrementing it, no? 

I'm mentioning this because it might be worth having a test, not necessarily for this jira, that confirms that our logic increments and decrements correctly. In particular, we should test that it grows and eventually becomes zero again, never going negative.","30/Mar/12 09:53;hustlmsp;actually, we don't need to decrement the page count in successful case. when we need to grab a clean page, we find the available page from existing pages in ledger cache, if there exists a clean page in pages pool (HashMap<Long, HashMap<Long,LedgerEntryPage>>), we remove it from pages pool, make it as a zero page and available for new request to use. so the ledger page is just changing the ownership, we don't need to decrement pageCount.

only the case we need to decrement pageCount is after removing it from pages pool, but new request failed to use it. it is orphan page, we need to decrement it.

from this side, the pageCount would not go negative, since the max number of decrements would not be more than number pages existed in pages pool, and the number of pages in pages pool is pageLimit.","30/Mar/12 10:50;fpj;bq. only the case we need to decrement pageCount is after removing it from pages pool, but new request failed to use it. it is orphan page, we need to decrement it.

Why don't we return the page to the pool in the case of a failure? If the pool size is supposed to be constant, then why do we have a page count?","30/Mar/12 11:00;hustlmsp;> If the pool size is supposed to be constant, then why do we have a page count?

actually, ledger cache doesn't preallocate the pages pool. it did that incrementally. so we need a page count.
when the size of pages reaches pageLimit, it becomes be constant.

newly requests to grab a new page just acts as borrowing existing clean pages in the pages pool.

> Why don't we return the page to the pool in the case of a failure?

actually the pool is a mapping between ledger id and pages. the failure happened after we borrowed an existing clean page from other ledgers and before we put it again to table. the original info in that page has been cleaned after we grabbed it, so we don't know where to return it back. this page becomes orphan, the only way is to drop it and decrement the pageCount, so a new page would be allocated to replace the orphan in future requests.
{quote}
168         LedgerEntryPage lep = grabCleanPage(ledger, pageEntry);
169         try {
170             // should update page before we put it into table
171             // otherwise we would put an empty page in it
172             updatePage(lep);
173             synchronized(this) {
174                 putIntoTable(pages, lep);
175             }
{quote}","30/Mar/12 11:11;fpj;+1, thanks for the clarifications, Sijie.",31/Mar/12 07:32;hustlmsp;committed as r1307732. thanks Flavio for reviewing.,"31/Mar/12 07:57;hudson;Integrated in bookkeeper-trunk #437 (See [https://builds.apache.org/job/bookkeeper-trunk/437/])
    BOOKKEEPER-198: replaying entries of deleted ledgers would exhaust ledger cache. (sijie) (Revision 1307732)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HedwigConsole uses the same file to load bookkeeper client config and hub server config,BOOKKEEPER-197,12548766,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,hustlmsp,i0exception,i0exception,30/Mar/12 00:38,22/Oct/12 14:50,14/Mar/19 02:39,16/Apr/12 02:57,4.1.0,,4.1.0,,,hedwig-server,,,0,,"In the current implementation of HedwigConsole.java, The same server-cfg file (default = hedwig-server/conf/hw_server.conf) is used to load both hubServerConf and bkClientConf. This seems incorrect because both have different option names. ",,,,,,,,,,,,,,,,,,,31/Mar/12 06:37;hustlmsp;BK-197.diff;https://issues.apache.org/jira/secure/attachment/12520770/BK-197.diff,31/Mar/12 06:51;hustlmsp;BK-197.diff_v2;https://issues.apache.org/jira/secure/attachment/12520774/BK-197.diff_v2,09/Apr/12 09:42;hustlmsp;BK-197.diff_v3;https://issues.apache.org/jira/secure/attachment/12521933/BK-197.diff_v3,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-03-30 02:28:39.217,,,no_permission,,,,,,,,,,,,,233863,,,Mon Apr 16 02:57:27 UTC 2012,,,,,,0|i0axp3:,61732,,,,,,,,"30/Mar/12 02:28;hustlmsp;hmm, actually hub server is a bookkeeper client. when hub server runs, it would load server cfg file as ServerConfiguration for hub server, and as ClientConfiguration for bookkeeper client. since hedwig console is an admin tool for a hub server, it works as what hub server does. 

I think the problem here is hub server uses a flat key/value configuration file, it lacks the ability to group properties into sections (said hub server settings in hub server section, bookkeeper client settings to bookeeper section) to avoid option name confliction. (although option name confliction would not happen now, since bookkeeper uses camel word for option name, while hedwig doesn't)","30/Mar/12 18:49;i0exception;What would be a good resolution for this? Currently, by just merging the two files into one, I am able to get the desired behavior. But it feels more like a hack than a solution. My use-case is connecting to a hedwig server where zookeeper is running on a remote machine. The current setup doesn't pick up the zookeeper location. 

Another thing that could be done is have a separate configuration file (HEDWIG_CONSOLE_CONF perhaps) altogether and pass that as an option in the shell script bin/hedwig. ","31/Mar/12 05:54;hustlmsp;> My use-case is connecting to a hedwig server where zookeeper is running on a remote machine. The current setup doesn't pick up the zookeeper location.

I think the bookkeeper settings are missed in default hedwig server configuration file. so the bookkeeper client could not pick up the right zookeeper location. I would try to add them in the default hedwig server configuration file.

> Another thing that could be done is have a separate configuration file (HEDWIG_CONSOLE_CONF perhaps) altogether and pass that as an option in the shell script bin/hedwig.

it is a good point. how about changing HedwigConsole to use HEDWIG_CONSOLE_CONF variable (by default it points to hedwig server conf)? doing it in this way, ur are flexible to override the variable to point either file.

I will try to add a patch about how changing it. You can take a look at it, whether it meets your requirements :)
","31/Mar/12 06:37;hustlmsp;Hedwig console uses a HedwigAdmin and a HedwigClient. HedwigAdmin is used to manage metadata, so it would read hub server configuration to known settings such as zkServers, ledgerManagerType used by bookkeeper. HedwigClient is used to play with hedwig system, such as pub/sub/consume.

so it would read 2 configuration files, one is '-server-cfg' which is used by HedwigAdmin, the other one is '-client-cfg' which is used by HedwigClient.

By default, the console is shipped with a hub server package. so it would use hub server configuration for metadata manager, no client configuration need since it just use default client configuration to connect to local hub server.

I attach a patch to expose these two files by two environment variables, one is 'HEDWIG_CONSOLE_SERVER_CONF', the other is 'HEDWIG_CONSOLE_CLIENT_CONF'. If user tries to install the console in an admin node (not a hub server node), he/she could override these two variables to reference a customized configuration file.","31/Mar/12 06:51;hustlmsp;{quote}
> My use-case is connecting to a hedwig server where zookeeper is running on a remote machine. The current setup doesn't pick up the zookeeper location.

I think the bookkeeper settings are missed in default hedwig server configuration file. so the bookkeeper client could not pick up the right zookeeper location. I would try to add them in the default hedwig server configuration file.
{quote}

my previous comment is not right. did some comparison between hedwig console and PubSubServer. I found that PubSubServer uses zookeeper server setting in hub server, while HedwigAdmin uses zookeeper server setting from bookkeeper. so you couldn't locate zookeeper when zookeeper is remote and you didn't put bookkeeper server setting in.

I add a change in HedwigAdmin to let it use setting from hub server configuration, which matches what hub server does.","03/Apr/12 11:17;fpj;This patch looks mostly ok to me, except that the log statement following the new ZooKeeper(...) call seems to be using the wrong values. I also don't have it clear if this assignment still makes sense ""this.bkClientConf = bkConf;"". I haven't checked trunk, so the comment about the assignment could be wrong. ","09/Apr/12 09:42;hustlmsp;yeah, the log statement is not correct. fix it in the new patch.

the assignment of bkClientConf is OK, since the zookeeper instance has been instantiated using hub server configuration.","11/Apr/12 12:47;fpj;+1, looks good to me.","12/Apr/12 03:21;hustlmsp;thanks Flavio for reviewing.

Aniruddha, could you have a look at this patch to see whether is it OK for you?",13/Apr/12 22:04;i0exception;Looks good. Thanks Sijie. ,16/Apr/12 02:11;hustlmsp;thanks Aniruddha's feedback. will commit it.,16/Apr/12 02:57;hustlmsp;committed as r1326464. thanks Flavio and Aniruddha,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HierarchicalLedgerManager doesn't consider idgen as a ""specialNode""",BOOKKEEPER-195,12548542,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,28/Mar/12 20:10,22/Oct/12 14:50,14/Mar/19 02:39,28/Mar/12 22:02,,,4.1.0,,,,,,0,,"From IRC: 

21:58 <johnnagro> 2012-03-28 05:15:19,669 - ERROR [main-EventThread:AbstractZkLedgerManager$2@105] - Error polling ZK for the available ledger nodes: 
21:58 <johnnagro> org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /ledgers/idgen/ID-0000106522
21:58 <johnnagro>         at org.apache.zookeeper.KeeperException.create(KeeperException.java:111)
21:58 <johnnagro>         at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
21:58 <johnnagro>         at org.apache.bookkeeper.meta.AbstractZkLedgerManager$2.processResult(AbstractZkLedgerManager.java:105)
21:58 <johnnagro>         at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:594)
21:58 <johnnagro>         at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
21:58 <johnnagro> i will look for the gc one
21:59 <ivank> thats quite strange
22:00 <ivank> this occurred in the server?
22:02 <johnnagro> ah they may be related, this one has some GC stuff
22:02 <johnnagro> 012-03-24 09:17:34,419 - WARN  [GarbageCollectorThread:HierarchicalLedgerManager@376] - Exception during garbage collecting ledgers for idgen of /ledgers
22:02 <johnnagro> 2012-03-24 09:56:31,080 - ERROR [main-EventThread:AbstractZkLedgerManager$2@105] - Error polling ZK for the available ledger nodes: 
22:02 <johnnagro> org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /ledgers/idgen/ID-0000037474
22:02 <johnnagro>         at org.apache.zookeeper.KeeperException.create(KeeperException.java:111)
22:02 <johnnagro>         at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
22:02 <johnnagro>         at org.apache.bookkeeper.meta.AbstractZkLedgerManager$2.processResult(AbstractZkLedgerManager.java:105)
22:02 <johnnagro>         at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:594)
22:02 <johnnagro>         at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
22:02 <johnnagro> this happened on the server, yes.


Looking into the code, it seems that HierarchicalLedgerManager doesn't consider idgen to be special. This is a race, between the idgen node being created and the znodes underneath being listed. The znodes underneath should never be listed.",,,,,,,,,,,,,,,,,,,28/Mar/12 20:54;ikelly;BOOKKEEPER-195.diff;https://issues.apache.org/jira/secure/attachment/12520319/BOOKKEEPER-195.diff,28/Mar/12 20:50;ikelly;BOOKKEEPER-195.diff;https://issues.apache.org/jira/secure/attachment/12520318/BOOKKEEPER-195.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-03-28 21:28:28.063,,,no_permission,,,,,,,,,,,,,233639,,,Wed Mar 28 22:33:30 UTC 2012,,,,,,0|i0axhj:,61698,,,,,,,,28/Mar/12 20:51;ikelly;Fix is simple,"28/Mar/12 21:28;fpj;+1, looks good to me.",28/Mar/12 22:02;ikelly;Committed as r1306616. Thanks for reviewing Flavio.,"28/Mar/12 22:33;hudson;Integrated in bookkeeper-trunk #430 (See [https://builds.apache.org/job/bookkeeper-trunk/430/])
    BOOKKEEPER-195: HierarchicalLedgerManager doesn't consider idgen as a ""specialNode"" (ivank) (Revision 1306616)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Get correct latency for addEntry operations for JMX.,BOOKKEEPER-194,12548463,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,hustlmsp,hustlmsp,hustlmsp,28/Mar/12 10:04,22/Oct/12 14:50,14/Mar/19 02:39,29/Mar/12 13:42,,,4.1.0,,,bookkeeper-server,,,0,,"currently we don't get the right latency value of add operations. we just compute the latency that entry added to entry log files, but the response sent back to clients only when entries are flushed to journals.
the right place to compute addEntry latency would be in the WriteCallback.",,,,,,,,,,,,,,,,,,,28/Mar/12 10:16;hustlmsp;BK-194.diff;https://issues.apache.org/jira/secure/attachment/12520257/BK-194.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-29 13:42:59.51,,,no_permission,,,,,,,,,,,,,233560,,,Thu Mar 29 14:48:58 UTC 2012,,,,,,0|i0axk7:,61710,,,,,,,,28/Mar/12 10:16;hustlmsp;attach a patch to compute addEntry latency in writecallback. ,29/Mar/12 13:42;ikelly;Committed as r1306857. Thanks Sijie,"29/Mar/12 14:48;hudson;Integrated in bookkeeper-trunk #433 (See [https://builds.apache.org/job/bookkeeper-trunk/433/])
    BOOKKEEPER-194: Get correct latency for addEntry operations for JMX. (sijie via ivank) (Revision 1306857)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledger is garbage collected by mistake.,BOOKKEEPER-193,12548056,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,26/Mar/12 02:52,22/Oct/12 14:50,14/Mar/19 02:39,31/Mar/12 07:37,,,4.1.0,,,bookkeeper-server,,,0,,"currently, we encountered such case: ledger is garbage collected by mistake, and following requests would fail due to NoLedgerException.

{code}
2012-03-23 19:10:47,403 - INFO  [GarbageCollectorThread:GarbageCollectorThread@234] - Garbage collecting deleted ledger index files.

2012-03-23 19:10:48,702 - INFO  [GarbageCollectorThread:LedgerCache@544] - Deleting ledgerId: 89408
2012-03-23 19:10:48,703 - INFO  [GarbageCollectorThread:LedgerCache@577] - Deleted ledger : 89408

2012-03-23 19:11:10,013 - ERROR [NIOServerFactory-3181:BookieServer@361] - Error writing 1@89408
org.apache.bookkeeper.bookie.Bookie$NoLedgerException: Ledger 89408 not found
        at org.apache.bookkeeper.bookie.LedgerCache.getFileInfo(LedgerCache.java:228)
        at org.apache.bookkeeper.bookie.LedgerCache.updatePage(LedgerCache.java:260)
        at org.apache.bookkeeper.bookie.LedgerCache.putEntryOffset(LedgerCache.java:158)
        at org.apache.bookkeeper.bookie.LedgerDescriptor.addEntry(LedgerDescriptor.java:135)
        at org.apache.bookkeeper.bookie.Bookie.addEntryInternal(Bookie.java:1059)
        at org.apache.bookkeeper.bookie.Bookie.addEntry(Bookie.java:1099)
        at org.apache.bookkeeper.proto.BookieServer.processPacket(BookieServer.java:357)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.readRequest(NIOServerFactory.java:315)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.doIO(NIOServerFactory.java:213)
        at org.apache.bookkeeper.proto.NIOServerFactory.run(NIOServerFactory.java:124)
{code}

",,,,,,,,,,,,,,,,,,,26/Mar/12 14:47;hustlmsp;BK-193.patch;https://issues.apache.org/jira/secure/attachment/12519959/BK-193.patch,29/Mar/12 05:27;hustlmsp;BK-193.patch_v2;https://issues.apache.org/jira/secure/attachment/12520368/BK-193.patch_v2,29/Mar/12 10:45;ikelly;BOOKKEEPER-193.diff;https://issues.apache.org/jira/secure/attachment/12520409/BOOKKEEPER-193.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-03-26 14:46:26.773,,,no_permission,,,,,,,,,,,,,233153,,,Sat Mar 31 07:28:01 UTC 2012,,,,,,0|i0axjb:,61706,,,,,,,,"26/Mar/12 03:09;hustlmsp;this issue is a bug of the logic of garbage collection. currently the garbage collection is executed, by first fetching a list of all ledgers, fetching the active ledgers from bookie, then garbage collecting those active ledgers not in zookeeper list. there is a time period between fetching list from zookeeper and fetching list from bookie, if a ledger created in this time period, it would be garbage collected by mistake.

for FlatLedgerManager, this issue could be fixed easily. Since the ledgers are created in sequence, we can get the max ledger id when fetching list of all ledgers from zookeeper, during garbage collection, those ledgers are larger than max ledger id would not be garbage collected until next garbage collection is executed.

for HierarchicalLedgerManager, it is different, because the id generation and the ledger creation is two different operations running in asynchronous. one possible solution is fetching a copy of active ledgers from bookie first (the requests came in after fetching should not put in the list of active ledgers used for gc), then fetching the list of all ledgers from zookeeper, which can ensure we get the right list of all ledgers from zookeeper.","26/Mar/12 14:46;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4481/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

create a snapshot of bookie active ledgers, and then fetch the list of zookeeper metadata, then it is safe to do garbage collection.


This addresses bug BOOKKEEPER-193.
    https://issues.apache.org/jira/browse/BOOKKEEPER-193


Diffs
-----

  bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java 9d9bf22 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java 100cdad 

Diff: https://reviews.apache.org/r/4481/diff


Testing
-------


Thanks,

Sijie

","26/Mar/12 14:47;hustlmsp;attach a patch first creating a snapshot of bookie server active ledgers, then fetching list of zookeeper metadata, and do garbage collection finally.

this patch includes a test case reproduce the issue described in this jira.","28/Mar/12 08:12;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4481/#review6481
-----------------------------------------------------------


It looks very good, Sijie. I have just a few points.


bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java
<https://reviews.apache.org/r/4481/#comment14130>

    I really like the idea of using a snapshot map!!



bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java
<https://reviews.apache.org/r/4481/#comment14131>

    Possibly not a big deal, but I wonder if it is really necessary to use this lock. In the way I read the code, I think it would work without it, but perhaps I'm missing something important.



bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java
<https://reviews.apache.org/r/4481/#comment14132>

    Can we perhaps use another latch here instead of time? Relying on time doesn't always work and in many cases it will induce unnecessary waiting time.


- fpj


On 2012-03-26 14:45:30, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/4481/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-03-26 14:45:30)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  create a snapshot of bookie active ledgers, and then fetch the list of zookeeper metadata, then it is safe to do garbage collection.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-193.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-193
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java 9d9bf22 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java 100cdad 
bq.  
bq.  Diff: https://reviews.apache.org/r/4481/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","28/Mar/12 09:23;jiraposter@reviews.apache.org;

bq.  On 2012-03-28 08:10:21, fpj wrote:
bq.  > bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java, line 124
bq.  > <https://reviews.apache.org/r/4481/diff/1/?file=95778#file95778line124>
bq.  >
bq.  >     Can we perhaps use another latch here instead of time? Relying on time doesn't always work and in many cases it will induce unnecessary waiting time.

agreed. it could use another latch. will fix it in new patch.


bq.  On 2012-03-28 08:10:21, fpj wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java, line 37
bq.  > <https://reviews.apache.org/r/4481/diff/1/?file=95777#file95777line37>
bq.  >
bq.  >     Possibly not a big deal, but I wonder if it is really necessary to use this lock. In the way I read the code, I think it would work without it, but perhaps I'm missing something important.

the lock is used to avoid modifying two variables updates & updatesToMerge map, which is used to avoid inserting to updatesToMerge map during snapshot. 

suppose two thread, one is doing insertion, the other one is done snapshot.

1) insertion thread: get the reference of updates map, tried to call #put.
2) snapshot thread: swap updates map to updatesToMerge map.
3) snapshot thread: iterates over the updatesToMerge map to merge them to snapshot map. (it may take times)
4) insertion thread: execute put. since updates map object has been assigned to updatesToMerge, so the put actually is applied in updatesToMerge, if the insertion position is large than the current position of iteration, it is OK. otherwise, the insertion will be lost.

the readwrite lock only blocks when modifying the updates & updatesToMerge references, I think it would not be expensive.


- Sijie


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4481/#review6481
-----------------------------------------------------------


On 2012-03-26 14:45:30, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/4481/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-03-26 14:45:30)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  create a snapshot of bookie active ledgers, and then fetch the list of zookeeper metadata, then it is safe to do garbage collection.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-193.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-193
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java 9d9bf22 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java 100cdad 
bq.  
bq.  Diff: https://reviews.apache.org/r/4481/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","29/Mar/12 05:27;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4481/
-----------------------------------------------------------

(Updated 2012-03-29 05:27:14.643196)


Review request for bookkeeper.


Changes
-------

improve patch to use latch instead of time.


Summary
-------

create a snapshot of bookie active ledgers, and then fetch the list of zookeeper metadata, then it is safe to do garbage collection.


This addresses bug BOOKKEEPER-193.
    https://issues.apache.org/jira/browse/BOOKKEEPER-193


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java 100cdad 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java 169c906 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java PRE-CREATION 

Diff: https://reviews.apache.org/r/4481/diff


Testing
-------


Thanks,

Sijie

",29/Mar/12 05:27;hustlmsp;attach a new patch to use latch instead of time.,"29/Mar/12 07:51;fpj;+1, looks good to me! Since this is a blocker, I'd like to give an opportunity to others to have a look at it. If no one else says anything by the end of today, I'll commit it.","29/Mar/12 07:53;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4481/#review6511
-----------------------------------------------------------



bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
<https://reviews.apache.org/r/4481/#comment14165>

    Casting indicates that something is wrong in your abstraction. Perhaps activeLedgers.snapshot() should return a SortedMap, and doGC() should take a Map. It doesn't do anything that requires the ConcurrentMap interface.



bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
<https://reviews.apache.org/r/4481/#comment14166>

    why not just have the implementation of SnapshotMap use a ConcurrentSkipListMap?


- Ivan


On 2012-03-29 05:27:14, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/4481/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-03-29 05:27:14)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  create a snapshot of bookie active ledgers, and then fetch the list of zookeeper metadata, then it is safe to do garbage collection.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-193.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-193
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java 100cdad 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java 169c906 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/4481/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

",29/Mar/12 10:45;ikelly;Suggested changes to remove casts,"29/Mar/12 13:53;hustlmsp;Thanks, Ivan. I am OK with such changes, +1 for Ivan's patch.","30/Mar/12 09:03;fpj;I'm not sure how big of deal this is and I believe is more of a question than anything else, but an instance implementing NavigableMap is not necessarily thread safe, is it? In this patch it is because we return a ConcurrentHashMap from snapshot(), but I wonder if it compromises the abstraction here.","30/Mar/12 09:10;ikelly;
NavigableMap is the interface of the object which we return which is
ConcurrentHashMap and therefore _is_ threadsafe.


","30/Mar/12 09:16;fpj;I'm not referring to the implementation, which I agreed before that it is ok, but the abstraction instead. If someone later comes and implements SnapshotMap', then there is nothing referring to the fact that the object snapshot returns is thread safe. ","30/Mar/12 09:46;ikelly;The object returned by snapshot doesn't necessarily need to be thread
safe. It's only ever used by the gcThread. 
","30/Mar/12 09:53;fpj;Ok, I'm almost convinced. :-)

If it is only ever used by the gcThread, then the reason why we are creating a ConcurrentHashMap is just for additional safety? If we used a map that is not thread safe we would still be fine? ","30/Mar/12 10:00;ikelly;Actually, in the implementation there is one point where the snapshot
could be modified by another thread. But this is an implementation
detail. If we built the snapshot each time we called snapshot() it
wouldn't need to be concurrent.

","30/Mar/12 10:11;hustlmsp;for #snapshot(), it means returning a snapshot object for processing. currently only gcThread would call snapshot, so it is safe to define the return value as NavigableMap.

but the variable snapshot in SnapshotMap, it would be access in the contains/remove operation in SnapshotMap. Currently contains/remove seems just be accessed in GcThread, but I am not sure the operations especially contains would be accessed in other thread. so I think it would better to keep add/remove/contains as ThreadSafe.","30/Mar/12 10:27;fpj;I actually got confused with the structures. I just realized that the snapshot itself is a ConcurrentSkipListMap. 

One of my concerns in the discussion about ConcurrentHashMap is that articles like this:

http://www.informit.com/guides/content.aspx?g=java&seqNum=246

say that the performance of ConcurrentHashMaps is not great with a large number of items. updates and updatesToMerge, however, are not expected to hold a pretty large number of items, even if the bookie has a large number of active ledgers. Also, as Ivan pointed out offline, this is not on the critical path, so it is not much of a concern.

The patch is good for me, +1.","31/Mar/12 07:14;hustlmsp;committed as 1307725. thanks for Ivan's improvement, thanks Flavio for reviewing.","31/Mar/12 07:28;hudson;Integrated in bookkeeper-trunk #436 (See [https://builds.apache.org/job/bookkeeper-trunk/436/])
    BOOKKEEPER-193: Ledger is garbage collected by mistake. (sijie, ivank via sijie) (Revision 1307725)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add entries would fail when number of open ledgers reaches more than openFileLimit.,BOOKKEEPER-190,12547344,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,21/Mar/12 07:47,22/Oct/12 14:50,14/Mar/19 02:39,29/Mar/12 12:08,,,4.1.0,,,bookkeeper-server,,,0,,"
when the number of open ledgers reaches more than openFileLimit, a file info will be closed and removed from opened ledgers list. And after BOOKKEEPER-137, the ledger index file creation delayed until necessary.

suppose ledger l is removed from opened ledger list, and its index file haven't been created.
new add entries operations of other ledgers came into bookie server, a new page need to be grab for them. so bookie server may need to flush the dirty pages of ledger l(when page cache is full). and the flush would fail due to NoLedgerException (no index file found).

actually the ledger l isn't lost, it could be recovered if restarting bookie server, but the bookie server would not work well on adding entries. 

a proposal solution is that we need to force index creation when the ledger is evicted from open ledgers list.

{code}
2012-03-21 14:00:42,989 - DEBUG - [NIOServerFactory-5000:LedgerCache@235] - New ledger index file created for ledgerId: 4
2012-03-21 14:00:42,990 - INFO  - [NIOServerFactory-5000:LedgerCache@241] - Ledger 2 is evicted from file info cache.
2012-03-21 14:00:42,990 - DEBUG - [New I/O client worker #1-1:PerChannelBookieClient$2@255] - Successfully wrote request for adding entry: 0 ledger-id: 4 bookie: /10.82.129.173:5000 entry length: 70
2012-03-21 14:00:42,990 - ERROR - [NIOServerFactory-5000:BookieServer@361] - Error writing 0@4
org.apache.bookkeeper.bookie.Bookie$NoLedgerException: Ledger 2 not found
        at org.apache.bookkeeper.bookie.LedgerCache.getFileInfo(LedgerCache.java:228)
        at org.apache.bookkeeper.bookie.LedgerCache.flushLedger(LedgerCache.java:359)
        at org.apache.bookkeeper.bookie.LedgerCache.flushLedger(LedgerCache.java:292)
        at org.apache.bookkeeper.bookie.LedgerCache.grabCleanPage(LedgerCache.java:447)
        at org.apache.bookkeeper.bookie.LedgerCache.putEntryOffset(LedgerCache.java:157)
        at org.apache.bookkeeper.bookie.LedgerDescriptor.addEntry(LedgerDescriptor.java:130)
        at org.apache.bookkeeper.bookie.Bookie.addEntryInternal(Bookie.java:1059)
        at org.apache.bookkeeper.bookie.Bookie.addEntry(Bookie.java:1099)
        at org.apache.bookkeeper.proto.BookieServer.processPacket(BookieServer.java:357)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.readRequest(NIOServerFactory.java:315)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.doIO(NIOServerFactory.java:213)
        at org.apache.bookkeeper.proto.NIOServerFactory.run(NIOServerFactory.java:124)
2012-03-21 14:00:42,991 - DEBUG - [pool-3-thread-1:PerChannelBookieClient@576] - Got response for add request from bookie: /10.82.129.173:5000 for ledger: 4 entry: 0 rc: 101
2012-03-21 14:00:42,991 - ERROR - [pool-3-thread-1:PerChannelBookieClient@594] - Add for ledger: 4, entry: 0 failed on bookie: /10.82.129.173:5000 with code: 101
2012-03-21 14:00:42,991 - WARN  - [pool-3-thread-1:PendingAddOp@142] - Write did not succeed: 4, 0

{code}",,,,,,,,,,,,,,,,,,,21/Mar/12 07:52;hustlmsp;BOOKKEEPER-190.diff;https://issues.apache.org/jira/secure/attachment/12519192/BOOKKEEPER-190.diff,22/Mar/12 04:48;hustlmsp;BOOKKEEPER-190.diff_v2;https://issues.apache.org/jira/secure/attachment/12519402/BOOKKEEPER-190.diff_v2,26/Mar/12 07:57;hustlmsp;BOOKKEEPER-190.diff_v3;https://issues.apache.org/jira/secure/attachment/12519921/BOOKKEEPER-190.diff_v3,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-03-21 16:57:15.07,,,no_permission,,,,,,,,,,,,,232502,,,Thu Mar 29 14:48:57 UTC 2012,,,,,,0|i0axcf:,61675,,,,,,,,"21/Mar/12 07:52;hustlmsp;attach a patch to fix this issue.

the patch is quite simple, just force index creation when the ledger is evicted from open ledgers list. 

also it fixed the reference counting issue on FileInfo, to release useCount after use it. otherwise, the index file is not closed actually, will cause 'Too many opened files' problem.","21/Mar/12 16:57;fpj;hi sijie, it looks good, but let me propose a slightly different approach for the test. I think that it should be more focused and should be really just exercising the cache here instead of emulating a full run. We could start a single bookie, create ledgers through the bookie interface, and verify that we don't get an error when evicting the ledger. How does it sound to you? ","22/Mar/12 04:48;hustlmsp;@Flavio.

I agreed. since the test is related to cache eviction, so I moved the test case to LedgerCacheTest, and changed it as what you suggested. a new patch is attached.","22/Mar/12 08:56;fpj;+1, looks great, Sijie. Thanks for changing the test.","23/Mar/12 15:28;ikelly;I have a few small comments on the patch.

# In evictFileInfoIfNecessary() you should use {}, so that the string isn't constructed is info level is turned off. It's not an issue here really, but it's a good habit to get into.
# Why construct a Bookie at all? The LedgerCache can be used as a standalone component now, so we should test it as such. 
","23/Mar/12 15:54;hustlmsp;> 1. In evictFileInfoIfNecessary() you should use {}, so that the string isn't constructed is info level is turned off

OK. I will did the change.

> Why construct a Bookie at all? The LedgerCache can be used as a standalone component now, so we should test it as such.

yeah. seems that testLedgerEviction could use LedgerCache#putEntryOffset to test.

but I am not so clear that LedgerCacheTest#testAddEntryException tries to test what kind of case. seems that it tried to populate the ledger cache to force eviction, which is similar with testLedgerEviction. could any one explain it?","23/Mar/12 18:57;fpj;Hi Sijie, We introduced LedgerCacheTest (and LedgerCacheTest#testAddEntryException) in BOOKKEEPER-22.","26/Mar/12 07:57;hustlmsp;thanks, Flavio.

attach a new patch.

in this patch, I modified the LedgerCacheTest according to Ivan's suggestions, which make the test focus on testing ledger cache itself.

BTW, it remove/modify 'System.out' code in LedgerCache, and also fix a simple bug LedgerCache#grabCleanPage (we don't remove a ledger from cleanLedger list if we found that there is no clean page in it. then clean ledger list would not be empty, so no flush will be trigger). ",29/Mar/12 12:08;ikelly;Committed as r1306839. Thanks Sijie.,"29/Mar/12 14:48;hudson;Integrated in bookkeeper-trunk #433 (See [https://builds.apache.org/job/bookkeeper-trunk/433/])
    BOOKKEEPER-190: Add entries would fail when number of open ledgers reaches more than openFileLimit. (sijie via ivank) (Revision 1306839)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractZkLedgerManager doesn't disregard cookies,BOOKKEEPER-189,12547214,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,20/Mar/12 15:19,22/Oct/12 14:50,14/Mar/19 02:39,21/Mar/12 05:41,,,4.1.0,,,,,,0,,"Since BOOKKEEPER-163, the zk namespace has had a cookie znode. The AbstractZkLedgerManager should disregard this when listing ledgers.",,,,,,,,,,,,,,,,,,,20/Mar/12 15:21;ikelly;BOOKKEEPER-189.diff;https://issues.apache.org/jira/secure/attachment/12519085/BOOKKEEPER-189.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-21 05:37:04.32,,,no_permission,,,,,,,,,,,,,232372,,,Wed Mar 21 05:56:14 UTC 2012,,,,,,0|i0ax8v:,61659,,,,,,,,20/Mar/12 15:21;ikelly;Fix is simple. Also added some logging for warning cases.,"21/Mar/12 05:37;hustlmsp;+1 for the patch, will commit it.",21/Mar/12 05:41;hustlmsp;committed as r1303291. thanks Ivan.,"21/Mar/12 05:56;hudson;Integrated in bookkeeper-trunk #421 (See [https://builds.apache.org/job/bookkeeper-trunk/421/])
    BOOKKEEPER-189: AbstractZkLedgerManager doesn't disregard cookies (ivank via sijie) (Revision 1303291)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Garbage collection code is in the wrong place,BOOKKEEPER-188,12547212,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,20/Mar/12 15:10,22/Oct/12 14:50,14/Mar/19 02:39,21/Mar/12 05:14,,,4.1.0,,,,,,0,,"There's a lot of garbage collection code in the wrong place in EntryLogger. extractMetaFromEntryLogs, and EntryLogMetadata are only every used in the GC Thread. So they should move there.",,,,,,,,,,,,,,,,,,,20/Mar/12 15:13;ikelly;BOOKKEEPER-188.diff;https://issues.apache.org/jira/secure/attachment/12519084/BOOKKEEPER-188.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-20 15:17:35.905,,,no_permission,,,,,,,,,,,,,232370,,,Wed Mar 21 05:46:19 UTC 2012,,,,,,0|i0axi7:,61701,,,,,,,,20/Mar/12 15:13;ikelly;This is a very straight forward refactor. The one functional change is that extractMetaFromEntryLogs now call extractMetaFromEntryLog rather than having duplicate logic in each.,"20/Mar/12 15:17;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4414/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

This is a very straight forward refactor. The one functional change is that extractMetaFromEntryLogs now call extractMetaFromEntryLog rather than having duplicate logic in each.


This addresses bug BOOKKEEPER-188.
    https://issues.apache.org/jira/browse/BOOKKEEPER-188


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 8da372e 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java 23f02bc 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java 96df89a 

Diff: https://reviews.apache.org/r/4414/diff


Testing
-------


Thanks,

Ivan

","21/Mar/12 05:10;hustlmsp;+1 for the patch, will commit it.",21/Mar/12 05:14;hustlmsp;committed as r1303286. thanks Ivan.,"21/Mar/12 05:46;hudson;Integrated in bookkeeper-trunk #420 (See [https://builds.apache.org/job/bookkeeper-trunk/420/])
    BOOKKEEPER-188: Garbage collection code is in the wrong place (ivank via sijie) (Revision 1303286)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper throttling - permits is not released when read has failed from all replicas,BOOKKEEPER-186,12546760,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,16/Mar/12 10:49,22/Oct/12 14:50,14/Mar/19 02:39,19/Mar/12 14:46,4.0.0,,4.1.0,,,bookkeeper-client,,,0,,"Permit is not releasing in the case when there is no quorum available and the readEntries operation failed from all replicas.

Following is the condition where it checks the failure in quorum and invoking ReadCallback:
{noformat}
void sendRead(ArrayList<InetSocketAddress> ensemble, LedgerEntry entry, int lastErrorCode) {
   if (entry.nextReplicaIndexToReadFrom >= lh.metadata.quorumSize) {
      // we are done, the read has failed from all replicas, just fail the
      // read
      submitCallback(lastErrorCode);
      return;
   }
{noformat}",,,,,,,,,,,,,,,,,,,19/Mar/12 10:04;rakeshr;BOOKKEEPER-186_trunk-1.patch;https://issues.apache.org/jira/secure/attachment/12518880/BOOKKEEPER-186_trunk-1.patch,18/Mar/12 05:01;rakeshr;BOOKKEEPER-186_trunk.patch;https://issues.apache.org/jira/secure/attachment/12518821/BOOKKEEPER-186_trunk.patch,16/Mar/12 14:52;rakeshr;BOOKKEEPER-186_trunk.patch;https://issues.apache.org/jira/secure/attachment/12518677/BOOKKEEPER-186_trunk.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-03-17 16:32:34.564,,,no_permission,,,,,,,,,,,,,231918,,,Tue Mar 20 07:20:08 UTC 2012,,,,,,0|i0axlr:,61717,,,,,,,,"16/Mar/12 10:52;rakeshr;+Suggestion:+

Since permits is acquired for each entries, we couldn't keep the release logic inside submitCallback. IMO, it would be fine to place 'lh.opCounterSem.release();' before submitCallback(lastErrorCode); 
",16/Mar/12 14:54;rakeshr;I have attached the trunk patch with few test cases. Please be so kind to review and commit the fix.,"17/Mar/12 16:32;hustlmsp;well spotted. the patch is also good.

just some comments:
1) it would be better to add apache license at the header of newly added file.
2) why use 'Test'? is null OK?
{code}
lh.asyncReadEntries(0, throttle-1, bookieReadCallback, ""Test""); 
{code}","18/Mar/12 05:02;rakeshr;Resubmitting the patch with apache license. Null is ok, I just given a name for testing.",18/Mar/12 07:16;rakeshr;Oh ok!...I will upload the patch tmrw with apache license at the header of newly added file.,"19/Mar/12 10:04;rakeshr;@Sijie.
Uploaded latest patch with the comments fixed.",19/Mar/12 11:46;ikelly;lgtm +1,19/Mar/12 13:43;hustlmsp;+1. will commit it later.,"19/Mar/12 14:03;hustlmsp;committed as r1302458. thanks, Rakesh.","19/Mar/12 14:46;hudson;Integrated in bookkeeper-trunk #418 (See [https://builds.apache.org/job/bookkeeper-trunk/418/])
    BOOKKEEPER-186: Bookkeeper throttling - permits is not released when read has failed from all replicas (Rakesh R via sijie) (Revision 1302458)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java
",20/Mar/12 04:10;rakeshr;Thanks Sijie. Presently the state of Assignee is 'Unassigned'. Could you please assign it to me:-),"20/Mar/12 05:14;hustlmsp;actually, when I resolved the issue, I tried to assign it to you, but I could not find your name in the list, I had no idea why? ",20/Mar/12 05:20;hustlmsp;maybe you can assign it to yourself :),20/Mar/12 07:20;fpj;Done.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompactionTest failing on Jenkins,BOOKKEEPER-184,12546194,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,13/Mar/12 07:21,22/Oct/12 14:50,14/Mar/19 02:39,15/Mar/12 09:44,,,4.1.0,,,bookkeeper-server,,,0,,"the compaction test hanging on Jenkins. 

Ivan did some investigation on this issue, and found that it wasn't hanging, it was just taking a really long time. He suggested that it is because it does a lot of I/O, theres a couple of ways we could reduce this.
1. Only create 1 bookie
2. Not inherit from BaseTestCase
3. Reduce the number of entries",,,,,,,,,,,,,,,,,,,13/Mar/12 08:16;hustlmsp;BK-184.diff;https://issues.apache.org/jira/secure/attachment/12518159/BK-184.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-13 08:13:36.989,,,no_permission,,,,,,,,,,,,,231352,,,Thu Mar 15 11:42:26 UTC 2012,,,,,,0|i0axmf:,61720,,,,,,,,"13/Mar/12 08:13;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4304/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

he compaction test hanging on Jenkins.

Ivan did some investigation on this issue, and found that it wasn't hanging, it was just taking a really long time. He suggested that it is because it does a lot of I/O, theres a couple of ways we could reduce this.
1. Only create 1 bookie
2. Not inherit from BaseTestCase
3. Reduce the number of entries


This addresses bug BOOKKEEPER-184.
    https://issues.apache.org/jira/browse/BOOKKEEPER-184


Diffs
-----

  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java 34dcc74 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java 8da000e 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java 6fd1c5c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java 8235ce5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java 099eb7c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 0fe5aba 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java 17f5da2 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java ee5d24e 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java 5dcb964 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java 5364fdd 

Diff: https://reviews.apache.org/r/4304/diff


Testing
-------


Thanks,

Sijie

","13/Mar/12 08:16;hustlmsp;attach a patch according to Ivan's suggestion.

1) move bookkeeper related code into BookKeeperClusterTestCase, which don't need to run multiple time for different digestType. BaseTestCase inherits BookKeeperClusterTestCase, which is used to test digestType related cases.

2) reduce num of bookies to 1 in CompactionTest

3) reduce number of entries to 100 in CompactionTest","13/Mar/12 11:24;ikelly;Did you figure out why the test cases were not failing? Before this change, the disabling of compaction in #testDisableCompaction had no affect. However, the test still passed happily, which indicates that the test wasn't correct.","13/Mar/12 11:57;hustlmsp;the disabling of compaction did work before this change, which use #restartBookies()

{code}
// before restartBookies
2012-03-13 19:43:05,553 - INFO  - [main:GarbageCollectorThread@169] - Minor Compaction : enabled=true, threshold=0.10000000149011612, interval=2000
2012-03-13 19:43:05,553 - INFO  - [main:GarbageCollectorThread@171] - Major Compaction : enabled=true, threshold=0.5, interval=4000

// after restartBookies
2012-03-13 19:43:35,123 - INFO  - [main:GarbageCollectorThread@169] - Minor Compaction : enabled=false, threshold=0.0, interval=2000
2012-03-13 19:43:35,123 - INFO  - [main:GarbageCollectorThread@171] - Major Compaction : enabled=false, threshold=0.0, interval=4000
{code}

because ServerConfiguration is a CompositeConfiguration. A CompositeConfiguration object contains a list of other configuration objects. When properties are accessed from a composite configuration the object takes the passed in property key and iterates over the list of the contained configurations. So when we changed baseConf, the changes would be took placed thru CompositeConfiguration.

This change use #restartBookies(baseConf), which just make code more clearly. it is same as #restartBookies()

",15/Mar/12 09:44;ikelly;Committed as 1300862. Thanks Sijie.,"15/Mar/12 10:16;hudson;Integrated in bookkeeper-trunk #410 (See [https://builds.apache.org/job/bookkeeper-trunk/410/])
    BOOKKEEPER-184: CompactionTest failing on Jenkins (sijie via ivank) (Revision 1300862)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java
","15/Mar/12 11:42;ikelly;Regarding the test working before the change, I had read the logs wrong. It was working fine :), just slow",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Entry log file is overwritten when fail to read lastLogId.,BOOKKEEPER-182,12545625,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,08/Mar/12 07:36,22/Oct/12 14:50,14/Mar/19 02:39,16/Mar/12 09:42,,,4.1.0,,,,,,0,,"we found data corruption happened on entry log files.

2012-03-06 07:26:14,947 - ERROR [NIOServerFactory-3181:BookieServer@413] - Error reading 229@114724
java.io.IOException: problem found in 0@229 at position + 89030194 entry belongs to 6373236044838956613 not 114724
        at org.apache.bookkeeper.bookie.EntryLogger.readEntry(EntryLogger.java:347)
        at org.apache.bookkeeper.bookie.LedgerDescriptor.readEntry(LedgerDescriptor.java:180)
        at org.apache.bookkeeper.bookie.Bookie.readEntry(Bookie.java:1081)
        at org.apache.bookkeeper.proto.BookieServer.processPacket(BookieServer.java:386)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.readRequest(NIOServerFactory.java:315)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.doIO(NIOServerFactory.java:213)
        at org.apache.bookkeeper.proto.NIOServerFactory.run(NIOServerFactory.java:124

then we did some investigation on failed ledger:

first looked into ledger 114724's index file.

{code}
entry 75        :       (log:11, pos: 100526580)
entry 76        :       (log:11, pos: 101849530)
entry 77        :       (log:11, pos: 103176596)
entry 78        :       (log:11, pos: 104403977)
entry 79        :       (log:11, pos: 105756017)
entry 80        :       (log:11, pos: 106740803)
entry 81        :       (log:0, pos: 73365)
entry 82        :       (log:0, pos: 1366625)
entry 83        :       (log:0, pos: 2719276)
entry 84        :       (log:0, pos: 4065142)
{code}

from entry 80, the data is written in 0 entry log which is less than 11. (means data is written to an older entry log file)

then we looked into ledger directory as below

{code}
2147483550 Mar  5 11:30 /var/bookkeeper/ledger/0.log
  94122988 Mar  5 11:33 /var/bookkeeper/ledger/1.log
1984247565 Mar  5 11:34 /var/bookkeeper/ledger/2.log
    288376 Mar  5 11:34 /var/bookkeeper/ledger/3.log
 747151813 Mar  6 03:17 /var/bookkeeper/ledger/4.log
 410381287 Mar  6 07:43 /var/bookkeeper/ledger/5.log
2147483363 Feb 27 19:59 /var/bookkeeper/ledger/7.log
2147483565 Feb 29 09:40 /var/bookkeeper/ledger/9.log
1691783168 Mar  1 03:22 /var/bookkeeper/ledger/a.log
 125556720 Mar  1 08:30 /var/bookkeeper/ledger/b.log
         0 Mar  1 08:33 /var/bookkeeper/ledger/c.log
{code}

the 0-5 entry log files are overwritten.

looked into the code, found that when bookie server failed to read lastLogId, it would set the lastLogId to -1. then start writing entry log files from 0. and also there is not checking about the existen of the entry log file.

it would better to scan the directories to found the biggest log id and start from it. and check whether the file exists or not when creating a new entry log file.
",,,,,,,,,,,,,,,,,,,08/Mar/12 14:45;hustlmsp;BK-182.diff;https://issues.apache.org/jira/secure/attachment/12517566/BK-182.diff,14/Mar/12 13:13;hustlmsp;BK-182.diff_v2;https://issues.apache.org/jira/secure/attachment/12518316/BK-182.diff_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-03-14 10:18:21.742,,,no_permission,,,,,,,,,,,,,230808,,,Fri Mar 16 10:42:12 UTC 2012,,,,,,0|i0axef:,61684,,,,,,,,08/Mar/12 14:45;hustlmsp;attach a patch to fix this issue by scanning ledger directory to get the biggest log id when read lastLogId failed.,14/Mar/12 10:18;ikelly;Tests fail when applied on trunk. I think its something to do with the current directory stuff introduced in BOOKKEEPER-163,"14/Mar/12 13:13;hustlmsp;yes. ur right, the directory is not right in the test. I will update the patch.
",14/Mar/12 13:13;hustlmsp;new patch attached.,16/Mar/12 09:42;ikelly;Committed as r1301395. Thanks Sijie.,"16/Mar/12 10:42;hudson;Integrated in bookkeeper-trunk #412 (See [https://builds.apache.org/job/bookkeeper-trunk/412/])
    BOOKKEEPER-182: Entry log file is overwritten when fail to read lastLogId. (sijie via ivank) (Revision 1301395)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookie server doesn't quit when running out of disk space,BOOKKEEPER-180,12544728,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,01/Mar/12 05:11,22/Oct/12 14:50,14/Mar/19 02:39,08/Mar/12 18:25,,,4.1.0,,,bookkeeper-server,,,0,,"we found that the publish throughput drops down when one bookie server ran out of disk space (due to we don't do log rotation   which exhausts disk space). 

did some investigation, we found that bookie server doesn't quit when encountering no disk space issue. so hub server treat this bookie server as available. The adding requests would be sent to this bookie server, some adding requests are put in journal queue to flush, but the journal flush thread has quit due to no disk space. so these adding requests didn't respond to bookie client until it read timeout and chose other bookie servers.

we did an experiment to shut down the ran-out-of-disk-space bookie, the publish throughput went up again quickly.",,,,,,,,,,,,,,,,,,,01/Mar/12 08:48;hustlmsp;BK-180.diff;https://issues.apache.org/jira/secure/attachment/12516663/BK-180.diff,03/Mar/12 09:15;hustlmsp;BK-180.diff_v2;https://issues.apache.org/jira/secure/attachment/12516933/BK-180.diff_v2,05/Mar/12 11:52;hustlmsp;BK-180.diff_v3;https://issues.apache.org/jira/secure/attachment/12517073/BK-180.diff_v3,08/Mar/12 14:17;hustlmsp;BK-180.diff_v4;https://issues.apache.org/jira/secure/attachment/12517564/BK-180.diff_v4,01/Mar/12 05:14;hustlmsp;conn3.png;https://issues.apache.org/jira/secure/attachment/12516647/conn3.png,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-03-01 15:28:08.463,,,no_permission,,,,,,,,,,,,,229914,,,Mon Jun 11 15:30:52 UTC 2012,,,,,,0|i0axqn:,61739,,,,,,,,"01/Mar/12 05:14;hustlmsp;attach a throughput graph. the throughput went down when a bookie ran out of disk space, while the throughput went up again after shutting down the ran-out-of-disk-space bookie server.","01/Mar/12 08:48;hustlmsp;attach a patch to shut down the bookie server if the bookie thread quits. 

and did some change to call System.exit in BookieServer when encountering issues (such as ZkExpire, bookie thread quit), since some monitoring tool would detect exit code to restart the bookie server process. if bookie server don't exit with non-zero code, it would be treated as a normal quit, monitor tool would not start it.","01/Mar/12 15:28;ikelly;
I have a couple of comments.
# all the error codes should be in the same place
# errno should be called exitCode
# I don't like this pattern of setting errno, then calling shutdown() and then calling System.exit() is interrupted. I don't think Bookie.java should ever call System.exit(). shutdown() should take the error code as a parameter and should not throw InterruptedException. It should catch it and log an error. 
# I dont understand the new code in Bookie#run. Shouldn't the Deathwatcher catch this problem?","02/Mar/12 10:39;hustlmsp;> I dont understand the new code in Bookie#run. Shouldn't the Deathwatcher catch this problem?

currently Deathwatcher watching on running flag to know whether bookie is alive or not. If Bookie thread encountered exceptions such as IOException (due to no disk space left), the bookie thread quits but other threads are still alive and the running flag is not set to false. so new code is added to shut down other threads.",03/Mar/12 09:15;hustlmsp;attach a new patch trying to address ivan's comment.,"05/Mar/12 11:11;ikelly;Patch looks good. You need to run ""mvn clean install"" on toplevel directory though, there's a couple of compile errors due to InterruptedException no longer being thrown.",05/Mar/12 11:52;hustlmsp;thanks for Ivan's reminder. attach a new patch addressed InterruptedException issue.,"08/Mar/12 11:27;ikelly;The new patch conflicts with BOOKKEEPER-160. The merge looks simple, but I'd prefer if you did it, as you know these changes better.",08/Mar/12 14:17;hustlmsp;new patch is attached.,08/Mar/12 18:25;ikelly;Committed as r1298492. Thanks Sijie,"08/Mar/12 18:47;hudson;Integrated in bookkeeper-trunk #394 (See [https://builds.apache.org/job/bookkeeper-trunk/394/])
    BOOKKEEPER-180: bookie server doesn't quit when running out of disk space (sijie via ivank) (Revision 1298492)

     Result = UNSTABLE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ExitCode.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
","11/Jun/12 09:26;vinayrpet;hi,
Here One more scenario needs to be handled. 
Adding new ledger and flushing is failed in SyncThread due to disk full. But Server did not shutdown here.

{noformat}2012-06-11 140014,696 - ERROR [SyncThreadInterleavedLedgerStorage@156] - Exception flushing Ledger
java.io.IOException No space left on device
	at sun.nio.ch.FileDispatcher.write0(Native Method)
	at sun.nio.ch.FileDispatcher.write(FileDispatcher.java39)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java69)
	at sun.nio.ch.IOUtil.write(IOUtil.java26)
	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java198)
	at org.apache.bookkeeper.bookie.BufferedChannel.flush(BufferedChannel.java109)
	at org.apache.bookkeeper.bookie.EntryLogger.flush(EntryLogger.java280)
	at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.flush(InterleavedLedgerStorage.java154)
	at org.apache.bookkeeper.bookie.Bookie$SyncThread.run(Bookie.java200){noformat}","11/Jun/12 10:03;hustlmsp;@Vinay

Actually we are discussing turning server into r-o mode when encountering IOException flushing ledgers. You could refer BOOKKEEPER-199 .","11/Jun/12 10:38;umamaheswararao;@Sijie, I remeber we were discussing about strategy at that time.

{quote}
So how about make it as a strategy, user could decide shutting down or turning to read-only when encountering a faulty bookie?

Sounds good to me.
Just adding config parameter for this option also should be ok. if we enable it, Bookie will turn automatically to read-only mode. If we don't enable it, it will sutdown by default. Admins also can start the bookie in read-only mode explicitly.
{quote}

I think when user don't want read only mode to enable, then shutting down is the other option.
You mean we will handle this conditions as part of BK-199?","11/Jun/12 10:58;hustlmsp;@Uma

yes. turning r-o mode or shutting down is decided by user as discussed in BOOKKEEPER-199. 

flushing ledger is not only running in SyncThread but also when evicting ledger index files. BOOKKEEPER-199 is tried to cover all those IOException cases, so I prefer handling them in that jira.","11/Jun/12 15:30;rakeshr;Yeah Sijie. since it is IOE, I agree to add this scenario as part of BOOKKEEPER-199.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Index file is lost or some index pages aren't flushed.,BOOKKEEPER-177,12543835,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,23/Feb/12 13:11,22/Oct/12 14:50,14/Mar/19 02:39,24/Feb/12 18:09,,,4.1.0,,,bookkeeper-server,,,0,,"we found that some index files are lost ore some index pages aren't flushed after applying BOOKKEEPER-137 patch.

this issue can be reproduced by following sequence.

index file missing:

1) create ledger 1 without writing any entries
2) open ledger 1 which causes a recoveryRead entry(0) sent to bookie server. then an empty page is put in pageTable by mistake as below. (we should call updatePage first to check whether bookie server has this ledger)
{code}
                 // in ledgerCache#getEntryOffset
                 lep = grabCleanPage(ledger, pageEntry);
                 synchronized(this) {
                     putIntoTable(pages, lep);
                 }
                 updatePage(lep);
{code}
3) open ledger 2 to write serval entries. a meta entry and several data entries would be put in journal.
4) SyncThread executes to flush ledger. it first flush ledger 1, although ledger 1 has an empty page which is clean, but the code still need to call #getFileInfo, which will cause an NoLedgerException fail the flush. unfortunately, the SyncThread caught this exception and just output an error message then rollLog. the result is ledger 2 is not flushed, and its journal entries would not be replayed after restarted.
{code}
                 lastLogMark.markLog();
 
                 try {
                     ledgerCache.flushLedger(true);
                 } catch (IOException e) {
                     LOG.error(""Exception flushing Ledger"", e);
                 }
                 try {
                     entryLogger.flush();
                 } catch (IOException e) {
                     LOG.error(""Exception flushing entry logger"", e);
                 }
 
                 lastLogMark.rollLog();
{code}


similar case for some index pages are not flushed.",,,,,,,,,,,,,,,,,,,23/Feb/12 13:24;hustlmsp;BK-177.patch;https://issues.apache.org/jira/secure/attachment/12515749/BK-177.patch,23/Feb/12 13:16;hustlmsp;IndexCorruptionTest.java;https://issues.apache.org/jira/secure/attachment/12515748/IndexCorruptionTest.java,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-23 13:23:47.525,,,no_permission,,,,,,,,,,,,,229074,,,Fri Feb 24 18:46:01 UTC 2012,,,,,,0|i0axev:,61686,,,,,,,,"23/Feb/12 13:16;hustlmsp;add two test cases to reproduce the issues, one is index file lost, the other one is some index pages are not flushed.","23/Feb/12 13:23;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/4016/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

we found that some index files are lost ore some index pages aren't flushed after applying BOOKKEEPER-137 patch.

this issue can be reproduced by following sequence.

index file missing:

1) create ledger 1 without writing any entries
2) open ledger 1 which causes a recoveryRead entry(0) sent to bookie server. then an empty page is put in pageTable by mistake as below. (we should call updatePage first to check whether bookie server has this ledger)

// in ledgerCache#getEntryOffset
                 lep = grabCleanPage(ledger, pageEntry);
                 synchronized(this) {
                     putIntoTable(pages, lep);
                 }
                 updatePage(lep);
3) open ledger 2 to write serval entries. a meta entry and several data entries would be put in journal.
4) SyncThread executes to flush ledger. it first flush ledger 1, although ledger 1 has an empty page which is clean, but the code still need to call #getFileInfo, which will cause an NoLedgerException fail the flush. unfortunately, the SyncThread caught this exception and just output an error message then rollLog. the result is ledger 2 is not flushed, and its journal entries would not be replayed after restarted.

lastLogMark.markLog();
 
                 try {
                     ledgerCache.flushLedger(true);
                 } catch (IOException e) {
                     LOG.error(""Exception flushing Ledger"", e);
                 }
                 try {
                     entryLogger.flush();
                 } catch (IOException e) {
                     LOG.error(""Exception flushing entry logger"", e);
                 }
 
                 lastLogMark.rollLog();
similar case for some index pages are not flushed.


This addresses bug BOOKKEEPER-177.
    https://issues.apache.org/jira/browse/BOOKKEEPER-177


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java d4ece94 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 3e96d46 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 9da4aec 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java 6bbe943 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java PRE-CREATION 

Diff: https://reviews.apache.org/r/4016/diff


Testing
-------


Thanks,

Sijie

",23/Feb/12 13:24;hustlmsp;attach a patch to fix this issue. also move flush single ledger logic into a function which makes flush logic more readable. ,24/Feb/12 18:09;ikelly;Committed as r1293369. Great work Sijie!,"24/Feb/12 18:46;hudson;Integrated in bookkeeper-trunk #375 (See [https://builds.apache.org/job/bookkeeper-trunk/375/])
    BOOKKEEPER-177: Index file is lost or some index pages aren't flushed. (sijie via ivank) (Revision 1293369)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HierarchicalBookieFailureTest Hung,BOOKKEEPER-176,12543049,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,fpj,fpj,17/Feb/12 13:21,22/Oct/12 14:50,14/Mar/19 02:39,01/Mar/12 14:58,,,4.1.0,,,,,,0,,See jstack attachment.,,,,,,,,,,,,,,,,,,,01/Mar/12 11:01;ikelly;BOOKKEEPER-176.diff;https://issues.apache.org/jira/secure/attachment/12516668/BOOKKEEPER-176.diff,29/Feb/12 10:18;ikelly;BOOKKEEPER-176.diff;https://issues.apache.org/jira/secure/attachment/12516545/BOOKKEEPER-176.diff,28/Feb/12 12:54;ikelly;BOOKKEEPER-176.diff;https://issues.apache.org/jira/secure/attachment/12516319/BOOKKEEPER-176.diff,17/Feb/12 13:22;fpj;HierarchicalBookieFailureTest.jstack.out;https://issues.apache.org/jira/secure/attachment/12514981/HierarchicalBookieFailureTest.jstack.out,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-02-17 14:14:12.014,,,no_permission,,,,,,,,,,,,,228335,,,Thu Mar 01 15:17:30 UTC 2012,,,,,,0|i0axj3:,61705,,,,,,,,"17/Feb/12 14:14;ikelly;Does it fail deterministically, or randomly? Have you logs?",17/Feb/12 14:58;fpj;It failed once for me. All I have right now is the stack trace I posted.,"28/Feb/12 12:54;ikelly;This patch fixes 4 things, 2 of which are important.

1) LedgerHandle#pendingAddOps is now threadsafe, this was probably the source of this bug, as after BOOKKEEPER-157 adding the queue and removing were not always necessarily in the same thread.

2) BookKeeper will not initiate create/open or delete ledger operations after zookeeper has connected. This was a source of other intermittent errors, though probably not this one.

3) Small bug that caused NPE in entrylogger GC.

4) Typo in network-delays script.

","29/Feb/12 08:34;fpj;It looks good, Ivan. I have a couple of questions, one not directly related to this patch:

# I was wondering if it is clean to pass a zk reference to a constructor and have the constructor creating it when the reference is null. We can document it, but this is not exactly the behavior I would expect. In any case, I don't feel strongly about a change here, but I wanted to raise the point.
# There is a todo saying ""handle session disconnects and expires"". I noticed it was there already, and it made me wonder what happens if a client loses its session. Don't we try to establish a new session? I don't think we care about the order aspect of sessions here, so I think we need to create a new session if the initial one is gone, no?  ","29/Feb/12 08:52;ikelly;Re: 1.
It's not clean, but its difficult to do cleanly because ZooKeeper expects a watcher for its construction, BookKeeper expects a ZooKeeper for its construction, and the Watcher for ZK requires a the CountDownLatch created by BookKeeper, which cannot be used until after the base constructor is run. Still I don't like nulls, let me try something else.

Re: 2.
We should open another JIRA for that TODO.","29/Feb/12 10:18;ikelly;I changed it to remove the null being passed to the core constructor. Now i pass in an empty watcher, register a new one afterwards, and then ensure that if the connection has been established in the time between creating zk and registering the new watcher, the countdown latch is counted down.",29/Feb/12 15:12;hustlmsp;new patch is OK to me. +1,"29/Feb/12 23:50;fpj;I'm not really comfortable with the way that we are creating a zoookeeper object in this patch. I was wondering about moving the zookeeper initialization code (in the case the bookkeeper objects owns it) to after construction. One option would be to initialize it in withZKConnected before the call to submit. If the BK objects owns it and is null, we initialize the zookeeper client. I tried this approach, but it turned out not to be very clean, though. It requires more changes than simply moving code.
","01/Mar/12 08:56;ikelly;zk initialization cannot be moved out of the constructor without moving ledgerManager construction out. In any case, it means leaving zookeeper null in the constructor, and checking if zookeeper is null at a later point, which is what my first patch did, but i think using null like this is ugly.",01/Mar/12 11:01;ikelly;Changes made as discusses this morning.,"01/Mar/12 14:58;fpj;+1, thanks Ivan. Committed revision 1295604.","01/Mar/12 15:17;hudson;Integrated in bookkeeper-trunk #385 (See [https://builds.apache.org/job/bookkeeper-trunk/385/])
    BOOKKEEPER-176: HierarchicalBookieFailureTest Hung (ivank via fpj) (Revision 1295604)

     Result = FAILURE
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/scripts/network-delays.sh
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie can't start when replaying entries whose ledger were deleted and garbage collected.,BOOKKEEPER-174,12542831,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,16/Feb/12 07:10,22/Oct/12 14:50,14/Mar/19 02:39,17/Feb/12 11:50,4.0.0,,4.1.0,,,bookkeeper-server,,,0,,"if a journal contains entries which the ledgers they belongs to has been deleted and garbage collected, replaying such journal would encounter NoSuchLedgerException. And the bookie can't start.",,,,,,,,,,,,,,,,,,,16/Feb/12 08:12;hustlmsp;BOOKKEEPER-174.diff;https://issues.apache.org/jira/secure/attachment/12514772/BOOKKEEPER-174.diff,17/Feb/12 05:16;hustlmsp;BOOKKEEPER-174.diff_v2;https://issues.apache.org/jira/secure/attachment/12514951/BOOKKEEPER-174.diff_v2,17/Feb/12 10:55;hustlmsp;BOOKKEEPER-174.diff_v3;https://issues.apache.org/jira/secure/attachment/12514972/BOOKKEEPER-174.diff_v3,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-02-16 18:21:21.251,,,no_permission,,,,,,,,,,,,,228117,,,Fri Feb 17 12:36:18 UTC 2012,,,,,,0|i0axhb:,61697,,,,,,,,"16/Feb/12 08:12;hustlmsp;attach a patch to fix this issue. the idea is when encountering NoLedgerException on replaying journals, we need to check whether the ledger is still existed or not. if the ledger has been removed, we just skip replaying the entry.","16/Feb/12 18:21;ikelly;Fix looks good. I have a few cosmetic comments. 
a) isDebugEnabled isn't actually required here, since we use slf4j. We can just use the {} formatting mechanism. For example:
{code}
if (LOG.isDebugEnabled()) {
  LOG.debug(""Skip replaying entries of ledger "" + ledgerId + "" since it was deleted."");
}
{code}
Can be written as 
{code}
LOG.debug(""Skip replaying entries of ledger {} since it was deleted."", ledgerId);
{code}
Which is much neater.

b) I think you should add the tests into BookieJournalTest rather than creating a new suite.",17/Feb/12 03:50;hustlmsp;the new test case is based on BaseTestCase while BookieJournalTest is not. since the test case is related to journal rolling so I prefer to add in BookieJournalRollingTest instead in BookieJournalTest.,17/Feb/12 05:16;hustlmsp;attach a new patch.,"17/Feb/12 10:55;hustlmsp;after discussion with Ivan, the case that adding to the ledger throw NoLedgerException and ledgerManager.ledgerExists() returns true should not happen. so it is safe to skip entry when found NoLedgerException. So I remove the ledgerExists related staff in the new patch.","17/Feb/12 11:50;ikelly;Committed as r1245411, thanks Sijie","17/Feb/12 12:36;hudson;Integrated in bookkeeper-trunk #365 (See [https://builds.apache.org/job/bookkeeper-trunk/365/])
    BOOKKEEPER-174: Bookie can't start when replaying entries whose ledger were deleted and garbage collected. (sijie via ivank) (Revision 1245411)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Uncontrolled number of threads in bookkeeper,BOOKKEEPER-173,12542830,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,philipp.sushkin,philipp.sushkin,16/Feb/12 06:58,22/Oct/12 14:50,14/Mar/19 02:39,20/Apr/12 17:19,,,4.1.0,,,,,,0,,"I am not sure if it is a but or not.

Say, I do have pc with 256 cores, and there is following code in bookkeeper:
{code:title=BookKeeper.java|borderStyle=solid}
OrderedSafeExecutor callbackWorker = new OrderedSafeExecutor(Runtime.getRuntime().availableProcessors());
OrderedSafeExecutor mainWorkerPool = new OrderedSafeExecutor(Runtime .getRuntime().availableProcessors());
{code}
As I understand, callbackWorker is not used at all, so it could be removed.
Also could be required to get more control over mainWorkerPool (say, extract interface + pass instance through contructor).

Myabe there are other places in library where some thread pools are created without ability to reuse existing thread pools in application.






",,,,,,,,,,,,,,,,,,,12/Apr/12 17:11;hustlmsp;BK-173.patch;https://issues.apache.org/jira/secure/attachment/12522447/BK-173.patch,20/Apr/12 08:53;hustlmsp;BK-173.patch_v2;https://issues.apache.org/jira/secure/attachment/12523466/BK-173.patch_v2,20/Apr/12 11:51;fpj;BOOKKEEPER-173.v3.patch;https://issues.apache.org/jira/secure/attachment/12523487/BOOKKEEPER-173.v3.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-02-20 20:56:31.258,,,no_permission,,,,,,,,,,,,,228116,,,Fri Apr 20 17:45:29 UTC 2012,,,,,,0|i0axan:,61667,,,,,,,,"20/Feb/12 20:56;fpj;I agree, callbackWorker is not used any longer and we may want to have a constructor that allows the application to pass a different OrderedSafeExecutor.","23/Feb/12 10:02;ikelly;This should be simple to fix using by adding an config option to ServerConfiguration. The default can be Runetime.getRuntime().availableProcessors() which seems fine on commodity hardware, and then for highend stuff, the admin could configure fewer threads. Philipp, could you have a go at generating a patch that does this?",23/Feb/12 10:06;fpj;+1 on the idea of having a configuration option.,12/Apr/12 17:11;hustlmsp;attach a patch to expose number of worker threads as a configuration setting. as I need to use this setting when adding test case for BOOKKEEPER-215.,16/Apr/12 13:50;ikelly;callbackWorker is never used and should be removed. Otherwise the patch is good.,"16/Apr/12 14:24;hustlmsp;actually in BOOKKEEPER-215, the patch used the callbackWorker. LedgerRecoveryOp call back to bookkeeper in bookkeeper's callback, so it would introduce deadlock with limit permits. so I use this callbackWorker to execute forward read in LedgerRecovery procedure to avoid deadlock.","18/Apr/12 15:01;fpj;I have one quick clarification and one request. If setNumWorkerThreads is called after the BookKeeper object is constructed, then it has no effect on the number of threads in the pool. Should we enforce somehow that the value doesn't change after the BookKeeper object is constructed? Otherwise the semantics could be confusing.

Also, it would be good to add a description of these options to the documentation.",18/Apr/12 15:01;fpj;Cancelling patch until comments are addressed.,"19/Apr/12 00:36;hustlmsp;@Flavio, 

> If setNumWorkerThreads is called after the BookKeeper object is constructed, then it has no effect on the number of threads in the pool.

yes, ur right. How about clarifying it in the documentation of this method?

> Also, it would be good to add a description of these options to the documentation.

will do it in the new patch.","20/Apr/12 08:53;hustlmsp;attach a new patch to add more documents to address Flavio's comments.

beside that, I also put other existing client configuration settings in doc/bookkeeperConfigParam.textile.","20/Apr/12 11:51;fpj;It looks good, Sijie. I just made some minor corrections, please check.

Also, I was wondering if we have a patch for the password issue with bookie recovery that is described in the documentation. If we don't have a jira, it would be great if we could open one before resolving this issue.","20/Apr/12 13:43;hustlmsp;thanks Flavio for those corrections. it is good to me. +1.

> Also, I was wondering if we have a patch for the password issue with bookie recovery that is described in the documentation. If we don't have a jira, it would be great if we could open one before resolving this issue.

hmm, currently we don't have a jira to track that issue. I will create one.","20/Apr/12 17:19;fpj;+1 as well. Thanks, Sijie.",20/Apr/12 17:19;fpj;Committed revision 1328452.,"20/Apr/12 17:45;hudson;Integrated in bookkeeper-trunk #470 (See [https://builds.apache.org/job/bookkeeper-trunk/470/])
    BOOKKEEPER-173: Uncontrolled number of threads in bookkeeper (sijie via fpj) (Revision 1328452)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/doc/bookieConfigParams.textile
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfigParams.textile
* /zookeeper/bookkeeper/trunk/doc/index.textile
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServerConfiguration can't use more than one directory for ledgers,BOOKKEEPER-171,12542578,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,14/Feb/12 18:28,22/Oct/12 14:50,14/Mar/19 02:39,15/Feb/12 10:04,,,4.1.0,,,,,,0,,"ServerConfiguration cannot use more than one directory for ledgers, due to a bug in how it stores multiple values. ",,,,,,,,,,,,,,,,,,,15/Feb/12 09:15;ikelly;BOOKKEEPER-171.diff;https://issues.apache.org/jira/secure/attachment/12514610/BOOKKEEPER-171.diff,14/Feb/12 18:30;ikelly;BOOKKEEPER-171.diff;https://issues.apache.org/jira/secure/attachment/12514521/BOOKKEEPER-171.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-15 07:02:21.095,,,no_permission,,,,,,,,,,,,,227864,,,Wed Feb 15 09:59:31 UTC 2012,,,,,,0|i0axif:,61702,,,,,,,,"15/Feb/12 07:02;hustlmsp;yeah, using #getStringArray would be right and better. 

It would be better to remove unused define SEP also :)",15/Feb/12 09:28;hustlmsp;new patch is ok to me. +1,15/Feb/12 09:59;hustlmsp;commit as r1244421. thanks Ivan.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie constructor starts a number of threads,BOOKKEEPER-170,12542576,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,14/Feb/12 18:25,22/Oct/12 14:50,14/Mar/19 02:39,15/Feb/12 15:12,,,4.1.0,,,,,,0,,"Starting a thread in a constructor is bad[1]. Also, it makes unit testing on Bookie a bit of a pain. For this reason, i've refactored the thread starting code out, so that to start the bookie, you call start() like you usually have to for a thread anyhow. As a bonus, it fixes some findbugs issues.


[1] http://stackoverflow.com/questions/84285/calling-thread-start-within-its-own-constructor",,,,,,,,,,,,,,,,,,,15/Feb/12 14:28;ikelly;BOOKKEEPER-170.diff;https://issues.apache.org/jira/secure/attachment/12514645/BOOKKEEPER-170.diff,14/Feb/12 18:26;ikelly;BOOKKEEPER-170.diff;https://issues.apache.org/jira/secure/attachment/12514520/BOOKKEEPER-170.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-15 12:18:28.083,,,no_permission,,,,,,,,,,,,,227862,,,Wed Feb 15 15:46:16 UTC 2012,,,,,,0|i0axjr:,61708,,,,,,,,"15/Feb/12 12:18;fpj;It looks good overall. A few comments:

# I'm not sure why you removed a number of calls to shutdown. Could you explain?
# In Bookie, I thought that we were setting the value of this.zk further down in the constructor because we needed to wait until the bookie starts up. With this patch, we set it earlier. I'm trying to understand why that is not a problem...
# This change here ""@@ -346,12 +350,11"" does not seem to be necessary.
# This is minor, but I was wondering if we should call startGC() something else, like initiate(). It leaks out information about EntryLogger.","15/Feb/12 14:28;ikelly;{quote}1. I'm not sure why you removed a number of calls to shutdown. Could you explain?{quote}
Because there's no need to shutdown if we've never started. Previously construction would automatically start the bookie. This is no longer the case.

{quote}2. In Bookie, I thought that we were setting the value of this.zk further down in the constructor because we needed to wait until the bookie starts up. With this patch, we set it earlier. I'm trying to understand why that is not a problem...{quote}
Again, this was due to EntryLogger contructor starting the GC, which is no longer the case. Now GC isn't started until we start the entry logger.

{quote}3. This change here ""@@ -346,12 +350,11"" does not seem to be necessary.{quote}
It removes trailing whitespace, which is ugly in reviewboard (shows up as red).

{quote}4. This is minor, but I was wondering if we should call startGC() something else, like initiate(). It leaks out information about EntryLogger.{quote}
Renamed to #start()","15/Feb/12 15:12;fpj;+1, thanks Ivan. Committed revision 1244528.","15/Feb/12 15:46;hudson;Integrated in bookkeeper-trunk #362 (See [https://builds.apache.org/job/bookkeeper-trunk/362/])
    BOOKKEEPER-170: Bookie constructor starts a number of threads. (ivank via fpj) (Revision 1244528)

     Result = ABORTED
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookie hangs on reading header when encountering partial header index file,BOOKKEEPER-169,12542560,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,14/Feb/12 16:08,22/Oct/12 14:50,14/Mar/19 02:39,17/Feb/12 10:22,4.0.0,,4.1.0,,,bookkeeper-server,,,0,,"bookie server hangs on reading header part when reading partial header index file (whose header part is less than 1k). This kind of index file existed because bookie server shuts down when writing header of index file.

bookie server should check file size when reading header. in pre-v3 journal, we don't have master key stored in journal, so if master key is missing, we have no chance to repair it just throw an IOException when reading header. in post-v3 journal, we store master key as an meta entry in journal, so we can rewrite the header part.

",,,,,,,,,,,,,,,,,,,15/Feb/12 00:53;hustlmsp;BK-169.diff;https://issues.apache.org/jira/secure/attachment/12514582/BK-169.diff,17/Feb/12 03:12;hustlmsp;BK-169.diff_v2;https://issues.apache.org/jira/secure/attachment/12514938/BK-169.diff_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-16 18:09:32.476,,,no_permission,,,,,,,,,,,,,227846,,,Fri Feb 17 10:44:04 UTC 2012,,,,,,0|i0axs7:,61746,,,,,,,,15/Feb/12 00:54;hustlmsp;attach a patch to fix it.,"16/Feb/12 18:09;ikelly;{code}
+            // repair partial index
+            if (null != fc && fc.size() < 1024) {
+                if (success) {
+                    writeHeader(); 
+                } else if (null != masterKey) {
+                    writeHeader();
+                } else {
+                    if (null != error) {
+                        throw new IOException(""Reading header error: "", error);
+                    } else {
+                        throw new IOException(""Reading header error."");
+                    }
+                }
+            }
{code}
If success, then there's no need to rewrite the header, the first write will skip past first 1024 bytes anyhow. Instead of the success flag, I'd just do the following.

{code}
try {
    readHeader();
} catch (BufferUnderflowException buf) {
    LOG.warn(""Exception when reading header of {} : {}"", lf, buf);
    if (null != masterKey) {
        LOG.warn(""Attempting to write header again"");
        writeHeader();
    } else {
        throw new IOException(""Error reading header "" + lf);
    }
}
{code}
If the header was incomplete, readHeader should have thrown BufferUnderflowException, otherwise everything is normal.

Also, where 1024 is used as a literal, you should use START_OF_DATA. 

I think we should move all the test Journal write methods to the same class to keep them all together.",17/Feb/12 03:12;hustlmsp;attach a new patch addresses Ivan's comment.,"17/Feb/12 10:22;ikelly;Committed as r1245369, thanks Sijie.","17/Feb/12 10:44;hudson;Integrated in bookkeeper-trunk #364 (See [https://builds.apache.org/job/bookkeeper-trunk/364/])
    BOOKKEEPER-169: bookie hangs on reading header when encountering partial header index file (sijie via ivank) (Revision 1245369)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PerChannelBookieClient doesn't use ClientConfiguration,BOOKKEEPER-167,12541767,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,08/Feb/12 08:54,22/Oct/12 14:50,14/Mar/19 02:39,08/Feb/12 10:41,4.0.0,,4.1.0,,,bookkeeper-client,,,0,,"currently, we don't use ClientConfiguration to initialize PerChannelBookieClient. so the readtimeout settings are not applied to PerChannelBookieClient.",,,,,,,,,,,,,,,,,,,08/Feb/12 08:55;hustlmsp;BK-167.patch;https://issues.apache.org/jira/secure/attachment/12513783/BK-167.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-08 09:57:37.115,,,no_permission,,,,,,,,,,,,,227054,,,Wed Feb 08 11:22:19 UTC 2012,,,,,,0|i0axbr:,61672,,,,,,,,08/Feb/12 08:55;hustlmsp;attach a patch to fix this issue.,"08/Feb/12 09:57;ikelly;Patch looks good +1,
Committing.",08/Feb/12 10:41;ikelly;Committed as 1241854,"08/Feb/12 11:22;hudson;Integrated in bookkeeper-trunk #349 (See [https://builds.apache.org/job/bookkeeper-trunk/349/])
    BOOKKEEPER-167: PerChannelBookieClient doesn't use ClientConfiguration (Sijie Guo via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie will not recover its journal if the length prefix of an entry is truncated,BOOKKEEPER-166,12541653,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,07/Feb/12 17:00,22/Oct/12 14:50,14/Mar/19 02:39,30/Mar/12 11:00,,,4.1.0,,,,,,0,,"Entries in the bookie's journal are written in the format <len><entry>

If the bookie crashes while writing the length part, then the bookie will not be able to recover the journal.
An unlikely situation to happen as this is only 1 int, but an issue none the less.

There is a testcase in BOOKKEEPER-165 which will trigger this when enabled (BookieJournalTest#testTruncatedInLenJournal).

",,,,,,,,,,,,,,,,,,,29/Mar/12 09:27;ikelly;BOOKKEEPER-166.diff;https://issues.apache.org/jira/secure/attachment/12520396/BOOKKEEPER-166.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-29 14:11:24.195,,,no_permission,,,,,,,,,,,,,226940,,,Fri Mar 30 11:13:28 UTC 2012,,,,,,0|i0axr3:,61741,,,,,,,,"29/Mar/12 09:27;ikelly;Patch simply reenables the test. Another fix actually fixed the issue. 

When we discussed this before we came to the conclusion that simply ensuring that we read 4 bytes would be enough. This is not the case, as the journal preallocates disk space, so in the case where the length is truncated, the final bits would be zeroed. However, this is fine now, as it will try to read in the packet. The entryId and ledgerId will be 0, and the bookie will see that ledgerId doesn't exist and skip the entry.","29/Mar/12 14:11;hustlmsp;yeah, the journal did preallocate disk space. I agreed. +1 for the patch.","30/Mar/12 11:00;ikelly;Committed as r1307353
","30/Mar/12 11:13;hudson;Integrated in bookkeeper-trunk #434 (See [https://builds.apache.org/job/bookkeeper-trunk/434/])
    BOOKKEEPER-166: Bookie will not recover its journal if the length prefix of an entry is truncated (ivank) (Revision 1307353)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Prevent incorrect NoSuchLedgerException for readLastConfirmed.,BOOKKEEPER-163,12541601,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,07/Feb/12 11:51,02/May/13 02:29,14/Mar/19 02:39,13/Mar/12 06:35,4.0.0,,4.1.0,,,bookkeeper-client,bookkeeper-server,,0,,"bookkeeper client treats NoSuchLedgerException as valid response when reading last confirmed. If NoSuchLedgerException is caused due to an empty directory in following cases, it is an incorrect response. 

1) A disk is replaced or ledger index is removed by a sloppy admin.
2) A disk is not mounted when a bookie machine is restarted.

We need a mechanism to prevent such incorrect responses.

Ivan suggested to generate a instance key for each bookie and write it into the ledger directories. If a directory doesn't have the key, and other directories do, then it shouldn't start. This would also resolve the issue that someone starting a new bookie with the same IP as a bookie which has previously died.",,,,,,,,,,,,,,,,,BOOKKEEPER-170,BOOKKEEPER-172,12/Mar/12 14:20;ikelly;BOOKKEEPER-163.diff;https://issues.apache.org/jira/secure/attachment/12518027/BOOKKEEPER-163.diff,12/Mar/12 12:11;ikelly;BOOKKEEPER-163.diff;https://issues.apache.org/jira/secure/attachment/12518012/BOOKKEEPER-163.diff,09/Mar/12 11:23;ikelly;BOOKKEEPER-163.diff;https://issues.apache.org/jira/secure/attachment/12517707/BOOKKEEPER-163.diff,16/Feb/12 16:14;ikelly;BOOKKEEPER-163.diff;https://issues.apache.org/jira/secure/attachment/12514812/BOOKKEEPER-163.diff,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-02-16 16:16:17.993,,,no_permission,,,,,,,,,,,,,226888,,,Tue Mar 13 07:03:17 UTC 2012,,,,,,0|i0axqv:,61740,,,,,,,,"16/Feb/12 16:16;ikelly;Patch applies on top of BOOKKEEPER-172 patch
","16/Feb/12 16:16;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3926/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

bookkeeper client treats NoSuchLedgerException as valid response when reading last confirmed. If NoSuchLedgerException is caused due to an empty directory in following cases, it is an incorrect response.

1) A disk is replaced or ledger index is removed by a sloppy admin.
2) A disk is not mounted when a bookie machine is restarted.

We need a mechanism to prevent such incorrect responses.

Ivan suggested to generate a instance key for each bookie and write it into the ledger directories. If a directory doesn't have the key, and other directories do, then it shouldn't start. This would also resolve the issue that someone starting a new bookie with the same IP as a bookie which has previously died.


This addresses bug BOOKKEEPER-163.
    https://issues.apache.org/jira/browse/BOOKKEEPER-163


Diffs
-----

  bookkeeper-server/pom.xml 601104f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 2fb7c6c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java 1a5b313 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java aca66e6 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 3e96d46 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java 2df0ed0 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java 10f9538 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java f661e90 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java ea51118 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java 5ed7061 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java PRE-CREATION 

Diff: https://reviews.apache.org/r/3926/diff


Testing
-------


Thanks,

Ivan

","09/Mar/12 06:39;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3926/#review5766
-----------------------------------------------------------


most of the patch is good beside some small issues. I commented them inline.


bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java
<https://reviews.apache.org/r/3926/#comment12563>

    if more than two bookie server try to create COOKIE_PATH at the same time, it would fail. it would be better to catch NodeExists Exception.



bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java
<https://reviews.apache.org/r/3926/#comment12565>

    it seems that you missed that file 'lastId' and 'lastMark'



bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java
<https://reviews.apache.org/r/3926/#comment12564>

    it would be better to copy data to a temp directory, such as upgrading, then rename the upgrading directory to current.
    
    otherwise, if the upgrading is broken after created current directory, but user restarts bookie server with this upgrade-failed directory, bookie server would treat it as a new environment. 



bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java
<https://reviews.apache.org/r/3926/#comment12566>

    for a new disk (new directory) added case, it would not cause data missing. 
    
    could we provide a tool to upgrade a bookie's cookie when adding a new directory?


- Sijie


On 2012-02-16 16:15:58, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3926/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-16 16:15:58)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  bookkeeper client treats NoSuchLedgerException as valid response when reading last confirmed. If NoSuchLedgerException is caused due to an empty directory in following cases, it is an incorrect response.
bq.  
bq.  1) A disk is replaced or ledger index is removed by a sloppy admin.
bq.  2) A disk is not mounted when a bookie machine is restarted.
bq.  
bq.  We need a mechanism to prevent such incorrect responses.
bq.  
bq.  Ivan suggested to generate a instance key for each bookie and write it into the ledger directories. If a directory doesn't have the key, and other directories do, then it shouldn't start. This would also resolve the issue that someone starting a new bookie with the same IP as a bookie which has previously died.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-163.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-163
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/pom.xml 601104f 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 2fb7c6c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java 1a5b313 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java aca66e6 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 3e96d46 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java 2df0ed0 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java 10f9538 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java f661e90 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java ea51118 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java 5ed7061 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/3926/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","09/Mar/12 09:59;ikelly;There's a few conflicts with trunk, which im sorting out now. I'll upload a new patch when im done.
","09/Mar/12 09:59;jiraposter@reviews.apache.org;

bq.  On 2012-03-09 06:38:44, Sijie Guo wrote:
bq.  > bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java, line 151
bq.  > <https://reviews.apache.org/r/3926/diff/1/?file=75432#file75432line151>
bq.  >
bq.  >     for a new disk (new directory) added case, it would not cause data missing. 
bq.  >     
bq.  >     could we provide a tool to upgrade a bookie's cookie when adding a new directory?

I did have this in the back of my mind when writing this, but it seems an extra feature to me and would bloat the scope a bit much. Could we put this in an new JIRA?


bq.  On 2012-03-09 06:38:44, Sijie Guo wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java, line 173
bq.  > <https://reviews.apache.org/r/3926/diff/1/?file=75428#file75428line173>
bq.  >
bq.  >     it would be better to copy data to a temp directory, such as upgrading, then rename the upgrading directory to current.
bq.  >     
bq.  >     otherwise, if the upgrading is broken after created current directory, but user restarts bookie server with this upgrade-failed directory, bookie server would treat it as a new environment.

Very good point, will do this.


bq.  On 2012-03-09 06:38:44, Sijie Guo wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java, line 63
bq.  > <https://reviews.apache.org/r/3926/diff/1/?file=75428#file75428line63>
bq.  >
bq.  >     it seems that you missed that file 'lastId' and 'lastMark'

Ah, well spotted, will add them.


bq.  On 2012-03-09 06:38:44, Sijie Guo wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java, line 135
bq.  > <https://reviews.apache.org/r/3926/diff/1/?file=75426#file75426line135>
bq.  >
bq.  >     if more than two bookie server try to create COOKIE_PATH at the same time, it would fail. it would be better to catch NodeExists Exception.

Fixed


- Ivan


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3926/#review5766
-----------------------------------------------------------


On 2012-02-16 16:15:58, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3926/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-16 16:15:58)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  bookkeeper client treats NoSuchLedgerException as valid response when reading last confirmed. If NoSuchLedgerException is caused due to an empty directory in following cases, it is an incorrect response.
bq.  
bq.  1) A disk is replaced or ledger index is removed by a sloppy admin.
bq.  2) A disk is not mounted when a bookie machine is restarted.
bq.  
bq.  We need a mechanism to prevent such incorrect responses.
bq.  
bq.  Ivan suggested to generate a instance key for each bookie and write it into the ledger directories. If a directory doesn't have the key, and other directories do, then it shouldn't start. This would also resolve the issue that someone starting a new bookie with the same IP as a bookie which has previously died.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-163.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-163
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/pom.xml 601104f 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 2fb7c6c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java 1a5b313 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java aca66e6 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 3e96d46 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java 2df0ed0 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java 10f9538 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java f661e90 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java ea51118 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java 5ed7061 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/3926/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","09/Mar/12 10:35;hustlmsp;> I did have this in the back of my mind when writing this, but it seems an extra feature to me and would bloat the scope a bit much. Could we put this in an new JIRA?

yeah, it is an extra feature. let's add it in a new jira.",09/Mar/12 11:23;ikelly;new patch addresses Sijie's comments,"09/Mar/12 11:24;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3926/
-----------------------------------------------------------

(Updated 2012-03-09 11:23:54.722810)


Review request for bookkeeper.


Summary
-------

bookkeeper client treats NoSuchLedgerException as valid response when reading last confirmed. If NoSuchLedgerException is caused due to an empty directory in following cases, it is an incorrect response.

1) A disk is replaced or ledger index is removed by a sloppy admin.
2) A disk is not mounted when a bookie machine is restarted.

We need a mechanism to prevent such incorrect responses.

Ivan suggested to generate a instance key for each bookie and write it into the ledger directories. If a directory doesn't have the key, and other directories do, then it shouldn't start. This would also resolve the issue that someone starting a new bookie with the same IP as a bookie which has previously died.


This addresses bug BOOKKEEPER-163.
    https://issues.apache.org/jira/browse/BOOKKEEPER-163


Diffs (updated)
-----

  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java 5ed7061 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java ea51118 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java 281f729 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java eb08479 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java 016289d 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java 10f9538 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 19295bb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java bc7a703 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 82f01e8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java d1427b7 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java 1a5b313 
  bookkeeper-server/pom.xml 601104f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 0d66b41 

Diff: https://reviews.apache.org/r/3926/diff


Testing
-------


Thanks,

Ivan

","12/Mar/12 06:22;hustlmsp;new patch is well done. but a new issue came to me when I reviewed this patch. I am not sure that copying files is good enough for upgrading, since it would take long time to copy data and exhaust disk space (if we don't have enough space to copy data, the upgrading would be failed). do you consider creating hardlink instead of copying data for upgrading?","12/Mar/12 09:34;ikelly;Hmm, this is true. The problem here is that hardlinking isn't built into java yet (it exists in jdk7, but thats not in general usage). I guess I can do a check for /usr/bin/ln and if it doesn't exist, do a copy. ",12/Mar/12 10:28;hustlmsp;yes. I remembered hadoop used 'ln' command to do upgrading too. And it also batched hardlinking to make upgrading fast. I think we can refer its experience.,12/Mar/12 12:11;ikelly;New patch uses hardlinking rather than copying.,"12/Mar/12 12:13;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3926/
-----------------------------------------------------------

(Updated 2012-03-12 12:12:03.757647)


Review request for bookkeeper.


Summary
-------

bookkeeper client treats NoSuchLedgerException as valid response when reading last confirmed. If NoSuchLedgerException is caused due to an empty directory in following cases, it is an incorrect response.

1) A disk is replaced or ledger index is removed by a sloppy admin.
2) A disk is not mounted when a bookie machine is restarted.

We need a mechanism to prevent such incorrect responses.

Ivan suggested to generate a instance key for each bookie and write it into the ledger directories. If a directory doesn't have the key, and other directories do, then it shouldn't start. This would also resolve the issue that someone starting a new bookie with the same IP as a bookie which has previously died.


This addresses bug BOOKKEEPER-163.
    https://issues.apache.org/jira/browse/BOOKKEEPER-163


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 19295bb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java bc7a703 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java 10f9538 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 82f01e8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java d1427b7 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java 1a5b313 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java PRE-CREATION 
  bookkeeper-server/pom.xml 601104f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 0d66b41 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java 016289d 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java 281f729 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java eb08479 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java ea51118 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java 5ed7061 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java PRE-CREATION 

Diff: https://reviews.apache.org/r/3926/diff


Testing
-------


Thanks,

Ivan

","12/Mar/12 13:27;hustlmsp;I am OK for the new patch, +1. Although it seems that hadoop-common jar introduces lot of dependencies, which are not be used actually, it seems that we don't have a better library to support hardlink than hadoop common jar. I would like to hear other one's opinion.","12/Mar/12 13:33;hustlmsp;BTW, hadoop-common jar introduces protobuf-2.4.0, which is higher than 2.3.0.","12/Mar/12 14:20;ikelly;Irritatingly, Hardlink doesn't use any 3rd party deps at all. New patch excludes all of hadoop-common's transactive deps. It's ugly, but i think it's the only option we have until jdk7 is commonplace.","12/Mar/12 14:22;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3926/
-----------------------------------------------------------

(Updated 2012-03-12 14:21:17.503815)


Review request for bookkeeper.


Summary
-------

bookkeeper client treats NoSuchLedgerException as valid response when reading last confirmed. If NoSuchLedgerException is caused due to an empty directory in following cases, it is an incorrect response.

1) A disk is replaced or ledger index is removed by a sloppy admin.
2) A disk is not mounted when a bookie machine is restarted.

We need a mechanism to prevent such incorrect responses.

Ivan suggested to generate a instance key for each bookie and write it into the ledger directories. If a directory doesn't have the key, and other directories do, then it shouldn't start. This would also resolve the issue that someone starting a new bookie with the same IP as a bookie which has previously died.


This addresses bug BOOKKEEPER-163.
    https://issues.apache.org/jira/browse/BOOKKEEPER-163


Diffs (updated)
-----

  bookkeeper-server/pom.xml 601104f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 0d66b41 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java 1a5b313 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 82f01e8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java d1427b7 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 19295bb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java bc7a703 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java 10f9538 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java 016289d 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java 281f729 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java eb08479 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java ea51118 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java 5ed7061 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java PRE-CREATION 

Diff: https://reviews.apache.org/r/3926/diff


Testing
-------


Thanks,

Ivan

",13/Mar/12 05:37;hustlmsp;+1 for new patch.,"13/Mar/12 06:33;hustlmsp;committed as r1299984. Great work, Thanks Ivan.","13/Mar/12 07:03;hudson;Integrated in bookkeeper-trunk #402 (See [https://builds.apache.org/job/bookkeeper-trunk/402/])
    BOOKKEEPER-163: Prevent incorrect NoSuchLedgerException for readLastConfirmed. (ivank via sijie) (Revision 1299984)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerHandle.readLastConfirmed does not work,BOOKKEEPER-162,12541562,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,fpj,philipp.sushkin,philipp.sushkin,07/Feb/12 05:15,22/Oct/12 14:50,14/Mar/19 02:39,13/Feb/12 10:20,4.0.0,,4.1.0,,,bookkeeper-client,,,0,,"Two bookkeeper clients.
1st continuously writing to ledger X.
2nd (bk.openLedgerNoRecovery) polling ledger X for new entries and reading them.

In response we always reveiceing 0 as last confirmed entry id (in fact we are receiving -1 from each bookie RecoveryData but then in ReadLastConfirmedOp, but uninitialized ""long maxAddConfirmed;"" takes priority in Math.max(...).

Main question - is given scenario is expected to work at all?

",,,,,,,,,,,,,,,,,,,09/Feb/12 08:08;fpj;BOOKKEEPER-162.patch;https://issues.apache.org/jira/secure/attachment/12513925/BOOKKEEPER-162.patch,08/Feb/12 15:55;fpj;BOOKKEEPER-162.patch;https://issues.apache.org/jira/secure/attachment/12513829/BOOKKEEPER-162.patch,07/Feb/12 13:39;fpj;BOOKKEEPER-162.patch;https://issues.apache.org/jira/secure/attachment/12513612/BOOKKEEPER-162.patch,07/Feb/12 12:57;fpj;BOOKKEEPER-162.patch;https://issues.apache.org/jira/secure/attachment/12513606/BOOKKEEPER-162.patch,07/Feb/12 12:12;fpj;BOOKKEEPER-162.patch;https://issues.apache.org/jira/secure/attachment/12513602/BOOKKEEPER-162.patch,07/Feb/12 12:18;philipp.sushkin;BookieReadWriteTest.java.patch;https://issues.apache.org/jira/secure/attachment/12513604/BookieReadWriteTest.java.patch,07/Feb/12 12:12;philipp.sushkin;BookieReadWriteTest.java.patch;https://issues.apache.org/jira/secure/attachment/12513603/BookieReadWriteTest.java.patch,07/Feb/12 11:57;philipp.sushkin;BookieReadWriteTest.java.patch;https://issues.apache.org/jira/secure/attachment/12513597/BookieReadWriteTest.java.patch,07/Feb/12 11:47;philipp.sushkin;bookkeeper.log;https://issues.apache.org/jira/secure/attachment/12513596/bookkeeper.log,,,,,,,,9.0,,,,,,,,,,,,,,,,,,,2012-02-07 06:13:19.557,,,no_permission,,,,,,,,,,,,,226849,,,Mon Feb 13 11:15:44 UTC 2012,,,,,,0|i0axsn:,61748,,,,,,,,"07/Feb/12 06:13;fpj;Hi Philipp, Are the adds to the ledger asynchronous? Are you calling readLastConfirmed after receiving an ack for some add operation?

In principle, it should work. Check testReadFromOpenLedger in BookieReadWriteTest. 

Do you have logs you can share with us, both bookie and client?
","07/Feb/12 07:05;philipp.sushkin;Thanks, I tried updated version of testReadFromOpenLedger

So looks like it was misusing of lhOpen.getLastAddConfirmed(), should use lhOpen.readLastConfirmed() instead.

*Closing issue.*

{code}
@Test
    public void testReadFromOpenLedger2() throws IOException {
        try {
            // Create a ledger
            lh = bkc.createLedger(digestType, ledgerPassword);
            // bkc.initMessageDigest(""SHA1"");
            ledgerId = lh.getId();
            LedgerHandle lhOpen = bkc.openLedgerNoRecovery(ledgerId, digestType, ledgerPassword);
            LOG.info(""Ledger ID: "" + lh.getId());
            for (int i = 0; i < numEntriesToWrite; i++) {
                ByteBuffer entry = ByteBuffer.allocate(4);
                entry.putInt(rng.nextInt(maxInt));
                entry.position(0);

                entries.add(entry.array());
                entriesSize.add(entry.array().length);
                lh.addEntry(entry.array());
                if (i == numEntriesToWrite / 2) {
                    // no recovery opened ledger 's last confirmed entry id is
                    // less than written
                    // and it just can read until (i-1)
                    int toRead = i - 1;
                    long readLastConfirmed = lhOpen.readLastConfirmed();
                    assertTrue(readLastConfirmed != 0);
                    assertTrue(lhOpen.getLastAddConfirmed() != 0);
                    Enumeration<LedgerEntry> readEntry = lhOpen.readEntries(toRead, toRead);
                    assertTrue(""Enumeration of ledger entries has no element"", readEntry.hasMoreElements() == true);
                    LedgerEntry e = readEntry.nextElement();
                    assertEquals(toRead, e.getEntryId());
                    Assert.assertArrayEquals(entries.get(toRead), e.getEntry());
                    // should not written to a read only ledger
                    try {
                        lhOpen.addEntry(entry.array());
                        fail(""Should have thrown an exception here"");
                    } catch (BKException.BKIllegalOpException bkioe) {
                        // this is the correct response
                    } catch (Exception ex) {
                        LOG.error(""Unexpected exception"", ex);
                        fail(""Unexpected exception"");
                    }

                }
            }
            long last = lh.readLastConfirmed();
            assertTrue(""Last confirmed add: "" + last, last == (numEntriesToWrite - 2));

            LOG.debug(""*** WRITE COMPLETE ***"");
            // close ledger
            lh.close();
            // close read only ledger should not change metadata
            lhOpen.close();
        } catch (BKException e) {
            LOG.error(""Test failed"", e);
            fail(""Test failed due to BookKeeper exception"");
        } catch (InterruptedException e) {
            LOG.error(""Test failed"", e);
            fail(""Test failed due to interruption"");
        }
    }
{code}

In fact nothing is done to original test, but

{code}
LedgerHandle lhOpen = bkc.openLedgerNoRecovery(ledgerId, digestType, ledgerPassword);
{code}
and 
{code}
// close read only ledger should not change metadata
lhOpen.close();
{code}
moved out, and 
{code}
long readLastConfirmed = lhOpen.readLastConfirmed();
assertTrue(readLastConfirmed != 0);
assertTrue(lhOpen.getLastAddConfirmed() != 0);
{code}


Small question - is there any way to get and updateledger status (closed?) using ledger handle? As I see currently there is no public api for that.

","07/Feb/12 08:12;fpj;Correct, we currently don't have an api to check if a ledger is closed. We assume that it is communicated from a writer to a reader by an external channel, e.g., through zookeeper. It wouldn't be difficult to have such a call, though. It is simply checking the ledger metadata on zookeeper.","07/Feb/12 10:45;philipp.sushkin;I modified test a little bit to make it fail.

Please find failing version. It changed to use 2 different BookKeeperTestClient to simulate 2 different pc (may failing case) more precisely.

{code}
@Test
    public void testReadFromOpenLedger2() throws Exception {
        try {
            BookKeeperTestClient  writerBkc = new BookKeeperTestClient(baseClientConf);
            BookKeeperTestClient  readerBkc = new BookKeeperTestClient(baseClientConf);
            // Create a ledger
            lh = writerBkc.createLedger(digestType, ledgerPassword);
            // bkc.initMessageDigest(""SHA1"");
            ledgerId = lh.getId();
            LedgerHandle lhOpen = readerBkc.openLedgerNoRecovery(ledgerId, digestType, ledgerPassword);
            LOG.info(""Ledger ID: "" + lh.getId());
            for (int i = 0; i < numEntriesToWrite; i++) {
                ByteBuffer entry = ByteBuffer.allocate(4);
                entry.putInt(rng.nextInt(maxInt));
                entry.position(0);

                entries.add(entry.array());
                entriesSize.add(entry.array().length);
                lh.addEntry(entry.array());
                if (i == numEntriesToWrite / 2) {
                    // no recovery opened ledger 's last confirmed entry id is
                    // less than written
                    // and it just can read until (i-1)
                    int toRead = i - 1;
                    long readLastConfirmed = lhOpen.readLastConfirmed();
                    assertTrue(readLastConfirmed != 0);
                    Enumeration<LedgerEntry> readEntry = lhOpen.readEntries(toRead, toRead);
                    assertTrue(""Enumeration of ledger entries has no element"", readEntry.hasMoreElements() == true);
                    LedgerEntry e = readEntry.nextElement();
                    assertEquals(toRead, e.getEntryId());
                    Assert.assertArrayEquals(entries.get(toRead), e.getEntry());
                    // should not written to a read only ledger
                    try {
                        lhOpen.addEntry(entry.array());
                        fail(""Should have thrown an exception here"");
                    } catch (BKException.BKIllegalOpException bkioe) {
                        // this is the correct response
                    } catch (Exception ex) {
                        LOG.error(""Unexpected exception"", ex);
                        fail(""Unexpected exception"");
                    }

                }
            }
            long last = lh.readLastConfirmed();
            assertTrue(""Last confirmed add: "" + last, last == (numEntriesToWrite - 2));

            LOG.debug(""*** WRITE COMPLETE ***"");
            // close ledger
            lh.close();
            // close read only ledger should not change metadata
            lhOpen.close();
        } catch (BKException e) {
            LOG.error(""Test failed"", e);
            fail(""Test failed due to BookKeeper exception"");
        } catch (InterruptedException e) {
            LOG.error(""Test failed"", e);
            fail(""Test failed due to interruption"");
        }
    }
{code}


I am getting it failing, as I understand, because of ""lastEntry > lastAddConfirmed"" check.
{code:title=LedgerHandle.java|borderStyle=solid}
    public void asyncReadEntries(long firstEntry, long lastEntry,
                                 ReadCallback cb, Object ctx) {
        // Little sanity check
        if (firstEntry < 0 || lastEntry > lastAddConfirmed
                || firstEntry > lastEntry) {
            cb.readComplete(BKException.Code.ReadException, this, null, ctx);
            return;
        }
...
{code}

So looks like recreation of ledger landle is required every read iteration.

Is it expected?


","07/Feb/12 11:46;fpj;Philipp, Can you generate a patch with your new test, please?","07/Feb/12 11:47;philipp.sushkin;Also reproduced situation where noRecover reader always getting 0 .

Unfortunately, I cannot reproduce it using bookkeeper test, only with my app. Currently trying to investigate where I could fail.

Attaching log:
Writer sends 2 entries with simple content '1', '2'
Reader tries to read lh.readLastConfirmed(), but always getting 0.

",07/Feb/12 11:57;philipp.sushkin;Please find patch with test attached.,"07/Feb/12 12:07;philipp.sushkin;I am confused, now it is passing...
Either it happens from time to time, or something was corrupted when I was writing it. 
",07/Feb/12 12:12;fpj;Uploading patch that fixes this issue. It includes the test Philipp provided.,"07/Feb/12 12:12;philipp.sushkin;Please find new patch attached, now test failing.","07/Feb/12 12:16;fpj;As you pointed out, the current test in trunk reopens the ledger every time, and it passes if you reopen because we set the lastAddConfirmed value to the max value read from bookies. A second read should fail if you keep reading because the lastEntry the call requests may be larger than the lastAddConfirmed, which is not updated. The patch I provided fixes this issue.","07/Feb/12 12:18;philipp.sushkin;Same patch, but reverted constructor change (I don't use Parametrized test, ofcourse).","07/Feb/12 12:27;philipp.sushkin;>> The patch I provided fixes this issue.

Thanks a lot.
",07/Feb/12 12:57;fpj;I have refined the test a bit. ,"07/Feb/12 13:20;philipp.sushkin;I started to debug and do have small question.

Same case 1 writer, 1 reader.
Reader tries to request lastAddConfirmed.

On server side I see there is header:
{panel}
[1, 2, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 2,
 -1, -1, -1, -1, -1, -1, -1, -1]
{panel}

built in BookieServer
{code:title=BookieServer.java|borderStyle=solid}
    private ByteBuffer buildResponse(int errorCode, byte version, byte opCode, long ledgerId, long entryId) {
        ByteBuffer rsp = ByteBuffer.allocate(24);
        rsp.putInt(new PacketHeader(version, 
                                    opCode, (short)0).toInt());
        rsp.putInt(errorCode);
        rsp.putLong(ledgerId);
        rsp.putLong(entryId);

        rsp.flip();
        return rsp;
    }
{code}

EntryId here -1, because I was requesting last confirmed.
Request looked like
{panel}
[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1]
{panel}

Also data itself
{code:title=EntryLogger.java|borderStyle=solid}
byte[] readEntry(long ledgerId, long entryId, long location) throws IOException {
...
        byte data[] = new byte[entrySize];
        ByteBuffer buff = ByteBuffer.wrap(data);
        int rc = fc.read(buff, pos);
 ...
    }
{code}
I see data itself
{panel}
 [0, 0, 0, 0, 0, 0, 0, 2,
 0, 0, 0, 0, 0, 0, 0, 1,
 -1, -1, -1, -1, -1, -1, -1, -1,
 0, 0, 0, 0, 0, 0, 0, 2,
 -16, 41, -22, 25, 26, 93, -80, -40, -80, -15, 7, -36, 72, -52, 13, -54, 39, 117, 12, -56, 2]
{panel}

On client in 
{code:title=DigestManager.java|borderStyle=solid}
    RecoveryData verifyDigestAndReturnLastConfirmed(ChannelBuffer dataReceived) throws BKDigestMatchException {
        verifyDigest(dataReceived);
        dataReceived.readerIndex(8);

        long entryId = dataReceived.readLong();
        long lastAddConfirmed = dataReceived.readLong();
        long length = dataReceived.readLong();
        return new RecoveryData(lastAddConfirmed, entryId);

    }
{code}

I see (reader offset 32 after ""dataReceived.readerIndex(8);"" - *adjustm. 24 + 8)
{panel}
[1, 2, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 2,
 -1, -1, -1, -1, -1, -1, -1, -1, 
 0, 0, 0, 0, 0, 0, 0, 2,  < ledgerId
 0, 0, 0, 0, 0, 0, 0, 1,  < long entryId = dataReceived.readLong();
 -1, -1, -1, -1, -1, -1, -1, -1, < long lastAddConfirmed = dataReceived.readLong(); *PROBLEM HERE*
 0, 0, 0, 0, 0, 0, 0, 2,
 -16, 41, -22, 25, 26, 93, -80, -40, -80, -15, 7, -36, 72, -52, 13, -54, 39, 117, 12, -56, 2]
{panel}


So, am I right: lastAddConfirmed is a part of record, not calculated on request?
","07/Feb/12 13:39;fpj;It is safer to check if the maxAddConfirmed is larger than lastAddConfirmed before setting. I realized that if the ledger writer invokes it, the patch may set lastAddConfirmed incorrectly. ","07/Feb/12 16:46;fpj;Yes, we write lastAddConfirmed upon every add. No bookie alone knows whether an add has been confirmed to the client application or not.","08/Feb/12 04:13;philipp.sushkin;So my problem - using async adds. That is why LedgerHandle.readLastConfirmed returns 0.
In fact, as I understand, it is not correct anyway. It should be -1 in this case (everybookie returned -1) ...

For my particular problem - will try to to send empty messages periodically just to maintain
LedgerHandle.readLastConfirmed working on readers...
","08/Feb/12 08:06;hustlmsp;hmm. currently readLastConfirmed doesn't work correctly in following case:

1) there is no entries in the ledger, readLastConfirmed returns 0.
2) there is 1 entries in the ledger, readLastConfirmed returns 0.

this issue is caused by giving a wrong initial value (0) for maxAddConfirmed in ReadLastConfirmedOp.

the expected value would be better as below: 

1) there is no entries in the ledger, readLastConfirmed returns -2.
2) there is 1 entry in the ledger, readLastConfirmed returns -1.

what is your opinion, flavio?","08/Feb/12 08:10;hustlmsp;BTW, if a ledger is closed, readLastConfirmedOp would return wrong last confirmed.
we should check a ledger when reading last confirmed. if the ledger is closed, we use the close value in ledger metadata as last confirmed directly, we don't need read it again.

I think this is also a bug related to readLastConfirmed. it is better to fix it in this jira.","08/Feb/12 08:15;fpj;Agreed, it shouldn't return 0 when the ledger is empty. In the case the ledger has one element, it should still return -1 (empty) according to the semantics of the call. readLastConfirmed returns the maximum hint across all bookies, and the hint for a ledger is the value of the last confirmed field in the last entry it wrote. Consequently, if there is only one entry written, the hint will say that there is no add confirmed before that one, which is correct.

Perhaps if you need to know precisely which entries have been confirmed, you may want to have the writer communicating to the readers though ZooKeeper or directly (e.g., TCP). The readLastConfirmed mechanism gives an approximation of the state of the ledger, and is particularly useful when writing streams continuously. 

If you can say more about your use case, we may be able to help you decide, Philipp.",08/Feb/12 08:36;fpj;I'll fix the initialization issue and resubmit the patch.,"08/Feb/12 08:38;fpj;About the point on readLastConfirmed, I don't think that's a bug. This call gets the hints from the bookies. There is a similar call that simply reads the local value of the ledger handle once the ledger is open.","08/Feb/12 08:47;hustlmsp;hmm, I think it would be better to add more documents in readLastConfirmed to tell the difference between readLastConfirmed and getLastAddConfirmed. otherwise the different return value would make user confused. ","08/Feb/12 08:56;fpj;Check the API docs: http://zookeeper.apache.org/bookkeeper/docs/r4.0.0/apidocs/

I don't mind having more documentation added if it is not clear the distinction. ",08/Feb/12 09:21;hustlmsp;seems the document is not so clear. It would better to add more :),08/Feb/12 15:55;fpj;Fixed the initialization problem.,"09/Feb/12 07:23;hustlmsp;thanks Flavio. most of the patch is good to me, except that you import LedgerHandle in PerChannelBookieClient and BookKeeperTestClient in BookieReadWriteTest, these two classes are not used, and in ReadLastConfirmedOp.java why you don't use Math.max ?","09/Feb/12 08:08;fpj;Thanks, Sijie. Not using max was part of debugging. I've put it back.

The reference to LedgerHandle in PerChannelBookieCliet is due to the constant LAST_ADD_CONFIRMED that I moved to BookieProtocol. I think we forgot to move it when we wrote BookieProtocol. To me at least it makes more sense there, though.

The reference to BookKeeperTestClient was a leftover from Philipp's patch that I forgot to remove when I cleaned it up.

I'm attaching a new patch that fixes all these.",09/Feb/12 10:35;hustlmsp;the new patch is good to me. +1,"09/Feb/12 12:14;fpj;Thanks, Sijie. If no one else has an issue with this patch, I'll commit it later today.",13/Feb/12 10:20;fpj;Committed revision 1243462.,"13/Feb/12 10:39;hudson;Integrated in bookkeeper-trunk #356 (See [https://builds.apache.org/job/bookkeeper-trunk/356/])
    BOOKKEEPER-162: LedgerHandle.readLastConfirmed does not work (fpj) (Revision 1243462)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java
","13/Feb/12 11:15;fpj;Thanks for reporting and helping, Philipp.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"PerChannelBookieClient tries to reuse HashedWheelTimer, throws Exception",BOOKKEEPER-161,12541447,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,06/Feb/12 17:10,22/Oct/12 14:50,14/Mar/19 02:39,07/Feb/12 10:05,,,4.1.0,,,,,,0,,"A hashedWheelTimer can only be stopped once, but in the current implementation, only one HashedWheelTimer is used per PerChannelBookieClient which can connect and disconnect many time. Currently stop the hashWheelTimer any time a channel is disconnected, but only create it once in the constructor. This causes exceptions to be thrown in the netty callback thread.",,,,,,,,,,,,,,,,,,,06/Feb/12 17:34;ikelly;BOOKKEEPER-161.diff;https://issues.apache.org/jira/secure/attachment/12513453/BOOKKEEPER-161.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-07 03:18:28.234,,,no_permission,,,,,,,,,,,,,226734,,,Tue Feb 07 10:34:37 UTC 2012,,,,,,0|i0axdr:,61681,,,,,,,,07/Feb/12 03:18;hustlmsp;it looks good to me. +1,"07/Feb/12 10:05;ikelly;Committed as r1241404, thanks Sijie","07/Feb/12 10:34;hudson;Integrated in bookkeeper-trunk #347 (See [https://builds.apache.org/job/bookkeeper-trunk/347/])
    BOOKKEEPER-161: PerChannelBookieClient tries to reuse HashedWheelTimer, throws Exception (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieJournalRollingTest failing ,BOOKKEEPER-156,12540288,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,fpj,fpj,29/Jan/12 10:40,22/Oct/12 14:50,14/Mar/19 02:39,08/Feb/12 10:41,4.0.0,,4.1.0,,,,,,0,,The test fails for me intermittently. ,,,,,,,,,,,,,,,,,,,02/Feb/12 03:00;hustlmsp;BK-156.diff;https://issues.apache.org/jira/secure/attachment/12512906/BK-156.diff,01/Feb/12 13:29;fpj;org.apache.bookkeeper.test.BookieJournalRollingTest-output.txt;https://issues.apache.org/jira/secure/attachment/12512752/org.apache.bookkeeper.test.BookieJournalRollingTest-output.txt,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-01 14:41:56.553,,,no_permission,,,,,,,,,,,,,225701,,,Wed Feb 08 11:22:20 UTC 2012,,,,,,0|i0axkv:,61713,,,,,,,,"29/Jan/12 11:02;fpj;I haven't turned on logging, so I only have the exception thrown for now:

{noformat}
-------------------------------------------------------------------------------
Test set: org.apache.bookkeeper.test.BookieJournalRollingTest
-------------------------------------------------------------------------------
Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 46.702 sec <<< FAILURE!
testJournalRollingWithoutSyncup[0](org.apache.bookkeeper.test.BookieJournalRollingTest)  Time elapsed: 1.887 sec  <<< ERROR!
org.apache.bookkeeper.client.BKException$ZKException
        at org.apache.bookkeeper.client.BKException.create(BKException.java:64)
        at org.apache.bookkeeper.client.BookKeeper.createLedger(BookKeeper.java:293)
        at org.apache.bookkeeper.client.BookKeeper.createLedger(BookKeeper.java:260)
        at org.apache.bookkeeper.test.BookieJournalRollingTest.writeLedgerEntries(BookieJournalRollingTest.java:79)
        at org.apache.bookkeeper.test.BookieJournalRollingTest.testJournalRollingWithoutSyncup(BookieJournalRollingTest.java:206)
{noformat}

The creation of the ledger is failing, but this is not giving the exact error code. I'll run it again with logging on to see if we can get the error code. I suspect that it could be because the bookie servers have not started (restartBookies call) by the time we try to create the ledger in that test. 

",01/Feb/12 13:29;fpj;Adding log output for a run that failed.,"01/Feb/12 14:41;hustlmsp;hmm, it seems that 3 bookie are up but bkc can't read enough bookies.

in BaseTestCase#startNewBookie, it waits until the bookie znode is available. but it didn't in BaseTestCase#restartBookies.

{code}
    protected void startNewBookie(int port)
            throws IOException, InterruptedException, KeeperException {
        File f = File.createTempFile(""bookie"", ""test"");
        tmpDirs.add(f);
        f.delete();
        f.mkdir();

        ServerConfiguration conf = newServerConfiguration(port, HOSTPORT, f, new File[] { f }); 

        BookieServer server = new BookieServer(conf);
        server.start();
        bs.add(server);

        while(bkc.getZkHandle().exists(""/ledgers/available/"" + InetAddress.getLocalHost().getHostAddress() + "":"" + port,    false) == null) {
            Thread.sleep(500);
        }   

        bkc.readBookiesBlocking();
        LOG.info(""New bookie on port "" + port + "" has been created."");
    } 
{code}

change #restartBookies to use #startNewBookie may resolve this issue.","01/Feb/12 15:39;fpj;I'm not sure if this a problem anymore. I ran it in a computer with little memory and apparently it caused the same problem in other tests as well. After killing some apps and getting memory back, I can't reproduce the problem. But, if we should be using #startNewBookie instead, then I suggest we make the change. What do you think?","02/Feb/12 03:00;hustlmsp;I agree to make the change which make the test more robust. 

Attach a patch of this change.",08/Feb/12 10:41;ikelly;Committed as 1241855,"08/Feb/12 11:22;hudson;Integrated in bookkeeper-trunk #349 (See [https://builds.apache.org/job/bookkeeper-trunk/349/])
    BOOKKEEPER-156: BookieJournalRollingTest failing (Sijie Guo via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledger can't be opened or closed due to zero-length metadata,BOOKKEEPER-153,12538479,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,16/Jan/12 07:05,22/Oct/12 14:50,14/Mar/19 02:39,18/Jan/12 14:13,4.0.0,,4.1.0,,,bookkeeper-client,,,0,,"Currently creating ledger path and writing ledger metadata are not in a transaction. so if the bookkeeper client (hub server uses bookkeeper client) is crashed, we have a ledger existed in zookeeper with zero-length metadata. we can't open/close it.

we should create the ledger path with initial metadata to avoid such case. besides that, we need to add code in openLedgerOp to handle zero-length metadata for backward compatibility.

",,,,,,,,,,,,,,,,,,,16/Jan/12 14:56;hustlmsp;BK-153.patch;https://issues.apache.org/jira/secure/attachment/12510709/BK-153.patch,18/Jan/12 11:17;hustlmsp;BK-153.patch_v2;https://issues.apache.org/jira/secure/attachment/12510973/BK-153.patch_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-01-16 08:59:15.539,,,no_permission,,,,,,,,,,,,,223983,,,Wed Jan 18 14:13:20 UTC 2012,,,,,,0|i0axav:,61668,,,,,,,,"16/Jan/12 08:59;fpj;Hi Sijie, I'm not sure how adding the metadata when creating the znode avoids such cases. If a bookkeeper client creates a ledger and crashes before writing anything, then that ledger is clearly useless, so we just need to be able to identify and get rid of it.

Perhaps the idea you're trying to convey is that if the metadata is written there, then we can at execute the regular operations over the ledger, like open and delete. Is it the case?","16/Jan/12 11:41;hustlmsp;currently flow of creation is

1) create a zero-length bytes znode in zookeeper
2) allocate an ensemble to add it to ledger metadata, write it to the created znode
3) return the created ledger handle

why not 

1) allocate an ensemble first 
2) create a znode with the initial metadata in zookeeper (this creation could make adding metadata and creating znode in a same transaction)


for backward compatibility, there exists zero-length metadata before. we should let regular operations (such as open / openNoRecovery ) can execute over such ledgers.","16/Jan/12 11:49;fpj;I think we have done it for simplicity, since we rely upon writeLedgerConfig to write ledger metadata, and writeLedgerConfig only invokes setData. I agree that it has the issue you're raising, though.

If we keep relying upon writeLedgerConfig for writing the ledger metadata, then we will have a separation between creating it initially and writing the metadata (non-atomic). To fix the problem you're raising, it sounds like we have to either modify writeLedgerConfig or have a different code path for the initial write.","16/Jan/12 14:55;hustlmsp;we don't need to modify writeLedgerConfig. we need to change the flow of LedgerCreateOp to pass initial metadata when creating ledger path.

besides that, we need to change LedgerOpenOp to handle zero-length metadata when parsing ledger metadata.

I created a patch to fix it.
","17/Jan/12 11:50;ikelly;The changes to LedgerCreateOp are nice. They simplify it a lot. I don't like the changes to LedgerOpenOp though. The LedgerCreateOp should stop this from happening, so now it should only happen in some sort of rare corruption case. I think it's better just to throw the IOException in this case rather than handling a special case of data.length==0 in numerous places. I assume parseLedgerConfig does throw a IOException when the data is empty.
","17/Jan/12 13:52;hustlmsp;yes parseLedgerConfig did throw an IOException.

since the bug is found in hub server, topic can't be acquired due to hub server can't closing such kind ledger. if we don't add code in LedgerOpenOp, we have to find all such kind ledgers and handle them manually (maybe delete them). throwing IOException here is OK for me. but I am not sure do we need to keep backward compatibility to handle data/metadata produced by old version. what is your opinion?","17/Jan/12 15:27;ikelly;but the case of the topic being mapped to a ledger whose metadata is empty shouldn't exist anymore due to the fix in LedgerCreateOp. Of course, something else could break the metadata, but it won't be our code. 

My problem with the LedgerOpenOp changes are that they add a special case, and a fair bit of code, for a condition that should never happen. ","18/Jan/12 00:03;hustlmsp;I don't like the changes in LedgerOpenOp either. 

The ledgers created using this patch would never encounter such problem. My concern is that the data/metadata generated by old code, do we need to handle them in new code? The zero-length-metadata ledgers did exist in the system using BOOKKEEPER-4.0.0. How we handle them when user upgrade it from 4.0.0 to 4.1.0?","18/Jan/12 10:56;hustlmsp;discussed with Ivan offline, these ledgers are orphan ledgers (failed creation), which only affect recovery tool. It would be better to handle such kind of ledgers in recovery tool. so I would remove code changes in LedgerOpenOp and create another jira to handle it in recovery tool.",18/Jan/12 11:17;hustlmsp;remove codes change in LedgerOpenOp,"18/Jan/12 14:13;ikelly;+1 for the new patch.

Committed r1232890. Thanks Sijie.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't recover a ledger whose current ensemble contain failed bookie.,BOOKKEEPER-152,12538035,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,11/Jan/12 10:10,02/May/13 02:29,14/Mar/19 02:39,13/Feb/12 14:47,4.0.0,,4.1.0,,,bookkeeper-client,,,0,,"Suppose we have a unclosed ledger L, whose ensemble size is 2, quorum size is 2. the ledger's current ensemble is <bk1, bk2>.

bk2 is crashed. 

we use recovery tool to recover entries in bk2. $ bookkeeper-server/bin/bookkeeper org.apache.bookkeeper.tools.BookKeeperTools bk2 

recovery failed due to recovery tool can't open ledger L, since ledger L doesn't have enough quorum to readLastConfirmed entry. (asyncOpenLedgerNoRecovery)








",,,,,,,,,,,,,,,,,,,11/Jan/12 12:18;hustlmsp;BK-152.draft.patch;https://issues.apache.org/jira/secure/attachment/12510177/BK-152.draft.patch,13/Feb/12 12:15;ikelly;BOOKKEEPER-152.diff;https://issues.apache.org/jira/secure/attachment/12514344/BOOKKEEPER-152.diff,13/Feb/12 10:18;ikelly;BOOKKEEPER-152.diff;https://issues.apache.org/jira/secure/attachment/12514333/BOOKKEEPER-152.diff,10/Feb/12 15:22;ikelly;BOOKKEEPER-152.diff;https://issues.apache.org/jira/secure/attachment/12514110/BOOKKEEPER-152.diff,10/Feb/12 10:34;ikelly;BOOKKEEPER-152.diff;https://issues.apache.org/jira/secure/attachment/12514095/BOOKKEEPER-152.diff,10/Feb/12 09:47;ikelly;BOOKKEEPER-152.diff;https://issues.apache.org/jira/secure/attachment/12514091/BOOKKEEPER-152.diff,02/Feb/12 18:18;ikelly;BOOKKEEPER-152.diff;https://issues.apache.org/jira/secure/attachment/12513011/BOOKKEEPER-152.diff,,,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2012-02-02 11:01:03.593,,,no_permission,,,,,,,,,,,,,223541,,,Mon Feb 13 14:47:26 UTC 2012,,,,,,0|i0axh3:,61696,,,,,,,,"11/Jan/12 12:18;hustlmsp;attach a draft patch.

the idea is to add a excluded list of bookies when openLedgerNoRecovery. If the excluded bookie is in the quorum set which maxAddConfirmed entry belongs to, bookie client just needs to wait quorumSize-n responses when readLastConfirmed.

then in recovery tool, we can pass the failed bookie as excluded bookies.

how is your opinion?
",02/Feb/12 11:01;ikelly;I think a simpler solution to this is to modify LedgerRecoveryOp to access timeout as a valid response. Then the quorum checking should take care of the rest. I'll test this hypothesis later.,"02/Feb/12 11:42;ikelly;It appears that ReadLastConfirmedOp isn't actually correct. It duplicates code from RecoverLedgerOp but doesn't check that all quorums have replied, just that the number of responses is the same as quorum size. In practice, this isn't a big issue, but the code for checking the last confirmed entry should be common, so I'll merge them.","02/Feb/12 12:52;hustlmsp;> modify LedgerRecoveryOp to access timeout as a valid response

If I remember correctly, if a bookie is crashed, the operation would return could not connect exception not timeout exception.","02/Feb/12 18:18;ikelly;Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed. 

Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.

The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.

There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.","02/Feb/12 18:20;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.

Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.

The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.

There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.


This addresses bug BOOKKEEPER-152.
    https://issues.apache.org/jira/browse/BOOKKEEPER-152


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 547e240 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java ded1379 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java db1a763 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 

Diff: https://reviews.apache.org/r/3737/diff


Testing
-------


Thanks,

Ivan

","07/Feb/12 11:59;hustlmsp;BOOKKEEPER-163 and BOOKKEEPER-164 has been created to prevent incorrect responses to avoid reading wrong last confirmed. so I think we can let the jira go first, since the bug here is more related to logic of reading last confirmed as Ivan stated. ",10/Feb/12 09:47;ikelly;Brought up to trunk,"10/Feb/12 09:47;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/
-----------------------------------------------------------

(Updated 2012-02-10 09:47:35.723185)


Review request for bookkeeper.


Summary
-------

Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.

Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.

The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.

There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.


This addresses bug BOOKKEEPER-152.
    https://issues.apache.org/jira/browse/BOOKKEEPER-152


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 

Diff: https://reviews.apache.org/r/3737/diff


Testing
-------


Thanks,

Ivan

","10/Feb/12 10:15;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/#review5006
-----------------------------------------------------------


most is good to me. but it seems that you didn't assign right last confirmed value in readLastConfirmedOp callback.


bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
<https://reviews.apache.org/r/3737/#comment11009>

    actually the result is not maxAddConfirmed, is lastAddConfirmed. maxAddConfirmed is member parameter in LedgerRecoveryOp.


- Sijie


On 2012-02-10 09:47:35, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3737/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-10 09:47:35)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.
bq.  
bq.  Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.
bq.  
bq.  The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.
bq.  
bq.  There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-152.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-152
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.  
bq.  Diff: https://reviews.apache.org/r/3737/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","10/Feb/12 10:33;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/
-----------------------------------------------------------

(Updated 2012-02-10 10:33:25.397382)


Review request for bookkeeper.


Summary
-------

Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.

Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.

The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.

There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.


This addresses bug BOOKKEEPER-152.
    https://issues.apache.org/jira/browse/BOOKKEEPER-152


Diffs (updated)
-----

  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 

Diff: https://reviews.apache.org/r/3737/diff


Testing
-------


Thanks,

Ivan

","10/Feb/12 10:35;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/#review5007
-----------------------------------------------------------

Ship it!


+1. thanks Ivan.

- Sijie


On 2012-02-10 10:33:25, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3737/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-10 10:33:25)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.
bq.  
bq.  Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.
bq.  
bq.  The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.
bq.  
bq.  There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-152.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-152
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.  
bq.  Diff: https://reviews.apache.org/r/3737/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

",10/Feb/12 15:22;ikelly;The previous patch wasn't passing all tests. LedgerRecoveryTest was failing. This one fixes that problem.,"10/Feb/12 15:24;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/
-----------------------------------------------------------

(Updated 2012-02-10 15:23:20.842439)


Review request for bookkeeper.


Summary
-------

Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.

Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.

The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.

There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.


This addresses bug BOOKKEEPER-152.
    https://issues.apache.org/jira/browse/BOOKKEEPER-152


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java ae375ec 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 

Diff: https://reviews.apache.org/r/3737/diff


Testing
-------


Thanks,

Ivan

","12/Feb/12 08:34;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/#review5029
-----------------------------------------------------------


ah, thanks Ivan for fixing the wrong assignment of ledger length. 
the new patch is good to me. but I don't like the new callback name 'RecoveredDataCallback', which sounds like that the data is returned by some recovery actions although it doesn't. This data is retrieved by reading last confirmed without recovery. I prefer changing this callback to 'ReadLastConfirmedDataCallback' and the method to 'readLastConfirmedDataComplete'. 

- Sijie


On 2012-02-10 15:23:20, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3737/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-10 15:23:20)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.
bq.  
bq.  Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.
bq.  
bq.  The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.
bq.  
bq.  There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-152.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-152
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java ae375ec 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 
bq.  
bq.  Diff: https://reviews.apache.org/r/3737/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","13/Feb/12 10:18;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/
-----------------------------------------------------------

(Updated 2012-02-13 10:18:44.480209)


Review request for bookkeeper.


Summary
-------

Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.

Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.

The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.

There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.


This addresses bug BOOKKEEPER-152.
    https://issues.apache.org/jira/browse/BOOKKEEPER-152


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java ae375ec 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 

Diff: https://reviews.apache.org/r/3737/diff


Testing
-------


Thanks,

Ivan

","13/Feb/12 10:48;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/#review5050
-----------------------------------------------------------

Ship it!


+1

- Sijie


On 2012-02-13 10:18:44, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3737/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-13 10:18:44)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.
bq.  
bq.  Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.
bq.  
bq.  The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.
bq.  
bq.  There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-152.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-152
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java ae375ec 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java e3d1847 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 
bq.  
bq.  Diff: https://reviews.apache.org/r/3737/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

",13/Feb/12 12:15;ikelly;Hopefully the final patch for this JIRA. Resolves the conflicts with BOOKKEEPER-162.,"13/Feb/12 12:16;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3737/
-----------------------------------------------------------

(Updated 2012-02-13 12:16:12.769117)


Review request for bookkeeper.


Summary
-------

Proposed fix ensures that at least one of each quorum replies to ReadLastConfirmed.

Refactors code a bit to make the read last confirmed common for recovery and standalone read last confirmed.

The bug here was actually that we were waiting for quorumSize responses, from the bookies, when really all we need to get a response from one bookie in each possible quorum. in the 2/2 case as above this means only 1 bookie need response.

There's a fix for the timeouts and an improvement in fencing which fixing this uncovered.


This addresses bug BOOKKEEPER-152.
    https://issues.apache.org/jira/browse/BOOKKEEPER-152


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java ae375ec 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java f2ed6bd 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java d6ade83 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java db2f782 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java f5f0523 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java 4a88747 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 0064e24 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java da52ca5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java 5873255 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java 77a2f69 

Diff: https://reviews.apache.org/r/3737/diff


Testing
-------


Thanks,

Ivan

",13/Feb/12 13:17;hustlmsp;yeah. I am ok with the final patch :) +1,13/Feb/12 14:47;ikelly;Committed as r1243539. Thanks for all the reviews Sijie.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Entry is lost when recovering a ledger with not enough bookies.,BOOKKEEPER-150,12537054,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,03/Jan/12 14:43,22/Oct/12 14:50,14/Mar/19 02:39,17/Jan/12 15:52,4.0.0,,4.1.0,,,bookkeeper-client,,,0,,"suppose a ledger is created as ensemble size 3 and quorum size 3.
3 entries is added in this ledger, entry ids are 0, 1, 2.

this ledger is not closed. then a bookie server is down.

the ledger is opened. it would be recovered in following steps:
1) retrieve LAC from all bookie ensemble to get maxAddConfirmed. then maxAddPushed would be 2 and maxAddConfirmed would be 1. then lastAddConfirmed would be 1.
2) doRecovery read lastAddConfirmed + 1 (2). it would return right data since there is still 2 replicas.
3) doRecovery add entry 2. but it would fail since there is not enough bookies to form a new ensemble.
4) this ledger will be closed with lastAddConfirmed (1). entry 2 will be lost.

this issue happened in hub server. old ledger will be recovered and closed when changing ownership. so published messages would be lost.

we should not close ledger when we encountered exception during recovery adding, otherwise we would lose entries.",,,,,,,,,,,,,,,,,,,03/Jan/12 14:46;hustlmsp;BOOKKEEPER-150.patch;https://issues.apache.org/jira/secure/attachment/12509295/BOOKKEEPER-150.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-03 22:09:38.98,,,no_permission,,,,,,,,,,,,,222564,,,Tue Jan 17 16:31:36 UTC 2012,,,,,,0|i0axdj:,61680,,,,,,,,03/Jan/12 14:46;hustlmsp;Attach a patch. including a test case to reproduce this issue and the code to fix it.,"03/Jan/12 22:09;fpj;I agree, it sounds wrong to close the ledger in that case.","17/Jan/12 15:52;ikelly;+1

Committed r1232448.
Thanks Sijie.","17/Jan/12 16:31;hudson;Integrated in bookkeeper-trunk #320 (See [https://builds.apache.org/job/bookkeeper-trunk/320/])
    BOOKKEEPER-150: Entry is lost when recovering a ledger with not enough bookies. (Sijie Guo via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jenkins build is failing,BOOKKEEPER-148,12536792,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Jan/12 11:28,22/Oct/12 14:50,14/Mar/19 02:39,11/Jan/12 14:48,,,4.1.0,,,,,,0,,"This is due to running out of DirectBufferMemory in TestFencing which doesn't get garbage collected as normal memory does. TestFencing creates too many BookKeeper client instances, and this is what exhausts the buffers.",,,,,,,,,,,,,,,,,,,02/Jan/12 11:31;ikelly;BOOKKEEPER-148.diff;https://issues.apache.org/jira/secure/attachment/12509040/BOOKKEEPER-148.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-02 11:55:30.63,,,no_permission,,,,,,,,,,,,,222475,,,Wed Jan 11 15:36:46 UTC 2012,,,,,,0|i0axon:,61730,,,,,,,,02/Jan/12 11:31;ikelly;Patch reduces the number of BookKeeper clients created.,"02/Jan/12 11:55;fpj;If I remember correctly, it helped to increase the max heap size when running locally. The machine running jenkins doesn't have enough memory, is it the case? Otherwise, the patch looks good.","02/Jan/12 12:02;ikelly;I did that too. The Jenkins machines have plenty of memory. It could simply be that even though max heap is set to 1G, it can't expand to that as other concurrent builds are taking it.","03/Jan/12 06:25;fpj;It seems to be unrelated, but after applying the patch I'm getting quite consistently failures and errors on BookieClientTest:

{noformat}
-------------------------------------------------------------------------------
Test set: org.apache.bookkeeper.test.BookieClientTest
-------------------------------------------------------------------------------
Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.783 sec <<< FAILURE!
testWriteGaps(org.apache.bookkeeper.test.BookieClientTest)  Time elapsed: 0.422 sec  <<< ERROR!
java.lang.NullPointerException
        at org.apache.bookkeeper.test.BookieClientTest.testWriteGaps(BookieClientTest.java:143)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at junit.framework.TestCase.runTest(TestCase.java:168)
        at junit.framework.TestCase.runBare(TestCase.java:134)
        at junit.framework.TestResult$1.protect(TestResult.java:110)
        at junit.framework.TestResult.runProtected(TestResult.java:128)
        at junit.framework.TestResult.run(TestResult.java:113)
        at junit.framework.TestCase.run(TestCase.java:124)
        at junit.framework.TestSuite.runTest(TestSuite.java:232)
        at junit.framework.TestSuite.run(TestSuite.java:227)
        at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)
        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
        at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
        at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:78)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)

{noformat}

and

{noformat}

-------------------------------------------------------------------------------
Test set: org.apache.bookkeeper.test.BookieClientTest
-------------------------------------------------------------------------------
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.715 sec <<< FAILURE!
testWriteGaps(org.apache.bookkeeper.test.BookieClientTest)  Time elapsed: 0.454 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<0> but was:<-13>
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.failNotEquals(Assert.java:283)
        at junit.framework.Assert.assertEquals(Assert.java:64)
        at junit.framework.Assert.assertEquals(Assert.java:195)
        at junit.framework.Assert.assertEquals(Assert.java:201)
        at org.apache.bookkeeper.test.BookieClientTest.testWriteGaps(BookieClientTest.java:142)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at junit.framework.TestCase.runTest(TestCase.java:168)
        at junit.framework.TestCase.runBare(TestCase.java:134)
        at junit.framework.TestResult$1.protect(TestResult.java:110)
        at junit.framework.TestResult.runProtected(TestResult.java:128)
        at junit.framework.TestResult.run(TestResult.java:113)
        at junit.framework.TestCase.run(TestCase.java:124)
        at junit.framework.TestSuite.runTest(TestSuite.java:232)
        at junit.framework.TestSuite.run(TestSuite.java:227)
        at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)
        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
        at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
        at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:78)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)

{noformat}","03/Jan/12 12:05;ikelly;Looks like it's BOOKKEEPER-40, do you have more logs? In any case, nothing in this patch could possibly be causing this.","11/Jan/12 14:47;fpj;Thanks, Ivan! Committed revision 1230070.","11/Jan/12 15:36;hudson;Integrated in bookkeeper-trunk #312 (See [https://builds.apache.org/job/bookkeeper-trunk/312/])
    BOOKKEEPER-148: Jenkins build is failing (ivank via fpj)

fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestConcurrentTopicAcquisition sometimes hangs,BOOKKEEPER-146,12536048,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,21/Dec/11 16:49,22/Oct/12 14:50,14/Mar/19 02:39,25/May/12 09:48,,,4.1.0,,,,,,0,,"to repro
{code}
while [ $? = 0 ]; do mvn test -Dtest=TestConcurrentTopicAcquisition; done
{code}

The stacktrace where it hangs looks very like BOOKKEEPER-5

{code}
""main"" prio=5 tid=102801000 nid=0x100601000 waiting on condition [1005ff000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <7bd8e1090> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	at java.util.concurrent.ThreadPoolExecutor.awaitTermination(ThreadPoolExecutor.java:1253)
	at org.jboss.netty.util.internal.ExecutorUtil.terminate(ExecutorUtil.java:107)
	at org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory.releaseExternalResources(NioClientSocketChannelFactory.java:143)
	at org.apache.hedwig.client.netty.HedwigClientImpl.close(HedwigClientImpl.java:234)
	at org.apache.hedwig.client.HedwigClient.close(HedwigClient.java:70)
	at org.apache.hedwig.server.topics.TestConcurrentTopicAcquisition.tearDown(TestConcurrentTopicAcquisition.java:99)
	at junit.framework.TestCase.runBare(TestCase.java:140)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)

{code}",,,,,,,,,,,,,,,,,,,17/May/12 17:48;ikelly;BOOKKEEPER-146.diff;https://issues.apache.org/jira/secure/attachment/12527868/BOOKKEEPER-146.diff,16/May/12 15:46;ikelly;BOOKKEEPER-146.diff;https://issues.apache.org/jira/secure/attachment/12527639/BOOKKEEPER-146.diff,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-03-13 11:50:51.178,,,no_permission,,,,,,,,,,,,,221731,,,Fri May 25 12:28:26 UTC 2012,,,,,,0|i0axen:,61685,,,,,,,,13/Mar/12 11:50;fpj;Keeping this one for 4.1.0.,28/Apr/12 12:18;fpj;Reassigning to Sijie.,09/May/12 09:06;fpj;Is the issue here caused by the problem we had in BOOKKEEPER-5?,"09/May/12 09:26;ikelly;Similar, but not the same thing. Netty Channels are being created, but sometimes left dangling. It's mostly not a race as in BOOKKEEPER-5. There are some callbacks which get the channel and then create a new one without closing the old one.","09/May/12 09:51;hustlmsp;@Flavio, what Ivan mentioned is right, seems that it is caused by some un-referenced channels. I was trying to find and close them.","16/May/12 15:46;ikelly;It's been running in a loop for 30 minutes now, and doesn't seem to be hanging. Main problem was that even after the hedwig client was closed, a subscription request could succeed and add a channel to the channel list, though hedwig client had already moved by the point at which it closed them.","16/May/12 15:50;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/5144/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

It's been running in a loop for 30 minutes now, and doesn't seem to be hanging. Main problem was that even after the hedwig client was closed, a subscription request could succeed and add a channel to the channel list, though hedwig client had already moved by the point at which it closed them.


This addresses bug BOOKKEEPER-146.
    https://issues.apache.org/jira/browse/BOOKKEEPER-146


Diffs
-----

  hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java 0c8634c 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java a8552f4 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java 603766c 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java f5077b0 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java 806cdef 

Diff: https://reviews.apache.org/r/5144/diff


Testing
-------


Thanks,

Ivan

","17/May/12 05:03;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/5144/#review7950
-----------------------------------------------------------


thanks Ivan. the patch seems great. just some slight comments.


hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java
<https://reviews.apache.org/r/5144/#comment17288>

    it would be better to move line 'closed = true;' to the top of close(). because you used closed to avoid new channel being storeHost2ChannelMapping.



hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
<https://reviews.apache.org/r/5144/#comment17289>

    do we need to put the closing logic in closeLock synchronization block?
    
    if we had acquired closeLock and set closed to true, no channel could be put into topicSubscriber2Channel again.


- Sijie


On 2012-05-16 15:48:50, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/5144/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-05-16 15:48:50)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  It's been running in a loop for 30 minutes now, and doesn't seem to be hanging. Main problem was that even after the hedwig client was closed, a subscription request could succeed and add a channel to the channel list, though hedwig client had already moved by the point at which it closed them.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-146.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-146
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java 0c8634c 
bq.    hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java a8552f4 
bq.    hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java 603766c 
bq.    hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java f5077b0 
bq.    hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java 806cdef 
bq.  
bq.  Diff: https://reviews.apache.org/r/5144/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

",17/May/12 17:48;ikelly;Addressed Sijie's comments in new patch.,"17/May/12 17:50;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/5144/
-----------------------------------------------------------

(Updated 2012-05-17 17:49:36.598125)


Review request for bookkeeper.


Summary
-------

It's been running in a loop for 30 minutes now, and doesn't seem to be hanging. Main problem was that even after the hedwig client was closed, a subscription request could succeed and add a channel to the channel list, though hedwig client had already moved by the point at which it closed them.


This addresses bug BOOKKEEPER-146.
    https://issues.apache.org/jira/browse/BOOKKEEPER-146


Diffs (updated)
-----

  hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java f5077b0 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java 806cdef 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java 603766c 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java 0c8634c 
  hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java a8552f4 

Diff: https://reviews.apache.org/r/5144/diff


Testing
-------


Thanks,

Ivan

","24/May/12 03:13;hustlmsp;@Ivan, the patch looks good to me. +1",25/May/12 09:48;ikelly;Committed r1342550. Thanks for reviewing Sijie.,"25/May/12 12:28;hudson;Integrated in bookkeeper-trunk #525 (See [https://builds.apache.org/job/bookkeeper-trunk/525/])
    BOOKKEEPER-146: TestConcurrentTopicAcquisition sometimes hangs (ivank) (Revision 1342550)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hub server doesn't subscribe remote region correctly when a region is down.,BOOKKEEPER-140,12534015,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,06/Dec/11 11:31,22/Oct/12 14:50,14/Mar/19 02:39,21/Dec/11 16:43,4.0.0,,4.1.0,,,hedwig-server,,,0,,"Hub server doesn't subscribe remote region correctly in following cases: (assume there is 3 regions, A, B, C)

1. region shuts down before first subscribe.

1) region C is down.
2) subscribe-a subscribe a topic in region A. a subscription state is created in region A's zookeeper. but remote subscribe to region C would fail since region C is down. hub server will respond client that subscribe failed without deleting subscription state. The following subscriptions using same subscribe id and same topic would failed due to NodeExists.

2. region shuts down when attaches existing subscriptions.

1) In region A, there is a local subscriber a for topic T. in region B, subscriber b for topic T. in region B, subscribe c for topic T.
2) servers are all restarted in all three regions. But region C is network-partitioned (or shuts down) from region A and region B.
3) subscriber b and subscribe c try to subscribe T again. hub servers in region B, C will try to remote subscribe region A, but should failed. There is no mechanism to retry remote subscribe. so if messages are published to topic T in region A, subscribe b and subscribe c would receive any message.  ",,,,,,,,,,,,,,,,,,,07/Dec/11 05:35;hustlmsp;BOOKKEEPER-140.patch;https://issues.apache.org/jira/secure/attachment/12506395/BOOKKEEPER-140.patch,06/Dec/11 11:42;hustlmsp;BOOKKEEPER-140.patch;https://issues.apache.org/jira/secure/attachment/12506245/BOOKKEEPER-140.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-12-16 11:07:24.117,,,no_permission,,,,,,,,,,,,,219741,,,Wed Dec 21 17:01:16 UTC 2011,,,,,,0|i0axlj:,61716,,,,,,,,06/Dec/11 11:42;hustlmsp;attach a patch to fix this issue.,07/Dec/11 05:35;hustlmsp;new patch generated with --no-prefix,"16/Dec/11 11:07;ikelly;I don't understand the second scenario in the description, could you double check you've labelled regions and subscribers correctly. 

Otherwise, I need to clarify some things about how cross region should work before properly reviewing the patch, as I don't quite understand how message ordering should work between regions. I've send a mail to bookkeeper-dev about this.","20/Dec/11 03:04;hustlmsp;> the second scenario

As Utkarsh commented in the email,
{quote}
If it's not the first local subscribe, then region A won't be contacted, and
the subscription request will succeed even if region A is down.
{quote}

so if messages are published in region A, subscriber in region B would not receive.

refine the second scenario as below:
{code}
2. region shuts down when attaches existing subscriptions.

1) In region A, there is a local subscriber a for topic T. in region B, local subscriber b for topic T. in region B, local subscribe c for topic T.
2) servers are all restarted in all three regions. But region A is network-partitioned (or shuts down) from region B and region C.
3) subscriber b attach to Topic T in region B. subscriber c attach to Topic T in region C.
4) hub server owns Topic T in region B, would do remote subscription to region A and C. remote subscribe to region A succeed, while remote subscribe to region C would failed. hub server responds SUCCESS to subscriber b. subscriber c did the same thing in region C.
5) region A (restarted / network is connected again) became connected with region B and region C. messages published in region A. But subscribe b and c would never receive any messages.
{code}","21/Dec/11 16:43;ikelly;+1 

Looks good. Committed as r1221798.","21/Dec/11 17:01;hudson;Integrated in bookkeeper-trunk #289 (See [https://builds.apache.org/job/bookkeeper-trunk/289/])
    BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Binary packages do not carry NOTICE.txt,BOOKKEEPER-139,12533675,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Dec/11 19:39,07/Dec/11 15:56,14/Mar/19 02:39,02/Dec/11 20:00,,,4.0.0,,,,,,0,,As summary,,,,,,,,,,,,,,,,,,,02/Dec/11 19:40;ikelly;BOOKKEEPER-139.diff;https://issues.apache.org/jira/secure/attachment/12505922/BOOKKEEPER-139.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-02 19:51:11.368,,,no_permission,,,,,,,,,,,,,219402,,,Fri Dec 02 20:26:35 UTC 2011,,,,,,0|i0u5bz:,174005,,,,,,,,02/Dec/11 19:41;ikelly;Added to assembly.xml. Also removed redundant readme.,02/Dec/11 19:51;dhruba;+1,"02/Dec/11 20:00;ikelly;Committed revision 1209666. (branch-4.0)
Committed revision 1209671. (trunk)","02/Dec/11 20:26;hudson;Integrated in bookkeeper-trunk #267 (See [https://builds.apache.org/job/bookkeeper-trunk/267/])
    BOOKKEEPER-139: Binary packages do not carry NOTICE.txt (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/README.txt
* /zookeeper/bookkeeper/trunk/src/assemble/bin.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NOTICE.txt is invalid,BOOKKEEPER-138,12533666,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Dec/11 18:04,07/Dec/11 15:56,14/Mar/19 02:39,02/Dec/11 19:36,,,4.0.0,,,,,,0,,"As summary says, should be apache copyright. ",,,,,,,,,,,,,,,,,,,02/Dec/11 18:14;ikelly;BOOKKEEPER-138.diff;https://issues.apache.org/jira/secure/attachment/12505915/BOOKKEEPER-138.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-02 19:20:22.034,,,no_permission,,,,,,,,,,,,,219393,,,Fri Dec 02 20:06:11 UTC 2011,,,,,,0|i0u5cf:,174007,,,,,,,,02/Dec/11 18:14;ikelly;Changes notice.,02/Dec/11 19:20;dhruba;+1,"02/Dec/11 19:36;ikelly;Committed revision 1209645 (branch-4.0)
Committed revision 1209650. (trunk)","02/Dec/11 20:06;hudson;Integrated in bookkeeper-trunk #266 (See [https://builds.apache.org/job/bookkeeper-trunk/266/])
    BOOKKEEPER-138: NOTICE.txt is invalid (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/NOTICE.txt
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not create Ledger index files until absolutely necessary.,BOOKKEEPER-137,12533637,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Dec/11 14:58,22/Oct/12 14:50,14/Mar/19 02:39,09/Feb/12 17:15,,,4.1.0,,,,,,0,,"This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.",,,,,,,,,,,,,,,,,,,08/Feb/12 15:53;ikelly;BOOKKEEPER-137.diff;https://issues.apache.org/jira/secure/attachment/12513827/BOOKKEEPER-137.diff,07/Feb/12 18:11;ikelly;BOOKKEEPER-137.diff;https://issues.apache.org/jira/secure/attachment/12513648/BOOKKEEPER-137.diff,27/Jan/12 14:53;ikelly;BOOKKEEPER-137.diff;https://issues.apache.org/jira/secure/attachment/12512172/BOOKKEEPER-137.diff,27/Jan/12 14:26;ikelly;BOOKKEEPER-137.diff;https://issues.apache.org/jira/secure/attachment/12512161/BOOKKEEPER-137.diff,02/Dec/11 17:53;ikelly;BOOKKEEPER-137.diff;https://issues.apache.org/jira/secure/attachment/12505911/BOOKKEEPER-137.diff,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-01-27 14:30:09.789,,,no_permission,,,,,,,,,,,,,219364,,,Thu Feb 09 18:02:11 UTC 2012,,,,,,0|i0axsv:,61749,,,,,,,,"02/Dec/11 17:53;ikelly;This patch is ready to go, but is blocked by BOOKKEEPER-135 & BOOKKEEPER-136","27/Jan/12 14:26;ikelly;This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.

BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.","27/Jan/12 14:30;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.

This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.

BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.


This addresses bug BOOKKEEPER-137.
    https://issues.apache.org/jira/browse/BOOKKEEPER-137


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java d2f959b 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 7403604 

Diff: https://reviews.apache.org/r/3661/diff


Testing
-------


Thanks,

Ivan

","27/Jan/12 14:54;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/
-----------------------------------------------------------

(Updated 2012-01-27 14:54:04.113114)


Review request for bookkeeper.


Changes
-------

There was one compile error fix I hadn't committed.


Summary
-------

This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.

This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.

BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.


This addresses bug BOOKKEEPER-137.
    https://issues.apache.org/jira/browse/BOOKKEEPER-137


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java d2f959b 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 7403604 

Diff: https://reviews.apache.org/r/3661/diff


Testing
-------


Thanks,

Ivan

","04/Feb/12 06:17;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/#review4819
-----------------------------------------------------------



bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
<https://reviews.apache.org/r/3661/#comment10582>

    suppose the code running in journalLayoutVersion=1 directory. the first time is OK, since there would be no meta entries. but the code would add meta entries then. the next time bookie restarts, journalLayoutVersion is still 1, it would throw IOException.
    
    so do we need to upgrade the layout version when we run new code  in old data directories? 



bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
<https://reviews.apache.org/r/3661/#comment10583>

    if a ledger existed before, getHandle would checkAccess  of masterKey, which would call FileInfo#readHeader. Then isMasterKeyPersisted would call FileInfo#readHeader again, which is not necessary. 
    
    I think it would be easy to avoid readHeader twice.


- Sijie


On 2012-01-27 14:54:04, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3661/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-01-27 14:54:04)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.
bq.  
bq.  This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.
bq.  
bq.  BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-137.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-137
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java d2f959b 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 7403604 
bq.  
bq.  Diff: https://reviews.apache.org/r/3661/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","06/Feb/12 09:43;ikelly;{quote}suppose the code running in journalLayoutVersion=1 directory. the first time is OK, since there would be no meta entries. but the code would add meta entries then. the next time bookie restarts, journalLayoutVersion is still 1, it would throw IOException.

so do we need to upgrade the layout version when we run new code in old data directories? {quote}

This is true, I need to add upgrade logic. I may separate this out into another JIRA.

{quote}
if a ledger existed before, getHandle would checkAccess of masterKey, which would call FileInfo#readHeader. Then isMasterKeyPersisted would call FileInfo#readHeader again, which is not necessary.

I think it would be easy to avoid readHeader twice.
{quote}
Im not clear on this point. checkAccess doesn't call #readHeader at all.

","06/Feb/12 10:20;hustlmsp;{quote}
Im not clear on this point. checkAccess doesn't call #readHeader at all.
{quote}

#checkAccess => #getMasterKey => #readHeader","06/Feb/12 11:13;ikelly;Ah yes, you're right, it calls it through #checkOpen. This should be simple to resolve.","07/Feb/12 18:11;ikelly;New patch, addresses Sijie's comments, now only depends on BOOKKEEPER-165
","07/Feb/12 18:14;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/
-----------------------------------------------------------

(Updated 2012-02-07 18:13:15.812700)


Review request for bookkeeper.


Changes
-------

New diff, addresses Sijie's comments. Diffed against trunk with BOOKKEEPER-165 applied.


Summary
-------

This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.

This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.

BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.


This addresses bug BOOKKEEPER-137.
    https://issues.apache.org/jira/browse/BOOKKEEPER-137


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 99b797f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java PRE-CREATION 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 0fc5206 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 2228ab4 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java db1a763 

Diff: https://reviews.apache.org/r/3661/diff


Testing
-------


Thanks,

Ivan

","08/Feb/12 15:39;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/#review4903
-----------------------------------------------------------


most is good to me. thanks Ivan, except a BookieException is missing in BaseTestCase that I commented as below.

and it seems that new patch doesn't fix the readHeader twice problem.


bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
<https://reviews.apache.org/r/3661/#comment10799>

    this patch applied to trunk would compile fail. due to in BOOKKEEPER-156, start bookie action has been put in startBookie function. so it need to add BookieException also in startBookie.


- Sijie


On 2012-02-07 18:13:15, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3661/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-07 18:13:15)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.
bq.  
bq.  This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.
bq.  
bq.  BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-137.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-137
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 99b797f 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 0fc5206 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 2228ab4 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java db1a763 
bq.  
bq.  Diff: https://reviews.apache.org/r/3661/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","08/Feb/12 15:49;jiraposter@reviews.apache.org;

bq.  On 2012-02-08 15:39:47, Sijie Guo wrote:
bq.  > most is good to me. thanks Ivan, except a BookieException is missing in BaseTestCase that I commented as below.
bq.  > 
bq.  > and it seems that new patch doesn't fix the readHeader twice problem.

Ah, will fix the BookieException thing and upload a new patch against trunk.

The readHeader issue has been fixed. It can still be called twice, but if the file has already been opened, it returns immediately.


- Ivan


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/#review4903
-----------------------------------------------------------


On 2012-02-07 18:13:15, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3661/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-07 18:13:15)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.
bq.  
bq.  This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.
bq.  
bq.  BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-137.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-137
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 99b797f 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java PRE-CREATION 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 0fc5206 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 2228ab4 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java db1a763 
bq.  
bq.  Diff: https://reviews.apache.org/r/3661/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","08/Feb/12 15:53;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/
-----------------------------------------------------------

(Updated 2012-02-08 15:53:28.318711)


Review request for bookkeeper.


Changes
-------

Fixed compile error


Summary
-------

This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.

This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.

BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.


This addresses bug BOOKKEEPER-137.
    https://issues.apache.org/jira/browse/BOOKKEEPER-137


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 8abe87a 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java 10ecac7 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 771c0ba 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 2228ab4 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java ae63710 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 9750158 

Diff: https://reviews.apache.org/r/3661/diff


Testing
-------


Thanks,

Ivan

","09/Feb/12 07:57;hustlmsp;hmm, I can't find the code to avoid readHeader twice.

{code}
909     LedgerDescriptor l = getHandle(ledgerId, false, masterKey);	
910	if (!l.isMasterKeyPersisted()) {
{code}

suppose a ledger is existed before but not in cache. then readHeader still be called twice as below:

getHandle => createHandle => lh#checkAccess(masterKey) => the initial masterKey in lh is null, lh gets FileInfo#getMasterKey => no master key in FileInfo => FileInfo#checkOpen => FileInfo#readHeader (yes, it read header).

lh#isMasterKeyPersisted (the initial masterKeyPersisted is false) => it will get FileInfo from LedgerCache => call FileInfo#readHeader (then, it read header again)
","09/Feb/12 08:30;ikelly;#readHeader will be called twice. However, the second call will do nothing, as it will see that fc != null, and return immediately.","09/Feb/12 10:52;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3661/#review4966
-----------------------------------------------------------

Ship it!


thanks Ivan for explanation. the new patch is ok for me. +1 

- Sijie


On 2012-02-08 15:53:28, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3661/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-08 15:53:28)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  This is an optimization to speed up the case where we have many ledgers and are writing to them at random (a benchmark case we currently have). Currently, we create the ledger index file and write the first 1k of it to disk immediately. With a lot of ledgers being randomly written to, this means a lot of random writes on the ledger disk. This fix postpones the creation of the index file and writing of the first 1k until the first flush of the ledger.
bq.  
bq.  This patch includes BOOKKEEPER-136, as they both deal in the same area, and I found it difficult to separate them.
bq.  
bq.  BOOKKEEPER-135 is not required for this patch, and will need modifications after this goes in.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-137.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-137
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 8abe87a 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java fa713c8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java 10ecac7 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 771c0ba 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 728d729 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 2228ab4 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java 5706dd8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java ae63710 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java c7b07e6 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 9750158 
bq.  
bq.  Diff: https://reviews.apache.org/r/3661/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

",09/Feb/12 17:15;ikelly;Committed as r1242404. Thanks for reviewing Sijie.,"09/Feb/12 18:02;hudson;Integrated in bookkeeper-trunk #353 (See [https://builds.apache.org/job/bookkeeper-trunk/353/])
    BOOKKEEPER-137: Do not create Ledger index files until absolutely necessary. (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fencing does not check the ledger masterPasswd,BOOKKEEPER-135,12533597,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Dec/11 11:11,02/May/13 02:29,14/Mar/19 02:39,02/Apr/12 10:38,,,4.1.0,,,,,,0,,"When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.",,,,,,,,,,,,,,,,,,BOOKKEEPER-152,30/Mar/12 16:58;ikelly;BOOKKEEPER-135.diff;https://issues.apache.org/jira/secure/attachment/12520626/BOOKKEEPER-135.diff,20/Mar/12 18:12;ikelly;BOOKKEEPER-135.diff;https://issues.apache.org/jira/secure/attachment/12519102/BOOKKEEPER-135.diff,13/Feb/12 14:52;ikelly;BOOKKEEPER-135.diff;https://issues.apache.org/jira/secure/attachment/12514358/BOOKKEEPER-135.diff,10/Feb/12 18:20;ikelly;BOOKKEEPER-135.diff;https://issues.apache.org/jira/secure/attachment/12514133/BOOKKEEPER-135.diff,26/Jan/12 19:24;ikelly;BOOKKEEPER-135.diff;https://issues.apache.org/jira/secure/attachment/12512023/BOOKKEEPER-135.diff,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-01-26 19:27:39.382,,,no_permission,,,,,,,,,,,,,219325,,,Mon Apr 02 10:52:58 UTC 2012,,,,,,0|i0axmn:,61721,,,,,,,,"26/Jan/12 19:27;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.


This addresses bug BOOKKEEPER-135.
    https://issues.apache.org/jira/browse/BOOKKEEPER-135


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 4466ce3 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java bc1cfb0 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 2fa79bb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 

Diff: https://reviews.apache.org/r/3642/diff


Testing
-------


Thanks,

Ivan

","28/Jan/12 11:01;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/#review4668
-----------------------------------------------------------


If I understand the overall flow right, giving the wrong password will make readEntryAndDoFencing fail in the initiate call of the recovery procedure. It fails because the bookie server checks and returns an error (IOException in BookieServer). I don't fully understand the flow once we determine that the password is incorrect based on the two comments below.


bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
<https://reviews.apache.org/r/3642/#comment10387>

    Is this where we fail the openLedger? If so, by checking the method, it doesn't seem to be using the right code. This is related to my other comment on the exception not being the right one.



bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
<https://reviews.apache.org/r/3642/#comment10385>

    I don't think we currently throw this exception anywhere in the code (BKLedgerRecoveryException). It is nowhere else in this patch and it is not present in trunk. I think we are throwing an exception here, but not the the right one.
    


- fpj


On 2012-01-26 19:26:03, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-01-26 19:26:03)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-135.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-135
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 4466ce3 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java bc1cfb0 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 2fa79bb 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 
bq.  
bq.  Diff: https://reviews.apache.org/r/3642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","28/Jan/12 14:13;jiraposter@reviews.apache.org;

bq.  On 2012-01-28 11:00:01, fpj wrote:
bq.  > bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java, line 370
bq.  > <https://reviews.apache.org/r/3642/diff/1/?file=70865#file70865line370>
bq.  >
bq.  >     I don't think we currently throw this exception anywhere in the code (BKLedgerRecoveryException). It is nowhere else in this patch and it is not present in trunk. I think we are throwing an exception here, but not the the right one.
bq.  >

My bad, I just realized that we do it here in LedgerOpenOp:

                   public void operationComplete(int rc, Void result) {
                        if (rc != BKException.Code.OK) {
                            cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);
                        } else {
                            cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);
                        }
                    }


bq.  On 2012-01-28 11:00:01, fpj wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java, line 293
bq.  > <https://reviews.apache.org/r/3642/diff/1/?file=70863#file70863line293>
bq.  >
bq.  >     Is this where we fail the openLedger? If so, by checking the method, it doesn't seem to be using the right code. This is related to my other comment on the exception not being the right one.

It sounds like in LedgerRecoveryOp we just pass the error code to LedgerOpenOp and if it is not OK, we make it a LedgerRecoveryException. Consequently, it works to return BKException.Code.BookieHandleNotAvailableException in PerChannelBookieClient.errorOutReadKey(). The error here is not BookieHandleNotAvailable. Should we fix this one here?


- fpj


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/#review4668
-----------------------------------------------------------


On 2012-01-26 19:26:03, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-01-26 19:26:03)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-135.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-135
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 4466ce3 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java bc1cfb0 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 2fa79bb 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 
bq.  
bq.  Diff: https://reviews.apache.org/r/3642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","30/Jan/12 10:07;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/#review4685
-----------------------------------------------------------


I'm thinking I should add something more explicit to allow the client see that the actual issue is the wrong password, maybe by throwing a different exception, or logging a very explicit error message.



bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
<https://reviews.apache.org/r/3642/#comment10426>

    This isn't were the error would come from in the case of wrong password for fencing. Listener here is only for writing to the socket. Once you've written to the socket the callback is invoked. 
    
    For wrong password errors, we have to wait for the response from the bookie, which is handled in #messageReceived, and in this case by #handleReadResponse, which will interpret the rc as a ReadException. When LedgerRecoveryOp#readEntryComplete receives ReadException for all of the read requests, it throws a LedgerRecoveryException to the client. 


- Ivan


On 2012-01-26 19:26:03, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-01-26 19:26:03)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-135.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-135
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 4466ce3 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java bc1cfb0 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 2fa79bb 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 
bq.  
bq.  Diff: https://reviews.apache.org/r/3642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","30/Jan/12 11:07;jiraposter@reviews.apache.org;

bq.  On 2012-01-30 10:06:44, Ivan Kelly wrote:
bq.  > I'm thinking I should add something more explicit to allow the client see that the actual issue is the wrong password, maybe by throwing a different exception, or logging a very explicit error message.
bq.  >

Sounds like a good idea, since LedgerRecoveryException is not precise enough. The ReadException is also mixing wrong password and read failure, right?


bq.  On 2012-01-30 10:06:44, Ivan Kelly wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java, line 293
bq.  > <https://reviews.apache.org/r/3642/diff/1/?file=70863#file70863line293>
bq.  >
bq.  >     This isn't were the error would come from in the case of wrong password for fencing. Listener here is only for writing to the socket. Once you've written to the socket the callback is invoked. 
bq.  >     
bq.  >     For wrong password errors, we have to wait for the response from the bookie, which is handled in #messageReceived, and in this case by #handleReadResponse, which will interpret the rc as a ReadException. When LedgerRecoveryOp#readEntryComplete receives ReadException for all of the read requests, it throws a LedgerRecoveryException to the client.

Got it, seems right to me.


- fpj


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/#review4685
-----------------------------------------------------------


On 2012-01-26 19:26:03, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-01-26 19:26:03)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-135.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-135
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java cb3bb26 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 4466ce3 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java bc1cfb0 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java beab5e8 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 2fa79bb 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 
bq.  
bq.  Diff: https://reviews.apache.org/r/3642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","10/Feb/12 18:20;ikelly;new patch fixes the issue, and does some refactoring on the bookie side to try to make flow clearer.

This patch depends on BOOKKEEPER-152","10/Feb/12 18:22;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/
-----------------------------------------------------------

(Updated 2012-02-10 18:21:40.588207)


Review request for bookkeeper.


Summary
-------

When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.


This addresses bug BOOKKEEPER-135.
    https://issues.apache.org/jira/browse/BOOKKEEPER-135


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 57a6c29 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 3e96d46 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 9da4aec 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java 911c660 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java 7aad751 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 8a32c64 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java bc1cfb0 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 7217da6 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java a68fc8c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java cbd2277 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 

Diff: https://reviews.apache.org/r/3642/diff


Testing
-------


Thanks,

Ivan

","13/Feb/12 14:54;ikelly;For some reason I couldn't update the patch in review board. Newest patch is a rebase of the changes on trunk, so reviewing whats in reviewboard is equivalent.","16/Feb/12 16:52;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/
-----------------------------------------------------------

(Updated 2012-02-16 16:51:41.014079)


Review request for bookkeeper.


Summary
-------

When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.


This addresses bug BOOKKEEPER-135.
    https://issues.apache.org/jira/browse/BOOKKEEPER-135


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 57a6c29 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 3e96d46 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java 9da4aec 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java 911c660 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java 7aad751 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 7dd5363 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 8a32c64 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java 8598c08 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 7217da6 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java ca055e8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 

Diff: https://reviews.apache.org/r/3642/diff


Testing
-------


Thanks,

Ivan

","17/Feb/12 15:24;ikelly;BOOKKEEPER-174 breaks the current patch, and I can't see a simple way to fix, so cancelling the patch for now.",13/Mar/12 11:00;fpj;Should we make this one 4.2.0 or should it keep it for 4.1.0?,20/Mar/12 18:12;ikelly;New patch is much simpler on the server side. A lot of the changes are just added the new error path for unauthorized fencing.,"20/Mar/12 18:15;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/
-----------------------------------------------------------

(Updated 2012-03-20 18:13:56.162926)


Review request for bookkeeper.


Changes
-------

New patch is much simpler on the server side. A lot of the changes are just added the new error path for unauthorized fencing.


Summary
-------

When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.


This addresses bug BOOKKEEPER-135.
    https://issues.apache.org/jira/browse/BOOKKEEPER-135


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java ad41ba5 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java 911c660 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java 7aad751 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 7dd5363 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 8a32c64 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java 8598c08 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 1a315e1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 75a8e8c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 

Diff: https://reviews.apache.org/r/3642/diff


Testing
-------


Thanks,

Ivan

","29/Mar/12 14:10;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/#review6519
-----------------------------------------------------------


the whole patch is very good. I just have some slight comments as below.


bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
<https://reviews.apache.org/r/3642/#comment14182>

    just curious, do we need any cases to test different version compatibility? 



bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
<https://reviews.apache.org/r/3642/#comment14183>

    it would better to define 20 as constant, since there is several places referencing it.



bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
<https://reviews.apache.org/r/3642/#comment14181>

    it would better to throw a BookieException, so it would be caught as EUA error.


- Sijie


On 2012-03-20 18:13:56, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-03-20 18:13:56)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-135.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-135
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java ad41ba5 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java 911c660 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java 7aad751 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 7dd5363 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 8a32c64 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java 8598c08 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 1a315e1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 75a8e8c 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 
bq.  
bq.  Diff: https://reviews.apache.org/r/3642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","30/Mar/12 16:58;jiraposter@reviews.apache.org;

bq.  On 2012-03-29 14:10:15, Sijie Guo wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java, line 385
bq.  > <https://reviews.apache.org/r/3642/diff/4/?file=93827#file93827line385>
bq.  >
bq.  >     just curious, do we need any cases to test different version compatibility?

I think this would be very hard to test, as it would mean either pulling down a different version of the code, or duplicating the old code in our tests. It's possible, but the benefit vs payoff is very little.


- Ivan


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/#review6519
-----------------------------------------------------------


On 2012-03-20 18:13:56, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-03-20 18:13:56)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-135.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-135
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java ad41ba5 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java 911c660 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java 7aad751 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 7dd5363 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 8a32c64 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java 8598c08 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java 1a315e1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 75a8e8c 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 
bq.  
bq.  Diff: https://reviews.apache.org/r/3642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

",30/Mar/12 16:58;ikelly;Addressed Sijie's comments.,"30/Mar/12 17:00;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3642/
-----------------------------------------------------------

(Updated 2012-03-30 16:58:23.130753)


Review request for bookkeeper.


Changes
-------

Addressed Sijie's comments


Summary
-------

When fencing, the ledger handle is not checked before the fencing is applied. Currently the openLedger does fail, on because it will addEntry and fail at that point, but by this stage, fencing has already been applied. The check should be earlier.


This addresses bug BOOKKEEPER-135.
    https://issues.apache.org/jira/browse/BOOKKEEPER-135


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java ee38862 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java 911c660 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java 7aad751 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 7dd5363 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java 8a32c64 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java 8598c08 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java c5c1422 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java 75a8e8c 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java 99d6ef0 

Diff: https://reviews.apache.org/r/3642/diff


Testing
-------


Thanks,

Ivan

","31/Mar/12 08:25;hustlmsp;new patch looks good to me, +1",02/Apr/12 10:38;ikelly;Committed as r1308294. Thanks for reviewing Sijie.,"02/Apr/12 10:52;hudson;Integrated in bookkeeper-trunk #441 (See [https://builds.apache.org/job/bookkeeper-trunk/441/])
    BOOKKEEPER-135: Fencing does not check the ledger masterPasswd (ivank) (Revision 1308294)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delete superfluous lib directories,BOOKKEEPER-134,12533514,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,01/Dec/11 21:31,07/Dec/11 15:56,14/Mar/19 02:39,01/Dec/11 22:27,,,4.0.0,,,,,,0,,Removed lib directories which were used for storing old zk jars.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-01 22:14:00.646,,,no_permission,,,,,,,,,,,,,219242,,,Thu Dec 01 22:48:38 UTC 2011,,,,,,0|i0u5bj:,174003,,,,,,,,"01/Dec/11 21:38;ikelly;I can't generate a diff, because svn doesn't handle it, but i want to delete:

bookkeeper-server/lib/zookeeper-test-3.3.3.jar
bookkeeper-server/lib
hedwig-server/lib",01/Dec/11 22:14;breed;+1,"01/Dec/11 22:27;ikelly;Committed in 1209275 (branch-4.0)
Committed in 1209276 (trunk)","01/Dec/11 22:48;hudson;Integrated in bookkeeper-trunk #263 (See [https://builds.apache.org/job/bookkeeper-trunk/263/])
    BOOKKEEPER-134: Delete superfluous lib directories (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/lib
* /zookeeper/bookkeeper/trunk/hedwig-server/lib
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hub server should update subscription state to zookeeper when losing topic or shutting down,BOOKKEEPER-133,12533449,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,01/Dec/11 13:58,22/Oct/12 14:50,14/Mar/19 02:39,22/Dec/11 17:36,4.0.0,,4.1.0,,,hedwig-server,,,0,,"Currently hub server use counter-based mechanism to update subscription state lazily to zookeeper.
But in the following case, it didn't do it.
1) losing ownership of Topic
2) hub server shuts down
3) a subscription channel disconnected",,,,,,,,,,,,,,,,,,,05/Dec/11 15:04;hustlmsp;BOOKKEEPER-133.patch;https://issues.apache.org/jira/secure/attachment/12506118/BOOKKEEPER-133.patch,22/Dec/11 06:50;hustlmsp;bookeeper-133.patch;https://issues.apache.org/jira/secure/attachment/12508351/bookeeper-133.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-12-16 08:57:05.381,,,no_permission,,,,,,,,,,,,,219177,,,Thu Dec 22 18:11:37 UTC 2011,,,,,,0|i0axtz:,61754,,,,,,,,"05/Dec/11 15:04;hustlmsp;Attach a patch to update subscription state in hub server when losing topic or server shuts down, and send consume message in client when closeSubscription.","16/Dec/11 08:57;ikelly;Could you put this in review board, as it's quite a large patch. A few comments from what I've seen so far.

a) PersistenceManager#stop seems to be a noop in all cases. Remove it for the moment. 
b) ZkTopicManager#unregisterWithZookeeper shouldn't be needed. An EPHEMERAL znode is deleted when the session goes away (after zookeeper timeout). Is this too late for your requirement?

How is the lazy cleanup causing problems?

Also, I don't understand what the consume message is for? It is to clear the outstanding messages for the subscription?","20/Dec/11 02:24;hustlmsp;> b) ZkTopicManager#unregisterWithZookeeper shouldn't be needed

my point is to stop following requests sending to a hub server while it is shutting down. so I add code to remove the znode first.

>  I don't understand what the consume message is for?

currently auto consume is counter-based. suppose consume interval is 5. client received and consumed 4 messages, but clients didn't tell hub server it consumed 4 messages while it closes subscription. sending a consume message while closing subscription is to reduce duplicated messages.","21/Dec/11 16:40;ikelly;I've taken a closer look at this. In general it looks good. 

As I said before, PersistenceManager#stop should be removed, since it does nothing.

SubscribeResponseHandler#messageConsumed shouldn't share a method with SubscribeResponseHandler#asyncConsumeBufferedMessages. The shared method spends half it's time checking if message is null, so you're not really extracting out common code at all.

Also, when you upload these changes, could you put them in reviewboard.",22/Dec/11 05:17;hustlmsp;Yes. I will try upload a new patch.,"22/Dec/11 06:45;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3293/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

Currently hub server use counter-based mechanism to update subscription state lazily to zookeeper.
But in the following case, it didn't do it.
1) losing ownership of Topic
2) hub server shuts down


This addresses bug BOOKKEEPER-133.
    https://issues.apache.org/jira/browse/BOOKKEEPER-133


Diffs
-----

  hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java f4db619 
  hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java 8c2d77f 
  hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java 78d1435 
  hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java 8ee92e3 
  hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java d40a029 
  hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java 0c3c4df 
  hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java 6e4b2c9 
  hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java 1f6654f 
  hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java b1bd9a4 
  hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java 8f77a1b 
  hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java 3782e82 
  hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubPersistenceManager.java 84b866d 
  hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java PRE-CREATION 

Diff: https://reviews.apache.org/r/3293/diff


Testing
-------


Thanks,

Sijie

","22/Dec/11 06:50;hustlmsp;Attach a new patch.

In the new patch, I just remove code sending consume request when closing subscription. since close subscription will be called when a channel is disconnected. so client can't send a consume request thru a unconnected channel. It would be better to let application handle how to consume.
",22/Dec/11 17:36;ikelly;Committed as r1222365. Great work Sijie.,"22/Dec/11 18:11;hudson;Integrated in bookkeeper-trunk #291 (See [https://builds.apache.org/job/bookkeeper-trunk/291/])
    BOOKKEEPER-133: Hub server should update subscription state to zookeeper when losing topic or shutting down (Sijie Gou via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix zookeeper test dependency,BOOKKEEPER-131,12533303,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,30/Nov/11 15:47,07/Dec/11 15:56,14/Mar/19 02:39,01/Dec/11 21:08,4.0.0,4.1.0,4.0.0,,,,,,0,,"The zookeeper test jar in maven has changed name since development. Whats more, the new name is incompatible with maven <type>test-jar</type>.

This must be fixed before releasing.",,,,,,,,,,,,,,,,,,,30/Nov/11 21:02;ikelly;BOOKKEEPER-131.diff;https://issues.apache.org/jira/secure/attachment/12505660/BOOKKEEPER-131.diff,30/Nov/11 21:03;ikelly;settings.xml;https://issues.apache.org/jira/secure/attachment/12505661/settings.xml,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-12-01 20:11:01.348,,,no_permission,,,,,,,,,,,,,219031,,,Thu Dec 01 21:38:22 UTC 2011,,,,,,0|i0u4m7:,173889,,,,,,,,"30/Nov/11 21:02;ikelly;This fixes the pom to use a test-jar dependency rather than a submodule. To test, but the attached settings.xml in ~/.m2 and compile with:

mvn package -Ptmpzk",01/Dec/11 20:11;breed;+1 looks good,"01/Dec/11 21:08;ikelly;Committed as 1209236 (branch-4.0)
Committed as 1209237 (trunk)","01/Dec/11 21:38;hudson;Integrated in bookkeeper-trunk #262 (See [https://builds.apache.org/job/bookkeeper-trunk/262/])
    BOOKKEEPER-131: Fix zookeeper test dependency (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZK_TIMEOUT typo in client/server configuration,BOOKKEEPER-129,12533267,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,30/Nov/11 10:24,07/Dec/11 15:56,14/Mar/19 02:39,30/Nov/11 10:40,4.0.0,,4.0.0,,,bookkeeper-client,bookkeeper-server,,0,,"there is a typo ZK_TIMEOUT in client/server configuration:

{code}
    public ClientConfiguration setZkTimeout(int zkTimeout) {
        setProperty(ZK_SERVERS, Integer.toString(zkTimeout));
        return this;
    }
{code}",,,,,,,,,,,,,,,,,,,30/Nov/11 10:35;hustlmsp;BOOKKEEPER-129.patch;https://issues.apache.org/jira/secure/attachment/12505603/BOOKKEEPER-129.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-30 10:40:37.651,,,no_permission,,,,,,,,,,,,,218995,,,Wed Nov 30 11:13:24 UTC 2011,,,,,,0|i0u5an:,173999,,,,,,,,30/Nov/11 10:35;hustlmsp;fix typo when setting zktimeout in client/server configurations.,30/Nov/11 10:40;ikelly;Committed r1208372. Thanks Sijie.,"30/Nov/11 11:13;hudson;Integrated in bookkeeper-trunk #255 (See [https://builds.apache.org/job/bookkeeper-trunk/255/])
    BOOKKEEPER-129: ZK_TIMEOUT typo in client/server configuration (Sijie via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pom and script modifications required for generating release packages,BOOKKEEPER-128,12533199,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,29/Nov/11 21:37,07/Dec/11 15:56,14/Mar/19 02:39,30/Nov/11 10:08,,,4.0.0,,,,,,0,,"These got missed with BOOKKEEPER-41. It's basically a maven assembly file, and making bookkeeper and hedwig scripts executable. Also, for the servers, make log4j and the slf4j log4j adapter, real dependencies, so logging can be enabled.",,,,,,,,,,,,,,,,,,,30/Nov/11 10:04;ikelly;BOOKKEEPER-128.diff;https://issues.apache.org/jira/secure/attachment/12505602/BOOKKEEPER-128.diff,30/Nov/11 09:42;ikelly;BOOKKEEPER-128.diff;https://issues.apache.org/jira/secure/attachment/12505599/BOOKKEEPER-128.diff,30/Nov/11 09:20;ikelly;BOOKKEEPER-128.diff;https://issues.apache.org/jira/secure/attachment/12505597/BOOKKEEPER-128.diff,30/Nov/11 09:14;ikelly;BOOKKEEPER-128.diff;https://issues.apache.org/jira/secure/attachment/12505596/BOOKKEEPER-128.diff,30/Nov/11 08:04;ikelly;BOOKKEEPER-128.diff;https://issues.apache.org/jira/secure/attachment/12505587/BOOKKEEPER-128.diff,29/Nov/11 21:40;ikelly;BOOKKEEPER-128.diff;https://issues.apache.org/jira/secure/attachment/12505540/BOOKKEEPER-128.diff,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2011-11-29 22:12:55.209,,,no_permission,,,,,,,,,,,,,218927,,,Wed Nov 30 10:35:03 UTC 2011,,,,,,0|i0u4lj:,173886,,,,,,,,"29/Nov/11 21:40;ikelly;It's probably best just to +1 this rather than have someone else commit it, because it contains svn propset stuff (to make scripts executable), which is a pain.",29/Nov/11 22:12;breed;+1,30/Nov/11 10:05;hustlmsp;new patch looks good. +1,30/Nov/11 10:08;ikelly;Committed revision 1208358.,"30/Nov/11 10:35;hudson;Integrated in bookkeeper-trunk #254 (See [https://builds.apache.org/job/bookkeeper-trunk/254/])
    BOOKKEEPER-128: pom and script modifications required for generating release packages (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/README
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/conf
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
* /zookeeper/bookkeeper/trunk/pom.xml
* /zookeeper/bookkeeper/trunk/scripts
* /zookeeper/bookkeeper/trunk/src
* /zookeeper/bookkeeper/trunk/src/assemble
* /zookeeper/bookkeeper/trunk/src/assemble/bin.xml
* /zookeeper/bookkeeper/trunk/src/assemble/src.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make poms use official zookeeper 3.4.0,BOOKKEEPER-127,12533195,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,29/Nov/11 21:22,07/Dec/11 15:56,14/Mar/19 02:39,29/Nov/11 22:27,,,4.0.0,,,,,,0,,As summary says.,,,,,,,,,,,,,,,,,,,29/Nov/11 21:56;ikelly;BOOKKEEPER-127.diff;https://issues.apache.org/jira/secure/attachment/12505542/BOOKKEEPER-127.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-29 22:11:32.461,,,no_permission,,,,,,,,,,,,,218923,,,Tue Nov 29 22:31:50 UTC 2011,,,,,,0|i0u4l3:,173884,,,,,,,,29/Nov/11 22:11;breed;+1 looks good,29/Nov/11 22:27;ikelly;committed as r1208109,"29/Nov/11 22:31;hudson;Integrated in bookkeeper-trunk #250 (See [https://builds.apache.org/job/bookkeeper-trunk/250/])
    BOOKKEEPER-127: Make poms use official zookeeper 3.4.0 (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-client/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
log4j still used in some places,BOOKKEEPER-125,12533108,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Nov/11 12:59,07/Dec/11 15:56,14/Mar/19 02:39,29/Nov/11 17:46,,,4.0.0,,,,,,0,,"Seems to have crept back in in test which were in the air when the original log4j->slf4j went in.
",,,,,,,,,,,,,,,,,,,29/Nov/11 13:00;ikelly;BOOKKEEPER-125.diff;https://issues.apache.org/jira/secure/attachment/12505477/BOOKKEEPER-125.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-29 15:44:30.138,,,no_permission,,,,,,,,,,,,,218836,,,Tue Nov 29 18:07:27 UTC 2011,,,,,,0|i0u5a7:,173997,,,,,,,,29/Nov/11 15:44;breed;+1 looks good,29/Nov/11 17:46;ikelly;Committed as r1207996,"29/Nov/11 18:07;hudson;Integrated in bookkeeper-trunk #248 (See [https://builds.apache.org/job/bookkeeper-trunk/248/])
    BOOKKEEPER-125: log4j still used in some places (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build has RAT failures,BOOKKEEPER-124,12533011,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,28/Nov/11 22:20,07/Dec/11 15:56,14/Mar/19 02:39,29/Nov/11 09:06,,,4.0.0,,,,,,0,,"run: mvn apache-rat:check,

It gives errors. Rat is used to check all files have licenses etc.",,,,,,,,,,,,,,,,,,,28/Nov/11 22:30;ikelly;BOOKKEEPER-124.diff;https://issues.apache.org/jira/secure/attachment/12505409/BOOKKEEPER-124.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-29 08:07:02.093,,,no_permission,,,,,,,,,,,,,218743,,,Tue Nov 29 09:47:07 UTC 2011,,,,,,0|i0u4kn:,173882,,,,,,,,28/Nov/11 22:30;ikelly;Fixed with a combination of adding licenses and excludes.,29/Nov/11 08:07;breed;+1 looks good ivan. there does seem to be one unrelated change: hedwig-protocol/Makefile is being deleted. did that slip in or did you mean it for this issue. without the Makefile how do we regenerate the protobuf files?,"29/Nov/11 09:06;ikelly;The makefile is not used, and it didn't have a license, so I just removed it.

Committed as r1207797.","29/Nov/11 09:47;hudson;Integrated in bookkeeper-trunk #246 (See [https://builds.apache.org/job/bookkeeper-trunk/246/])
    BOOKKEEPER-124: build has RAT failures (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/doc/doc.textile
* /zookeeper/bookkeeper/trunk/doc/hedwigBuild.textile
* /zookeeper/bookkeeper/trunk/doc/hedwigDesign.textile
* /zookeeper/bookkeeper/trunk/doc/hedwigUser.textile
* /zookeeper/bookkeeper/trunk/hedwig-client/conf/hw_client.conf
* /zookeeper/bookkeeper/trunk/hedwig-client/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/c-doc.Doxyfile
* /zookeeper/bookkeeper/trunk/hedwig-protocol/Makefile
* /zookeeper/bookkeeper/trunk/hedwig-protocol/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/conf/hw_server.conf
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Keys in configuration have inconsistent style,BOOKKEEPER-119,12532688,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,25/Nov/11 09:37,07/Dec/11 15:56,14/Mar/19 02:39,28/Nov/11 16:33,,,4.0.0,,,,,,0,,"Some of the keys are CamelCase, some are with underscores. I think we should standardize on CamelCase.",,,,,,,,,,,,,,,,,,,28/Nov/11 15:52;ikelly;BOOKKEEPER-119.diff;https://issues.apache.org/jira/secure/attachment/12505339/BOOKKEEPER-119.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-28 16:33:10.64,,,no_permission,,,,,,,,,,,,,218421,,,Mon Nov 28 17:00:37 UTC 2011,,,,,,0|i0u58f:,173989,,,,,,,,28/Nov/11 15:52;ikelly;Made configuration keys consistently CamelCase.,"28/Nov/11 16:33;fpj;+1, thanks, Ivan! Committed revision 1207396.","28/Nov/11 17:00;hudson;Integrated in bookkeeper-trunk #243 (See [https://builds.apache.org/job/bookkeeper-trunk/243/])
    BOOKKEEPER-119: Keys in configuration have inconsistent style (ivank via fpj)

fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hedwig client doesn't kill and remove old subscription channel after redirection.,BOOKKEEPER-118,12532451,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,23/Nov/11 10:36,07/Dec/11 15:56,14/Mar/19 02:39,28/Nov/11 12:16,4.0.0,,4.0.0,,,hedwig-client,,,0,,"Currently we found that hedwig cpp client doesn't kill and remove old subscription channels after redirection, so there is lots of unused channels.

Not sure whether hedwig java client has the same issue, need to check it.",,,,,,,,,,,,,,,BOOKKEEPER-70,,,,23/Nov/11 10:44;hustlmsp;BOOKKEEPER-118.possiblefix.patch;https://issues.apache.org/jira/secure/attachment/12504862/BOOKKEEPER-118.possiblefix.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-28 12:01:44.664,,,no_permission,,,,,,,,,,,,,218184,,,Mon Nov 28 12:47:41 UTC 2011,,,,,,0|i0u57j:,173985,,,,,,,,23/Nov/11 10:44;hustlmsp;attach a patch to close old subscription channels during redirection in hedwig cpp client. ,"23/Nov/11 11:18;hustlmsp;in hedwig java client, we did close old subscription channels in SubscribeResponseHandler when it is not a SUCCESS response.

{code}
    // Main method to handle Subscribe responses from the server that we sent
    // a Subscribe Request to.
    public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubData, Channel channel)
            throws Exception {
        // If this was not a successful response to the Subscribe request, we
        // won't be using the Netty Channel created so just close it.
        if (!response.getStatusCode().equals(StatusCode.SUCCESS)) {
            HedwigClientImpl.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;
            channel.close();
        }
        ...
    }
{code}

this issue just happens in hedwig cpp client.",23/Nov/11 11:19;hustlmsp;submit the patch since we only needs to fix it in hedwig cpp client.,"28/Nov/11 12:01;ikelly;This patch wasn't generated with --no-prefix. It's not a problem, but it's preferable to have patchs apply with -p0.","28/Nov/11 12:03;ikelly;lgtm +1, will commit now.",28/Nov/11 12:16;ikelly;Committed as r1207099,"28/Nov/11 12:47;hudson;Integrated in bookkeeper-trunk #241 (See [https://builds.apache.org/job/bookkeeper-trunk/241/])
    BOOKKEEPER-118: Hedwig client doesn't kill and remove old subscription channel after redirection. (Sijie Guo via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/clientimpl.cpp
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocalBookKeeper fails after BOOKKEEPER-108,BOOKKEEPER-115,12531927,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,18/Nov/11 11:57,07/Dec/11 15:56,14/Mar/19 02:39,18/Nov/11 18:07,,,4.0.0,,,,,,0,,"After adding configuration to Bookkeeper, localbookie doesn't start because it fails to find /tmp/bk-txn.

The problem is that the configuration uses addProperty where it should use setProperty.",,,,,,,,,,,,,,,,,,,18/Nov/11 12:00;ikelly;BOOKKEEPER-115.diff;https://issues.apache.org/jira/secure/attachment/12504204/BOOKKEEPER-115.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-18 15:31:08.921,,,no_permission,,,,,,,,,,,,,217663,,,Fri Nov 18 18:22:34 UTC 2011,,,,,,0|i0u573:,173983,,,,,,,,"18/Nov/11 15:31;hustlmsp;yes, should use setProperty than addProperty , sorry for the mistake.

+1 for this patch.",18/Nov/11 18:07;ikelly;Committed in r1203774,"18/Nov/11 18:22;hudson;Integrated in bookkeeper-trunk #230 (See [https://builds.apache.org/job/bookkeeper-trunk/230/])
    BOOKKEEPER-115: LocalBookKeeper fails after BOOKKEEPER-108 (ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE In BookKeeper test,BOOKKEEPER-113,12531791,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,fpj,fpj,17/Nov/11 13:50,22/Oct/12 14:50,14/Mar/19 02:39,24/Feb/12 19:08,,,4.1.0,,,,,,0,,"This is not correctness issue, but it is ugly to throw an NPE there. 

{noformat}
Running org.apache.bookkeeper.test.BookieFailureTest
Nov 17, 2011 2:48:28 PM org.jboss.netty.channel.DefaultChannelFuture
WARNING: An exception was thrown by ChannelFutureListener.
java.lang.NullPointerException
	at org.apache.bookkeeper.proto.PerChannelBookieClient.addEntry(PerChannelBookieClient.java:231)
	at org.apache.bookkeeper.proto.BookieClient$1.operationComplete(BookieClient.java:85)
	at org.apache.bookkeeper.proto.BookieClient$1.operationComplete(BookieClient.java:78)
	at org.apache.bookkeeper.proto.PerChannelBookieClient$1.operationComplete(PerChannelBookieClient.java:158)
	at org.jboss.netty.channel.DefaultChannelFuture.notifyListener(DefaultChannelFuture.java:381)
	at org.jboss.netty.channel.DefaultChannelFuture.notifyListeners(DefaultChannelFuture.java:372)
	at org.jboss.netty.channel.DefaultChannelFuture.setSuccess(DefaultChannelFuture.java:316)
	at org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask.run(NioWorker.java:767)
	at org.jboss.netty.channel.socket.nio.NioWorker.processRegisterTaskQueue(NioWorker.java:256)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:198)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
{noformat}

The fix should be trivial, though.",,,,,,,,,,,,,,,,,,,23/Feb/12 17:30;fpj;BOOKKEEPER-113.patch;https://issues.apache.org/jira/secure/attachment/12515763/BOOKKEEPER-113.patch,17/Feb/12 17:39;fpj;BOOKKEEPER-113.patch;https://issues.apache.org/jira/secure/attachment/12515000/BOOKKEEPER-113.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-20 09:59:41.667,,,no_permission,,,,,,,,,,,,,217527,,,Fri Feb 24 19:46:10 UTC 2012,,,,,,0|i0axaf:,61666,,,,,,,,17/Feb/12 17:40;fpj;Simple patch to solve this problem. I'm essentially catching runtime exceptions and erroring out the respective key.,"20/Feb/12 09:59;ikelly;why not just check for null? If I remember correctly, it's the getBufferFactory() which is returning it.","20/Feb/12 10:08;fpj;In that long call chain, it looks like there are multiple places where we can get an NPE from. Also, checking for null and executing the operation are not atomic, so it can still break. That's my rationale at least...",20/Feb/12 20:57;fpj;Cancel patch until we sort out Ivan's issue.,"23/Feb/12 09:42;ikelly;I think the current approach is good, but the catch should be broader (Throwable).",23/Feb/12 17:30;fpj;Made it catch Throwable.,24/Feb/12 19:08;ikelly;committed as r1293383. Thanks Flavio.,"24/Feb/12 19:46;hudson;Integrated in bookkeeper-trunk #377 (See [https://builds.apache.org/job/bookkeeper-trunk/377/])
    BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank) (Revision 1293383)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie Recovery on an open ledger will cause LedgerHandle#close on that ledger to fail,BOOKKEEPER-112,12531510,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,fpj,fpj,15/Nov/11 18:22,07/Aug/13 05:15,14/Mar/19 02:39,31/Mar/12 14:36,,,4.1.0,,,,,,0,,"Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()",,,,,,,,,,,,,,,,,,,12/Jan/12 11:51;hustlmsp;BK-112.patch;https://issues.apache.org/jira/secure/attachment/12510364/BK-112.patch,29/Jan/12 09:59;hustlmsp;BOOKKEEPER-112.patch;https://issues.apache.org/jira/secure/attachment/12512352/BOOKKEEPER-112.patch,22/Feb/12 14:43;hustlmsp;BOOKKEEPER-112.patch_v2;https://issues.apache.org/jira/secure/attachment/12515593/BOOKKEEPER-112.patch_v2,24/Feb/12 17:10;hustlmsp;BOOKKEEPER-112.patch_v3;https://issues.apache.org/jira/secure/attachment/12515946/BOOKKEEPER-112.patch_v3,28/Feb/12 11:09;hustlmsp;BOOKKEEPER-112.patch_v4;https://issues.apache.org/jira/secure/attachment/12516312/BOOKKEEPER-112.patch_v4,02/Mar/12 11:27;hustlmsp;BOOKKEEPER-112.patch_v5;https://issues.apache.org/jira/secure/attachment/12516819/BOOKKEEPER-112.patch_v5,23/Mar/12 15:31;hustlmsp;BOOKKEEPER-112.patch_v6;https://issues.apache.org/jira/secure/attachment/12519640/BOOKKEEPER-112.patch_v6,29/Mar/12 13:33;hustlmsp;BOOKKEEPER-112.patch_v7;https://issues.apache.org/jira/secure/attachment/12520421/BOOKKEEPER-112.patch_v7,30/Mar/12 12:14;hustlmsp;BOOKKEEPER-112.patch_v8;https://issues.apache.org/jira/secure/attachment/12520597/BOOKKEEPER-112.patch_v8,22/Mar/12 15:08;fpj;bk-112.pdf;https://issues.apache.org/jira/secure/attachment/12519446/bk-112.pdf,22/Mar/12 11:53;fpj;bk-112.pdf;https://issues.apache.org/jira/secure/attachment/12519428/bk-112.pdf,,,,,,11.0,,,,,,,,,,,,,,,,,,,2011-11-25 11:36:28.022,,,no_permission,,,,,,,,,,,,,217246,,,Sat Mar 31 15:59:46 UTC 2012,,,,,,0|i0axgv:,61695,,,,,,,,"24/Nov/11 13:43;fpj;I'm not sure I have a good way to guarantee that it always happens this way, but my feeling is that we shouldn't try to recover a bookie that participated in a ledger ensemble for which the ledger is still open. 

One way is to check that all ledger fragments to recover are from ledgers that have been closed already. We can do it by checking the ledger metadata stored in zookeeper. Bookie recovery proceeds only if all ledger are closed. ","25/Nov/11 11:36;ikelly;Moved to 4.1.0, as fixing this will be part of a large review of bookie recovery.","12/Jan/12 11:51;hustlmsp;Attach a patch.

The idea is when ledger handle encounters BadVersion metadata, it should reread a updated metadata, and compare it with the old one to check whether it can resolve the confliction or not. 

I will put this patch on review board for discussion. ","12/Jan/12 11:55;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 8de20c9 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java c353e46 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 80e46b9 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java e1e8449 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

","29/Jan/12 10:00;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-01-29 09:58:30.513187)


Review request for bookkeeper.


Changes
-------

we need to check the ledger metadata status before proceed recovery action.

for those OPENED ledgers,
1) whose last ensemble contains the failed bookie, we should not proceed recovery action. since we can't promise last entry to be fully replicated. (also there may be other side effects)
2) whose last ensemble doesn't contain the failed bookie, it is safe to proceed recovery action.

for those IN_RECOVERY ledgers, we have to check whether last ensemble contains the failed bookie. if it is, the recovery tool has to help closing this ledger, since the normal bookkeeper client may fail to close it. (a corn case: 3 bookies (bk1, bk2, bk3), quorum size 3, ensemble size 3. no entry is written. bk3 is failed. bk1 and bk2 returns NoEntry, bk3 returns HandleNotAvailable. ledger can't be closed.) 

for 2) case of OPENED ledgers, both PendingAddOp and BookKeeperAdmin needs to rereadMetadata when encountering BADVERSION and try to resolve such confliction to avoid #close it.


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 5bb37c3 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 547e240 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerOpenTest.java PRE-CREATION 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

","01/Feb/12 15:02;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/#review4745
-----------------------------------------------------------


I had a quick look over this. The exclude bookies stuff needs to be removed since BOOKKEEPER-23 gets rid of the need for it & it exposes internal details through the public api which is bad. The other fix in here looks ok, but I found it hard to pick it out with the excludeBookies stuff in there also.

- Ivan


On 2012-01-29 09:58:30, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3472/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-01-29 09:58:30)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.
bq.  
bq.  Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
bq.  Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-112.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-112
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 5bb37c3 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 547e240 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerOpenTest.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/3472/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","02/Feb/12 02:03;jiraposter@reviews.apache.org;

bq.  On 2012-02-01 15:01:34, Ivan Kelly wrote:
bq.  > I had a quick look over this. The exclude bookies stuff needs to be removed since BOOKKEEPER-23 gets rid of the need for it & it exposes internal details through the public api which is bad. The other fix in here looks ok, but I found it hard to pick it out with the excludeBookies stuff in there also.

 if the failed bookie existed in the quorum set which maxAddConfirmed entry belongs to, readLastConfirmed could not succeed, either open and openNoRecovery would fail. (this issue has been reported in BOOKKEEPER-152, but it seems that it is hard to separate into two patches. so I put them in this patch.)

so recovery tool needs failed bookies information as hints to tell readLastConfirmed to skip failed bookies. I think to change excludedBookies related api to protected, not expose to public.

what is your opinion?


- Sijie


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/#review4745
-----------------------------------------------------------


On 2012-01-29 09:58:30, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3472/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-01-29 09:58:30)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.
bq.  
bq.  Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
bq.  Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-112.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-112
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 5bb37c3 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 547e240 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 56186ab 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java 4625bbb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java 43e999d 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 8526db5 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerOpenTest.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/3472/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","22/Feb/12 14:43;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-02-22 14:43:04.529989)


Review request for bookkeeper.


Changes
-------

attach a new patch to remove excludedBookies related codes. 


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java a94a0e5 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

","24/Feb/12 17:10;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-02-24 17:09:54.127303)


Review request for bookkeeper.


Changes
-------

discussed with Ivan offline, it seems that it is OK to recover those opened / in recovery status ledgers. for those in recovery status ledgers, if the last entry on the failed bookie, the recovery add should change ensemble. the last entry would be written on the other bookies. the tricky case is for opened ledgers, since readEntries for openNoRecovery can't read more than lastAddConfirmed, we change ledgerHandle#readEntries to use PendingReadOp to skip boundary checking to try to read lastAddConfirmed + 1 to avoid missing replicating this entry.


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java a94a0e5 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

","24/Feb/12 17:33;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/#review5324
-----------------------------------------------------------



bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/3472/#comment11620>

    I don't think going up to lastAddConfirmed + 1 is enough. lastAddConfirmed can trail behind the last written entry by an undefined amount. For example, if we asyncAdd 10 entries, they will each have the same lastAddConfirmed in the packet if the 10th is sent before the 1st is acknowledged.
    
    The main problem is that bookie recovery reads each entry in parallel, while for this last bit, we need to read sequentially. I think after each ledger fragment successfully completes, this should kick off another operation, which steps up from lastAddConfirmed until it gets NoSuchEntry.
    


- Ivan


On 2012-02-24 17:09:54, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3472/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-24 17:09:54)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.
bq.  
bq.  Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
bq.  Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-112.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-112
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java a94a0e5 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
bq.  
bq.  Diff: https://reviews.apache.org/r/3472/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","28/Feb/12 11:09;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-02-28 11:09:19.006294)


Review request for bookkeeper.


Changes
-------

adding a readforward operation if lastEnsemble need to be repaired, which addresses Ivan's comment.


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java a94a0e5 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

",28/Feb/12 11:09;hustlmsp;new patch addressed Ivan's comment.,"01/Mar/12 11:41;ikelly;Another corner case came to me while reading through this. What happens if a client has a ledger open and is writing to it. The srcBookie(B1) isn't actually failed, so the client can continue to write to it. The recovery comes in, copies all the entries(up to entry X), and updates the metadata, but the client keep writing entries(up to entry Y), unaware of the recovery process. Anything between X & Y would be underreplicated, as B1 is no longer in the ensemble for the fragment. Im not sure what the best course of action would be in this case, maybe we can force an ensemble change, or force the ledger closed.  

","01/Mar/12 12:07;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/#review5494
-----------------------------------------------------------



bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/3472/#comment11911>

    Why not use the SafeOrderedExecutor as BookKeeper does?



bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/3472/#comment11912>

    bitwise &, I guess you meant && here.



bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/3472/#comment11913>

    I dont like boolean flags like readForward being passed to the constructor here. I think it would be better to have a class called SingleFragmentCallbackWithForwardRead which inherits from SingleFragmentCallback. You can then overload processResult on that.


- Ivan


On 2012-02-28 11:09:19, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3472/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-02-28 11:09:19)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.
bq.  
bq.  Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
bq.  Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-112.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-112
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java a94a0e5 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 
bq.  
bq.  Diff: https://reviews.apache.org/r/3472/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

",01/Mar/12 13:31;fpj;There is a distinction between bookie recovery and ledger recovery. I don't think we should do bookie recovery on an open ledger.,"02/Mar/12 10:09;hustlmsp;> Anything between X & Y would be underreplicated, as B1 is no longer in the ensemble for the fragment.

I am doubting why B1 is still being written. If BookieRecoveryTool is run to re-replicate entries of B1, the admin guy would ensure B1 is down then do re-replication. If we want to ensure B1 is not alive, maybe we can do some checking before re-replication, like checking whether B1 in available list or not, trying setup connection and  do some operations.","02/Mar/12 10:13;hustlmsp;> There is a distinction between bookie recovery and ledger recovery. I don't think we should do bookie recovery on an open ledger.

If we don't bookie recovery on open ledgers, the user may find each time he run BookieRecoveryTool it would not success since there was opened ledgers not being recovered. The user may have no idea when to stop running this tool.","02/Mar/12 11:28;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-03-02 11:27:34.221927)


Review request for bookkeeper.


Changes
-------

new patch remove readForward flag from constructor. and also remove ScheduledExecutorService, since we don't need to care about long-chain, since the callback will be triggered in bookie client's netty thread not in same thread. 


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java f71e53f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 29070eb 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 99258ac 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 015e4e4 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java dada67a 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

","21/Mar/12 10:34;ikelly;
Flavio and I discussed this a little yesterday evening and after thinking about it for a little bit afterwards, the problem seems clearer to me now.

So, what is under discussion here is what do we do with the final fragment of an open ledger. This actually boils down to the same problem we have for fencing. By recovering the bookie, we are introducing a second writer, violating our 1-writer assumption. Since we now have more than one writer, it is necessary for there to be a consensus among all writers on where the ledger fragment ends. 

There are 3 situations which this open final fragment can occur.
 # the original writer crashed, then bookie crashed before ledger recovery
 # the original writer has the ledger open, but has not written anything since the bookie crashed
 # the bookie being recovered isn't actually down

One solution proposed by Flavio yesterday was that we should wait until no open final fragments exist before updating the ZK metadata. This works for 2. However, for 1 & 3, the recovery will wait forever.

One way im leaning towards now, is to replicate all entries in the fragment, and then ensure that no more entries are added to this specific fragment. This would require a change to how fencing works. Instead of fencing by ledger id, we would have to fence by fragment id. When the original writer tries to write, the write will fail, and then try to replace the bookie to which the write failed to write to (all bookies in this case). This deals with 1, because all entries written before the writer crash will be replicated. It works for 2, because the next write by the writer will see that its current ledger fragment is fenced *and* that the crashed bookie is down, so it will build a new ensemble and start writing a new fragment. It deals with 3, as the current fragment will be rereplicated and any further attempts by the writer will force it to rebuild its ensemble.","21/Mar/12 15:22;hustlmsp;yeah, fencing by fragment id is a very good solution, although I am not so clear how fencing handles following case.

we have 5 bookies, bk[1-5], suppose bk5 is down, ledger l is opened, with last fragment is bk3, bk4, bk5. the recovery tool fence bk3 & bk4, further attempts from ledger l will force it to rebuild new ensemble, suppose (bk1, bk2, bk3). bk3 is a common bookie between the old ensemble and the new ensemble. how to deal with writing to such bookie? because bookie server has no knowledge about ledger distribution info, it doesn't know the writing is to an old ensemble or to a new ensemble. unless we also send fragment id in the addEntry request.","21/Mar/12 17:53;fpj;There are two occasions during the lifetime of a ledger that we use consensus through zookeeper: when we change the ensemble and when we close the ledger. By design, the former is only proposed by the writer, whereas the latter can be proposed by either the writer or another client trying to recover it. Trying to change the design so that we can have multiple clients proposing changes to the ensemble of a ledger would be difficult and prone to errors, so I suggest we keep this part of the design the way it is.

One way to perform the fencing for recovery and still keep the original design as is with respect to ensemble changes is to wait for the writer to mark in the ledger metadata such a change. Say that we externally detect that a bookie C has crashed. If the writer of a given ledger L removes C from its configuration and writes to ZooKeeper, then we can safely recover the ledger fragment of C for L. If the writer of L never makes such a change, then we assume that the writer can still talk to C, and consequently we don't care. 

We can monitor ensemble changes by watching the node in ZooKeeper. Using watches will make it difficult to implement an HBase backend for metadata as we proposed in another jira.

 ","22/Mar/12 11:53;fpj;The attached document reflects the discussion Sijie, Ivan, and myself had on the design of bookie recovery to solve the issue described in this jira.",23/Mar/12 11:30;hustlmsp;I would modify the patch according to the document ASAP.,"23/Mar/12 15:31;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-03-23 15:30:15.796027)


Review request for bookkeeper.


Changes
-------

modify the patch according to the document.


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java f71e53f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java 0b882c6 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java e28d32c 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

",23/Mar/12 15:31;hustlmsp;attach a new patch fixed according to the document.,"29/Mar/12 12:44;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/#review6515
-----------------------------------------------------------



bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/3472/#comment14178>

    Perhaps we should close lh here. It's a noop really, as a non recovery lh is a ReadOnlyLedgerHandle, where noop is just a stub. We should close it anyhow, just in case it changes to not being a noop in the future.


- Ivan


On 2012-03-23 15:30:15, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3472/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-03-23 15:30:15)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.
bq.  
bq.  Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
bq.  Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-112.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-112
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java f71e53f 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java 0b882c6 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java e28d32c 
bq.  
bq.  Diff: https://reviews.apache.org/r/3472/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","29/Mar/12 12:46;jiraposter@reviews.apache.org;

bq.  On 2012-03-29 12:44:18, Ivan Kelly wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java, line 444
bq.  > <https://reviews.apache.org/r/3472/diff/7/?file=94988#file94988line444>
bq.  >
bq.  >     Perhaps we should close lh here. It's a noop really, as a non recovery lh is a ReadOnlyLedgerHandle, where noop is just a stub. We should close it anyhow, just in case it changes to not being a noop in the future.

otherwise the patch looks good to me. +1


- Ivan


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/#review6515
-----------------------------------------------------------


On 2012-03-23 15:30:15, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/3472/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2012-03-23 15:30:15)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.
bq.  
bq.  Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
bq.  Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-112.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-112
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java f71e53f 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java 0b882c6 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java e28d32c 
bq.  
bq.  Diff: https://reviews.apache.org/r/3472/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","29/Mar/12 13:30;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-03-29 13:29:23.834764)


Review request for bookkeeper.


Changes
-------

close opened non-recovery ledger handle as Ivan's suggestion.


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java f71e53f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java 0b882c6 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java e28d32c 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

",29/Mar/12 13:33;hustlmsp;new patch to close opened non-recovery ledger handle as Ivan's suggestion.,"30/Mar/12 12:14;hustlmsp;attach a new patch to add missing line which releasing permit when submitting callback in PeadingReadOp, similar what BOOKKEEPER-186 did.","30/Mar/12 12:14;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/3472/
-----------------------------------------------------------

(Updated 2012-03-30 12:12:54.459832)


Review request for bookkeeper.


Changes
-------

adding one line to release permit when submit callback in PendingReadOp. similar as BOOKKEEPER-186.


Summary
-------

Bookie recovery updates the ledger metadata in zookeeper. LedgerHandle will not get notified of this update, so it will try to write out its own ledger metadata, only to fail with KeeperException.BadVersion. This effectively fences all write operations on the LedgerHandle (close and addEntry). close will fail for obvious reasons. addEntry will fail once it gets to the failed bookie in the schedule, tries to write, fails, selects a new bookie and tries to update ledger metadata.

Update Line 605, testSyncBookieRecoveryToRandomBookiesCheckForDupes(), when done
Also, uncomment addEntry in TestFencing#testFencingInteractionWithBookieRecovery()


This addresses bug BOOKKEEPER-112.
    https://issues.apache.org/jira/browse/BOOKKEEPER-112


Diffs (updated)
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 37623dc 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java f71e53f 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java b403aa1 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java c67a79c 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java 539d6b2 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java b8923e8 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java 7de1c10 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java 0b882c6 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java e28d32c 

Diff: https://reviews.apache.org/r/3472/diff


Testing
-------


Thanks,

Sijie

",30/Mar/12 17:07;ikelly;lgtm +1,"31/Mar/12 08:59;hustlmsp;committed as r1307743. thanks Ivan, Flavio for discussion. thanks Ivan for reviewing.","31/Mar/12 09:35;hudson;Integrated in bookkeeper-trunk #438 (See [https://builds.apache.org/job/bookkeeper-trunk/438/])
    BOOKKEEPER-112: Bookie Recovery on an open ledger will cause LedgerHandle#close on that ledger to fail (sijie) (Revision 1307743)

     Result = ABORTED
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java
","31/Mar/12 12:13;fpj;Hi Sijie, I'm not done reviewing it and I'd like to before having it in. Is it ok?","31/Mar/12 14:36;fpj;+1, it looks good. There are some parts in which the format is not looking good and there are some mispellings, but I don't think it is worth reverting. I'll fix these in a separate patch.","31/Mar/12 15:59;hustlmsp;oh, sorry Flavio. I may miss some words on the sync up meeting. ",,,,,,,,,,,,,,,,,,,,,,,,,,,
memory leak in HostAddress of hedwig c++ client,BOOKKEEPER-107,12530348,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,04/Nov/11 17:10,07/Dec/11 15:56,14/Mar/19 02:39,08/Nov/11 17:58,4.0.0,,4.0.0,,,hedwig-client,,,0,,"should use freeaddrinfo to free struct addrinfo, instead of using free directly.",,,,,,,,,,,,,,,,,,,04/Nov/11 17:18;hustlmsp;BOOKKEEPER-107.patch;https://issues.apache.org/jira/secure/attachment/12502488/BOOKKEEPER-107.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-08 17:57:42.901,,,no_permission,,,,,,,,,,,,,216086,,,Tue Nov 08 18:07:00 UTC 2011,,,,,,0|i0u533:,173965,,,,,,,,"04/Nov/11 17:18;hustlmsp;attach a patch:
1) use freeaddrinfo instead of free
2) remove socket_addr from HostAddress, since we just need to keep ip and port.
3) in clientimpl, it is not necessary to parse address from string each time creating channel. just parse it once when clientimpl initializes and keep it in variable defaultHost which could be used directly when creating channels.","08/Nov/11 17:57;ikelly;lgtm +1
",08/Nov/11 17:58;ikelly;Committed as r1199368. Thanks Sijie.,"08/Nov/11 18:00;ikelly;Oh, one thing. When you generate patches with git, use --no-prefix. When I set up automatic patch testing, it'll be required for the patch to apply.","08/Nov/11 18:07;hudson;Integrated in bookkeeper-trunk #207 (See [https://builds.apache.org/job/bookkeeper-trunk/207/])
    BOOKKEEPER-107: memory leak in HostAddress of hedwig c++ client (Sijie Guo via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/clientimpl.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/clientimpl.h
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/util.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/util.h
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
recoveryBookieData can select a recovery bookie which is already in the ledgers ensemble,BOOKKEEPER-106,12530339,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,04/Nov/11 16:19,07/Dec/11 15:56,14/Mar/19 02:39,15/Nov/11 18:45,,,4.0.0,,,,,,0,,"As the summary says, if you don't specify a destBookie when doing recoveryBookieData, it will select at random from the available bookie list. It doesn't take care to select a bookie which is not is the ledgers ensemble.",,,,,,,,,,,,,,,,,,,11/Nov/11 16:04;ikelly;BOOKKEEPER-106.diff;https://issues.apache.org/jira/secure/attachment/12503380/BOOKKEEPER-106.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-11 16:06:51.323,,,no_permission,,,,,,,,,,,,,216077,,,Tue Nov 15 19:15:59 UTC 2011,,,,,,0|i0u4jb:,173876,,,,,,,,"11/Nov/11 16:04;ikelly;Attached patch fixes this problem and also cleans up BookKeeperAdmin a little. There were a lot of nested callbacks nested in more callbacks etc. I've tries to unnest a little. 

Ledger metadata is now updated on each fragment. It used to be updated when the whole ledger was recovered, but only specified a single possible ledger. This was incorrect as it could lead to underreplication. There can be contention in the writes to the ledger data, but just retry as the previously successful write should have updated the stat, and they will be writing from the same ledger handle.

I've also added a couple of tests and some test framework stuff to verify that entries are all replicated.","11/Nov/11 16:06;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2806/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

As the summary says, if you don't specify a destBookie when doing recoveryBookieData, it will select at random from the available bookie list. It doesn't take care to select a bookie which is not is the ledgers ensemble.

Attached patch fixes this problem and also cleans up BookKeeperAdmin a little. There were a lot of nested callbacks nested in more callbacks etc. I've tries to unnest a little.

Ledger metadata is now updated on each fragment. It used to be updated when the whole ledger was recovered, but only specified a single possible ledger. This was incorrect as it could lead to underreplication. There can be contention in the writes to the ledger data, but just retry as the previously successful write should have updated the stat, and they will be writing from the same ledger handle.

I've also added a couple of tests and some test framework stuff to verify that entries are all replicated.


This addresses bug BOOKKEEPER-106.
    https://issues.apache.org/jira/browse/BOOKKEEPER-106


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java b3eb5b9 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java f1b3ad9 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 6bac569 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java ac54d9a 

Diff: https://reviews.apache.org/r/2806/diff


Testing
-------


Thanks,

Ivan

","15/Nov/11 13:53;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2806/#review3253
-----------------------------------------------------------


Ivan, It is not very easy to review this patch because there is reformatting mixed with the fix itself. My understanding is that the fix itself is essentially the implementation of getNewBookie and the changes to call it. Could you please describe the changes in slightly more detail so that it helps the review?


bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/2806/#comment7284>

    Is the formatting of this block correct? It doesn't look like on review board but I need to check on a text editor.



bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
<https://reviews.apache.org/r/2806/#comment7283>

    Is this todo to the lh.close that is commented out?


- fpj


On 2011-11-11 16:05:38, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2806/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-11-11 16:05:38)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  As the summary says, if you don't specify a destBookie when doing recoveryBookieData, it will select at random from the available bookie list. It doesn't take care to select a bookie which is not is the ledgers ensemble.
bq.  
bq.  Attached patch fixes this problem and also cleans up BookKeeperAdmin a little. There were a lot of nested callbacks nested in more callbacks etc. I've tries to unnest a little.
bq.  
bq.  Ledger metadata is now updated on each fragment. It used to be updated when the whole ledger was recovered, but only specified a single possible ledger. This was incorrect as it could lead to underreplication. There can be contention in the writes to the ledger data, but just retry as the previously successful write should have updated the stat, and they will be writing from the same ledger handle.
bq.  
bq.  I've also added a couple of tests and some test framework stuff to verify that entries are all replicated.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-106.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-106
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java b3eb5b9 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java f1b3ad9 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 6bac569 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java ac54d9a 
bq.  
bq.  Diff: https://reviews.apache.org/r/2806/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","15/Nov/11 14:41;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2806/
-----------------------------------------------------------

(Updated 2011-11-15 14:40:58.957071)


Review request for bookkeeper.


Summary (updated)
-------

As the summary says, if you don't specify a destBookie when doing recoveryBookieData, it will select at random from the available bookie list. It doesn't take care to select a bookie which is not is the ledgers ensemble.

A new bookie is now selected for each bookie & ledger metadata is now updated once each fragment has been replicated. There is a new algorithm for selecting the new bookie, which takes into account the current bookies.

The structure of the callbacks needed to be changed to allow an update for each individual fragment. Now when you recover a bookie, the recovery callback is wrapped a multi callback (MCB-LEDGERS) is created with a count equal to the number of ledgers which will be recovered. MCB-LEDGERS is passed to call to #recoverLedger for each ledger. #recoverLedger creates a multi callback (MCB-FRAGMENTS), with the number of fragments to be recovered as the count. Then a loop kicks off recovery for each fragment, passing a new SingleFragmentCallback to each. SingleFragmentCallback takes MCB-FRAGMENTS as a parameter, and triggers it each time a fragment recovery completes.

SingleFragmentCallback and the fragment count multi callback, replace ledgerFragmentMcb, which wrapped LedgerMultiCallbackWrapper, which in turn wrapped MCB-LEDGERS. LedgerMultiCallbackWrapper updated the ledger metadata once during the recovery process, when the whole ledger was recovered, but only specified a single possible ledger. This was incorrect as it could lead to underreplication. The new approach, writes once per fragment. The callback restructuring was necessary to allow this.

I've also added a couple of tests and some test framework stuff to verify that entries are all replicated.


This addresses bug BOOKKEEPER-106.
    https://issues.apache.org/jira/browse/BOOKKEEPER-106


Diffs
-----

  bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java b3eb5b9 
  bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java f1b3ad9 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java PRE-CREATION 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 6bac569 
  bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java ac54d9a 

Diff: https://reviews.apache.org/r/2806/diff


Testing
-------


Thanks,

Ivan

","15/Nov/11 14:41;jiraposter@reviews.apache.org;

bq.  On 2011-11-15 13:53:03, fpj wrote:
bq.  > Ivan, It is not very easy to review this patch because there is reformatting mixed with the fix itself. My understanding is that the fix itself is essentially the implementation of getNewBookie and the changes to call it. Could you please describe the changes in slightly more detail so that it helps the review?

The refactoring in BookKeeperAdmin is part of the fix. The sequence of callbacks and the exact detail of what they do had to be restructured. I updated the description of the review to explain the change. Its quite complex. For BookieRecoveryTest.java, everything below line 430 is new. I had to move the test from org.apache.bookkeeper.test to org.apache.bookkeeper.client to allow it to access the metadata from the ledger handle.


bq.  On 2011-11-15 13:53:03, fpj wrote:
bq.  > bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java, line 600
bq.  > <https://reviews.apache.org/r/2806/diff/1/?file=57480#file57480line600>
bq.  >
bq.  >     Is the formatting of this block correct? It doesn't look like on review board but I need to check on a text editor.

What looks wrong with it? availableBookies is lined up with the start of the argument list which is in line with Sun conventions (http://www.oracle.com/technetwork/java/codeconventions-136091.html#248). 

There's a few superfluous spaces (rb marks red), which i need to remove. 


bq.  On 2011-11-15 13:53:03, fpj wrote:
bq.  > bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java, line 605
bq.  > <https://reviews.apache.org/r/2806/diff/1/?file=57482#file57482line605>
bq.  >
bq.  >     Is this todo to the lh.close that is commented out?

This is something I need to open another JIRA for. Basically, if you recover a bookie, all ledgers recovered will have their zookeeper metadata changed. If another process is currently writing to the ledger, when they try to close the handle, they will get a KeeperException.BadVersion because the version of the ledger znode has changed. It's not a correctness issue, but more of something that could be annoying for users. 


- Ivan


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2806/#review3253
-----------------------------------------------------------


On 2011-11-11 16:05:38, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2806/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-11-11 16:05:38)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  As the summary says, if you don't specify a destBookie when doing recoveryBookieData, it will select at random from the available bookie list. It doesn't take care to select a bookie which is not is the ledgers ensemble.
bq.  
bq.  Attached patch fixes this problem and also cleans up BookKeeperAdmin a little. There were a lot of nested callbacks nested in more callbacks etc. I've tries to unnest a little.
bq.  
bq.  Ledger metadata is now updated on each fragment. It used to be updated when the whole ledger was recovered, but only specified a single possible ledger. This was incorrect as it could lead to underreplication. There can be contention in the writes to the ledger data, but just retry as the previously successful write should have updated the stat, and they will be writing from the same ledger handle.
bq.  
bq.  I've also added a couple of tests and some test framework stuff to verify that entries are all replicated.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-106.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-106
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java b3eb5b9 
bq.    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java f1b3ad9 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java PRE-CREATION 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 6bac569 
bq.    bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java ac54d9a 
bq.  
bq.  Diff: https://reviews.apache.org/r/2806/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","15/Nov/11 18:45;fpj;+1, thanks Ivan! Committed revision 1202370 and 1202372. (I forgot to edit CHANGES.txt in the first commit.)","15/Nov/11 19:15;hudson;Integrated in bookkeeper-trunk #217 (See [https://builds.apache.org/job/bookkeeper-trunk/217/])
    BOOKKEEPER-106:	recoveryBookieData can select a recovery bookie which is already in the ledgers ensemble (forgot to edit CHANGES.txt)
BOOKKEEPER-106: recoveryBookieData can select a recovery bookie which is already in the ledgers ensemble

fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt

fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some hedwig tests have build errors,BOOKKEEPER-100,12529050,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,dferro,dferro,27/Oct/11 14:05,07/Dec/11 15:56,14/Mar/19 02:39,27/Oct/11 17:12,,,4.0.0,,,hedwig-server,,,0,,Some hedwig tests have minor build errors.,,,,,,,,,,,,,,,,,,,27/Oct/11 14:06;dferro;BOOKKEEPER-100.patch;https://issues.apache.org/jira/secure/attachment/12501093/BOOKKEEPER-100.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-27 17:12:52.813,,,no_permission,,,,,,,,,,,,,214910,,,Thu Oct 27 17:12:52 UTC 2011,,,,,,0|i0u4zz:,173951,,,,,,,,"27/Oct/11 17:12;ikelly;+1

Committed as r1189874. Thanks Daniel.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Double callbacks in readLastConfirmedOp which fails readLastConfirmed operation even received enough valid responses.,BOOKKEEPER-94,12528801,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,26/Oct/11 01:22,07/Dec/11 15:56,14/Mar/19 02:39,26/Oct/11 14:07,4.0.0,,4.0.0,,,bookkeeper-server,,,0,,"As comment in [BOOKKEEPER-93 | https://issues.apache.org/jira/browse/BOOKKEEPER-93], double callbacks happen even it success callback receiving enough valid responses.",,,,,,,,,,,,,,,BOOKKEEPER-93,,,,26/Oct/11 01:24;hustlmsp;bookkeeper-94.patch;https://issues.apache.org/jira/secure/attachment/12500796/bookkeeper-94.patch,26/Oct/11 02:08;hustlmsp;bookkeeper-94_v2.patch;https://issues.apache.org/jira/secure/attachment/12500803/bookkeeper-94_v2.patch,26/Oct/11 13:35;hustlmsp;bookkeeper-94_v3.patch;https://issues.apache.org/jira/secure/attachment/12500882/bookkeeper-94_v3.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2011-10-26 13:26:28.068,,,no_permission,,,,,,,,,,,,,214661,,,Wed Oct 26 14:07:09 UTC 2011,,,,,,0|i0u4yv:,173946,,,,,,,,"26/Oct/11 13:26;ikelly;BookieReadWriteTest#testLastConfirmedAdd is failing on trunk due to this issue.
","26/Oct/11 13:35;hustlmsp;check whether the operation is completed or not when callback.
also change *notComplete* to *completed* and using condition *!completed*.

since we have BookieReadWriteTest#testLastConfirmedAdd / BookieReadWriteTest#testReadOpenLedger for readLastConfirmed, no new test cases will be added.",26/Oct/11 14:07;ikelly;Committed r1189225. Thanks Sijie.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookkeeper doesn't work correctly on OpenLedgerNoRecovery,BOOKKEEPER-93,12528680,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,25/Oct/11 14:44,02/May/13 02:29,14/Mar/19 02:39,27/Oct/11 16:53,4.0.0,,4.0.0,,,,,,0,,"1) bookkeeper hang when openLedgerNoRecovery, since LedgerOpenOp didn't trigger callback when opening ledger no recovery.

2) race condition in ReadLastConfirmOp

ReadLastConfirmOp callback on readEntryComplete.
a) first decrement numResponsePending
b) then increment validResponses
c) check validResponses to callback with OK
b) check numResponsePending to callback with LedgerRecoveryException

support two callbacks returns on readEntryComplete: A, B. (quorum/ensemble size : 2)

a) A first decrement numResponsePending from 2 to 1.
b) A increment validResponses from 0 to 1.
c) B then decrement numResponsePending from 1 to 0.
d) A check numResponsePending before B check validResponse, A found the numResponsePending is 0 now. A will callback with exception. But the right action is B check validResponse and callback with OK.

3) if an LegerHandle is opened by openLedgerNoRecovery, the lastAddConfirmed will be set to -1. so all read requests will be failed since readEntry id > lastAddConfirmed.

so I suggested that if an LegerHandle is opened by openLegerNoRecovery, the ledgerHandle is under unsafeRead mode. close/write operations will be failed, read operations should not check condition entry_id > lastAddConfirmed.",,,,,,,,,,,,,,,,,,,25/Oct/11 15:14;hustlmsp;bookkeeper-93.patch;https://issues.apache.org/jira/secure/attachment/12500688/bookkeeper-93.patch,26/Oct/11 02:13;hustlmsp;bookkeeper-93_v2.patch;https://issues.apache.org/jira/secure/attachment/12500807/bookkeeper-93_v2.patch,26/Oct/11 13:23;hustlmsp;bookkeeper-93_v3.patch;https://issues.apache.org/jira/secure/attachment/12500879/bookkeeper-93_v3.patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2011-10-25 15:44:56.296,,,no_permission,,,,,,,,,,,,,214540,,,Thu Oct 27 16:53:11 UTC 2011,,,,,,0|i0u513:,173956,,,,,,,,"25/Oct/11 15:44;ikelly;1) Yikes, that's a big oversight. There is actually a test for it, BookieReadWriteTest#testReadFromOpenLedger, but the @Test annotation is missing from it so it never gets run. Also, the actual checking code seems to be wrong, as it tries to read from lh, not lhOpen (line 861). Could you break the fix for this problem into a single patch along with the fix for the test and ill commit that as BOOKKEEPER-91. 

2) This is unrelated to 1) so should be in a separate JIRA. Also, im unsure the race you describe can occur. ReadLastConfirmedOp#readEntryComplete is already synchronized.

3) Actually this could go into BOOKKEEPER-91. However, I think a better solution may be to do a ReadLastConfirmedOp in the else part of LedgerOpenOp#processResult. 
{code}
        if(!unsafe) {
            lh.recover(new GenericCallback<Void>() {
            @Override
            public void operationComplete(int rc, Void result) {
                if (rc != BKException.Code.OK) {
                    cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);
                } else {
                    cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);
                }
            }
       } else {
           lh.asyncReadLastConfirmed(new ReadLastConfirmedCallback() {
               void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {
                   lh.lastAddConfirmed = lh.lastAddPushed = lastConfirmed;
                   cb.complete(rc, LedgerOpenOp.this.ctx);
               }
           });
       }
{code}

This way, a non recovery ledger will be able to read entries up to the point it was opened and no further. I think this should be correct behaviour, as otherwise it could be possible for the ledger to read an entry which hasn't been confirmed to the writer. If it hasn't been confirmed to the writer and the writer closes at that point. Which means the reader can read more than the writer, which I don't think affects correctness, but is a little ugly.","26/Oct/11 01:40;hustlmsp;Ivan,

> 2) This is unrelated to 1) so should be in a separate JIRA. Also, im unsure the race you describe can occur. ReadLastConfirmedOp#readEntryComplete is already synchronized.

You are right. readEntryComplete is synchronized, no race condition on it.

the issue is that readLastConfirmedComplete will be triggered twice.

{code:title=ReadLastConfirmedOp.java|borderStyle=solid}
        // other return codes dont count as valid responses
        if ((validResponses >= lh.metadata.quorumSize) &&
                notComplete) {
            notComplete = false;
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Read Complete with enough validResponses"");
            }
            cb.readLastConfirmedComplete(BKException.Code.OK, maxAddConfirmed, this.ctx);
            return;
        }

        if (numResponsesPending == 0) {
            // Have got all responses back but was still not enough, just fail the operation
            LOG.error(""While readLastConfirmed ledger: "" + ledgerId + "" did not hear success responses from all quorums"");
            cb.readLastConfirmedComplete(BKException.Code.LedgerRecoveryException, maxAddConfirmed, this.ctx);
        }
{code}

The last one will trigger readLastConfirmedComplete no matter there is enough valid responses or not.

{quote}
2011-10-26 09:34:48,874 - DEBUG - [pool-174-thread-1:ReadLastConfirmedOp@90] - Read Complete with enough validResponses
2011-10-26 09:34:48,874 - ERROR - [pool-174-thread-1:ReadLastConfirmedOp@97] - While readLastConfirmed ledger: 1 did not hear success responses from
{quote}","26/Oct/11 02:13;hustlmsp;Thanks for Ivan's suggestions.

fixes:

1) avoid two callbacks when readLastConfirmedOp

2) readLastConfirmedOp to set lastAddConfirmed when opening ledger no recovery. so the entries be read will all confirmed by writter.

3) add unsafeRead in LedgerHandle to avoid close/write on it.","26/Oct/11 10:08;ikelly;I see you created BOOKKEEPER-94 for the test change. That change should actually be part of this JIRA. It's part 1) (The two callback changes) which should be in the other JIRA, as it's unrelated, whereas 2) & 3) and the fix to testing is all the same thing.

Regarding 2 & 3, these changes look good. However, I'd change the unsafeRead flag to be called readOnly. Also, add a logging line before the addComplete in asyncAddEntry saying that the client tried to write on a read only ledger handle.","26/Oct/11 10:12;ikelly;My previous comment was incomplete. The changes should be tested also. The whole reason the bug exists is a lack of testing in the first place. The easiest thing is to simply extend the BookieReadWriteTest for his case to ensure that add fails on lhOpen, and that the ledger metadata isn't closed after lhOpen is called.

Im still confused by the callback issue on readLastConfirmedOp. The only scenario where the callback can be called twice is where it recieves more responses than it has requests made. This discussion should continue on BOOKKEEPER-94.","26/Oct/11 13:23;hustlmsp;attach new patch.

add testing close/write on read only LedgerHandle on BookieReadWriteTest#testReadFromOpenLedger ","27/Oct/11 16:53;ikelly;+1

Committed as r1189867, Thanks Sijie.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
using wrong context object in readLastConfirmedComplete callback,BOOKKEEPER-92,12528667,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,25/Oct/11 12:50,07/Dec/11 15:56,14/Mar/19 02:39,25/Oct/11 15:15,4.0.0,,4.0.0,,,,,,0,,should context in ReadLastConfirmedOp not the context passed from bookieClient.readEntry.,,,,,,,,,,,,,,,,,,,25/Oct/11 12:53;hustlmsp;bookkeeper-92.patch;https://issues.apache.org/jira/secure/attachment/12500668/bookkeeper-92.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-25 15:14:55.447,,,no_permission,,,,,,,,,,,,,214527,,,Tue Oct 25 15:14:55 UTC 2011,,,,,,0|i0u4yf:,173944,,,,,,,,25/Oct/11 12:53;hustlmsp;use context in ReadLastConfirmedOp instead of  context passed from bookieClient.readEntry,25/Oct/11 15:14;ikelly;Committed as r1188704. Thanks Sijie.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
derby doesn't like - in the topic names,BOOKKEEPER-88,12527798,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,breed,breed,19/Oct/11 18:34,07/Dec/11 15:56,14/Mar/19 02:39,24/Oct/11 09:38,,,4.0.0,,,,,,0,,"it's just a benchmark, but it is convenient to be able to use derby as a backend for the hedwig benchmark. derby does not support - in topic names.",,,,,,,,,,,,,,,,,,,19/Oct/11 18:35;breed;BOOKKEEPER-88.patch;https://issues.apache.org/jira/secure/attachment/12499729/BOOKKEEPER-88.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-20 09:16:10.343,,,no_permission,,,,,,,,,,,,,89834,,,Mon Oct 24 09:38:42 UTC 2011,,,,,,0|i0u627:,174123,,,,,,,,20/Oct/11 09:16;ikelly;Why doesn't it like '-'? What kind of error does it throw?,21/Oct/11 22:32;breed;it's a sql error. i think the derby binding makes a table for each topic and table names cannot have -. (evidently),24/Oct/11 09:38;ikelly;Committed at r1188059. Thanks Ben.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestHedwigHub exhausts direct buffer memory with netty 3.2.4.Final,BOOKKEEPER-87,12527714,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Oct/11 08:55,07/Dec/11 15:56,14/Mar/19 02:39,17/Nov/11 14:01,,,4.0.0,,,,,,0,,"The error below happens. This happens because the test starts and stops a lot of bookies, and hedwig hub for each test. Each of these allocates some Direct Buffer memory, which doesn't automatically get returned the the pool once the test is finished. The DirectByteBuffers do seem to be garbage collected, but they don't actually clean up the direct buffer memory until an internal cleaner runs later. I can't find a way to run this manually.

This happens since BOOKKEEPER-65, as the new netty allocates more direct buffers. A work around for the problem for the moment is to run test with 1G heap.
$ mvn test -DargLine=""-Xmx1G""


<snip>
Running org.apache.hedwig.server.integration.TestHedwigHub
Tests run: 92, Failures: 0, Errors: 47, Skipped: 0, Time elapsed: 60.523 sec <<< FAILURE!

Results :

Tests in error: 
  testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHub): Direct buffer memory
  testManualConsumeClient[2](org.apache.hedwig.server.integration.TestHedwigHub): Direct buffer memory
  testManualConsumeClient[2](org.apache.hedwig.server.integration.TestHedwigHub)
  testAttachToSubscriptionSuccess[2](org.apache.hedwig.server.integration.TestHedwigHub): Direct buffer memory
  testAttachToSubscriptionSuccess[2](org.apache.hedwig.server.integration.TestHedwigHub)
  testServerRedirect[2](org.apache.hedwig.server.integration.TestHedwigHub): Direct buffer memory
  testServerRedirect[2](org.apache.hedwig.server.integration.TestHedwigHub)
  testSubscribeAndConsume[2](org.apache.hedwig.server.integration.TestHedwigHub): Direct buffer memory
  testSubscribeAndConsume[2](org.apache.hedwig.server.integration.TestHedwigHub)
  testServerFailoverPublishOnly[2](org.apache.hedwig.server.integration.TestHedwigHub): Direct buffer memory
  testServerFailoverPublishOnly[2](org.apache.hedwig.server.integration.TestHedwigHub)
",,,,,,,,,,,,,,,,,,,11/Nov/11 17:57;ikelly;BOOKKEEPER-87.diff;https://issues.apache.org/jira/secure/attachment/12503391/BOOKKEEPER-87.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-17 09:43:46.493,,,no_permission,,,,,,,,,,,,,89191,,,Thu Nov 17 14:06:37 UTC 2011,,,,,,0|i0u4wn:,173936,,,,,,,,11/Nov/11 17:57;ikelly;Patch increases the max heap for hedwig server testing.,17/Nov/11 09:43;fpj;+1,17/Nov/11 14:01;fpj;I have also added to the pom in bookkeeper-server. Committed revision 1203191.,"17/Nov/11 14:06;hudson;Integrated in bookkeeper-trunk #225 (See [https://builds.apache.org/job/bookkeeper-trunk/225/])
    BOOKKEEPER-87: TestHedwigHub exhausts direct buffer memory with netty 3.2.4.Final (ivank via fpj)

fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookkeeper-benchmark fails to compile after BOOKKEEPER-68,BOOKKEEPER-86,12527621,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,18/Oct/11 17:04,07/Dec/11 15:56,14/Mar/19 02:39,18/Oct/11 18:14,,,4.0.0,,,,,,0,,This is the LedgerHandle#close compatibility issue. I must have forgotten to clean before testing the patch last night.,,,,,,,,,,,,,,,,,,,18/Oct/11 17:28;ikelly;BOOKKEEPER-86.diff;https://issues.apache.org/jira/secure/attachment/12499564/BOOKKEEPER-86.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-18 17:35:00.325,,,no_permission,,,,,,,,,,,,,88872,,,Tue Oct 18 18:14:59 UTC 2011,,,,,,0|i0u4tb:,173921,,,,,,,,18/Oct/11 17:35;breed;+1 looks good,"18/Oct/11 18:14;breed;Committed revision 1185775.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
disk space of garbage collected entry logger files isn't reclaimed util process quit ,BOOKKEEPER-81,12527158,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,14/Oct/11 08:37,07/Dec/11 15:56,14/Mar/19 02:39,17/Nov/11 09:00,4.0.0,,4.0.0,,,,,,0,,"disk space of garbage collected entry logger files isn't reclaimed until process quit. 
it is caused by entry logger doesn't close the file channel of garbage collected files. so the process kept an reference to this file, filesystem only reclaim its space when the process quit.",,,,,,,,,,,,,,,,,,,14/Oct/11 08:37;hustlmsp;bookkeeper-81.patch;https://issues.apache.org/jira/secure/attachment/12498999/bookkeeper-81.patch,03/Nov/11 13:47;hustlmsp;bookkeeper-81.patch_v2;https://issues.apache.org/jira/secure/attachment/12502153/bookkeeper-81.patch_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-11-03 08:53:22.811,,,no_permission,,,,,,,,,,,,,85538,,,Thu Nov 17 09:06:29 UTC 2011,,,,,,0|i0u4v3:,173929,,,,,,,,14/Oct/11 08:37;hustlmsp;close opened file channel during garbage collection so deleted file space can be reclaimed,"03/Nov/11 08:53;fpj;This is mostly good, Sijie. Just a couple of quick comments:

# Since we have been working hard to clean up the API, I was wondering if fileChannel() really needs to be public;
# I don't think we have guidelines for writing log messages, but I think it would be nice to make in general message more concise and to try to pick some key words that help us to spot problems more easily. For example, I would rather say ""Exception while closing..."" rather than ""Trying to close..."". This is really a small issue, though.  ",03/Nov/11 08:54;fpj;Cancelling until we sort out the api issue raised.,"03/Nov/11 13:54;hustlmsp;change fileChannel to getFileChannel, also make it package-private.

change logging message following guideline.","17/Nov/11 09:00;fpj;+1, thanks, Sijie! Committed revision 1203118.","17/Nov/11 09:06;hudson;Integrated in bookkeeper-trunk #222 (See [https://builds.apache.org/job/bookkeeper-trunk/222/])
    BOOKKEEPER-81: disk space of garbage collected entry logger files isn't reclaimed util process quit (Sijie Guo via fpj)

fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
subscription msg queue race condition in hedwig c++ client,BOOKKEEPER-80,12527155,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,14/Oct/11 07:50,07/Dec/11 15:56,14/Mar/19 02:39,08/Nov/11 18:10,4.0.0,,4.0.0,,,hedwig-client,,,0,,,,,,,,,,,,,,,,,BOOKKEEPER-52,,,,04/Nov/11 16:10;hustlmsp;BOOKKEEPER-80.patch_v2;https://issues.apache.org/jira/secure/attachment/12502471/BOOKKEEPER-80.patch_v2,14/Oct/11 08:08;hustlmsp;bookkeeper-80.patch;https://issues.apache.org/jira/secure/attachment/12498995/bookkeeper-80.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-10-19 14:48:33.448,,,no_permission,,,,,,,,,,,,,85535,,,Tue Nov 08 18:28:28 UTC 2011,,,,,,0|i0u4x3:,173938,,,,,,,,"14/Oct/11 07:52;hustlmsp;We also need synchronized on subscription message queue, which is similar to what we did in java client.",14/Oct/11 08:08;hustlmsp;synchronized on message queue to ensure order.,"19/Oct/11 14:48;ikelly;Do you have a test which reproduces the issue? It would be good to get it into the unit tests. Otherwise, the change looks good to me.
","04/Nov/11 16:10;hustlmsp;attach a new patch, also add a test case to reproduce race condition issue.",08/Nov/11 18:09;ikelly;Looks good! +1 Committing,"08/Nov/11 18:10;ikelly;Committed as r1199372, thanks Sijie.","08/Nov/11 18:28;hudson;Integrated in bookkeeper-trunk #208 (See [https://builds.apache.org/job/bookkeeper-trunk/208/])
    BOOKKEEPER-80: subscription msg queue race condition in hedwig c++ client (Sijie Guo via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/subscriberimpl.h
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/test/pubsubtest.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/test/util.h
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
randomly startDelivery/stopDelivery will core dump in c++ hedwig client,BOOKKEEPER-79,12527154,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,14/Oct/11 07:37,07/Dec/11 15:56,14/Mar/19 02:39,21/Nov/11 10:33,4.0.0,,4.0.0,,,hedwig-client,,,0,,"in our test program, we tried to startDelivery/stopDelivery different subscriptions randomly. And it core dump.",,,,,,,,,,,,,,,,,,,14/Nov/11 17:06;hustlmsp;BOOKKEEPER-79.patch_v2;https://issues.apache.org/jira/secure/attachment/12503639/BOOKKEEPER-79.patch_v2,18/Nov/11 10:22;hustlmsp;BOOKKEEPER-79.patch_v3;https://issues.apache.org/jira/secure/attachment/12504194/BOOKKEEPER-79.patch_v3,18/Nov/11 17:25;hustlmsp;BOOKKEEPER-79.patch_v4;https://issues.apache.org/jira/secure/attachment/12504232/BOOKKEEPER-79.patch_v4,19/Nov/11 08:29;hustlmsp;BOOKKEEPER-79.patch_v5;https://issues.apache.org/jira/secure/attachment/12504345/BOOKKEEPER-79.patch_v5,14/Oct/11 08:02;hustlmsp;bookkeeper-79.patch;https://issues.apache.org/jira/secure/attachment/12498994/bookkeeper-79.patch,18/Nov/11 18:14;ikelly;make-check-errors.txt;https://issues.apache.org/jira/secure/attachment/12504239/make-check-errors.txt,17/Nov/11 14:40;ikelly;pubsubtest.cpp;https://issues.apache.org/jira/secure/attachment/12504066/pubsubtest.cpp,,,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2011-10-19 14:47:05.238,,,no_permission,,,,,,,,,,,,,85534,,,Mon Nov 21 13:24:26 UTC 2011,,,,,,0|i0u4xj:,173940,,,,,,,,"14/Oct/11 07:47;hustlmsp;Did investigation on startDelivery/stopDelivery. 
I found that stopDelivery just set flag *receiving* as false without doing other things.

Let me explain the startDelivery/stopDelivery flow.

startDelivery:
1) check if *receiving* is true
2) if *receiving* is true, it just return without doing anything. since it has been started.
3) if *receiving* is false, it set *receiving* as true. and put an async io read in boost io queue to read 4bytes message size.
4) if async sizeRead succeed, it will trigger sizeReadCallback and put an async io read in boost io queue to read actual message data.

if we just startDelivery without stopDelivery, the boost io queue will be:

> boost io queue <
| read size |
| read msg |
| read size |
| read msg |
| ... |

but if we first startDelivery (1) -> stopDelivery (1) -> startDelivery (2), 
the second delivery will add another read size io in the queue, then it will be:

> boost io queue <
| read size |
| read msg |
| ... |
| *read size* |
| *read size* |
| read msg |

so the data stream is corrupted which will cause memory corrupted. it core dump.",14/Oct/11 08:02;hustlmsp;avoid putting asyc io in boost io queue when startDelivery again.,"19/Oct/11 14:47;ikelly;Could you add your test program to the tests in hedwig-client/src/main/cpp/test/. I've added another JIRA, BOOKKEEPER-71 which fixes the tests, which hadn't really been run since we opensourced hedwig. Perhaps you could review that change?","20/Oct/11 02:07;hustlmsp;Ivan, Let me add the test program.",14/Nov/11 17:06;hustlmsp;attach new patch with test case.,"17/Nov/11 12:19;ikelly;I'm running the testcase (without the fix) and I'm getting a number of different errors. What error do you get which shows this problem?

Also, I'm not sure the fix is correct. I don't think it's possible for receiving to be false, while stopReceivingBefore is false, because there's a lock,   
{code}
boost::lock_guard<boost::mutex> lock(receiving_lock);
{code}
which explicitly stops this situation.

What this change seems to do is that, once you stopReceiving, the channel can never start receiving again? ","17/Nov/11 12:25;ikelly;Actually, I think the problem is that we always startReceiving with readSize() even though the channel may have read the size, and be in the message reading part. I think this needs to be fixed so that the state of the channel is recorded when you stopReceiving, and when you startReceiving again, you decide what you need to read by looking at the previous state.","17/Nov/11 14:21;hustlmsp;> What error do you get which shows this problem?

It core dump running the test case.

> there's a lock, which explicitly stops this situation.

The lock is for changing received value. stopReceiving can set receiving to false since it can obtain the lock.

> I think this needs to be fixed so that the state of the channel is recorded when you stopReceiving

We don't need to record the reading state of the channel, since the receiving check is in readSize which ensure it stop exactly in a frame of message.

{code}

/*static*/ void DuplexChannel::readSize(DuplexChannelPtr channel) {
  if (!channel->isReceiving()) {
    return;
  }

  int toread = sizeof(uint32_t) - channel->in_buf.size();
  LOG4CXX_DEBUG(logger, "" size of incoming message "" << sizeof(uint32_t)
                << "", currently in buffer "" << channel->in_buf.size()
                << "" channel("" << channel.get() << "")"");

  if (toread < 0) {
    DuplexChannel::sizeReadCallbackHandler(channel, boost::system::error_code(), 0);
  } else {
    //  in_buf_size.prepare(sizeof(uint32_t));
    boost::asio::async_read(channel->socket, channel->in_buf,
                            boost::asio::transfer_at_least(sizeof(uint32_t)),
                            boost::bind(&DuplexChannel::sizeReadCallbackHandler,
                                        channel,
                                        boost::asio::placeholders::error,
                                        boost::asio::placeholders::bytes_transferred));
  }
}
{code}

The race here is between #startReceiving, #stopReceiving, and #readSize, as below

1. #readSize passed isReceiving() checking and before async_read is called.
2. main thread do #startReceiving #stopReceiving. it insert a new async_read op to read size.
3. #readSize calls async_read to insert its async_read op to read size.

But you comment remind me that the patch only fix the above case. In following case, it failed:

1. main thread #stopReceiving first
2. #readSize check receiving, return. no more async_read op are inserted.
3. main thread #startReceiving, it doesn't insert any async_read op, since stopReceivingBefore is true.

I think the root cause of race here is between checking receiving flag and changing receiving flag. we have lock in #startReceiving and #stopReceiving, but we have no lock in #readSize which checks receiving flag.

The right fix may be:
need a flag which indicates whether there is a async_read size op in io service. we only do readSize if there is no async_read size op in io service when #startReceiving. said the flag is reading, its lock is reading_lock. the code is showed as below.

{code}
void DuplexChannel::startReceiving() {
  LOG4CXX_DEBUG(logger, ""DuplexChannel::startReceiving channel("" << this << "") currently receiving = "" << receiving);

  boost::lock_guard<boost::mutex> lock(receiving_lock);
  if (receiving) {
    return;
  }
  receiving = true;

  {
    boost::lock_guard<boost::mutex> lock(reading_lock);
    if (!reading) {
      reading = true;
      DuplexChannel::doReadSize(shared_from_this());
    }
  }
}

// no change in #stopReceiving
void DuplexChannel::stopReceiving() {
  LOG4CXX_DEBUG(logger, ""DuplexChannel::stopReceiving channel("" << this << "")"");

  boost::lock_guard<boost::mutex> lock(receiving_lock);
  receiving = false;
  stopReceivingBefore = true;
}

/*static*/ void DuplexChannel::readSize(DuplexChannelPtr channel) {
  boost::lock_guard<boost::mutex> lock(receiving_lock);
  if (!channel->isReceiving()) {
    boost::lock_guard<boost::mutex> lock(reading_lock);
    reading = false;
    return;
  }

  doReadSize(channel);
}

void doReadSize(DuplexChannelPtr channel) {

  int toread = sizeof(uint32_t) - channel->in_buf.size();
  LOG4CXX_DEBUG(logger, "" size of incoming message "" << sizeof(uint32_t)
                << "", currently in buffer "" << channel->in_buf.size()
                << "" channel("" << channel.get() << "")"");

  if (toread < 0) {
    DuplexChannel::sizeReadCallbackHandler(channel, boost::system::error_code(), 0);
  } else {
    //  in_buf_size.prepare(sizeof(uint32_t));
    boost::asio::async_read(channel->socket, channel->in_buf,
                            boost::asio::transfer_at_least(sizeof(uint32_t)),
                            boost::bind(&DuplexChannel::sizeReadCallbackHandler,
                                        channel,
                                        boost::asio::placeholders::error,
                                        boost::asio::placeholders::bytes_transferred));
  }
}
{code}
","17/Nov/11 14:44;ikelly;I think we agree on where the problem is. I think the fix will need a bit more though. Currently we seem to allow the messageReceived to be called even if stopSending has been called. stopReceiving should stop receiving, so no messages should come from the channel after it call.

I've attached pubsubtest.cpp which seems to trigger the problem more reliably.","17/Nov/11 18:53;ikelly;The above code will deadlock on mutexes. There's a number of issues, one being that we try to handle the messages in the async io thread.

I've made an attempt to sort this out, and it just gets ugly. Also, I think we should block stopDelivery from returning until we have stopped all reads, otherwise callbacks may trigger when we don't expect them. Trying this with some locks leads to deadlocks.

https://github.com/ivankelly/bookkeeper/tree/BOOKKEEPER-79

We can discuss this tomorrow morning.","18/Nov/11 10:21;hustlmsp;Ivan, thanks for your comments. It is great that you tried to avoid callbacks be triggered after stopReceiving in new patch. But a thread is introduced for each channel, if we have lots of subscriptions we will have same number of threads. it is not good.

Beside the number of threads issue, #stopReceiving will be blocked if no data sent from server in the channel, since it only be notified in messageCallbackHandler. async_read will not trigger the bound callback if no data read from the channel.

I attached a new patch based on my previous comments, which can
1) ensure no callbacks after #stopReceiving, also ensure no message lost between stopDelivery and startDelivery (add order checking in MessageHandlerCallback)
2) avoid the deadlock on mutexes.","18/Nov/11 12:01;ikelly;I think your patch is good. Could you rename last_response to outstanding_response? Also, the full test suite doesn't succeed when I run this on trunk. One problem is BOOKKEEPER-115, but once that is fixed, there are still problems. (running with make check)

The thread issue is something we should look at in general in the future. Im of the opinion that we should only have one one channel per hub. But that requires server side buffering of messages. 

{quote}
Beside the number of threads issue, #stopReceiving will be blocked if no data sent from server in the channel, since it only be notified in messageCallbackHandler. async_read will not trigger the bound callback if no data read from the channel.
{quote}
This was where I got stuck yesterday before giving up.


","18/Nov/11 17:24;hustlmsp;I have tried running 'make check' several times. it is OK for me, only one time there is an Exception thrown in socket.close, the exception indicates closing a Not Connect socket.

I think the exception is due to shut down a channel:
{code}
void DuplexChannel::kill() {
    
    ...
  
    socket.cancel();
    socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);
    socket.close();

    ...
}
{code}

I think we can change using cancel/shutdown/close to cancel(&error)/shutdown(&error)/close(&error), which returning an error code instead of throwing exception. http://www.boost.org/doc/libs/1_48_0/doc/html/boost_asio/reference/basic_stream_socket/close/overload2.html 

I am not sure the problems described in your comments, could you give more information about them?","18/Nov/11 17:25;hustlmsp;new patch, rename last_response to outstanding_response","18/Nov/11 18:12;ikelly;Have to you patched against the latest trunk? Did you clean before the check? I've attached a file with the errors I get. The cancel/shutdown/error idea is good.
Also, pubsubtest.cpp gives warnings.","19/Nov/11 08:27;hustlmsp;I have run 'make clean check' against latest trunk (including BOOKKEEPER-114 and BOOKKEEPER-115) for several times. most is OK, sometimes I got following 2 exceptions.

first one is Exception during socket.close, as commented in previous comments.

second one is SERVER_DOWN exception thrown in publish_thread (running more than ~250 seconds) in #testRandomDelivery, which due to hub server disconnect to zk. I added code in publish thread to catch such exception to avoid it.
{code}
2011-11-19 11:59:46,856 - INFO  [Thread-2-SendThread(feelpartfirm-lm.local:2181):             ClientCnxn$SendThread@1057] - Client session timed out, have not heard from server in 2908ms  for sessionid 0x133b9f6474f0006, closing socket connection and attempting reconnect
2011-11-19 11:59:46,988 - ERROR [Thread-2-EventThread:ZkUtils@75] - Topic:                    randomDeliveryTopic subscriberId: mysub-randomDelivery could not set subscription state:      consumeSeqId: local:21950,zkPath: /hedwig/CppUnitTest/topics/randomDeliveryTopic/subscribers/ mysub-randomDelivery
org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode =               ConnectionLoss for /hedwig/CppUnitTest/topics/randomDeliveryTopic/subscribers/mysub-          randomDelivery
        at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)
        at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
        at org.apache.hedwig.zookeeper.ZkUtils.logErrorAndCreateZKException(ZkUtils.java:74)        at org.apache.hedwig.server.subscriptions.ZkSubscriptionManager$3.                    safeProcessResult(ZkSubscriptionManager.java:186)        at org.apache.hedwig.zookeeper.SafeAsyncZKCallback$StatCallback.                      processResult(SafeAsyncZKCallback.java:30)        at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:554)
        at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
2011-11-19 11:59:46,991 - WARN  [Thread-2-EventThread:ZkTopicManager$2@94] - ZK client has    been disconnected to the ZK server! 2011-11-19 11:59:47,054 - INFO  [Thread-2-SendThread(feelpartfirm-lm.local:2181):             ClientCnxn$SendThread@933] - Opening socket connection to server /127.0.0.1:21812011-11-19 11:59:47,058 - INFO  [Thread-2-SendThread(localhost:2181):ClientCnxn$SendThread@   846] - Socket connection established to localhost/127.0.0.1:2181, initiating session2011-11-19 11:59:47,069 - INFO  [Thread-2-SendThread(localhost:2181):ClientCnxn$SendThread@   1181] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid =        0x133b9f6474f0006, negotiated timeout = 4362
2011-11-19 11:59:47,069 - INFO  [Thread-2-EventThread:ZkTopicManager$2@98] - ZK client has    been reconnected to the ZK server!
{code}

",19/Nov/11 08:29;hustlmsp;new patch remove warnings in pubsubtest.cpp due to unused variables. also catch exception in IntegerPublisher for testRandomDelivery. ,19/Nov/11 09:54;fpj;Cancelling the patch until we clear up the issues Sijie issue Sijie is raising. ,"19/Nov/11 09:55;fpj;Never mind, I got confused with the comments :-)","21/Nov/11 10:33;ikelly;Committed r1204437, Thanks Sijie.

The testing problem was a problem in my environment.","21/Nov/11 13:24;hudson;Integrated in bookkeeper-trunk #234 (See [https://builds.apache.org/job/bookkeeper-trunk/234/])
    BOOKKEEPER-79: randomly startDelivery/stopDelivery will core dump in c++ hedwig client (Sijie Guo via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/channel.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/channel.h
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/scripts/server-control.sh
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/test/pubsubtest.cpp
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper Persistence Manager should give up topic on error,BOOKKEEPER-74,12526170,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,ikelly,ikelly,07/Oct/11 10:31,22/Oct/12 14:50,14/Mar/19 02:39,01/Mar/12 14:13,,,4.1.0,,,,,,0,,"There are a couple of problematic cases to deal with:
i)Other region is pushing messages faster that my bookkeeper can handle it (unlikely, but we should have an answer for
this setting)
ii) If there is an error from BK while persisting messages, we cannot continue (because the ordering gurantee might be
violated). In this case, the BK layer should give up the topic.

To retain ordering guarantees, this should be done below the Region manager in the persistence manager layer

",,,,,,,,,,,,,,,,,,,29/Feb/12 10:39;hustlmsp;BK-74.patch;https://issues.apache.org/jira/secure/attachment/12516546/BK-74.patch,29/Feb/12 14:59;hustlmsp;BK-74.patch_v2;https://issues.apache.org/jira/secure/attachment/12516568/BK-74.patch_v2,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-29 10:39:37.005,,,no_permission,,,,,,,,,,,,,49898,,,Thu Mar 01 14:49:49 UTC 2012,,,,,,0|i0axov:,61731,,,,,,,,29/Feb/12 10:39;hustlmsp;attach a patch which releases topic when encountering bookkeeper exception when persisting message.,29/Feb/12 14:59;hustlmsp;the previous missed some changes. attach a correct patch.,"01/Mar/12 14:13;ikelly;Committed as r1295571, thanks Sijie.","01/Mar/12 14:49;hudson;Integrated in bookkeeper-trunk #384 (See [https://builds.apache.org/job/bookkeeper-trunk/384/])
    BOOKKEEPER-74: Bookkeeper Persistence Manager should give up topic on error (sijie via ivank) (Revision 1295571)

     Result = ABORTED
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings issued by FindBugs,BOOKKEEPER-72,12526167,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,07/Oct/11 10:20,22/Oct/12 14:50,14/Mar/19 02:39,17/May/12 16:33,,,4.1.0,,,,,,0,,Fix warnings issued by FindBugs,,,,,,,,,,,,,,,,,,,10/May/12 12:57;ikelly;BOOKKEEPER-72.diff;https://issues.apache.org/jira/secure/attachment/12526337/BOOKKEEPER-72.diff,07/May/12 15:28;ikelly;BOOKKEEPER-72.diff;https://issues.apache.org/jira/secure/attachment/12525859/BOOKKEEPER-72.diff,28/Nov/11 17:13;ikelly;findbugsXml.xml;https://issues.apache.org/jira/secure/attachment/12505355/findbugsXml.xml,28/Nov/11 17:13;ikelly;findbugsXml.xml;https://issues.apache.org/jira/secure/attachment/12505354/findbugsXml.xml,28/Nov/11 17:13;ikelly;findbugsXml.xml;https://issues.apache.org/jira/secure/attachment/12505353/findbugsXml.xml,28/Nov/11 17:13;ikelly;findbugsXml.xml;https://issues.apache.org/jira/secure/attachment/12505352/findbugsXml.xml,28/Nov/11 17:13;ikelly;findbugsXml.xml;https://issues.apache.org/jira/secure/attachment/12505351/findbugsXml.xml,,,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2012-04-25 15:48:25.803,,,no_permission,,,,,,,,,,,,,49894,,,Thu May 17 17:00:44 UTC 2012,,,,,,0|i0axn3:,61723,,,,,,,,28/Nov/11 17:13;ikelly;Attached warnings.,28/Nov/11 17:28;ikelly;There's too many warning to fix before this release. Making a blocker for 4.1.0.,"25/Apr/12 15:48;umamaheswararao;Hi Ivan,
 Lets split the work based on bug category. As bug count is 54 currently. Some might have addressed already.

Also my suggestion is to add exclude filter file to add any invalid bugs into it.","25/Apr/12 15:55;ikelly;Actually, I have most of it done. I have about 36 more to do in hedwig-server. hedwig-protocol & hedwig-client are done (both were tiny). There's already a patch available to bookkeeper-server. bookkeeper-benchmark is still untouched if you want to look at that.

","25/Apr/12 16:16;umamaheswararao;Thanks Ivan, for the deatils. I just filed a bug BOOKKEEPER-228 for BK Bench. You can assign that issue to me. I will take care of it.",25/Apr/12 16:24;ikelly;I can't find your name on the assignee list :/ I'll ask the infra guys.,25/Apr/12 16:34;fpj;I have added Uma to the contributors list.,25/Apr/12 17:27;umamaheswararao;Thanks a lot Flavio and Ivan.,07/May/12 15:28;ikelly;This patch fixes the findbugs in hedwig-*.,"07/May/12 15:30;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/5051/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

This patch is for the hedwig components of Bookkeeper. 


This addresses bug BOOKKEEPER-72.
    https://issues.apache.org/jira/browse/BOOKKEEPER-72


Diffs
-----

  hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java ba841af 
  hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java fc811e9 
  hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java b84d9c3 
  hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java 4df1368 
  hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java 118340a 
  hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java 4eff593 
  hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java 7ac6d43 
  hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java 7cc950c 
  hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java 71c481e 
  hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java 52089f5 
  hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java 925e6b7 
  hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java cfea7f4 
  hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java ae8f439 
  hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java b5e9922 
  hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java a17f56b 
  hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java 5da8e16 
  hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java a6cf89e 
  hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java b989057 
  hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java 8660544 
  hedwig-server/pom.xml 12c8eba 
  hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java b2ef3a8 
  hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java c17ffcb 
  hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java 77a09d0 
  hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java 54c5ce5 
  hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java 5ff4bc8 
  hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java 3804705 
  hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java 5fbcbc4 
  hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java d1f755e 
  hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java 6d91167 
  hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java 2252f43 
  hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java 5f6e363 
  hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java 65e2bd2 
  hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java fdc308d 
  hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java eef014c 
  hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java a11921e 

Diff: https://reviews.apache.org/r/5051/diff


Testing
-------


Thanks,

Ivan

",10/May/12 12:57;ikelly;New patch. rebased to trunk and added findbugs exclude for findbugs for localdb persistence manager. This findbug cannot be fixed as there's no way to use an SQL parameter for a table in a query. I hash the topic to about SQL injections.,"10/May/12 12:59;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/5051/
-----------------------------------------------------------

(Updated 2012-05-10 12:59:25.008772)


Review request for bookkeeper.


Changes
-------

Added findbugsExclude.xml


Summary
-------

This patch is for the hedwig components of Bookkeeper. 


This addresses bug BOOKKEEPER-72.
    https://issues.apache.org/jira/browse/BOOKKEEPER-72


Diffs (updated)
-----

  hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java 54c5ce5 
  hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java 5ff4bc8 
  hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java 77a09d0 
  hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java c17ffcb 
  hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java a6cf89e 
  hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java b989057 
  hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java 8660544 
  hedwig-server/pom.xml c7e41c9 
  hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java b2ef3a8 
  hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java a17f56b 
  hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java 5da8e16 
  hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java cfea7f4 
  hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java ae8f439 
  hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java b5e9922 
  hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java 7ac6d43 
  hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java 7cc950c 
  hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java 71c481e 
  hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java 52089f5 
  hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java 925e6b7 
  hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java 4eff593 
  hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java 4df1368 
  hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java 118340a 
  hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java fc811e9 
  hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java b84d9c3 
  hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java ba841af 
  hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java 3804705 
  hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java 5fbcbc4 
  hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java d1f755e 
  hedwig-server/src/main/resources/findbugsExclude.xml PRE-CREATION 
  hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java 6b2e731 
  hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java 2252f43 
  hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java 5f6e363 
  hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java 65e2bd2 
  hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java fdc308d 
  hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java eef014c 
  hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java a11921e 

Diff: https://reviews.apache.org/r/5051/diff


Testing
-------


Thanks,

Ivan

",17/May/12 12:01;hustlmsp;the patch looks good to me. +1,"17/May/12 16:33;ikelly;Committed r1339691, Thanks for reviewing Sijie","17/May/12 17:00;hudson;Integrated in bookkeeper-trunk #515 (See [https://builds.apache.org/job/bookkeeper-trunk/515/])
    BOOKKEEPER-72: Fix warnings issued by FindBugs (ivank) (Revision 1339691)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/resources/findbugsExclude.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hedwig c++ client does not build. ,BOOKKEEPER-71,12525208,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Sep/11 16:26,07/Dec/11 15:56,14/Mar/19 02:39,28/Oct/11 13:35,4.0.0,,4.0.0,,,,,,0,,The path to the protobuf spec is wrong in lib/Makefile.am. ,,,,,,,,,,,,,,,,,,,28/Oct/11 10:30;ikelly;BOOKKEEPER-71.diff;https://issues.apache.org/jira/secure/attachment/12501268/BOOKKEEPER-71.diff,28/Oct/11 10:29;ikelly;BOOKKEEPER-71.diff;https://issues.apache.org/jira/secure/attachment/12501267/BOOKKEEPER-71.diff,26/Oct/11 16:35;ikelly;BOOKKEEPER-71.diff;https://issues.apache.org/jira/secure/attachment/12500900/BOOKKEEPER-71.diff,19/Oct/11 14:40;ikelly;BOOKKEEPER-71.diff;https://issues.apache.org/jira/secure/attachment/12499688/BOOKKEEPER-71.diff,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2011-10-19 14:46:10.709,,,no_permission,,,,,,,,,,,,,40040,,,Fri Oct 28 13:35:07 UTC 2011,,,,,,0|i0u4rz:,173915,,,,,,,,19/Oct/11 14:40;ikelly;I also fixed up the testing with this patch.,"19/Oct/11 14:46;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2446/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

The path to the protobuf spec is wrong in lib/Makefile.am.

I also cleaned up the tests, and made it use the provided scripts to stop and start bookkeeper and hedwig daemons.


This addresses bug BOOKKEEPER-71.
    https://issues.apache.org/jira/browse/BOOKKEEPER-71


Diffs
-----

  hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java 14de705 
  hedwig-client/src/main/cpp/test/util.h 2d92244 
  hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java be64f93 
  hedwig-client/src/main/cpp/test/subscribetest.cpp 41da339 
  hedwig-client/src/main/cpp/test/servercontrol.cpp 49696b7 
  hedwig-client/src/main/cpp/test/servercontrol.h cac09e6 
  hedwig-client/src/main/cpp/test/pubsubtest.cpp c0feade 
  hedwig-client/src/main/cpp/test/main.cpp ef9190e 
  hedwig-client/src/main/cpp/test/publishtest.cpp 95599d7 
  hedwig-client/src/main/cpp/test/Makefile.am 84db87f 
  hedwig-client/src/main/cpp/scripts/tester.sh c288076 
  hedwig-client/src/main/cpp/scripts/network-delays.sh f566098 
  hedwig-client/src/main/cpp/scripts/server-control.sh fa7f1c1 
  hedwig-client/src/main/cpp/lib/Makefile.am 9a53138 
  hedwig-client/src/main/cpp/README PRE-CREATION 
  hedwig-client/src/main/cpp/config.h.in 19266b3 

Diff: https://reviews.apache.org/r/2446/diff


Testing
-------


Thanks,

Ivan

","26/Oct/11 07:11;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2446/#review2848
-----------------------------------------------------------


most is ok for me.

there are two suggestions:

1) separate cppunit DEPS. since only test need cppunit, library doesn't.

configure.ac

-PKG_CHECK_MODULES([DEPS], [liblog4cxx protobuf cppunit])
+PKG_CHECK_MODULES([DEPS], [liglog4cxx protobuf])
+PKG_CHECK_MODULES([TESTDEPS], [cppunit])

add TESTDEPS_LIBS only in test/Makefile.am .

2) cpp client can't build in gcc 3.4.0, since there is no tr1 library.

I suggested that change the headers which using tr1 libary as below.

+#ifdef HAVE_TR1
#include <tr1/memory>
+#else
+#include <boost/tr1/memory.hpp>
+#endif

then checking tr1 library in configure.ac

+AC_CHECK_HEADER(tr1/unordered_map, [AC_DEFINE([HAVE_TR1],[],[""Have tr1""])],[])

- Sijie


On 2011-10-19 14:44:23, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2446/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-10-19 14:44:23)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  The path to the protobuf spec is wrong in lib/Makefile.am.
bq.  
bq.  I also cleaned up the tests, and made it use the provided scripts to stop and start bookkeeper and hedwig daemons.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-71.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-71
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java 14de705 
bq.    hedwig-client/src/main/cpp/test/util.h 2d92244 
bq.    hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java be64f93 
bq.    hedwig-client/src/main/cpp/test/subscribetest.cpp 41da339 
bq.    hedwig-client/src/main/cpp/test/servercontrol.cpp 49696b7 
bq.    hedwig-client/src/main/cpp/test/servercontrol.h cac09e6 
bq.    hedwig-client/src/main/cpp/test/pubsubtest.cpp c0feade 
bq.    hedwig-client/src/main/cpp/test/main.cpp ef9190e 
bq.    hedwig-client/src/main/cpp/test/publishtest.cpp 95599d7 
bq.    hedwig-client/src/main/cpp/test/Makefile.am 84db87f 
bq.    hedwig-client/src/main/cpp/scripts/tester.sh c288076 
bq.    hedwig-client/src/main/cpp/scripts/network-delays.sh f566098 
bq.    hedwig-client/src/main/cpp/scripts/server-control.sh fa7f1c1 
bq.    hedwig-client/src/main/cpp/lib/Makefile.am 9a53138 
bq.    hedwig-client/src/main/cpp/README PRE-CREATION 
bq.    hedwig-client/src/main/cpp/config.h.in 19266b3 
bq.  
bq.  Diff: https://reviews.apache.org/r/2446/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

","26/Oct/11 08:41;jiraposter@reviews.apache.org;

bq.  On 2011-10-26 07:12:07, Sijie Guo wrote:
bq.  > most is ok for me.
bq.  > 
bq.  > there are two suggestions:
bq.  > 
bq.  > 1) separate cppunit DEPS. since only test need cppunit, library doesn't.
bq.  > 
bq.  > configure.ac
bq.  > 
bq.  > -PKG_CHECK_MODULES([DEPS], [liblog4cxx protobuf cppunit])
bq.  > +PKG_CHECK_MODULES([DEPS], [liglog4cxx protobuf])
bq.  > +PKG_CHECK_MODULES([TESTDEPS], [cppunit])
bq.  > 
bq.  > add TESTDEPS_LIBS only in test/Makefile.am .
bq.  > 
bq.  > 2) cpp client can't build in gcc 3.4.0, since there is no tr1 library.
bq.  > 
bq.  > I suggested that change the headers which using tr1 libary as below.
bq.  > 
bq.  > +#ifdef HAVE_TR1
bq.  > #include <tr1/memory>
bq.  > +#else
bq.  > +#include <boost/tr1/memory.hpp>
bq.  > +#endif
bq.  > 
bq.  > then checking tr1 library in configure.ac
bq.  > 
bq.  > +AC_CHECK_HEADER(tr1/unordered_map, [AC_DEFINE([HAVE_TR1],[],[""Have tr1""])],[])

I'll fix these and upload a new patch. Thanks for the review :)


- Ivan


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2446/#review2848
-----------------------------------------------------------


On 2011-10-19 14:44:23, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2446/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-10-19 14:44:23)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  The path to the protobuf spec is wrong in lib/Makefile.am.
bq.  
bq.  I also cleaned up the tests, and made it use the provided scripts to stop and start bookkeeper and hedwig daemons.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-71.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-71
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java 14de705 
bq.    hedwig-client/src/main/cpp/test/util.h 2d92244 
bq.    hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java be64f93 
bq.    hedwig-client/src/main/cpp/test/subscribetest.cpp 41da339 
bq.    hedwig-client/src/main/cpp/test/servercontrol.cpp 49696b7 
bq.    hedwig-client/src/main/cpp/test/servercontrol.h cac09e6 
bq.    hedwig-client/src/main/cpp/test/pubsubtest.cpp c0feade 
bq.    hedwig-client/src/main/cpp/test/main.cpp ef9190e 
bq.    hedwig-client/src/main/cpp/test/publishtest.cpp 95599d7 
bq.    hedwig-client/src/main/cpp/test/Makefile.am 84db87f 
bq.    hedwig-client/src/main/cpp/scripts/tester.sh c288076 
bq.    hedwig-client/src/main/cpp/scripts/network-delays.sh f566098 
bq.    hedwig-client/src/main/cpp/scripts/server-control.sh fa7f1c1 
bq.    hedwig-client/src/main/cpp/lib/Makefile.am 9a53138 
bq.    hedwig-client/src/main/cpp/README PRE-CREATION 
bq.    hedwig-client/src/main/cpp/config.h.in 19266b3 
bq.  
bq.  Diff: https://reviews.apache.org/r/2446/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

",26/Oct/11 16:35;ikelly;Implemented Sijies suggestions. Boost is now used if builtin tr1 headers are not found.,"26/Oct/11 16:37;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2446/
-----------------------------------------------------------

(Updated 2011-10-26 16:38:06.854585)


Review request for bookkeeper.


Changes
-------

Implemented the check for boost TR1 if builtin is not found.


Summary
-------

The path to the protobuf spec is wrong in lib/Makefile.am.

I also cleaned up the tests, and made it use the provided scripts to stop and start bookkeeper and hedwig daemons.


This addresses bug BOOKKEEPER-71.
    https://issues.apache.org/jira/browse/BOOKKEEPER-71


Diffs (updated)
-----

  hedwig-client/src/main/cpp/README PRE-CREATION 
  hedwig-client/src/main/cpp/config.h.in 19266b3 
  hedwig-client/src/main/cpp/lib/Makefile.am 9a53138 
  hedwig-client/src/main/cpp/scripts/network-delays.sh f566098 
  hedwig-client/src/main/cpp/scripts/server-control.sh fa7f1c1 
  hedwig-client/src/main/cpp/scripts/tester.sh c288076 
  hedwig-client/src/main/cpp/test/Makefile.am 84db87f 
  hedwig-client/src/main/cpp/test/main.cpp ef9190e 
  hedwig-client/src/main/cpp/test/publishtest.cpp 95599d7 
  hedwig-client/src/main/cpp/test/pubsubtest.cpp c0feade 
  hedwig-client/src/main/cpp/test/servercontrol.h cac09e6 
  hedwig-client/src/main/cpp/test/servercontrol.cpp 49696b7 
  hedwig-client/src/main/cpp/test/subscribetest.cpp 41da339 
  hedwig-client/src/main/cpp/test/util.h 2d92244 
  hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java be64f93 
  hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java 14de705 

Diff: https://reviews.apache.org/r/2446/diff


Testing
-------


Thanks,

Ivan

","28/Oct/11 10:32;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2446/
-----------------------------------------------------------

(Updated 2011-10-28 10:34:15.026986)


Review request for bookkeeper.


Summary
-------

The path to the protobuf spec is wrong in lib/Makefile.am.

I also cleaned up the tests, and made it use the provided scripts to stop and start bookkeeper and hedwig daemons.


This addresses bug BOOKKEEPER-71.
    https://issues.apache.org/jira/browse/BOOKKEEPER-71


Diffs (updated)
-----

  hedwig-client/src/main/cpp/README PRE-CREATION 
  hedwig-client/src/main/cpp/config.h.in 19266b3 
  hedwig-client/src/main/cpp/configure.ac 6903cc5 
  hedwig-client/src/main/cpp/inc/hedwig/callback.h c975e88 
  hedwig-client/src/main/cpp/inc/hedwig/client.h b540fe0 
  hedwig-client/src/main/cpp/lib/Makefile.am 9a53138 
  hedwig-client/src/main/cpp/lib/channel.h ea78054 
  hedwig-client/src/main/cpp/lib/channel.cpp 8e9397a 
  hedwig-client/src/main/cpp/lib/client.cpp 2900cff 
  hedwig-client/src/main/cpp/lib/clientimpl.h 22451b0 
  hedwig-client/src/main/cpp/lib/clientimpl.cpp 67198de 
  hedwig-client/src/main/cpp/lib/data.h 3d5fe5f 
  hedwig-client/src/main/cpp/lib/data.cpp 34a3125 
  hedwig-client/src/main/cpp/lib/eventdispatcher.cpp 47a87bd 
  hedwig-client/src/main/cpp/lib/exceptions.cpp b46178a 
  hedwig-client/src/main/cpp/lib/publisherimpl.cpp 2573664 
  hedwig-client/src/main/cpp/lib/subscriberimpl.h 1412940 
  hedwig-client/src/main/cpp/lib/subscriberimpl.cpp 2521931 
  hedwig-client/src/main/cpp/lib/util.h 79137e8 
  hedwig-client/src/main/cpp/lib/util.cpp 0ae5a3e 
  hedwig-client/src/main/cpp/scripts/network-delays.sh f566098 
  hedwig-client/src/main/cpp/scripts/server-control.sh fa7f1c1 
  hedwig-client/src/main/cpp/scripts/tester.sh c288076 
  hedwig-client/src/main/cpp/test/Makefile.am 84db87f 
  hedwig-client/src/main/cpp/test/main.cpp ef9190e 
  hedwig-client/src/main/cpp/test/publishtest.cpp 95599d7 
  hedwig-client/src/main/cpp/test/pubsubdatatest.cpp bb7484b 
  hedwig-client/src/main/cpp/test/pubsubtest.cpp c0feade 
  hedwig-client/src/main/cpp/test/servercontrol.h cac09e6 
  hedwig-client/src/main/cpp/test/servercontrol.cpp 49696b7 
  hedwig-client/src/main/cpp/test/subscribetest.cpp 41da339 
  hedwig-client/src/main/cpp/test/util.h 2d92244 
  hedwig-client/src/main/cpp/test/utiltest.cpp 99ef5f3 
  hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java be64f93 
  hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java 14de705 

Diff: https://reviews.apache.org/r/2446/diff


Testing
-------


Thanks,

Ivan

","28/Oct/11 11:06;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2446/#review2905
-----------------------------------------------------------

Ship it!


it is OK. +1. 

thanks Ivan.

- Sijie


On 2011-10-28 10:34:15, Ivan Kelly wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2446/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-10-28 10:34:15)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  The path to the protobuf spec is wrong in lib/Makefile.am.
bq.  
bq.  I also cleaned up the tests, and made it use the provided scripts to stop and start bookkeeper and hedwig daemons.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-71.
bq.      https://issues.apache.org/jira/browse/BOOKKEEPER-71
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    hedwig-client/src/main/cpp/README PRE-CREATION 
bq.    hedwig-client/src/main/cpp/config.h.in 19266b3 
bq.    hedwig-client/src/main/cpp/configure.ac 6903cc5 
bq.    hedwig-client/src/main/cpp/inc/hedwig/callback.h c975e88 
bq.    hedwig-client/src/main/cpp/inc/hedwig/client.h b540fe0 
bq.    hedwig-client/src/main/cpp/lib/Makefile.am 9a53138 
bq.    hedwig-client/src/main/cpp/lib/channel.h ea78054 
bq.    hedwig-client/src/main/cpp/lib/channel.cpp 8e9397a 
bq.    hedwig-client/src/main/cpp/lib/client.cpp 2900cff 
bq.    hedwig-client/src/main/cpp/lib/clientimpl.h 22451b0 
bq.    hedwig-client/src/main/cpp/lib/clientimpl.cpp 67198de 
bq.    hedwig-client/src/main/cpp/lib/data.h 3d5fe5f 
bq.    hedwig-client/src/main/cpp/lib/data.cpp 34a3125 
bq.    hedwig-client/src/main/cpp/lib/eventdispatcher.cpp 47a87bd 
bq.    hedwig-client/src/main/cpp/lib/exceptions.cpp b46178a 
bq.    hedwig-client/src/main/cpp/lib/publisherimpl.cpp 2573664 
bq.    hedwig-client/src/main/cpp/lib/subscriberimpl.h 1412940 
bq.    hedwig-client/src/main/cpp/lib/subscriberimpl.cpp 2521931 
bq.    hedwig-client/src/main/cpp/lib/util.h 79137e8 
bq.    hedwig-client/src/main/cpp/lib/util.cpp 0ae5a3e 
bq.    hedwig-client/src/main/cpp/scripts/network-delays.sh f566098 
bq.    hedwig-client/src/main/cpp/scripts/server-control.sh fa7f1c1 
bq.    hedwig-client/src/main/cpp/scripts/tester.sh c288076 
bq.    hedwig-client/src/main/cpp/test/Makefile.am 84db87f 
bq.    hedwig-client/src/main/cpp/test/main.cpp ef9190e 
bq.    hedwig-client/src/main/cpp/test/publishtest.cpp 95599d7 
bq.    hedwig-client/src/main/cpp/test/pubsubdatatest.cpp bb7484b 
bq.    hedwig-client/src/main/cpp/test/pubsubtest.cpp c0feade 
bq.    hedwig-client/src/main/cpp/test/servercontrol.h cac09e6 
bq.    hedwig-client/src/main/cpp/test/servercontrol.cpp 49696b7 
bq.    hedwig-client/src/main/cpp/test/subscribetest.cpp 41da339 
bq.    hedwig-client/src/main/cpp/test/util.h 2d92244 
bq.    hedwig-client/src/main/cpp/test/utiltest.cpp 99ef5f3 
bq.    hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java be64f93 
bq.    hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java 14de705 
bq.  
bq.  Diff: https://reviews.apache.org/r/2446/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Ivan
bq.  
bq.

",28/Oct/11 13:35;ikelly;Committed as r1190306. Thanks for reviewing Sijie.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ServerRedirectLoopException when a machine (hosts bookie server & hub server) reboot, which is caused by race condition of topic manager",BOOKKEEPER-69,12525013,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,ikelly,hustlmsp,hustlmsp,28/Sep/11 06:01,07/Dec/11 15:56,14/Mar/19 02:39,18/Nov/11 10:39,4.0.0,,4.0.0,,,hedwig-client,hedwig-server,,0,,"1) machine perf10 is rebooted. the bookie server & hub server are not restarted automatically after reboot.
2) client 1 & client 2 are still running. the topics owned in perf10 will be re-assigned to perf8/perf9. but they would fail because not enough bookie servers are available.
3) after 2 hours, we found that perf10 is rebooted. we restarted bookie server & hub server on perf10
4) then we got ServerRedirectLoopException in client.","3 machines (perf8, perf9, perf10), each machine hosts a bookie server & a hub server.
perf8 is used as default server for client 1. perf9 is used as default server for client 2.

bookkeeper is configured as below:
ensemble size is 3, quorum size is 2.",,,,,,,,,,,,,,,,,,09/Nov/11 15:40;ikelly;BOOKKEEPER-69.possiblefix.diff;https://issues.apache.org/jira/secure/attachment/12503094/BOOKKEEPER-69.possiblefix.diff,01/Oct/11 06:52;hustlmsp;bookkeeper-69-testcase.patch;https://issues.apache.org/jira/secure/attachment/12497270/bookkeeper-69-testcase.patch,03/Nov/11 08:40;hustlmsp;bookkeeper-69.patch;https://issues.apache.org/jira/secure/attachment/12502116/bookkeeper-69.patch,02/Oct/11 12:34;hustlmsp;bookkeeper-69.patch;https://issues.apache.org/jira/secure/attachment/12497401/bookkeeper-69.patch,17/Nov/11 10:55;hustlmsp;bookkeeper-69.patch_v2;https://issues.apache.org/jira/secure/attachment/12504052/bookkeeper-69.patch_v2,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2011-10-29 18:25:32.117,,,no_permission,,,,,,,,,,,,,34387,,,Fri Nov 18 10:57:40 UTC 2011,,,,,,0|i0u4qf:,173908,,,,,,,,"28/Sep/11 06:15;hustlmsp;h2. 0. investigation

we did some investigation on the ServerRedirectLoopException topic, said topic-0.
from zookeeper, topic-0 is owned by perf9.
we dump the hub server jvm of perf8 / perf9. we found that topic-0 is owned by both perf8 and perf9.
in perf8, topic-0 is owned in topic manger but not in persistence manager.

h2. 1. Cause 

The ServerRedirectLoopException ""Already made the request before to redirected host: "" is caused by ""topic manager own topic but persistence manager doesn't"".

if ""topic manager own topic"", a subscription request will call persistence manager to get current seq id of the topic. if the persistence manager doesn't has the topic info, persistence manager will throw a ServerNotResponsibleForTopicException with *empty redirect host*.

{code:title=BookKeeperPersistenceManager.java|borderStyle=solid}
        TopicInfo topicInfo = topicInfos.get(topic);

        if (topicInfo == null) {
            throw new PubSubException.ServerNotResponsibleForTopicException("""");
        }
{code}

hub server will send *NOT_RESPONSIBLE_FOR_TOPIC* to hedwig client.

client handles redirect request, and it found that no host to redirect. it will try default server again, but the default server has been in tried server list. 
client throws ServerRedirectLoopException.","28/Sep/11 06:24;hustlmsp;h4. why topic manager own topic but persistence manager doesn't own topic.

first, the topic acquisition flow and release topic flow when exception are stated as below:

acquireTopic:

{quote}
a) check topics list, if the topic is in topic set owned by this hub server, return itself.
b) then, read the zk server to know who is the owner of the topic (async)
    i) if the node existed and the owner is not itself, return the owner and send a redirect response to client.
    ii) if the node existed and the owner is itself, then *it consider the zk node is stale. topic manager will delete it and go to c)*
    iii) if the node is not existed go to c)
c) choose or claim a topic.
     i) if the topic manager succeed to acquire the topic, it will call listeners (persistence/subscriptions/region manager) to do their topic acquisition logic. (async)
        a) if all the listeners succeed to acquire topic, topic manager add the topic to topic set.
        b) if one of the listeners failed, topic manager starts to do 'lostTopic' logic.
{quote}        

lostTopic:

{quote}
a) first topic manager removes topic from topic set.
b) ask all the listeners (persistence/subscriptions/region manager) to do 'lostTopic' logic (just put a releaseOp in their queues).
{quote}

In our case, there are some parallel subscribe requests sent during we restart bookkeeper server.
For ease, we assume 'sub-1' and 'sub-2' subscribe 'topic-0' in default server A at the same time.

1) two topic acquire ops will be executed asynchronously.

2) sub-1 acquire op succeed to claim the hub server as the topic owner ( in c) ) (the owner zk node is created). And it call listeners (persistence/subscriptions/region manager) to do their topic acquisition logic. these manager will just put an acquire op in their queues, as below.

{quote}
> Persistence Manager <
| sub-1 acquire op |
{quote}

3) then sub-2 acquire op executed. since sub-1 doesn't callback, so the topic will not in topic set. sub-2 will got to b)-ii). sub-2 deletes the zk node created by sub-1. and sub-2 does same logic as sub-1 in 2)

{quote}
> Persistence Manager <
| sub-1 acquire op |
| sub-2 acquire op |
{quote}

4) if bookkeeper restart from failure between sub-1 acquire op execution and sub-2 acquire op execution in persistence manager. sub-1 acquire op will fail due to NotEnoughBookieException. sub-1 will enter lost topic logic. A release op will be added in persistence manager queue.

{quote}
> Persistence Manager <
| sub-2 acquire op |
| sub-1 release op |
{quote}

5) sub-2 acquire op is executed successfully, because the bookkeeper server has been restarted. the topic will be added to topic manager's topic set.

{quote}
> Persistence Manager <
| sub-1 release op |
{quote}

6) sub-1 release op is executed. it deletes the topic info in persistence manager. so we have *the topic in topic manager but not in persistence manager*, which is dangerous.

Even worse, if we have multi default servers (actually in our testing, we have!), we have other servers trying to claim the same topic. Assume sub-3 communicates with default server B to subscribe topic-0.

in 3) of the above flow, after sub-2 delete the zk node created by sub-1. sub-3 in default server B and sub-1 in default server A have same chance to acquire topic-0. If sub-3 in default server B succeed, then we in a worse status: *server A considers itself as owner since the topic is in its topic set, also the same as server B. in zookeeper the owner is server B*. (actually we indeed in this status in our testing!)","28/Sep/11 06:33;hustlmsp;A proposal to fix this issue is:

1) make sure only one acquireOp is executed when acquiring a topic in topic manager.
2) the other requests to the under-acquisition topic, will queue their callbacks.
3) when the topic acquisition is done, all the queued callbacks will be triggered according to the acquisition result. ",01/Oct/11 06:52;hustlmsp;Attach a testcase to reproduce this issue. ,"02/Oct/11 12:25;hustlmsp;A detailed proposal:


1) introduce TopicStatus to record the status change of topic during topic acquisition/releasing.
{quote}
/** Acquire Topic with shouldClaim == true **/
CLAIMING,
CLAIMING_ENQUEUE_CALLBACK,
CLAIMING_GET_ENQUEUED_CALLBACKS,

/** Acquire topic with shouldClaim == false **/
CHOOSING,
CHOOSING_ENQUEUE_CALLBACK,
CHOOSING_GET_ENQUEUED_CALLBACKS,

/** Topic is acquired **/
ACQUIRED,

/** Topic is failed during acquisition **/
ACQUIRE_FAIL_RELEASE,

/** Release Topic **/
RELEASING,
RELEASE_ENQUEUE_CALLBACK,
RELEASE_GET_ENQUEUED_CALLBACKS
{quote}

[CLAIM/CHOOSE/RELEASE]ING : the topic is under claim/choose/release status, some one got the chance to do actual work.
[CLAIM/CHOOSE/RELEASE]_ENQUEUE_CALLBACK : there is some on doing claim/choose/release works, the op tries to queue callback.
[CLAIM/CHOOSE/RELEASE]_GET_ENQUEUED_CALLBACKS : claim/choose/release works are done. try to get all the queued callbacks and trigger them.
ACQUIRED : the topic is acquired by the hub server
ACQUIRE_FAIL_RELEASE : topic acquisition is failed due to some reason (such as NotEnoughBookiesException), enter topic releasing phase

2) change topic set to a concurrent map *ConcurrentMap<ByteString, TopicStatus>* :
this map is used for tracking topic status transition to ensure only one acquisition/release for a specific topic is executed at the same time.

3) added HashMap<ByteString, List<Callback<HedwigSocketAddress>>> to queue get owner callbacks. added HashMap<ByteString, List<Callback<Void>>> to queue release op callbacks.

4) topic status transition in get owner & release op flow:
{noformat}
*             CLAMING_ENQUEUE_CALLBACK
*                  ^ |
*      enqueue     | |
*      callback    | |
*                  | >
*      claim             claim topic
* null -------> CLAMING -------------> CLAMING_GET_CALLBACKS ---------| (trigger queued callbacks)
*  ^   |                                                              |-----> ACQUIRED
*  |   -------> CHOOSING -------------> CHOOSING_GET_CALLBACKS -------|  |        |
*  |   choose      | ^   choose topic                                    |        |
*  |               | |                                                   |        |  Release
*  |               | |   enqueue callback                                |        |   topic
*  |               > |                                                   >        |
*  |          CHOOSING_ENQUEUE_CALLBACK                  ACQUIRE_FAILE_RELEASE    |
*  |                                                                     |        |
*  |                                                                     >        >
*  ---------------------------- RELEASE_GET_ENQUEUED_CALLBACKS <--------- RELEASING
*                                                                           ^ |
*                                                         enqueue callback  | |
*                                                                           | >
*                                                                RELEASE_ENQUEUE_CALLBACK
{noformat}

get owner:
# check topic status
## if topic is not existed, go to 2)
## if topic is CLAIMING/CHOOSING, go to 3)
## if topic is ACQUIRED, callback immediately
## else go to 1)
# claim/choose topic: set topic status as CLAIMING/CHOOSING
## if success, go to 4)
## if false, go to 1) to check topic status again
# enqueue callback
# do get owner
## real get owner
## if get owner succeed
### get enqueued callback list
### mark topic as ACQUIRED
### trigger all the queued callbacks
## if failed
### get enqueued callback list
### mark topic as ACQUIRE_FAIL_RELEASE
### enter releasing phase, the queued callback list will be triggered at the end of topic-releasing

release: most are same as get owner.
",02/Oct/11 12:34;hustlmsp;Attach a patch implemented the proposal. And add 3 test cases in topic manager for concurrent get owner / release operations on same topic.,"29/Oct/11 18:25;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2615/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

implement the proposal to fix race condition of topic manager


This addresses bug BOOKKEEPER-69.
    http://issues.apache.org/jira/browse/BOOKKEEPER-69


Diffs
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicStatus.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java 1194964 

Diff: https://reviews.apache.org/r/2615/diff


Testing
-------


Thanks,

Sijie

","29/Oct/11 18:25;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2615/
-----------------------------------------------------------

(Updated 2011-10-29 18:25:31.143990)


Review request for bookkeeper.


Summary (updated)
-------

implement the proposal to fix race condition of topic manager


This addresses bug BOOKKEEPER-69.
    http://issues.apache.org/jira/browse/BOOKKEEPER-69


Diffs
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicStatus.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java 1194964 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java 1194964 

Diff: https://reviews.apache.org/r/2615/diff


Testing
-------


Thanks,

Sijie

","09/Nov/11 15:39;ikelly;Im not sure the analysis of the issue here is correct. Or at least, the test attached doesn't exercise this scenario. One problem I did spot was that the topic manager was completing the operation without error sometimes even when it couldn't acquire the topic. I've attached a patch to fix this. 

There seems to be other issues with how a hub handles a bookie failure. For example, if a hub has a topic and then a bookie dies and comes back up, it can no longer publish to the topic because it doesn't clear up the ledger after the failed write.","09/Nov/11 15:56;ikelly;Actually, BOOKKEEPER-74 talks about the problem im seeing with bookie failures and publish.","10/Nov/11 08:54;hustlmsp;Ivan, thanks for your comments.

After checking the code again, I found that my analysis has some problems. The acquire/release op in TopicManager is executed one by one. 

And after reading your patch, I found that the real cause of race condition is between acquire and release. If we can follow the following patterns, we can avoid this race condition. 
1) topic is put in topic list only after persistence manager and subscription manager acquire topic successfully.
2) topic is removed from topic list only after persistence manager and subscription manager released topic.

now, 1) is guaranteed, 2) is not guaranteed (your patch makes sure callback is triggered after all managers release topic).

I will reading codes again to confirm my thoughts, and comment later.","13/Nov/11 07:12;hustlmsp;In TopicManager, acquireTopic / releaseTopic puts a TopicOp in topicOpQueue. And the TopicOps are executed one by one. So if we can guarantee that AcquireOp and ReleaseOp trigger callback only when they finished acquire/release, we can avoid race condition.

In AcquireOp:

It uses a MultiCallback to trigger original callback when its listeners (SubscritpionManager / PersistenceManager) finished acquired topic, as below:

{code:title=AbstractTopicManager.java}
    protected final synchronized void notifyListenersAndAddToOwnedTopics(final ByteString topic,
            final Callback<HedwigSocketAddress> originalCallback, final Object originalContext) {

        Callback<Void> postCb = new Callback<Void>() {

            @Override
            public void operationFinished(Object ctx, Void resultOfOperation) {
                topics.add(topic);
                if (cfg.getRetentionSecs() > 0) {
                    scheduler.schedule(new Runnable() {
                        @Override
                        public void run() {
                            // Enqueue a release operation. (Recall that release
                            // doesn't ""fail"" even if the topic is missing.)
                            releaseTopic(topic, new Callback<Void>() {

                                @Override
                                public void operationFailed(Object ctx, PubSubException exception) {
                                    logger.error(""failure that should never happen when periodically releasing topic ""
                                                 + topic, exception);
                                }

                                @Override
                                public void operationFinished(Object ctx, Void resultOfOperation) {
                                    logger.debug(""successful periodic release of topic "" + topic);
                                }

                            }, null);
                        }
                    }, cfg.getRetentionSecs(), TimeUnit.SECONDS);
                }
                originalCallback.operationFinished(originalContext, addr);
            }

            @Override
            public void operationFailed(Object ctx, PubSubException exception) {
                // TODO: optimization: we can release this as soon as we experience the first error.
                realReleaseTopic(topic, CallbackUtils.curry(originalCallback, addr), originalContext);
                originalCallback.operationFailed(ctx, exception);
            }
        };

        Callback<Void> mcb = CallbackUtils.multiCallback(listeners.size(), postCb, null);
        for (TopicOwnershipChangeListener listener : listeners) {
            listener.acquiredTopic(topic, mcb, null);
        }
    }
{code}

If topic acquisition is proceed without any error, the original callback did be triggered after all acquisition works are done in every manager.

If topic acquisition is proceed with any error, it did realReleaseTopic. since realReleaseTopic is processed in asynchronous way. so the original callback will be triggered immediately when realReleaseTopic is called. So topic manager may process acquiring/releasing a same topic in same time.

Ivan's patch fixed this issue by letting original callback is triggered after realReleaseTopic did finished actually.

{code}
--- a/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
+++ b/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
@@ -135,10 +135,19 @@ public abstract class AbstractTopicManager implements TopicManager {
             }
 
             @Override
-            public void operationFailed(Object ctx, PubSubException exception) {
+            public void operationFailed(final Object ctx, final PubSubException exception) {
                 // TODO: optimization: we can release this as soon as we experience the first error.
-                realReleaseTopic(topic, CallbackUtils.curry(originalCallback, addr), originalContext);
-                originalCallback.operationFailed(ctx, exception);
+                Callback<Void> cb = new Callback<Void>() {
+                    public void operationFinished(Object _ctx, Void _resultOfOperation) {
+                        originalCallback.operationFailed(ctx, exception);
+                    }
+                    public void operationFailed(Object _ctx, PubSubException _exception) {
+                        logger.error(""Exception releasing topic"", _exception);
+                        originalCallback.operationFailed(ctx, exception);
+                    }
+                };
+                
+                realReleaseTopic(topic, cb, originalContext);
             }
         };
{code}

Although in realReleaseTopic, its listeners (SubscriptionManager/PersistenceManager) did losing topic in asynchronous way. But it wouldn't introduce race again, since operations in SubscriptionManager/PersistenceManager still be processed in a queue one by one, which means newer acquire op will be executed until older releaseOp executed.

{code}

    // AbstractTopicManager.java

    private void realReleaseTopic(ByteString topic, Callback<Void> callback, Object ctx) {
        for (TopicOwnershipChangeListener listener : listeners)
            listener.lostTopic(topic);
        topics.remove(topic);
        postReleaseCleanup(topic, callback, ctx);
    }

{code}

So Ivan's patch did fixed this issue. It is simple and clear. Thanks, Ivan.

",17/Nov/11 10:55;hustlmsp;attach a new patch which contains Ivan's fix and test case.,"18/Nov/11 10:39;ikelly;Committed r1203576, Thanks Sijie.","18/Nov/11 10:57;hudson;Integrated in bookkeeper-trunk #228 (See [https://builds.apache.org/job/bookkeeper-trunk/228/])
    BOOKKEEPER-69: ServerRedirectLoopException when a machine (hosts bookie server & hub server) reboot, which is caused by race condition of topic manager (Sijie, ivank via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Conditional setData,BOOKKEEPER-68,12523619,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,fpj,fpj,19/Sep/11 21:07,07/Dec/11 15:56,14/Mar/19 02:39,18/Oct/11 08:43,,,4.0.0,,,,,,0,,"The write to ZooKeeper to store ledger metadata when closing a ledger must be conditional, otherwise concurrent clients might end up writing in a way that the update of a client overwrites the update of the other. ",,,,,,,,,,,,,,,,,,,17/Oct/11 22:22;fpj;BOOKKEEPER-68.patch;https://issues.apache.org/jira/secure/attachment/12499459/BOOKKEEPER-68.patch,13/Oct/11 15:31;fpj;BOOKKEEPER-68.patch;https://issues.apache.org/jira/secure/attachment/12498889/BOOKKEEPER-68.patch,10/Oct/11 22:20;fpj;BOOKKEEPER-68.patch;https://issues.apache.org/jira/secure/attachment/12498478/BOOKKEEPER-68.patch,08/Oct/11 12:53;fpj;BOOKKEEPER-68.patch;https://issues.apache.org/jira/secure/attachment/12498310/BOOKKEEPER-68.patch,19/Sep/11 23:08;fpj;BOOKKEEPER-68.patch;https://issues.apache.org/jira/secure/attachment/12495160/BOOKKEEPER-68.patch,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2011-09-20 12:05:20.052,,,no_permission,,,,,,,,,,,,,50588,,,Tue Oct 18 08:43:18 UTC 2011,,,,,,0|i0u4w7:,173934,,,,,,,,"19/Sep/11 23:08;fpj;Preliminary patch (no new test, but current tests pass).","20/Sep/11 12:05;ikelly;This patch seems to just cause the open ledger to fail. Shouldn't the failing one just retry to read the metadata?
","20/Sep/11 12:25;fpj;I'd rather leave to the application to decide because of the following argument. Suppose that two clients try to recover the ledger because are on the way of taking over the role of primary. The fact that one attempt to open the ledger and recover fails indicates that there has a been a concurrent attempt, and in this case I would say that the client that gets a failed request should actually back off. 

Does it make sense to you, Ivan?","20/Sep/11 14:38;ikelly;Im not sure. I think that situations like this should have an external mechanism. I've actually implemented a bit of the handling for BadVersion. It'll need a lot of testing though.

https://github.com/ivankelly/bookkeeper/commit/7b2d2f9163afb735e73e3e285f2d358bb4b71fda","20/Sep/11 14:58;fpj;I think you're right in that we would need such an external mechanism anyway because the absence of a failure does not imply that it is ok to take over in my example. Consequently, retrying does not make it more difficult for the application. 

I still feel that the code is simpler without retrying, though, and it doesn't sound like a big deal for the application to retry if it needs to. At the same time, I'm possibly not the best person to ask about APIs, so I'm willing to change my mind here if there is a good reason for doing it.","21/Sep/11 20:01;fpj;I was also thinking that leaving to the application gives the opportunity to the client to give up. One case I can think of in which not retrying might be better is this. We have two cold backup servers, and both try to become the primary. They concurrently start to read from bookkeeper and, in the process, they try to recover the ledger. If one fails to recover because of the concurrent write of the ledger metadata, then it is better to have one replica giving up, since it will leave more read bandwidth free to the other backup server. 

I need to point out that I think both approaches are correct, and the argument I'm making is based on performance. My conclusion is that I don't feel strongly about having one way or the other, but I'm slightly inclined to leaving it to the application. ","21/Sep/11 23:15;dhruba;I am more inclined to say that for the use case of NN using BK, it makes sense to make one of the standby namenodes  to fail the recover-ledger api call (rather than retrying inside the BK client). The standby namenode will go back to ZK to see if a new namenode master has been selected, if not then the standby namenode can retry.

Ivan: is there some other approach that you have in mind?","22/Sep/11 08:36;ikelly;The approach I had is at:
https://github.com/ivankelly/bookkeeper/tree/Fencing

Basically, if you fail to update, you jump back to the very start of recovery. The recovery operation is idempotent in this case, so it will succeed in opening for reading. For NN, there would be another mechanism to ensure that only one ledger is open for writing at a time, as really that's where we want collisions to happen if they do happen. 

Flavio made a good point yesterday that multiple concurrent recoveries will steal bandwidth from each other though, which I think is the best argument for erroring one of them out.

Actually, the BKJournal for NN is available at:
https://github.com/ivankelly/hadoop-common/tree/BKJournal
if you want to take a look. ","08/Oct/11 12:53;fpj;Patch with test. In the end, the test was way easier to write than I expected. I simply create a reader before the writer closes the ledger, and I check that the writer call to close the ledger fails. 

To be able to verify that the call to close has failed, I needed to change the signature of the close call, which was returning void. Hope no one finds it to be a big deal.","10/Oct/11 22:20;fpj;After making the modifications that Ivan suggested, I noticed while running the tests that BookieRecoveryTest was failing intermittently, so I investigated it a bit and found the following. 

Currently when we recover a ledger, we acknowledge the open before waiting for the ledger to close. Not waiting was causing a race while recovering bookies. I have fixed the problem in the patch I'm attaching.

There is one tiny thing that is bugging me in this patch and I need to fix. I need to access the znodeVersion variable from BookKeeperTools, and to do it I made the variable public just to test. I need to find a better way of accessing the znode version variable in LedgerMetadata, though.",13/Oct/11 15:31;fpj;Posted the diff on the review board.,17/Oct/11 22:22;fpj;Fixed the last point on the return code that Ivan raised on the review board. -F,"18/Oct/11 08:43;ikelly;Committed r1185532, thanks Flavio.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
use IPv4 for builds,BOOKKEEPER-66,12522899,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,mmorel,mmorel,13/Sep/11 14:10,07/Dec/11 15:56,14/Mar/19 02:39,30/Nov/11 15:42,,,4.0.0,,,,,,0,,"On some linux boxes that run a dual IPv6-IPv4 network stack, with IPv6 enabled (e.g. debian-based), there is an issue with some java programs, preventing network connections.

This results in ""org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /ledgers"" in BookieZKExpireTest test (for instance) but is actually due to a previous ""java.net.NoRouteToHostException: Network is
unreachable"" issue.

I could reproduce this on a debian 6 for instance, and the issue is similar another one detailed in a Hadoop ticket: https://issues.apache.org/jira/browse/HADOOP-6056

We should make sure IPv4 is used for builds so that one can build bookkeeper out of the box, without configuration changes to the OS.",,,,,,,,,,,,,,,,,,,30/Nov/11 15:20;mmorel;BOOKKEEPER-66.patch;https://issues.apache.org/jira/secure/attachment/12505626/BOOKKEEPER-66.patch,03/Oct/11 15:06;mmorel;BOOKKEEPER-66.patch;https://issues.apache.org/jira/secure/attachment/12497473/BOOKKEEPER-66.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-10-17 18:42:29.105,,,no_permission,,,,,,,,,,,,,43810,,,Wed Nov 30 15:51:59 UTC 2011,,,,,,0|i0u4rj:,173913,,,,,,,,03/Oct/11 15:06;mmorel;patch that forces maven to use IPv4 in tests,"17/Oct/11 18:42;ikelly;The check should exist in bookkeeper-server/bin/bookkeeper & hedwig-server/bin/hedwig also as in the hadoop solution. Otherwise the user would see that tests are all passing, but for some reason, the actual system would not work.","25/Nov/11 16:36;mmorel;new patch that also forces IPv4 in shell start scripts, and forces exit if only IPv6 is enabled (as in hadoop-config.sh)","30/Nov/11 15:20;mmorel;patch that also forces IPv4 in shell start scripts, and forces exit if only IPv6 is enabled (previous file was not the correct one!)",30/Nov/11 15:32;ikelly;Looks good to me +1. Committing,"30/Nov/11 15:42;ikelly;Committed revision 1208470 (branch-4.0)
Committed revision 1208472 (trunk)

Thanks Matthieu","30/Nov/11 15:51;hudson;Integrated in bookkeeper-trunk #259 (See [https://builds.apache.org/job/bookkeeper-trunk/259/])
    BOOKKEEPER-66: use IPv4 for builds (mmorel via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix dependencies on incompatible versions of netty,BOOKKEEPER-65,12521569,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,mmorel,mmorel,07/Sep/11 10:29,07/Dec/11 15:56,14/Mar/19 02:39,17/Oct/11 21:40,,,4.0.0,,,,,,0,,"bookkeeper-benchmark and hedwig-client depend on netty 3.1.2.GA
bookkeeper-server depends on netty 3.2.4.Final

These versions are actually incompatible, due to a change to ProtobufDecoder constructor's signature",,,,,,,,,,,,,,,,,,,07/Sep/11 10:32;mmorel;BOOKKEEPER-65.patch;https://issues.apache.org/jira/secure/attachment/12493294/BOOKKEEPER-65.patch,13/Sep/11 09:11;ikelly;org.apache.hedwig.server.integration.TestHedwigHub.txt;https://issues.apache.org/jira/secure/attachment/12494200/org.apache.hedwig.server.integration.TestHedwigHub.txt,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-09-13 09:10:34.31,,,no_permission,,,,,,,,,,,,,60479,,,Mon Oct 17 21:40:13 UTC 2011,,,,,,0|i0u5j3:,174037,,,,,,,,07/Sep/11 10:32;mmorel;patch that homogeneizes dependencies of netty to 3.2.4.Final,13/Sep/11 09:10;ikelly;running mvn clean test with this patch applied causes failures in tests for me. Failures attached.,"15/Sep/11 10:49;mmorel;I can't reproduce what you see. Tests pass fine when I apply the patch. Probably one of us has something special on the test machine.

We really need a continuous integration environment!","15/Sep/11 11:24;ikelly;From what I hear, the ZK 3.4 branch has been cut, and they've only 4 blockers left, so it should be out pretty soon. Then we will have it. I'll have another look at this later today.",17/Oct/11 21:40;ikelly;committed in r1185388 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hedwig PubSubServer must wait for its Zookeeper client to be connected upon startup,BOOKKEEPER-63,12520909,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,mmorel,mmorel,31/Aug/11 11:29,07/Dec/11 15:56,14/Mar/19 02:39,05/Sep/11 10:33,,,4.0.0,,,hedwig-server,,,0,,"When a PubSubServer is instantiated in *non-standalone* mode, it creates a ZkTopicManager which takes a Zookeeper client as an argument.
Unfortunately, this Zookeeper client may not be connected yet (not in CONNECTED state yet), and when this is the case, creation of ZkTopicManager fails, leading to failure of the PubSubServer startup.

Typical error (adapted, line numbers take into account commented patching code):
jjava.io.IOException: org.apache.hedwig.exceptions.PubSubException$ServiceDownException: org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hedwig/standalone/hosts/x.x.x.x:4080:9876
	at org.apache.hedwig.server.netty.PubSubServer.instantiateTopicManager(PubSubServer.java:170)
	at org.apache.hedwig.server.netty.PubSubServer$3.run(PubSubServer.java:294)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.hedwig.exceptions.PubSubException$ServiceDownException: org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hedwig/standalone/hosts/x.x.x.x:4080:9876
	at org.apache.hedwig.server.topics.ZkTopicManager$4.safeProcessResult(ZkTopicManager.java:146)
etc...

This is particularly problematic for running tests that require to pass a config to the PubSubServer.",,,,,,,,,,,,,,,,,,,05/Sep/11 10:23;mmorel;BOOKKEEPER-63.patch;https://issues.apache.org/jira/secure/attachment/12493017/BOOKKEEPER-63.patch,05/Sep/11 08:43;mmorel;BOOKKEEPER-63.patch;https://issues.apache.org/jira/secure/attachment/12493009/BOOKKEEPER-63.patch,02/Sep/11 13:12;mmorel;BOOKKEEPER-63.patch;https://issues.apache.org/jira/secure/attachment/12492738/BOOKKEEPER-63.patch,31/Aug/11 11:31;mmorel;patch-testcase.txt;https://issues.apache.org/jira/secure/attachment/12492444/patch-testcase.txt,01/Sep/11 09:43;mmorel;patch-v2.txt;https://issues.apache.org/jira/secure/attachment/12492587/patch-v2.txt,31/Aug/11 11:44;mmorel;patch.txt;https://issues.apache.org/jira/secure/attachment/12492445/patch.txt,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2011-09-01 16:15:33.485,,,no_permission,,,,,,,,,,,,,62689,,,Mon Sep 05 10:33:43 UTC 2011,,,,,,0|i0u62v:,174126,,,,,,,,31/Aug/11 11:31;mmorel;here is a test case that reproduces the issue,"31/Aug/11 11:44;mmorel;solves the issue by waiting for the connected event callback, with a timeout of conf.getZkTimeout()*2",01/Sep/11 09:43;mmorel;fixed watcher event evaluation in previous patch,"01/Sep/11 16:15;ikelly;Looks good, but you should also check the return value of CountdownLatch.await. If a timeout has occurred the code should LOG.fatal and throw an exception. Also, could you name the patch BOOKKEEPER-63.diff or .patch etc. The extension doesn't matter, but having them named makes it easier to see what I'm working with in my source tree.","01/Sep/11 16:15;ikelly;Looks good, but you should also check the return value of CountdownLatch.await. If a timeout has occurred the code should LOG.fatal and throw an exception. Also, could you name the patch BOOKKEEPER-63.diff or .patch etc. The extension doesn't matter, but having them named makes it easier to see what I'm working with in my source tree.",02/Sep/11 13:12;mmorel;patch with regression test,"02/Sep/11 13:40;ikelly;This patch fails:

Tests in error: 
  testSyncPublish(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testAsyncPublish(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testMultipleAsyncPublish(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testSyncSubscribe(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testAsyncSubscribe(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testSubscribeAndConsume(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testAsyncSubscribeAndUnsubscribe(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testSyncUnsubscribeWithoutSubscription(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testAsyncSubscribeAndCloseSubscription(org.apache.hedwig.client.TestPubSubClient): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testSecondServer(org.apache.hedwig.server.netty.TestPubSubServer): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testUncaughtExceptionInNettyThread(org.apache.hedwig.server.netty.TestPubSubServer): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testUncaughtExceptionInZKThread(org.apache.hedwig.server.netty.TestPubSubServer): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testInvalidServerConfiguration(org.apache.hedwig.server.netty.TestPubSubServer): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testValidServerConfiguration(org.apache.hedwig.server.netty.TestPubSubServer): Could not establish connection with ZooKeeper after zk_timeout*2 = 4000 ms. (Default value for zk_timeout is 2000).
  testNonEmptyDirtyLedger(org.apache.hedwig.server.persistence.TestBookkeeperPersistenceManagerWhiteBox)

",05/Sep/11 08:43;mmorel;new patch taking into account tests with standalone server,05/Sep/11 10:23;mmorel;new patch with wait code moved to instantiateZookeeperClient method,05/Sep/11 10:33;ikelly;Committed in r1165231. Thanks Matthieu.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie can not start when encountering corrupted records,BOOKKEEPER-62,12520716,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,hustlmsp,hustlmsp,30/Aug/11 10:36,18/Dec/14 06:17,14/Mar/19 02:39,30/Nov/11 10:14,,,4.0.0,,,,,,0,,"bookie tries to extract ledger ids from entry loggers during starting up. if some records corrupted, an IOException is thrown out.

in extractLedgersFromEntryLogs function:

line 459:
                int rc = bc.read(buff, pos);
                if (rc != data.length) {
                    throw new IOException(""Short read for entryLog "" + entryLogId + ""@"" + pos + ""("" + rc + ""!=""
                            + data.length + "")"");
                }",,,,,,,,,,,,,,,,,,BOOKKEEPER-61,29/Nov/11 12:01;ikelly;BOOKKEEPER-62.diff;https://issues.apache.org/jira/secure/attachment/12505474/BOOKKEEPER-62.diff,29/Nov/11 08:56;ikelly;BOOKKEEPER-62.diff;https://issues.apache.org/jira/secure/attachment/12505465/BOOKKEEPER-62.diff,30/Nov/11 02:39;hustlmsp;BOOKKEEPER-62.patch;https://issues.apache.org/jira/secure/attachment/12505569/BOOKKEEPER-62.patch,29/Nov/11 03:53;breed;BOOKKEEPER-62.patch;https://issues.apache.org/jira/secure/attachment/12505442/BOOKKEEPER-62.patch,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2011-11-18 18:04:01.836,,,no_permission,,,,,,,,,,,,,63154,,,Wed Nov 30 10:14:17 UTC 2011,,,,,,0|i0u4nj:,173895,,,,,,,,"30/Aug/11 10:44;hustlmsp;It seems that it is better to skip the corrupted records.

(1) if the corrupted record is added after last marked journal. we still have chance to recover it from journal.
(2) if the corrupted record is added before last marked journal, it seems that we have no chance to recover it from journal. But we have replicas for this record, bookkeeper client can retry to read other replicas when found the record is missing or data corrupted.

","18/Nov/11 18:04;ikelly;I've marked this as a blocker and moved to 4.0.0. We only need to deal with (1), as (2) indicates a disk failure, and there's nothing we can do. The bookie should be scrapped and a new bookie should replace it and recovery should be run for the lost bookie.

I think solving this could be quite simple. If we create the entrylogger file with a different name, such as <logid>.log-inprogress, and then rename it to <logid>.log when we're done, the journal would then be able to complete the recovery. EntryLogger.createLogId is what we'd need to change. We'd only need to add 2-3 lines of code. Testing could just be a matter of manually corrupting a log file and trying to start.",29/Nov/11 03:53;breed;this patch has a test that uses a truncated file to reproduce the problem. it has fixes the issue by effectively ignoring the exception and logging it at the debug level.,"29/Nov/11 08:56;ikelly;Patch is good. I've made a few small mods. 
1. Test is now in bookie package, so EntryLogger methods do not need to be public.
2. Added logger to test, removed call to System.out.println
3. Changed log message on bad entry to a warn. ","29/Nov/11 09:08;breed;good changes. thanx!
2) actually, i think that println should have been removed altogether. that was an oversight. i think we should remove the logging to avoid polluting the output.
3) i think the message should be debug since it really doesn't indicate any problem at all. a warn level indicates something bad might happen in the future, but this situation happens when a bookie crashes and successfully recovers.
","29/Nov/11 12:01;ikelly;Added marking for entrylogger, without this it possible that the bookie will start without loading all entries.","29/Nov/11 15:50;hustlmsp;most is good for me.

But seems that the patch changes the format of lastId.
if the code is running on old lastId files, it would failed due to IOException because the *position* field is missing. Shall we set *position* to 0 if missing *position* field in lastId files?

BTW, the patch includes other changes. could you check it again?","29/Nov/11 17:35;ikelly;I spoke to Ben about this just now. The problem of short reads possibly occurring due to corruption is another problem, which will need to be dealt with in another way. We threw around a few ideas, like putting a bookie internal txn id on each update each, which would allow us to detail gaps etc, but nothing concrete. It is something we should fix for 4.1. For the moment, the bookie system as a whole should detect if a bookie is missing entries and read from another replica. 

+1 for this patch for now. Opening another jira for the other issue.

",29/Nov/11 17:38;ikelly;new JIRA is BOOKKEEPER-126,29/Nov/11 17:47;ikelly;Committed as r1207997,"29/Nov/11 18:07;hudson;Integrated in bookkeeper-trunk #248 (See [https://builds.apache.org/job/bookkeeper-trunk/248/])
    BOOKKEEPER-62: Bookie can not start when encountering corrupted records (breed via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
","30/Nov/11 02:36;hustlmsp;the committed patch doesn't fix short reads correctly.
If short read occurs on first log, the IOException is caught without clearing *sizeBuffer*. so reads on following entry logs will failed even these logs are correct log files.
","30/Nov/11 02:39;hustlmsp;Attach a patch including a test case reproduced the issue as previous comment, and the code to fix it.","30/Nov/11 03:59;breed;i don't think we want this. if there is an error with an entry, all subsequent entries should be considered erroneous. the journal will be used to recover the erroneous entry all all subsequent entries.","30/Nov/11 05:55;hustlmsp;
suppose bookie servers run in following case:

1. bookie server running, writing 3 entries to 1.log.
2. bookie server crashed. 1.log was corrupted, entry 3 is partial. we still has 3 entries in journal file.
3. bookie server restarted, replay these 3 entries from journal file, writing to 2.log again. SyncThread did flush. 2.log be flushed, became a completed log file.
4. bookie server shuts down.
5. bookie server restarts. it tried to extract ledger id from entry logs. it failed on 1.log (would skip the partial entry), then 2.log will not be processed (we just have first 2 entries). Also, SyncThread did flush in step3, no journal replay took placed. Then we lose entry 3 (although we have it in 2.log).

","30/Nov/11 09:16;ikelly;Losing entries like this is ok, because all entries are replicated _quorum_ times across the system. What is bad here, is that we don't detect that the entry is missing until we read it, so it's underreplicated. ",30/Nov/11 10:14;hustlmsp;entryLogs2LedgersMap is only used on GC. so I agreed on Ben and Ivan's comments.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BufferedChannel read endless when the remaining bytes of file is less than the capacity of read buffer,BOOKKEEPER-61,12520715,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,30/Aug/11 10:28,02/May/13 02:29,14/Mar/19 02:39,07/Oct/11 22:24,4.0.0,,4.0.0,,,bookkeeper-server,,,0,,"If last record in entry log file is truncated (length of data is short than expected length), bookie went into infinite loop on reading this record.

A truncated record can be caused in following cases:
1) bookie server is killed during bookie restart to relay logs.
2) bookie server is killed when bookie does adding entry operation.",,,,,,,,,,,,,,,,,,,30/Aug/11 10:30;hustlmsp;bookkeeper-61.patch;https://issues.apache.org/jira/secure/attachment/12492223/bookkeeper-61.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-07 21:41:48.575,,,no_permission,,,,,,,,,,,,,50535,,,Fri Oct 07 22:24:49 UTC 2011,,,,,,0|i0u4sf:,173917,,,,,,,,30/Aug/11 10:30;hustlmsp;return number of bytes been read when reach the end of file,07/Oct/11 21:41;breed;+1 great fix and test!,"07/Oct/11 22:24;breed;Committed revision 1180266.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in netty code allocates and orphans resources (BK-5 revisited),BOOKKEEPER-59,12520701,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,30/Aug/11 07:46,07/Dec/11 15:56,14/Mar/19 02:39,16/Sep/11 14:56,,,4.0.0,,,,,,0,,"We thought BK-5 fixed this, but it still hits if you run for long enough.

To repro,

true; while [ $? = 0 ]; do mvn test -Dtest=BookieReadWriteTest; done

Leave this running for 5-6 hours, and the bug should hit. From looking at the code it could be that connect is unsynchronized, so resources could be allocated and lost by concurrent executions of connect(). ",,,,,,,,,,,,,,,,,,,06/Sep/11 14:31;ikelly;BOOKKEEPER-59.diff;https://issues.apache.org/jira/secure/attachment/12493154/BOOKKEEPER-59.diff,06/Sep/11 13:42;ikelly;BOOKKEEPER-59.diff;https://issues.apache.org/jira/secure/attachment/12493149/BOOKKEEPER-59.diff,30/Aug/11 07:49;ikelly;BOOKKEEPER-59.diff;https://issues.apache.org/jira/secure/attachment/12492211/BOOKKEEPER-59.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2011-09-06 12:14:45.629,,,no_permission,,,,,,,,,,,,,60395,,,Fri Sep 16 14:56:48 UTC 2011,,,,,,0|i0u5ov:,174063,,,,,,,,"06/Sep/11 12:14;fpj;One question: why can't we simply remove the else block in BookieClient.lookup()? If we do it, then we should have PerChannelBookieClient.connect() always called under a lock, through PerChannelBookieClient.connectIfNeededAndDoOp(), which is invoked by addEntry() and readEntry().","06/Sep/11 13:20;ikelly;I looked at removing that call to connect in BOOKKEEPER-5 but didn't in the end because I concluded it was no harm i think. In any case, the synchronization in #connectIfNeededAndDoOp isn't enough, because the connect is asynchronous. Its the callback that sets the connected flag. So multiple threads can still end up kicking off #connect() before one succeeds and sets connected to true. 

Actually, we should roll connected and connectionAttemptInProgress into one flag really. I'll do that now and upload a new patch.",06/Sep/11 13:42;ikelly;Rolled boolean flags into an enum.,"06/Sep/11 14:09;fpj;Suppose we remove the else block as I suggested. In this case, #connect is only called through #connectIfNeededAndDoOp. In #connectIfNeededAndDoOp, only one thread can call #connect at a time because of the synchronized block. If a thread ends up executing #connectIfNeededAndDoOp concurrently with another thread (connect hasn't completed for the latter thread), then #connect won't be called because connectionAttemptInProgress == true. 

Note that connectionAttemptInProgress is also set inside a synchronized block in the callback of connect, so it doesn't sound like the race you're saying can occur under the assumptions I stated.

What do you think? Am I missing anything?","06/Sep/11 14:30;ikelly;Hmmm, this is correct, so it should be safe to just remove the call to connect. I'll upload a new patch which makes it more explicit though.

PerChannelBookieClient#connect is now private and synchronized. The synchronization won't hit performance because the only call to #connect is already in a synchronized block. However if someone makes the call from somewhere else in the future, it'll still be safe.

PerChannelBookieClient#connected and PerChannelBookieClient#connectionAttemptInProgress have been rolled into one enum, as these are mutually exclusive states. 

I've moved the check of PerChannelBookieClient#connectionAttempt into #connect() as this seems like a better place for it.","16/Sep/11 14:56;fpj;+1, thanks, Ivan. Committed revision 1171607.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Changes introduced in BK-38 cause BookieClientTest to hang indefinitely.,BOOKKEEPER-58,12520566,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Aug/11 13:25,07/Dec/11 15:56,14/Mar/19 02:39,29/Aug/11 17:33,,,4.0.0,,,,,,0,,"As subject says, BK-38 introduces a bug that stops BookieClientTest from running. To run: mvn test -Dtest=BookieClientTest",,,,,,,,,,,,,,,,,,,29/Aug/11 15:51;ikelly;BK-58.diff;https://issues.apache.org/jira/secure/attachment/12492091/BK-58.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-29 16:33:08.478,,,no_permission,,,,,,,,,,,,,63355,,,Mon Aug 29 17:33:18 UTC 2011,,,,,,0|i0u5of:,174061,,,,,,,,"29/Aug/11 15:51;ikelly;The problem is that BK-38 introduces an isZkExpired flag. If this is true the bookie exits. In the case of BookieClientTest, the Bookie is created without Zookeeper, so this isZkExpired is never set to false. ",29/Aug/11 16:33;breed;+1 looks good,29/Aug/11 17:33;ikelly;Committed as r1162912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointException at bookie.zk@EntryLogger,BOOKKEEPER-57,12520538,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,leixu,leixu,29/Aug/11 08:37,07/Dec/11 15:56,14/Mar/19 02:39,31/Aug/11 10:18,4.0.0,,4.0.0,,,bookkeeper-server,,,0,,"In Bookie.java, if the recovery time is longer than gcWaitTime, bookie.zk is null and gc thread will exit",,,,,,,,,,,,,,,,,,,31/Aug/11 10:18;leixu;bookkeeper-57.patch;https://issues.apache.org/jira/secure/attachment/12492439/bookkeeper-57.patch,29/Aug/11 08:48;leixu;bookkeeper-57.patch;https://issues.apache.org/jira/secure/attachment/12492045/bookkeeper-57.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-08-30 10:26:44.606,,,no_permission,,,,,,,,,,,,,63030,,,Wed Aug 31 15:00:05 UTC 2011,,,,,,0|i0u5nz:,174059,,,,,,,,"30/Aug/11 10:26;ikelly;Why not just check if the bookie.zk is null rather than adding another boolean flag? 

This would be better as there are cases where zk is never changed from null (testing cases, where zk isn't used and we communicate directly with the bookie). 

Also, Im not sure what you mean by recovery in this context. This is startup code. ","31/Aug/11 10:12;leixu;Ivan, you are right, it is startup code, not recovery, my mistake.",31/Aug/11 10:18;leixu;new patch. check bookie.zk instead,"31/Aug/11 15:00;ikelly;+1.
committed as r1163655",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition of message handler in connection recovery in Hedwig client,BOOKKEEPER-56,12520225,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,gavin_li,gavin_li,26/Aug/11 08:09,22/Oct/12 14:50,14/Mar/19 02:39,28/Apr/12 08:12,4.0.0,,4.1.0,,,hedwig-client,,,0,,"There's a race condition in the connection recovery logic in Hedwig client. The message handler user set might be overwritten incorrectly. 

When handling channelDisconnected event, we try to reconnect to Hedwig server. After the connection is created and subscribed, we'll call StartDelivery() to recover the message handler to the original one of the disconnected connection. But if during this process, user calls StartDelivery() to set a new message handler, it will get overwritten to the original one.

The process can be demonstrated as below:

|| main thread || netty worker thread ||
| StartDelivery(messageHandlerA) | |
| (connection Broken here, and recovered later...) |
|                                             | ResponseHandler::channelDisconnected()   (connection disconnected event received) |
|                                             | new SubscribeReconnectCallback(subHandler.getMessageHandler()) (store messageHandlerA in SubscribeReconnectCallback to recover later) |
|                                             | client.doConnect() (try reconnect)  |
|                                             | doSubUnsub() (resubscribe) |
|                                             | SubscriberResponseHandler::handleSubscribeResponse()  (subscription succeeds) |
| StartDelivery(messageHandlderB)             |                                                                               |
|                                             | SubscribeReconnectCallback::operationFinished()                               |
|                                             | StartDelvery(messageHandlerA)   (messageHandler get overwritten)              |   

I can stably reproduce this by simulating this race condition by put some sleep in ResponseHandler.

I think essentially speaking we should not store messageHandler in ResponseHandler, since the message handler is supposed to be bound to connection. Instead, no matter which connection is in use, we should use the same messageHandler, the one user set last time. So I think we should change to store messageHandler in the HedwigSubscriber, in this way we don't need to recover the handler in connection recovery and thus won't face this race condition.

",,,,,,,,,,,,,,,,,,,18/Apr/12 05:20;hustlmsp;BK-56.patch;https://issues.apache.org/jira/secure/attachment/12523076/BK-56.patch,26/Aug/11 09:16;gavin_li;patch_56;https://issues.apache.org/jira/secure/attachment/12491760/patch_56,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-08-30 11:23:44.626,,,no_permission,,,,,,,,,,,,,62685,,,Sat Apr 28 08:27:12 UTC 2012,,,,,,0|i0ax87:,61656,,,,,,,,26/Aug/11 09:16;gavin_li;patch,26/Aug/11 09:17;gavin_li;change to store handler in HedwigSubscriber instead of ResponseHandler,"30/Aug/11 11:23;ikelly;It seems inelegant to have to look up the delivery handler every time, when the message has already arrived in an object which can know how to deliver it. Perhaps we could add a package private method on HedwigSubscriber, called restartDelivery, which gets the handler from the hashmap and sets it in the response handler. In this case, the patch wouldn't modify the response handler at all, just how the reconnect callback sets it.

The correct behaviour in this case is that the reconnect callback should not be able to overwrite the message handler. I think it is also valid to broaden this to say that noone should ever be able to overwrite the message handler, as this would indicate that startDelivery had been called twice without stopDelivery being called in between, which would indicate a programming error on the part of the client. 

There are tabs in the patch. For BK/HW the standard is 4 space indentation.","25/Nov/11 14:16;ikelly;I don't consider this a blocker. The fix should be fairly simple, but we need a test case, which don't currently have. 
Moving to 4.1.0.",13/Mar/12 11:01;fpj;Should we move this one to 4.2.0?,"12/Apr/12 07:33;hustlmsp;take a look at this issue, I found that it is difficult to add a test case over it. since startDeliver could be executed only when a subscription channel is connected, it is hard to trigger #startDelivery in test thread after reconnecting succeed and before reconnect task call #startDelivery.

Any suggestion on how to add the test case?",18/Apr/12 05:20;hustlmsp;attach a patch which re-factor the existing patch addressing Ivan's comment.,24/Apr/12 17:38;ikelly;Committed as r1329883. Thanks Sijie and Gavin.,"24/Apr/12 17:55;hudson;Integrated in bookkeeper-trunk #475 (See [https://builds.apache.org/job/bookkeeper-trunk/475/])
    BOOKKEEPER-56: Race condition of message handler in connection recovery in Hedwig client (sijie & Gavin Li via ivank) (Revision 1329883)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
","28/Apr/12 07:48;hustlmsp;yeah, seems that hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/AlreadyStartDeliveryException.java is not committed. so the hubson job is failed with compilation failure.",28/Apr/12 07:50;hustlmsp;reopen the jira to commit the missed file.,28/Apr/12 08:12;hustlmsp;committed the missed file in r1331704.,"28/Apr/12 08:27;hudson;Integrated in bookkeeper-trunk #479 (See [https://builds.apache.org/job/bookkeeper-trunk/479/])
    BOOKKEEPER-56: Race condition of message handler in connection recovery in Hedwig client (added AlreadyStartDeliveryException file missed in r1329883) (sijie & Gavin Li via ivank) (Revision 1331704)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/AlreadyStartDeliveryException.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SubscribeReconnectRetryTask might retry subscription endlessly when another subscription is already successfully created previously,BOOKKEEPER-55,12520092,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,gavin_li,gavin_li,25/Aug/11 10:52,13/Feb/13 15:46,14/Mar/19 02:39,02/Jan/13 21:24,4.0.0,,4.2.0,,,hedwig-client,,,0,,"For channelDisconnected envent, we try to automatically recover the connection and subscription. But when users call HedwigSubscriber.subscribe() at the same time, it might succeed before the auto recovery. Then the auto recovery can never succeed as the server will report topic busy failure. Then the SubscribeReconnectRetryTask will retry again and again endlessly. We found this in our auto test.

Fix is easy, we just need to firstly check if the channel for this topic and subscribe id is null, if not it means some subscription is already created before, we don't need to bother recover.",,,,,,,,,,,,,,,,,,,20/Dec/12 05:23;hustlmsp;BOOKKEEPER-55.patch;https://issues.apache.org/jira/secure/attachment/12561843/BOOKKEEPER-55.patch,19/Dec/12 05:24;hustlmsp;BOOKKEEPER-55.patch;https://issues.apache.org/jira/secure/attachment/12561643/BOOKKEEPER-55.patch,25/Aug/11 11:07;gavin_li;patch;https://issues.apache.org/jira/secure/attachment/12491618/patch,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2011-08-30 09:25:04.267,,,no_permission,,,,,,,,,,,,,60770,,,Wed Jan 02 21:56:04 UTC 2013,,,,,,0|i1438f:,231986,,,,,,,,25/Aug/11 11:05;gavin_li;check if channel already exists before retry,"30/Aug/11 09:25;ikelly;This still isn't quite safe. What happens if after the check for the channel's existence, a subscribe succeeds and sets the the channel for the topic? You'll be put in the same situation again. And this time it will hit much less frequently as the time window is smaller, making this a really painful race condition to track down. 

I think we need some sort of atomic check and set for the topic -> channel map. This might require a bit of rearchitecting on the client though :/.

Also, a test for this would be nice.","30/Aug/11 09:25;ikelly;One last thing, when you generate patches, generate them from the top level directory of the bookkeeper trunk repo. It makes it easier to apply the patch.",25/Nov/11 11:47;ikelly;Moving to 4.1.0.,13/Mar/12 11:56;fpj;Moving it to 4.2.0.,"05/Dec/12 05:22;hustlmsp;another case: if client closesub during reconnecting, after reconnected subscription channel needs to disconnected after succeed. otherwise, from the client side, it knew that it already closed subscription channel but actual the subscription channel is still established due to resubscribe. I think this problem already fixed in cpp client. I will try to apply same solution for java client to keep them consistent. 

I will fix this bug after BOOKKEEPER-453 which extract commonality from simple and multiplex. I would finish them in these few days.","11/Dec/12 15:16;fpj;[~hustlmsp] Sounds good, Sijie.","19/Dec/12 05:24;hustlmsp;Attach a patch. The idea is when a channel is disconnected, the subscriber doesn't clear its channel until it resubscribed. after that it replaced its new channel with old channel.

if some one close subscription during resubscribe, when it resubscribed succeed, trying to replaced its new channel with old channel, it would find the old channel is cleared (closesub) or changed (closesub, sub). then resubscribe would stop resubscribing.","19/Dec/12 05:52;hadoopqa;Testing JIRA BOOKKEEPER-55


Patch [BOOKKEEPER-55.patch|https://issues.apache.org/jira/secure/attachment/12561643/BOOKKEEPER-55.patch] downloaded at Wed Dec 19 05:31:25 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 5 line(s) with trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 120 characters
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 505
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/145/","19/Dec/12 07:54;fpj;Hi Sijie, Could you take care of the trailing spaces and the long line, please?","20/Dec/12 05:23;hustlmsp;attach a patch to address the comment. But I have to say that I could not remove all trailing spaces and long lines, since some are introduced by protobuf.

BTW, I would suggest to add more detail info in the reports to indicate which line is long lines or while lines have trailing spaces.","20/Dec/12 05:52;hadoopqa;Testing JIRA BOOKKEEPER-55


Patch [BOOKKEEPER-55.patch|https://issues.apache.org/jira/secure/attachment/12561843/BOOKKEEPER-55.patch] downloaded at Thu Dec 20 05:31:26 UTC 2012

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 120 characters
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 505
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/160/","28/Dec/12 11:57;fpj;The culprit seems to be this one:

{noformat}
+      SUCCESS, MALFORMED_REQUEST, NO_SUCH_TOPIC, CLIENT_ALREADY_SUBSCRIBED, CLIENT_NOT_SUBSCRIBED, COULD_NOT_CONNECT, TOPIC_BUSY, RESUBSCRIBE_EXCEPTION, NOT_RESPONSIBLE_FOR_TOPIC, SERVICE_DOWN, UNCERTAIN_STATE, INVALID_MESSAGE_FILTER, BAD_VERSION, NO_TOPIC_PERSISTENCE_INFO, TOPIC_PERSISTENCE_INFO_EXISTS, NO_SUBSCRIPTION_STATE, SUBSCRIPTION_STATE_EXISTS, NO_TOPIC_OWNER_INFO, TOPIC_OWNER_INFO_EXISTS, UNEXPECTED_CONDITION, COMPOSITE, 
{noformat}

It is ok to have the trailing space and the long line in the protobuf-generated file.","28/Dec/12 12:00;gavin_li;I'm OOO from Dec 24th to Jan 1st.
",02/Jan/13 19:37;ikelly;lgtm +1. Committing,02/Jan/13 21:24;ikelly;Committed as r1428059. Good work Sijie.,"02/Jan/13 21:56;hudson;Integrated in bookkeeper-trunk2 #24 (See [https://builds.apache.org/job/bookkeeper-trunk2/24/])
    BOOKKEEPER-55: SubscribeReconnectRetryTask might retry subscription endlessly when another subscription is already successfully created previously (sijie via ivank) (Revision 1428059)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ResubscribeException.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ResubscribeCallback.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/multiplex/MultiplexHChannelManager.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/multiplex/MultiplexSubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
race condition of  outstandingMsgSet@SubscribeResponseHandler ,BOOKKEEPER-53,12520060,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,leixu,leixu,25/Aug/11 05:48,07/Dec/11 15:56,14/Mar/19 02:39,28/Nov/11 23:18,4.0.0,,4.0.0,,,hedwig-client,,,0,,"outstandingMsgSet is a Set, so it is not thread-safe. The detail is as below:

MessageConsumeRetryTask is In a timer, so in timer thread, when the timer is up, it will cause a outstandingMsgSet add operation:
MessageConsumeRetryTask.run() -> outstandingMsgSet.add(message) -> outstandingMsgSet.add(message)

At the same time, in other thread(maybe main thread), there may be other operations of this outstandingMsgSet:
MessageConsumeCallback.operationFinished() -> messageConsumed(Message message) -> outstandingMsgSet.remove(message);",,,,,,,,,,,,,,,,,,,25/Nov/11 14:53;fpj;BOOKKEEPER-53.patch;https://issues.apache.org/jira/secure/attachment/12505115/BOOKKEEPER-53.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-25 14:53:18.859,,,no_permission,,,,,,,,,,,,,63793,,,Mon Nov 28 22:46:24 UTC 2011,,,,,,0|i0u5nj:,174057,,,,,,,,"17/Nov/11 10:34;leixu;outstandingMsgSet is a HashSet, and it is not thread safe, should use ConcurrentHashSet instead","25/Nov/11 14:53;fpj;This is a patch to fix this issue. Note that there is no ConcurrentHashSet implementation in java.util.concurrent, and the way I found to get it is to use a method from Collections. The examples I've been able to find suggest to use a Boolean, but for correctness it sounds like it doesn't matter. ",28/Nov/11 16:22;breed;+1 looks good. i think this is the correct way to do it.,"28/Nov/11 16:51;fpj;Thanks, Ben. For completeness, I checked the documentation, and it must be a Boolean:

http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html

","28/Nov/11 22:46;hudson;Integrated in bookkeeper-trunk #245 (See [https://builds.apache.org/job/bookkeeper-trunk/245/])
    BOOKKEEPER-53: race condition of outstandingMsgSet@SubscribeResponseHandler

breed : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Message sequence confuse due to the subscribeMsgQueue@SubscribeResponseHandler,BOOKKEEPER-52,12519284,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,leixu,leixu,18/Aug/11 11:07,07/Dec/11 15:56,14/Mar/19 02:39,30/Aug/11 10:14,4.0.0,,4.0.0,,,hedwig-client,,,0,,"In setMessageHandler function, when subscribeMsgQueue is not empty, the main thread will consume the message in subscribeMsgQueue, at the same time, the messageHandler have been set, so the worker thread will consume new coming message in handleSubscribeMessage. So the message Sequence will be confused",,,,,,,,,,,,,,,,,,,18/Aug/11 11:32;leixu;bookkeeper-52.patch;https://issues.apache.org/jira/secure/attachment/12490787/bookkeeper-52.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-30 10:14:39.686,,,no_permission,,,,,,,,,,,,,63157,,,Tue Aug 30 10:14:39 UTC 2011,,,,,,0|i0u4un:,173927,,,,,,,,18/Aug/11 11:32;leixu;use synchronized(this) to Synchronous the subscribeMsgQueue consume and the new message consume in asyncMessageConsume,"30/Aug/11 10:14;ikelly;+1 
Committed as r1163161. Thanks xulei.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointException at FIFODeliveryManager#deliveryPtrs,BOOKKEEPER-51,12519278,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,leixu,leixu,18/Aug/11 10:52,07/Dec/11 15:56,14/Mar/19 02:39,30/Aug/11 09:14,4.0.0,,4.0.0,,,bookkeeper-server,,,0,,"when unsubscribe immediately after subscribe, and before startDelivery, the deliveryPtrs is null, so the following MapMethods.removeFromMultiMap will cause a use of NullPointException",,,,,,,,,,,,,,,,,,,18/Aug/11 11:37;leixu;bookkeeper-51.patch;https://issues.apache.org/jira/secure/attachment/12490788/bookkeeper-51.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-30 09:14:52.045,,,no_permission,,,,,,,,,,,,,63204,,,Tue Aug 30 09:14:52 UTC 2011,,,,,,0|i0u5n3:,174055,,,,,,,,18/Aug/11 11:37;leixu;check if deliveryPtrs is null,"30/Aug/11 09:14;ikelly;+1 
Committed in r1163149. Thanks xulei.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointException at LedgerDescriptor#cmpMasterKey,BOOKKEEPER-50,12519276,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,leixu,leixu,18/Aug/11 10:41,02/May/13 02:29,14/Mar/19 02:39,04/Nov/11 10:47,4.0.0,,4.0.0,,,bookkeeper-server,,,0,,"the LedgerDescriptor will be created when it is missed in LedgerCache. NullPointException will be thrown out in the following case:

1. The ledger descriptor is created and cached to LedgerCache because of a readEntry operation in bookie. The ledger descriptor was created without setting master key (we don't know master key in a read request)
2. An addEntry is sent after 1 . since the ledger descriptor has been cached, so addEntry will use it to compare master key. then NullPointException is thrown out.",,,,,,,,,,,,,,,,,,,31/Oct/11 15:12;hustlmsp;BookieReadAfterBookieRestartTest.java;https://issues.apache.org/jira/secure/attachment/12501621/BookieReadAfterBookieRestartTest.java,03/Nov/11 08:42;hustlmsp;bookkeeper-50.patch;https://issues.apache.org/jira/secure/attachment/12502117/bookkeeper-50.patch,18/Aug/11 11:40;leixu;bookkeeper-50.patch;https://issues.apache.org/jira/secure/attachment/12490789/bookkeeper-50.patch,04/Nov/11 09:36;hustlmsp;bookkeeper-50.patch_v2;https://issues.apache.org/jira/secure/attachment/12502378/bookkeeper-50.patch_v2,04/Nov/11 10:29;hustlmsp;bookkeeper-50.patch_v3;https://issues.apache.org/jira/secure/attachment/12502380/bookkeeper-50.patch_v3,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2011-08-18 11:48:14.035,,,no_permission,,,,,,,,,,,,,63956,,,Fri Nov 04 10:47:18 UTC 2011,,,,,,0|i0u527:,173961,,,,,,,,18/Aug/11 11:40;leixu;check if this.masterKey is null,"18/Aug/11 11:48;fpj;Hi Xulei, A read over an empty ledger shouldn't create a new ledger descriptor, no? Perhaps the real problem is that we do create a ledger descriptor and we shouldn't.","18/Aug/11 12:00;leixu;Flavio, this issue is observed in ledger recovery, which will first read last entry from ledger and write it back to make sure the last entry succeed in a quorum of bookie server. the read operation needs to create the ledger description since we have entries in ledger.","18/Aug/11 13:32;fpj;I guess I don't understand your scenario then. From the original description, I understand that a read request hits a bookie that has never seen the ledger of the request before, consequently the result of the read is null. Your second comment says that this particular case happens during recovery.

In my interpretation, it doesn't matter if this is for recovery or not. If a read hits a bookie and the bookie hasn't heard of the ledger, then it shouldn't create auxiliary data structures. In the case of recovery, we will need to bootstrap the ledger in the case the client has something to write.

Let me give a more concrete example to illustrate. Suppose that we have 3 bookies and we write each entry to two bookies. The writer client writes the first entry to one bookie and crashes. The first client that tries to read from that ledger will have to recover it. While recovering, it will request entries from two bookies that have never seen the ledger. In my understanding such bookies should not create a ledger descriptor upon an attempt to read from the ledger. One of these bookies will have to create a ledger descriptor when the client tries to replicate the single entry. 

Does it make sense to you?","23/Aug/11 06:40;leixu;I mean that in Bookie.java:195
                    // XXX we net to make sure we set the master keys appropriately!
                    LedgerDescriptor handle = getHandle(ledgerId, false);
the second param is false, so in getHandle() function, if there is no ledger descriptor according to the ledgerId in legders, it will create a ledger descriptor which masterkey is null.","24/Aug/11 04:15;breed;xulei is right, we need to make sure we persist the keys at the bookie. we need to save off the secret in the header of the ledger on the bookie. we reserve 1K in the header for meta-data, so it is an obvious place to put it. We need to modify FileInfo to have accessor functions for the key.","31/Oct/11 15:12;hustlmsp;Add a test case to reproduce this issue.

2011-10-31 23:08:29,970 - WARN  - [NIOServerFactory:NIOServerFactory@123] - Exception in server socket loop: /0.0.0.0
java.lang.NullPointerException
     at org.apache.bookkeeper.bookie.LedgerDescriptor.cmpMasterKey(LedgerDescriptor.java:52)
     at org.apache.bookkeeper.bookie.Bookie.addEntry(Bookie.java:535)
     at org.apache.bookkeeper.proto.BookieServer.processPacket(BookieServer.java:174)
     at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.readRequest(NIOServerFactory.java:309)
     at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.doIO(NIOServerFactory.java:207)
     at org.apache.bookkeeper.proto.NIOServerFactory.run(NIOServerFactory.java:118)
2011-10-31 23:08:29,969 - WARN  - [NIOServerFactory:NIOServerFactory@123] - Exception in server socket loop: /0.0.0.0
java.lang.NullPointerException
     at org.apache.bookkeeper.bookie.LedgerDescriptor.cmpMasterKey(LedgerDescriptor.java:52)
     at org.apache.bookkeeper.bookie.Bookie.addEntry(Bookie.java:535)
     at org.apache.bookkeeper.proto.BookieServer.processPacket(BookieServer.java:174)
     at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.readRequest(NIOServerFactory.java:309)
     at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.doIO(NIOServerFactory.java:207)
     at org.apache.bookkeeper.proto.NIOServerFactory.run(NIOServerFactory.java:118)

1) first add entries to a ledger (not close the ledger)
2) restart bookies, bookie relay journals during start up. the entries will be added without master key
3) open the ledger created by 1). so it will do recovery work and add last entry to bookie and got NullPointException.","31/Oct/11 17:39;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2642/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

save master key in header part of ledger index file.

so we can load master key when opening an existed ledger index file to avoid that master key is null.


This addresses bug BOOKKEEPER-50.
    http://issues.apache.org/jira/browse/BOOKKEEPER-50


Diffs
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1195369 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java 1195369 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1195369 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadAfterBookieRestartTest.java PRE-CREATION 

Diff: https://reviews.apache.org/r/2642/diff


Testing
-------


Thanks,

Sijie

","03/Nov/11 18:23;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2642/#review3031
-----------------------------------------------------------


Looks good. I have a few comments about spelling etc, and only one comment which may require code change (regarding zero length keys).


http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
<https://reviews.apache.org/r/2642/#comment6774>

    This comment should simply be removed.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
<https://reviews.apache.org/r/2642/#comment6775>

    existed is wrong tense here. Should be existing. as in, existingMasterKey :)
    



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
<https://reviews.apache.org/r/2642/#comment6778>

    What if the ledger is created with a zero length key?



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
<https://reviews.apache.org/r/2642/#comment6779>

    Wired should be Weird. 



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
<https://reviews.apache.org/r/2642/#comment6785>

    Perhaps add a FileInfo javadoc for what the format is for the file. 
    
    



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
<https://reviews.apache.org/r/2642/#comment6784>

    I don't like the name _read. It's not very descriptive when compared to ""read"". I think it would be better to rename read to readData, and rename _read to read.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
<https://reviews.apache.org/r/2642/#comment6776>

    javadoc exceptions don't match the signature exceptions.


- Ivan


On 2011-10-31 17:39:19, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-10-31 17:39:19)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  save master key in header part of ledger index file.
bq.  
bq.  so we can load master key when opening an existed ledger index file to avoid that master key is null.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-50.
bq.      http://issues.apache.org/jira/browse/BOOKKEEPER-50
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1195369 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java 1195369 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1195369 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadAfterBookieRestartTest.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/2642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","04/Nov/11 09:42;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2642/
-----------------------------------------------------------

(Updated 2011-11-04 09:42:25.648660)


Review request for bookkeeper.


Changes
-------

attach a new patch according to Ivan's suggestions.

1) add javadoc in FileInfo to describe format of index file
2) fixed typos
3) distinguish empty master key (length is zero) from null master key. it supports storing zero-length master key.
4) I renamed _read to readData. since we have write in FileInfo, read is much suitable; also we don't need to change FileInfo.read in other files.


Summary
-------

save master key in header part of ledger index file.

so we can load master key when opening an existed ledger index file to avoid that master key is null.


This addresses bug BOOKKEEPER-50.
    http://issues.apache.org/jira/browse/BOOKKEEPER-50


Diffs (updated)
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1197114 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java 1197114 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1197114 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadAfterBookieRestartTest.java PRE-CREATION 

Diff: https://reviews.apache.org/r/2642/diff


Testing
-------


Thanks,

Sijie

","04/Nov/11 09:58;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2642/#review3047
-----------------------------------------------------------



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
<https://reviews.apache.org/r/2642/#comment6789>

    header> should be header&gt; There are a few more instances further down



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
<https://reviews.apache.org/r/2642/#comment6791>

    Could you define this as a named constant such as final static int NO_MASTER_KEY = -1; and then explicitly check for the constant on read. 
    
     



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
<https://reviews.apache.org/r/2642/#comment6790>

    The reason I suggested you call the other read method, readData is because it reads from the data section of the file, while this one reads from a absolute address. If you want to leave the public read as it is (i agree about the symmetry between read/write being nice), I would suggest changing this to readAbsolute()


- Ivan


On 2011-11-04 09:42:25, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-11-04 09:42:25)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  save master key in header part of ledger index file.
bq.  
bq.  so we can load master key when opening an existed ledger index file to avoid that master key is null.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-50.
bq.      http://issues.apache.org/jira/browse/BOOKKEEPER-50
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1197114 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java 1197114 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1197114 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadAfterBookieRestartTest.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/2642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","04/Nov/11 10:33;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2642/
-----------------------------------------------------------

(Updated 2011-11-04 10:31:00.119933)


Review request for bookkeeper.


Changes
-------

improve the patch according to Ivan's suggestions.
1) fix typos
2) make -1 as constant define
3) change readData to readAbsolute


Summary
-------

save master key in header part of ledger index file.

so we can load master key when opening an existed ledger index file to avoid that master key is null.


This addresses bug BOOKKEEPER-50.
    http://issues.apache.org/jira/browse/BOOKKEEPER-50


Diffs (updated)
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1197481 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java 1197481 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1197481 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadAfterBookieRestartTest.java PRE-CREATION 

Diff: https://reviews.apache.org/r/2642/diff


Testing
-------


Thanks,

Sijie

","04/Nov/11 10:35;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2642/#review3048
-----------------------------------------------------------

Ship it!


LGTM +1

- Ivan


On 2011-11-04 10:31:00, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2642/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-11-04 10:31:00)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  save master key in header part of ledger index file.
bq.  
bq.  so we can load master key when opening an existed ledger index file to avoid that master key is null.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-50.
bq.      http://issues.apache.org/jira/browse/BOOKKEEPER-50
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1197481 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java 1197481 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1197481 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadAfterBookieRestartTest.java PRE-CREATION 
bq.  
bq.  Diff: https://reviews.apache.org/r/2642/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

",04/Nov/11 10:47;ikelly;Committed as r1197495. Thanks Sijie.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointException when releasing topic,BOOKKEEPER-43,12518553,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,11/Aug/11 05:20,07/Dec/11 15:56,14/Mar/19 02:39,23/Aug/11 22:35,4.0.0,,4.0.0,,,hedwig-server,,,0,,"Got NullPoint Exception when releasing topic.

java.lang.NullPointerException
        at org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager.lostTopic(AbstractSubscriptionManager.java:221)
        at org.apache.hedwig.server.topics.AbstractTopicManager.realReleaseTopic(AbstractTopicManager.java:153)
        at org.apache.hedwig.server.topics.AbstractTopicManager.access$000(AbstractTopicManager.java:38)
        at org.apache.hedwig.server.topics.AbstractTopicManager$1.operationFailed(AbstractTopicManager.java:140)
        at org.apache.hedwig.util.CallbackUtils$1.tick(CallbackUtils.java:75)
        at org.apache.hedwig.util.CallbackUtils$1.operationFailed(CallbackUtils.java:85)
        at org.apache.hedwig.server.common.TopicOpQueuer$AsynchronousOp$1.operationFailed(TopicOpQueuer.java:54)
        at org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager$AcquireOp$1.operationFailed(AbstractSubscriptionManager.java:139)
        at org.apache.hedwig.server.subscriptions.ZkSubscriptionManager$1.safeProcessResult(ZkSubscriptionManager.java:79)
        at org.apache.hedwig.zookeeper.SafeAsyncZKCallback$ChildrenCallback.processResult(SafeAsyncZKCallback.java:66)
        at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:567)
        at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:481)",,,,,,,,,,,,,,,,,,,11/Aug/11 05:23;hustlmsp;bookkeeper-43.patch;https://issues.apache.org/jira/secure/attachment/12490081/bookkeeper-43.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-11 06:03:44.243,,,no_permission,,,,,,,,,,,,,63984,,,Tue Aug 23 22:35:08 UTC 2011,,,,,,0|i0u5en:,174017,,,,,,,,11/Aug/11 05:23;hustlmsp;submit patch.,"11/Aug/11 06:03;utkarsh;+1, LGTM",23/Aug/11 22:35;breed;Committed revision 1160913.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieClientTest fails intermittantly,BOOKKEEPER-40,12518195,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,08/Aug/11 11:29,22/Oct/12 14:50,14/Mar/19 02:39,13/Jan/12 17:07,,,4.1.0,,,,,,0,,"To repro:
true; while [ $? = 0 ]; do mvn test -Dtest=BookieClientTest; done

Problem seems to be
{code}
        BookieClient bc = new BookieClient(channelFactory, executor);
        ChannelBuffer bb;
        bb = createByteBuffer(1, 1, 1);
        bc.addEntry(addr, 1, passwd, 1, bb, wrcb, null);
        synchronized (arc) {
            bc.readEntry(addr, 1, 1, recb, arc);

{code}
The test doesn't wait for addEntry to complete before doing a read. It should be simple to fix. ",,,,,,,,,,,,,,,,,,,11/Jan/12 15:48;fpj;BOOKKEEPER-40.patch;https://issues.apache.org/jira/secure/attachment/12510193/BOOKKEEPER-40.patch,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-11 15:48:48.598,,,no_permission,,,,,,,,,,,,,65753,,,Fri Jan 13 17:53:06 UTC 2012,,,,,,0|i0ax9j:,61662,,,,,,,,"11/Jan/12 15:48;fpj;I tried to implement the fix you suggested, Ivan. It solves the problem for me.","13/Jan/12 17:07;ikelly;Committed as r1231187, thanks Flavio.","13/Jan/12 17:53;hudson;Integrated in bookkeeper-trunk #315 (See [https://builds.apache.org/job/bookkeeper-trunk/315/])
    BOOKKEEPER-40: BookieClientTest fails intermittantly (fpj via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Bookie server failed to restart because of too many ledgers (more than ~50,000 ledgers)",BOOKKEEPER-39,12518186,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,08/Aug/11 09:15,08/Jun/16 08:15,14/Mar/19 02:39,28/Nov/11 18:29,4.0.0,,4.0.0,,,bookkeeper-server,,,0,,"If we have ~500,000 topics in hedwig, we might have more than ~500,000 ledgers in bookkeeper (a topic has more than 1 ledger). So when the bookie server restarted, a logfile GC thread is started, which will call zk.getChildren to fetch all ledgers, and it failed because of package length limitation.

2011-08-01 01:18:46,373 - ERROR [main-EventThread:EntryLogger$GarbageCollectorThread$1@164] - Error polling ZK for the available ledger nodes:
org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /ledgers
        at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)
        at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
        at org.apache.zookeeper.ZooKeeper.getChildren(ZooKeeper.java:1519)
        at org.apache.bookkeeper.bookie.EntryLogger$GarbageCollectorThread$1.processResult(EntryLogger.java:162)
        at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:592)
        at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:481)
2011-08-01 01:18:46,373 - WARN  [main-EventThread:Bookie$1@242] - ZK client has been disconnected to the ZK server!
2011-08-01 01:18:47,278 - WARN  [main-SendThread(perf13.platform.mobile.sp2.yahoo.com:2181):ClientCnxn$SendThread@980] - Session 0x131833dec850034 for server perf13.platform.mobile.sp2.yahoo.com/98.139.43.86:2181, unexpected error, closing socket connection and attempting reconnect
java.io.IOException: Packet len9976413 is out of range!
        at org.apache.zookeeper.ClientCnxnSocket.readLength(ClientCnxnSocket.java:112)
        at org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:78)
        at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:264)
        at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:958) ",,,,,,,,,,,,,,,,,,BOOKKEEPER-108,25/Nov/11 18:56;ikelly;BOOKKEEPER-39.diff;https://issues.apache.org/jira/secure/attachment/12505150/BOOKKEEPER-39.diff,28/Nov/11 18:30;ikelly;bench.txt;https://issues.apache.org/jira/secure/attachment/12505365/bench.txt,14/Sep/11 01:28;hustlmsp;bookkeeper-39.patch;https://issues.apache.org/jira/secure/attachment/12494361/bookkeeper-39.patch,13/Nov/11 09:04;hustlmsp;bookkeeper-39.patch_v2;https://issues.apache.org/jira/secure/attachment/12503524/bookkeeper-39.patch_v2,22/Nov/11 10:40;hustlmsp;bookkeeper-39.patch_v3;https://issues.apache.org/jira/secure/attachment/12504723/bookkeeper-39.patch_v3,25/Nov/11 09:13;hustlmsp;bookkeeper-39.patch_v4;https://issues.apache.org/jira/secure/attachment/12505082/bookkeeper-39.patch_v4,25/Nov/11 12:07;hustlmsp;bookkeeper-39.patch_v5;https://issues.apache.org/jira/secure/attachment/12505102/bookkeeper-39.patch_v5,,,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2011-09-22 10:47:58.126,,,no_permission,,,,,,,,,,,,,3335,,,Wed Jun 08 08:15:14 UTC 2016,,,,,,0|i0u5m7:,174051,,,,,,,,"08/Aug/11 09:18;hustlmsp;Some initial thoughts:

a) getChildren's semantic is not scalable. It would be great that zookeeper can provide a scanner interface to get children of a node.

b) don’t put all the ledgers in a single zk node ""/ledgers"". Use hash scheme to put ledgers in different zk nodes which can reduce the number of children in a single node. E.g. Suppose ledger a, computes its h1 hash value h1(a) and put it in /ledgers/h1(a)/a .

c) use a scalable partitioned/sharded storage to store the ledgers meta data.","14/Sep/11 01:28;hustlmsp;Create a patch to partition the ledgers into 2-level hashed zk nodes, which avoid packetLen exception during garbage collection.","14/Sep/11 01:50;hustlmsp;2-level hash mechanism:

all the ledgers are organized into 2-level hash nodes, whose zk node path is like /hashed_ledgers/{hash1}/{hash2}/L0000000000.
1st level hash contains 256 nodes, starting from 0 to 0xff. Each 1st level hash node contains 256 sub-nodes, starting from 0 to 0xff. so we have 256 * 256 hashed prefix nodes.

Create Ledger:
(1) Get the hashed node prefix.
    i) for first time, randomly select hash1 & hash2.
    ii) select next hashed prefix in round-robin way for next creations.
(2) Create a sequential node in the selected hashed prefix : /hashed_ledgers/{hash1}/{hash2}/L
    i) we can get the sequential node id after creation.
(3) ledger id is formed by ((long)((hash1 & 0xff) << 8) | (hash2 & 0xff)) | (nodeid & 0x000000ffffffffffL) << 16;
    i) putting the hash_part in lower bits which can avoid hash confliction, because :
        a) we will use ledger id as map key to store data in bookie, also use ledger id as submit key in OrderedExecutor.
        b) java HashMap use lower bits of hash key as hashCode.

Garbage Collection:

(1) do garbage collection one hash node by one hash node.
    i) get all the children of a specified hash node.
    ii) get all hosted ledgers of a specified hash node in bookie server.
        a) for ease, we store the reversed ledger id ({hash_part}{node_id}) in a sorted map : LedgerCache#activeLedgers
        b) call LedgerCache#activeLedgers.subMap(""{hash_part}{00...0}"", ""{hash_part}{ff...f}"") to retrieve all leger ids belong to a specified hash node.
    iii) do intersection of these two ledger id sets to find those non-active ledgers
    iv) delete those non-active ledgers
(2) After all the hash nodes are garbage collected, garbage collects the entry logs which don't contain any active ledger data.","22/Sep/11 10:47;ikelly;Good code, I like how you've cleaned up GC, its much more readable now.

General comments.

Instead of system properties, we should use a proper configuration object. (commons configuration).
For example, you have Constants.hashLedgerId in places, and StringUtils.createHashNodeIfMissing. The usage of these would be much easier to read if you had, conf.getBoolean(""hash_ledger_ids""); and conf.getBoolean(""create_missing_hashnodes""), etc. I have thought of adding proper configuration support to BK in the past. I think now is the time. 

Why is createHashNodeIfMissing even needed? Shouldn't it always be the case. For that matter, im wondering if we even need to preserve the old way of naming ledgers, I don't think there's any overhead from using the hashing, and it will scale better. It will also keep the code cleaner if we only use one. The only problem really is that we would need an upgrade path, so that if people update bookkeeper, the ledger format will be updated also. 

This means we will also need to add a metadata version. I've started this in some other work. I'll try to break out a patch soon.

Do we need to use hashing? The problem here is that ZK can't return more than a certain number of ledgers. Can't we make it so that we split the ledger id into smaller parts. So for ledger 0x1234567891234567 We could have a path /ledgers/D12345/D67891/D23456. We could make the split smaller depending on what ZooKeeper's max package size is.

Code comments.

L1192 is very verbose, you should use, 
node2 = (node2+1) % NUM_HASH_DIRS;

L271
I think this method would fit better into one of the other classes, such as LedgerUtils.

L450 
The initial check here is redundant.

L490
Should just be Set, not compareAndSet.

Also, its best to keep lines under 120, the anything over that tends to wrap on split screen.

L500
Why not make both get active ledgers methods use the same callback?
","26/Sep/11 02:24;hustlmsp;Thanks, Ivan.

> Instead of system properties, we should use a proper configuration object. (commons configuration).

Agree. configuration is much better.

> Do we need to use hashing?

we use zk sequential node to get unique incremental ledger id. if we get ledger id then split it, we also have a zk node (which is for generating ledger ids) which has too many children.
","26/Sep/11 09:56;ikelly;{quote}
> Do we need to use hashing?

we use zk sequential node to get unique incremental ledger id. if we get ledger id then split it, we also have a zk node (which is for generating ledger ids) which has too many children.
{quote}
You can implement a counter in ZK using conditional writes, like so. 
{code}
while (true) {
  try {
    Stat s = zk.exists(""/counter_path"");
    long l = bytesToLong(zk.getData(""/counter_path"", s));
    l++;
    zk.setData(""/counter_path"", longToBytes(l), s.getVersion());
    break;
  } catch (KeeperException.BadVersionException bve) {
    // someone else has written since exists(), try again
    continue;
  }
}
{code}

This does cause an extra interaction with ZK which may be bad. My issues with the hashing approach isn't the hashing itself, it's more that it seems to generate a lot of auxiliary code.","28/Sep/11 05:46;hustlmsp;Ivan,

> My issues with the hashing approach isn't the hashing itself, it's more that it seems to generate a lot of auxiliary code.

Either hashing or splitting methods are trying to distribute ledgers into smaller nodes, so that bookkeeper can do garbage collection node by node to avoid too-many-ledgers issue. So I believe most of code added is used to do garbage collection node by node, not the hashing/splitting method.

Either hashing or splitting needs to do following things:
1) need a mechanism to loop over all the hashing/splitting zk nodes
   a) for each hashing/splitting zk node, do garbage collection
      1) get a collection of ledgers from a hashing/splitting zk node (meta parts), called set S1
      2) get a collection of ledgers from bookie server (hosted in bookie server), called set S2
      3) garbage collecting those ledgers existed in S2 not in S1.


I think I can improve the patch to make it clearer. ","07/Oct/11 18:23;breed;great work sijie! i think it may be better to use sequential rather than the test/set counter. it adds latency and is a synchronous call which we avoid. (if you make it asynchronous, i think it gets more complex.)

i also agree which what ivan mentioned earlier: we should just go with the hash scheme rather than doing both. it gets rid of the configuration variable and simplifies the code a bit.",17/Oct/11 15:38;breed;canceling until sijie generates a new patch.,"13/Nov/11 09:03;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2817/
-----------------------------------------------------------

Review request for bookkeeper.


Summary
-------

Create a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers'. Implement this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.


This addresses bug BOOKKEEPER-39.
    http://issues.apache.org/jira/browse/BOOKKEEPER-39


Diffs
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlattenLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HashLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/CallbackUtils.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java 1201411 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hash/HashAsyncLedgerOpsTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hash/HashBookieFailureTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hash/HashLedgerDeleteTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile 1201411 

Diff: https://reviews.apache.org/r/2817/diff


Testing
-------


Thanks,

Sijie

","13/Nov/11 09:04;hustlmsp;Attach a new patch which creates a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers' and implements this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.","16/Nov/11 17:55;ikelly;I really like this new patch, splitting the ledger manager interface out is an excellent improvement. I'll wait until configuration is in to do a thorough review though. Also, this code will need to be rebased onto the latest trunk.

Flatten should just be Flat.

Also, Im still not convinced about hashing, instead of simply splitting the long. The main reason I'm troubled by it, is that it's hard for admins to find the znode for a ledger if they have just the ID in the hashing mode. However, if they know the ledger is L00FE43EFF1234, they can look in /ledgers/L00FE/3EFF/1234. Modifying this shouldn't be very hard with these nice new interfaces, though I would name it HierarchicalLedgerManager. If you push the code to github, I can show you more clearly what I mean.

The namespace needs to have some sort of versioning or tagging for how it is laid out. I propose we have a ZNODE at the toplevel of the namespace /ledgers/LAYOUT, which contains [LAYOUT-TYPE]:[VERSION]. If /ledgers/LAYOUT does not exist, assume FLAT:1. Otherwise, use it to decide which layout manager to use. ","17/Nov/11 07:09;hustlmsp;> I propose we have a ZNODE at the toplevel of the namespace /ledgers/LAYOUT

I like such kind of propose, which make management more consistent.

> Also, Im still not convinced about hashing, instead of simply splitting the long. 

Splitting the long means that we need get an id before splitting. Either using a sequential znode or test/set counter to get unique id is not good enough as previous comments.

Hashing is not right to describe the LedgerManager in patch, since it doesn't generate id first then do hashing. I prefer to call it Hierarchical as your suggestion: it fist pickup a sequential znode from a 2-level hierarchical znodes in round-robin way, then do id generation using this sequential znode. which means id generation could be processed in different sequential znodes, not depends on a single znode.

For admins, is it OK to provide a tool using LedgerManager interface to talk with different layout which let them interact with bookie metadata easier? similar as BOOKKEEPER-77 .
","17/Nov/11 08:57;ikelly;I think the main objection was
{quote}
we use zk sequential node to get unique incremental ledger id. if we get ledger id then split it, we also have a zk node (which is for generating ledger ids) which has too many children.
{quote}

This isn't the case, as the sequential node doesn't have to exist for very long. It can be deleted immediately after. So the too many children isn't an issue. I'll try to implement this on your interface today.

{code}
String newId = zk.create(""/ledgers/idgen/ID-"", SEQUENTIAL | EPHEMERAL);
long id = Long.valueOf(newId.replace(""ID-""));
zk.delete(newId, -1);
{code}","22/Nov/11 10:40;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2817/
-----------------------------------------------------------

(Updated 2011-11-22 10:39:27.293909)


Review request for bookkeeper.


Changes
-------

create new patch based on latest trunk.
refine LedgerManager interface to remove zookeeper dependency.
change HashLedgerManager to HierarchicalLedgerManager based on Ivan's comments.


Summary
-------

Create a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers'. Implement this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.


This addresses bug BOOKKEEPER-39.
    http://issues.apache.org/jira/browse/BOOKKEEPER-39


Diffs (updated)
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/CallbackUtils.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1204867 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerLayoutTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalAsyncLedgerOpsTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieFailureTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieReadWriteTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieRecoveryTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalLedgerDeleteTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile 1204867 

Diff: https://reviews.apache.org/r/2817/diff


Testing
-------


Thanks,

Sijie

","24/Nov/11 18:58;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2817/#review3504
-----------------------------------------------------------


Looking good. There's some cleanup and simplifications to do, but the patch is close now. I think it may take 1 or 2 more iterations, but this is a big patch, so that's pretty normal. A general comment is that scope creeped a little in the last patch with LedgerLayout and the dynamic loading changes. These are separate patches, and should be in separate JIRAs. Having the content of a patch focused on one thing makes it much easier to review, especially when the main part is as big as it is in this one. This is something I did too when I started sending patches to Apache, but I found quite quickly that the smaller the changes, the quicker things get review :)


http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
<https://reviews.apache.org/r/2817/#comment7792>

    Versions should be handled by the application, not by the user. We don't want to user to be able to configure how which version of the layout they use. They should use the version that the software supports. If their metadata is in an older version which can't be read by the current version, they need to upgrade their metadata. We should provide tools to do this if it is required in future.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
<https://reviews.apache.org/r/2817/#comment7793>

    typo, relay should be replay
    



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
<https://reviews.apache.org/r/2817/#comment7797>

    There is only ever one instance of entrylogger, which has one instance of GarbageCollectorThread. Why is this needed? 
    
    I think what you're intend may be here (correct me if im wrong) may be that you don't want doGcLedger() to be called more than once in parallel. doGcLedgers and doGcEntryLogs are async calls, so this synchronization method won't work for that case. 



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
<https://reviews.apache.org/r/2817/#comment7800>

    While is correct here (when is also correct, but changes the meaning slightly).



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
<https://reviews.apache.org/r/2817/#comment7808>

    activeLedgerManager should be set to alm before here. The check in the gcThread for activeLedgerManager isn't very nice. In fact it's not needed. If you look at the old code, the check is entryLogger.activeLedgers == null, which can never be the case as activeLedgers is assigned to a new HashMap on construction.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
<https://reviews.apache.org/r/2817/#comment7807>

    make final



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
<https://reviews.apache.org/r/2817/#comment7809>

    As I said above, this shouldn't be here, it should be in the constructor. Also, mamanger is a typo



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/2817/#comment7810>

    Could you move Processor out of the method invokation. I.e. put 
    Processor<Long> processor = new Processor<Long>() { ... }; and then pass processor to asyncProcessLedgers. 



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/2817/#comment7811>

    Break this line, so it doesn't go past 120 chars. Preferably 80, but if 80 makes it too squashed looking, 120. I think 120 is the limit for the ZK coding style.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java
<https://reviews.apache.org/r/2817/#comment7818>

    Instead of having instanceof here, define newLedgerPath on LedgerManager as:
    
    LedgerManager#newLedgerPath(GenericCallback<String> cb); 
    
    Then you should need no instanceof calls. 
    
    GenericCallback is defined in proto/BookkeeperInternalCallbacks.java.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
<https://reviews.apache.org/r/2817/#comment7812>

    I don't think we should provide this level of pluggability yet, until we finalize what a ledger manager interface looks like, which won't be until we try to integrate hbase. For the moment, I think it's enough to have getLedgerManager return a String, which we use with an if-else in the factory.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7825>

    class should be package private
    



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7813>

    private
    



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7814>

    private



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7815>

    break line
    



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7816>

    typo: actived->active



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7823>

    private
    



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7822>

    Define ""0000"" and ""9999"" as String constants at top of class.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7824>

    private



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java
<https://reviews.apache.org/r/2817/#comment7817>

    This is barely used at the moment and shouldn't be in this patch. It is something we need to address in the future, but it's better to keep patches focused on one thing, which in this case is the ledger manager interface.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java
<https://reviews.apache.org/r/2817/#comment7819>

    Remove this version LedgerLayout, from the parameters. Instead of the reflection stuff, just use
    
    if (""flat"".equals(conf.getLayoutManager())) { 
    return new FlatLayoutManager(conf, zk);
    } else if (""hierarchical"".equals etc etc



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/CallbackUtils.java
<https://reviews.apache.org/r/2817/#comment7820>

    These could be moved to BookKeeperInternalCallbacks.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java
<https://reviews.apache.org/r/2817/#comment7821>

    Remove this also, it's unused.


- Ivan


On 2011-11-22 10:39:27, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2817/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-11-22 10:39:27)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Create a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers'. Implement this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-39.
bq.      http://issues.apache.org/jira/browse/BOOKKEEPER-39
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/CallbackUtils.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerLayoutTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalAsyncLedgerOpsTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieFailureTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieReadWriteTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieRecoveryTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalLedgerDeleteTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile 1204867 
bq.  
bq.  Diff: https://reviews.apache.org/r/2817/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","25/Nov/11 03:46;jiraposter@reviews.apache.org;

bq.  On 2011-11-24 18:58:01, Ivan Kelly wrote:
bq.  > Looking good. There's some cleanup and simplifications to do, but the patch is close now. I think it may take 1 or 2 more iterations, but this is a big patch, so that's pretty normal. A general comment is that scope creeped a little in the last patch with LedgerLayout and the dynamic loading changes. These are separate patches, and should be in separate JIRAs. Having the content of a patch focused on one thing makes it much easier to review, especially when the main part is as big as it is in this one. This is something I did too when I started sending patches to Apache, but I found quite quickly that the smaller the changes, the quicker things get review :)

I agreed. Let's focus on LedgerManager interface itself. I will remove dynamic loading changes and ledger layout util integrated with key/value storage (such as hbase). 


bq.  On 2011-11-24 18:58:01, Ivan Kelly wrote:
bq.  > http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java, line 133
bq.  > <https://reviews.apache.org/r/2817/diff/2/?file=59756#file59756line133>
bq.  >
bq.  >     There is only ever one instance of entrylogger, which has one instance of GarbageCollectorThread. Why is this needed? 
bq.  >     
bq.  >     I think what you're intend may be here (correct me if im wrong) may be that you don't want doGcLedger() to be called more than once in parallel. doGcLedgers and doGcEntryLogs are async calls, so this synchronization method won't work for that case.

Your guess is right. seems that gc code are now sync calls, so the flag can be removed.


bq.  On 2011-11-24 18:58:01, Ivan Kelly wrote:
bq.  > http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java, line 250
bq.  > <https://reviews.apache.org/r/2817/diff/2/?file=59756#file59756line250>
bq.  >
bq.  >     While is correct here (when is also correct, but changes the meaning slightly).

I try to fix the typo of 'colected' to 'collected', but I changed 'when' by mistake.


bq.  On 2011-11-24 18:58:01, Ivan Kelly wrote:
bq.  > http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java, line 70
bq.  > <https://reviews.apache.org/r/2817/diff/2/?file=59757#file59757line70>
bq.  >
bq.  >     activeLedgerManager should be set to alm before here. The check in the gcThread for activeLedgerManager isn't very nice. In fact it's not needed. If you look at the old code, the check is entryLogger.activeLedgers == null, which can never be the case as activeLedgers is assigned to a new HashMap on construction.

Agree.


bq.  On 2011-11-24 18:58:01, Ivan Kelly wrote:
bq.  > http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java, line 1
bq.  > <https://reviews.apache.org/r/2817/diff/2/?file=59768#file59768line1>
bq.  >
bq.  >     This is barely used at the moment and shouldn't be in this patch. It is something we need to address in the future, but it's better to keep patches focused on one thing, which in this case is the ledger manager interface.

Agreed.


- Sijie


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2817/#review3504
-----------------------------------------------------------


On 2011-11-22 10:39:27, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2817/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-11-22 10:39:27)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Create a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers'. Implement this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-39.
bq.      http://issues.apache.org/jira/browse/BOOKKEEPER-39
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/CallbackUtils.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1204867 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerLayoutTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalAsyncLedgerOpsTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieFailureTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieReadWriteTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieRecoveryTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalLedgerDeleteTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile 1204867 
bq.  
bq.  Diff: https://reviews.apache.org/r/2817/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","25/Nov/11 09:13;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2817/
-----------------------------------------------------------

(Updated 2011-11-25 09:13:10.140527)


Review request for bookkeeper.


Changes
-------

remove ledgerlayout and dynamic class loading to focus on LedgerManager interface in this jira.
update patch according to Ivan's comments.


Summary
-------

Create a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers'. Implement this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.


This addresses bug BOOKKEEPER-39.
    http://issues.apache.org/jira/browse/BOOKKEEPER-39


Diffs (updated)
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalAsyncLedgerOpsTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieFailureTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieReadWriteTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieRecoveryTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalLedgerDeleteTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile 1206076 

Diff: https://reviews.apache.org/r/2817/diff


Testing
-------


Thanks,

Sijie

","25/Nov/11 10:26;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2817/#review3508
-----------------------------------------------------------



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
<https://reviews.apache.org/r/2817/#comment7830>

    break line



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
<https://reviews.apache.org/r/2817/#comment7832>

    Hmm, it seems we have an inconsistency in how the configuration keys are named. Some are camelcase, some are underscored. I think it would be better to keep them as CamelCase, so ledgerManagerType and zkLedgersRootPath here.
    
    I'll open another JIRA for renaming the others.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
<https://reviews.apache.org/r/2817/#comment7831>

    This is no longer needed.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
<https://reviews.apache.org/r/2817/#comment7833>

    break line



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java
<https://reviews.apache.org/r/2817/#comment7834>

    There's no point in having 2 factory methods here. Merge them.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java
<https://reviews.apache.org/r/2817/#comment7835>

    This is only used in one class, and isn't quite a callback either, so I think it should be a private class of HierarchicalLedgerManager. 



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7836>

    typo (existing)
    
    Remove said from these lines. instead, put zkActiveLedgers in brackets. i.e.
    
    Fetch all existing ledgers from zookeeper (*zkActiveLedgers*).



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7837>

    Fetch all ledgers currently active within the Bookie (*bkActiveLedger*).



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7838>

    to find those ledgers which do not exist in *zkActiveLedgers* and garbage collect them.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7839>

    which avoids the problem of the child list being larger than the maximum ZooKeeper packet size.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7840>

    manages its active ledgers in a sorted map, which simplifies access to active ledgers in a particular (level1, level2) partition.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7841>

    as follows.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7842>

    belonging
    
    Again, remove said and put *zkActiveLedgers* in round brackets.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7843>

    Fetch all ledgers currently active in the bookie which belong to partition (level1, level2) (*bkActiveLedgers*).



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7844>

    those ledgers which do not exist in *zkActiveLedgers*, and garbage collect them.



http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
<https://reviews.apache.org/r/2817/#comment7845>

    Hierarchical


- Ivan


On 2011-11-25 09:13:10, Sijie Guo wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/2817/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-11-25 09:13:10)
bq.  
bq.  
bq.  Review request for bookkeeper.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Create a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers'. Implement this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.
bq.  
bq.  
bq.  This addresses bug BOOKKEEPER-39.
bq.      http://issues.apache.org/jira/browse/BOOKKEEPER-39
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1206076 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalAsyncLedgerOpsTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieFailureTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieReadWriteTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieRecoveryTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalLedgerDeleteTest.java PRE-CREATION 
bq.    http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile 1206076 
bq.  
bq.  Diff: https://reviews.apache.org/r/2817/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Sijie
bq.  
bq.

","25/Nov/11 12:07;jiraposter@reviews.apache.org;
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/2817/
-----------------------------------------------------------

(Updated 2011-11-25 12:07:01.587157)


Review request for bookkeeper.


Changes
-------

update new patch fixing typos.


Summary
-------

Create a interface LedgerManager to handle 'how to store ledger meta in zookeeper, how bookie server manages active ledgers and garbage collect those inactive/deleted ledgers'. Implement this interface using hash mechanism, which hides detail from client/server code and makes code more clearer.


This addresses bug BOOKKEEPER-39.
    http://issues.apache.org/jira/browse/BOOKKEEPER-39


Diffs (updated)
-----

  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java 1206076 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalAsyncLedgerOpsTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieFailureTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieReadWriteTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalBookieRecoveryTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/hierarchical/HierarchicalLedgerDeleteTest.java PRE-CREATION 
  http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile 1206076 

Diff: https://reviews.apache.org/r/2817/diff


Testing
-------


Thanks,

Sijie

","25/Nov/11 18:59;ikelly;I was being stupid when I said to removed LedgerLayout. I misunderstood what it was :/ It's actually very important. I've uploaded a new patch to JIRA which adds it back in. Could you take a look over my changes. Otherwise, this patch is good to go, though I do want to check that it doesn't affect performance which ill do first thing on monday.","27/Nov/11 13:29;hustlmsp;I have checked new changes. The changes are OK for me.
Thanks, Ivan.","28/Nov/11 12:17;ikelly;Cool, this patch looks good to me in that case. +1
I'm currently running a few benchmarks to ensure performance doesn't degrade. I don't think it will affect performance. Once they're finished, Ill commit this.","28/Nov/11 18:29;ikelly;Benchmark shows that the change has no affect on performance. Numbers attached.

Committed as r1207495. 

","28/Nov/11 18:46;hudson;Integrated in bookkeeper-trunk #244 (See [https://builds.apache.org/job/bookkeeper-trunk/244/])
    BOOKKEEPER-39: Bookie server failed to restart because of too many ledgers (more than ~50,000 ledgers) (Sijie via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Main.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalAsyncLedgerOpsTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieFailureTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieReadWriteTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
",29/Nov/11 02:14;hustlmsp;the benchmark number is cool. thanks Ivan.,"08/Jun/16 07:37;wateray;Is 50,000 (the title said) ledgers or 500,000(the description said), Which one is correct? By the way,how many ledgers can one bookkeeper cluster  hold? The bottleneck is zookeeper? ","08/Jun/16 08:15;eolivelli;An Hedwig topic is not a ledger.

Any way, if you need to have meany active ledgers at a time you have to use the HierarchicalLedgerManager, because of ZooKeeper limits",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie Server doesn't exit when its zookeeper session is expired. So the process is hang there.,BOOKKEEPER-38,12518176,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,08/Aug/11 06:53,07/Dec/11 15:56,14/Mar/19 02:39,23/Aug/11 22:39,4.0.0,,4.0.0,,,bookkeeper-server,,,0,,"Bookie server doesn't process zookeeper watcher events and just ignore them. So when session expires, bookie server hangs there and can't do nothing.",,,,,,,,,,,,,,,,,,,10/Aug/11 16:29;ikelly;BookieZKExpireTest.java;https://issues.apache.org/jira/secure/attachment/12489999/BookieZKExpireTest.java,08/Aug/11 09:06;hustlmsp;bookkeeper-38.patch;https://issues.apache.org/jira/secure/attachment/12489665/bookkeeper-38.patch,11/Aug/11 05:12;hustlmsp;bookkeeper-38_v2.patch;https://issues.apache.org/jira/secure/attachment/12490077/bookkeeper-38_v2.patch,12/Aug/11 16:24;hustlmsp;bookkeeper-38_v3.patch;https://issues.apache.org/jira/secure/attachment/12490267/bookkeeper-38_v3.patch,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2011-08-10 16:29:00.431,,,no_permission,,,,,,,,,,,,,63982,,,Tue Aug 23 22:39:35 UTC 2011,,,,,,0|i0u5pr:,174067,,,,,,,,"08/Aug/11 06:54;hustlmsp;Since all the ephemeral nodes associated with the expired zk handle are all go away, it might be complex to recover from this fatal status. It might be better to handle these events and exit when zookeeper session is expired.",08/Aug/11 09:06;hustlmsp;add code to call shutdown function when zk client is expired.,10/Aug/11 01:18;hustlmsp;submit patch.,"10/Aug/11 16:29;ikelly;Patch looks good. However, you increase the standard timeout of the bookie from 10000 to 60000. Is this intentional? 

I've attached a test case to ensure that this functionality works as proposed. Could you integrate it with your patch.

Could you perhaps make the timeout into a constant or system property so that the test can use it. I've used 10000 in my test as.","11/Aug/11 04:15;hustlmsp;Ivan, thanks for your test case.

attached a new patch:
integrated with Ivan's test case.
change code to using BookieServer.shutdown(), so we can shutdown nio server.","12/Aug/11 11:40;ikelly;I don't like the idea of Bookie getting a reference to to BookieServer. This creates a circular dependency. Off the top of my head, I think it would be better to have a deathwatcher thread running in BookieServer. 

{code}
class DeathWatcher extends Thread {
   public void run() {
      while (true) {
          Thread.sleep(1000);
          if (!nioServerFactory.isAlive() || !bookie.isAlive()) {
             shutdown();
             break;
          }
      }
   }
}
{code}

BookieServer#shutdown would need to be synchronized to avoid race problems here. Bookie#shutdown and NioServerFactory#shutdown also in fact. This shouldn't affect performance at all though, as they on run on shutdown by definition.","12/Aug/11 16:24;hustlmsp;Ivan, I agreed with you. I would change the patch.","23/Aug/11 22:39;breed;+1 excellent work Sijie

Committed revision 1160915.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieRecoveryTest fails intermittently,BOOKKEEPER-29,12512230,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Jun/11 15:35,07/Dec/11 15:56,14/Mar/19 02:39,11/Aug/11 19:38,,,4.0.0,,,,,,0,,"The failure doesn't hit every time. You have to run, multiple times. From bookkeeper-server, run mvn test -Dtest=BookieRecoveryTest multiple times to repro.
Test output is attached.

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.bookkeeper.test.BookieRecoveryTest
log4j:WARN No appenders could be found for logger (org.apache.bookkeeper.test.BaseTestCase).
log4j:WARN Please initialize the log4j system properly.
Tests run: 8, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 6.794 sec <<< FAILURE!

Results :

Tests in error: 
  testAsyncBookieRecoveryToSpecificBookie[1](org.apache.bookkeeper.test.BookieRecoveryTest)

Tests run: 8, Failures: 0, Errors: 1, Skipped: 0

",,,,,,,,,,,,,,,,,,,03/Aug/11 23:50;ikelly;BK-29.diff;https://issues.apache.org/jira/secure/attachment/12489274/BK-29.diff,03/Aug/11 23:49;ikelly;BK-29.diff;https://issues.apache.org/jira/secure/attachment/12489273/BK-29.diff,02/Aug/11 22:21;ikelly;BK-29.diff;https://issues.apache.org/jira/secure/attachment/12489126/BK-29.diff,02/Aug/11 06:10;ikelly;BK-29.diff;https://issues.apache.org/jira/secure/attachment/12488857/BK-29.diff,11/Aug/11 09:09;fpj;BOOKKEEPER-29-v2.patch;https://issues.apache.org/jira/secure/attachment/12490096/BOOKKEEPER-29-v2.patch,11/Aug/11 18:52;ikelly;BOOKKEEPER-29.diff;https://issues.apache.org/jira/secure/attachment/12490155/BOOKKEEPER-29.diff,11/Aug/11 18:41;ikelly;BOOKKEEPER-29.diff;https://issues.apache.org/jira/secure/attachment/12490154/BOOKKEEPER-29.diff,11/Aug/11 18:29;ikelly;BOOKKEEPER-29.diff;https://issues.apache.org/jira/secure/attachment/12490151/BOOKKEEPER-29.diff,11/Aug/11 16:05;ikelly;BOOKKEEPER-29.patch;https://issues.apache.org/jira/secure/attachment/12490127/BOOKKEEPER-29.patch,05/Aug/11 04:41;fpj;BOOKKEEPER-29.patch;https://issues.apache.org/jira/secure/attachment/12489440/BOOKKEEPER-29.patch,04/Aug/11 06:03;fpj;BOOKKEEPER-29.patch;https://issues.apache.org/jira/secure/attachment/12489319/BOOKKEEPER-29.patch,29/Jun/11 15:36;ikelly;org.apache.bookkeeper.test.BookieRecoveryTest.txt;https://issues.apache.org/jira/secure/attachment/12484652/org.apache.bookkeeper.test.BookieRecoveryTest.txt,,,,,12.0,,,,,,,,,,,,,,,,,,,2011-08-02 20:59:50.264,,,no_permission,,,,,,,,,,,,,65333,,,Thu Aug 11 19:38:50 UTC 2011,,,,,,0|i0u5d3:,174010,,,,,,,,"01/Aug/11 16:48;ikelly;while [ $? = 0 ]; do mvn test -Dtest=BookieRecoveryTest; done

this should repro it.","02/Aug/11 06:10;ikelly;The problem was in the test. The tests created a bunch of bookies, and wrote a load of entries and failed the server. They then created a new server and tried to verify the recovered ledger. The problem was that there was no time between creating the server and trying to verify, which meant that the watcher on the client may not have been updated with the full bookie list. This meant that a full ensemble could not be built and the test failed at that point. This patch fixes that by moving the creation of the new server to earlier in the test, before the entries are written but after the initial ledger handle is created.","02/Aug/11 20:59;fpj;It's nice that you've been able to find the problem, Ivan. Two comments:

# It doesn't look like moving the start of a new bookie up solves completely the problem, since we are still not sure that the bookie has registered. It is true that we are giving more time, but in my understanding we are just reducing the chance that it happens and not eliminating it. We probably need to watch the list of bookies on ZooKeeper to be able to determine when the list changes;
# There is a change to the log4j.properties that shouldn't be there. ","02/Aug/11 22:21;ikelly;1. The scenario is something that should never happen in the wild. Usually a cluster will be have all machines started before the failure even happens. The only reason the recovery server is started later in this case is so that it doesn't become part of the original ensemble. 

I think just putting the start server earlier is enough, because there are many calls to bk after this. This mean the test thread will be preempted and the zk watcher thread will get a chance to run, updating the available server lists. 

The other option may be to do zk sync explicitly after the newServer call. I don't think it add anything though.

2. this is a mistake, i generated the patch wrong. reattached a new one. ","02/Aug/11 23:06;fpj;We shouldn't expect to have all servers from time zero. One of the reasons why we get bookies available through zookeeper is exactly to have the ability to remove and add servers dynamically.

As for how to fix it, I was thinking that we could set a watch on the bookies znode before starting the bookie, and blocking until we get the notification. How does it sound to you? ","03/Aug/11 05:05;ikelly;{quote}
We shouldn't expect to have all servers from time zero. One of the reasons why we get bookies available through zookeeper is exactly to have the ability to remove and add servers dynamically.
{quote}
Well, I don't exactly expect them to exist from time zero as such. But I would expect them to exist before the failure. A scenario where you add a bookie after a failure and expect the recovery to be seamless seems unrealistic to me.

{quote}
As for how to fix it, I was thinking that we could set a watch on the bookies znode before starting the bookie, and blocking until we get the notification. How does it sound to you? {quote}
There already exists a watch on the bookie znodes, the bookie watcher on the client. I dont know how to wait on the notification without making the bookie watcher public. However, the zk.sync() i mentioned in my previous comment could be functionally equivalent, no?","03/Aug/11 22:38;ikelly;Sync solution doesn't work. I added 
{code}

        final CountDownLatch latch = new CountDownLatch(1);
        bkc.getZkHandle().sync(""/"", new VoidCallback() {
                public void processResult(int rc, String path, Object ctx) {
                    latch.countDown();
                }
            }, null);
        latch.await();

{code}

to #startNewBookie (I left the calls to this method in their original places). It doesn't ensure the watcher is run. 

Im trying with simply Thread.yield() to see if that does any better.","03/Aug/11 23:49;ikelly;yield yields no success either. I've attached a patch which reaches explicitly into the bookiewatcher now. Its a bit hacky, but it will guarantee that the available bookie list is updated.","03/Aug/11 23:50;ikelly;yield yields no success either. I've attached a patch which reaches explicitly into the bookiewatcher now. Its a bit hacky, but it will guarantee that the available bookie list is updated.","04/Aug/11 06:05;fpj;I'm proposing a different way of doing it with this new patch. In each test, we set a watch on /ledgers/available to see when the new bookie is added. To make sure that we get the right change, we have to also wait until the crashed bookie is removed.","04/Aug/11 17:06;ikelly;looks good to me, could you remove the commented out imports at the top of the patch and ill commit it.","05/Aug/11 04:41;fpj;Thanks for reviewing it, Ivan. I have removed the commented imports. ",10/Aug/11 10:38;ikelly;+1 committed @1156096,"11/Aug/11 08:57;fpj;This test still fails for me intermittently, but I think I have been able to nail it down. The main problem seems to be with BookieWatcher. To obtain a new bookie for an open ledger, we request it from BookieWatcher. It is possible, though, that we see a new bookie registered with ZooKeeper (as in stateNewBookie), but the notification of the change in ZooKeeper has not been processed by BookieWatcher yet. In this case, we close the ledger because we can't get a new bookie, and the test fails.

To solve this problem, we need to force an update to the list of the BookieWatcher object.","11/Aug/11 09:09;fpj;This patch does a few things:

- It adds a call to BookKeeper to enable updates to the list of a BookieWatcher object from a test;
- It makes sure that the change in the list of bookies is the one we expect by checking continuously if the corresponding znode exists. This change actually simplifies the code of the test;
- It also moves the call to instantiateZookeeperClient in the constructor of Bookie to after the initialization of the Bookie. This way we make sure that the bookie is ready to answer once it has registered with zookeeper.","11/Aug/11 16:05;ikelly;1. Removed public method from BookKeeper

2. Removed redundant calls to new BookKeeper in Bookie. Its already done by the base class.

3. Added synchronization on PerChannelBookieClient#connect


I ran this patch in a loop for 3 hours at while point it hit the netty cleanup hang. 2. & 3. should help with this, though it's hard to find the root cause as a repro takes 3 hours. 

",11/Aug/11 18:29;ikelly;Uploaded wrong patch last time. This one is correct.,11/Aug/11 18:41;ikelly;Rebased after BOOKKEEPER-33 committed.,11/Aug/11 18:52;ikelly;Missed a conflict with BOOKKEEPER-33. ,"11/Aug/11 19:38;fpj;+1, I have just committed this one. Committed revision 1156766.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create useful startup scripts for bookkeeper and hedwig,BOOKKEEPER-28,12512212,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Jun/11 12:33,07/Dec/11 15:56,14/Mar/19 02:39,30/Aug/11 08:47,,,4.0.0,,,,,,0,,"hedwig's current startup script is messy. bookkeeper doesn't even have one. They should be created before initial release 

bookkeeper-server/bin/bookkeeper
hedwig-server/bin/hedwig

",,,,,,,,,,,,,,,,,,,10/Aug/11 14:18;ikelly;BOOKKEEPER-28.diff;https://issues.apache.org/jira/secure/attachment/12489981/BOOKKEEPER-28.diff,29/Jun/11 16:35;ikelly;BOOKKEEPER-28.diff;https://issues.apache.org/jira/secure/attachment/12484661/BOOKKEEPER-28.diff,29/Jun/11 16:31;ikelly;BOOKKEEPER-28.diff;https://issues.apache.org/jira/secure/attachment/12484660/BOOKKEEPER-28.diff,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2011-07-31 00:42:24.393,,,no_permission,,,,,,,,,,,,,63206,,,Tue Aug 30 08:47:49 UTC 2011,,,,,,0|i0u5jz:,174041,,,,,,,,"29/Jun/11 16:31;ikelly;Applies on top of BOOKKEEPER-27 . I've added two scripts. mvn package must be run before running the script. Once the jars have been created the scripts should work out of the box. Calling the script on it's own will give you some doc.

Also, I've added some conf for generating packages in this patch, as the scripts need to work for a svn checkout and a download of a release package.

./bookkeeper-benchmark/target/bookkeeper-benchmark-3.4.0-SNAPSHOT-release.tar.gz
./bookkeeper-server/target/bookkeeper-server-3.4.0-SNAPSHOT-release.tar.gz
./hedwig-client/target/hedwig-client-3.4.0-SNAPSHOT-release.tar.gz
./hedwig-protocol/target/hedwig-protocol-3.4.0-SNAPSHOT-release.tar.gz
./hedwig-server/target/hedwig-server-3.4.0-SNAPSHOT-release.tar.gz
./target/bookkeeper-3.4.0-SNAPSHOT-release.tar.gz

Are now generated on mvn package. These should run as standalone packages. They should also build, though they will require dependent components to be in a maven repo which is not the case yet.",29/Jun/11 16:35;ikelly;Removed the old scripts directory. ,"31/Jul/11 00:42;fpj;Ivan, Three comments:

# Should we consider adding instructions on how to use the scripts to the documentation?
# You're removing the current Hedwig scripts, but the ones you're adding do not seem to have all the functionality of the ones you're removing. Could explain why you think this is ok?
# Could you give a little more detail on what the changes to pom.xml are supposed to do?

","10/Aug/11 14:18;ikelly;1.
I've added documentation now and removed the documentation for hw.bash. A lot of the documentation referred to a benchmark application which doesn't exist in the source tree, so I removed it. 

2.
hw.bash does a whole load of things. It downloads zk & bk. This will be unnecessary once zk 3.4.0 is released, which our 3.4.0 release is predicated on. It sets up java. I think we should assume that people who want to run bookkeeper/hedwig already have java. It sets up yourkit, but assumes a hardcoded location. It's easier just to run <yourkit>/bin/yjp.sh -attach. It has a custom command for changing logging levels. The scripts I attached allow you to specify a custom log4j.properties at runtime. Lastly, it sets up ssh keys, sudo, limits etc. This is downright dangerous to allow a script to do. 

3. I've removed most of the pom.xml changes as they refer to the packaging. I'll open another JIRA for them. The one thing I have removed is the automatic generation of giant jars with all dependencies. With the scripts these are not required to run bookkeeper or hedwig. For redistribution we the packaging jira I just mentioned will package the dependencies in a way that the scripts can pick them up.","15/Aug/11 21:29;fpj;+1, looks good to me. I was wondering if someone with more experience on Hedwig can have a look at the scripts being removed to make sure it is ok, Utkarsh?",30/Aug/11 08:47;ikelly;committed as r1163137. Thanks for reviewing Flavio.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mvn site failed with unresolved dependencies,BOOKKEEPER-27,12512200,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Jun/11 11:11,07/Dec/11 15:56,14/Mar/19 02:39,30/Jul/11 23:59,,,4.0.0,,,,,,0,,"This stops javadoc from being generated.

[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building hedwig-protocol 3.4.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-site-plugin:2.0.1:site (default-site) @ hedwig-protocol ---
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building hedwig-client 3.4.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] bookkeeper ........................................ SUCCESS [10.312s]
[INFO] hedwig-protocol ................................... SUCCESS [0.111s]
[INFO] hedwig-client ..................................... FAILURE [0.399s]
[INFO] bookkeeper-server ................................. SKIPPED
[INFO] hedwig-server ..................................... SKIPPED
[INFO] bookkeeper-benchmark .............................. SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11.104s
[INFO] Finished at: Wed Jun 29 13:10:10 CEST 2011
[INFO] Final Memory: 8M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal on project hedwig-client: Could not resolve dependencies for project org.apache.bookkeeper:hedwig-client:jar:3.4.0-SNAPSHOT: Could not find artifact org.apache.bookkeeper:hedwig-protocol:jar:3.4.0-SNAPSHOT -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException
[ERROR] 
[ERROR] After correcting the problems, you can resum",,,,,,,,,,,,,,,,,,,28/Jul/11 17:23;ikelly;BOOKKEEPER-27.diff;https://issues.apache.org/jira/secure/attachment/12488116/BOOKKEEPER-27.diff,29/Jun/11 16:26;ikelly;BOOKKEEPER-27.diff;https://issues.apache.org/jira/secure/attachment/12484658/BOOKKEEPER-27.diff,29/Jun/11 15:30;ikelly;BOOKKEEPER-27.diff;https://issues.apache.org/jira/secure/attachment/12484651/BOOKKEEPER-27.diff,29/Jun/11 12:24;ikelly;BOOKKEEPER-27.diff;https://issues.apache.org/jira/secure/attachment/12484630/BOOKKEEPER-27.diff,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2011-07-27 01:19:32.496,,,no_permission,,,,,,,,,,,,,66612,,,Sat Jul 30 23:59:12 UTC 2011,,,,,,0|i0u5dj:,174012,,,,,,,,29/Jun/11 12:24;ikelly;javadoc now builds in target/site/apidocs,29/Jun/11 15:30;ikelly;Old patch actually broke build from clean. This fixes it. You have to run mvn install for mvn site to work now.,29/Jun/11 16:26;ikelly;forgot the --no-prefix when generating the patch,"27/Jul/11 01:19;fpj;Ivan, the latest patch does not apply to trunk, but the conflict seems to be small. In pom.xml, it expects to replace <type>pom</type> with <type>jar</type>, but the former is not there. Do we really need that line?",28/Jul/11 17:23;ikelly;Regenerated on latest trunk.,"30/Jul/11 23:59;fpj;+1, thanks, Ivan. Committed revision 1152529.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception in LedgerCache causes addEntry request to fail,BOOKKEEPER-22,12508945,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,fpj,fpj,01/Jun/11 11:31,07/Dec/11 15:56,14/Mar/19 02:39,06/Jun/11 15:50,,,4.0.0,,,,,,0,,"The following exception causes a client to stall:

{noformat}
WARN  - [NIOServerFactory:NIOServerFactory@123] - Exception in server socket loop: /0.0.0.0
java.util.NoSuchElementException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:796)
        at java.util.HashMap$EntryIterator.next(HashMap.java:834)
        at java.util.HashMap$EntryIterator.next(HashMap.java:832)
        at org.apache.bookkeeper.bookie.LedgerCache.grabCleanPage(LedgerCache.java:429)
        at org.apache.bookkeeper.bookie.LedgerCache.putEntryOffset(LedgerCache.java:133)
        at org.apache.bookkeeper.bookie.LedgerDescriptor.addEntry(LedgerDescriptor.java:84)
        at org.apache.bookkeeper.bookie.Bookie.addEntry(Bookie.java:477)
        at org.apache.bookkeeper.proto.BookieServer.processPacket(BookieServer.java:108)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.readRequest(NIOServerFactory.java:309)
        at org.apache.bookkeeper.proto.NIOServerFactory$Cnxn.doIO(NIOServerFactory.java:207)
        at org.apache.bookkeeper.proto.NIOServerFactory.run(NIOServerFactory.java:118)

{noformat}

The client  remains connected to the bookie, but never receives a response to the addEntry, causing the client pipeline to stall.",,,,,,,,,,,,,,,,,,,06/Jun/11 13:49;fpj;BOOKKEEPER-22.patch;https://issues.apache.org/jira/secure/attachment/12481567/BOOKKEEPER-22.patch,01/Jun/11 19:15;fpj;BOOKKEEPER-22.patch;https://issues.apache.org/jira/secure/attachment/12481132/BOOKKEEPER-22.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-06-06 14:59:32.698,,,no_permission,,,,,,,,,,,,,69756,,,Mon Jun 06 15:50:21 UTC 2011,,,,,,0|i0u4mn:,173891,,,,,,,,"01/Jun/11 19:15;fpj;Uploading a preliminary patch that solves this problem, but does not include a test yet.","06/Jun/11 13:49;fpj;Includes a test, which fails if we remove the fix in grabCleanPage. The test essentially stresses the ledger page cache mechanism by creating a large number of ledgers.",06/Jun/11 14:59;breed;+1 looks good!,"06/Jun/11 15:50;fpj;Thanks, Ben. Committed revision 1132682.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper doesn't support more than 2Gig of memory,BOOKKEEPER-19,12507612,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,18/May/11 12:55,09/Nov/11 15:53,14/Mar/19 02:39,20/May/11 14:15,,,4.0.0,,,,,,0,,"From LedgerCache.java
    private static int pageLimit = (int)(Runtime.getRuntime().maxMemory() / 3) / LedgerEntryPage.PAGE_SIZE;

pageLimit will be negative is maxMemory is 2^31 or more. This causes exceptions later on when pageLimit is used.",,,,,,,,,,,,,,,,,,,18/May/11 13:01;ikelly;BOOKKEEPER-19.diff;https://issues.apache.org/jira/secure/attachment/12479579/BOOKKEEPER-19.diff,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-18 15:22:50.886,,,no_permission,,,,,,,,,,,,,69757,,,Wed May 25 20:34:19 UTC 2011,,,,,,0|i0u5kf:,174043,,,,,,,,18/May/11 13:01;ikelly;Simple fix. Also fixed a style error as pageCount was never initialised.,"18/May/11 13:36;ikelly;Actually, maxMemory >= 6G is the problem as we divide by 3. Writing a test for this would be a pain, as it a) requires everyone to have 8G memory, and b) requires a custom launcher for the jvm.",18/May/11 15:22;breed;+1 looks good. i agree that writing a test would be a pain.,"18/May/11 15:23;fpj;+1, good catch and the patch looks good!",20/May/11 14:15;fpj;Committed revision 1125406.,25/May/11 20:13;breed;this should have been marked resolved not closed :),25/May/11 20:34;breed;testing the mailing list.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven build is unstable,BOOKKEEPER-18,12507383,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,morel,morel,16/May/11 16:40,07/Dec/11 15:56,14/Mar/19 02:39,29/Aug/11 17:34,,,4.0.0,,,,,,0,,"When checking out from trunk, and after installing zookeeper and zookeeper test artifacts in the local maven repo, and compiling protocol buffers, the build does not work out of the box (either mvn package or mvn -fae test).

I had to modify several files for managing to run the build without issues.

These modifications are included in the attached patch.
",,,,,,,,,,,,,,,,,,,10/Aug/11 14:58;ikelly;BOOKKEEPER-18.diff;https://issues.apache.org/jira/secure/attachment/12489987/BOOKKEEPER-18.diff,01/Jun/11 11:06;ikelly;BOOKKEEPER-18.diff;https://issues.apache.org/jira/secure/attachment/12481061/BOOKKEEPER-18.diff,16/May/11 16:42;morel;fixes_for_build_to_complete_successfully.patch;https://issues.apache.org/jira/secure/attachment/12479344/fixes_for_build_to_complete_successfully.patch,01/Jun/11 11:06;ikelly;zookeeper-3.4.0-test.jar;https://issues.apache.org/jira/secure/attachment/12481062/zookeeper-3.4.0-test.jar,01/Jun/11 11:06;ikelly;zookeeper-3.4.0.jar;https://issues.apache.org/jira/secure/attachment/12481063/zookeeper-3.4.0.jar,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2011-06-01 11:06:52.79,,,no_permission,,,,,,,,,,,,,63353,,,Mon Aug 29 17:34:45 UTC 2011,,,,,,0|i0u5kv:,174045,,,,,,,,16/May/11 16:42;morel;patch with build modifications,"01/Jun/11 11:06;ikelly;Apply BOOKKEEPER-18.diff and put both jars in the newly created lib/ directory. 

Make lib/installdeps.sh executable. Run installdeps.sh to install zookeeper. This step should go away after Zookeeper 3.4.0 release.

From this point, mvn package should run without errors on a clean machine.

Other changes are:
   - Removed automatic invokation of protoc (it should only run when proto spec changes)
   - Fixed inter pom dependencies
   - Cleaned up inter pom version numbers
   - Added log4j.properties for test.

Once submitted BOOKKEEPER-20 should cease to be an issue.","10/Aug/11 14:58;ikelly;Most of the problems the original patch solved were addressed in other JIRAs. This patch simply cleans up the versions in poms, so that less changes need to be made each release, and removed the requirement that everyone who builds have protoc installed. The generated file is now committed to svn. It shouldn't change unless someone changes the protocol. The autogenerated file can be run with  mvn antrun:run in hedwig-protocol/.",15/Aug/11 15:28;breed;+1 looks good,29/Aug/11 17:34;ikelly;Committed as r1162913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with Netty in BookKeeper,BOOKKEEPER-5,12499276,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,fpj,fpj,21/Feb/11 20:55,07/Dec/11 15:56,14/Mar/19 02:39,30/Aug/11 07:49,,,4.0.0,,,,,,0,,"In one my experiments, I found that a BookKeeper object was locked after I tried to halt it. By searching the Web, I found that the issue is described here:

http://www.jboss.org/netty/community.html#nabble-td5492010

I'll upload a patch to fix it. For now, I'm marking it for 3.4.0, but if there is any chance we can get it in 3.3.3, it would be nice.",,,,,,,,,,,,,,,,,,,12/Aug/11 11:23;ikelly;BOOKKEEPER-5.diff;https://issues.apache.org/jira/secure/attachment/12490234/BOOKKEEPER-5.diff,28/Jun/11 19:50;ikelly;BOOKKEEPER-5.diff;https://issues.apache.org/jira/secure/attachment/12484492/BOOKKEEPER-5.diff,20/Jun/11 08:32;ikelly;BOOKKEEPER-5.diff;https://issues.apache.org/jira/secure/attachment/12483123/BOOKKEEPER-5.diff,17/Jun/11 17:30;ikelly;BOOKKEEPER-5.diff;https://issues.apache.org/jira/secure/attachment/12482959/BOOKKEEPER-5.diff,16/Jun/11 16:56;fpj;BOOKKEEPER-5.patch;https://issues.apache.org/jira/secure/attachment/12482822/BOOKKEEPER-5.patch,15/Jun/11 22:44;fpj;BOOKKEEPER-5.patch;https://issues.apache.org/jira/secure/attachment/12482731/BOOKKEEPER-5.patch,21/Feb/11 21:03;fpj;ZOOKEEPER-998.patch;https://issues.apache.org/jira/secure/attachment/12471577/ZOOKEEPER-998.patch,,,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2011-02-21 21:33:28.145,,,no_permission,,,,,,,,,,,,,63264,,,Tue Aug 30 07:49:03 UTC 2011,,,,,,0|i0fuf3:,90526,,,,,,,,"21/Feb/11 21:33;hadoopqa;-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12471577/ZOOKEEPER-998.patch
  against trunk revision 1072085.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/154//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/154//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/154//console

This message is automatically generated.","24/Feb/11 22:33;hadoopqa;-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12471577/ZOOKEEPER-998.patch
  against trunk revision 1072085.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/157//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/157//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/157//console

This message is automatically generated.","15/Mar/11 17:20;fpj;It is still halting, so I'm canceling for now.",15/Jun/11 22:44;fpj;Preliminary patch to fix this problem. It does not include a test yet.,"16/Jun/11 16:56;fpj;Patch with test. The patch essentially introduces a ChannelGroup as the Netty documentation suggests:

http://docs.jboss.org/netty/3.2/api/org/jboss/netty/channel/ChannelFactory.html
","17/Jun/11 10:15;ikelly;Is the locking on the object the same as the locking in the netty thread you posted? 

I think the reason this patch works is that you call .awaitUninterruptibly() on the channel group. You could just do awaitingUninterruptibly() on the channel.close call in PerChannelBookieClient#close for the same effect. Also, the fact that you call close on the group rather than the individual channels means PerChannelBookieClient#close gets bypassed completely, which could be a potential source of bugs, as someone could put cleanup in there that never gets called. 

Who calls the halt() code in the test code? It might be a good idea to move the releaseExternalResources() call into a new thread to allow halt to be called from callbacks. 
{code}
  public void halt() throws InterruptedException {
    bookieClient.close();
    bookieWatcher.halt();
    if (ownChannelFactory) {
      new Thread() {
        public void run() {
          channelFactory.releaseExternalResources();
        }
      }.start();
    }
    if (ownZKHandle) {
      zk.close();
    }
    callbackWorker.shutdown();
    mainWorkerPool.shutdown();
  }
{code}

Also, indentation in general is inconsistent over BK, 4 space in some places, 2 space in others. We should standardize. It may even be a good idea to go through the whole tree and reindent now, rather than later when such an action would destroy history (we currently don't have very much history since the split). 

Finally, I think halt() should be called close(). halt() seems to imply that the bookkeeper service is being stopped, not that you're just closing your connection to it.

","17/Jun/11 10:44;fpj;The trunk code in BookiClient.close() is this:

{noformat}
for (PerChannelBookieClient channel: channels.values()){
            channel.close();
        }
{noformat}

and I have just replaced it with channelGroup.close(). The documentation of ChannelFactory says:

{noformat}
Graceful shutdown

To shut down a network application service which is managed by a factory. you should follow the following steps:

   1- close all channels created by the factory and their child channels usually using ChannelGroup.close(), and
   2- call releaseExternalResources().
{noformat}

and if you look at the ChannelGroup documentation, I'm just using the way they suggest. Finally, in my understanding of awaitUninterruptibly() is that the thread waits and can't be interrupted.

On the test, BookKeeper.halt() is invoked from the tearDown method of BaseTestCase, which the test class extends. I tried applying only the new test, and it hangs on my computer. 

",17/Jun/11 10:44;fpj;Until issues brought up are resolved.,"17/Jun/11 12:53;ikelly;BookieClient has a list of PerChannelBookieClient which in turn holds the netty Channel. My concern is that, by using ChannelGroup, PerChannelBookieClient#close is bypassed completely. Its not a problem now, as all it does it close the channel, but if in future it is used, it will never be called. I think the core of the problem is that it introduces an asymmetry in the lifetime management of the Channel object. PerChannelBookieClient creates it, but BookieClient destroys it.

My understanding of awaitUninterruptibly() is the same, and I think that is where the bug was. Since channel.close() is called but not awaited on, the thread moves on and calls releaseExternalResources() while the close is possibly still in progress.","17/Jun/11 13:01;fpj;I'm not sure I understand why you're saying that PerChannelBookieClient#close is bypassed completely. The original trunk code only calls close on the channel of a PerChannelBookieClient. According to the documentation of ChannelGroup, calling close on it causes it to close all channels in the group. I believe the change I'm proposing achieves the same behavior, no?

Perhaps you're saying that we should just call awaitUninterruptibly() on every PerChannelBookieClient#close instead of creating a channel group? I think it should work.","17/Jun/11 13:39;ikelly;The original code in BookieClient is:

{code}
    public void close(){
        for (PerChannelBookieClient channel: channels.values()){
            channel.close();
        }
    }
{code}

which called close on PerChannelBookieClient, not just its channel. The names are confusing and should be changed.

{quote}
Perhaps you're saying that we should just call awaitUninterruptibly() on every PerChannelBookieClient#close instead of creating a channel group? I think it should work. 
{quote}
Yup, this is what I was suggesting.",17/Jun/11 13:42;fpj;Sounds good to me. I'll fix and propose a new patch.,"17/Jun/11 17:30;ikelly;Problem was a race between the creation/connection of channels in BookieClient#lookupClient. This meant a client was created, connection and discarded, and therefore never closed. 

This patch defers connection until the channel has been safely put into the channels hashmap.","18/Jun/11 12:06;fpj;Good catch, Ivan. It is actually not even necessary to connect before invoking an operation, since we call connectIfNeededAndDoOp() upon every addEntry and readEntry. It works even without the else block in your version of the patch. There are also a few other changes unrelated to this issue, like a change to pom.xml and fixed typos. Do you want those to get in or they ended up there by accident?",20/Jun/11 08:32;ikelly;They were uncommitted changes. I've regenerated the patch to only include whats committed.,"28/Jun/11 04:52;breed;if i understand this patch correctly, there are two big fixes:

1) we wait for close to complete
2) we proactively initiate a connection on lookup

was 1) really causing a problem?

the rest is really just cleanup right?

it looks like all of the additions to BookKeeper.java are just debug messages that should be removed.

other than these small items the patch looks good.

","28/Jun/11 10:51;fpj;On 1): According to the discussions I found online about this problem with Netty, if the thread is interrupted while waiting on close, then it can go into an infinite loop. Honestly, I didn't spend time trying to understand what exactly is the problem with netty, only that folks recommend to do it in the way we have in the patch, which makes a difference.

The real problem, though, is that we were creating new channels, but not keeping track of the, so when shutting down, we were not closing those channels and triggering the netty problem. 

I rarely have a good sense of where log messages have to be inserted, but I do find useful to say what we are shutting down when we call halt() in the BookKeeper object. Since these messages only appear when we shut down the object, I don't see a problem with keeping them, but at the same time I don't feel strongly about removing them if you feel they are unnecessary. ","28/Jun/11 13:44;breed;i'm fine with 1). we do need to either remove those messages or change them to debug especially since this is a client library. on the server being verbose only messes up the server log, but on the client it can be really annoying for the client application.","28/Jun/11 19:50;ikelly;Removed trace statements
",01/Jul/11 15:06;breed;+1 looks good,07/Jul/11 14:38;fpj;Thanks Ivan for working on the patch and Ben for reviewing it. Committed revision 1143850.,"11/Aug/11 18:35;ikelly;This issue still seems to be hitting if you run for long enough. To repro, 

true; while [ $? = 0 ]; do mvn test -Dtest=BookieReadWriteTest; done

Leave this running for 5-6 hours, and the bug should hit. From looking at the code it could be that connect is unsynchronized, so resources could be allocated and lost by concurrent executions of connect(). I'm currently testing a patch to see if this is the case.","12/Aug/11 11:23;ikelly;I've attached a patch to fix this. I'm not sure how to proceed procedurally with this though, as the original fix is in trunk, and the original fix is good, just incomplete. Perhaps this should get a whole new JIRA.","30/Aug/11 07:49;ikelly;Going to fix in BOOKKEEPER-59. To do it under BK-5 we'd have to pull the former patch and then reapply it with extra changes. This is ugly, especially since the original patch does good stuff. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Static variable makes tests fail,BOOKKEEPER-1,12505217,Bug,Closed,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,fpj,fpj,26/Apr/11 17:19,07/Dec/11 15:56,14/Mar/19 02:39,25/May/11 09:42,,,4.0.0,,,,,,0,,"The following final static variable is causing LedgerDeleteTest to fail:

{noformat}
final static long LOG_SIZE_LIMIT = Long.getLong(""logSizeLimit"", 2 * 1024 * 1024 * 1024L);
{noformat}

because the test counts on the value of the variable to change and the new maven setup uses a single process by default, so the value of the variable doesn't change. ",,,,,,,,,,,,,,,,,,,24/May/11 17:53;fpj;BOOKKEEPER-1.patch;https://issues.apache.org/jira/secure/attachment/12480288/BOOKKEEPER-1.patch,19/May/11 08:46;fpj;BOOKKEEPER-1.patch;https://issues.apache.org/jira/secure/attachment/12479741/BOOKKEEPER-1.patch,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-05-25 09:42:29.585,,,no_permission,,,,,,,,,,,,,69753,,,Wed May 25 09:42:29 UTC 2011,,,,,,0|i0u5mn:,174053,,,,,,,,"02/May/11 20:53;fpj;There are two viable options I see:

# Make the variable non-static;
# Change the fork mode in the maven configuration.

I prefer the second option, but I was wondering if folks have an opinion.","19/May/11 08:46;fpj;For some reason, setting forkmode to always does not work in my laptop and the test still fails. Here is what I have:

{noformat}
Apache Maven 3.0.2 (r1056850; 2011-01-09 01:58:10+0100)
Java version: 1.6.0_24, vendor: Apple Inc.
Java home: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"", version: ""10.5.8"", arch: ""x86_64"", family: ""mac""
{noformat}

","24/May/11 17:53;fpj;It had to be something silly (thanks for the hint, Ivan). Here is a patch that works for me.",25/May/11 09:42;ikelly;Committed as r1127451 (actual change) and r1127455 (update to CHANGES.txt),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
