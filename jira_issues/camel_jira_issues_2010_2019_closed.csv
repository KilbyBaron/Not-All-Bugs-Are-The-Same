Summary,Issue key,Issue id,Parent id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Description,Environment,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Duplicate),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (Required),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Error in generated XAdES 1.1.1 signature ,CAMEL-13009,13204670,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,Forinil,Forinil,15/Dec/18 18:09,17/Dec/18 19:12,14/Mar/19 02:43,17/Dec/18 07:55,2.23.0,,,,,,,,,,,,2.23.1,2.24.0,3.0.0,,camel-xmlsecurity,,,,0,XAdES,,,,,"XAdES XSD file defines, among the others, type 
{code:xml}
DigestAlgAndValueType
{code}
In XAdES 1.1.1 this is defined as:
{code:xml}
<xsd:complexType name=""DigestAlgAndValueType"">
  <xsd:sequence>
    <xsd:element name=""DigestMethod"" type=""ds:DigestMethodType""/>
    <xsd:element name=""DigestValue"" type=""ds:DigestValueType""/>
  </xsd:sequence>
</xsd:complexType>
{code}
and in later versions as:
{code:xml}
<xsd:complexType name=""DigestAlgAndValueType"">
  <xsd:sequence>
    <xsd:element ref=""ds:DigestMethod""/>
    <xsd:element ref=""ds:DigestValue""/>
  </xsd:sequence>
</xsd:complexType>
{code}

Apache Camel always generates elements of this type according to the second definition, regardless of selected namespace. This may cause XAdES 1.1.1 signature validation to fail.",,"Forinil opened a new pull request #2677: CAMEL-13009: DigestMethod and DigestValue elements created either in …
URL: https://github.com/apache/camel/pull/2677
 
 
   …XAdES or DS namespace depending on XAdES version required

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Dec/18 16:23;githubbot;600","oscerd closed pull request #2677: CAMEL-13009: DigestMethod and DigestValue elements created either in …
URL: https://github.com/apache/camel/pull/2677
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
index 594dbdb5903..909e13cd888 100644
--- a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
+++ b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
@@ -944,14 +944,14 @@ protected void addSignaturePolicyIdentifier(Document doc, Element signedProperti
                 throw new XmlSignatureException(
                         ""The XAdES-EPES configuration is invalid. The digest algorithm for the signature policy is missing."");
             }
-            Element digestMethod = createDigSigElement(""DigestMethod"", doc, input.getPrefixForXmlSignatureNamespace());
+            Element digestMethod = createElementNS(doc, input, ""DigestMethod"");
             sigPolicyHash.appendChild(digestMethod);
             setAttribute(digestMethod, ""Algorithm"", getSignaturePolicyDigestAlgorithm());
             if (getSignaturePolicyDigestValue() == null || getSignaturePolicyDigestValue().isEmpty()) {
                 throw new XmlSignatureException(
                         ""The XAdES-EPES configuration is invalid. The digest value for the signature policy is missing."");
             }
-            Element digestValue = createDigSigElement(""DigestValue"", doc, input.getPrefixForXmlSignatureNamespace());
+            Element digestValue = createElementNS(doc, input, ""DigestValue"");
             sigPolicyHash.appendChild(digestValue);
             digestValue.setTextContent(getSignaturePolicyDigestValue());
 
@@ -1142,10 +1142,10 @@ protected void addCertificate(X509Certificate cert, Element signedCertificate, D
         String digest = calculateDigest(algorithm, cert.getEncoded());
         Element certDigest = createElement(""CertDigest"", doc, input);
         elCert.appendChild(certDigest);
-        Element digestMethod = createDigSigElement(""DigestMethod"", doc, input.getPrefixForXmlSignatureNamespace());
+        Element digestMethod = createElementNS(doc, input, ""DigestMethod"");
         certDigest.appendChild(digestMethod);
         setAttribute(digestMethod, ""Algorithm"", getDigestAlgorithmForSigningCertificate());
-        Element digestValue = createDigSigElement(""DigestValue"", doc, input.getPrefixForXmlSignatureNamespace());
+        Element digestValue = createElementNS(doc, input, ""DigestValue"");
         certDigest.appendChild(digestValue);
         digestValue.setTextContent(digest);
 
@@ -1189,6 +1189,16 @@ protected String calculateDigest(String algorithm, byte[] bytes) throws NoSuchAl
         return new Base64().encodeAsString(digestBytes);
     }
 
+    protected Element createElementNS(Document doc, Input input, String elementName) {
+        Element digestMethod;
+        if (HTTP_URI_ETSI_ORG_01903_V1_1_1.equals(findNamespace(input.getMessage()))) {
+            digestMethod = createElement(elementName, doc, input);
+        } else {
+            digestMethod = createDigSigElement(elementName, doc, input.getPrefixForXmlSignatureNamespace());
+        }
+        return digestMethod;
+    }
+
     protected Element createDigSigElement(String localName, Document doc, String prefixForXmlSignatureNamespace) {
         Element el = doc.createElementNS(""http://www.w3.org/2000/09/xmldsig#"", localName);
         if (prefixForXmlSignatureNamespace != null && !prefixForXmlSignatureNamespace.isEmpty()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/18 07:54;githubbot;600",,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-16 22:17:26.172,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Sun Dec 16 22:17:26 UTC 2018,,,,,,,0|u000eg:,9223372036854775807,,,,,,,,,16/Dec/18 22:17;ancosen;Once it has been merged we'll mark this as resolved,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce streaming api breaks after access token expires and a timeout happens when re logging in.,CAMEL-12986,13203174,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hnguyen15,hnguyen15,08/Dec/18 00:21,07/Jan/19 22:59,14/Mar/19 02:43,07/Jan/19 22:59,2.23.0,,,,,,,,,,,,2.23.0,,,,camel-salesforce,,,,0,,,,,,"*When using salesforce version 37 or earlier my push topics and streaming api runs forever with little to no issues. I tested expiring access tokens and hitting timeouts to mimic network failures. I debug the code and saw that there where retries for network failures. The type login I'm using is refresh token.*

 

*I switch over to version 44 using code from camel 2.21.0 and saw a lot of 403 and timeouts and null pointers caused by timeouts that would kill the push topic subscription. Usually when the process dies I see null pointers than this message and no more push topic action happens.* 

org.apache.camel.component.salesforce.api.SalesforceException: Login request timeout: null
 at org.apache.camel.component.salesforce.internal.SalesforceSession.login(SalesforceSession.java:135)
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.createClient(SubscriptionHelper.java:345)
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.doStart(SubscriptionHelper.java:108)
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:277)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
 at java.lang.Thread.run(Thread.java:748)
Caused by: java.util.concurrent.TimeoutException: null
 at org.eclipse.jetty.client.util.FutureResponseListener.get(FutureResponseListener.java:109)
 at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:655)
 at org.apache.camel.component.salesforce.internal.SalesforceSession.login(SalesforceSession.java:129)
 ... 6 common frames omitted
15:51:51.531 [HttpClient@507583873-24] WARN org.eclipse.jetty.util.thread.QueuedThreadPool - 
java.lang.NullPointerException: null
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:284)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
 at java.lang.Thread.run(Thread.java:748)
15:51:53.256 [HttpClient@507583873-24] WARN org.eclipse.jetty.util.thread.QueuedThreadPool - Unexpected thread death: org.eclipse.jetty.util.thread.QueuedThreadPool$3@4d71480c in HttpClient@507583873\{STARTED,8<=8<=200,i=3,q=0}

 

*When I switch to 2.23.0 I think the issue doesn't happen as often but I still need to do testing for long periods of time to be sure.* 

 

*To recreate the issue put a breakpoint at SalesforceSession on this line* 

 ** final ContentResponse loginResponse = loginPost.send();

*Start up the app and let the first login happen to establish an auth session. Then go to the AuthSession table and delete the row that correspond to the connection for your application, the SessionType should be Oauth2.*

*Then you have to wait for a while for the system to realize that the session has to expire and we need to get a new access token. If you create a timeout exception I think you can cause this to happen faster but I usually wait up to 5 minutes for the loginPost.send() breakpoint to hit. To cause a timeout go to FutureResponseListener.java and debug and set the expired value true.*

        **        if (expired)

            throw new TimeoutException();

 *So for the version 2.21.0 when I step over everything during loginPost.send(); there an exception thrown the client object becomes null and we get a null pointer and the subscription stops.*

 

*For version 2.23.0 the timeout doesn't happen every time so again you have to throw a timeout by going through* *FutureResponseListener and creating a timeout. This is a problem because my jobs always stops taking push action after a couple of days. 37 version code would retry on network issues but the new code will throw a null pointer exception on client when theres a timeout on the login process and cause the subscription to die.* **

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Jan 07 22:59:50 UTC 2019,,,,,,,0|s01b00:,9223372036854775807,,,,,,,,,"08/Dec/18 00:38;hnguyen15;Actually for version 2.21.0 to recreate the issue all you need to do is let let the app login once that delete the auth session and wait for it to crash.

If you do this with 2.23.0 It wont crash it will re establish a connection unless you manually tell it to do a timeout.",07/Jan/19 22:59;hnguyen15;This error doesn't happen anymore after the 2.23.0 release.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic doneFileName is not working with filename containing 2 dots,CAMEL-12940,13198685,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,aldettinger,aldettinger,15/Nov/18 17:54,15/Nov/18 19:50,14/Mar/19 02:43,15/Nov/18 19:50,2.21.3,2.22.1,2.23.0,,,,,,,,,,2.21.4,2.22.3,2.23.0,,camel-core,,,,0,,,,,,Check [this conversation|http://camel.465427.n5.nabble.com/File-polling-issue-for-filename-with-multiple-dots-td5825827.html] out for more context.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-15 18:15:04.91,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Nov 15 19:50:20 UTC 2018,,,,,,,0|s00jk0:,9223372036854775807,,,,,,,,,"15/Nov/18 18:15;githubbot;aldettinger opened a new pull request #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620
 
 
   …e filename with 2 dots.
   
   Issue traced [here](https://issues.apache.org/jira/browse/CAMEL-12940) and more context [there](http://camel.465427.n5.nabble.com/File-polling-issue-for-filename-with-multiple-dots-td5825827.html).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Nov/18 18:16;githubbot;aldettinger commented on issue #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620#issuecomment-439138701
 
 
   Ok, I'm gonna merge on master, 2.22.x and 2.21.x. Thanks @oscerd.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Nov/18 18:16;githubbot;aldettinger closed pull request #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
index fac9e7e8fbe..c60312375ad 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
@@ -1420,8 +1420,8 @@ protected String createDoneFileName(String fileName) {
 
         pattern = pattern.replaceFirst(""\\$\\{file:name\\}"", onlyName);
         pattern = pattern.replaceFirst(""\\$simple\\{file:name\\}"", onlyName);
-        pattern = pattern.replaceFirst(""\\$\\{file:name.noext\\}"", FileUtil.stripExt(onlyName));
-        pattern = pattern.replaceFirst(""\\$simple\\{file:name.noext\\}"", FileUtil.stripExt(onlyName));
+        pattern = pattern.replaceFirst(""\\$\\{file:name.noext\\}"", FileUtil.stripExt(onlyName, true));
+        pattern = pattern.replaceFirst(""\\$simple\\{file:name.noext\\}"", FileUtil.stripExt(onlyName, true));
 
         // must be able to resolve all placeholders supported
         if (StringHelper.hasStartToken(pattern, ""simple"")) {
diff --git a/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDynamicDoneFileNameWithTwoDotsTest.java b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDynamicDoneFileNameWithTwoDotsTest.java
new file mode 100644
index 00000000000..a45905a36b4
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDynamicDoneFileNameWithTwoDotsTest.java
@@ -0,0 +1,68 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+
+import java.io.File;
+import java.lang.invoke.MethodHandles;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.NotifyBuilder;
+import org.apache.camel.builder.RouteBuilder;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * This class tests an issue where an input file is not picked up due to a dynamic
+ * doneFileName containing two dots.
+ */
+public class FileConsumeDynamicDoneFileNameWithTwoDotsTest extends ContextTestSupport {
+
+    private static final String TARGET_DIR_NAME = ""target/"" + MethodHandles.lookup().lookupClass().getSimpleName();
+
+    @Override
+    @Before
+    public void setUp() throws Exception {
+        deleteDirectory(TARGET_DIR_NAME);
+        super.setUp();
+    }
+
+    @Test
+    public void testDynamicDoneFileNameContainingTwoDots() throws Exception {
+        NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create();
+        getMockEndpoint(""mock:result"").expectedBodiesReceivedInAnyOrder(""input-body"");
+
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""input-body"", Exchange.FILE_NAME, ""test.twodot.txt"");
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""done-body"", Exchange.FILE_NAME, ""test.twodot.done"");
+
+        assertMockEndpointsSatisfied();
+        assertTrue(notify.matchesMockWaitTime());
+
+        assertFalse(""Input file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.txt"").exists());
+        assertFalse(""Done file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.done"").exists());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file:"" + TARGET_DIR_NAME + ""?doneFileName=${file:name.noext}.done&initialDelay=0"").to(""mock:result"");
+            }
+        };
+    }
+}
diff --git a/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest.java b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest.java
new file mode 100644
index 00000000000..d1de7a94bc4
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest.java
@@ -0,0 +1,68 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+
+import java.io.File;
+import java.lang.invoke.MethodHandles;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.NotifyBuilder;
+import org.apache.camel.builder.RouteBuilder;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * This class tests an issue where an input file is not picked up due to a
+ * dynamic doneFileName using the simple syntax and containing two dots.
+ */
+public class FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest extends ContextTestSupport {
+
+    private static final String TARGET_DIR_NAME = ""target/"" + MethodHandles.lookup().lookupClass().getSimpleName();
+
+    @Override
+    @Before
+    public void setUp() throws Exception {
+        deleteDirectory(TARGET_DIR_NAME);
+        super.setUp();
+    }
+
+    @Test
+    public void testSimpleDynamicDoneFileNameContainingTwoDots() throws Exception {
+        NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create();
+        getMockEndpoint(""mock:result"").expectedBodiesReceivedInAnyOrder(""input-body"");
+
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""input-body"", Exchange.FILE_NAME, ""test.twodot.txt"");
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""done-body"", Exchange.FILE_NAME, ""test.twodot.done"");
+
+        assertMockEndpointsSatisfied();
+        assertTrue(notify.matchesMockWaitTime());
+
+        assertFalse(""Input file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.txt"").exists());
+        assertFalse(""Done file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.done"").exists());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file:"" + TARGET_DIR_NAME + ""?doneFileName=$simple{file:name.noext}.done&initialDelay=0"").to(""mock:result"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Nov/18 19:49;githubbot;aldettinger commented on issue #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620#issuecomment-439167635
 
 
   Merged on master, 2.22.x and 2.21.x.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Nov/18 19:50;aldettinger;Merged on master, 2.22.x and 2.21.x..",,,,,,,,,,,,,,,,,,,,,,,,,
[CAMEL-COUCHBASE] Get document from couchbase error,CAMEL-12892,13193074,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,michael992,michael992,21/Oct/18 01:55,22/Oct/18 17:45,14/Mar/19 02:43,22/Oct/18 17:45,2.22.1,,,,,,,,,,,,,,,,,,,,0,,,,,,"/!\ IT IS NOT RELATED TO COUCHDB BUT TO COUCHBASE

 

I try to get a document from couchbase and i getting this error
{code:java}
because of Could not load view ""brewery_beers"" for design doc ""beer""
{code}
So couchbase is a key value engine i just want to get a document by this key and without using view how i suppose to do that ? could someone fix this or remove this component from camel (there is not point tho have this component if there is no possibility to get document with the key from a key value storage engine).

There is even not a camel-couchbase option in Jira.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-21 08:14:07.287,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Oct 22 17:45:25 UTC 2018,,,,,,,0|i3zgaf:,9223372036854775807,,,,,,,,,"21/Oct/18 08:14;ancosen;There is no reason to remove the component. You're welcome to provide a PR. If you are in a hurry or you're angry for reason we don't know, it's your problem. This is an open source project: you can contribute to make it better, complaining doesn't work here. I'll take a look when I can if you won't work on this.",21/Oct/18 08:14;ancosen;I first need to verify how the component work by the way,"21/Oct/18 12:19;michael992;It is not maintened and not working so i don't see the point to maintain this kind of component is just my point of view.

By the way view are in roadmap to be deprecated, if you are doing modification please just provide the availability to get document by ids without need of using view.

 

To reproduce you just need to do something like:
{code:java}
from(""couchbase:http://localhost/test?username=username&password=password"").log(body().toString());
{code}
{code:java}
// from http://camel.apache.org/couchbase.html
from(""couchbase:http://localhost/test?username=username&password=password?operation='GET'"").log(body().toString());
{code}
{code:java}
// from https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/docs/couchbase-component.adoc
from(""couchbase:http://localhost/test?username=username&password=password?operation=CCB_GET"").log(body().toString());
{code}
Or Maybe
{code:java}
.pollEnrich().simple(""couchbase:http://localhost/test?username=username&password=password?operation=CCB_GET"")
{code}
Also the documentation is wrong and/or outdated.

 ",21/Oct/18 16:33;ancosen;The doc is autogenerated on GitHub. There is a message on the site. You can contribute to doc too instead of complaining. ,21/Oct/18 16:43;michael992;Ok so I close the ticket ?,"21/Oct/18 16:46;ancosen;Leave it open. We'll take a look at the bug and the doc. The issue is ok, it's how you communicate that doesn't sound really good. But no problem, open source is like this sometime",21/Oct/18 16:49;michael992;Ok sorry for this. So you say there is no issue ?,21/Oct/18 16:56;ancosen;No. I'm saying leave it open and we'll check it and ifx it eventually,21/Oct/18 16:59;michael992;Ok thanks,"22/Oct/18 07:52;ancosen;As you may see from the documentation here:

[https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/docs/couchbase-component.adoc]

The view is used only from the consumer point of view, if you want to get a document by id, you need to use the Couchbase Producer and specify the headers needed. That's why you get an error on the view. 

You can see how the consumer works here:

[https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/java/org/apache/camel/component/couchbase/CouchbaseConsumer.java]

You can do something like:
{code:java}
// from https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/docs/couchbase-component.adoc
from(""direct:start"").to(""couchbase:http://localhost/test?username=username&password=password&operation=CCB_GET&key=yourkey"").log(body().toString());
{code}
I didn't test this route, it's just written on the fly.

Hope this help. I'll review the adoc documentation and add some example.

Have a nice day.

 ",22/Oct/18 17:41;michael992; Ok good thanks you !,22/Oct/18 17:45;michael992;The documentation will be updated,,,,,,,,,,,,,,,,,,
Regression in Camel Salesforce - consumer blocks producer in same route,CAMEL-12780,13183186,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,dhirajsb,dhirajsb,dhirajsb,05/Sep/18 16:49,18/Sep/18 10:23,14/Mar/19 02:43,06/Sep/18 18:56,2.23.0,,,,,,,,,,,,2.23.0,,,,camel-salesforce,,,,0,salesforce,,,,,Salesforce consumer should use a non-blocking AsyncCallback when processing exchanges. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-05 18:22:20.358,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Sep 18 10:23:40 UTC 2018,,,,,,,0|i3xrmf:,9223372036854775807,Regression,,,,,,,,"05/Sep/18 18:22;githubbot;dhirajsb opened a new pull request #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Sep/18 18:22;githubbot;GitHub user dhirajsb opened a pull request:

    https://github.com/apache/camel/pull/2508

    Salesforce consumer should use AyncCallback, fixes CAMEL-12780

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dhirajsb/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2508.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2508
    
----
commit 1e3ff96f5b65e09eafa6fbb837cead867cb207af
Author: Dhiraj Bokde <dhirajsb@...>
Date:   2018-09-05T18:14:50Z

    Salesforce consumer should use AyncCallback, fixes CAMEL-12780

----
","05/Sep/18 18:23;githubbot;dhirajsb commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-418831360
 
 
   @davsclaus, @oscerd can you add me for write access?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 04:59;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-418964989
 
 
   I believe you need to follow the process on gitbox.apache.org

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 05:52;githubbot;dhirajsb commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-418973002
 
 
   I had started it earlier but I didn't get a confirmation or something. I'm trying to do it again. Hopefully it will work this time. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 08:13;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419005892
 
 
   Let us know if you're able to push @dhirajsb otherwise I can take care of your PR :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 18:38;githubbot;dhirajsb commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419198703
 
 
   Finally sorted it out and got through the gitbox process today. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 18:44;githubbot;dhirajsb closed pull request #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java
index 8224d644c33..501c6d9d0a7 100644
--- a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java
+++ b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java
@@ -22,6 +22,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import org.apache.camel.AsyncCallback;
 import org.apache.camel.Exchange;
 import org.apache.camel.Processor;
 import org.apache.camel.component.salesforce.api.SalesforceException;
@@ -144,7 +145,16 @@ public void processMessage(final ClientSessionChannel channel, final Message mes
         }
 
         try {
-            getAsyncProcessor().process(exchange);
+            getAsyncProcessor().process(exchange, new AsyncCallback() {
+                @Override
+                public void done(boolean doneSync) {
+                    // noop
+                    if (log.isTraceEnabled()) {
+                        log.trace(""Done processing event: {} {}"", channel.getId(),
+                                doneSync ? ""synchronously"" : ""asynchronously"");
+                    }
+                }
+            });
         } catch (final Exception e) {
             final String msg = String.format(""Error processing %s: %s"", exchange, e);
             handleException(msg, new SalesforceException(msg, e));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 18:44;githubbot;Github user dhirajsb closed the pull request at:

    https://github.com/apache/camel/pull/2508
","06/Sep/18 18:56;dhirajsb;It's not an issue for 2.20 or 2.21 since the PlatformEvent API support was only added to master, which had introduced this regression. ","07/Sep/18 06:09;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419333354
 
 
   Salesforce tests are failing now.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Sep/18 06:38;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419338610
 
 
   Fixed.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Sep/18 10:23;zregvart;Great find [~dhirajsb], thanks for the fix!",,,,,,,,,,,,,,,,,
Surviving Header AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE affects following aggregations,CAMEL-12589,13166953,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,grigoni,grigoni,19/Jun/18 14:23,30/Jul/18 11:46,14/Mar/19 02:43,05/Jul/18 12:57,2.21.0,2.21.1,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,camel-core,,,,0,,,,,,"When AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE is once set true it survives current aggregation processing and affects in unexpected way following aggregation by triggering ""forceCompletionOfAllGroups()"" again

in next code snippet might be needed some additional handling when the header is true:
{code:java}
protected void doProcess(Exchange exchange) throws Exception {
...
        // check for the special header to force completion of all groups (inclusive of the message)
        boolean completeAllGroupsInclusive = exchange.getIn().getHeader(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE, false, boolean.class);
        if (completeAllGroupsInclusive) {
            forceCompletionOfAllGroups();
        }
...

{code}
this consideration is made by analysing similar behavior and lifecycle of header AGGREGATION_COMPLETE_ALL_GROUPS:
{code:java}
private List<Exchange> doAggregation(String key, Exchange newExchange) throws CamelExchangeException {
...
...        
        // check for the special exchange property to force completion of all groups
        boolean completeAllGroups = answer.getProperty(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS, false, boolean.class);
        if (completeAllGroups) {
            // remove the exchange property so we do not complete again
            answer.removeProperty(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS);
            forceCompletionOfAllGroups();
        } else if (isCompletionOnNewCorrelationGroup() && originalExchange == null) {
            // its a new group so force complete of all existing groups
            forceCompletionOfAllGroups();
        }
...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-05 12:28:22.356,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Jul 05 13:04:14 UTC 2018,,,,,,,0|i3v0k7:,9223372036854775807,,,,,,,,,02/Jul/18 05:50;grigoni;changed to major because _any_ aggregation following the one using this header is affected. the workaround I use is to filter the header out. When you are unaware of this behavior you just loose control of next aggregations,"05/Jul/18 12:28;davsclaus;Okay it was not a minor as you cannot easily workaround this in the custom aggregation repository, where you can remove these headers yourself.

 ",05/Jul/18 12:57;davsclaus;Thanks for reporting,"05/Jul/18 13:04;grigoni;your careful reviewing is always appreciated, thx!",,,,,,,,,,,,,,,,,,,,,,,,,,
Seda component forgets URI setting when duplicates are present,CAMEL-12571,13165276,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,grigoni,grigoni,11/Jun/18 08:57,30/Jul/18 11:46,14/Mar/19 02:43,05/Jul/18 14:19,2.21.0,,,,,,,,,,,,2.23.0,,,,camel-core,,,,0,,,,,,"when {color:#008000}blockWhenFull=true&blockWhenFull=true {color}{color:#333333}is set twice the option is not set at all{color}

{color:#333333}it might out of context but from my point of view the last one should win (as it is in a properties file){color}

{color:#333333}of if an error should be thrown could also be welcome{color}

 

{color:#333333}I quickly adapted{color} SedaComponentConfigurationAndDocumentationTest (I know, it uses now deprecated stuff) and the result is an array of set values ( 2 in this case) and the test fails.

kind regards

G.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-11 09:04:46.192,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Jul 05 13:49:01 UTC 2018,,,,,,,0|i3upy7:,9223372036854775807,,,,,,,,,"11/Jun/18 09:04;davsclaus;What web ui are you referring to?

 ","11/Jun/18 10:44;grigoni;Hi Claus,

my wording was wrong, I meant like properties were last one wins

 ",18/Jun/18 11:27;davsclaus;Thanks I have reproduced the issue,"19/Jun/18 14:10;grigoni;happy to contribute, I thank you",05/Jul/18 13:49;davsclaus;A fix for this has a potential fix in default component so will only do this on master onwards. Its not a big bug or issue as its end user that has misconfigured camel.,,,,,,,,,,,,,,,,,,,,,,,,,
SqsProducer doesn't support Boolean attributes,CAMEL-12506,13158808,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,candrews,candrews,11/May/18 21:10,13/May/18 18:23,14/Mar/19 02:43,13/May/18 18:23,2.20.3,2.21.0,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,camel-aws,,,,0,,,,,,SqsProducer doesn't support Boolean attributes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-11 21:15:09.238,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sun May 13 18:19:01 UTC 2018,,,Patch Available,,,,0|i3tmiv:,9223372036854775807,,,,,,,,,"11/May/18 21:15;githubbot;candrews opened a new pull request #2337: CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types
URL: https://github.com/apache/camel/pull/2337
 
 
   https://issues.apache.org/jira/browse/CAMEL-12506 SqsProducer doesn't support Boolean attributes
   https://issues.apache.org/jira/browse/CAMEL-12507 SqsProducer support for Number custom data types

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/May/18 21:15;githubbot;GitHub user candrews opened a pull request:

    https://github.com/apache/camel/pull/2337

    CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types

    https://issues.apache.org/jira/browse/CAMEL-12506 SqsProducer doesn't support Boolean attributes
    https://issues.apache.org/jira/browse/CAMEL-12507 SqsProducer support for Number custom data types

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/candrews/camel patch-3

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2337.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2337
    
----
commit c13ea12e60c8a3b366a4a654a9371ad94ec3c1e6
Author: Craig Andrews <candrews@...>
Date:   2018-05-11T20:50:17Z

    CAMEL-12506: SQS Producer support for boolean attributes
    
    If a header of type `Boolean` is provided, map it to an SQS `MessageAttributeValue` of type ""Number"" with the`MessageAttributeValue`'s StringValue being ""1"" for true and ""0"" for false.
    
    This behavior matches that of amazon-sqs-java-messaging-lib: https://github.com/awslabs/amazon-sqs-java-messaging-lib/blob/1.0.4/src/main/java/com/amazon/sqs/javamessaging/message/SQSMessage.java#L1146
    
    See https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html

commit 09ff0f0713f597c9b22714d843d2f5f5cf259340
Author: Craig Andrews <candrews@...>
Date:   2018-05-11T21:00:23Z

    CAMEL-12507: SQS Producer support for number custom types
    
    If a header of type `Number` is provided, set the dataType to ""Number."" + an appropriate identifier
    
    These dataType values match those used by amazon-sqs-java-messaging-lib: https://github.com/awslabs/amazon-sqs-java-messaging-lib/blob/1.0.4/src/main/java/com/amazon/sqs/javamessaging/SQSMessagingClientConstants.java#L39
    
    See https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html

----
",11/May/18 21:15;candrews;https://github.com/apache/camel/pull/2337,"12/May/18 15:22;githubbot;aldettinger commented on issue #2337: CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types
URL: https://github.com/apache/camel/pull/2337#issuecomment-388562339
 
 
   Merged on master. Thanks @candrews. Please find a trick above in order to prevent further checkstyle issues in PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/May/18 15:22;githubbot;aldettinger closed pull request #2337: CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types
URL: https://github.com/apache/camel/pull/2337
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
index 1ec145b3697..7fe85a989a7 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
@@ -135,9 +135,30 @@ public String toString() {
                     mav.setDataType(""Binary"");
                     mav.withBinaryValue((ByteBuffer)value);
                     result.put(entry.getKey(), mav);
+                } else if (value instanceof Boolean) {
+                    MessageAttributeValue mav = new MessageAttributeValue();
+                    mav.setDataType(""Number.Boolean"");
+                    mav.withStringValue(((Boolean)value)?""1"":""0"");
+                    result.put(entry.getKey(), mav);
                 } else if (value instanceof Number) {
                     MessageAttributeValue mav = new MessageAttributeValue();
-                    mav.setDataType(""Number"");
+                    final String dataType;
+                    if(value instanceof Integer) {
+                        dataType = ""Number.int"";
+                    } else if (value instanceof Byte) {
+                        dataType = ""Number.byte"";
+                    } else if (value instanceof Double) {
+                        dataType = ""Number.double"";
+                    } else if (value instanceof Float) {
+                        dataType = ""Number.float"";
+                    } else if (value instanceof Long) {
+                        dataType = ""Number.long"";
+                    } else if (value instanceof Short) {
+                        dataType = ""Number.short"";
+                    } else {
+                        dataType = ""Number"";
+                    }
+                    mav.setDataType(dataType);
                     mav.withStringValue(((Number)value).toString());
                     result.put(entry.getKey(), mav);
                 } else {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/May/18 15:22;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2337
",12/May/18 15:26;aldettinger;Just merged on master at this stage.,"13/May/18 18:19;aldettinger;merged on master, camel-2.21.x, camel-2.20.x",,,,,,,,,,,,,,,,,,,,,,
"Camel-jaxb option ""encoding"" with option ""filterNonXmlChars"" generate wrong data",CAMEL-12415,13148933,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,aldettinger,MadMod,MadMod,29/Mar/18 16:28,07/Apr/18 15:46,14/Mar/19 02:43,07/Apr/18 15:46,2.21.0,,,,,,,,,,,,2.21.1,2.22.0,,,camel-jaxb,,,,0,,,,,,"When using the jaxb-component to marshal.

The properties:
 * Encoding
 * FilterNonXmlChars

do not work together correctly.

FilterNonXmlChars will ignore the set encoding, and make the output bytes UTF-8 encoded.
 I would either expect this to just work, and by that I mean bytes should be encoded as the set encoding, or minimally fail during startup of the route with an exception explaining that these properties does not work together. I'd really prefer the first, since I want to use the functionality of both.

I have provided a patch which makes this work.I have done a small refactoring to not have to duplicate more code. I can rewrite this if it is a problem.

Below is a test which will reproduce the problem.
{code:java}
public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {

    @Override
    public void setUp() throws Exception {
        deleteDirectory(""target/charset"");
        super.setUp();
    }

    @Test
    public void testIsoAndCharacterFiltering() throws Exception {
        PurchaseOrder order = new PurchaseOrder();
        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
        order.setName(name);
        order.setAmount(123.45);
        order.setPrice(2.22);

        MockEndpoint result = getMockEndpoint(""mock:file"");
        result.expectedFileExists(""target/charset/output.xml"");

        template.sendBody(""direct:start"", order);
        assertMockEndpointsSatisfied();

        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        InputStream inputStream = new FileInputStream(""target/charset/output.xml"");
        Reader reader = new InputStreamReader(inputStream, ""ISO-8859-1"");
        PurchaseOrder obj = (PurchaseOrder) unmarshaller.unmarshal(reader);
        assertEquals(expected, obj.getName());
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
                jaxb.setFilterNonXmlChars(true);
                jaxb.setEncoding(""iso-8859-1"");

                from(""direct:start"")
                        .marshal(jaxb)
                        .to(""file:target/charset/?fileName=output.xml&charset=iso-8859-1"");
            }
        };
    }

{code}
 ","OS X 13.3, Java 8",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-29 16:54:35.903,,,no_permission,,Unknown,,,,Patch,,,,,,,,9223372036854775807,,,Sat Apr 07 15:46:26 UTC 2018,,,Patch Available,,,,0|i3rybj:,9223372036854775807,,,,,,,,,"29/Mar/18 16:54;githubbot;IIlllII opened a new pull request #2276: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars
URL: https://github.com/apache/camel/pull/2276
 
 
   Please tell me if anything needs to be changed.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Mar/18 16:54;githubbot;GitHub user IIlllII opened a pull request:

    https://github.com/apache/camel/pull/2276

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars

    Please tell me if anything needs to be changed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/IIlllII/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2276.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2276
    
----
commit 64169aed7e0c8f07853565fac4e9822f26c83647
Author: Jonas Waage <jonas.h.waage@...>
Date:   2017-12-04T23:34:55Z

    CAMEL-12062 Propagate encoding in property

commit 8c387e4f40ea13f61fe7cb6c87ea3d6f4f91f4b1
Author: Jonas Waage <jonas.h.waage@...>
Date:   2018-03-20T19:13:40Z

    Merge remote-tracking branch 'upstream/master'

commit ae41f78bb38f3402fbbf386057f14bd4187cf768
Author: Jonas Waage <jonas.h.waage@...>
Date:   2018-03-29T16:33:44Z

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars

----
","29/Mar/18 17:06;githubbot;IIlllII commented on issue #2276: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars
URL: https://github.com/apache/camel/pull/2276#issuecomment-377304454
 
 
   Got some other commits in here, sorry I'll make a new one

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Mar/18 17:06;githubbot;IIlllII closed pull request #2276: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars
URL: https://github.com/apache/camel/pull/2276
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
index 8283af650a4..24e51ed537f 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
@@ -295,11 +295,13 @@ protected void doStop() throws Exception {
             Marshaller marshaller = context.createMarshaller();
             Writer buffer = new StringWriter();
 
+
             if (isPrettyPrint()) {
                 marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
             }
-            if (exchange != null && exchange.getProperty(Exchange.CHARSET_NAME, String.class) != null) {
-                marshaller.setProperty(Marshaller.JAXB_ENCODING, exchange.getProperty(Exchange.CHARSET_NAME, String.class));
+            String charset = exchange != null ? exchange.getProperty(Exchange.CHARSET_NAME, String.class) : null;
+            if (charset != null) {
+                marshaller.setProperty(Marshaller.JAXB_ENCODING, charset);
             }
             Object toMarshall = value;
             if (objectFactoryMethod != null) {
@@ -314,7 +316,7 @@ protected void doStop() throws Exception {
             }
             if (needFiltering(exchange)) {
                 XMLStreamWriter writer = parentTypeConverter.convertTo(XMLStreamWriter.class, buffer);
-                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer);
+                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer, charset);
                 marshaller.marshal(toMarshall, filteringWriter);
             } else {
                 marshaller.marshal(toMarshall, buffer);
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
index 7af3d727702..49e0df3c2cc 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
@@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
     }
 
     /**
@@ -181,7 +186,11 @@ public void writeProcessingInstruction(String target) throws XMLStreamException
     }
 
     public void writeStartDocument() throws XMLStreamException {
-        writer.writeStartDocument();
+        if (encoding != null) {
+            this.writeStartDocument(encoding, null);
+        } else {
+            writer.writeStartDocument();
+        }
     }
 
     public void writeStartDocument(String encoding, String version) throws XMLStreamException {
@@ -189,7 +198,11 @@ public void writeStartDocument(String encoding, String version) throws XMLStream
     }
 
     public void writeStartDocument(String version) throws XMLStreamException {
-        writer.writeStartDocument(version);
+        if (encoding != null) {
+            this.writeStartDocument(encoding, version);
+        } else {
+            writer.writeStartDocument(version);
+        }
     }
 
     public void writeStartElement(String prefix, String localName, String namespaceURI)
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
index ea74d37dad5..0500210261c 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
@@ -205,18 +205,8 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
 
         // only marshal if its possible
         if (introspector.isElement(element)) {
-            if (asXmlStreamWriter(exchange)) {
-                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
-                if (needFiltering(exchange)) {
-                    writer = new FilteringXmlStreamWriter(writer);
-                }
-                if (xmlStreamWriterWrapper != null) {
-                    writer = xmlStreamWriterWrapper.wrapWriter(writer);
-                }
-                marshaller.marshal(element, writer);
-            } else {
-                marshaller.marshal(element, stream);
-            }
+            XMLStreamWriter writer = getWriter(exchange, stream);
+            performWrite(exchange, stream, writer, marshaller, element);
             return;
         } else if (objectFactory && element != null) {
             Method objectFactoryMethod = JaxbHelper.getJaxbElementFactoryMethod(camelContext, element.getClass());
@@ -225,18 +215,8 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
                     Object instance = objectFactoryMethod.getDeclaringClass().newInstance();
                     if (instance != null) {
                         Object toMarshall = objectFactoryMethod.invoke(instance, element);
-                        if (asXmlStreamWriter(exchange)) {
-                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
-                            if (needFiltering(exchange)) {
-                                writer = new FilteringXmlStreamWriter(writer);
-                            }
-                            if (xmlStreamWriterWrapper != null) {
-                                writer = xmlStreamWriterWrapper.wrapWriter(writer);
-                            }
-                            marshaller.marshal(toMarshall, writer);
-                        } else {
-                            marshaller.marshal(toMarshall, stream);
-                        }
+                        XMLStreamWriter writer = getWriter(exchange, stream);
+                        performWrite(exchange, stream, writer, marshaller, toMarshall);
                         return;
                     }
                 } catch (Exception e) {
@@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
+    private XMLStreamWriter getWriter(Exchange exchange, OutputStream stream) {
+        XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
+        if (needFiltering(exchange)) {
+            String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
+            writer = new FilteringXmlStreamWriter(writer, charset);
+        }
+        if (xmlStreamWriterWrapper != null) {
+            writer = xmlStreamWriterWrapper.wrapWriter(writer);
+        }
+        return writer;
+    }
+
+
     private boolean asXmlStreamWriter(Exchange exchange) {
         return needFiltering(exchange) || (xmlStreamWriterWrapper != null);
     }
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
index b8b38016783..59d164bc5f9 100644
--- a/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
@@ -42,7 +42,7 @@
 
     @Before
     public void setUp() {
-        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock);
+        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock, null);
         filteringXmlStreamWriter.nonXmlCharFilterer = nonXmlCharFiltererMock;
 
         when(nonXmlCharFiltererMock.filter(""value"")).thenReturn(""filteredValue"");
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
new file mode 100644
index 00000000000..3adb9c3b252
--- /dev/null
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+
+/**
+ * @version 
+ */
+public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testIsoAndCharacterFiltering() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
+        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.xml"");
+
+        template.sendBody(""direct:start"", order);
+        assertMockEndpointsSatisfied();
+
+        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
+        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
+        InputStream inputStream = new FileInputStream(""target/charset/output.xml"");
+        Reader reader = new InputStreamReader(inputStream, ""ISO-8859-1"");
+        PurchaseOrder obj = (PurchaseOrder) unmarshaller.unmarshal(reader);
+        assertEquals(expected, obj.getName());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
+                jaxb.setFilterNonXmlChars(true);
+                jaxb.setEncoding(""iso-8859-1"");
+
+                from(""direct:start"")
+                        .marshal(jaxb)
+                        .to(""file:target/charset/?fileName=output.xml&charset=iso-8859-1"");
+            }
+        };
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Mar/18 17:07;githubbot;Github user IIlllII closed the pull request at:

    https://github.com/apache/camel/pull/2276
","29/Mar/18 19:01;githubbot;IIlllII opened a new pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Mar/18 19:01;githubbot;GitHub user IIlllII opened a pull request:

    https://github.com/apache/camel/pull/2277

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/IIlllII/camel CAMEL-12415-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2277.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2277
    
----
commit 9e1b372bc8cff1b9189bd4319ea8ea6b085a7e56
Author: Jonas Waage <jonas.h.waage@...>
Date:   2018-03-29T16:33:44Z

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars

----
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178342671
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
 ##########
 @@ -295,11 +295,13 @@ protected void doStop() throws Exception {
             Marshaller marshaller = context.createMarshaller();
             Writer buffer = new StringWriter();
 
+
 
 Review comment:
   No big deal, but if you could avoid introducing blank line.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341639
 
 

 ##########
 File path: components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
 ##########
 @@ -42,7 +42,7 @@
 
     @Before
     public void setUp() {
-        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock);
+        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock, null);
 
 Review comment:
   Could be avoided by removing the API break mentioned earlier.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178342501
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
 
 Review comment:
   At first read, I interpreted 'header' as 'camel header'. Did you mean xml prolog instead ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341246
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
 
 Review comment:
   With the proposed refactoring, getWriter is called at each marshall attempt (performance) and even when `asXmlStreamWriter(exchange)` is false (behavior change). I would not include this change.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178340769
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
 
 Review comment:
   Could you please explain why we would need to store it upper case please ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178340643
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
 
 Review comment:
   Keeping the old constructor along with the new one would avoid an API break. This way you would leverage the good implementation you have done in `writeStartDocument` overloads.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341934
 
 

 ##########
 File path: components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
 ##########
 @@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+
+/**
+ * @version 
+ */
+public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testIsoAndCharacterFiltering() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
+        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.xml"");
+
 
 Review comment:
   And indeed the resulting file does not contain the spouting whale anymore with your fix. Seems that it was UTF-8 encoded before. Good catch :+1:.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341456
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
+    private XMLStreamWriter getWriter(Exchange exchange, OutputStream stream) {
+        XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
+        if (needFiltering(exchange)) {
 
 Review comment:
   Moreover, it hides the interesting changes (I mean the 2 lines above)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 20:42;githubbot;IIlllII commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178374103
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
 
 Review comment:
   It is nicer for consumers of the produced XML. While lowercase is allowed by the standard and parsers should support it, there are parsers that break on lowercase. None I know of that break on uppercase.
   
   Standard also uses uppercase.
   https://www.iana.org/assignments/character-sets/character-sets.xhtml
   
   This might break the users expectation though, but in this case it might be nice to help the user do what will cause them the least pain. What do you think?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 20:50;githubbot;IIlllII commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178376173
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
 
 Review comment:
   Thanks, missed that. I'll revert it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Mar/18 22:45;githubbot;IIlllII commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178374103
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
 
 Review comment:
   I thought it would nicer for consumers of the produced XML. While lowercase is allowed by the standard and parsers should support it, there are parsers that break on lowercase. None I know of that break on uppercase (this could be because I never have used Shift_JIS, or other encodings with lowercase IANA names, so I can see why forcing uppercase might be a bad idea).
   
   I originally thought all IANA names were uppercase, which they are not. And this will take the choice out of the users hands. I'll remove it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Apr/18 17:26;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178595397
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -226,9 +227,10 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
                     if (instance != null) {
                         Object toMarshall = objectFactoryMethod.invoke(instance, element);
                         if (asXmlStreamWriter(exchange)) {
-                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                             if (needFiltering(exchange)) {
-                                writer = new FilteringXmlStreamWriter(writer);
+                                String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
 
 Review comment:
   Same here , we could also remove this line.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Apr/18 17:26;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178595038
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -206,9 +206,10 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         // only marshal if its possible
         if (introspector.isElement(element)) {
             if (asXmlStreamWriter(exchange)) {
-                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                 if (needFiltering(exchange)) {
-                    writer = new FilteringXmlStreamWriter(writer);
+                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
 
 Review comment:
   Could you please change the method signature to `doMarshal(..., OutputStream stream, String charset, ...)` and get the charset from there ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Apr/18 20:09;githubbot;IIlllII commented on issue #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#issuecomment-378029387
 
 
   Added requested changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Apr/18 12:29;githubbot;oscerd commented on issue #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#issuecomment-378232536
 
 
   @aldettinger can you review? It looks good to me.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Apr/18 20:23;githubbot;aldettinger commented on issue #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#issuecomment-378385093
 
 
   Merged into master. Thanks for contribution :+1: .

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Apr/18 20:23;githubbot;aldettinger closed pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
index 8283af650a4..b2ec41bd23f 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
@@ -298,8 +298,9 @@ protected void doStop() throws Exception {
             if (isPrettyPrint()) {
                 marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
             }
-            if (exchange != null && exchange.getProperty(Exchange.CHARSET_NAME, String.class) != null) {
-                marshaller.setProperty(Marshaller.JAXB_ENCODING, exchange.getProperty(Exchange.CHARSET_NAME, String.class));
+            String charset = exchange != null ? exchange.getProperty(Exchange.CHARSET_NAME, String.class) : null;
+            if (charset != null) {
+                marshaller.setProperty(Marshaller.JAXB_ENCODING, charset);
             }
             Object toMarshall = value;
             if (objectFactoryMethod != null) {
@@ -314,7 +315,7 @@ protected void doStop() throws Exception {
             }
             if (needFiltering(exchange)) {
                 XMLStreamWriter writer = parentTypeConverter.convertTo(XMLStreamWriter.class, buffer);
-                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer);
+                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer, charset);
                 marshaller.marshal(toMarshall, filteringWriter);
             } else {
                 marshaller.marshal(toMarshall, buffer);
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
index 7af3d727702..3a82b1443cd 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
@@ -36,6 +36,7 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
@@ -45,6 +46,18 @@ public FilteringXmlStreamWriter(XMLStreamWriter writer) {
         this.writer = writer;
     }
 
+    /**
+     * @param writer
+     *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in the xml prolog.
+     *
+     */
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
+        this.writer = writer;
+        this.encoding = encoding;
+    }
+
     /**
      * This method applies filtering before delegating call to {@link #writer}.
      */
@@ -181,7 +194,11 @@ public void writeProcessingInstruction(String target) throws XMLStreamException
     }
 
     public void writeStartDocument() throws XMLStreamException {
-        writer.writeStartDocument();
+        if (encoding != null) {
+            this.writeStartDocument(encoding, null);
+        } else {
+            writer.writeStartDocument();
+        }
     }
 
     public void writeStartDocument(String encoding, String version) throws XMLStreamException {
@@ -189,7 +206,11 @@ public void writeStartDocument(String encoding, String version) throws XMLStream
     }
 
     public void writeStartDocument(String version) throws XMLStreamException {
-        writer.writeStartDocument(version);
+        if (encoding != null) {
+            this.writeStartDocument(encoding, version);
+        } else {
+            writer.writeStartDocument(version);
+        }
     }
 
     public void writeStartElement(String prefix, String localName, String namespaceURI)
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
index ea74d37dad5..35a208aa4e2 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
@@ -168,7 +168,7 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
                     marshaller.setProperty(property.getKey(), property.getValue());
                 }
             }
-            doMarshal(exchange, graph, stream, marshaller);
+            doMarshal(exchange, graph, stream, marshaller, charset);
 
             if (contentTypeHeader) {
                 if (exchange.hasOut()) {
@@ -182,7 +182,7 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
         }
     }
 
-    void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller marshaller) throws Exception {
+    void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller marshaller, String charset) throws Exception {
 
         Object element = graph;
         QName partNamespaceOnDataFormat = getPartNamespace();
@@ -206,9 +206,9 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         // only marshal if its possible
         if (introspector.isElement(element)) {
             if (asXmlStreamWriter(exchange)) {
-                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                 if (needFiltering(exchange)) {
-                    writer = new FilteringXmlStreamWriter(writer);
+                    writer = new FilteringXmlStreamWriter(writer, charset);
                 }
                 if (xmlStreamWriterWrapper != null) {
                     writer = xmlStreamWriterWrapper.wrapWriter(writer);
@@ -226,9 +226,9 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
                     if (instance != null) {
                         Object toMarshall = objectFactoryMethod.invoke(instance, element);
                         if (asXmlStreamWriter(exchange)) {
-                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                             if (needFiltering(exchange)) {
-                                writer = new FilteringXmlStreamWriter(writer);
+                                writer = new FilteringXmlStreamWriter(writer, charset);
                             }
                             if (xmlStreamWriterWrapper != null) {
                                 writer = xmlStreamWriterWrapper.wrapWriter(writer);
@@ -257,7 +257,7 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
             throw new InvalidPayloadException(exchange, JAXBElement.class);
         }
     }
-
+    
     private boolean asXmlStreamWriter(Exchange exchange) {
         return needFiltering(exchange) || (xmlStreamWriterWrapper != null);
     }
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
new file mode 100644
index 00000000000..3adb9c3b252
--- /dev/null
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+
+/**
+ * @version 
+ */
+public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testIsoAndCharacterFiltering() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
+        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.xml"");
+
+        template.sendBody(""direct:start"", order);
+        assertMockEndpointsSatisfied();
+
+        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
+        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
+        InputStream inputStream = new FileInputStream(""target/charset/output.xml"");
+        Reader reader = new InputStreamReader(inputStream, ""ISO-8859-1"");
+        PurchaseOrder obj = (PurchaseOrder) unmarshaller.unmarshal(reader);
+        assertEquals(expected, obj.getName());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
+                jaxb.setFilterNonXmlChars(true);
+                jaxb.setEncoding(""iso-8859-1"");
+
+                from(""direct:start"")
+                        .marshal(jaxb)
+                        .to(""file:target/charset/?fileName=output.xml&charset=iso-8859-1"");
+            }
+        };
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Apr/18 20:23;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2277
",07/Apr/18 07:41;davsclaus;I wonder if this is a candidate to backport to 2.21.x branch ?,"07/Apr/18 15:35;aldettinger;Indeed, it's safe. I will backport.",07/Apr/18 15:41;aldettinger;Will backport to maintenance branches 2.21.x.,"07/Apr/18 15:46;aldettinger;ok, merged into master and camel-2.21.x",
Dynamic setting the DESTINATION_OVERRIDE_URL doesn't work on CXFRS producer,CAMEL-12252,13137609,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,xldai,xldai,10/Feb/18 06:40,18/Mar/18 22:44,14/Mar/19 02:43,18/Mar/18 22:44,2.17.0,2.18.5,2.19.4,2.20.2,,,,,,,,,2.20.3,2.21.1,2.22.0,,camel-cxfrs,,,,0,,,,,,"Given the sample MyProcessor, setting the DESTINATION_OVERRIDE_URL dynamically during the invoke:
{code}
public void process(Exchange exchange) throws Exception {
    String env = (String)exchange.getIn().getHeader(""Environnement"");
    if (env.equalsIgnoreCase(""DEV"")) {
        exchange.getIn().setHeader(exchange.DESTINATION_OVERRIDE_URL,
            ""http://esbdev11.local:8080/server1/metaServlet"");
    } else {
        exchange.getIn().setHeader(exchange.DESTINATION_OVERRIDE_URL,
            ""http://esblab11.local:8080/server2/metaServlet"");
    }
}
{code}

Given the sample Route:
{code}
        from(""cxfrs:bean:MyREST"")
        .process(new HeaderProcessor())
        .setHeader(""Environnement"")
        .simple(""${header.http_query[env][0]}"")
        .process(new MyProcessor())
        .setHeader(org.apache.camel.Exchange.HTTP_METHOD, constant(""GET""))
        .setHeader(org.apache.camel.Exchange.ACCEPT_CONTENT_TYPE, constant(""*/*""))
        .setHeader(org.apache.camel.Exchange.HTTP_PATH, constant(""/""))
        .to(""cxfrs:bean:restClient?maxClientCacheSize=5"");
{code}

Send request to cxfrs:bean:MyREST with different http header ""dev"", then the cxfrs:bean:restClient always make call to the last setting Address.

(Only it works as expected when setting maxClientCacheSize=0 on the cxfrs:bean:restClient)

There is no this issue on Camel 2.16.x, but start problem from Camel 2.17.x and later versions. Investigations show that the CxfRsEndpoint becoming Singleton after CAMEL-9628, that explain why the last Address setting always applied.",Java 8,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-10 06:47:49.561,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sun Mar 18 22:44:30 UTC 2018,,,,,,,0|i3q10n:,9223372036854775807,,,,,,,,,"10/Feb/18 06:47;xldai;To fix it, the address has to be set on the JAXRSClientFactoryBean object of the ClientFactoryBeanCache of the CxfRsProducer, then even the Endpoint is Singleton, the Address still can be set dynamiclly.","10/Feb/18 06:47;githubbot;xldai opened a new pull request #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Feb/18 06:47;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/2218

    fix CAMEL-12252 and add test case for it

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2218.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2218
    
----
commit 80be0842ea7696066c7d570cc537e270d738d503
Author: xldai <xldai@...>
Date:   2018-02-10T06:41:24Z

    fix CAMEL-12252 and add test case for it

----
","12/Feb/18 21:23;githubbot;aldettinger commented on a change in pull request #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#discussion_r167690712
 
 

 ##########
 File path: components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
 ##########
 @@ -865,6 +865,7 @@ public JAXRSClientFactoryBean get(String address) throws Exception {
                     LOG.trace(""Created client factory bean and add to cache for address '{}'"", address);
                     
                 } else {
+                    retVal.setAddress(address);
 
 Review comment:
   I don't think that the `ClientFactoryBeanCache` would be responsible to mutate its content. However, I've noticed that the `ClientFactoryBeanCache` contains multiple soft references to the same underlying object and I wonder if it could be the cause of the issue.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Feb/18 21:45;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-367832813
 
 
   In the case at hand, each call to [createJAXRSClientFactoryBean(...)](https://github.com/apache/camel/blob/d577c2b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L861) always return the same client factory bean instance but with an overridden address. We end up in a situation where [ClientFactoryBeanCache.get(address)](https://github.com/apache/camel/blob/d577c2b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L855) could serve a factory bean with another address than requested.
   
   The `createJAXRSClientFactoryBean(...)` implementation was tweaked when [the rsClient scope changed to prototype](https://issues.apache.org/jira/browse/CAMEL-4648). But now, we have a single client factory bean since [the SpringRsEndpoint became a singleton](https://issues.apache.org/jira/browse/CAMEL-9176).
   
   Keeping in mind thread safety, I would explore how to change [newJAXRSClientFactoryBean(...)`](https://github.com/apache/camel/blob/f8b6d5b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L62) in order to make the cache keep references to immutable client factory bean**s**.
   
   Does it make sense ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Feb/18 17:59;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-368246840
 
 
   @xldai, would you like to explore changing [newJAXRSClientFactoryBean(...)](https://github.com/apache/camel/blob/f8b6d5b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L62) ?
   
   Otherwise, I should be able to take a look next week.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Feb/18 03:14;githubbot;xldai commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-368279488
 
 
   @aldettinger Sorry for delay I was on vacation and thanks for your finding out I will looking into the SpringRsEndpoint (as I remember, even the JAXRSClientFactoryBean is created from java code still got this issue but anyway I will look into it again)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/Feb/18 10:09;githubbot;xldai commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-369190830
 
 
   @aldettinger Unfortunately, I got no success after tried to adapt the newJAXRSClientFactoryBean() of the CxfRsSpringEndpoint, could you pls looking into it?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/Feb/18 17:55;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-369325411
 
 
   @xldai, few things to polish and I'll take a look then.
   
   On Wed, Feb 28, 2018 at 11:10 AM, Xilai Dai <notifications@github.com>
   wrote:
   
   > @aldettinger <https://github.com/aldettinger> Unfortunately, I got no
   > success after tried to adapt the newJAXRSClientFactoryBean() of the
   > CxfRsSpringEndpoint, could you pls looking into it?
   >
   > —
   > You are receiving this because you were mentioned.
   > Reply to this email directly, view it on GitHub
   > <https://github.com/apache/camel/pull/2218#issuecomment-369190830>, or mute
   > the thread
   > <https://github.com/notifications/unsubscribe-auth/AVIAtRkW_HItcX2_STdnn68jhsKoq_ZKks5tZSX6gaJpZM4SA1KP>
   > .
   >
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Mar/18 19:29;githubbot;aldettinger opened a new pull request #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256
 
 
   More context in [CAMEL-12252](https://issues.apache.org/jira/browse/CAMEL-12252) and the [initial PR](https://github.com/apache/camel/pull/2218).
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Mar/18 19:29;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2256

    CAMEL-12252: Corrected a bug in the URL override mechanism

    More context in [CAMEL-12252](https://issues.apache.org/jira/browse/CAMEL-12252) and the [initial PR](https://github.com/apache/camel/pull/2218).


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2256.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2256
    
----
commit ed07bef9b521133abb7dd20c2b0e698eaad4b053
Author: aldettinger <aldettinger@...>
Date:   2018-03-15T19:19:02Z

    CAMEL-12252: Corrected a bug in the URL override mechanism

----
","15/Mar/18 19:29;githubbot;aldettinger commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373495840
 
 
   @xldai: I've setup a proposal which is working against camel tests. It would be great if you could check it against your environment.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Mar/18 19:30;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-373496151
 
 
   @xldai I would propose to close this PR and move forward in [another](https://github.com/apache/camel/pull/2256)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 13:12;githubbot;xldai commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373919087
 
 
   @aldettinger yes I confirm the test cases passed with your changes! Thanks!
   (Actually I did all most of the same changes than yours only except
       @Override
       protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
   -        checkBeanType(bean, JAXRSServerFactoryBean.class);
   -        return (JAXRSServerFactoryBean)bean;
   +      return new JAXRSServerFactoryBean();
       }
   that's why I got many of the test caces failed)
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 13:13;githubbot;xldai commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373919087
 
 
   @aldettinger yes I confirm the test cases passed with your changes! Thanks!
   (Actually I did all most of the same changes than yours only except
   ``
       @Override
       protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
   -        checkBeanType(bean, JAXRSServerFactoryBean.class);
   -        return (JAXRSServerFactoryBean)bean;
   +      return new JAXRSServerFactoryBean();
       }
   ``
   that's why I got many of the test caces failed)
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 13:17;githubbot;xldai commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373919087
 
 
   @aldettinger yes I confirm the test cases passed with your changes! Thanks!
   (Actually I did all most of the same changes than yours only except
   ```
       @Override
       protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
   -        checkBeanType(bean, JAXRSServerFactoryBean.class);
   -        return (JAXRSServerFactoryBean)bean;
   +      return new JAXRSServerFactoryBean();
       }
   ```
   that's why I got many of the test caces failed)
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 17:42;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-373938830
 
 
   Closing as the bug has been corrected in [another PR](https://github.com/apache/camel/pull/2256).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 17:42;githubbot;aldettinger closed pull request #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
index fa9978c71b3..b04a6a7be92 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
@@ -865,6 +865,7 @@ public JAXRSClientFactoryBean get(String address) throws Exception {
                     LOG.trace(""Created client factory bean and add to cache for address '{}'"", address);
                     
                 } else {
+                    retVal.setAddress(address);
                     LOG.trace(""Retrieved client factory bean from cache for address '{}'"", address);
                 }
             }
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
index 4690778bcd2..9c5f0083e4b 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
@@ -149,4 +149,47 @@ public void process(Exchange exchange) throws Exception {
         assertEquals(""Get a wrong customer id "", 123, response.getId());
         assertEquals(""Get a wrong customer name"", ""John"", response.getName());
     }
+
+    @Test
+    public void testAddressMultiOverride() {
+        // First call with override url
+        Exchange exchange = template.send(""direct://http"",
+            new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        Customer response = (Customer) exchange.getOut().getBody();
+        assertNotNull(""The response should not be null "", response);
+
+        // Second call with override url
+        exchange = template.send(""direct://http"",
+            new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerNonExistingAddressOverrideTest""));
+
+        // Third call with override url
+        exchange = template.send(""direct://http"",
+            new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        response = (Customer) exchange.getOut().getBody();
+        assertNotNull(""The response should not be null "", response);
+    }
+
+    class SendProcessor implements Processor {
+        private String address;
+
+        public SendProcessor(String address) {
+            this.address = address;
+        }
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
+            // Specify the response class , cxfrs will use InputStream as the response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL, address);
+        }
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 17:42;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2218
","17/Mar/18 18:29;githubbot;aldettinger commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373942167
 
 
   Thanks all. I've merged on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 18:29;githubbot;aldettinger closed pull request #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
index fa96d3c874c..d10d6c52848 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
@@ -18,25 +18,31 @@
 package org.apache.camel.component.cxf.jaxrs;
 
 import org.apache.camel.Component;
+import org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean;
+import org.apache.camel.spring.SpringCamelContext;
+import org.apache.cxf.configuration.spring.ConfigurerImpl;
 import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
 import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;
+import org.springframework.context.ApplicationContext;
 
 public class CxfRsSpringEndpoint extends CxfRsEndpoint implements BeanIdAware {
     private AbstractJAXRSFactoryBean bean;
+    private ConfigurerImpl configurer;
     private String beanId;
-    
-    @Deprecated 
+
+    @Deprecated
     /**
      * It will be removed in Camel 3.0
+     * 
      * @param comp
      * @param bean
      */
     public CxfRsSpringEndpoint(Component component, AbstractJAXRSFactoryBean bean) throws Exception {
-        super(bean.getAddress(), component);        
+        super(bean.getAddress(), component);
         init(bean);
     }
-    
+
     public CxfRsSpringEndpoint(Component component, String uri, AbstractJAXRSFactoryBean bean) throws Exception {
         super(uri, component);
         setAddress(bean.getAddress());
@@ -44,31 +50,40 @@ public CxfRsSpringEndpoint(Component component, String uri, AbstractJAXRSFactory
         bean.setAddress(getAddress());
         init(bean);
     }
-    
+
     private void init(AbstractJAXRSFactoryBean bean) {
         this.bean = bean;
         if (bean instanceof BeanIdAware) {
             setBeanId(((BeanIdAware)bean).getBeanId());
         }
+
+        ApplicationContext applicationContext = ((SpringCamelContext)getCamelContext()).getApplicationContext();
+        configurer = new ConfigurerImpl(applicationContext);
     }
-    
+
     @Override
     protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
         checkBeanType(bean, JAXRSServerFactoryBean.class);
         return (JAXRSServerFactoryBean)bean;
     }
-    
+
     @Override
     protected JAXRSClientFactoryBean newJAXRSClientFactoryBean() {
-        checkBeanType(bean, JAXRSClientFactoryBean.class);
-        return (JAXRSClientFactoryBean)bean;
+        return new SpringJAXRSClientFactoryBean();
     }
-    
+
+    @Override
+    protected void setupJAXRSClientFactoryBean(JAXRSClientFactoryBean cfb, String address) {
+        configurer.configureBean(beanId, cfb);
+        cfb.setAddress(address);
+        cfb.setThreadSafe(true);
+    }
+
     public String getBeanId() {
         return beanId;
     }
-    
-    public void setBeanId(String id) {        
+
+    public void setBeanId(String id) {
         this.beanId = id;
     }
 }
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
index 4690778bcd2..9f9d5c360cf 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
@@ -30,7 +30,7 @@
 
 public class CxfRsProducerAddressOverrideTest extends CamelSpringTestSupport {
     private static int port1 = CXFTestSupport.getPort1();
-    private static int port2 = CXFTestSupport.getPort(""CxfRsProducerAddressOverrideTest.jetty""); 
+    private static int port2 = CXFTestSupport.getPort(""CxfRsProducerAddressOverrideTest.jetty"");
     public int getPort1() {
         return port1;
     }
@@ -39,7 +39,7 @@ public int getPort2() {
     }
 
     @Override
-    protected AbstractXmlApplicationContext createApplicationContext() {       
+    protected AbstractXmlApplicationContext createApplicationContext() {
         return new ClassPathXmlApplicationContext(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducerAddressOverride.xml"");
     }
     
@@ -84,7 +84,7 @@ public void process(Exchange exchange) throws Exception {
                 // set the Http method
                 inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
                 // set the relative path
-                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");                
+                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
                 // Specify the response class , cxfrs will use InputStream as the response object type 
                 inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
                 setupDestinationURL(inMessage);
@@ -115,7 +115,7 @@ public void process(Exchange exchange) throws Exception {
                 setupDestinationURL(inMessage);
             }
         });
-     
+        
         // get the response message 
         Customer response = (Customer) exchange.getOut().getBody();
         
@@ -123,7 +123,7 @@ public void process(Exchange exchange) throws Exception {
         assertEquals(""Get a wrong customer id "", 123, response.getId());
         assertEquals(""Get a wrong customer name"", ""John"", response.getName());
     }
-    
+
     @Test
     public void testGetCustomerWithAsyncHttpAPIByOverrideDest() {
         Exchange exchange = template.send(""cxfrs:bean:rsClientHttp"", new Processor() {
@@ -135,18 +135,61 @@ public void process(Exchange exchange) throws Exception {
                 // set the Http method
                 inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
                 // set the relative path
-                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");                
-                // Specify the response class , cxfrs will use InputStream as the response object type 
+                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
+                // Specify the response class , cxfrs will use InputStream as
+                // the response object type
                 inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
                 setupDestinationURL(inMessage);
             }
         });
-     
-        // get the response message 
-        Customer response = (Customer) exchange.getOut().getBody();
-        
+
+        // get the response message
+        Customer response = (Customer)exchange.getOut().getBody();
+
         assertNotNull(""The response should not be null"", response);
         assertEquals(""Get a wrong customer id "", 123, response.getId());
         assertEquals(""Get a wrong customer name"", ""John"", response.getName());
     }
+
+    @Test
+    public void testAddressMultiOverride() {
+        // First call with override url
+        Exchange exchange = template.send(""direct://http"", new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        Customer response = exchange.getOut().getBody(Customer.class);
+        assertNotNull(""The response should not be null "", response);
+
+        // Second call with override url
+        exchange = template.send(""direct://http"", new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerNonExistingAddressOverrideTest""));
+
+        // Third call with override url ( we reuse the first url there )
+        exchange = template.send(""direct://http"", new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        response = exchange.getOut().getBody(Customer.class);
+        assertNotNull(""The response should not be null "", response);
+    }
+
+    class SendProcessor implements Processor {
+        private String address;
+
+        public SendProcessor(String address) {
+            this.address = address;
+        }
+
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
+            // Specify the response class , cxfrs will use InputStream as the
+            // response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL, address);
+        }
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Mar/18 18:29;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2256
",17/Mar/18 18:33;aldettinger;The cache is now behaving correctly.,18/Mar/18 00:58;xldai;[~aldettinger] Could you please backport the fixes to the camel-2.21.x branch (or even earlier branches)?,"18/Mar/18 22:15;aldettinger;Ok, I will backport to older branches.",18/Mar/18 22:16;aldettinger;Backported to camel-2.21.x,"18/Mar/18 22:44;aldettinger;So, merged in master, camel-2.21.x and camel-2.20.x.",,,
PushTopic client doesn't clear refresh token after a long disconnected period,CAMEL-11980,13115590,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,mabroukb,mabroukb,02/Nov/17 11:00,02/Nov/17 15:19,14/Mar/19 02:43,02/Nov/17 15:19,2.19.0,,,,,,,,,,,,2.19.5,2.20.1,2.21.0,,camel-salesforce,,,,0,reliability,,,,,"The bayeux client implements a mechanism to reconnect to salesforce's pushtopic after a network failure.

In production, we experienced a lost of network connection. Bayeux client tried to reconnect and failed to.
when analyzing, we saw a bunch of logs  

o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 0 msecs 
[skipped...]
o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 5000 msecs 
[skipped...]
o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 24000 msecs 
[skipped...]
o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 30000 msecs 

o.a.c.c.s.SalesforceConsumer : Aborting restart attempt due to: Error during HANDSHAKE: 403::Handshake denied. Caused by: [org.apache.camel.component.salesforce.api.SalesforceException - Aborting restart attempt due to: Error during HANDSHAKE: 403::Handshake denied] org.apache.camel.component.salesforce.api.SalesforceException: Aborting restart attempt due to: Error during HANDSHAKE: 403::Handshake denied
then the stacktrace.


When going deeped in analyzing, we figure out that Salesforce, after such a loss of network, can answer by a 401 code (subscription to channel is not valid anymore)  and in some circumstances by a 403 code (authentication is not valid anymore - the refresh token has been invalidated by salesforce).

401 code implies that the client reissue a login with same refreshToken.
403 code implies that the client reissue a new login phase ( thus invalidating the previous refreshToken).


401 code is already handled by SubscriptionHelper, while 403 is not.
see the doStart() method after the handshakeError test
",Salesforce API version 41.0 (we don't know if this affect other API versions),,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-02 12:24:26.485,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 15:10:54 UTC 2017,,,,,,,0|i3mb0v:,9223372036854775807,,,,,,,,,02/Nov/17 12:24;davsclaus;Thanks for reporting. Would you be able to work on a github PR that fixes this and includes 403 as well.,"02/Nov/17 14:32;githubbot;GitHub user mabroukb opened a pull request:

    https://github.com/apache/camel/pull/2074

    clearing salesforce session when bayeux client receive 403 

    clearing salesforce session when bayeux client receive 403 
    https://issues.apache.org/jira/browse/CAMEL-11980

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mabroukb/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2074.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2074
    
----
commit e7bd3962f16fe5e68304118cc8d717435d26217c
Author: Mabrouk Belhout <mabrouk.belhout@capgemini.com>
Date:   2017-11-02T13:49:23Z

    clearing salesforce session when bayeux client receive 403 (https://issues.apache.org/jira/browse/CAMEL-11980)

----
","02/Nov/17 14:42;mabroukb;I proposed a PR.
can you check ?","02/Nov/17 15:10;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2074
",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kubernetes: cannot use the same cluster view to start a master route and a custom service,CAMEL-11897,13108830,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,12/Oct/17 08:22,11/Nov/17 11:42,14/Mar/19 02:43,11/Nov/17 11:42,,,,,,,,,,,,,2.20.1,,,,,,,,0,,,,,,"Using the camel-master on a route like:

{code}
from(""master:mylock:timer:clock"")
  .log(""Hello World!"");
{code}

And a custom service like:
{code}
clusterService.getView(""mylock"").addEventListener((CamelClusterEventListener.Leadership) (view, leader) -> {
  LOG.info(""The leader is {}"", leader);
});
{code}

produces an incorrect result as the route is not started, while the log is printed on the pod that becomes leader.

If I use a master route like ""master:lock1:timer:clock"" and use the view ""lock2"" in the custom service, everything works as expected.

Example here: https://github.com/nicolaferraro/camel-leader-election",,,,,,,,,,,,CAMEL-11900,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-12 10:35:13.732,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 12:38:13 UTC 2017,,,,,,,0|i3l6af:,9223372036854775807,,,,,,,,,12/Oct/17 10:35;lb;This may be related to CAMEL-11899,12/Oct/17 12:38;nferraro;Probably CAMEL-11900 is the original cause. Will make some tests when it's fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompositeApiClient cannot handle null ResponseStream,CAMEL-11785,13103162,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dickengeorge,dickengeorge,19/Sep/17 07:36,19/Sep/17 15:29,14/Mar/19 02:43,19/Sep/17 11:37,2.19.3,,,,,,,,,,,,2.19.4,2.20.0,,,camel-salesforce,,,,0,,,,,,"The class DefaultCompositeApiClient cannot handle null responsestream send out during an update process.

Need to handle null as a valid response format other than Json and XML",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-19 07:50:33.312,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Tue Sep 19 15:29:18 UTC 2017,,,,,,,0|i3k813:,9223372036854775807,,,,,,,,,"19/Sep/17 07:50;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1939

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    CompositeApiClient doesnt treat null as a valid response for a composite batch call. It currently handles only Json and XML format. However, null is a valid response for an update composite batch query. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1939.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1939
    
----
commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

commit e7bddc8cdec93cf7a194bb80da2324875344709a
Author: Guy Veraghtert <guy.veraghtert@aca-it.be>
Date:   2017-05-15T13:22:19Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 5ab2c8d830af4842d331c08b79c67d5ba731171c
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T08:39:11Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 785d2b32d13e2807b50df081708f523c1ef9b2dc
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:09:18Z

    Camel-hystrix test, which checks if the Hystrix in the route is
    short-circuited after some errors.

commit 398f14bf41a346b8be1728b1fff477b48d0df97b
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:51:21Z

    Fixing source stile

commit 51da163c6b2834858952f2f1d2fe833ffcce6f93
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T13:21:43Z

    Fixing Camel hystrix issue:
    https://issues.apache.org/jira/browse/CAMEL-11279

commit 31eb7d688b8a0a6b77df61f4b2948003b18af1e8
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:00:47Z

    CAMEL-11279: Polished

commit 750d7aa71131c4c222e60029a7ffeb988a380c6d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:35:49Z

    CAMEL-11283: camel-hystrix-starter - The circuitBreakerForceClose option is default true which should be false

commit e92502113f0a10e90a2bee4051027847bedf3ee2
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:26:51Z

    CAMEL-11279: Updated hystrix example

commit a3060338952095f8793ddb3efaa10cd8b329ff6e
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:45:42Z

    CAMEL-11279: Fixed test

commit 921fa67da22406de8687c98112c9fa5075382d51
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:42:43Z

    CAMEL-11279: Fixed CS

commit 4d7d173059c2209f7943a40d574803122d4e1062
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-16T11:37:09Z

    CAMEL-11265: Fix maven warning about fork option

commit 1572b3de455d51bbf31dc6613f1b80432b8fbccb
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:48:33Z

    CAMEL-11272: ReloadStrategySupport wrongly logs

commit ccdfa1a02c60f77be93dafd21488f16da4899baa
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:52:15Z

    CAMEL-11273: Allow to load routeContext with live reload routes from xml files support. Thanks to Ronny Aerts for the patch. This closes #1693

commit 445ef3d835e4e21a68a84638451b4e8810f8fc81
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:46:36Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit 221e0f25fa912ef5192dd4d7f6ea634f8af90b8d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:52:05Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit bc186de0910315abdc50a8c5c80b022911461520
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-16T16:05:19Z

    CAMEL-11289: camel-ehcache: allow to configure cache manager on component

commit 18ac6527911b65c54be4e72db14025c120dd30a6
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-05-16T16:09:09Z

    CAMEL-11288: camel-grpc producer incorrectly called async services

commit 6d820defcb8752566b501ceec8e74bb01143fff5
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-18T19:29:26Z

    Add schema references for release 2.17.7
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 04c4de84687579b1f26fb536c21b0ad90d1fbeb1
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T10:18:57Z

    CAMEL-11235: Resolved an issue where a method inherited from a superclass overrides a superinterface method

commit aef52c315e5fcd8a9bb2d538606ac32a1372e2fc
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T11:13:15Z

    CAMEL-11235: Used the new override from getMethodInfo(...)

commit 5f40bbb4b8a03ea588d70135cf93154c928964af
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:23:51Z

    CAMEL-11235: Added unit test. This closes #1703

commit 68ba27f2c507a5f3890fa682aa3eb3b0f286e2cd
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:42:57Z

    Upgrade artemis

commit f96c5823254b8a2caf5ba716961b5d658f32de9b
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:53:24Z

    Fixed test on osx

commit 6e7b709334c56365b8526cacf5975c3829d508f3
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-21T16:56:48Z

    CAMEL-11305: camel-test - Using dump route coverage with custom processor may cause NPE

----
","19/Sep/17 09:25;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1939
","19/Sep/17 09:55;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1939

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    CompositeApiClient doesnt treat null as a valid response for a composite batch call. It currently handles only Json and XML format. However, null is a valid response for an update composite batch query. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1939.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1939
    
----
commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

commit e7bddc8cdec93cf7a194bb80da2324875344709a
Author: Guy Veraghtert <guy.veraghtert@aca-it.be>
Date:   2017-05-15T13:22:19Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 5ab2c8d830af4842d331c08b79c67d5ba731171c
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T08:39:11Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 785d2b32d13e2807b50df081708f523c1ef9b2dc
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:09:18Z

    Camel-hystrix test, which checks if the Hystrix in the route is
    short-circuited after some errors.

commit 398f14bf41a346b8be1728b1fff477b48d0df97b
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:51:21Z

    Fixing source stile

commit 51da163c6b2834858952f2f1d2fe833ffcce6f93
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T13:21:43Z

    Fixing Camel hystrix issue:
    https://issues.apache.org/jira/browse/CAMEL-11279

commit 31eb7d688b8a0a6b77df61f4b2948003b18af1e8
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:00:47Z

    CAMEL-11279: Polished

commit 750d7aa71131c4c222e60029a7ffeb988a380c6d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:35:49Z

    CAMEL-11283: camel-hystrix-starter - The circuitBreakerForceClose option is default true which should be false

commit e92502113f0a10e90a2bee4051027847bedf3ee2
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:26:51Z

    CAMEL-11279: Updated hystrix example

commit a3060338952095f8793ddb3efaa10cd8b329ff6e
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:45:42Z

    CAMEL-11279: Fixed test

commit 921fa67da22406de8687c98112c9fa5075382d51
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:42:43Z

    CAMEL-11279: Fixed CS

commit 4d7d173059c2209f7943a40d574803122d4e1062
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-16T11:37:09Z

    CAMEL-11265: Fix maven warning about fork option

commit 1572b3de455d51bbf31dc6613f1b80432b8fbccb
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:48:33Z

    CAMEL-11272: ReloadStrategySupport wrongly logs

commit ccdfa1a02c60f77be93dafd21488f16da4899baa
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:52:15Z

    CAMEL-11273: Allow to load routeContext with live reload routes from xml files support. Thanks to Ronny Aerts for the patch. This closes #1693

commit 445ef3d835e4e21a68a84638451b4e8810f8fc81
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:46:36Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit 221e0f25fa912ef5192dd4d7f6ea634f8af90b8d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:52:05Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit bc186de0910315abdc50a8c5c80b022911461520
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-16T16:05:19Z

    CAMEL-11289: camel-ehcache: allow to configure cache manager on component

commit 18ac6527911b65c54be4e72db14025c120dd30a6
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-05-16T16:09:09Z

    CAMEL-11288: camel-grpc producer incorrectly called async services

commit 6d820defcb8752566b501ceec8e74bb01143fff5
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-18T19:29:26Z

    Add schema references for release 2.17.7
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 04c4de84687579b1f26fb536c21b0ad90d1fbeb1
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T10:18:57Z

    CAMEL-11235: Resolved an issue where a method inherited from a superclass overrides a superinterface method

commit aef52c315e5fcd8a9bb2d538606ac32a1372e2fc
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T11:13:15Z

    CAMEL-11235: Used the new override from getMethodInfo(...)

commit 5f40bbb4b8a03ea588d70135cf93154c928964af
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:23:51Z

    CAMEL-11235: Added unit test. This closes #1703

commit 68ba27f2c507a5f3890fa682aa3eb3b0f286e2cd
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:42:57Z

    Upgrade artemis

commit f96c5823254b8a2caf5ba716961b5d658f32de9b
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:53:24Z

    Fixed test on osx

commit 6e7b709334c56365b8526cacf5975c3829d508f3
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-21T16:56:48Z

    CAMEL-11305: camel-test - Using dump route coverage with custom processor may cause NPE

----
","19/Sep/17 09:56;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1939
","19/Sep/17 09:58;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1940

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    The DefaultCompositeApiClient class didnt consider null as a valid response stream and was only considering Json and XML format. But it has to also handle null responses, incase we have an update query.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DG007/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1940.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1940
    
----
commit 3f49257f0e37b0fcff009820795e6bf68ed6249d
Author: GeorgeD <georged@hgdeclfr002861.grp.haufemg.com>
Date:   2017-09-19T09:54:50Z

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

----
",19/Sep/17 11:37;davsclaus;Thanks for the PR,"19/Sep/17 11:38;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1940
","19/Sep/17 11:40;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1940

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    The DefaultCompositeApiClient class didnt consider null as a valid response stream and was only considering Json and XML format. But it has to also handle null responses, incase we have an update query.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DG007/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1940.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1940
    
----
commit 3f49257f0e37b0fcff009820795e6bf68ed6249d
Author: GeorgeD <georged@hgdeclfr002861.grp.haufemg.com>
Date:   2017-09-19T09:54:50Z

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

----
","19/Sep/17 15:28;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1940
",19/Sep/17 15:29;dickengeorge;Problem is now fixed and merged with versions 2.20.0 and 2.19.4,,,,,,,,,,,,,,,,,,,,
Sjms with Artemis causes NullPointerException due to a ClassCastException,CAMEL-11772,13101661,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wilhelmd,wilhelmd,12/Sep/17 14:12,15/Sep/17 14:12,14/Mar/19 02:43,13/Sep/17 07:47,2.19.0,2.19.1,2.19.2,,,,,,,,,,2.18.5,2.19.4,2.20.0,,camel-sjms,,,,0,,,,,,"When using a camel-sjms endpoint with an Apache Artemis broker, the sjms endpoint will throw a NullPointerException in the org.apache.camel.component.sjms.consumer.AbstractMessageHandler.onMessage method.  However, this exception is actually masking the real exception within sjms.  In SjmsMessage.java the method getDestinationAsString gets called with a javax.jms.Destination object.  In this case, it is a org.apache.activemq.artemis.jms.client.ActiveMQDestination.  The ActiveMQDestination is neither a javax.jms.Topic nor a javax.jms.Queue.  In the getDestinationAsString method in SjmsMessage.java, it first checks to see if the destination is a Topic and then if it is not it blindly casts to a javax.jms.Queue and in this case causes a ClassCastException.",,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-12 14:21:35.983,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Fri Sep 15 14:02:42 UTC 2017,,,,,,,0|i3jywf:,9223372036854775807,,,,,,,,,"12/Sep/17 14:21;githubbot;GitHub user derekwilhelm opened a pull request:

    https://github.com/apache/camel/pull/1932

    CAMEL-11772 - Fix potential ClassCastException in SjmsMessage.java

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/derekwilhelm/camel CAMEL-11772

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1932.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1932
    
----
commit b9baeba2128d9ef6d67c4651033e982e6e945665
Author: derekwilhelm <derek.wilhelm@connexta.com>
Date:   2017-09-12T14:19:06Z

    CAMEL-11772 - Fix potential ClassCastException in SjmsMessage.java

----
","12/Sep/17 14:24;davsclaus;Thanks for reporting. Yeah it looks like Artemis is just a javax.jms.Destination that is neither a queue or a topic, so its a bit hard to delude what it is, via regular javax jms apis - :(

https://github.com/apache/activemq-artemis/blob/master/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQDestination.java

","12/Sep/17 14:28;davsclaus;Its the same problem with Artemis in camel-jms
https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java#L256","12/Sep/17 14:30;davsclaus;We need to do

1) that class cast fix from the PR
2) if the returned id is null, then call return super.createMessageId() in the createMessageId method

This fix needs in camel-jms, camel-sjms and camel-sjms2


",12/Sep/17 15:17;wilhelmd;I updated the PR to include a check if the getDestinationAsString method returns null in both camel-sjms and camel-jms.  camel-sjms2 looks like it uses camel-sjms for this piece so it should be covered by the fix to camel-sjms.,13/Sep/17 07:47;davsclaus;Thanks for reporting and the PR,"15/Sep/17 14:02;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1932
",,,,,,,,,,,,,,,,,,,,,,,
camel-google-bigquery : Incorrectly set partition name,CAMEL-11733,13099146,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,emin,emin,01/Sep/17 06:04,05/Sep/17 09:21,14/Mar/19 02:43,04/Sep/17 13:35,,,,,,,,,,,,,2.20.0,,,,,,,,0,,,,,,"When Partition Decorator is set as:

{code:java}
.setHeader(GoogleBigQueryConstants.PARTITION_DECORATOR,simple(""20170901""))
{code}

The exception is thrown:
{code}
Invalid table ID \\\""table_name?20170901
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-04 11:50:06.275,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Sep 05 09:21:32 UTC 2017,,,,,,,0|i3jjdj:,9223372036854775807,,,,,,,,,"04/Sep/17 11:50;githubbot;GitHub user evmin opened a pull request:

    https://github.com/apache/camel/pull/1914

    CAMEL-11733: Fixed partition character

    Resolved the issue where the partition taken from the Header is not correctly defined.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ScentreGroup/camel CAMEL-11733

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1914.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1914
    
----
commit 79a9868b5a78b9b80198e9e75fd0e29cc45dfbf0
Author: Sarel Lugtenburg <sarel.lugtenburg@scentregroup.com>
Date:   2017-09-03T21:31:07Z

    CAMEL-11733: Fixed partition character

----
","05/Sep/17 09:21;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1914
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ahc - No way to disable url encoding,CAMEL-11671,13094727,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,convoi,convoi,15/Aug/17 10:20,24/Aug/17 11:05,14/Mar/19 02:43,21/Aug/17 08:17,2.19.1,,,,,,,,,,,,2.19.3,2.20.0,,,camel-ahc,,,,0,,,,,,"There currently seems to be now way to really disable url encoding for ahc urls with query parameters.

I even tried to use my own ahc binding.
The problem seems to be, that the AhcProducer uses this section:

{code}
 public boolean process(Exchange exchange, AsyncCallback callback) {
        try {
            // AHC supports async processing
            Request request = getEndpoint().getBinding().prepareRequest(getEndpoint(), exchange);
            log.debug(""Executing request {} "", request);
            client.prepareRequest(request).execute(new AhcAsyncHandler(exchange, callback, request.getUrl(), getEndpoint().getBufferSize()));
            return false;
        } catch (Exception e) {
            exchange.setException(e);
            callback.done(true);
            return true;
        }
    }
{code}

By calling {{client.prepareRequest(request)}} the already created request will be turned again into a request builder with enabled url encoding.
From my perspective this makes no sense:

# we could already return a request builder from the AhcBinding, which would save us some processing time
# the settings on this request builder would then not be overriden 

But I can see this would be a breaking change in the API of the AhcBinding.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-15 11:40:45.521,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Thu Aug 24 09:36:43 UTC 2017,,,,,,,0|i3isun:,9223372036854775807,,,,,,,,,"15/Aug/17 11:21;convoi;actually there might be an even simpler way:
instead of 
{{client.prepareRequest(request).execute(new AhcAsyncHandler(exchange, callback, request.getUrl(), getEndpoint().getBufferSize()));}}

why dont we do
{{client.executeRequest(request, new AhcAsyncHandler(exchange, callback, request.getUrl(), getEndpoint().getBufferSize()));}}","15/Aug/17 11:40;githubbot;GitHub user convoi opened a pull request:

    https://github.com/apache/camel/pull/1892

    CAMEL-11671 dont rebuild the request and respect url encoding of the original request

    imho it makes no sense to rebuild the request. the prepare methods are mostly used for a) prototyped requests or b) simplified requests in form of simple urls.
    we however already have a prepared request (not a prototype).


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/convoi/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1892.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1892
    
----
commit 03b3a4dcd8f211a50bb28f5073bcab20f492c83a
Author: Justin Heesemann <jheesemann@gmail.com>
Date:   2017-08-15T11:30:00Z

    CAMEL-11671 dont rebuild the request and respect url encoding of the original request

----
","24/Aug/17 09:36;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1892
",,,,,,,,,,,,,,,,,,,,,,,,,,,
CompositeApiClient class in the camel-salesforces component cannot close a null InputStream,CAMEL-11668,13094424,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,zregvart,dickengeorge,dickengeorge,14/Aug/17 09:53,15/Aug/17 10:47,14/Mar/19 02:43,14/Aug/17 18:45,2.19.3,,,,,,,,,,,,2.20.0,,,,camel-salesforce,,,,0,easyfix,,,,,"In the class DefaultCompositeApiClient.java the method
<T> Optional<T> tryToReadResponse(final Class<T> expectedType, final InputStream responseStream) 
cannot handle a null InputStream. ","Windows 10, Eclipse Oxygen IDE with Java J2SE",,,1800,1800,,0%,1800,1800,,,,,,,,,14/Aug/17 11:10;dickengeorge;camel-salesforce.patch;https://issues.apache.org/jira/secure/attachment/12881718/camel-salesforce.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-08-14 11:15:39.517,,,no_permission,,Novice,,,,Patch,,,,,,,,9223372036854775807,,,Tue Aug 15 10:47:00 UTC 2017,,,Patch Available,,,,0|i3iqzz:,9223372036854775807,,,,,,,,,14/Aug/17 11:11;dickengeorge;The problem can be resolved by checking if the responseStream is null or not before closing the Stream.,"14/Aug/17 11:15;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1886

    Camel 2.19.x

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1886.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1886
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

commit 63dc5f7fa8e4d75bbdabdc993c2ba6f47534ef57
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T11:02:08Z

    CAMEL-11267 Add SpanDecorator for the 'rest' component

commit a2487f5ee533495dc81fd6adad9d67d8367cd8ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T16:17:38Z

    CAMEL-11267 Updated to obtain parameters from original endpoint URI and use curly braces

commit 926f9def75b32a5861d3dfe5028222efe0b7307b
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-13T16:51:04Z

    Change error to debug

commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
","14/Aug/17 12:55;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1886
","14/Aug/17 13:01;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1886

    Camel 2.19.x

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1886.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1886
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

commit 63dc5f7fa8e4d75bbdabdc993c2ba6f47534ef57
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T11:02:08Z

    CAMEL-11267 Add SpanDecorator for the 'rest' component

commit a2487f5ee533495dc81fd6adad9d67d8367cd8ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T16:17:38Z

    CAMEL-11267 Updated to obtain parameters from original endpoint URI and use curly braces

commit 926f9def75b32a5861d3dfe5028222efe0b7307b
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-13T16:51:04Z

    Change error to debug

commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
","14/Aug/17 13:03;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1886
","14/Aug/17 13:04;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1886

    Camel 2.19.x

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1886.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1886
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

commit 63dc5f7fa8e4d75bbdabdc993c2ba6f47534ef57
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T11:02:08Z

    CAMEL-11267 Add SpanDecorator for the 'rest' component

commit a2487f5ee533495dc81fd6adad9d67d8367cd8ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T16:17:38Z

    CAMEL-11267 Updated to obtain parameters from original endpoint URI and use curly braces

commit 926f9def75b32a5861d3dfe5028222efe0b7307b
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-13T16:51:04Z

    Change error to debug

commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
","14/Aug/17 13:27;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1886
","14/Aug/17 16:04;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1889

    CAMEL-11668

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DG007/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1889.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1889
    
----
commit 466c34431980323c801b0100a9f80bda0682074e
Author: dg007 <dicken.george@haufe-lexware.com>
Date:   2017-08-14T16:03:24Z

    CAMEL-11668
    
    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

----
",14/Aug/17 18:45;zregvart;Thanks for the PR!,"15/Aug/17 07:48;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1889
",15/Aug/17 10:47;dickengeorge;The problem has been resolved with an implementation of IOHelper utility and now merged with the master branch,,,,,,,,,,,,,,,,,,,
camel-univocity-parsers - A number of stream closed exception in tests,CAMEL-11595,13089984,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,aldettinger,davsclaus,davsclaus,25/Jul/17 18:25,11/Jun/18 19:57,14/Mar/19 02:43,10/Jun/18 16:01,2.21.1,2.22.0,,,,,,,,,,,2.21.2,2.22.0,,,tests,,,,0,,,,,,"I wonder if we can look into these exceptions during these tests. It may be just that we need a nicer stop/cleanup of the test or something else.

{code}
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalSpringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.553 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.822 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.346 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.669 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.84 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalSpringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.638 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.826 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatTest
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.344 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.715 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.837 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalSpringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.609 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.829 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.344 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.658 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.838 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest
[INFO]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-10 11:35:58.172,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Jun 11 19:57:13 UTC 2018,,,,,,,0|i3hzyv:,9223372036854775807,,,,,,,,,"10/Jun/18 11:35;githubbot;aldettinger opened a new pull request #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Jun/18 11:35;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2367

    CAMEL-11595: Fixed stream closed exception in tests

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2367.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2367
    
----
commit e0378a6b767b1af3ed6bb055b888e9d00a2eebe8
Author: aldettinger <aldettinger@...>
Date:   2018-06-10T11:33:21Z

    CAMEL-11595: Fixed stream closed exception in tests

----
","10/Jun/18 11:37;githubbot;aldettinger commented on issue #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367#issuecomment-396042201
 
 
   Please, see [CAMEL-11595](https://issues.apache.org/jira/browse/CAMEL-11595) for more details.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Jun/18 11:39;aldettinger;It's actually a bug in camel-univocity-parsers. The responsibility of closing the reader lies with univocity-parsers on its own.

Camel tests were not able to detect this issue because of another bug in univocity-parsers.","10/Jun/18 11:47;githubbot;aldettinger commented on issue #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367#issuecomment-396042690
 
 
   It would actually introduce a regression as demonstrated by those 2 ignored tests. Will rework with respect to this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Jun/18 11:47;githubbot;aldettinger closed pull request #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
index b4c8deec47f..8a7c4fa95f4 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
@@ -116,15 +116,13 @@ protected CPS initialValue() {
             }
         }
 
+        HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
+        CPS settings = parserSettings.get();
+        settings.setProcessor(headerRowProcessor);
+        P parser = createParser(settings);
+        // univocity-parsers is responsible for closing the reader, even in case of error
         Reader reader = new InputStreamReader(stream, getCharsetName(exchange));
-        try {
-            HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
-            CPS settings = parserSettings.get();
-            settings.setRowProcessor(headerRowProcessor);
-            return unmarshaller.unmarshal(reader, createParser(settings), headerRowProcessor);
-        } finally {
-            reader.close();
-        }
+        return unmarshaller.unmarshal(reader, parser, headerRowProcessor);
     }
 
     /**
diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
index e3a3d05d170..1f4a02837df 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
@@ -19,7 +19,7 @@
 import java.io.Writer;
 import java.util.LinkedHashMap;
 
-import com.univocity.parsers.fixed.FixedWidthFieldLengths;
+import com.univocity.parsers.fixed.FixedWidthFields;
 import com.univocity.parsers.fixed.FixedWidthFormat;
 import com.univocity.parsers.fixed.FixedWidthParser;
 import com.univocity.parsers.fixed.FixedWidthParserSettings;
@@ -188,7 +188,7 @@ protected void configureFormat(FixedWidthFormat format) {
      *
      * @return new {@code FixedWidthFieldLengths} based on the header and field lengthsl
      */
-    private FixedWidthFieldLengths createFixedWidthFieldLengths() {
+    private FixedWidthFields createFixedWidthFieldLengths() {
         // Ensure that the field lengths have been defined.
         if (fieldLengths == null) {
             throw new IllegalArgumentException(""The fieldLengths must have been defined in order to use the fixed-width format."");
@@ -196,7 +196,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
 
         // If there's no header then we only use their length
         if (headers == null) {
-            return new FixedWidthFieldLengths(fieldLengths);
+            return new FixedWidthFields(fieldLengths);
         }
 
         // Use both headers and field lengths (same size and no duplicate headers)
@@ -210,7 +210,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
         if (fields.size() != headers.length) {
             throw new IllegalArgumentException(""The headers cannot have duplicates in order to use the fixed-width format."");
         }
-        return new FixedWidthFieldLengths(fields);
+        return new FixedWidthFields(fields);
     }
 
     @Override
diff --git a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java
index 7b07e212638..775501c20dc 100644
--- a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java
+++ b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java
@@ -21,6 +21,7 @@
 import org.apache.camel.EndpointInject;
 import org.apache.camel.component.mock.MockEndpoint;
 import org.apache.camel.test.spring.CamelSpringTestSupport;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.context.support.AbstractApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
@@ -105,6 +106,7 @@ public void shouldMarshalWithSpecificHeaders() throws Exception {
      * Tests that we can marshal fixed-width using and advanced configuration
      */
     @Test
+    @Ignore(""TODO: Should be fixed from univocity-parsers 2.6.4 onward. https://github.com/uniVocity/univocity-parsers/issues/238"")
     public void shouldMarshalUsingAdvancedConfiguration() throws Exception {
         template.sendBody(""direct:advanced"", Arrays.asList(
                 asMap(""A"", null, ""B"", """"),
diff --git a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java
index 6789da152db..b025f2e625a 100644
--- a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java
+++ b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java
@@ -25,6 +25,7 @@
 import org.apache.camel.component.mock.MockEndpoint;
 import org.apache.camel.spi.DataFormat;
 import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.apache.camel.dataformat.univocity.UniVocityTestHelper.asMap;
@@ -106,6 +107,7 @@ public void shouldMarshalWithSpecificHeaders() throws Exception {
      * Tests that we can marshal fixed-width using and advanced configuration
      */
     @Test
+    @Ignore(""TODO: Should be fixed from univocity-parsers 2.6.4 onward. https://github.com/uniVocity/univocity-parsers/issues/238"")
     public void shouldMarshalUsingAdvancedConfiguration() throws Exception {
         template.sendBody(""direct:advanced"", Arrays.asList(
                 asMap(""A"", null, ""B"", """"),
diff --git a/parent/pom.xml b/parent/pom.xml
index 2342640e359..4e18f68e585 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -694,7 +694,7 @@
     <twitter4j-version>4.0.6</twitter4j-version>
     <uberfire-maven-support-version>1.3.0.Final</uberfire-maven-support-version>
     <undertow-version>1.4.25.Final</undertow-version>
-    <univocity-parsers-version>2.3.1</univocity-parsers-version>
+    <univocity-parsers-version>2.6.3</univocity-parsers-version>
     <unix-socket-factory-version>2015-01-27T15-02-14</unix-socket-factory-version>
     <unix-socket-factory-bundle-version>1.0.0</unix-socket-factory-bundle-version>
     <urlrewritefilter-version>4.0.4</urlrewritefilter-version>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Jun/18 11:47;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2367
","10/Jun/18 12:01;githubbot;aldettinger opened a new pull request #2368: CAMEL-11595: Fixed the reader premature closure by competing threads
URL: https://github.com/apache/camel/pull/2368
 
 
   See [CAMEL-11595](https://issues.apache.org/jira/browse/CAMEL-11595) for context.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Jun/18 12:01;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2368

    CAMEL-11595: Fixed the reader premature closure by competing threads

    See [CAMEL-11595](https://issues.apache.org/jira/browse/CAMEL-11595) for context.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2368.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2368
    
----
commit 80fe56f69396c49559e01d32e25cfd9ea05c5390
Author: aldettinger <aldettinger@...>
Date:   2018-06-10T11:59:28Z

    CAMEL-11595: Fixed the reader premature closure by competing threads

----
","10/Jun/18 16:02;githubbot;aldettinger commented on issue #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368#issuecomment-396060339
 
 
   Thanks guys, merged on master and camel-2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Jun/18 16:02;githubbot;aldettinger closed pull request #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
index b4c8deec47f..8a7c4fa95f4 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
@@ -116,15 +116,13 @@ protected CPS initialValue() {
             }
         }
 
+        HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
+        CPS settings = parserSettings.get();
+        settings.setProcessor(headerRowProcessor);
+        P parser = createParser(settings);
+        // univocity-parsers is responsible for closing the reader, even in case of error
         Reader reader = new InputStreamReader(stream, getCharsetName(exchange));
-        try {
-            HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
-            CPS settings = parserSettings.get();
-            settings.setRowProcessor(headerRowProcessor);
-            return unmarshaller.unmarshal(reader, createParser(settings), headerRowProcessor);
-        } finally {
-            reader.close();
-        }
+        return unmarshaller.unmarshal(reader, parser, headerRowProcessor);
     }
 
     /**
diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
index e3a3d05d170..1f4a02837df 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
@@ -19,7 +19,7 @@
 import java.io.Writer;
 import java.util.LinkedHashMap;
 
-import com.univocity.parsers.fixed.FixedWidthFieldLengths;
+import com.univocity.parsers.fixed.FixedWidthFields;
 import com.univocity.parsers.fixed.FixedWidthFormat;
 import com.univocity.parsers.fixed.FixedWidthParser;
 import com.univocity.parsers.fixed.FixedWidthParserSettings;
@@ -188,7 +188,7 @@ protected void configureFormat(FixedWidthFormat format) {
      *
      * @return new {@code FixedWidthFieldLengths} based on the header and field lengthsl
      */
-    private FixedWidthFieldLengths createFixedWidthFieldLengths() {
+    private FixedWidthFields createFixedWidthFieldLengths() {
         // Ensure that the field lengths have been defined.
         if (fieldLengths == null) {
             throw new IllegalArgumentException(""The fieldLengths must have been defined in order to use the fixed-width format."");
@@ -196,7 +196,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
 
         // If there's no header then we only use their length
         if (headers == null) {
-            return new FixedWidthFieldLengths(fieldLengths);
+            return new FixedWidthFields(fieldLengths);
         }
 
         // Use both headers and field lengths (same size and no duplicate headers)
@@ -210,7 +210,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
         if (fields.size() != headers.length) {
             throw new IllegalArgumentException(""The headers cannot have duplicates in order to use the fixed-width format."");
         }
-        return new FixedWidthFieldLengths(fields);
+        return new FixedWidthFields(fields);
     }
 
     @Override


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Jun/18 16:02;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2368
","11/Jun/18 00:42;githubbot;WillemJiang commented on a change in pull request #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368#discussion_r194275835
 
 

 ##########
 File path: components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
 ##########
 @@ -188,15 +188,15 @@ protected void configureFormat(FixedWidthFormat format) {
      *
      * @return new {@code FixedWidthFieldLengths} based on the header and field lengthsl
 
 Review comment:
   This Java doc need to be updated.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Jun/18 19:57;githubbot;aldettinger commented on issue #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368#issuecomment-396366820
 
 
   Thanks for spotting this @WillemJiang. I will fix in a dedicated commit.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,
NPE when not setting a sampling interval on client subscriptions,CAMEL-11559,13088322,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ctron,ctron,19/Jul/17 08:19,19/Jul/17 15:15,14/Mar/19 02:43,19/Jul/17 12:20,2.19.1,,,,,,,,,,,,2.19.2,2.20.0,,,,,,,0,easyfix,,,,,"Due to an internal unintended auto-unboxing from {{Double}} to {{double}} milo may run into an NPE when the sampling interval is unset in the camel-milo component.

I will provide a fix for this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-19 08:32:58.528,,,no_permission,,Moderate,,126,https://github.com/eclipse/milo/pull/126,,,,,,,,,9223372036854775807,,,Wed Jul 19 15:15:16 UTC 2017,,,,,,,0|i3hq3z:,9223372036854775807,,,,,,,,,"19/Jul/17 08:32;githubbot;GitHub user ctron opened a pull request:

    https://github.com/apache/camel/pull/1833

    CAMEL-11559: Work around a NPE in milo 0.1.3

    When the sampling interval is unset in the Camel component, then it is passed to milo as `null`. Which is acceptable to the milo API, however internally milo automatically unboxes the value from `Double` to `double` and may run into a NPE by doing so.
    
    This patch assures that, although theoretically acceptable, `null` is never passed in to the Milo API.
    
    Signed-off-by: Jens Reimann <jreimann@redhat.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ctron/camel feature/fix_issue_11559

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1833.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1833
    
----
commit 1a692127f54990e72dcbf1d56f83b0e3cb9df20e
Author: Jens Reimann <jreimann@redhat.com>
Date:   2017-07-19T08:21:33Z

    CAMEL-11559: Work around a NPE in milo 0.1.3
    
    When the sampling interval is unset in the Camel component, then it is
    passed to milo as 'null'. Which is acceptable to the milo API, however
    internally milo automatically unboxes the value from 'Double' to
    'double' and may run into a NPE by doing so.
    
    This patch assures that, although theoretically acceptable,
    'null' is never passed in to the Milo API.
    
    Signed-off-by: Jens Reimann <jreimann@redhat.com>

----
",19/Jul/17 08:34;ctron;The provided fix should also be applied to the most recent camel branch.,"19/Jul/17 12:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1833
",19/Jul/17 15:15;ctron;PR was merged,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow consumer shall use InOut ExchangePattern,CAMEL-11548,13087456,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,saravanakumar,saravanakumar,16/Jul/17 21:47,17/Jul/17 11:34,14/Mar/19 02:43,17/Jul/17 08:54,2.19.1,,,,,,,,,,,,2.20.0,,,,camel-undertow,,,,0,,,,,,"Camel-undertow is the odd one among camel-jetty, camel-restlet and netty4-http. It's consumer does not use InOut ExchangePattern and hence Request Reply EIP is not possible on asynchronous endpoints.

For example, below consumer returns ""No response available"" instead of ""Camel rocks!!""
{code}
from(""undertow:http://localhost:8081/api"").to(""seda:foo"");

from(""seda:foo"").process(exchange -> {
	exchange.getIn().setBody(""Camel rocks!!"");
});
{code}

So it also becomes impossible to change to undertow from netty4-http,restlet or camel-jetty while using Rest DSL",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-16 21:53:15.823,,,no_permission,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 17 10:04:35 UTC 2017,,,,,,,0|i3hkrj:,9223372036854775807,,,,,,,,,"16/Jul/17 21:53;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1829

    CAMEL-11548: Making camel-undertow consumer InOut

    I am not really sure if it is intentional that camel-undertow consumer is InOnly. But its the odd one among camel-jetty, camel-restlet and netty4-http. 
    
    Please review the PR for : https://issues.apache.org/jira/browse/CAMEL-11548
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1829.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1829
    
----
commit 6c1c3a53eaf3525ee53d4ef272810003ca09e653
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-07-16T21:47:22Z

    CAMEL-11548: Making camel-undertow consumer InOut

----
","17/Jul/17 08:54;zregvart;Merged from [PR#1829|https://github.com/apache/camel/pull/1829] to {{master}}.

Thanks [~saravanakumar] for the PR!","17/Jul/17 10:04;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1829
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Declaring AWS endpoint with accessKey and secretKey, and without amazonS3Client should be possible.",CAMEL-11489,13083995,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdemande,tdemande,01/Jul/17 13:11,02/Jul/17 13:05,14/Mar/19 02:43,01/Jul/17 18:00,2.19.0,2.19.1,,,,,,,,,,,2.19.2,2.20.0,,,camel-aws,,,,0,,,,,,"CAMEL-9210 introduced  a regression about the ability to specify AWS credentials, and no amazonS3Client reference.

PR will be provided soon to remove the unnecessary mandatory nature of amazonS3Client.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-01 13:24:30.12,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Sat Jul 01 18:51:29 UTC 2017,,,,,,,0|i3gzin:,9223372036854775807,Regression,,,,,,,,"01/Jul/17 13:24;githubbot;GitHub user tdemande opened a pull request:

    https://github.com/apache/camel/pull/1801

    CAMEL-11489: Remove mandatory nature of amazonS3Client when accessKey…

    … and secretKey are provided

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdemande/camel CAMEL-11489

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1801.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1801
    
----
commit 819f8f4eb61d6b548dbf93a434fc69a7506c24ff
Author: Thomas Demande <tdemande@gmail.com>
Date:   2017-07-01T13:19:14Z

    CAMEL-11489: Remove mandatory nature of amazonS3Client when accessKey and secretKey are provided

----
","01/Jul/17 17:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1801
","01/Jul/17 18:00;davsclaus;Thanks for the PR.

I wonder if you would mind checking the other aws components in camel-aws if they have a similar problem, or was it only about this s3?","01/Jul/17 18:51;tdemande;I do not have ready-to-test code about the other components, by I seeing the code, all are probably impacted too if they did permit omitting the amazonS3Client when accessKey and secretKey were provided.

Will check this later and provide an additional PR.",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-rabbitmq - autorecovery creates additional channels,CAMEL-11480,13083427,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,macdln,macdln,29/Jun/17 10:44,07/Nov/17 15:33,14/Mar/19 02:43,02/Nov/17 07:24,2.19.1,,,,,,,,,,,,2.20.0,,,,camel-rabbitmq,,,,0,,,,,,"While testing the automatic recovery for rabbitmq for network failure scenario, I noticed that after recovery, the consumer/channel count is always increasing.

Consider the following codes:
<camel:route id=""in_route"">
			<camel:from uri=""rabbitmq://rabbitmq/myexchange?connectionFactory=#rabbitMqCustomConnectionFactory&amp;addresses={{rabbitmq.nodes}}&amp;queue=myqueue"" />
			<camel:to uri=""log:message received?showBody=true"" />
		</camel:route>

// Custom connection factory
<bean id=""rabbitMqCustomConnectionFactory"" class=""com.rabbitmq.client.ConnectionFactory"">
	<property name=""username"" value=""${rabbitmq.username}"" />
	<property name=""password"" value=""${rabbitmq.password}"" />
</bean>

When the application runs, I see 2 threads running:
* RabbitMQConsumer [camel-rabbitmq library]
* AMQConnection (RecoveryAwareAMQConnection) [amqp-client]

Killing the active rabbitmq server node triggers the auto recovery in the client.
* RabbitConsumer.handleShutdownSignal() successfully reconnects to the other rabbitmq node. 
* At the same time, AutorecoveringConnection.beginAutomaticRecovery is triggered but with some networkRecoveryInterval delay - recovers successfully any existing channels.

As a result, 2 channels/consumers are created - both are active. When there should only be 1 channel to be recovered.

Would it be possible to add a priority whether which recovery mechanism to use? Was thinking of having the AMQConnection recovery execute first before the RabbitConsumer recovery since the latter checks if an existing channel is open before creating a new connection.","rabbitmq server 3.6.2 running on cluster+HA mode (2 nodes), Spring client application using DSL camel configuration",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-12 13:56:48.438,,,no_permission,,Moderate,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 14:25:35 UTC 2017,,,,,,,0|i3gw13:,9223372036854775807,,,,,,,,,"12/Sep/17 13:56;davsclaus;Sounds good, you are welcome to work on a patch / PR
https://github.com/apache/camel/blob/master/CONTRIBUTING.md","31/Oct/17 14:54;hveiga;Hi [~macdln] I added some logic in 2.20.0 that might have fixed this, can you give it a try?","02/Nov/17 07:24;macdln;Hi [~hveiga], I tried testing using the latest version and now it is working! Cheers! :)",02/Nov/17 14:25;hveiga;Good to know! Cheers!,,,,,,,,,,,,,,,,,,,,,,,,,,
Some attributes in spring camel xml can't be replaced by property placeholder when used in spring boot,CAMEL-11440,13082108,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,valdar,valdar,23/Jun/17 12:32,28/Jun/17 14:34,14/Mar/19 02:43,28/Jun/17 14:16,2.18.1,,,,,,,,,,,,2.19.1,,,,camel-spring,camel-spring-boot,,,0,,,,,,"Everything initialized in {{*org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext()*}} using a spring camel xml with spring boot, can not contain a property otherwise this is the exception thrown:

{code}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is java.lang.IllegalStateException: org.springframework.context.annotation.AnnotationConfigApplicationContext@1b99b9f8 has not been refreshed yet
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
        at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:228)
        at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:185)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336)
        at org.springframework.boot.context.event.EventPublishingRunListener.finished(EventPublishingRunListener.java:93)
        at org.springframework.boot.SpringApplicationRunListeners.callFinishedListener(SpringApplicationRunListeners.java:79)
        at org.springframework.boot.SpringApplicationRunListeners.finished(SpringApplicationRunListeners.java:72)
        at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:813)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:326)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175)
        at com.mycompany.Application.main(Application.java:34)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
        at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: org.springframework.context.annotation.AnnotationConfigApplicationContext@1b99b9f8 has not been refreshed yet
        at org.springframework.context.support.AbstractApplicationContext.assertBeanFactoryActive(AbstractApplicationContext.java:1063)
        at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:1177)
        at org.apache.camel.spring.CamelContextFactoryBean.getBeanForType(CamelContextFactoryBean.java:220)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:159)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:275)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
        ... 25 common frames omitted
14:12:57.942 [main] DEBUG o.s.b.d.LoggingFailureAnalysisReporter - Application failed to start due to an exception
org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1466)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1097)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1059)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1022)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
        at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
        at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
        at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:575)
        at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2343)
        at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:354)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:769)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:322)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:275)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
        at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:66)
        at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
        at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:131)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:735)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175)
        at com.mycompany.Application.main(Application.java:34)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
        at java.lang.Thread.run(Thread.java:748)
14:12:57.943 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of method properties in org.apache.camel.spring.boot.CamelAutoConfiguration required a bean of type 'org.apache.camel.CamelContext' that could not be found.
        - Bean method 'camelContext' in 'CamelAutoConfiguration' not loaded because @ConditionalOnMissingBean (types: org.apache.camel.CamelContext; SearchStrategy: all) found bean 'camelMain'


Action:

Consider revisiting the conditions above or defining a bean of type 'org.apache.camel.CamelContext' in your configuration.

[WARNING] 
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:735)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175)
        at com.mycompany.Application.main(Application.java:34)
        ... 6 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
        at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:66)
        at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
        at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:131)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        ... 20 more
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1763)
        at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
        at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:575)
        at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2343)
        at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:354)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:769)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:322)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:275)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
        ... 33 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1022)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
        at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
        at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
        ... 41 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1466)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1097)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1059)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
        ... 53 more
{code}

basically spring while instantiating CamelContext for whatever is in initCamelContext() and need a property resolution will try to find a bean named ""properties"" and not finding it will try to instantiate it from *{{org.apache.camel.spring.boot.CamelAutoConfiguration.properties(CamelContext camelContext, PropertiesParser parser)}}* failing with the mentioned exception.

If an explicit property placeholder is defined like:
{code:xml}
<propertyPlaceholder id=""properties"" location=""application.properties""/>
{code}
then all works fine.

There is a simple reproducer attached.",,,,,,,,,,,,,,,,,,23/Jun/17 12:34;valdar;reproducer.zip;https://issues.apache.org/jira/secure/attachment/12874254/reproducer.zip,27/Jun/17 10:50;valdar;reproducer2.zip;https://issues.apache.org/jira/secure/attachment/12874665/reproducer2.zip,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2017-06-27 08:51:23.672,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 14:34:03 UTC 2017,,,,,,,0|i3gnwf:,9223372036854775807,,,,,,,,,23/Jun/17 12:34;valdar;Reproducer attached.,23/Jun/17 12:36;valdar;[~lb] what are your thoughts about this?,"27/Jun/17 08:51;davsclaus;Hi

It works with Camel 2.19.1 etc.

Remember to set run controller to true if you want the JVM to keep running
camel.springboot.main-run-controller=true","27/Jun/17 10:50;valdar;Hi Claus,

running the reproducer bumping camel version to 2.19.1 seems to solve the issue;
but if I add a {{<restConfiguration>}} component (which was part of my original issue, but  I stripped down the reproducer to the bear minimum), it seems there is another problem:

{code:java}
12:24:55.542 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Invoking afterPropertiesSet() on bean with name 'camelMain'
12:24:55.551 [main] ERROR o.s.boot.SpringApplication - Error handling failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is java.lang.IllegalStateException: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bd655b8 has not been refreshed yet
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:228)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:185)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336)
	at org.springframework.boot.context.event.EventPublishingRunListener.finished(EventPublishingRunListener.java:100)
	at org.springframework.boot.SpringApplicationRunListeners.callFinishedListener(SpringApplicationRunListeners.java:79)
	at org.springframework.boot.SpringApplicationRunListeners.finished(SpringApplicationRunListeners.java:72)
	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:325)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bd655b8 has not been refreshed yet
	at org.springframework.context.support.AbstractApplicationContext.assertBeanFactoryActive(AbstractApplicationContext.java:1063)
	at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:1177)
	at org.apache.camel.spring.CamelContextFactoryBean.getBeanForType(CamelContextFactoryBean.java:234)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:166)
	at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
	... 25 common frames omitted
12:24:55.586 [main] DEBUG o.s.b.diagnostics.FailureAnalyzers - FailureAnalyzer org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer@4e1e0f66 failed
java.lang.NoSuchMethodError: org.springframework.beans.factory.NoSuchBeanDefinitionException.getResolvableType()Lorg/springframework/core/ResolvableType;
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer$BeanMethods.isMatch(NoSuchBeanDefinitionFailureAnalyzer.java:220)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer$BeanMethods.findBeanMethods(NoSuchBeanDefinitionFailureAnalyzer.java:202)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer$BeanMethods.<init>(NoSuchBeanDefinitionFailureAnalyzer.java:190)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.collectReportedConditionOutcomes(NoSuchBeanDefinitionFailureAnalyzer.java:132)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.getAutoConfigurationResults(NoSuchBeanDefinitionFailureAnalyzer.java:120)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.analyze(NoSuchBeanDefinitionFailureAnalyzer.java:79)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.analyze(NoSuchBeanDefinitionFailureAnalyzer.java:53)
	at org.springframework.boot.diagnostics.analyzer.AbstractInjectionFailureAnalyzer.analyze(AbstractInjectionFailureAnalyzer.java:41)
	at org.springframework.boot.diagnostics.AbstractFailureAnalyzer.analyze(AbstractFailureAnalyzer.java:36)
	at org.springframework.boot.diagnostics.FailureAnalyzers.analyze(FailureAnalyzers.java:119)
	at org.springframework.boot.diagnostics.FailureAnalyzers.analyzeAndReport(FailureAnalyzers.java:112)
	at org.springframework.boot.SpringApplication.reportFailure(SpringApplication.java:806)
	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:792)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:325)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
12:24:55.590 [main] ERROR o.s.boot.SpringApplication - Application startup failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:732)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
	at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:71)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:153)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	... 21 common frames omitted
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
	at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:651)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2406)
	at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:430)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:819)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:336)
	at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
	... 34 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1023)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
	... 42 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1463)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1094)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
	... 54 common frames omitted
[WARNING] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:732)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	... 6 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
	at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:71)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:153)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	... 21 more
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
	at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:651)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2406)
	at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:430)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:819)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:336)
	at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
	... 34 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1023)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
	... 42 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1463)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1094)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
	... 54 more

{code}

I've added a second version of the reproducer.",28/Jun/17 14:16;davsclaus;Make sure to upgrade spring boot to 1.5.x as that is required by Camel 2.19.x,"28/Jun/17 14:33;valdar;Hi Claus, tnx for help here; 
I can confirm the issue is fixed using spring boot 1.5.1 + camel 2.19.1 .
",28/Jun/17 14:34;valdar;I can confirm the issue is fixed using spring boot 1.5.1 + camel 2.19.1 .,,,,,,,,,,,,,,,,,,,,,,,
Endless wait when unhandled exception occurs in camel-olingo,CAMEL-11424,13080798,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sarhaynes,sarhaynes,19/Jun/17 11:48,11/Jul/17 15:36,14/Mar/19 02:43,10/Jul/17 20:12,2.17.7,2.19.0,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,camel-olingo2,camel-olingo4,,,0,,,,,,In Olingo2AppImpl.readContent()/writeContent() if a RuntimeError or any other unhandled exception/error occurs the wait for response will never get triggered and the component ends up in an endless wait state.  These functions should be modified to capture any type of throwable/exception/error.,,,,86400,86400,,0%,86400,86400,,,,,,,,,10/Jul/17 17:06;sarhaynes;camel-11424-olingo2.patch;https://issues.apache.org/jira/secure/attachment/12876447/camel-11424-olingo2.patch,10/Jul/17 17:06;sarhaynes;camel-11424-olingo4.patch;https://issues.apache.org/jira/secure/attachment/12876446/camel-11424-olingo4.patch,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2017-06-22 20:42:59.8,,,no_permission,,Novice,,,,Patch,,,,,,,,9223372036854775807,,,Tue Jul 11 15:36:56 UTC 2017,,,Patch Available,,,,0|i3gftz:,9223372036854775807,,,,,,,,,22/Jun/17 20:42;davsclaus;Are you able to work on a patch?,"23/Jun/17 00:01;sarhaynes;I'm working on it.  Hopefully next week.
Sean


-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
",10/Jul/17 15:09;sarhaynes;I have attached a patch showing my recommended solution.  This will make sure the async waits are notified if any type of error occurs during runtime and avoid infinite waits.,"10/Jul/17 16:21;dmvolod;[~sarhaynes], please pay attention, that camel-olingo4 looks like has the same problem and need to by fixed also.","10/Jul/17 16:25;sarhaynes;I have written and attached patch files in JIRA for 11424 and 11423.  The
patch for 11425 will be a little more complex.  Please inspect the changes
and apply them if you feel they are worthy of inclusion.  I did not look at
the Olingo4 component to see if similar issues exist in that branch.
Sean


-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
","10/Jul/17 16:30;dmvolod;Sean,

it would be nice to use GitHub pull request (PR) rather than patch.
Please submit them each one per issue.
Thank you.",10/Jul/17 17:06;sarhaynes;Updated patches for Olingo2 and Olingo4,"10/Jul/17 17:19;sarhaynes;Unfortunately I have not as yet had time to submit the paperwork for direct submitting to Apache, so I am limited to attaching patches.  If someone wants to take the patch and create the pull request, I have no problem with that.  I will submit the apache paperwork when I return to the office tomorrow.",10/Jul/17 17:46;davsclaus;You do not need to fill any paperwork for submitting github PRs. Just do it the standard github way.,"10/Jul/17 19:22;sarhaynes;How am able to create a pull request if I am unable to push to the repo??
You have me completely lost now.  According to the contributing
instructions I have fill out and send in the Apache agreement paperwork
before I'm given access to write to the repo.  I can't push my changes to
the repo if I don't have access and I can't create a PR unless I push my
changes.
Am I missing something?
Sean


-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
","10/Jul/17 19:42;dmvolod;Sean, please perform following steps for creating PR
1. fork an Apache Camel repo on GitHub
2. on your OS host perform
git clone https://github.com/<github username>/camel.git
git remote add origin https://github.com/<github username>/camel.git
git remote add upstream https://github.com/apache/camel.git
3. Fill your user name and email
git config --global user.name ""John Doe""
git config --global user.email johndoe@example.com
4. git checkout -b CAMEL-11424
5. Change the code
6. git push origin CAMEL-11424
7. Create PR on GitHub from submitted branch","10/Jul/17 19:59;githubbot;GitHub user sarhaynes opened a pull request:

    https://github.com/apache/camel/pull/1814

    CAMEL-11424 Fix potential endless wait in camel-olingo2 and camel-olingo4

    This fixes and issue where unhandled exceptions and runtime errors would cause responseHandler to never be triggered causing the routes to hang forever.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarhaynes/camel CAMEL-11424

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1814.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1814
    
----
commit e62376640c1c1efce6fd708a8e12ea2b41afd908
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-10T19:07:45Z

    CAMEL-11424 Fix potential endless wait in camel-olingo2 and
    camel-olingo4

----
","10/Jul/17 20:06;sarhaynes;Thank you.  This is very helpful.

On Mon, Jul 10, 2017 at 3:58 PM Dmitry Volodin (JIRA) <jira@apache.org>

-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
",10/Jul/17 20:12;davsclaus;Thanks for the PR,"11/Jul/17 15:36;githubbot;Github user sarhaynes closed the pull request at:

    https://github.com/apache/camel/pull/1814
",,,,,,,,,,,,,,,
Swagger Rest DSL Generator needs to build before its maven plugin,CAMEL-11322,13074602,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,tcunning,tcunning,24/May/17 18:33,27/May/17 07:34,14/Mar/19 02:43,24/May/17 19:21,,,,,,,,,,,,,2.20.0,,,,tooling,,,,0,,,,,,"When building master, the Swagger REST DSL Generator seems to need to build before the Swagger REST DSL Generator maven plugin :

[INFO] Camel :: Maven Plugins :: Swagger REST DSL Generator Maven plugin FAILURE [ 17.124 s]
[INFO] Camel :: Tooling :: Swagger REST DSL Generator ..... SKIPPED

[ERROR] Failed to execute goal on project camel-restdsl-swagger-plugin: Could not resolve dependencies for project org.apache.camel:camel-restdsl-swagger-plugin:maven-plugin:2.20.0.fuse-000018: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/) -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project camel-restdsl-swagger-plugin: Could not resolve dependencies for project org.apache.camel:camel-restdsl-swagger-plugin:maven-plugin:2.20.0.fuse-000018: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:221)
	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:127)
	at org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:245)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:199)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.project.DependencyResolutionException: Could not resolve dependencies for project org.apache.camel:camel-restdsl-swagger-plugin:maven-plugin:2.20.0.fuse-000018: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:211)
	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:195)
	... 23 more
Caused by: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:384)
	at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:205)
	... 24 more
Caused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:444)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:246)
	at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:367)
	... 25 more
Caused by: org.eclipse.aether.transfer.ArtifactNotFoundException: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.eclipse.aether.connector.basic.ArtifactTransportListener.transferFailed(ArtifactTransportListener.java:39)
	at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:355)
	at org.eclipse.aether.util.concurrency.RunnableErrorForwarder$1.run(RunnableErrorForwarder.java:67)
	at org.eclipse.aether.connector.basic.BasicRepositoryConnector$DirectExecutor.execute(BasicRepositoryConnector.java:581)
	at org.eclipse.aether.connector.basic.BasicRepositoryConnector.get(BasicRepositoryConnector.java:249)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.performDownloads(DefaultArtifactResolver.java:520)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:421)
	... 27 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-24 18:35:51.594,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sat May 27 07:34:19 UTC 2017,,,,,,,0|i3ff93:,9223372036854775807,,,,,,,,,"24/May/17 18:35;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/1715

    CAMEL-11322 Swagger Rest DSL Generator needs to build before its maven plugin

    https://issues.apache.org/jira/browse/CAMEL-11322

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-11322

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1715.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1715
    
----
commit 1ebfd3569219cbb05a291372b10c78b352df03b5
Author: Tom Cunningham <tcunning@redhat.com>
Date:   2017-05-24T18:34:15Z

    CAMEL-11322 Swagger Rest DSL Generator needs to build before its maven plugin

----
",24/May/17 18:36;tcunning;https://github.com/apache/camel/pull/1715,"24/May/17 19:21;zregvart;One would hope that Maven would take care of this, but apparently not.

Merged into {{master}} from [PR#1715|https://github.com/apache/camel/pull/1715].

Thanks [~cunningt]!","27/May/17 07:34;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1715
",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-zookeeper-master - RAW() and child endpoint issue,CAMEL-11171,13065139,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,paolo.antinori,paolo.antinori,19/Apr/17 15:55,20/Apr/17 08:02,14/Mar/19 02:43,20/Apr/17 07:49,2.19.0,,,,,,,,,,,,2.19.0,,,,,,,,0,,,,,,"{{camel-zookeeper-master}} component has an issue with the usage of {{RAW()}} function in child endpoint configuration.

{{zookeeper-master://name:sftp://myhost/inbox?password=RAW(_BEFORE_AMPERSAND_&_AFTER_AMPERSAND_)&username=jdoe}} will mishandle the the content of {{RAW()}} , when at some point the escaped ampersand symbol is unescaped, and a wrong set of parameters is used.

The attached PR fixed the issues and adds a unit test to verify the behavior before and after the fix.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-19 15:58:18.975,,,no_permission,,Unknown,,,https://issues.jboss.org/browse/ENTESB-6731,Patch,,,,,,,,9223372036854775807,,,Thu Apr 20 08:02:09 UTC 2017,,,,,,,0|i3dti7:,9223372036854775807,,,,,,,,,"19/Apr/17 15:58;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1642

    CAMEL-11171 - camel-zookeeper-master, fix to support RAW() function

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-11171

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1642.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1642
    
----
commit 2cd3287e07c6e25976f5d87b8c6c5356ca8dc7a1
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-04-19T15:56:40Z

    CAMEL-11171 - camel-zookeeper-master, fix to support RAW() function

----
","20/Apr/17 08:02;githubbot;Github user paoloantinori closed the pull request at:

    https://github.com/apache/camel/pull/1642
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZookeeperRoutingPolicy - Error setting up election node,CAMEL-10961,13049203,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alaendle,alaendle,08/Mar/17 08:58,13/Jun/17 08:18,14/Mar/19 02:43,10/Mar/17 20:53,2.18.2,,,,,,,,,,,,2.18.4,2.19.0,,,camel-zookeeper,,,,0,,,,,,"{code}
2017-03-08T07:28:43,282 | INFO  | Camel (jms-context) thread #0 - JmsConsumer[QUEPOSTDATA] | ZooKeeperElection                | 84 - org.apache.camel.camel-zookeeper - 2.18.2 | Initializing ZookeeperElection with uri 'zookeeper:localhost:2181,localhost:2182,localhost:2183/aq-um-bridge/master'
2017-03-08T07:28:43,329 | WARN  | Camel (jms-context) thread #0 - JmsConsumer[QUEPOSTDATA] | ZooKeeperElection                | 84 - org.apache.camel.camel-zookeeper - 2.18.2 | Error setting up election node /aq-um-bridge/master/BH5PMD2H-4a1cc867-94ec-409c-8bbf-a36e4fc8966e
java.lang.NullPointerException
	at org.apache.camel.component.zookeeper.operations.SetDataOperation.getResult(SetDataOperation.java:42) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.operations.ZooKeeperOperation.get(ZooKeeperOperation.java:70) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.ZooKeeperProducer.synchronouslySetData(ZooKeeperProducer.java:234) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.ZooKeeperProducer.process(ZooKeeperProducer.java:88) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:209) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:139) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.createCandidateNode(ZooKeeperElection.java:146) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.testAndCreateCandidateNode(ZooKeeperElection.java:116) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.isMaster(ZooKeeperElection.java:92) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperRoutePolicy.onExchangeBegin(ZooKeeperRoutePolicy.java:79) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor$RoutePolicyAdvice.before(CamelInternalProcessor.java:490) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:145) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:112) [61:org.apache.camel.camel-jms:2.18.2]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:721) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:681) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:651) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:317) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1166) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1158) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1055) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [?:?]
	at java.lang.Thread.run(Unknown Source) [?:?]
{code}

Please let me know what other information I should contribute. My guess is that this is just a timing problem; because the zookeeper instances were up and running (on the same server).
Also I noticed that there was no election-rote created after this error - so my guess is that routes in this state would never run, effectivly leading to a dead-node (failover to this node would never happen). ",Windows; Java 1.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-10 10:23:43.861,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Mar 10 12:36:11 UTC 2017,,,,,,,0|i3b3xb:,9223372036854775807,,,,,,,,,"10/Mar/17 09:47;alaendle;My guess is that this was already handled with the change of ZooKeeperProducer in https://github.com/apache/camel/pull/1229/files.
Maybe this change could/should be merged to the v2.18.x-Branch so that this problem is at least fixed with the next v2.18.x release?",10/Mar/17 10:23;davsclaus;Its a too big change for a patch.,"10/Mar/17 10:58;alaendle;Sorry, I fear this was a misunderstanding. I didn't want to have all the new features regarding curator included. I just wanted to ask to include the three lines into the process-Method of ZooKeeperProducer.java to avoid the NPE:

{code}
       if (connection == null) {
            connection = this.zkm.getConnection();
        }
{code}

Not more not less. Maybe you want to consider this.",10/Mar/17 11:18;ancosen;I guess it should be fine to add only that check,"10/Mar/17 11:42;davsclaus;You are welcome to provide a github PR with such a fix
http://camel.apache.org/contributing","10/Mar/17 12:18;githubbot;GitHub user alaendle opened a pull request:

    https://github.com/apache/camel/pull/1522

    CAMEL-10961: Backported parts of CAMEL-10292 in order to fix possible…

    … NPE in ZooKeeperProducer.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alaendle/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1522.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1522
    
----
commit dc46e915da034a0a07ff7348f19b711e0c6e4387
Author: Andreas Ländle <andreas.laendle@de.bosch.com>
Date:   2017-03-10T12:17:12Z

    CAMEL-10961: Backported parts of CAMEL-10292 in order to fix possible NPE in ZooKeeperProducer.

----
","10/Mar/17 12:36;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1522
",,,,,,,,,,,,,,,,,,,,,,,
Swagger is not generating schema ref for body parameter,CAMEL-10675,13032281,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,stepienj,stepienj,05/Jan/17 15:09,11/Jan/17 16:53,14/Mar/19 02:43,06/Jan/17 08:43,2.18.1,,,,,,,,,,,,2.18.2,2.19.0,,,camel-swagger,,,,0,,,,,,"{code}
            // favor keeping any existing model that has the vendor extension in the model
            boolean oldExt = false;
            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {
                Model oldModel = swagger.getDefinitions().get(entry.getKey());
                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {
                    oldExt = oldModel.getVendorExtensions().get(""x-className"") == null;
                }
            }

            if (!oldExt) {
                swagger.model(entry.getKey(), entry.getValue());
            }
{code}

The logic is invalid. Should not update model when oldModel.getVendorExtensions().get(""x-className"") != null
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-01-05 15:11:14.16,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Jan 11 16:53:26 UTC 2017,,,,,,,0|i38b4n:,9223372036854775807,,,,,,,,,"05/Jan/17 15:11;githubbot;GitHub user stepienj opened a pull request:

    https://github.com/apache/camel/pull/1378

    CAMEL-10675 - camel swagger java models were not updated to models with vendor extension

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/stepienj/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1378.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1378
    
----
commit 2583ee5f387083ac5f5f9146c975d9b37238a51b
Author: Jacek Stępień <jacek.stepien@fortrus.com>
Date:   2017-01-05T14:49:33Z

    Fix for invalid logic in swagger java component - models were not updated to models with vendor extension

----
","11/Jan/17 16:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1378
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix and enhance logging for camel-smpp,CAMEL-10591,13027737,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,,pmoerenhout,pmoerenhout,13/Dec/16 09:44,13/Dec/16 09:51,14/Mar/19 02:43,13/Dec/16 09:51,2.19.0,,,,,,,,,,,,,,,,camel-smpp,,,,0,,,,,,"When reconnecting, the attempt is not printed in the log. Also I changed the logging to use slf4j style of printing parameter in the log statement.

Pull request is https://github.com/apache/camel/pull/1343.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 13 09:51:31 UTC 2016,,,Patch Available,,,,0|i37j3z:,9223372036854775807,,,,,,,,,13/Dec/16 09:51;pmoerenhout;The pull request was picked up and merged.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unused deflater in ZipDataFormat,CAMEL-10368,13009511,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,forsthofer,forsthofer,forsthofer,04/Oct/16 11:47,04/Oct/16 12:13,14/Mar/19 02:43,04/Oct/16 12:04,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-core,,,,0,,,,,,"In the ZipDataForamt class you find

 final Deflater deflater = new Deflater(compressionLevel);
        final DeflaterOutputStream zipOutput = new DeflaterOutputStream(stream, new Deflater(compressionLevel));
        try {
            IOHelper.copy(is, zipOutput);
        } finally {
            IOHelper.close(is, zipOutput);
            
            /*
            * As we create the Deflater our self and do not use the stream default
            * (see {@link java.util.zip.DeflaterOutputStream#usesDefaultDeflater})
            * we need to close the Deflater to not risk a OutOfMemoryException
            * in native code parts (see {@link java.util.zip.Deflater#end})
            */
            deflater.end();
        }

the deflater variable should be used in the DeflaterOutputStream

final DeflaterOutputStream zipOutput = new DeflaterOutputStream(stream, deflater);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-04 11:52:30.91,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Oct 04 12:13:06 UTC 2016,,,,,,,0|i34esn:,9223372036854775807,,,,,,,,,"04/Oct/16 11:52;ancosen;Franz, since we are in the process of releasing 2.18.0, please hold on on commit new code (if it's a big refactor or a big change I mean).","04/Oct/16 12:05;forsthofer;Hello Andrea,

it is only a very small change. So I have committed. I hope this is no problem for you. Sorry for any inconvenience.
","04/Oct/16 12:10;ancosen;I guess there will be problem :-)

The release was already cut, I didn't notice that we now have a camel-2.18.x branch. So it seems everything is fine :-)","04/Oct/16 12:13;ancosen;Sorry, there will be no problem :-D",,,,,,,,,,,,,,,,,,,,,,,,,,
Remove logging implementations from compile scope,CAMEL-10217,12994292,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,nferraro,nferraro,nferraro,02/Aug/16 14:47,08/Aug/16 08:01,14/Mar/19 02:43,08/Aug/16 08:01,,,,,,,,,,,,,2.18.0,,,,,,,,0,,,,,,"Some components include logging implementations among their dependencies. If it is applicable (eg. if they are not hardcoded), they should be removed.

A quick script:
{code}
for comp in $(ls | grep ""camel-"" | grep -v "".iml""); do
	cd $comp
	mvn dependency:tree | grep 'log4j\|logback\|slf4j-simple\|slf4j-jdk14\|slf4j-log4j12' | grep -v test | xargs -I line echo ""$(pwd) line""
	cd ..
done
{code}

Shows the following problems:
{noformat}
./camel/components/camel-atmos [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-gora [INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-gora [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-hbase [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-jbpm [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-jbpm [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-jt400 [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-jt400 [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-krati [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-openshift [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-salesforce [INFO] +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-scr [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-scr [INFO] +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-spark [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-spark [INFO] |  |  +- log4j:apache-log4j-extras:jar:1.2.17:compile
./camel/components/camel-spark-rest [INFO] |  +- org.slf4j:slf4j-simple:jar:1.7.21:compile
./camel/components/camel-spring-boot [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-spring-boot [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-spring-boot [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-zipkin-starter [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-zipkin-starter [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-zipkin-starter [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-zookeeper [INFO] |  +- log4j:log4j:jar:1.2.17:compile
{noformat}

Spring-boot starters are allowed to have logging implementations. _org.slf4j:log4j-over-slf4j_ is not an implementation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-03 11:56:37.459,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Aug 08 08:01:14 UTC 2016,,,,,,,0|i31szb:,9223372036854775807,,,,,,,,,03/Aug/16 11:56;davsclaus;Maybe some of the archetypes uses log4j 1.x in their generated sample code. It could be a good idea to upgrade those to use lo4j v2 also,"05/Aug/16 11:00;nferraro;After a bit of analysis, the number of modules with logging issues is higher than expected, as _commons-logging_ was missing in the script (it is not an implementation, but needs to be bridged to work with slf4j):

{code}
for comp in $(ls | grep ""camel-"" | grep -v "".iml""); do
	cd $comp
	mvn dependency:tree | grep 'log4j\|logback\|slf4j-simple\|slf4j-jdk14\|slf4j-log4j12\|commons-logging' | grep -v test | xargs -I line echo ""$(pwd) line""
	cd ..
done
{code}

A clean solution to bring all modules to sl4j would be:
- Exclude all dependencies on logging implementation
- Include a slf4j legacy binding library (eg. _jcl-over-sl4fj_, _log4j-over-slf4j_) to replace the removed implementation

The main problems of the approach:
1) 
The number of exclusions that need to be put in each pom.xml is huge.
There are a number of hacks that can be used to prevent this pollution, but all of them have many drawbacks (eg. empty libraries, marking them as provided).

2)
Once I put a eg. _log4j-over-slf4j_ dependency in a pom.xml, people are not free to use _slf4j_log4jxx_ in their app (application closed to prevent stack overflow). If they want to use log4j (version 1 or 2) they will need to exclude _log4j-over-slf4j_ when importing the camel module. So this change does not simplify things for end users.
The only problem-free logging implementation for end-users will be _logback_.


When the target logging system is known a-priori, or a default system is used, as in spring-boot (where the logging system can be changed, but starters are configured to use _logback_), logging dependencies can be fixed.

For this Jira, I'm going to remove logging libraries from modules not using an implementation directly, because bridging libraries in camel modules does not seem to solve problems for the end users. I'll take also a look at generated sample code for the log4j12 issue.

For spring-boot, logging issues can be completely solved in (CAMEL-10222).","05/Aug/16 11:46;lb;[~davsclaus], [~nferraro] 

I'm having a look on how complex it is to migrate all the test stuffs to log4j2 (CAMEL-10224), so far the properties migration seems to work fine.
I should have a branch ready for review by end of the day beginning next week.","05/Aug/16 13:13;githubbot;GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1110

    CAMEL-10217: Removed logging implementation from compile scope in jbp…

    …m, jt400, scr, spark-rest

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10217

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1110.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1110
    
----
commit 2d9c0a177708a83756f70a230c8ae405df3f656d
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-05T13:12:14Z

    CAMEL-10217: Removed logging implementation from compile scope in jbpm, jt400, scr, spark-rest

----
",05/Aug/16 13:18;nferraro;[~lb] I fixed the scope only where it was safe to do so. Some dependencies (eg. _slf4j-log4j12_) need to be changed in the upgrade to log4j v2.,"07/Aug/16 14:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1110
",08/Aug/16 08:01;nferraro;Upgrade to log4j v2 to be handled in CAMEL-10224.,,,,,,,,,,,,,,,,,,,,,,,
BlueprintPropertiesParser breaks propertyPlaceholder fallbackToUnaugmentedProperty behavior,CAMEL-10038,12977274,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gzres,MattZ,MattZ,09/Jun/16 16:13,25/Jul/16 15:27,14/Mar/19 02:43,21/Jul/16 07:17,2.15.1,,,,,,,,,,,,2.17.3,2.18.0,,,camel-blueprint,,,,0,patch,,,,,"When BlueprintPropertiesParser parses an ""augmented"" property key that is not found (i.e. value is null), it does not return the null value so that the fallbackToUnaugmentedProperty=""true"" (default) behavior can run. Instead, it immediately throws an IllegalArgumentException.
As a result, it appears to be impossible to take advantage of fallbackToUnaugmentedProperty=""true"" behavior when using the Blueprint properties resolver/parser.
I discovered this against Red Hat's JBoss Fuse impl of Camel, but am reporting it here because it appears to be a bug in base Camel. More details in comments.","Camel 2.15.1.redhat-620133
JBoss Fuse 6.2.0.redhat-133

openjdk version ""1.8.0_45""
OpenJDK Runtime Environment (build 1.8.0_45-b13)
OpenJDK 64-Bit Server VM (build 25.45-b02, mixed mode)

Linux 3.10.0-229.1.2.el7.x86_64 #1 SMP Fri Mar 6 17:12:08 EST 2015 x86_64 GNU/Linux (RHEL 7)",,,,,,,,,,,,CAMEL-7630,,,,,13/Jul/16 22:38;MattZ;CAMEL-10038.patch;https://issues.apache.org/jira/secure/attachment/12817822/CAMEL-10038.patch,09/Jun/16 16:23;MattZ;camel-context.xml;https://issues.apache.org/jira/secure/attachment/12809223/camel-context.xml,09/Jun/16 16:23;MattZ;example.bpp.fallback.cfg;https://issues.apache.org/jira/secure/attachment/12809224/example.bpp.fallback.cfg,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2016-06-26 09:40:42.88,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Mon Jul 25 15:27:36 UTC 2016,,,Patch Available,,,,0|i2z8bj:,9223372036854775807,,,,,,,,,"09/Jun/16 16:19;MattZ;In DefaultPropertiesParser:

{code:language=java}
String augmentedKey = getAugmentedKey(key);
boolean shouldFallback = fallbackToUnaugmentedProperty && !key.equals(augmentedKey);

String value = doGetPropertyValue(augmentedKey);
if (value == null && shouldFallback) {
    log.debug(""Property with key [{}] not found, attempting with unaugmented key: {}"", augmentedKey, key);
    value = doGetPropertyValue(key);
}
{code}

i.e. When an augmented property key is not found (null value) the lookup is
retried with the UNaugmented property key.

However, DefaultPropertiesParser actually gets ""wrapped"" by
BlueprintPropertiesParser, and we see the following at the end of the
parseProperty(String, String, Properties) method:

{code:language=java}
if (answer == null) {
    throw new IllegalArgumentException(""Property placeholder key: "" + key + "" not found"");
}
{code}

In a nutshell:
BlueprintPP gets an augmented property key and null value, and *should* be returning null so that DefaultPP can do its fallback behavior (which will ultimately throw the IllegalArgumentException itself if the property value is still null after fallback behavior. But instead, BlueprintPP throws an exception and the fallback behavior never happens.

Actual log events demonstrating this:

Here's what SHOULD happen: (this requires disabling the Blueprint properties resolver and bypassing BlueprintPropertiesParser altogether)

{noformat}
2016-06-09 10:50:27,531 | DEBUG | rint Extender: 3 | PropertiesComponent              | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133
 | Parsed location: file:etc/example.bpp.fallback.cfg
2016-06-09 10:50:27,531 | DEBUG | rint Extender: 3 | DefaultPropertiesParser          | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Augmenting property key [CamelLogDebugBodyMaxChars] with prefix: LOCAL.
2016-06-09 10:50:27,532 | DEBUG | rint Extender: 3 | DefaultPropertiesParser          | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Property with key [LOCAL.CamelLogDebugBodyMaxChars] not found, attempting with unaugmented key: CamelLogDebugBodyMaxChars
{noformat}

But here's what ACTUALLY happens when Blueprint properties resolver and parser are used: (the defaults)

{noformat}
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | PropertiesComponent              | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Parsed location: blueprint:example-bpp-fallback-property-placeholder
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | BlueprintPropertiesParser        | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Augmenting property key [CamelLogDebugBodyMaxChars] with prefix: LOCAL.
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | BlueprintPropertiesParser        | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Blueprint parsed property key: LOCAL.CamelLogDebugBodyMaxChars as value: null
2016-06-09 10:42:37,665 | ERROR | rint Extender: 2 | BlueprintCamelContext            | ?                                   ? | 204 - org.apache.camel.camel-blueprint - 2.15.1.redhat-620133
 | Error occurred during starting Camel: CamelContext(example-bpp-fallback) ... because of Error getting property: CamelLogDebugBodyMaxChars
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1028)[198:org.apache.camel.camel-core:2.15.1.r
edhat-620133]
...
Caused by: java.lang.IllegalArgumentException: Property placeholder key: LOCAL.CamelLogDebugBodyMaxChars not found
        at org.apache.camel.blueprint.BlueprintPropertiesParser.parseProperty(BlueprintPropertiesParser.java:164)[204:org.apach
e.camel.camel-blueprint:2.15.1.redhat-620133]
{noformat}
","09/Jun/16 16:23;MattZ;Here is an example Camel context and properties file that demonstrate the problem and one possible workaround.

Also attached is a patch (but it is *UNTESTED* at the moment).
","14/Jun/16 21:18;MattZ;This appears to be the commit where the bug was introduced:
https://github.com/apache/camel/commit/07841d5be1175be1e9f383497588ff4e29e3008e

The thrown IllegalArgumentException was added in this commit, but I'm not sure why - it fundamentally changes (breaks) the behavior but is not directly relevant (as far as I can tell) to the stated fix in the commit message.

Is there some reason why Blueprint should explicitly *not* support falling back to unaugmented properties when the placeholder property services do not find an augmented key?","15/Jun/16 15:35;MattZ;Disregard the patch - it will not work. After looking into this further, and trying a number of workarounds, it is apparent that BlueprintPropertiesParser is simply not capable of handling augmented properties properly. The choice appears to be either (a) use Blueprint property placeholder and not augmented properties or (b) use augmented properties and not Blueprint property placeholder. Unfortunately this is a significant blocker for me.

I am still trying other workarounds, but at the very least the Camel documentation should be updated as it is very misleading. The documentation for fallbackToUnaugmentedProperty makes no mention of this behavior being impossible with a bridged Blueprint property placeholder, nor does camel-blueprint javadoc.","26/Jun/16 09:40;davsclaus;You are welcome to update the documentation. See here how to edit
http://camel.apache.org/how-do-i-edit-the-website.html","26/Jun/16 23:29;MattZ;Thanks, I'll look into this.","13/Jul/16 22:33;githubbot;GitHub user mzipay opened a pull request:

    https://github.com/apache/camel/pull/1075

    CAMEL-10038 don't throw exception if BlueprintPropertiesParser#parseP…

    …roperty would return null (breaks fallbackToUnaugmentedProperty behavior, and an exception will be thrown anyway by the parent DefaultPropertiesParser if the value is still null after fallback)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mzipay/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1075.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1075
    
----
commit affda62f8654a2862650cdf5142371ebb4649703
Author: Zipay, Matthew <mzipay@contractor.express.com>
Date:   2016-07-13T21:51:15Z

    CAMEL-10038 don't throw exception if BlueprintPropertiesParser#parseProperty would return null (breaks fallbackToUnaugmentedProperty behavior, and an exception will be thrown anyway by the parent DefaultPropertiesParser if the value is still null after fallback)

----
","13/Jul/16 22:38;MattZ;It does seem after all that the fix is as simple as I thought initially (simpler, actually) - just removing the thrown IllegalArgumentException from BlueprintPropertiesParser#parseProperty does the trick.

I have been running locally with a binary-patched camel-blueprint JAR containing this change, and the issue is completely resolved.

(Not sure why the throw was ever added in the first place, as the parent DefaultPropertiesParser already throws IllegalArgumentException if the property doesn't evaluate.)

I opened https://github.com/apache/camel/pull/1075 for this change, but attaching the patch here as well.","15/Jul/16 06:46;davsclaus;Thanks for the PR but it causes a test to fail now in camel-test-blueprint. Also it would be good if you could do an unit test that validates your use-case.

Tests run: 3, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 4.318 sec <<< FAILURE! - in org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest
test(org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest)  Time elapsed: 2.687 sec  <<< FAILURE!
java.lang.AssertionError:

Expected: ""Property placeholder key: destination not found""
     but: was ""Property with key [destination] not found in properties from text: {{destination}}""
	at org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest.setUp(ConfigAdminNoDefaultValuesBlueprintCreationTest.java:34)

test(org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest)  Time elapsed: 0.766 sec  <<< FAILURE!

",15/Jul/16 06:49;gzres;Sorry for not looking at this issue yet... I'll try next week.,15/Jul/16 06:49;gzres;Sorry for not looking at this issue yet... I'll try next week.,"15/Jul/16 17:44;MattZ;Ah yes, that makes sense - the exception message (when the property can't be evaluated even with fallback) is now coming from DefaultPropertiesParser rather than from BlueprintPropertiesParser. I'm working on a unit test, but haven't been able to get it into a working state yet (I opened pull request regardless because there isn't even any *existing* test case for BlueprintPropertiesParser to begin with).","15/Jul/16 17:50;MattZ;No worries; I have an acceptable workaround at the moment. Please take your time.

For my particular case, getting the fix merged into master doesn't even really help immediately (we are using camel-blueprint-2.15.1.redhat-620133.jar). But I wanted to make sure to get the fix in first, then go from there.
",19/Jul/16 19:43;MattZ;I updated the pull request with a change that fixes the existing ConfigAdminNoDefaultValuesBlueprintCreationTest test case. Still working on a new test case to specifically exercise the fallback behavior for BlueprintPropertiesParser.,"20/Jul/16 16:02;MattZ;[~davsclaus] and [~gzres], the pull request now includes a unit test for the fallbackToUnaugmentedProperty relative to BlueprintPropertiesParser.

Both org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest and the new org.apache.camel.test.blueprint.BlueprintAugmentedPropertiesFallbackTest test cases are now passing on 2.18-SNAPSHOT.","21/Jul/16 07:16;gzres;[~MattZ] thanks for PR. I've finally checked it and it looks good. You're right with the exception - it's not needed and the broken test was just checking wrong exception message (bad, bad idea to literally assert exception messages ;)).

Commit fix in {{master}}: https://github.com/apache/camel/commit/5127a6598582cb370dd46de6c510d0762695daaa (and later commits for tests)
Commit fix in {{camel-2.17.x}}: https://github.com/apache/camel/commit/2ffd8e0d83aa3a79c43cb73186fc7fa1ed07ca0a (and later commits for tests)

I've added yet another test to check scenario with {{fallbackToUnaugmentedProperty=""false""}}: https://github.com/apache/camel/commit/e13c890faf48fd11c3e5f716395edee16457d0fc","21/Jul/16 13:10;MattZ;Thanks, much appreciated!","25/Jul/16 15:27;githubbot;Github user mzipay closed the pull request at:

    https://github.com/apache/camel/pull/1075
",,,,,,,,,,,,
RabbitConsumer.stop() doesn't stop underlying AutorecoveringConnection obtained from supplied ConnectionFactory,CAMEL-9984,12972051,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,daknin,daknin,23/May/16 12:53,26/May/16 17:10,14/Mar/19 02:43,24/May/16 09:53,2.17.1,,,,,,,,,,,,2.17.2,2.18.0,,,camel-rabbitmq,,,,0,,,,,,"If I have a ConnectionFactory defined as:
{code:borderStyle=solid}
ConnectionFactory connectionFactory = new ConnectionFactory();
connectionFactory.setAutomaticRecoveryEnabled(true);
connectionFactory.setUsername(username);
connectionFactory.setPassword(password);
{code}
And a Camel route defined like:
{code:borderStyle=solid}
rabbitmq://localhost:5672/MyExchange?connectionFactory=#connectionFactory&exchangeType=direct&queue=MyQueue&routingKey=MyRoutingKey
{code}
Performing these steps:
* Start my application and it connects to Rabbit and consumes messages
* Shutdown the RabbbitMQ server
* Shutdown my Camel application

The application doesn't stop fully because the automatic recovery mechanism has background threads running. It carries on indefinately logging messages like:
{code:borderStyle=solid}
	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:106)
	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:102)
	at com.rabbitmq.client.impl.AMQConnection.start(AMQConnection.java:350)
	at com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory.newConnection(RecoveryAwareAMQConnectionFactory.java:37)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.recoverConnection(AutorecoveringConnection.java:476)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.beginAutomaticRecovery(AutorecoveringConnection.java:444)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.access$000(AutorecoveringConnection.java:53)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection$1.shutdownCompleted(AutorecoveringConnection.java:383)
	at com.rabbitmq.client.impl.ShutdownNotifierComponent.notifyListeners(ShutdownNotifierComponent.java:75)
	at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:578)
{code}
Looking at org.apache.camel.component.rabbitmq.RabbitConsumer.stop()
{code:borderStyle=solid}
    public void stop() throws IOException, TimeoutException {
        stopping = true;
        if (channel == null) {
            return;
        }
        channel.basicCancel(tag);
        try {
            channel.close();
        } catch (TimeoutException e) {
            log.error(""Timeout occured"");
            throw e;
        }
    }
{code}
The calls to channel.basicCancel(tag) and channel.close() both throw com.rabbitmq.client.AlreadyClosedException when the server has closed the connection which stops the automatic recovery thread from being halted. Checking whether the channel is open before the calls to channel.basicCancel(tag) and channel.close() seems to fix the issue.
{code:borderStyle=solid}
    public void stop() throws IOException, TimeoutException {
        stopping = true;
        if (channel == null) {
            return;
        }
        if (tag != null && isChannelOpen()) {
            channel.basicCancel(tag);
        }
        try {
            if (isChannelOpen()) {
                channel.close();
            }
        } catch (TimeoutException e) {
            log.error(""Timeout occured"");
            throw e;
        }
    }
{code}

I'll submit a PR later",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-24 07:03:36.706,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu May 26 17:10:45 UTC 2016,,,,,,,0|i2yd7z:,9223372036854775807,,,,,,,,,24/May/16 07:03;davsclaus;Thanks for reporting. Looking forward to the PR,"24/May/16 08:27;githubbot;GitHub user daknin opened a pull request:

    https://github.com/apache/camel/pull/996

    CAMEL-9984: Rabbit MQ connection is not closed when channel has been closed by server.

    This fixes closing Rabbit MQ connections when the server has already closed the channel / connection. I created an issue at https://issues.apache.org/jira/browse/CAMEL-9984 with full details.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/daknin/camel CAMEL-9984

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/996.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #996
    
----
commit 09613cb4c3be053195e1c9f68f3a485d0003d24d
Author: Darrell King <darrell.king@hermes-europe.co.uk>
Date:   2016-05-24T08:18:53Z

    CAMEL-9984: Rabbit MQ connection is not closed when channel has been closed by server.

----
",24/May/16 09:53;davsclaus;Thanks for the PR,24/May/16 11:18;daknin;Closing now that PR is merged,"26/May/16 17:10;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/996
",,,,,,,,,,,,,,,,,,,,,,,,,
Missing raw type in CDI parameterized event endpoint URI,CAMEL-9934,12964292,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,antonin.stefanutti,antonin.stefanutti,antonin.stefanutti,02/May/16 13:24,02/May/16 13:27,14/Mar/19 02:43,02/May/16 13:26,,,,,,,,,,,,,,,,,camel-cdi,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2016-05-02 13:24:02.0,,,,,,,0|i2x1gn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Input always a drop-down,CAMEL-9792,12955335,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,flavouski,flavouski,01/Apr/16 15:46,01/Apr/16 18:31,14/Mar/19 02:43,01/Apr/16 18:31,2.16.2,,,,,,,,,,,,2.17.0,,,,camel-swagger,,,,0,,,,,,"The json below contains an empty enum:
{code:title=swagger.json|borderStyle=solid}
parameters: [
  {...
    name: ""customerId"",
    in: ""path"",
    description: ""The customer ID/RCIF number."",
    required: true,
    type: ""string"",
    enum: [ ]
  }
],...
{code}

But the Camel Code below code has no ""allowableValues"":
{code:title=camel.java|borderStyle=solid}
rest(baseUrl)
    //--------Swagger Documentation--------
    .description(""Retrieve Customer based on ID number"")
    .produces(MediaType.APPLICATION_JSON_VALUE)
  .get(""/{customerId}"")
    //--------Swagger Documentation--------
    .param().name(""customerId"").type(RestParamType.path).description(""The customer IDnumber."").required(true).dataType(""string"").endParam()
  .route()...;
{code}

This empty enum value forces the UI to produce an empty uneditable drop-down, when it should be a text-box.

Based on the latest master branch of https://github.com/swagger-api/swagger-ui",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Apr 01 18:31:05 UTC 2016,,,,,,,0|i2vitr:,9223372036854775807,,,,,,,,,01/Apr/16 18:31;flavouski;empty enum removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation on SQS ConcurrentConsumers Missing that you need to set maxMessagerPerPoll,CAMEL-9592,12938595,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,mary.mistretta@gmail.com,mary.mistretta@gmail.com,11/Feb/16 19:22,22/Feb/16 17:39,14/Mar/19 02:43,22/Feb/16 17:39,2.15.1,,,,,,,,,,,,2.16.2,,,,camel-aws,,,,0,documentation,,,,,"If you try to use concurrentConsumers without setting the maxMessagesPerPoll whenever a message errors out it brings down the whole context. 

I plan on updating the wiki myself, but I haven't contributed before.  I am going to start the process by emailing the dev list today. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-12 09:54:41.982,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Mon Feb 22 17:39:16 UTC 2016,,,,,,,0|i2sqjb:,9223372036854775807,,,,,,,,,12/Feb/16 09:54;davsclaus;Test with latest release first please.,12/Feb/16 18:15;mary.mistretta@gmail.com;Will do.  I tested with 2.15.1 which the either way the documentation does not indicate needs to have maxMessagesPerPoll set.  I confirmed with Christian Posta that he thought this was intended functionality. I will test with 2.16 before updating anything to confirm if it is needed or not there. ,"17/Feb/16 03:31;mary.mistretta@gmail.com;I verified on the latest camel version that the maxMessagesPerPoll flag does indeed need to be set when setting the concurrentConsumers for SQS to greater than 1.  I did manual test with routes and also adjust the unit test's route to not set maxMessagesPerPoll.  The unit test then failed with:

Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.053 sec <<< FAILURE! - in org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest
consumeMessagesFromQueue(org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest)  Time elapsed: 1.053 sec  <<< FAILURE!
java.lang.AssertionError: We were expecting to have about half of 10 numbers of concurrent consumers, but only found 1
	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest.consumeMessagesFromQueue(SqsConcurrentConsumerTest.java:49)

I have filled out my ICLA and am waiting to get edit rights from the dev email list. As soon as this is done I will make the documentation adjustment. ","22/Feb/16 17:39;mary.mistretta@gmail.com;fixed documentation. I didn't a place I could assign the ticket to myself.  I am not sure I have access to do that, however I resolved it. ",,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to use camel-example-cxf,CAMEL-9438,12923450,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gautric,gautric,gautric,21/Dec/15 15:06,21/Dec/15 15:26,14/Mar/19 02:43,21/Dec/15 15:09,2.17.0,,,,,,,,,,,,,,,,examples,,,,0,,,,,,"Got this exception when run 

mvn exec:java -PCamelTransport

[mbp:~/Source/git/camel/examples/camel-example-cxf]$> mvn exec:java -PCamelTransport 
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CXF 2.17-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.1.1:java (default-cli) > validate @ camel-example-cxf >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-example-cxf ---
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cxf ---
[INFO] 
[INFO] <<< exec-maven-plugin:1.1.1:java (default-cli) < validate @ camel-example-cxf <<<
[INFO] 
[INFO] --- exec-maven-plugin:1.1.1:java (default-cli) @ camel-example-cxf ---
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Refreshing org.apache.cxf.bus.spring.BusApplicationContext@567da882: startup date [Mon Dec 21 16:00:41 CET 2015]; root of context hierarchy
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Loaded configuration file /org/apache/camel/example/camel/transport/CamelDestination.xml.
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/camel/cxf-extension-camel.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml]
[t.CamelTransportExample.main()] SpringBusFactory               WARN  Initial attempt to create application context was unsuccessful.
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
[t.CamelTransportExample.main()] SpringBusFactory               WARN  Failed to create application context.
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
java.lang.RuntimeException: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:151)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	... 10 more
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-12-21 15:08:08.506,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Dec 21 15:24:11 UTC 2015,,,,,,,0|i2q5vz:,9223372036854775807,Regression,,,,,,,,"21/Dec/15 15:08;githubbot;GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/741

    CAMEL-9438 - Unable to use camel-example-cxf

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9438

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/741.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #741
    
----
commit 63166acdf907d31c96fc9ee8fdf68ba6b7bf62fa
Author: gautric <gautric@redhat.com>
Date:   2015-12-21T15:07:35Z

    CAMEL-9438 - Unable to use camel-example-cxf

----
","21/Dec/15 15:09;gautric;got this correct output after changes 


[mbp:~/Source/git/camel/examples/camel-example-cxf]$> mvn exec:java -PCamelTransport 
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CXF 2.17-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.1.1:java (default-cli) > validate @ camel-example-cxf >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-example-cxf ---
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cxf ---
[INFO] 
[INFO] <<< exec-maven-plugin:1.1.1:java (default-cli) < validate @ camel-example-cxf <<<
[INFO] 
[INFO] --- exec-maven-plugin:1.1.1:java (default-cli) @ camel-example-cxf ---
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Refreshing org.apache.cxf.bus.spring.BusApplicationContext@2927491d: startup date [Mon Dec 21 16:08:21 CET 2015]; root of context hierarchy
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Loaded configuration file /org/apache/camel/example/camel/transport/CamelDestination.xml.
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/camel/cxf-extension-camel.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml]
[t.CamelTransportExample.main()] egate$BeanPostProcessorChecker INFO  Bean 'cxf' of type [class org.apache.cxf.bus.spring.SpringBus] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[t.CamelTransportExample.main()] CamelContextFactoryBean        INFO  Bridging Camel and Spring property placeholder configurer with id: bridgePropertyPlaceholder
[t.CamelTransportExample.main()] DefaultTypeConverter           INFO  Loaded 205 type converters
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Apache Camel 2.17-SNAPSHOT (CamelContext: dest_context) is starting
[t.CamelTransportExample.main()] ManagedManagementStrategy      INFO  JMX is enabled
[t.CamelTransportExample.main()] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[t.CamelTransportExample.main()] SpringCamelContext             INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[t.CamelTransportExample.main()] SpringCamelContext             INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[t.CamelTransportExample.main()] log                            INFO  Logging initialized @5211ms
[t.CamelTransportExample.main()] JettyHttpComponent             WARN  You use localhost interface! It means that no external connections will be available. Don't you want to use 0.0.0.0 instead (all network interfaces)? Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] JettyHttpComponent             INFO  Using default Jetty continuation timeout for: Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] Server                         INFO  jetty-9.2.11.v20150529
[t.CamelTransportExample.main()] AbstractHandler                WARN  No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@7e0b628b
[t.CamelTransportExample.main()] ContextHandler                 INFO  Started o.e.j.s.ServletContextHandler@1c948edc{/,null,AVAILABLE}
[t.CamelTransportExample.main()] ServerConnector                INFO  Started ServerConnector@6f45eca3{HTTP/1.1}{localhost:9001}
[t.CamelTransportExample.main()] Server                         INFO  Started @5317ms
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Route: route1 started and consuming from: Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Total 1 routes, of which 1 is started.
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Apache Camel 2.17-SNAPSHOT (CamelContext: dest_context) started in 0.404 seconds
Starting Server
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
[t.CamelTransportExample.main()] ServerImpl                     INFO  Setting the server's publish address to be camel://direct:EndpointA
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
[t.CamelTransportExample.main()] ServerImpl                     INFO  Setting the server's publish address to be camel://direct:EndpointB
Acquiring router port ...
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
Invoking sayHi...
[               qtp219563892-16] GreeterImpl                    INFO  Executing operation sayHi
Executing operation sayHi

Server responded with: Bonjour from EndpointA

Invoking greetMe... with Mike
[               qtp219563892-17] GreeterImpl                    INFO  Executing operation greetMe
Executing operation greetMe
Message received: Mike

Server responded with: Hello Mike from EndpointB

Invoking greetMe... with James
[               qtp219563892-18] GreeterImpl                    INFO  Executing operation greetMe
Executing operation greetMe
Message received: James

Server responded with: Hello James from EndpointA

Invoking greetMeOneWay...
[           default-workqueue-1] GreeterImpl                    INFO  Executing operation greetMeOneWay
Executing operation greetMeOneWay

Hello there gautric
No response from server as method is OneWay

Invoking pingMe, expecting exception...
[               qtp219563892-20] GreeterImpl                    INFO  Executing operation pingMe, throwing PingMeFault exception, message = hello
Executing operation pingMe, throwing PingMeFault exception

[               qtp219563892-20] PhaseInterceptorChain          INFO  Application {http://apache.org/hello_world_soap_http}CamelService#{http://apache.org/hello_world_soap_http}pingMe has thrown exception, unwinding now: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server EndpointA
Expected exception: PingMeFault has occurred: PingMeFault raised by server EndpointA
FaultDetail major:2
FaultDetail minor:1
[","21/Dec/15 15:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/741
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove old stuff,CAMEL-9411,12920794,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,gautric,gautric,gautric,10/Dec/15 15:51,14/Dec/15 16:55,14/Mar/19 02:43,12/Dec/15 13:28,2.17.0,,,,,,,,,,,,2.17.0,,,,,,,,0,,,,,,"we could remove old stuff 

like README.txt replaced by README.md
and camel-example-servlet-rest-tomcat no longer use ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-12-10 15:55:57.61,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Mon Dec 14 16:55:30 UTC 2015,,,,,,,0|i2pq1j:,9223372036854775807,,,,,,,,,"10/Dec/15 15:55;githubbot;GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/723

    CAMEL-9411 Remove old stuff

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9411

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/723.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #723
    
----
commit 998e69e9e943612efe2bd07276099e32bfc1329d
Author: gautric <gautric@redhat.com>
Date:   2015-12-10T15:55:03Z

    CAMEL-9411 Remove old stuff

----
","14/Dec/15 16:55;githubbot;Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/723
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tokenize with regex grouping has a small bug,CAMEL-9236,12905977,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,duro,duro,19/Oct/15 16:36,20/Oct/15 17:00,14/Mar/19 02:43,19/Oct/15 18:43,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-core,,,,0,,,,,,"Looks like a copy/paste error is preventing the grouping functionality from being executed by the helper object. 
group should be passed to the delegate's tokenize method. 

camel-core/src/main/java/org/apache/camel/builder/ExpressionClause.java 

    /** 
     * Evaluates a token expression on the message body 
     * 
     * @param token the token 
     * @param regex whether the token is a regular expression or not 
     * @param group to group by the given number 
     * @return the builder to continue processing the DSL 
     */ 
    public T tokenize(String token, boolean regex, int group) { 
        return delegate.tokenize(token, regex); 
    } ",,,,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-19 16:39:38.741,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Tue Oct 20 17:00:52 UTC 2015,,,,,,,0|i2n71j:,9223372036854775807,,,,,,,,,"19/Oct/15 16:39;githubbot;GitHub user duro1 opened a pull request:

    https://github.com/apache/camel/pull/651

    CAMEL-9236 Bug fix to pass group to the helper delegate

    Issue resolved by passing the group parameter to the helper object.
    
    Note: The splitter will use the token passed in as the delimiter between items in the group.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duro1/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/651.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #651
    
----
commit b4df911cf3d9e5ceecb7e3485127999dfae69ff1
Author: unknown <durowreck@yahoo.com>
Date:   2015-10-16T16:08:01Z

    Bug fix to pass group to the helper delegate

----
",19/Oct/15 18:43;davsclaus;Thanks for the PR,"20/Oct/15 17:00;githubbot;Github user duro1 closed the pull request at:

    https://github.com/apache/camel/pull/651
",,,,,,,,,,,,,,,,,,,,,,,,,,,
MQTT consumer receives duplicate messages after broker restart,CAMEL-9092,12857456,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,igarashitm,igarashitm,20/Aug/15 07:00,28/Aug/15 15:01,14/Mar/19 02:43,28/Aug/15 15:01,2.15.2,2.16.0,,,,,,,,,,,2.15.4,2.16.0,,,camel-mqtt,,,,0,,,,,,"if clientId is specified, after ActiveMQ broker restart, camel-mqtt consumer starts to receive duplicate messages. Please see the testcase attached.",,,,,,,,,,,,,,,,,,20/Aug/15 07:02;igarashitm;MQTTDuplicatesTest.java;https://issues.apache.org/jira/secure/attachment/12751429/MQTTDuplicatesTest.java,21/Aug/15 12:56;igarashitm;MQTTDuplicatesTest.java_activemq;https://issues.apache.org/jira/secure/attachment/12751717/MQTTDuplicatesTest.java_activemq,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-08-21 06:31:38.82,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Aug 28 15:01:52 UTC 2015,,,,,,,0|i2j57z:,9223372036854775807,,,,,,,,,21/Aug/15 06:31;davsclaus;Maybe its a ActiveMQ problem?,"21/Aug/15 10:56;igarashitm;Possibly, but so far it can't be reproduced without camel. I tried a plain ActiveMQ testcase with almost same broker settings on ActiveMQ 5.12.0 :
[^MQTTDuplicatesTest.java_activemq]
 but it didn't hit any duplicates. I'm still looking for the root cause, but I'm kind of stuck :(","21/Aug/15 12:56;igarashitm;[^MQTTDuplicatesTest.java_activemq]

Tweaked to use CallbackConnection for sender as well - still it succeeds, so no duplicate. Note that this testcase depends on mqtt-client connection recovery feature unlike camel-mqtt is doing it by itself.","26/Aug/15 07:10;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/601

    CAMEL-9092 MQTT consumer receives duplicate messages after broker res…

    …tart
    
    Listener.onDisconnect() is also invoked when connection recovery occurs in mqtt-client internally, so it shouldn't attempt to reconnect from outside.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9092

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/601.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #601
    
----
commit c4b2db9ded98f403f9705c4a56cc9c36f7cdad85
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-08-26T07:03:23Z

    CAMEL-9092 MQTT consumer receives duplicate messages after broker restart
    
    Listener.onDisconnect() is also invoked when connection recovery occurs in mqtt-client internally, so it shouldn't attempt to reconnect from outside.

----
","26/Aug/15 07:16;igarashitm;I haven't yet made completely clear why that duplicates happen though, the pull request I submitted did fix the issue. As Listener.onDisconnected() is also invoked when connection recovery happens in mqtt-client internally, -invoking disconnect() due to this event triggers unnecessary connection re-initialization- not really, just doing connected = false without disconnect(), so it's even worse as the old connection is remained open.
I also added setting tracer to MQTT when trace is enabled.","28/Aug/15 14:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/601
","28/Aug/15 15:01;raulvk;The {{connected = true}} is OK in {{onConnected()}}.
Where it needed to be removed was from {{onDisconnected()}} because the MQTT client handles its own reconnection. Setting {{connected = false}} was tricking the endpoint into creating yet another connection while the original one was trying to reconnect. I think this led to more than 1 consumer showing up on the topic and hence the appearance of duplicates.

Thanks for the report and the patch, [~igarashitm]. I merged it with the aforementioned change as well as making the {{uri}} param final in the constructor of MQTTEndpoint.",,,,,,,,,,,,,,,,,,,,,,,
Camel Example Servlet REST generates java.lang.NoClassDefFoundError: scala/xml/PrettyPrinter,CAMEL-9057,12852277,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,05/Aug/15 15:45,05/Aug/15 16:29,14/Mar/19 02:43,05/Aug/15 16:20,2.16.0,,,,,,,,,,,,,,,,examples,,,,0,,,,,,"After starting jetty:run maven goal and accessing the apiDoc of Swagger (http://localhost:8080/camel-example-servlet-rest-tomcat/api-docs/myCamel), the following error is reported

{code}
2015-08-05 17:42:18.053:INFO:oejs.Server:main: Started @18962ms
[INFO] Started Jetty Server
2015-08-05 17:42:26.619:WARN:oejs.ServletHandler:qtp1891031939-25: Error for /camel-example-servlet-rest-tomcat/api-docs/myCamel
java.lang.NoClassDefFoundError: scala/xml/PrettyPrinter
        at com.wordnik.swagger.core.util.JsonSerializer$.<init>(JsonSerializer.scala:31)
        at com.wordnik.swagger.core.util.JsonSerializer$.<clinit>(JsonSerializer.scala)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:225)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:111)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
        at org.apache.camel.component.swagger.RestSwaggerCorsFilter.doFilter(RestSwaggerCorsFilter.scala:44)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
        at org.eclipse.jetty.server.Server.handle(Server.java:497)
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
        at java.lang.Thread.run(Thread.java:745)
Caused by: 
java.lang.ClassNotFoundException: scala.xml.PrettyPrinter
        at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:259)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:235)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:227)
        at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:450)
        at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:403)
        at com.wordnik.swagger.core.util.JsonSerializer$.<init>(JsonSerializer.scala:31)
        at com.wordnik.swagger.core.util.JsonSerializer$.<clinit>(JsonSerializer.scala)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:225)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:111)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
{code}

when the same url is called a second time, then we get another class not found error 

{code}
2015-08-05 17:47:33.803:WARN:oejs.ServletHandler:qtp1891031939-33: Error for /camel-example-servlet-rest-tomcat/api-docs/myCamel
java.lang.NoClassDefFoundError: Could not initialize class com.wordnik.swagger.core.util.JsonSerializer$
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:225)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:111)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
        at org.apache.camel.component.swagger.RestSwaggerCorsFilter.doFilter(RestSwaggerCorsFilter.scala:44)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
        at org.eclipse.jetty.server.Server.handle(Server.java:497)
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
        at java.lang.Thread.run(Thread.java:745)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Aug 05 16:29:49 UTC 2015,,,,,,,0|i2idbr:,9223372036854775807,,,,,,,,,05/Aug/15 15:55;cmoulliard;This error also occurs when the war is deployed on Tomcat,05/Aug/15 16:20;cmoulliard;Add missing scala deps,"05/Aug/15 16:29;cmoulliard;Fixed --> 3f8df7f 2015-08-05 Charles Moulliard (HEAD, origin/master, origin/HEAD, master) CAMEL-9057. Add missing scala deps to resolve the issue
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Too many connection in TIME_WAIT when tempfilename is set in the FTP producer URI.,CAMEL-8860,12837120,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gzres,himanshu,himanshu,11/Jun/15 12:36,22/Sep/17 11:55,14/Mar/19 02:43,20/Sep/17 06:07,2.14.0,,,,,,,,,,,,,,,,camel-ftp,,,,0,,,,,,"So many connections remain in TIME_WAIT state while configuring a FTP producer route with tempfilename property in FTP producer. 

Files are writen using producer template.

Producertemplate.sendBodyAndHeader(producerURI, Exchange.FILE_NAME, fileName) to write file to destination. 

Producer URI : {{ftp://<USER@MACHINE_ADDRESS>//?password=RAW(PASSWORD)&binary=true&passiveMode=false&delete=true&pollStrategy=#ConsumerPollStrategy&disconnect=false&tempFileName=/temp/hello.tmp&initialDelay=10&throwExceptionOnConnectFailed=true&reconnectDelay=10&maximumReconnectAttempts=0&maxMessagesPerPoll=100&readLock=changed&readLockCheckInterval=500&readLockMinLength=1&sendEmptyMessageWhenIdle=true}}

fileName: {{file.tmp}}

We are writing ~ 2000 files . First files are written to temp directory then moved to destination. Connections opened for tempfiles are not re used to write temporary files and we run out of connection after writing 1000 files. 
Route resumes once connections are released. 
Is there a way we can  reuse connection to write temporary files also.

Once tempfilename is removed from the configuration then single connection is used for ftp transfer.",,,,,,,,,,,,,,,,,,01/Jul/15 12:00;himanshu;NetStat_NoTempFIle.PNG;https://issues.apache.org/jira/secure/attachment/12743062/NetStat_NoTempFIle.PNG,01/Jul/15 12:00;himanshu;NetStat_Passive_False.PNG;https://issues.apache.org/jira/secure/attachment/12743058/NetStat_Passive_False.PNG,01/Jul/15 12:00;himanshu;NetStat_Passive_true.PNG;https://issues.apache.org/jira/secure/attachment/12743059/NetStat_Passive_true.PNG,01/Jul/15 12:00;himanshu;Passive_false.log;https://issues.apache.org/jira/secure/attachment/12743060/Passive_false.log,01/Jul/15 12:00;himanshu;Passive_false_NoTempFile.log;https://issues.apache.org/jira/secure/attachment/12743063/Passive_false_NoTempFile.log,01/Jul/15 12:00;himanshu;Passive_true.log;https://issues.apache.org/jira/secure/attachment/12743061/Passive_true.log,30/Jun/15 11:10;himanshu;ResultWithOutTempFileName.log;https://issues.apache.org/jira/secure/attachment/12742785/ResultWithOutTempFileName.log,30/Jun/15 11:13;himanshu;ResultWithTempfileName.log;https://issues.apache.org/jira/secure/attachment/12742788/ResultWithTempfileName.log,30/Jun/15 11:13;himanshu;Result_With_tempfileName_FTPServer_Connection_Count.PNG;https://issues.apache.org/jira/secure/attachment/12742787/Result_With_tempfileName_FTPServer_Connection_Count.PNG,30/Jun/15 11:10;himanshu;Result_Without_tempfilename.PNG;https://issues.apache.org/jira/secure/attachment/12742786/Result_Without_tempfilename.PNG,30/Jun/15 10:59;himanshu;TestFTPConnectionLeak.java;https://issues.apache.org/jira/secure/attachment/12742782/TestFTPConnectionLeak.java,11.0,,,,,,,,,,,,,,,,,,,2015-06-29 11:39:35.844,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Sep 20 06:07:05 UTC 2017,,,,,,,0|i2fxef:,9223372036854775807,,,,,,,,,11/Jun/15 13:53;himanshu;Issue exists in 2.15.2 also .. ,"29/Jun/15 11:39;gzres;[~himanshu], could you provide more details? Could you enable DEBUG logging for {{org.apache.camel.component.file.remote}} logger and attach the logs?
I tried with special socket factory to see when sockets are created and connected and I had single connection reused for all writes:
{noformat}
2015-06-29 13:36:43,103 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 1642030774
2015-06-29 13:36:43,103 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 1642030774 to localhost/127.0.0.1:21000
2015-06-29 13:36:43,194 [main           ] DEBUG RemoteFileProducer             - Connected and logged in to: Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]
2015-06-29 13:36:43,292 [main           ] DEBUG FtpOperations                  - About to store file: file1.txt.part using stream: java.io.ByteArrayInputStream@2f7298b
2015-06-29 13:36:43,336 [main           ] DEBUG FtpOperations                  - Took 0.044 seconds (44 millis) to store file: file1.txt.part and FTP client returned: true
2015-06-29 13:36:43,337 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file1.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,337 [main           ] DEBUG FtpOperations                  - Renaming file: out/file1.txt.part to: out/file1.txt
2015-06-29 13:36:43,343 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part] Exchange[Message: Hello World]
2015-06-29 13:36:43,437 [main           ] DEBUG FtpOperations                  - About to store file: file2.txt.part using stream: java.io.ByteArrayInputStream@6eda5c9
2015-06-29 13:36:43,479 [main           ] DEBUG FtpOperations                  - Took 0.042 seconds (42 millis) to store file: file2.txt.part and FTP client returned: true
2015-06-29 13:36:43,481 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file2.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,481 [main           ] DEBUG FtpOperations                  - Renaming file: out/file2.txt.part to: out/file2.txt
2015-06-29 13:36:43,487 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part] Exchange[Message: Hello World]
2015-06-29 13:36:43,580 [main           ] DEBUG FtpOperations                  - About to store file: file3.txt.part using stream: java.io.ByteArrayInputStream@55b7a4e0
2015-06-29 13:36:43,623 [main           ] DEBUG FtpOperations                  - Took 0.043 seconds (43 millis) to store file: file3.txt.part and FTP client returned: true
2015-06-29 13:36:43,625 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file3.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,625 [main           ] DEBUG FtpOperations                  - Renaming file: out/file3.txt.part to: out/file3.txt
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - ********************************************************************************
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - Testing done: testConnectionLeak(org.apache.camel.component.file.remote.FileToFtpTempFileNameProducerConnectionLeakTest)
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - Took: 0.606 seconds (606 millis)
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - ********************************************************************************
2015-06-29 13:36:43,629 [main           ] DEBUG CamelTestSupport               - tearDown test
2015-06-29 13:36:43,630 [main           ] DEBUG SharedProducerServicePool      - Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@166fa74d
2015-06-29 13:36:43,631 [main           ] DEBUG RemoteFileProducer             - Disconnecting from: Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]
2015-06-29 13:36:43,632 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1642030774
{noformat}
",30/Jun/15 10:50;himanshu;Here is the output of netstat command which i used to track number of TCP connection from ftp server to my machine (10.80.12.47 in this case),"30/Jun/15 10:54;himanshu;Processed  around 5000 files from '10.80.160.137' to '10.80.12.47'.
ProducerURI : {{""ftp://scppuser@10.80.160.137//home/scppuser/hmittal?password=RAW(PASSWORD)&binary=true&passiveMode=false&delete=true&disconnect=false&tempFileName=/temp/hello.tmp&initialDelay=10&throwExceptionOnConnectFailed=true&reconnectDelay=10&maximumReconnectAttempts=0&maxMessagesPerPoll=100&readLock=changed&readLockCheckInterval=500&readLockMinLength=1&sendEmptyMessageWhenIdle=true""}}
",30/Jun/15 10:59;himanshu;Sample java ,30/Jun/15 11:10;himanshu;Attaching the result without tempfilename property in URI. Processes 5000 files and here netstat result in screenshot shows that number of connection do not increase from 3-4 .,30/Jun/15 11:13;himanshu;Processed 5000 messages with tempfilename in URI . Screen shot clearly shows that tcp connection count reached uptill 3104.,"01/Jul/15 08:52;gzres;[~himanshu], I was checking your example and I see that I was using {{passiveMode=true}}, you were using active mode, so:
* without using tempFileName, each send operation created one server socket on your side (FTP active mode) to send the file to server
* when using tempFileName, each send operation create *three* server sockets
** to check if target file exists
** to check if temp file exists
** to store file

Mina FTP client doesn't provide a way to set SO_REUSEADDR option in server socket, so it defaults to .... platform specific value. In my case (Linux 4.0.6) the value is true, so when creating another server socket, Linux can reuse existing socket in TIME-WAIT state.
Didn't you try considering ftp passive mode?","01/Jul/15 12:00;himanshu;Grzegorz ,

{{passiveMode=true/false}} does not make any difference in number of connection being opened.
Here test sample is 200 messages with FTP sender. Screen shot shows number of connection reached up till 400( 2 per transaction) 
After removing tempfilename from URI we have a single tcp connection for transaction.
NetStat_NoTempFile.PNG
Passive_false_NoTempFile.log
NetStat_Passive_False.PNG
Passive_false.log
NetStat_Passive_True.PNG
Passive_True.log

As you mentioned in case of tempfileName there will be 3 active sockets else only 1 will be created. Tempfile configuration should yield just 3 times connection .
These configuration must not change the behavior of SO_REUSEADDR . 
Assume SO_REUSEADDR is set to false in my ftp server it could have created as many number of connections as there were transactions in both scenarios(with / without tempfilename ).
Currently I am figuring out to check SO_REUSEADDR property on my ftp server but I believe it is set to true as same connection is reused when we do not write temp files.
",02/Jul/15 06:05;gzres;Thanks for comments - I'll search more...,"07/Jul/15 09:50;gzres;[~himanshu], I checked again with camel 2.16-SNAPSHOT and even when I used passive mode and NO tempFileName, I had connection per write.

I've additionally set a range of passive ports to be used in ftp server (mina-ftp used in camel ftp tests) to {{40000-40020}} and I wrote 1000 files. {{ss -napt | wc -l}} showed me 1000 sockets in TIME-WAIT state like this:
{noformat}
...
TIME-WAIT  0      0          ::ffff:127.0.0.1:60184     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60185     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60190     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60193     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60197     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60212     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60217     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60220     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60235     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60241     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60259     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60274     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60277     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60284     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60290     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60295     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60301     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60322     ::ffff:127.0.0.1:40003 
...
{noformat}
So no problem with reusing TIME-WAIT sockets.

Also I've used my own socket factory to be used in ftp endpoint:
{code:java}
    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry jndi = super.createRegistry();

        SocketFactory sf = new AuditingSocketFactory();
        jndi.bind(""sf"", sf);
        return jndi;
    }
{code}

I used this parameter in FTP endpoint: {{ftpClient.socketFactory=#sf}}. My socket factory just logged information about opening and closing sockets. I had 1000 blocks of such logs:
{noformat}
2015-07-07 11:49:38,264 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin@localhost:21000/out/?disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=true&password=xxxxxx&tempFileName=%2Ftemp%2Fhello.tmp] Exchange[Message: Hello World 00018]
2015-07-07 11:49:38,266 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 298317613
2015-07-07 11:49:38,266 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 298317613 to /127.0.0.1:40014
2015-07-07 11:49:38,267 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 298317613
2015-07-07 11:49:38,267 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 298317613
2015-07-07 11:49:38,307 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 1597289593
2015-07-07 11:49:38,307 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 1597289593 to /127.0.0.1:40001
2015-07-07 11:49:38,308 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1597289593
2015-07-07 11:49:38,308 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1597289593
2015-07-07 11:49:38,350 [main           ] DEBUG FtpOperations                  - About to store file: hello.tmp using stream: java.io.ByteArrayInputStream@7d34a4c3
2015-07-07 11:49:38,351 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 187514477
2015-07-07 11:49:38,351 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 187514477 to /127.0.0.1:40003
2015-07-07 11:49:38,352 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 187514477
2015-07-07 11:49:38,352 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 187514477
2015-07-07 11:49:38,391 [main           ] DEBUG FtpOperations                  - Took 0.041 seconds (41 millis) to store file: hello.tmp and FTP client returned: true
2015-07-07 11:49:38,393 [main           ] DEBUG RemoteFileProducer             - Wrote [out//temp/hello.tmp] to [Endpoint[ftp://admin@localhost:21000/out/?disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=true&password=xxxxxx&tempFileName=%2Ftemp%2Fhello.tmp]]
2015-07-07 11:49:38,393 [main           ] DEBUG FtpOperations                  - Renaming file: out//temp/hello.tmp to: out/file-00018.txt
{noformat}",07/Jul/15 09:57;gzres;And what is the ftp server you are using?,"07/Jul/15 13:30;himanshu;Hi Grzegorz Grzybek,

I am using {{vsftp version 2.2.2 with camel 2.14. }}
Could it be an issue with the ftp server ?

In above comments you have mentioned that even without {{tempfileName}} in URI you are seeing 1000 connection in TIME_WAIT and you have {{disconnect=false}} set in URI. 
With this configuration it should not have opened 1000 connection in TIME_WAIT. That means sockets are not re-used . I am not sure whether my understanding is correct here.

Do you have any other alternative to avoid these many connection ?

","07/Jul/15 14:31;gzres;I checked with camel 2.14.0 as well with the same result. I hade many sockets in TIME-WAIT state.
Please try debugging https://github.com/apache/commons-net/blob/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java#L810 - commons-net/ftpclient opens either {{_serverSocketFactory_.createServerSocket}} (active mode) or {{_socketFactory_.createSocket()}} (passive mode), but I didn't have problems with creating socket (reusing them)...

Maybe you have the problem described here: http://ma.juii.net/blog/excessive-ftp-connections ?","07/Jul/15 14:45;himanshu;Hi Grzegorz Grzybek,

Thats a nice article and explains well about ftp active/passive mode. 
My only point here is {{tempFIleName}} configuration in URI should not drive socket behavior as it is happening in my case. It clearly stays that there is a problem in the implementation.

Anyways thanks for your inputs","07/Jul/15 14:48;gzres;yes, I understand. This is how ftpclient works - what's weird is how did you actually get this socket reuse... hmm, maybe my socket factory should do some reuse? Maybe default socket factory does this?","07/Jul/15 15:01;himanshu;I will debug FTPClient code and check about the connection creation difference with/without tempFileName configuration.

Still I feel problem that active/passive mode is not resulting in these many connections . Need to check Camel FTP component. As the behavior is driven by tempFIleName configuration","08/Jul/15 11:24;gzres;Thanks.
I saw that passive mode doesn't make any difference. And for me not using tempFileName didn't lead to single socket use...","13/Jul/15 07:12;himanshu;Grzegorz Grzybek,

As you mentioned that even {{tempFileName}} does not make any difference in number of connections. Number of Connections shoot up with each file transfer and result in TIME_WAIT connections.
Should not camel-ftp check the connection handling part ? As FTP URI config already has {{disconnect=false}}.",27/Jan/16 08:43;himanshu;Issue was with endpoint URi which was changing with every message transfer and forcing camel to create a new connection for every changed URI .We have changed the configuration. Taken out tempFileName from endpointURI and setting it as header in Producer template. With this approach uri remains static for each file transfer.,27/Jan/16 08:45;himanshu;Issue was with endpoint URi which was changing with every message transfer and forcing camel to create a new connection for every changed URI .We have changed the configuration. Taken out tempFileName from endpointURI and setting it as header in Producer template. With this approach uri remains static for each file transfer.,27/Jan/16 08:47;gzres;[~himanshu] thanks for the update ;) I'm glad it works.,"20/Sep/17 05:36;himanshu;[~grzes], 
It solved the problem of connection leak at camel end , but still creates a new connection if tempFileName is added as uri paramaters in camel ftp uri. Verified it in 2.19.2 . And same issue

Reiterating the issue
When we have {{tempFilename}} in camel uri and we use producer template to write file to remote ftp location , camel opens new connection for every file transfer. Though {{disconnect}} option is set to false in uri.
If we take out {{tempFilename}} from uri connections are reused.",20/Sep/17 05:38;gzres;Pretty please create new issue with the details and new version of Camel.,20/Sep/17 06:07;himanshu;Created CAMEL-11792 for other issue,,,,,
[doc] camel-http doc should mention that NTLM support is very limited.,CAMEL-8788,12831743,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,tmielke,tmielke,21/May/15 14:27,22/May/15 08:23,14/Mar/19 02:43,21/May/15 15:59,2.15.2,,,,,,,,,,,,,,,,documentation,,,,0,documentation,http,httpclient,,,"The documentation of the [camel-http|http://camel.apache.org/http.html] component implies there is full support for NTLM. 

However tests against IIS 8 prove this wrong.
Further from http://hc.apache.org/httpclient-3.x/authentication.html#NTLM

""NT Lan Manager (NTLM) authentication is a proprietary, closed challenge/response authentication protocol for Microsoft Windows. Only some details about NTLM protocol are available through reverse engineering. HttpClient provides limited support for what is known as NTLMv1, the early version of the NTLM protocol. HttpClient does not support NTLMv2 at all. ""

These limitations on NTLM should be documented on the camel-http component doc. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-21 14:34:46.829,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Thu May 21 15:58:12 UTC 2015,,,,,,,0|i2f1t3:,9223372036854775807,,,,,,,,,"21/May/15 14:29;tmielke;I could imagine a comment like the following being added to the ""Authentication and Proxy"" section of the camel-http documentation.

{quote}
Note: camel-http is based on HttpClient v3.x and as such has only [limited support|http://hc.apache.org/httpclient-3.x/authentication.html#NTLM] for what is known as NTLMv1, the early version of the NTLM protocol. It does not support NTLMv2 at all.""
{quote}


I am happy to add this note to the documentation if there is agreement.",21/May/15 14:34;davsclaus;+1 go ahead Torsten we love contributions,"21/May/15 15:58;tmielke;Resolved with revision 88 of 
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=54726",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Unable to generate DTOs for Filtered Lookup fields,CAMEL-8737,12826861,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,simondelfab,simondelfab,04/May/15 06:53,06/May/15 01:51,14/Mar/19 02:43,04/May/15 20:21,2.15.1,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-salesforce,,,,0,,,,,,"Get the following exception:

Caused by: org.apache.maven.plugin.MojoExecutionException: Error getting SObject description for 'Account_Request__c': Can not deserialize instance of java.lang.String out of START_ARRAY token
 at [Source: java.io.ByteArrayInputStream@1bd8e9d9; line: 1, column: 36155] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""filteredLookupInfo""]->org.apache.camel.component.salesforce.ap
i.dto.FilteredLookupInfo[""controllingFields""])
        at org.apache.camel.maven.CamelSalesforceMojo.execute(CamelSalesforceMojo.java:312)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        ... 19 more
Caused by: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_ARRAY token
 at [Source: java.io.ByteArrayInputStream@1bd8e9d9; line: 1, column: 36155] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""filteredLookupInfo""]->org.apache.camel.component.salesforce.ap
i.dto.FilteredLookupInfo[""controllingFields""])
        at org.codehaus.jackson.map.JsonMappingException.from(JsonMappingException.java:163)

Any suggestions what could causing this issue?

From the looks of it, the class

public class FilteredLookupInfo extends AbstractDTOBase {

    private String controllingFields;
    ...
}

should be 

public class FilteredLookupInfo extends AbstractDTOBase {

    private List controllingFields;
}

The type in question has a child relation to another custom object.",,,,,,,,,,,,,CAMEL-8269,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-04 17:15:28.783,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed May 06 01:51:26 UTC 2015,,,,,,,0|i2e8h3:,9223372036854775807,,,,,,,,,"04/May/15 07:24;simondelfab;Found out what the problem is. For the default version of the API (33.0), the DescribeSObjectResult has a string array for controllingFields: 

https://www.salesforce.com/developer/docs/api/Content/sforce_api_calls_describesobjects_describesobjectresult.htm#topic-title

So my hunch in the description is correct. The controllingFields field should be a List.

I was able to get the code generator to work when I specified API version 30.0. Will this cause an issue later on?","04/May/15 17:15;dhirajsb;This is weird. I ran integration tests with version 33.0, which exercises _DescribeSObjectResult_, and it worked. Maybe the test Salesforce account had no data for this field. I'm troubleshooting this now, so any hints on how this SObject description got a value for this field will help. 

As long as you use the same API version at runtime as used in code generation, you should be ok. Obviously, you won't have access to any Salesforce fields that were added after 30.0. 

As for the solution, off the bat I'm not sure how _DescribeSObjectResult_ could have an array and non-array field simultaneously based on API versions. Maybe a custom type handler?? ","04/May/15 19:07;dhirajsb;This is an issue in the new type _FilteredLookupInfo_ added for supporting API v 33.0. Adding link to original issue where the type was introduced, which I will reopen and fix. ","04/May/15 20:21;dhirajsb;Fixed issue and commit merged in camel-2.12.x, camel-2.13.x, camel-2.14.x, camel-2.15.x, and master branches. ","04/May/15 20:24;dhirajsb;Hi [~simondelfab], I updated the integration test account to add filtered lookups and it worked correctly with a {{List<String> controllingFields}}. Please close this issue once you have verified the fix. ","06/May/15 01:50;simondelfab;Hi Dhiraj, I can confirm that 2.15.3-SNAPSHOT worked. Thank you for the quick fix.

> Maybe the test Salesforce account had no data for this field. I'm troubleshooting this now, so any hints on how this SObject description got a value for this field will help

A third party devs are working on SF app (and I am not an expert on SF), but from what I can see, I think you are right regarding there being no data for this field. ",06/May/15 01:51;simondelfab;Generating classes works with the fix,,,,,,,,,,,,,,,,,,,,,,,
Salesforce component security listener does not replace old auth header,CAMEL-8519,12783426,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,19/Mar/15 23:32,20/Mar/15 21:41,14/Mar/19 02:43,20/Mar/15 21:41,2.13.4,2.14.2,2.15.0,,,,,,,,,,2.14.3,2.15.1,,,camel-salesforce,,,,0,,,,,,"The security listener incorrectly adds a copy of the auth header for streaming api client. Although this causes the exchange to ultimately fail, the BayeuxClient reconnects and proceeds without raising errors in Camel route. However, this ends up logging multiple warnings from the security listener and the BayeuxClient. 
Fixing the security listener to reset the auth header will optimize this process and let the BayeuxClient continue with the existing exchange. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Mar 20 21:41:00 UTC 2015,,,,,,,0|i270en:,9223372036854775807,,,,,,,,,"20/Mar/15 21:41;dhirajsb;Fix merged to branches
 master
 camel-2.12.x
 camel-2.13.x
 camel-2.14.x
 camel-2.15.x
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Several enum types should generate lower case values in camel-linkedin,CAMEL-8469,12780821,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,trohovsky,trohovsky,10/Mar/15 12:14,04/May/15 14:54,14/Mar/19 02:43,10/Mar/15 19:24,2.14.1,,,,,,,,,,,,,,,,,,,,0,,,,,,"Following parameters - types should generate values in lower case:

- event_type - org.apache.camel.component.linkedin.api.Eventtype
- category - org.apache.camel.component.linkedin.api.Category
- order - org.apache.camel.component.linkedin.api.Order
- role - org.apache.camel.component.linkedin.api.Role
- postcategorycode - org.apache.camel.component.linkedin.api.model.PostCategoryCode

Also notice that postcategory code should contain 'job' and 'promotion' values - https://developer-programs.linkedin.com/documents/groups-api.

I've tried to fix that with adding of
{code}
<bindings node=""//xs:simpleType[@name='event-type']"">
    <typesafeEnumClass name=""EventType"" />
</bindings>
{code}
to linkedin-api-schema.xjb as well as appropriate simpleType to linkedin-api-schema.xsd, but it was without success. I still got:
{code}
Error invoking getCompanyUpdates: Invalid filter {STATUS_UPDATE}
{code}
Names of enum values are used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-10 13:24:51.779,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon May 04 14:54:30 UTC 2015,,,,,,,0|i26kov:,9223372036854775807,,,,,,,,,"10/Mar/15 13:24;dhirajsb;Its actually an issue in the enums generated by CXF WADLtoJava, so the jaxb bindings have no effect. The solution is to move the enumerations to the schema and reference them in the wadl. I'll take care of that. ","10/Mar/15 19:24;dhirajsb;Moving the enums to xsd fixed the issue with generating {{public String value()}} method in the enum. But CXF still marshaled the name of the enum value, instead of the String in the value field. So an {{EnumQueryParamConverterProvider}} had to be added to the Linkedin API and component to handle enums in query params. 
New tests were also added to verify the changes. ","10/Mar/15 19:25;dhirajsb;[~trohovsky], once you have verified this fix, please close this issue. ",04/May/15 14:54;trohovsky;verified,,,,,,,,,,,,,,,,,,,,,,,,,,
"Feature camel-linkedin is missing dependencies for xalan, xerces and xmlresolver",CAMEL-8466,12780645,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,09/Mar/15 23:16,09/Mar/15 23:34,14/Mar/19 02:43,09/Mar/15 23:34,2.14.2,2.15.0,,,,,,,,,,,2.14.3,2.15.1,,,,,,,0,,,,,,"OSGi dependencies for xalan, xerces and xmlresolver are missing for feature camel-linkedin. These dependencies are transitive from htmlunit, which is included as a wrapped jar right now, it should be switched to the servicemix bundle for htmlunit for this and camel-box features.. That bundle needs to be named correctly as mentioned in SMX4-1816. ",,,,,,,,,,,,,,,,,SMX4-1816,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Mar 09 23:34:17 UTC 2015,,,,,,,0|i26jlr:,9223372036854775807,,,,,,,,,"09/Mar/15 23:34;dhirajsb;Feature camel-linkedin has been updated on master, camel-2.15.x and camel-2.14.x branches. 
The requirement to update features to use smx4 bundle for htmlunit has been moved to CAMEL-8467. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle invalid client id gracefully in Camel Box component,CAMEL-8426,12778823,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,02/Mar/15 18:27,02/Mar/15 19:08,14/Mar/19 02:43,02/Mar/15 19:08,2.14.1,2.15.0,,,,,,,,,,,2.14.2,2.15.0,,,,,,,0,camel-box,oauth2,,,,"Box component uses HtmlUnit to perform a login and authorization on user's behalf for OAuth. Box.com returns an error message instead of a login page on an invalid client id, which the component should handle gracefully, instead of the missing HTML element it throws currently. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Mar 02 19:08:43 UTC 2015,,,,,,,0|i26947:,9223372036854775807,,,,,,,,,"02/Mar/15 19:08;dhirajsb;Fix committed to master and camel-2.14.x, component now throws an IllegalArgumentException on invalid client id. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle invalid client id gracefully in Camel LinkedIn component,CAMEL-8425,12778821,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,02/Mar/15 18:27,02/Mar/15 18:54,14/Mar/19 02:43,02/Mar/15 18:54,2.14.1,2.15.0,,,,,,,,,,,2.14.2,2.15.0,,,,,,,0,camel-linkedin,oauth2,,,,"LinkedIn component uses HtmlUnit to perform a login and authorization on user's behalf for OAuth. LinkedIn returns an error message instead of a login page on an invalid client id, which the component should handle gracefully, instead of the missing HTML element it throws currently. c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Mar 02 18:54:12 UTC 2015,,,,,,,0|i2693r:,9223372036854775807,,,,,,,,,"02/Mar/15 18:54;dhirajsb;Fix committed to master and camel-2.14.x, component now throws an InvalidArgumentException on invalid client id. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle empty Salesforce picklist types,CAMEL-8395,12776939,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,23/Feb/15 20:41,23/Feb/15 22:30,14/Mar/19 02:43,23/Feb/15 22:30,2.14.1,,,,,,,,,,,,2.14.2,2.15.0,,,camel-salesforce,,,,0,,,,,,Salesforce inbuilt/user customizable picklist types may be empty with no values defined. This breaks sobject-picklist.vm. It should instead generate an empty Enum with no values. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Feb 23 22:30:04 UTC 2015,,,,,,,0|i25xw7:,9223372036854775807,,,,,,,,,23/Feb/15 22:30;dhirajsb;Fixed on master and 2.14.x branches. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LinkedIn consumer endpoints have to specify an empty 'fields' parameter,CAMEL-8359,12775257,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dhirajsb,dhirajsb,dhirajsb,16/Feb/15 01:54,16/Feb/15 02:06,14/Mar/19 02:43,16/Feb/15 02:06,2.14.1,,,,,,,,,,,,2.14.2,2.15.0,,,,,,,0,camel,camel-linkedin,linkedin,,,"LinkedIn consumer endpoints that take a 'fields' parameter should not have to specify an empty value for the optional field. 
This field is handled for producer endpoints as its default value is set in LinkedInEndpoint.interceptProperties().
This field should be automatically set to null if the api method requires it in LinkedInConsumer.interceptPropertyNames(). ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Feb 16 02:06:36 UTC 2015,,,,,,,0|i25nsf:,9223372036854775807,,,,,,,,,16/Feb/15 02:06;dhirajsb;Fixed on master and camel-2.14.x branches,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid using Olingo2 library classes from 'core' package as it has been designated internal and not part of the API exposed using OSGi headers,CAMEL-8358,12775255,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,16/Feb/15 00:49,16/Feb/15 23:27,14/Mar/19 02:43,16/Feb/15 23:27,2.14.1,2.15.0,,,,,,,,,,,2.14.2,2.15.0,,,,,,,0,camel,olingo2,,,,"Olingo2 library classes in 'core' are internal and should not be used. Even though the URI parser classes should really have been exposed through the public API. This includes a public URI parser URIInfo exposed through the api package, but its implementation URIInfoImpl is part of core and hence not exposed. 

This does not affect any public component classes in the Olingo2 component.  

See OLINGO-420. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Feb 16 23:27:19 UTC 2015,,,,,,,0|i25nrz:,9223372036854775807,,,,,,,,,16/Feb/15 23:27;dhirajsb;Fix committed to master and 2.14.x branches,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Project created from camel-blueprint-archetype does not work,CAMEL-8326,12773437,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,09/Feb/15 12:35,10/Feb/15 14:10,14/Mar/19 02:43,10/Feb/15 14:10,2.13.3,2.14.1,,,,,,,,,,,,,,,osgi,tooling,,,0,,,,,,"When we launch the camel:run maven goal created from a project created using the archetype :

org.apache.camel.archetypes:camel-archetype-blueprint (Creates a new Camel project with OSGi blueprint support. Ready to be deployed in OSGi.)

then it fails

{code}
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [15], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423485067188
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
{code}

Issue reported with camel : 2.14.1 & also 2.13.3",,,,,,,,,,,,,,,,,,10/Feb/15 08:27;cmoulliard;test.zip;https://issues.apache.org/jira/secure/attachment/12697686/test.zip,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-02-10 05:59:50.928,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Feb 10 14:10:58 UTC 2015,,,,,,,0|i25d1b:,9223372036854775807,,,,,,,,,10/Feb/15 05:59;davsclaus;What version of Karaf do you use? ,"10/Feb/15 07:45;cmoulliard;When camel:run is launched with the option use Blueprint, then the Camel Main class part of camel-test-blueprint project uses the PoJoSR framework and not Karaf with Pax WEB. Here is how the Main class of the project camel-test-blueprint calls the Camel to create the Bundle Context :

https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/Main.java#L136 &
https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java#L105","10/Feb/15 07:50;davsclaus;Works fine for me, just created using Camel 2.14.1 and 2.15-SNAPSHOT

Here is 2.14.1
{code}
davsclaus:~/Documents/workspace/blue/$ mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.14.1:run (default-cli) > test-compile @ blue >>>
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] <<< camel-maven-plugin:2.14.1:run (default-cli) < test-compile @ blue <<<
[INFO]
[INFO] --- camel-maven-plugin:2.14.1:run (default-cli) @ blue ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.pom (2 KB at 2.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.pom (3 KB at 19.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.jar (120 KB at 551.3 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.jar (210 KB at 562.6 KB/sec)
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle blue is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is starting
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: Endpoint[timer://foo?period=5000]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes, of which 1 is started.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) started in 0.345 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 08:49:16
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 08:49:21
^C[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutting down
[                      Thread-1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: Endpoint[timer://foo?period=5000]
[                      Thread-1] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) uptime 7.410 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutdown in 0.011 seconds
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle blue
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[                      Thread-1] Activator                      INFO  Camel activator stopping
[                      Thread-1] Activator                      INFO  Camel activator stopped
[                      Thread-1] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423554553187
{code}

Have you changed anything in the generate code? ","10/Feb/15 08:25;cmoulliard;No. Here is the procedure followed :

{code}
mvn archetype:generate
[INFO] Scanning for projects...
Downloading: http://repository.jboss.org/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml
Downloading: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml
Downloaded: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml (10 KB at 16.8 KB/sec)
Downloaded: http://repository.jboss.org/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml (23 KB at 30.7 KB/sec)
Downloading: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml
Downloaded: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml (794 B at 2.1 KB/sec)
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> maven-archetype-plugin:2.2:generate (default-cli) > generate-sources @ standalone-pom >>>
[INFO]
[INFO] <<< maven-archetype-plugin:2.2:generate (default-cli) < generate-sources @ standalone-pom <<<
[INFO]
[INFO] --- maven-archetype-plugin:2.2:generate (default-cli) @ standalone-pom ---
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
Choose archetype:
1: remote -> am.ik.archetype:msgpack-rpc-jersey-blank-archetype (Blank Project for Spring Boot + Jersey)
2: remote -> am.ik.archetype:spring-boot-blank-archetype (Blank Project for Spring Boot)
3: remote -> am.ik.archetype:spring-boot-docker-blank-archetype (Docker Blank Project for Spring Boot)
4: remote -> am.ik.archetype:spring-boot-jersey-blank-archetype (Blank Project for Spring Boot + Jersey)
5: remote -> br.com.address.archetypes:struts2-archetype (an archetype web 3.0 + struts2 (bootstrap + jquery) + JPA 2.1 with struts2 login system)
...

460: remote -> org.apache.camel:camel-component (-)
461: remote -> org.apache.camel:camel-router (-)
462: remote -> org.apache.camel.archetypes:camel-archetype-activemq (Creates a new Camel project that configures and interacts with ActiveMQ.)
463: remote -> org.apache.camel.archetypes:camel-archetype-api-component (Creates a new Camel component that wraps one or more API proxies.)
464: remote -> org.apache.camel.archetypes:camel-archetype-blueprint (Creates a new Camel project with OSGi blueprint support. Ready to be deployed in OSGi.)
...

Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 525: 464
Choose org.apache.camel.archetypes:camel-archetype-blueprint version:
1: 2.8.0
...
41: 2.14.0
42: 2.14.1
43: 2.15-SNAPSHOT
Choose a number: 43: 42
Define value for property 'groupId': : org.apache.camel
Define value for property 'artifactId': : test
Define value for property 'version':  1.0-SNAPSHOT: :
Define value for property 'package':  org.apache.camel: :
[INFO] Using property: camel-version = 2.14.1
[INFO] Using property: log4j-version = 1.2.17
[INFO] Using property: maven-bundle-plugin-version = 2.3.7
[INFO] Using property: maven-compiler-plugin-version = 2.5.1
[INFO] Using property: maven-resources-plugin-version = 2.6
[INFO] Using property: slf4j-version = 1.7.7
Confirm properties configuration:
groupId: org.apache.camel
artifactId: test
version: 1.0-SNAPSHOT
package: org.apache.camel
camel-version: 2.14.1
log4j-version: 1.2.17
maven-bundle-plugin-version: 2.3.7
maven-compiler-plugin-version: 2.5.1
maven-resources-plugin-version: 2.6
slf4j-version: 1.7.7
 Y: : Y
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: camel-archetype-blueprint:2.14.1
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.apache.camel
[INFO] Parameter: artifactId, Value: test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: package, Value: org.apache.camel
[INFO] Parameter: packageInPathFormat, Value: org/apache/camel
[INFO] Parameter: maven-bundle-plugin-version, Value: 2.3.7
[INFO] Parameter: maven-resources-plugin-version, Value: 2.6
[INFO] Parameter: groupId, Value: org.apache.camel
[INFO] Parameter: maven-compiler-plugin-version, Value: 2.5.1
[INFO] Parameter: slf4j-version, Value: 1.7.7
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: log4j-version, Value: 1.2.17
[INFO] Parameter: camel-version, Value: 2.14.1
[INFO] Parameter: package, Value: org.apache.camel
[INFO] Parameter: artifactId, Value: test
[INFO] project created from Archetype in dir: /Users/chmoulli/Temp/test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:13 min
[INFO] Finished at: 2015-02-10T09:21:09+01:00
[INFO] Final Memory: 14M/245M
[INFO] ------------------------------------------------------------------------
dabouhost:~/Temp$ cd test
dabouhost:~/Temp/test$ mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.14.1:run (default-cli) > test-compile @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ test ---
[INFO] Compiling 2 source files to /Users/chmoulli/Temp/test/target/classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ test ---
[INFO] Compiling 1 source file to /Users/chmoulli/Temp/test/target/test-classes
[INFO]
[INFO] <<< camel-maven-plugin:2.14.1:run (default-cli) < test-compile @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.14.1:run (default-cli) @ test ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [15], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423556490066
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
[ERROR] *************************************
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 33.644 s
[INFO] Finished at: 2015-02-10T09:22:00+01:00
[INFO] Final Memory: 30M/707M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.14.1:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext) -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{code}",10/Feb/15 08:27;cmoulliard;Project tested,10/Feb/15 08:31;davsclaus;What version of Maven and JDK are you using?,"10/Feb/15 09:23;cmoulliard;Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T22:58:10+02:00)
Java version: 1.7.0_51, vendor: Oracle Corporation","10/Feb/15 13:17;davsclaus;Works fine for me with almost the same

mvndavsclaus:~/$ mvn -version
Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T22:58:10+02:00)
Maven home: /opt/apache-maven-3.2.3
Java version: 1.7.0_45, vendor: Oracle Corporation


I think you need to check the logs, or deploy the bundle to Karaf 2.4.x and see if karaf reports some error.","10/Feb/15 13:41;cmoulliard;I can't yet explain what is the issue but if we first, install the project before to launch camel:run, then it will work

1) Does not work
mvn clean compile camel:run

2) Work
mvn clean package camel:run

I suspect that the reason is that the MANIFEST.MF created by the felix maven bundle was not generated during compile phase !

{code}
dabouhost:~/Temp/test$ mvn install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.13-SONATYPE:test (default-test) @ test ---
[INFO] Surefire report directory: /Users/chmoulli/Temp/test/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.RouteTest
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /Users/chmoulli/Temp/test/target/classes/OSGI-INF/blueprint/blueprint.xml
[                      Thread-0] RawBuilder                     INFO  Copy thread finished.
[                          main] Activator                      INFO  Camel activator starting
[                          main] Activator                      INFO  Camel activator started
[                          main] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[                          main] RouteTest                      INFO  ********************************************************************************
[                          main] RouteTest                      INFO  Testing: testRoute(org.apache.camel.RouteTest)
[                          main] RouteTest                      INFO  ********************************************************************************
[         Blueprint Extender: 3] BlueprintContainerImpl         INFO  Bundle RouteTest is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[                          main] RouteTest                      INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is starting
[                          main] DefaultManagementStrategy      INFO  JMX is disabled
[                          main] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: Endpoint[timer://foo?period=5000]
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 is started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) started in 0.075 seconds
[                          main] MockEndpoint                   INFO  Asserting: Endpoint[mock://result] is satisfied
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 14:37:32
[                          main] RouteTest                      INFO  ********************************************************************************
[                          main] RouteTest                      INFO  Testing done: testRoute(org.apache.camel.RouteTest)
[                          main] RouteTest                      INFO  Took: 1.090 seconds (1090 millis)
[                          main] RouteTest                      INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutting down
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: Endpoint[timer://foo?period=5000]
[                          main] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) uptime 1.098 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutdown in 0.007 seconds
[                          main] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle RouteTest
[                          main] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[                          main] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[                          main] Activator                      INFO  Camel activator stopping
[                          main] Activator                      INFO  Camel activator stopped
[                          main] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423575450131
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.689 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:bundle (default-bundle) @ test ---
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:., Jar:camel-core, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core/2.14.1/camel-core-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/xml
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-xml]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-xml/2.14.1/camel-core-xml-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/xml/util/jsse
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-xml]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-xml/2.14.1/camel-core-xml-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/osgi
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-osgi]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-osgi/2.14.1/camel-core-osgi-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/osgi/utils
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-osgi]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-osgi/2.14.1/camel-core-osgi-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[INFO]
[INFO] --- maven-install-plugin:2.4:install (default-install) @ test ---
[INFO] Installing /Users/chmoulli/Temp/test/target/test-1.0-SNAPSHOT.jar to /Users/chmoulli/.m2/repository/org/apache/camel/test/1.0-SNAPSHOT/test-1.0-SNAPSHOT.jar
[INFO] Installing /Users/chmoulli/Temp/test/pom.xml to /Users/chmoulli/.m2/repository/org/apache/camel/test/1.0-SNAPSHOT/test-1.0-SNAPSHOT.pom
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:install (default-install) @ test ---
[INFO] Installing org/apache/camel/test/1.0-SNAPSHOT/test-1.0-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.704 s
[INFO] Finished at: 2015-02-10T14:37:35+01:00
[INFO] Final Memory: 16M/459M
[INFO] ------------------------------------------------------------------------
dabouhost:~/Temp/test$ mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.14.1:run (default-cli) > test-compile @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] <<< camel-maven-plugin:2.14.1:run (default-cli) < test-compile @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.14.1:run (default-cli) @ test ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle test is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is starting
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: Endpoint[timer://foo?period=5000]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes, of which 1 is started.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) started in 0.428 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 14:37:45
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 14:37:50
^C[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutting down
[                      Thread-1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: Endpoint[timer://foo?period=5000]
[                      Thread-1] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) uptime 7.581 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutdown in 0.009 seconds
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle test
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[                      Thread-1] Activator                      INFO  Camel activator stopping
[                      Thread-1] Activator                      INFO  Camel activator stopped
[                      Thread-1] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423575461801
{code}",10/Feb/15 13:46;davsclaus;Oh yeah I have a habbit of running mvn clean install a lot ;),"10/Feb/15 13:48;cmoulliard;That works without issue if add an <execution> tag to the <maven-bundle-plugin>. I will update the archetype into the project to avoid such stupid behavior and problem.

{code}
<executions>
    <execution>
      <id>bundle-manifest</id>
      <phase>process-classes</phase>
      <goals>
        <goal>manifest</goal>
      </goals>
    </execution>
  </executions>
{code}",10/Feb/15 14:10;cmoulliard;code submitted : ed73023..c7cb9d3  master -> master,,,,,,,,,,,,,,,,,,
Camel Jetty/Http4 producers should respect Content-Length/Transfer-Encoding:Chunked headers,CAMEL-8169,12763146,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Dec/14 00:52,11/Feb/15 11:57,14/Mar/19 02:43,29/Dec/14 06:19,2.13.3,2.14.1,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-http4,camel-jetty,,,0,,,,,,"If Camel is used the HTTP proxy, users expect that Content-Length and Transfer-Encoding: Chunked headers should be respected when incoming request is redirected using HTTP4 or Jetty producers.
If example if I send request to the following route...
{code}
from(""servlet://0.0.0.0:8080"").to(""http4://foo.com""); 
{code}
...and this request contains Content-Length header (and doesn't contain Transfer-Encoding: Chunked header) then request forwarded to foo.com should not be chunked. In Fuse 6.1 Camel will chunk frowarded request.
In general client sending request to the Camel proxy gateway, should be sure that by default Camel will keep the same chunking/nonchunking behavior as specified in the original request.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-11 11:57:59.116,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Feb 11 11:57:59 UTC 2015,,,,,,,0|i23o7j:,9223372036854775807,,,,,,,,,"22/Dec/14 00:53;njiang;We need to pass the Content-Length header to the Jetty/Http4 producers when the message body is Stream.
Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.","11/Feb/15 11:57;vkasala;Hi Willem,

I saw in your commits [1], that in ""HttpRouteContentLengthTest"" test you use ""invokeMethod"", which does not use the second parameter. You have 2 different test methods, that use those method with ""true/false"" values, however this value is not set.

Can you check your unit test, please?

thanks a lot,
Viliam Kasala

[1] https://fisheye6.atlassian.com/changelog/camel-git/tests/camel-itest/src/test/java/org/apache/camel/itest/http/HttpRouteContentLengthTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jsch unit tests are failing,CAMEL-7917,12748354,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,15/Oct/14 17:49,15/Oct/14 20:36,14/Mar/19 02:43,15/Oct/14 20:01,2.12.4,,,,,,,,,,,,2.12.5,,,,camel-jsch,,,,0,,,,,,"A known issue in jsch 0.1.50:
{noformat}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Bye World]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1379)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:622)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:467)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:463)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:165)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:159)
	at org.apache.camel.component.jsch.ScpSimpleProduceTest.testScpSimpleSubPathProduce(ScpSimpleProduceTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.lang.NullPointerException
	at com.jcraft.jsch.Session.checkHost(Session.java:802)
	at com.jcraft.jsch.Session.connect(Session.java:342)
	at org.apache.camel.component.jsch.ScpOperations.createSession(ScpOperations.java:249)
	at org.apache.camel.component.jsch.ScpOperations.connect(ScpOperations.java:181)
	at org.apache.camel.component.file.remote.RemoteFileProducer.connectIfNecessary(RemoteFileProducer.java:189)
	at org.apache.camel.component.file.remote.RemoteFileProducer.recoverableConnectIfNecessary(RemoteFileProducer.java:181)
	at org.apache.camel.component.file.remote.RemoteFileProducer.preWriteCheck(RemoteFileProducer.java:113)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:114)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:163)
	... 31 more

{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2014-10-15 17:49:34.0,,,,,,,0|i217hr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSD decoding bad guess in Validator,CAMEL-7883,12745099,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bbonnet,bbonnet,30/Sep/14 22:34,21/Oct/14 08:40,14/Mar/19 02:43,20/Oct/14 02:45,2.13.2,2.14.0,,,,,,,,,,,2.13.3,2.14.1,2.15.0,,camel-core,,,,0,,,,,,"Validator component does not take imported XSD encoding into account when validating XML. That may lead to validation errors if an imported XSD is ISO-8859-1 encoded and containing non ASCII caracters, even though that XSD declares its encoding correctly in its XML prolog.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-30 22:47:40.665,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Oct 21 08:40:03 UTC 2014,,,,,,,0|i20nrj:,9223372036854775807,,,,,,,,,"30/Sep/14 22:47;githubbot;GitHub user bonnetb opened a pull request:

    https://github.com/apache/camel/pull/291

    CAMEL-7883 : Validator XSD decoding issue with non UTF-8 imported XSD

    Let SAX do a good guess for XSD encoding (it uses XSD prolog) instead of using a converter that may not fit.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bonnetb/camel xsdBadDecoding

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/291.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #291
    
----
commit cd5ae15b21762513f8242429f734113c301b08f8
Author: Benjamin BONNET <benjamin.bonnet@m4x.org>
Date:   2014-09-30T22:36:43Z

    fix for CAMEL-7883

----
","30/Sep/14 22:55;bbonnet;Hi,
when an imported XSD is decoded, Camel uses a converter defined in context. That converter involves a reader that will not take into account the XSD XML prolog. If that reader does not use the same encoding as one of the imported XSD, you may get into trouble while validating XML files.
Instead of providing the content of XSD as char stream, I think it is more appropriate to provide it as a binary stream and let Sax make a good guess about the XSD encoding.
I made a pull request on github with a unit test and a fix : see https://github.com/apache/camel/pull/291
Regards","20/Oct/14 02:45;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Benjamin.","21/Oct/14 08:38;githubbot;Github user bonnetb closed the pull request at:

    https://github.com/apache/camel/pull/291
",21/Oct/14 08:40;bbonnet;Thank you Willem,,,,,,,,,,,,,,,,,,,,,,,,,
Chaining cxfrs endpoints,CAMEL-7701,12734265,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bbonnet,bbonnet,14/Aug/14 21:49,21/Oct/14 08:39,14/Mar/19 02:43,15/Aug/14 09:06,2.13.2,Future,,,,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-cxf,,,,0,,,,,,"Hi,
chaining 2 cxfrs endpoints in a route reveals 2 problems :
- proxy-client method choice in producer (CxfRsProducer.findRightMethod) is way too restrictive : the choice is based on the name and the exact type of the parameters. As a consequence, if parameters  type transmitted are compatible (i.e. extend the signature parameter types) with the method signature but are not the very ones of the signature, the operation will not be found.
That problem occurs when you chain 2 cxfrs endpoints having an InputStream parameter since cxf uses DelegatingInputStream to handle received InputStreams.
That problem may also occur for any "".to()"" cxfrs endpoint if the message body uses subtypes of the parameters.
- transmitting Content-Type header from camel to CXFRS request in DefaultCxfRsBinding may cause trouble for multipart messages : actually, if Content-Type contains a boundary defintion (which is the case when you chain cxfrs endpoints), that definition will be included into the Content-Type transmitted (in addition with the one generated during binding). That throws an exception since the ""old"" boundary is not used in the transmitted message. NB : header propagation was not enforced in 2.13.2 but it is enforced in head.

I developped a JUnit test that shows such failures in the case of a cxfrs endpoint chaining, and some code that prevents them. I am going to submit them on github.

Regards","JDK7 / Windows7
OpenJDK /Ubuntu Precise",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-15 06:01:35.544,,,no_permission,,Unknown,,,,,,,,,,,,412205,,,Tue Aug 19 21:07:46 UTC 2014,,,,,,,0|i1ywv3:,412194,,,,,,,,,"15/Aug/14 06:01;njiang;I just merged the pull request with thanks to Benjamin and revert the change of ""Content-Type"" as the header could be used by the other user.","15/Aug/14 20:53;githubbot;Github user bonnetb closed the pull request at:

    https://github.com/apache/camel/pull/237
","19/Aug/14 21:07;bbonnet;Thank you, Willem.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in Documentation of maxThreads on Reslet Component,CAMEL-7470,12717034,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,tom_guenter,tom_guenter,28/May/14 12:59,01/Jun/14 19:44,14/Mar/19 02:43,29/May/14 01:43,2.13.1,,,,,,,,,,,,2.13.2,,,,camel-restlet,,,,0,,,,,,"On the component documentation page:
[https://camel.apache.org/restlet.html]

In chapter _Configuring max threads on component_ the full qualified class name is missing a bit (restlet):
Current:
{code:xml}
<bean id=""restlet"" class=""org.apache.camel.component.RestletComponent"">
  <property name=""maxThreads"" value=""100""/>
</bean>
{code}

Should be:
{code:xml}
<bean id=""restlet"" class=""org.apache.camel.component.restlet.RestletComponent"">
  <property name=""maxThreads"" value=""100""/>
</bean>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-29 01:43:45.469,,,no_permission,,Unknown,,,,,,,,,,,,395242,,,Sun Jun 01 19:44:30 UTC 2014,,,,,,,0|i1w1tb:,395373,,,,,,,,,29/May/14 01:43;njiang;I just updated the wiki page to fix the error.,01/Jun/14 19:44;tom_guenter;Verified. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken links on download pages for archived releases,CAMEL-7273,12698913,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,sebb@apache.org,sebb@apache.org,05/Mar/14 17:29,10/Mar/14 23:43,14/Mar/19 02:43,10/Mar/14 21:35,,,,,,,,,,,,,,,,,,,,,0,,,,,,"The ASF mirror systems only holds releases that are current; in the case of Camel that is currently 2.11.4 and 2.12.3. All other releases are available on the archive server.

However, all of the superseded release download pages still point to the ASF mirror system. Their links are broken.
For example, in the download page for 2.12.2, instead of 
http://www.apache.org/dyn/closer.cgi/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip
and
http://www.apache.org/dist/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip.asc

the page should point to
http://archive.apache.org/dist/camel/apache-camel/2.11.2/apache-camel-2.11.2.zip
and
http://archive.apache.org/dist/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip.asc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-10 21:35:15.89,,,no_permission,,Unknown,,,,,,,,,,,,377260,,,Mon Mar 10 23:43:20 UTC 2014,,,,,,,0|i1t0b3:,377555,,,,,,,,,10/Mar/14 21:35;muellerc;I have updated the links for all releases. Feel free to check if you want. And thanks for reporting!,"10/Mar/14 23:43;sebb@apache.org;Thanks!

I checked a few random pages and they were OK.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Download page must not link to snapshots / nightly builds,CAMEL-7070,12684869,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sebb@apache.org,sebb@apache.org,16/Dec/13 00:17,14/Jan/14 17:35,14/Mar/19 02:43,16/Dec/13 20:07,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Nightly builds / snapshots which are not formal releases should not be linked from the main download page.

Such builds have not been voted on and should only be used by developers who should be made aware that the code is without any guarantees,

Nightly builds are not formal ASF releases, and must not be promoted to the general public.

See [1] second para. The second sentence states:

""Do not include any links on the project website that might encourage non-developers to download and use nightly builds, snapshots, release candidates, or any other similar package.""

[1] http://www.apache.org/dev/release.html#what
",http://camel.apache.org/download.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-16 02:20:05.208,,,no_permission,,Unknown,,,,,,,,,,,,363941,,,Mon Dec 16 20:07:17 UTC 2013,,,,,,,0|i1qqe7:,364247,,,,,,,,,"16/Dec/13 02:20;njiang;I think we can move the snapshot information to the developer section.
But now I just cannot update the wiki page as I keep hitting Non Clustered Confluence error.",16/Dec/13 02:26;sebb@apache.org;Are you sure the download page is a Confluence page?,16/Dec/13 02:30;njiang;We edit the Confluence page and it will be exported to the svn site.,16/Dec/13 08:21;njiang;I just moved the snapshot information of download page to the developer section.,"16/Dec/13 14:10;sebb@apache.org;When I look at the download page, it still contains references to snapshot builds.","16/Dec/13 14:17;dkulp;
The confluence ""upgrade"" has caused a delay in the publish stuff.   I'm not sure when confluence will get back to a fully usable state.  :-(   Right now, we're getting all kinds of timeouts, etc... while trying to do anything with it.   Not sure if the indexes or something is still being rebuilt or what's completely going on with it.","16/Dec/13 14:29;sebb@apache.org;I see.

Please leave the issue open until this is resolved.

Thanks.","16/Dec/13 20:07;dkulp;
Confluence is starting to be usable so was able to get an export out of it.",,,,,,,,,,,,,,,,,,,,,,
StaxConverter throws NPE,CAMEL-7025,12681868,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sbo13,sbo13,29/Nov/13 11:16,09/Dec/13 13:35,14/Mar/19 02:43,02/Dec/13 08:09,2.12.2,,,,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,1,,,,,,"This issue only happens when running in weblogic:

After updating to Camel 2.12.2 the method createXMLStreamReader(InputStream in, Exchange exchange) in staxConverter throws an NPE because of the missing charsetName.
Comparing the class with the previous version I saw camel no longer falls back to the default charset.

As a workaround I set the property Exchange.CHARSET_NAME on  explicitly -> still the same error.

Debugging the code I noticed that in org.apache.camel.impl.converter.BaseTypeConverterRegistry#convertTo line 98 the exchange is not passed to the converter so I  can neither use an explicit nor an implicit charset.

Any workaround/fix would be greatly appreciated!

StackTrace:
java.lang.NullPointerException: charsetName
        at java.io.InputStreamReader.<init>(InputStreamReader.java:82)
        at weblogic.xml.stax.XMLStreamInputFactory.createXMLStreamReader(XMLStreamInputFactory.java:66)
        at org.apache.camel.converter.jaxp.StaxConverter.createXMLStreamReader(StaxConverter.java:170)
        at sun.reflect.GeneratedMethodAccessor85614.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:990)
        at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:78)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:275)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:113)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)
        at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:173)
",Weblogic 10,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-02 08:09:11.083,,,no_permission,,Unknown,,,,,,,,,,,,361132,,,Mon Dec 02 08:09:11 UTC 2013,,,,,,,0|i1q93r:,361431,,,,,,,,,"02/Dec/13 08:09;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty - unable to consume on UDP multicast addresses,CAMEL-6563,12658582,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,samel,samel,18/Jul/13 18:29,28/May/14 20:17,14/Mar/19 02:43,22/Jul/13 09:13,2.11.0,,,,,,,,,,,,2.12.0,,,,camel-netty,,,,0,,,,,,"When using a route to listen to UDP multicast address , no messages seem to get consumed. No exceptions are observed. 

Multicast address is defined as addresses in the range of 224.0.0.0 through 239.255.255.255 (http://en.wikipedia.org/wiki/Multicast_address)

Input was simple string (e.g. ""Test String"")

Example Route:

<route>
     <from uri=""netty:udp://225.1.1.1:8001?allowDefaultCodec=false&sync=false&broadcast=true""/>
</route>

Found an old topic in the user discussion forum that seems related.  Did not find any unit tests in the Camel source code exercising this behavior.  (http://camel.465427.n5.nabble.com/camel-netty-and-multicast-tt4638622.html)","Karaf 2.3.1
Java 7 
Ubuntu 12.04 (64 bit)",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-22 09:13:39.537,,,no_permission,,Unknown,,,,,,,,,,,,338776,,,Thu Feb 27 16:29:55 UTC 2014,,,,,,,0|i1mfkf:,339096,,,,,,,,,"18/Jul/13 20:27;samel;To listen for UDP multicast addresses, I think the code may have to do some different logic when binding to the IP address.  I found this link on the web which may have code that is relevant (http://web.archiveorange.com/archive/v/z6Mf9AWgO1zZ4z3SHvGs)

The camel-netty code currently does this for UDP non-mulicast address (e.g. localhost).  This is in the SingleUDPNettyServerBootstrapFactory.java source file.

Channel channel = connectionlessBootstrap.bind(hostAddress);

I think for UDP multicast address (e.g. 225.1.1.1), it needs to join a group on a particular network interface.  It might looks something like this:

DatagramChannel channel = (DatagramChannel)connectionlessBootstrap.bind(hostAddress);
String networkInterface = configuration.getNetworkInterface() == null ? LOOPBACK_INTERFACE : configuration.getNetworkInterface();
NetworkInterface multicastNetworkInterface = NetworkInterface.getByName(networkInterface);
channel.joinGroup(hostAddress, multicastNetworkInterface);

I think the implication here is that the user might have to specify an interface name as an option of the camel-netty component when using a UDP multicast address.
","19/Jul/13 14:19;samel;Pull request:
https://github.com/apache/camel/pull/31

Pull request developer discussion topic:
http://camel.465427.n5.nabble.com/camel-pull-request-CAMEL-6563-Added-networkInterface-option-and-added-logi-td5735874.html",22/Jul/13 09:13;davsclaus;Thanks for the patch.,"27/Feb/14 16:29;githubbot;Github user patels3 closed the pull request at:

    https://github.com/apache/camel/pull/31
",,,,,,,,,,,,,,,,,,,,,,,,,,
Complete Aggregation on route stop broken,CAMEL-6503,12655647,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,kkartaltepe,kkartaltepe,01/Jul/13 20:16,02/Jul/13 21:32,14/Mar/19 02:43,02/Jul/13 21:32,2.10.4,2.11.0,,,,,,,,,,,2.9.2,,,,camel-core,,,,5,aggregator,forceCompletionOnStop,gracefulshutdown,RejectedExecutionException,stopRoute,"When attempting to stop a route that has exchanges in flight they should be processed and aggregated before shutdown but instead they all throw RejectedExecutionException and are not processed.
In camel 2.9.2 they are processed and aggregated as expected before the route is shutdown. But the same code does not work in any further versions of camel.
Attached is a sample test that displays the above error. Simply changing the version of camel will cause the test to pass.",,,,,,,,,,,,,,,,,,01/Jul/13 20:17;kkartaltepe;CamelBugDemo.tar.gz;https://issues.apache.org/jira/secure/attachment/12590295/CamelBugDemo.tar.gz,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,335922,,,Tue Jul 02 21:32:27 UTC 2013,,,,,,,0|i1lxzz:,336246,Regression,,,,,,,,01/Jul/13 20:17;kkartaltepe;Sample test project showcasing error.,02/Jul/13 21:32;kkartaltepe;Dependency issue between ActiveMQ 5.6 depending on camel-jms 2.9.2 which conflicted with other version of camel.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Installation of camel-leveldb feature fails,CAMEL-6491,12654808,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,25/Jun/13 20:46,25/Jun/13 21:08,14/Mar/19 02:43,25/Jun/13 21:08,2.10.5,,,,,,,,,,,,2.10.6,,,,karaf,,,,0,,,,,,"{noformat}
karaf@root> features:chooseurl camel 2.10.5
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.10.5/xml/features
karaf@root> feature:install camel-leveldb
Error executing command: Could not start bundle mvn:org.apache.camel/camel-leveldb/2.10.5 in feature(s) camel-leveldb-2.10.5: Unresolved constraint in bundle org.apache.camel.camel-leveldb [68]: Unable to resolve 68.0: missing requirement [68.0] package; (&(package=org.fusesource.leveldbjni)(version>=1.3.0)(!(version>=2.0.0)))
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,335085,,,2013-06-25 20:46:01.0,,,,,,,0|i1lsuf:,335409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix the frame injection vulnerability in published Javadoc,CAMEL-6470,12653891,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,muellerc,muellerc,muellerc,20/Jun/13 09:09,20/Jun/13 21:43,14/Mar/19 02:43,20/Jun/13 21:43,,,,,,,,,,,,,,,,,website,,,,0,,,,,,"Oracle has announced [1], [2] a frame injection vulnerability in Javadoc
generated by Java 5, Java 6 and Java 7 before update 22.

The infrastructure team has completed a scan of our current project
websites and identified over 6000 instances of vulnerable Javadoc
distributed across most TLPs. The chances are the project(s) you
contribute to is(are) affected. A list of projects and the number of
affected Javadoc instances per project is provided at the end of this
e-mail.

Please take the necessary steps to fix any currently published Javadoc
and to ensure that any future Javadoc published by your project does not
contain the vulnerability. The announcement by Oracle includes a link to
a tool that can be used to fix Javadoc without regeneration.

The infrastructure team is investigating options for preventing the
publication of vulnerable Javadoc.

[1]
http://www.oracle.com/technetwork/topics/security/javacpujun2013-1899847.html
[2] http://www.kb.cert.org/vuls/id/225657

camel.apache.org        786 vulnerabilities",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,334168,,,2013-06-20 09:09:29.0,,,,,,,0|i1ln8f:,334494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
connectionTimeout property is ignored by JavaMail,CAMEL-6464,12653181,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,marcozapletal,marcozapletal,17/Jun/13 12:21,21/Jun/13 15:32,14/Mar/19 02:43,20/Jun/13 20:22,2.10.2,,,,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-mail,,,,0,,,,,,"JavaMail ignores the timeout values set via the connectionTimeout property.

- Within MailConfiguration::createJavaMailProperties the mail.<protocol>.timeout and mail.<protocol>.connectionTimeout parameters are set as long values
- In com.sun.mail.util.PropUtil::getInt (line 141) the property is ignored since it is a long value

Changing the type of connectionTimeout from long to int would be the cleanest solution - another suggestion would be to downcast the connectionTimeout in MailConfiguration::createJavaMailProperties",mail-1.4.5.jar,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-19 21:43:49.092,,,no_permission,,Unknown,,,,,,,,,,,,333504,,,Fri Jun 21 15:32:21 UTC 2013,,,,,,,0|i1lj5b:,333832,,,,,,,,,"19/Jun/13 21:43;muellerc;Marco, do you consider to provide a patch and an unit test which shows this issue?","20/Jun/13 15:49;marcozapletal;The problem of this issue is that setting a long property on com.sun.mail.util.SocketFetcher::getSocket has no effect. However, providing a good test for it is difficult, since the properties are set on the socket on creation and I get no handle of the socket (through the Camel mail component) after creation. 

I am happy to provide a patch, which I would ""test"" by debugging it before attaching it here. Actually, there are two ways to patch it and both are quite simple: (a) changing the type of connectionTimeout from long to int or (b) downcast the long to an int before setting the mail.<protocol>.timeout value. I would opt for (a) but this may break the API - so I would appreciate your opinion on this before providing the patch.","20/Jun/13 19:24;muellerc;Thanks Marco for reporting this issue. I understood it's hard/impossible to unit test.

I'm also +1 to change the connectionTimeout type from long to int. It's theoretically not backwards compatible, but only if somebody did something like this:
{code}
mailConfiguration.setConnectionTimeout(30000L);
{code}

I think most of the user configure it with the uri or by using
{code}
mailConfiguration.setConnectionTimeout(30000);
{code}
which is backwards compatible.

I will go ahead and and do the proposed fixed in a few minutes. It would be great if you could verify it with the latest SNAPSHOT versions (2.10.x, 2.11.x, 2.12.x). It should be available tomorrow.",21/Jun/13 15:32;marcozapletal;I can verify that 2.11.1-SNAPSHOT fixes this issue. Thank you Christian for the quick fix.,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect documentation for XML redeliveryPolicyRef in OnException clause,CAMEL-6448,12652208,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,muellerc,bkiefer,bkiefer,11/Jun/13 14:08,11/Jun/13 19:52,14/Mar/19 02:43,11/Jun/13 19:52,,,,,,,,,,,,,,,,,website,,,,0,documentation,onException,redelivery,,,"The example in the documentation on the onException page (http://camel.apache.org/exception-clause.html) shows incorrect configuration of an external redelivery policy.

It currently shows:

 <bean id=""myRedeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""${myprop.max}""/>
    </bean>

     <onException>
         <!-- you can define multiple exceptions just adding more exception elements as show below -->
         <exception>com.mycompany.MyFirstException</exception>
         <exception>com.mycompany.MySecondException</exception>

         <!-- here we reference our redelivery policy defined above -->
         <redeliveryPolicy ref=""myRedeliveryPolicy""/>
     </onException>

But it should be:

 <bean id=""myRedeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""${myprop.max}""/>
    </bean>

     <onException redeliveryPolicyRef=""myRedeliveryPolicy"">
         <exception>com.mycompany.MyFirstException</exception>
         <exception>com.mycompany.MySecondException</exception>
         <!-- more config here -->
     </onException>

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-11 19:52:34.174,,,no_permission,,Novice,,,,,,,,,,,,332532,,,Tue Jun 11 19:52:34 UTC 2013,,,,,,,0|i1ld5j:,332861,,,,,,,,,11/Jun/13 19:52;muellerc;Thanks for reporting Ben. I updated the web site. It should be online in a few minutes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML DSL - removeHeaders does not work as expected if more then one excludePatter is speficied,CAMEL-6445,12652055,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,ralfsteppacher,ralfsteppacher,10/Jun/13 16:17,14/Jun/13 01:22,14/Mar/19 02:43,14/Jun/13 01:22,,,,,,,,,,,,,,,,,website,,,,0,,,,,,"To reproduce put the following in a route:

<camel:setHeader headerName=""header1"">
<camel:constant>1</camel:constant>
</camel:setHeader>

<camel:setHeader headerName=""header2"">
<camel:constant>2</camel:constant>
</camel:setHeader>

<camel:setHeader headerName=""header3"">
<camel:constant>3</camel:constant>
</camel:setHeader>

<camel:removeHeaders pattern=""*"" excludePattern=""header1,header2"" />

Expected behavior: ""header3"" should be gone.
Actual behavior: All headers are gone.


Specifying only one exclude pattern works. I.e. 

<camel:removeHeaders pattern=""*"" excludePattern=""header1"" />

removes headers ""header2"" and ""header3"" but leaves ""header1"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-11 15:14:39.93,,,no_permission,,Unknown,,,,,,,,,,,,332379,,,Fri Jun 14 01:22:46 UTC 2013,,,,,,,0|i1lc7z:,332708,,,,,,,,,"11/Jun/13 15:14;muellerc;The documentation was misleading about this. I update it and will think about a fix.
At present, you should use a regular expression like this:
{code}
<removeHeaders pattern=""*"" excludePattern=""header1|header2""/>
{code}","13/Jun/13 19:35;davsclaus;They are all patterns and use reg exp for that. So it works as designed. And the example Christian posted is correct, eg use | for OR in reg exp.","13/Jun/13 21:21;ralfsteppacher;Well, if it is just a documentation bug, even better. Thanks for the clarification.",14/Jun/13 01:22;muellerc;I also think we should not make the Camel DSL more complicated if there is already a solution for a given problem.,,,,,,,,,,,,,,,,,,,,,,,,,,
FixedLength Bindy DataFormat does not work with @Link,CAMEL-6323,12645185,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,29/Apr/13 06:18,30/Apr/13 08:43,14/Mar/19 02:43,30/Apr/13 08:43,2.10.4,2.11.0,,,,,,,,,,,,,,,camel-bindy,,,,0,,,,,,FixedLength Bindy DataFormat does not work with @Link,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,325547,,,Tue Apr 30 08:37:35 UTC 2013,,,,,,,0|i1k5xj:,325892,,,,,,,,,"30/Apr/13 08:37;cmoulliard;The issue is related to the fact that positions of fields is not guarantee anymore when camel bindy reads several classes and linked them. By example if we have an Order class with 2 fields in poistion 1 and 7 and a link to a class SubRec containing the position 4, then the DataField, AnnotatedField Map will contain 3 entries with position 1, 7 & 4
But when the record AAABBBCCC will be parsed (1, 4, 7) it will be mapped to positions 1, 7 and 4 (fieldA, fieldC and fieldB) which is not correct

So I propose to do the following modification LinkedHashMap --> TreeMap

{code}
public class BindyFixedLengthFactory extends BindyAbstractFactory implements BindyFactory {

    private Map<Integer, DataField> dataFields = new LinkedHashMap<Integer, DataField>();
    private Map<Integer, Field> annotatedFields = new LinkedHashMap<Integer, Field>();
{code}

{code}
public class BindyFixedLengthFactory extends BindyAbstractFactory implements BindyFactory {

    private Map<Integer, DataField> dataFields = new TreeMap<Integer, DataField>();
    private Map<Integer, Field> annotatedFields = new TreeMap<Integer, Field>();
{code}

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-validator not able to resolve schema when using useSharedSchema=false,CAMEL-6317,12644563,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,davidkarlsen@gmail.com,davidkarlsen@gmail.com,25/Apr/13 09:21,21/Jun/13 16:23,14/Mar/19 02:43,21/Jun/13 16:23,2.11.0,,,,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-validator,,,,0,,,,,,"This one works:
{noformat}
 <to uri=""validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd"" />
{noformat}

This one doesn't:
{noformat}
 <to uri=""validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd?useSharedSchema=false"" />
{noformat}

it fails with:
{noformat}
org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'null', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
{noformat}

The streamsource object in the validator is populated, but the buffered inputstream object has no content","et2448@ubuntu:~/projects/payment/cashpool/server$ /opt/ibm/ibm-java-i386-60/bin/java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxi3260sr13fp1-20130325_01(SR13 FP1))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr13-20130114_134867 (JIT enabled, AOT enabled)
J9VM - 20130114_134867
JIT  - r9_20130108_31100
GC   - 20121212_AA)
JCL  - 20130315_01


",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-25 14:15:22.567,,,no_permission,,Unknown,,,,,,,,,,,,324928,,,Fri Jun 21 07:36:48 UTC 2013,,,,,,,0|i1k247:,325273,,,,,,,,,25/Apr/13 14:15;davsclaus;What error do you see? And how do you run the Camel application? eg in some sort of container etc.,"26/Apr/13 09:39;davidkarlsen@gmail.com;Doh - forgot to add the exception - edited in now.
This test is a unit-test running in eclipse. I usually run the app in spring/jetty.","27/Apr/13 07:27;davsclaus;This is likely IBM JDK/JVM issue as the option in Camel doesn't do something different really.
IBM JDK may not use same XML libraries as Oracle/SUN JDKs embed.",27/Apr/13 07:28;davsclaus;Sorry but we dont believe this is a bug in Camel. But due to a bug in the JDK/JVM as state as well on its documentation page.,"30/Apr/13 12:29;davidkarlsen@gmail.com;I have a reproducable case in: git@github.com:davidkarlsen/camel6317.git, which fails consistently on the following 4 different JDKs (all latest version) - and the case failing is actually the one to avoid the JDK bug:

et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/jdk1.7/bin/java -version
java version ""1.7.0_21""
Java(TM) SE Runtime Environment (build 1.7.0_21-b11)
Java HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)

et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/jdk1.6/bin/java -version
java version ""1.6.0_45""
Java(TM) SE Runtime Environment (build 1.6.0_45-b06)
Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)



et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/ibm/ibm-java-i386-60/bin/java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxi3260sr13fp1-20130325_01(SR13 FP1))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr13-20130114_134867 (JIT enabled, AOT enabled)
J9VM - 20130114_134867
JIT  - r9_20130108_31100
GC   - 20121212_AA)
JCL  - 20130315_01


et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/ibm/ibm-java-i386-70/bin/java -version
java version ""1.7.0""
Java(TM) SE Runtime Environment (build pxi3270sr4fp1-20130325_01(SR4 FP1))
IBM J9 VM (build 2.6, JRE 1.7.0 Linux x86-32 20130306_140761 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR4_FP1_20130306_1011_B140761
JIT  - r11.b03_20130131_32403ifx1
GC   - R26_Java726_SR4_FP1_20130306_1011_B140761
J9CL - 20130306_140761)
JCL - 20130315_01 based on Oracle 7u13-b08


",07/Jun/13 15:13;davidkarlsen@gmail.com;Ping? The testcase I refer in my git repo could be incorporated into camel?,"20/Jun/13 20:05;muellerc;I can reproduce this issue with 2.12.x on
Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 14:51:28+0100)
Java version: 1.6.0_43, vendor: Apple Inc.
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"", version: ""10.8.4"", arch: ""x86_64"", family: ""mac""",21/Jun/13 07:36;davidkarlsen@gmail.com;I see it went on several branches - maybe update the fix-versions?,,,,,,,,,,,,,,,,,,,,,,
Restarting routes using sql aggregation repository may lead to Class loading issues,CAMEL-6283,12642529,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Apr/13 12:49,17/Apr/13 19:38,14/Mar/19 02:43,17/Apr/13 19:38,2.10.4,2.11.0,2.9.0,,,,,,,,,,2.10.5,2.11.0,2.9.7,,camel-sql,,,,0,,,,,,Its the code in ClassLoadingAwareObjectInputStream in camel-sql that has the bug.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,322943,,,2013-04-15 12:49:30.0,,,,,,,0|i1jpvj:,323288,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-cxf-tomcat failed,CAMEL-6281,12642463,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 18:03,17/Apr/13 19:33,14/Mar/19 02:43,17/Apr/13 19:33,2.11.0,,,,,,,,,,,,2.11.0,,,,examples,,,,0,,,,,,"By accessing ""http://localhost:8080/camel-example-cxf-tomcat/webservices/incident?wsdl"" I get the following exception:
{noformat}
Apr 14, 2013 7:56:37 PM org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Allocate exception for servlet CXFServlet
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'cxf' is defined
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:549)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1095)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:277)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109)
        at org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:77)
        at org.apache.cxf.transport.servlet.CXFNonSpringServlet.init(CXFNonSpringServlet.java:71)
        at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1280)
        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1193)
        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:865)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:936)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
        at java.lang.Thread.run(Thread.java:680)
{noformat}","Java 1.6.0_43
Tomcat 7.0.37
Camel 2.11.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-15 05:14:46.59,,,no_permission,,Unknown,,,,,,,,,,,,322877,,,Mon Apr 15 21:24:16 UTC 2013,,,,,,,0|i1jpgv:,323222,,,,,,,,,"15/Apr/13 05:14;njiang;It is caused by remove the below line in the camel-config.xml
{code}
<import resource=""classpath:META-INF/cxf/cxf.xml""/>
{code}

I will dig the CxfServlet code to find out the root cause of it, in the meanwhile I had to add this line back to the camel-config.xml.",15/Apr/13 05:19;njiang;Fixed on trunk with r1467851. Need to merge into camel-2.11.x branch,15/Apr/13 21:24;muellerc;It works for me too on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-osgi failed,CAMEL-6280,12642447,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 15:05,17/Apr/13 19:34,14/Mar/19 02:43,17/Apr/13 19:34,2.11.0,,,,,,,,,,,,2.11.0,,,,examples,,,,0,,,,,,"I get the following exception by deploying this example into Karaf 2.3.1:
{noformat}
karaf@root> install -s mvn:org.apache.camel/camel-example-osgi/2.11.0
Bundle ID: 54
Error executing command: Error installing bundles:
	Unable to start bundle mvn:org.apache.camel/camel-example-osgi/2.11.0: Unresolved constraint in bundle org.apache.camel.camel-example-osgi [54]: Unable to resolve 54.0: missing requirement [54.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.builder)(version>=2.11.0)(!(version>=2.12.0)))
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-15 06:29:32.398,,,no_permission,,Unknown,,,,,,,,,,,,322861,,,Mon Apr 15 21:19:16 UTC 2013,,,,,,,0|i1jpdb:,323206,,,,,,,,,15/Apr/13 06:29;njiang;It is caused by the camel-spring feature is not install. I will update the README.txt for it.,15/Apr/13 06:33;njiang;Fixed on trunk with r1467862. Need to merge into camel-2.11.x branch,15/Apr/13 21:19;muellerc;It works for me too on the trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident-wssecurity failed,CAMEL-6278,12642444,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 14:16,17/Apr/13 19:30,14/Mar/19 02:43,17/Apr/13 19:30,2.11.0,,,,,,,,,,,,2.11.0,,,,examples,,,,0,,,,,,"If I deploy this example into Karaf 2.3.1 as described, I get the following exception and the service is not available:
{noformat}
karaf@root> osgi:install -s mvn:org.apache.camel/camel-example-reportincident-wssecurity/2.11.0
Bundle ID: 173
karaf@root> Exception in thread ""SpringOsgiExtenderThread-2"" org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: target/custom.properties (No such file or directory)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.component.cxf.CxfEndpoint.resolvePropertyPlaceholders(CxfEndpoint.java:609)
	at org.apache.camel.component.cxf.CxfEndpoint.getAddress(CxfEndpoint.java:871)
	at org.apache.camel.component.cxf.CxfEndpoint.setupServerFactoryBean(CxfEndpoint.java:219)
	at org.apache.camel.component.cxf.CxfSpringEndpoint.createServerFactoryBean(CxfSpringEndpoint.java:186)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:63)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:206)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:133)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2023)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1953)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1741)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1616)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.io.FileNotFoundException: target/custom.properties (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:120)
	at java.io.FileInputStream.<init>(FileInputStream.java:79)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:73)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:50)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:134)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:120)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1068)
	at org.apache.camel.component.cxf.CxfEndpoint.resolvePropertyPlaceholders(CxfEndpoint.java:604)
	... 28 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,322858,,,Tue Apr 16 19:58:35 UTC 2013,,,,,,,0|i1jpcn:,323203,,,,,,,,,16/Apr/13 19:58;muellerc;Works for me too on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-security failed,CAMEL-6277,12642442,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 13:55,17/Apr/13 19:34,14/Mar/19 02:43,17/Apr/13 19:34,2.11.0,,,,,,,,,,,,2.11.0,,,,examples,,,,0,,,,,,"{noformat}
cmueller$ mvn jetty:run
..
2013-04-14 15:53:38,288 [main           ] ERROR ContextLoader                  - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myCamelContext:beanPostProcessor': Initialization of bean failed; nested exception is java.lang.NoSuchFieldError: NULL
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: java.lang.NoSuchFieldError: NULL
	at org.springframework.expression.TypedValue.<clinit>(TypedValue.java:32)
	at org.springframework.expression.spel.support.StandardEvaluationContext.setRootObject(StandardEvaluationContext.java:88)
	at org.springframework.expression.spel.support.StandardEvaluationContext.<init>(StandardEvaluationContext.java:74)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:124)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:225)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:201)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	... 50 more
2013-04-14 15:53:38.291:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/,file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-spring-security/src/main/webapp/},file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-spring-security/src/main/webapp/
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myCamelContext:beanPostProcessor': Initialization of bean failed; nested exception is java.lang.NoSuchFieldError: NULL
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
java.lang.NoSuchFieldError: NULL
	at org.springframework.expression.TypedValue.<clinit>(TypedValue.java:32)
	at org.springframework.expression.spel.support.StandardEvaluationContext.setRootObject(StandardEvaluationContext.java:88)
	at org.springframework.expression.spel.support.StandardEvaluationContext.<init>(StandardEvaluationContext.java:74)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:124)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:225)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:201)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2013-04-14 15:53:38.314:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-15 04:12:30.811,,,no_permission,,Unknown,,,,,,,,,,,,322856,,,Mon Apr 15 20:25:08 UTC 2013,,,,,,,0|i1jpcf:,323201,,,,,,,,,"15/Apr/13 04:12;njiang;It was caused by we upgrade the default version of spring. 
I just committed a quick fix into trunk.",15/Apr/13 04:16;njiang;fixed on trunk with r1467847. Need to merge into camel-2.11.x branch,15/Apr/13 20:25;muellerc;Works for me too from trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-jms failed,CAMEL-6276,12642440,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,muellerc,muellerc,14/Apr/13 11:02,17/Apr/13 19:35,14/Mar/19 02:43,17/Apr/13 19:35,,,,,,,,,,,,,2.10.5,2.11.0,,,,,,,0,,,,,,"Client and Server using different port numbers:

Server:
{noformat}
2013-04-14 12:54:55,416 [ing.Main.main()] INFO  BrokerService                  - Using Persistence Adapter: MemoryPersistenceAdapter
2013-04-14 12:54:55,431 [JMX connector  ] INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
2013-04-14 12:54:55,560 [ing.Main.main()] INFO  BrokerService                  - Apache ActiveMQ 5.8.0 (myBroker, ID:christians-macbook-pro.fritz.box-56795-1365936895431-0:1) is starting
2013-04-14 12:54:55,567 [ing.Main.main()] INFO  TransportConnector             - Connector vm Started
2013-04-14 12:54:55,575 [ing.Main.main()] INFO  TransportServerThreadSupport   - Listening for connections at: tcp://localhost:1101
2013-04-14 12:54:55,575 [ing.Main.main()] INFO  TransportConnector             - Connector tcp Started
{noformat}

Client
{noformat}
cmueller$ mvn exec:java -PCamelClient
...
[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.1.1:java (default-cli) on project camel-example-spring-jms: An exception occured while executing the Java class. null: InvocationTargetException: Exception occurred during execution on the exchange: Exchange[Message: 22]: Uncategorized exception occured during JMS processing; nested exception is javax.jms.JMSException: Error while attempting to add new Connection to the pool; nested exception is javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61610. Reason: java.net.ConnectException: Connection refused -> [Help 1]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-14 20:55:53.014,,,no_permission,,Unknown,,,,,,,,,,,,322854,,,Mon Apr 15 20:12:28 UTC 2013,,,,,,,0|i1jpbz:,323199,,,,,,,,,"14/Apr/13 20:55;bvahdat;The example breaks if in contrast to what {{README.TXT}} says:

{code}
mvn compile
{code}

One does

{code}
mvn install
{code}

then the generated {{target/custom.properties}} comes into the play for the {{tcp.port}} variable as well however currently this is *only* taken into the account by the server and *not* the 3 clients. So that the clients believe they should connect to the server using the port {{61610}} which is wrong!
",14/Apr/13 21:13;bvahdat;Fixed the example on trunk as well as the 2.10.x branch. Need to backport to the 2.11.x branch when it's ready.,15/Apr/13 20:12;muellerc;It works for me too on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-route-throttling failed,CAMEL-6275,12642439,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,14/Apr/13 10:48,17/Apr/13 19:42,14/Mar/19 02:43,17/Apr/13 19:42,2.11.0,,,,,,,,,,,,2.11.0,,,,examples,,,,0,,,,,,"I think the dependency to the ActiveMQ Kahadb store is missing for ActiveMQ 5.8.0.

{noformat}
cmueller$ mvn exec:java -PCamelServer
...
2013-04-14 12:45:10,160 [ing.Main.main()] ERROR BrokerService                  - Cannot create SystemUsage
java.io.IOException: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:39)
	at org.apache.activemq.broker.BrokerService.createPersistenceAdapter(BrokerService.java:2215)
	at org.apache.activemq.broker.BrokerService.getPersistenceAdapter(BrokerService.java:1111)
	at org.apache.activemq.broker.BrokerService.getSystemUsage(BrokerService.java:1023)
	at org.apache.activemq.xbean.XBeanBrokerService.ensureSystemUsageHasStore(XBeanBrokerService.java:70)
	at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1522)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:186)
	at org.apache.camel.spring.Main.doStart(Main.java:140)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:343)
	at org.apache.camel.spring.Main.main(Main.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.ClassNotFoundException: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.apache.activemq.broker.BrokerService.createPersistenceAdapter(BrokerService.java:2210)
	... 34 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,322853,,,Sun Apr 14 21:05:01 UTC 2013,,,,,,,0|i1jpbr:,323198,,,,,,,,,14/Apr/13 21:05;muellerc;fixed on trunk with r1467828. Need to merge into camel-2.11.x branch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident failed,CAMEL-6274,12642438,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 10:43,17/Apr/13 19:36,14/Mar/19 02:43,17/Apr/13 19:36,2.11.0,,,,,,,,,,,,2.11.0,,,,examples,,,,0,,,,,,"{noformat}
2013-04-14 12:40:23,207 [main           ] ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	... 48 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	... 57 more
Caused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258)
	at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487)
	... 65 more
2013-04-14 12:40:23.217:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/,file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/},file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258)
	at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2013-04-14 12:40:23.241:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:9080
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-15 05:29:51.657,,,no_permission,,Unknown,,,,,,,,,,,,322852,,,Mon Apr 15 20:08:21 UTC 2013,,,,,,,0|i1jpbj:,323197,,,,,,,,,"15/Apr/13 05:29;njiang;This issue has the same reason with CAMEL-6281.
Fixed on trunk with r1467852. Need to merge into camel-2.11.x branch",15/Apr/13 20:08;muellerc;Works for me too on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringQuoteHelper - Should ignore whitespace between quoted parameters,CAMEL-6271,12642432,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Apr/13 08:43,17/Apr/13 19:45,14/Mar/19 02:43,17/Apr/13 19:45,2.11.0,,,,,,,,,,,,2.11.0,,,,camel-core,,,,0,,,,,,Need to merge to 2.11 branch when created.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,322846,,,2013-04-14 08:43:25.0,,,,,,,0|i1jpa7:,323191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jclouds cannot install in Apache Karaf,CAMEL-6270,12642375,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/13 10:02,17/Apr/13 19:55,14/Mar/19 02:43,17/Apr/13 19:55,2.11.0,,,,,,,,,,,,2.11.0,,,,osgi,,,,0,,,,,,The problem is that jclouds requires guava 13.0.x only and we had imports of 14.0.x in camel-jclouds which causes problems for OSGi.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-17 19:55:34.341,,,no_permission,,Unknown,,,,,,,,,,,,322789,,,Wed Apr 17 19:55:34 UTC 2013,,,,,,,0|i1joxj:,323134,,,,,,,,,"17/Apr/13 19:55;muellerc;Fixed with
Author: davsclaus
Date: Sat Apr 13 10:03:23 2013
New Revision: 1467582

URL: http://svn.apache.org/r1467582
Log:
CAMEL-6261: Fixed install camel-jclouds in Karaf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxfrs blueprint configure could not be installed if there are some subelement settings,CAMEL-6267,12642259,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Apr/13 15:44,17/Nov/14 01:58,14/Mar/19 02:43,17/Apr/13 20:00,2.10.4,2.11.0,2.9.6,,,,,,,,,,2.11.0,2.9.7,,,,,,,0,,,,,,"Got the OOM Exception when blueprint want to parser the setting like this.
{code}
<camelcxf:rsClient id=""rsClient"" address=""http://localhost:9002/rest""
    serviceClass=""org.apache.camel.itest.osgi.cxf.jaxrs.testbean.CustomerService"">
    <camelcxf:features>
         <bean class=""org.apache.cxf.feature.LoggingFeature""/>
     </camelcxf:features> 
  </camelcxf:rsClient>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-17 01:58:39.601,,,no_permission,,Unknown,,,,,,,,,,,,322673,,,Mon Nov 17 01:58:39 UTC 2014,,,,,,,0|i1jo7r:,323018,,,,,,,,,"17/Nov/14 01:58;xiaohui.wu;The exception like below:
{code}
java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2219)[:1.7.0_45]
	at java.util.ArrayList.grow(ArrayList.java:242)[:1.7.0_45]
	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:216)[:1.7.0_45]
	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:208)[:1.7.0_45]
	at java.util.ArrayList.add(ArrayList.java:440)[:1.7.0_45]
	at org.apache.aries.blueprint.reflect.BeanMetadataImpl.addProperty(BeanMetadataImpl.java:154)
	at org.apache.aries.blueprint.reflect.BeanMetadataImpl.addProperty(BeanMetadataImpl.java:159)
	at org.apache.camel.component.cxf.blueprint.RsServerDefinitionParser.parse(RsServerDefinitionParser.java:72)
	at org.apache.camel.component.cxf.blueprint.CxfNamespaceHandler.parse(CxfNamespaceHandler.java:62)
	at org.apache.aries.blueprint.parser.Parser.parseCustomElement(Parser.java:1279)
	at org.apache.aries.blueprint.parser.Parser.loadComponents(Parser.java:337)
	at org.apache.aries.blueprint.parser.Parser.populate(Parser.java:277)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:309)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:255)
	at org.apache.aries.blueprint.container.BlueprintExtender.checkBundle(BlueprintExtender.java:325)
	at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:243)
	at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:471)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:198)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:128)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:468)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:161)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:117)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4479)
	at org.apache.felix.framework.Felix$4.run(Felix.java:2019)
	at org.apache.felix.framework.Felix$5.run(Felix.java:2061)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_45]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_45]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.support.ServiceSupport: InputStream not being explicitly closed,CAMEL-6262,12642063,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,mdo,mdo,11/Apr/13 16:21,17/Apr/13 19:40,14/Mar/19 02:43,17/Apr/13 19:40,2.11.0,,,,,,,,,,,,2.10.5,2.11.0,2.9.7,,camel-core,,,,0,,,,,,"In method getVersion() of ServiceSupport there is an InputStream opened around line 284:

InputStream is = getClass().getResourceAsStream(""/META-INF/maven/org.apache.camel/camel-core/pom.properties"");

This stream is not closed explicitly.

If you undeploy an application from a container like GlassFish you get a warning like this:

[#|2013-04-11T18:02:00.783+0200|WARNING|glassfish3.1.2|javax.enterprise.system.core.classloading.com.sun.enterprise.loader|_ThreadID=137;_ThreadName=Thread-2;|Input stream has been finalized or forced closed w
ithout being explicitly closed; stream instantiation reported in following stack trace
java.lang.Throwable
        at com.sun.enterprise.loader.ASURLClassLoader$SentinelInputStream.<init>(ASURLClassLoader.java:1230)
        at com.sun.enterprise.loader.ASURLClassLoader$InternalJarURLConnection.getInputStream(ASURLClassLoader.java:1338)
        at java.net.URLClassLoader.getResourceAsStream(URLClassLoader.java:233)
        at com.sun.enterprise.loader.ASURLClassLoader.getResourceAsStream(ASURLClassLoader.java:872)
        at java.lang.Class.getResourceAsStream(Class.java:2049)
        at org.apache.camel.support.ServiceSupport.getVersion(ServiceSupport.java:284)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1439)
        at org.apache.camel.cdi.CdiCamelContext.start(CdiCamelContext.java:61)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[...]


These were similar issues: XBEAN-190, JCR-2962

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-11 17:27:22.397,,,no_permission,,Novice,,,,,,,,,,,,322477,,,Mon Apr 15 07:30:18 UTC 2013,,,,,,,0|i1jn07:,322822,,,,,,,,,"11/Apr/13 17:27;davsclaus;Thanks for reporting.

Are you considering working on a patch?","12/Apr/13 10:08;mdo;Hello Claus, yes I'd do, but I see it was already fixed in trunk by Willem. Thanks!","15/Apr/13 07:24;bvahdat;Willem, not an issue at all, but IMHO instead of:

{code}
IOHelper.close(is, null, null);
{code}

We could probably better do:

{code}
IOHelper.close(is, ""pom.properties"", LOG);
{code}

Or the shortest way of it if you would prefer:

{code}
IOHelper.close(is);
{code}","15/Apr/13 07:30;njiang;Hi, Babak
Yeah, it makes sense. 
I will updated the code for it.
",,,,,,,,,,,,,,,,,,,,,,,,,,
Simple ognl expression - Possible NPE when using String replaceFirst and replacing with an empty string,CAMEL-6261,12641818,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/13 12:04,17/Apr/13 19:56,14/Mar/19 02:43,17/Apr/13 19:56,2.11.0,,,,,,,,,,,,2.11.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/2-11-NPE-with-replaceFirst-tp5730321.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,322233,,,Sat Apr 13 10:03:31 UTC 2013,,,,,,,0|i1jlhz:,322578,,,,,,,,,13/Apr/13 10:03;davsclaus;Need to backport to 2.11 branch when its created.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scheduled thread pools is not removed from JMX when shutting down,CAMEL-6259,12641797,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/13 09:15,10/Apr/13 21:20,14/Mar/19 02:43,10/Apr/13 21:20,2.10.4,,,,,,,,,,,,2.10.5,2.11.0,,,camel-core,jmx,,,0,,,,,,"For example if a route use the aggragate eip with a completion timeout, then the scheduled thread pool is enlisted in JMX. But not removed when the route is removed. Though as fail-safe we always remove the JMX when camel is stopping.

But for people doing dynamic add/remove routes this can become a problem.",,,,,,,,,,,,,,,,,,10/Apr/13 09:18;davsclaus;pools.png;https://issues.apache.org/jira/secure/attachment/12577979/pools.png,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-10 21:20:35.239,,,no_permission,,Unknown,,,,,,,,,,,,322212,,,Wed Apr 10 21:20:35 UTC 2013,,,,,,,0|i1jldb:,322557,,,,,,,,,10/Apr/13 09:19;davsclaus;Screenshot of the mbeans not being removed.,10/Apr/13 10:00;davsclaus;Need to merge to 2.11 branch.,"10/Apr/13 21:20;muellerc;Because we redo the Camel 2.11.0 release, this issue in now included in Camel 2.11.0",,,,,,,,,,,,,,,,,,,,,,,,,,,
NotifyBuilder - whenSentTo - Should be per exchange and not a shared state,CAMEL-6255,12641629,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Apr/13 14:32,10/Apr/13 21:24,14/Mar/19 02:43,10/Apr/13 21:24,2.10.3,2.11.0,,,,,,,,,,,2.10.5,2.11.0,,,camel-core,tests,,,1,,,,,,"See SO
http://stackoverflow.com/questions/15849116/camel-splitter-producing-incorrect-number-of-done-exchanges-seen-by-notifybuilde

There is a little bug in whenSentTo in the notify builder.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-10 21:24:39.969,,,no_permission,,Unknown,,,,,,,,,,,,322045,,,Wed Apr 10 21:24:39 UTC 2013,,,,,,,0|i1jkc7:,322390,,,,,,,,,10/Apr/13 06:18;davsclaus;Need to merge to 2.11 branch when we have this branch setup.,"10/Apr/13 21:24;muellerc;Because we redo the Camel 2.11.0 release, this issue in now included in Camel 2.11.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bindy - Multiple models in the same package lead to unpredictable results,CAMEL-6234,12640367,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,02/Apr/13 20:07,11/May/13 15:50,14/Mar/19 02:43,11/May/13 15:50,2.10.4,2.9.6,,,,,,,,,,,2.11.0,,,,camel-bindy,,,,0,,,,,,"BindyCsvDataFormat only holds one model. When multiple models are defined in the same package or field positions overlap, only one @DataField is kept (the last one) overwriting the previous mapping. This leads to unpredictable behavior, from the wrong field value being populated, to format mismatch exceptions for fields of different types.

This behavior is by design, as camel supports deep models, spread over multiple files (see AnnotationModelLoader.loadModels() implementation where whole packages are scanned).

The documentation is rather vague, but I believe supporting multiple models in the same package is not really feasible, and overkill at best. Therefore my preference would be to keep the functionality as is and document the limitation.

Currently the BindyCVSFieldEndingWithSeparatorIssueTest fails due to a conflict between MyCsvRecord.class and BindyDoubleQuotesCsvUnmarshallTest.Order.class defined in the same package. Moving MyCsvRecord to a different package is a trivial fix. I will look into adding some model validation as well to WARN if the model is inconsistent (i.e. has overlaps or gaps).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-11 15:46:46.146,,,no_permission,,Unknown,,,,,,,,,,,,320830,,,Sat May 11 15:50:36 UTC 2013,,,,,,,0|i1jctr:,321171,,,,,,,,,03/Apr/13 01:15;hadrian;Patch applied to trunk. Need to backport to 2.10.x and 2.9.x and update docs.,11/May/13 15:46;muellerc;I documented the limitation in the WIKI page.,"11/May/13 15:50;muellerc;Because the Camel 2.10.x branch differs from the current trunk and the Camel 2.9.x branch isn't supported anymore, I would not pack porting this fix (until may somebody request it).",,,,,,,,,,,,,,,,,,,,,,,,,,,
InOut ActiveMQ exception Cannot publish to a deleted Destination,CAMEL-6229,12640008,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,alanfoster,alanfoster,31/Mar/13 21:33,02/May/13 02:30,14/Mar/19 02:43,01/Apr/13 11:45,,,,,,,,,,,,,,,,,,,,,0,,,,,,"When exposing a cxf-rs webservice and attempting to talk to another route, using InOut MEP + ActiveMQ the following exception occurs 

{code}
22:18:14,813 | INFO  | tp1882786420-364 | route1                           | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Received a request :: 
22:18:14,838 | WARN  | nager[temporary] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'temporary' - trying to recover. Cause: The Consumer is closed
22:18:14,849 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:3"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:4"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:5"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:6"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:7"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:8"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:2"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:1"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:9"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:10"" on closing pooled connection: The connection is already closed
22:18:14,857 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'responseHandler' - trying to recover. Cause: The Consumer is closed
22:18:14,919 | INFO  | responseHandler] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
22:18:14,927 | INFO  | nager[temporary] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
22:18:14,939 | INFO  | responseHandler] | route2                           | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Response handler successfully received a request!
22:18:14,943 | WARN  | responseHandler] | EndpointMessageListener          | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Execution of JMS message listener failed. Caused by: [org.apache.camel.RuntimeCamelException - org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10]
org.apache.camel.RuntimeCamelException: org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:125)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[153:org.springframework.jms:3.0.7.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_27]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
Caused by: org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:285)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:469)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:200)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.sendReply(EndpointMessageListener.java:358)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener$EndpointMessageListenerAsyncCallback.done(EndpointMessageListener.java:211)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:108)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	... 11 more
Caused by: javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1731)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:277)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:212)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:79)[122:org.apache.activemq.activemq-pool:5.7.0.fuse-71-047]
	at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:62)[122:org.apache.activemq.activemq-pool:5.7.0.fuse-71-047]
	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:592)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSend(JmsConfiguration.java:278)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:217)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:159)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$4.doInJms(JmsConfiguration.java:202)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)[153:org.springframework.jms:3.0.7.RELEASE]
	... 15 more
22:18:35,016 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 154 - org.apache.camel.camel-jms - 2.10.0.fuse-71-047 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-49919-1364764620418-0-215]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-49919-1364764620418-0-214 on ExchangeId: ID-alan-dell-49919-1364764620418-0-213) and continue routing.
22:18:35,019 | ERROR | responseHandler] | DefaultErrorHandler              | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Failed delivery for (MessageId: ID-alan-dell-49919-1364764620418-0-214 on ExchangeId: ID-alan-dell-49919-1364764620418-0-213). Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:133)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:53)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:209)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:159)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_27]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_27]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_27]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
22:18:35,030 | WARN  | tp1882786420-362 | WebApplicationExceptionMapper    | 183 - org.apache.cxf.cxf-rt-frontend-jaxrs - 2.6.0.fuse-71-047 | javax.ws.rs.WebApplicationException: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.returnResponse(CxfRsInvoker.java:149)
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.asyncInvoke(CxfRsInvoker.java:104)
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:57)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:167)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:94)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:94)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:231)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:348)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:312)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1040)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:976)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:193)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handleAsync(Server.java:403)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:79)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:133)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:53)
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)
	at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:209)
	at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:159)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	... 1 more
{code}

Using :
Camel 2.10
ActiveMQ Camel 5.7
cxf 2.6
Windows 7

",,,,,,,,,,,,,CAMEL-5865,,,,,31/Mar/13 22:37;alanfoster;camel-6229.rar;https://issues.apache.org/jira/secure/attachment/12576306/camel-6229.rar,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-31 22:35:22.401,,,no_permission,,Unknown,,,,,,,,,,,,320476,,,Mon Apr 01 11:43:46 UTC 2013,,,,,,,0|i1jan3:,320817,,,,,,,,,"31/Mar/13 22:35;raulvk;Two things:

# Could be related to CAMEL-5865. The InOut logic was a bit rough around the edges and was much improved in that ticket. Please try your code with Camel 2.10.4 and give us some feedback.
# Please post your route logic. In particular, I'd like to see your AMQ component configuration (JmsConfiguration) and the AMQ endpoint options, of both the producer and the consumer.

Thanks.","31/Mar/13 22:37;alanfoster;Attached a sample project which allows you to reproduce this error.

Note, I haven't been create a simple JUnit test that extends CamelBlueprintTestSupport, as I get a lot of strange exceptions - I'm not sure if this is a bug or not, but perhaps someone could shed light on it however?

So currently the steps to reproduce this bug actually depend on it being deployed in a container, sorry

  1) install with :  mvn install -Dmaven.test.skip=true
  2) Deploy to a container
  3) Run the junit test manually a couple of times. Sometimes the test will pass, but it also fails quite frequently

Sorry again that I couldn't get it succesfully running as a JUnit test!","31/Mar/13 22:48;raulvk;Thanks. Can you try with Camel JMS 2.10.4? 

Also, when you say you are on Camel 2.10, you mean Camel 2.10.0? What micro version exactly?","31/Mar/13 22:57;raulvk;Ok, never mind, I see the Camel version in the logs ;)

I don't know if FuseSource/Red Hat have backmerged some important JMS patches onto their 2.10.0.fuse-71-047 release.

From the logs, it looks like they backmerged the initial support for concurrentConsumers on temp reply queues from Camel 2.10.3, but they didn't merge the latest fixes which actually make this feature useable (CAMEL-5865) in Camel 2.10.4. My reasoning is that I see 10 different temp queues being created for the same request queue, which is exactly what CAMEL-5865 resolves.

Please give it a shot with Camel 2.10.4. You should be able to uninstall the current camel-jms component and install 2.10.4 with:

{code}
install -s mvn:org.apache.camel/camel-jms/2.10.4
{code}

Hopefully no more dependency upgrades will be necessary. ","31/Mar/13 23:37;alanfoster;[~raulvk] Thanks for the response! I did think that your fixed jira CAMEL-5865 seemed familiar :)

I wasn't able to swap out the camel-jms in the fuse container, but I downloaded service mix 4.5.1 which has camel 2.10.4 in it by default, and it seems to be working, hurray :)","31/Mar/13 23:46;alanfoster;Ah, I was just about to mark this as resolved, and then I noticed some very odd things in the log files :

{code}
0:28:59,458 | INFO  | tp1937409810-134 | route1                           | 96 - org.apache.camel.camel-core - 2.10.4 | Received a request :: 
00:28:59,461 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Exception inside the DMLC for Temporary ReplyTo Queue for destination responseHandler, refreshing ReplyTo destination
javax.jms.IllegalStateException: The Consumer is closed
	at org.apache.activemq.ActiveMQMessageConsumer.checkClosed(ActiveMQMessageConsumer.java:817)[62:org.apache.activemq.activemq-core:5.7.0]
	at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:581)[62:org.apache.activemq.activemq-core:5.7.0]
	at org.apache.activemq.pool.PooledMessageConsumer.receive(PooledMessageConsumer.java:67)[59:org.apache.activemq.activemq-pool:5.7.0]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:429)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:310)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[123:org.springframework.jms:3.0.7.RELEASE]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
00:28:59,462 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'temporary' - trying to recover. Cause: The Consumer is closed
00:28:59,468 | INFO  | responseHandler] | PooledConnection                 | 59 - org.apache.activemq.activemq-pool - 5.7.0 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-53847-1364772340736-5:17:1"" on closing pooled connection: The connection is already closed
00:28:59,472 | INFO  | responseHandler] | PooledConnection                 | 59 - org.apache.activemq.activemq-pool - 5.7.0 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-53847-1364772340736-5:17:2"" on closing pooled connection: The connection is already closed
00:28:59,472 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'responseHandler' - trying to recover. Cause: The Session is closed
00:28:59,479 | WARN  | responseHandler] | BrokerRegistry                   | 62 - org.apache.activemq.activemq-core - 5.7.0 | Broker localhost not started so using default instead
00:28:59,482 | WARN  | responseHandler] | BrokerRegistry                   | 62 - org.apache.activemq.activemq-core - 5.7.0 | Broker localhost not started so using default instead
00:28:59,486 | INFO  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
{code}

And these are continuously output the log file too

{code}
00:32:11,049 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:11,053 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
00:32:12,055 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:12,056 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
00:32:13,057 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:13,058 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
{code}

I'm also seeing a lot of other exceptions in the log file too, related to both cxf/camel/activemq, but it seems to handle new requests just fine!

I wonder if this is reproducible on your end at all? :) 

I really wish I could've gotten that JUnit test to run! :(

Edit - I can't seem to reproduce this after a fresh start of servicemix unfortunately... But something did go _very_ wrong! :)","01/Apr/13 08:45;raulvk;[~alanfoster] - I've reproduced this situation in the past when using the VM Transport and SMX 4.5.0 or above. In my case, the culprit was the activemq-broker.xml hotdeploy feature, which was redeploying the broker soon after the Camel routes started, therefore leaving them in an inconsistent state. 

Try removing this file: SMX_HOME/etc/org.apache.felix.fileinstall-activemq.cfg, deleting the data/ directory and starting afresh.

Also, installing bundles by copying them to the deploy/ directory could be another cause, as Karaf refreshes all linked bundles during the process (possibly the broker too). How do you perform the deployment? 

","01/Apr/13 11:43;alanfoster;[~raulvk] Ah, those conditions do seem to line up with what I am using currently; 
I was installing this code using {{osgi:install -s mvn:org/camel/1.0-SNAPSHOT}} and not the hot deploy directory

I'll close this issue though as you have already fixed this bug in CAMEL-5865, thanks!",,,,,,,,,,,,,,,,,,,,,,
Missing log parameter placeholder in routepolicy.quartz.ScheduledRoutePolicy,CAMEL-6202,12638597,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,muellerc,cwolf,cwolf,22/Mar/13 21:38,22/Mar/13 22:06,14/Mar/19 02:43,22/Mar/13 22:06,2.10.4,,,,,,,,,,,,2.10.5,2.11.0,2.9.7,,camel-quartz,,,,0,logging,,,,,"In the method scheduleRoute(...) there is logging code that looks like:

{code}
  if (LOG.isInfoEnabled()) {
    LOG.info(""Scheduled trigger: {} for action: {} on route: "", 
        new Object[]{trigger.getFullName(), action, route.getId()});
  }
{code}

...but it's missing parameter placeholder for the routeId.  It should be:

{code}
  if (LOG.isInfoEnabled()) {
    LOG.info(""Scheduled trigger: {} for action: {} on route: {}"", 
        new Object[]{trigger.getFullName(), action, route.getId()});
  }
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-22 22:06:25.417,,,no_permission,,Novice,,,,,,,,,,,,319073,,,Fri Mar 22 22:06:25 UTC 2013,,,,,,,0|i1j1zb:,319414,,,,,,,,,22/Mar/13 22:06;muellerc;Thanks for reporting Chris! It's now fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Jetty Spring example has broken Spring XML syntax,CAMEL-6024,12629915,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,mikaelhg,mikaelhg,30/Jan/13 15:10,30/Jan/13 21:06,14/Mar/19 02:43,30/Jan/13 21:06,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,,,website,,,,0,,,,,,"http://camel.apache.org/jetty.html

incorrect:
{code}
    <bean id=""jetty"" class=""org.apache.camel.component.jetty.JettyHttpComponent"">
        <property name=""socketConnectorProperties"">
            <properties>
                <property name=""acceptors"" value=""4""/>
                <property name=""maxIdleTime"" value=""300000""/>
            </properties>
        </property>
    </bean>
{code}
 
correct:
{code}
    <bean id=""jetty"" class=""org.apache.camel.component.jetty.JettyHttpComponent"">
      <property name=""socketConnectorProperties"">
        <map>
          <entry key=""acceptors"" value=""4""/>
          <entry key=""maxIdleTime"" value=""300000""/>
        </map>
      </property>
    </bean>
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-30 21:06:48.45,,,no_permission,,Novice,,,,,,,,,,,,310411,,,Wed Jan 30 21:06:48 UTC 2013,,,Patch Available,,,,0|i1hkk7:,310756,,,,,,,,,30/Jan/13 21:06;muellerc;Thanks for reporting Mikael! It's now fixed (should be online in a few hours).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel feature file doesn't validate,CAMEL-5964,12627341,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,13/Jan/13 15:26,13/Jan/13 22:10,14/Mar/19 02:43,13/Jan/13 15:41,2.11.0,,,,,,,,,,,,2.11.0,,,,karaf,,,,0,,,,,,"{noformat}
christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...
INFO]     OK: imports resolved for camel-smpp
[INFO]     OK: imports resolved for camel-snmp
[INFO]     OK: imports resolved for camel-soap
[INFO]     OK: imports resolved for camel-solr
[INFO]     OK: imports resolved for camel-spring-batch
[WARNING] Failed to validate feature camel-spring-integration
[WARNING] No export found to match org.springframework.retry;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[WARNING] No export found to match org.springframework.classify;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[WARNING] No export found to match org.springframework.retry.support;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 24.222s
[INFO] Finished at: Sun Jan 13 14:30:29 CET 2013
[INFO] Final Memory: 12M/81M
[INFO] ------------------------------------------------------------------------
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-13 17:16:43.045,,,no_permission,,Unknown,,,,,,,,,,,,304114,,,Sun Jan 13 22:10:14 UTC 2013,,,,,,,0|i17jgn:,252122,,,,,,,,,"13/Jan/13 15:41;muellerc;{noformat}
christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...
[INFO]     OK: imports resolved for camel-xmpp
[INFO]     OK: imports resolved for camel-xstream
[INFO]     OK: imports resolved for camel-zookeeper
[INFO] == Done! ==========================
[INFO] 
[INFO] --- maven-site-plugin:3.2:attach-descriptor (attach-descriptor) @ apache-camel ---
[INFO] 
[INFO] --- build-helper-maven-plugin:1.7:attach-artifact (attach-artifacts) @ apache-camel ---
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ apache-camel ---
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/pom.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/apache-camel/2.11-SNAPSHOT/apache-camel-2.11-SNAPSHOT.pom
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/apache-camel/2.11-SNAPSHOT/apache-camel-2.11-SNAPSHOT-features.xml
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
{noformat}","13/Jan/13 17:16;davsclaus;Its actually this ticket CAMEL-5931
There is a patch for that.

But I think Babak upgraded Spring Integration to 2.2.0 in the mean time.
As I was waiting for Karaf to be able to support Spring 3.1, before being able to apply the patch.

I suggest if you got some time to look at the patch in CAMEL-5931, and see if it can be applied/merged, as there is some other changes as well that could be good to get into the codebase. Fell free to assign the ticket if you have the time.",13/Jan/13 17:17;davsclaus;And it was Spring Integration 2.2.0 that now requires that spring-retry project. And hence why the features could not validate anymore.,13/Jan/13 17:34;muellerc;@[~davsclaus]]: adding spring-retry as dependency to the feature file resolved the issue.,13/Jan/13 18:05;davsclaus;The patch in CAMEL-5931 has *more* than just adding spring-retry. That was my point of suggesting to look at that ticket and merge the patch into the codebase.,13/Jan/13 21:18;bvahdat;Sorry it was my bad to not check the camel-spring-integration feature while upgrading.,13/Jan/13 22:10;muellerc;[~bvahdat]: Don't worry. The feature file validates again. I will have a look at CAMEL-5931 as Claus suggested.,,,,,,,,,,,,,,,,,,,,,,,
camel-jms: concurrent consumers on Temp Reply Queue requires more work,CAMEL-5865,12623429,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,11/Dec/12 18:38,02/May/13 02:30,14/Mar/19 02:43,09/Jan/13 23:53,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,,,camel-jms,,,,0,,,,,,"This feature requires a bit more work to get right. Currently it's a bit buggy. Here are the reasons:

- every time the DLMC initialises a new consumer task (AsyncMessageListenerInvoker), it invokes the Destination Resolver. The current code ends up creating a new temp queue and overwriting the reply queue in the Reply Manager every time.
- temp queues can only be consumed from by the same JMS connection that created the queue. If you use a connection pool and maxConsumers > 1, there's no way to guarantee that the same JMS connection is used to create the subsequent consumers, as concurrency expands. We should explicitly set cacheLevel=CACHE_CONSUMER which activates sharing the connection in the DLMC across consumers.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-10 07:45:31.122,,,no_permission,,Unknown,,,,,,,,,,,,297128,,,Wed Jan 16 00:05:11 UTC 2013,,,,,,,0|i14ljz:,234956,,,,,,,,,09/Jan/13 23:53;raulvk;Fixed in r1431152 on trunk and r1431155 on camel-2.10.x branch.,09/Jan/13 23:54;raulvk;Also added logic to refresh the ReplyTo destination if the underlying connection fails.,10/Jan/13 07:45;davsclaus;Nice to see the refresh of the reply to destination if connection fails. Do you mind added a note about this to the 2.11 release notes?,16/Jan/13 00:05;raulvk;Claus - done. And now we also honour replyToCacheLevelName if set.,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Tracer not showing some EIP names,CAMEL-5844,12618554,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,reckless82,reckless82,03/Dec/12 11:31,14/Dec/12 21:43,14/Mar/19 02:43,14/Dec/12 17:52,2.10.1,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,0,,,,,,"In order to debug Camel routes, I have enabled the Tracer as follows:         getContext().setTracing(true);

However, I have observed that some EIP names and routes are not being printed on console, making it a bit confusing to follow. As far as I know, this happens with:
* process(): the processor is not printed in the tracer; it's just empty (see below)
* marshall(): the marshaller name is not printed in the tracer; it's just empty (see below)
* setBody(): this step is also printed empty
* from(""activiti:...""): this route step is not printed altogether

For simplicity, I only provide the examples for process() and marshall(), bit I can provide more information if needed.

{panel:title=Route2 Config}
from(""vm:processIncomingOrders"")
  .process(new IncomingOrdersProcessor())
  .split(body())	// iterate list of Orders
  .to(""log:incomingOrder1?showExchangeId=true"")
  .process(new ActivitiStarterProcessor())
  .to(""log:incomingOrder2?showExchangeId=true"")			
  .to(""activiti:activiti-camel-example"");
{panel}

{panel:title=Route2 Tracer}
INFO  03-12 12:09:31,899 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-3 >>> (route2) from(vm://processIncomingOrders) -->  <<< Pattern:InOnly, [...]
INFO  03-12 12:09:34,899 (IncomingOrdersProcessor.java:process:39)  -Processing incoming orders (from Web Services)
[ORDER id:120 partName: wheel amount: 2 customerName: Honda Mechanics]
[ORDER id:121 partName: engine amount: 4 customerName: Volvo]
[ORDER id:122 partName: steering wheel amount: 3 customerName: Renault]
INFO  03-12 12:09:34,900 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-3 >>> (route2)  --> split[body] <<< Pattern:InOnly, [...]
{panel}



{panel:title=Route6 config}
from(""direct:ordercsv"")
  .marshal().bindy(BindyType.Csv, ""net.atos.camel.entities"")
  .to(""file:d://cameldata/orders?fileName=orders-$\{date:now:yyyyMMdd-hhmmss}.csv"");
{panel}

{panel:title=Route6 Tracer}
INFO  03-12 12:09:37,313 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-8 >>> (route6) direct://ordercsv -->  <<< Pattern:InOnly, [...]
INFO  03-12 12:09:37,320 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-8 >>> (route6)  --> file://d://cameldata/orders?fileName=orders-%24%7Bdate%3Anow%3AyyyyMMdd-hhmmss%7D.csv <<< Pattern:InOnly,  [...]
{panel}

",,,,,,,,,,,,,,,,,,11/Dec/12 17:39;reckless82;tracer-empty-error.jpg;https://issues.apache.org/jira/secure/attachment/12560412/tracer-empty-error.jpg,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-05 18:35:06.474,,,no_permission,,Moderate,,,,,,,,,,,,293387,,,Fri Dec 14 21:43:06 UTC 2012,,,,,,,0|i0szfb:,167216,,,,,,,,,"05/Dec/12 18:35;muellerc;You are sure you are using Camel 2.10.1?

Given the route:
{code}
from(""vm:start"")
  .process(new Processor() {
    public void process(Exchange exchange) throws Exception {
      }
    })
  .setBody(constant(""Camel""))
  .to(""mock:result"");
{code}

I got the following log output:

{noformat}
2012-12-05 19:29:37,235 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.10.1 (CamelContext: camel-1) started in 0.296 seconds
2012-12-05 19:29:37,250 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied
2012-12-05 19:29:38,235 [#0 - vm://start] INFO  Tracer                         - ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-3 >>> (route1) from(vm://start) --> org.apache.cmueller.camel.test.DefaultTracerTest$1$1@3ff2cea2 <<< Pattern:InOnly, Headers:{breadcrumbId=ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-1}, BodyType:String, Body:test
2012-12-05 19:29:38,237 [#0 - vm://start] INFO  Tracer                         - ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-3 >>> (route1) org.apache.cmueller.camel.test.DefaultTracerTest$1$1@3ff2cea2 --> setBody[{Camel}] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-1}, BodyType:String, Body:test
2012-12-05 19:29:38,237 [#0 - vm://start] INFO  Tracer                         - ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-3 >>> (route1) setBody[{Camel}] --> mock://result <<< Pattern:InOnly, Headers:{breadcrumbId=ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-1}, BodyType:String, Body:Camel
{noformat}

org.apache.cmueller.camel.test.DefaultTracerTest$1$1@3ff2cea2 is the class name of my processor. The name looks ugly because I use an anonymous inner class.
The setBody() call is also logged nicely.
I didn't test the unmarshal call, but from the code I can see it will also be logged.

Please check you project set up.","10/Dec/12 12:26;reckless82;Yes, I am using Camel 2.10.1. I have just tried a unit test with your route and the trace works perfectly.
So I guess there must be some error/conflict in my environment setup.

I am trying to integrate Activiti and Camel together, as explained (and recommended) in the book ""Activiti in Action"" (Manning). Both engines are running in the Jetty servlet container. The source code is public and shared via GitHub: https://github.com/aritzbastida/activiti-camel-webapp

I am quite newbie in integration topics, so probably there is some conflict with the Tracer component that I am not aware of... :/","11/Dec/12 17:52;reckless82;Debugging for a little while, I could delimit the source code snippet that is causing the Tracer not showing processor names (in my environment). Please find attached the related screenshot.

{code:title=InstrumentationProcessor class}
    @Override
    public String getTraceLabel() {
        if (processor instanceof Traceable) {
            return ((Traceable)processor).getTraceLabel();
        } else {
            return """";
        }   
    }
{code}

Note that the {{processor}} variable, in my environment, is an instance of {{WrapProcessor}}, which does not implement the {{Traceable}} interface, so an empty string is returned (instead of the processor name).

I don't know whether this behaviour is correct or not, as I don't have insight on the WrapProcessor and InstrumentationProcessor classes.

Thank you in advance.

","11/Dec/12 22:15;muellerc;Hi Aritz!

Thanks for digging into it. I updated the WrapProcessor to also implement org.apache.camel.Traceable. It should now work. Feel free to test the SNAPSHOT version to verify the fix.

Best,
Christian","12/Dec/12 11:20;reckless82;Sorry for the inconvenience. I reopen the issue, because I am afraid that the current solution only solves this issue partially. After digging into it a bit more, I think that the root cause of the problem is related to the {{InstrumentationProcessor}} class (which is used when the *JMX agent* is enabled).

Given the following example route:

{code:title=Example Route}
  from(""vm:start"")
    .process(new Processor() {
       @Override
       public void process(Exchange exchange) throws Exception {
          System.out.println(exchange.getIn().getBody());
       }
    })
    .setBody(constant(""Camel""))
    .to(""mock:result"");	
{code}

With JMX disabled:
* the .process() step is handled by {{WrapProcessor}} class.
* the .setBody() step is handled by {{AsyncProcessorConverterHelper.ProcessorToAsyncProcessorBridge}} class.

None of these classes is Traceable in camel-core 2.10.3. As a result, in the *DefaultRouteNode.getLabel()* method, the following statement is executed:

{{return processorDefinition.getLabel()}}

...and we get the same output as in your original unit test:

{noformat}
26:51,150 [Camel (camelProcess) thread #0] INFO  (org.apache.camel.processor.interceptor.Tracer:96) - ID-ES-CNU2113RXH-58064-1355308005213-0-3 >>> (route2) from(vm://start) --> net.atos.camel.routes.BusinessRoutes$1@14c9066 <<< Pattern:InOnly
26:51,152 [Camel (camelProcess) thread #0] INFO  (org.apache.camel.processor.interceptor.Tracer:96) - ID-ES-CNU2113RXH-58064-1355308005213-0-3 >>> (route2) net.atos.camel.routes.BusinessRoutes$1@14c9066 --> setBody[{Camel}] <<< Pattern:InOnly
26:51,152 [Camel (camelProcess) thread #0] INFO  (org.apache.camel.processor.interceptor.Tracer:96) - ID-ES-CNU2113RXH-58064-1355308005213-0-3 >>> (route2) setBody[{Camel}] --> mock://result <<< Pattern:InOnly
{noformat}

However, if we enable JMX, the processors mentioned above (and probably others I am not aware of) are wrapped up by {{InstrumentationProcessor}} class, which is Traceable. So, in the DefaultRouteNode.getLabel() method, the following statement is executed:

{{return trace.getTraceLabel();}}

...even if the enclosed processors are _not_ themselves Traceable (which results in printing an empty string).

Note that, in camel-core 2.10.4-SNAPSHOT, with JMX enabled, the processor is now printed (with an additional ""wrap[]"" prefix), but setBody() still is not.

{noformat}
49:55,689 [Camel (camelProcess) thread #1] INFO - ID-ES-CNU2113RXH-57168-1355305756898-0-3 >>> (route2) from(vm://start) --> wrap[net.atos.camel.routes.BusinessRoutes$1@67ba82] <<< Pattern:InOnly
49:56,420 [Camel (camelProcess) thread #1] INFO - ID-ES-CNU2113RXH-57168-1355305756898-0-3 >>> (route2) wrap[net.atos.camel.routes.BusinessRoutes$1@67ba82] -->  <<< Pattern:InOnly
49:57,121 [Camel (camelProcess) thread #1] INFO - ID-ES-CNU2113RXH-57168-1355305756898-0-3 >>> (route2)  --> mock://result <<< Pattern:InOnly
{noformat}

----
PROPOSAL:

For consistency, I think that the Tracer component should print the same log whether the JMX agent is enabled or not. In order to achieve this, I guess that some rework in DefaultRouteNode.getLabel() is necessary. 

Currently, the ""traceable"" check in DefaultRouteNode.getLabel() is made on the InstrumentationProcessor class, but the trace message is based on the enclosed class (e.g. WrapProcessor). So, maybe, we could just make {{InstrumentationProcessor}} not Traceable, or make the ""traceable"" check on the enclosed class...

","12/Dec/12 14:04;njiang;+1 to make the InstrumentationProcessor not traceable.
",12/Dec/12 22:20;muellerc;I reverted my first commit and now made the InstrumentationProcessor not traceable (only for Camel 2.11 until now).,14/Dec/12 17:52;muellerc;Back ported into the Camel 2.10.x and 2.9.x maintenance branches.,14/Dec/12 19:39;bvahdat;I think you back-ported the wrong commit.,"14/Dec/12 21:43;muellerc;Thanks Babak, I messed up my git repo...
Will fix it in a few seconds...",,,,,,,,,,,,,,,,,,,,
"regression : invalid SetQueueAttributesRequest created, works on 2.10.1",CAMEL-5782,12615484,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,jgraglia,jgraglia,09/Nov/12 14:02,12/Nov/12 07:31,14/Mar/19 02:43,10/Nov/12 11:09,2.10.2,2.9.4,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-aws,,,,0,,,,,,"In org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes,
if I don't have any configuration, the created SetQueueAttributesRequest contains a null atttribute collection and AWS emit an error.

In 2.10.1, no problem.

Workaround in 2.10.2 : force the create SetQueueAttributesRequest to contain a valid attribute collection by defining a configuration in camel. 

For exemple: 
from(""aws-sqs://""+queue+""?amazonSQSClient=#amazonSQSClient&delay=""+pollCycle.getMillis()+""&maxMessagesPerPoll=10&deleteAfterRead=false"")   

   -> works on 2.10.1, fail on 2.10.2

if I add an argument to my URI""&defaultVisibilityTimeout=30"" 
    -> works on 2.10.1, works on 2.10.2


Exception : 

{{
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route SQS-to-MongoDB-EVENTS: Route[[From[aws-sqs://EVENTS?amazonSQSClient=#amazonSQSClien... because of Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=%23amazonSQSClient&delay=60000&deleteAfterRead=false&maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name.
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412) ~[camel-core-2.10.2.jar:2.10.2]
        at com.netceler.iv5measure.contract.impl.sqs.CamelRoutesLauncher.start(CamelRoutesLauncher.java:55) ~[webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT]
        at com.netceler.iv5measure.contract.impl.config.ConfiguredStreamInitializer.startStreams(ConfiguredStreamInitializer.java:39) ~[webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT]
        ... 58 common frames omitted
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=%23amazonSQSClient&delay=60000&deleteAfterRead=false&maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name.
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:479) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171) ~[camel-core-2.10.2.jar:2.10.2]
        ... 66 common frames omitted
Caused by: com.amazonaws.AmazonServiceException: The request must contain the parameter Attribute.Name.
        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:614) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:312) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:165) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.services.sqs.AmazonSQSClient.invoke(AmazonSQSClient.java:812) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.services.sqs.AmazonSQSClient.setQueueAttributes(AmazonSQSClient.java:246) ~[aws-java-sdk-1.3.23.jar:na]
        at com.netceler.infra.aws.sqs.JMXSQS.setQueueAttributes(JMXSQS.java:108) ~[infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT]
        at com.netceler.infra.aws.sqs.AmazonSQSClientProxy.setQueueAttributes(AmazonSQSClientProxy.java:63) ~[infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT]
        at org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes(SqsEndpoint.java:139) ~[camel-aws-2.10.2.jar:2.10.2]
        at org.apache.camel.component.aws.sqs.SqsEndpoint.doStart(SqsEndpoint.java:93) ~[camel-aws-2.10.2.jar:2.10.2]
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1763) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:931) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:892) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:475) ~[camel-core-2.10.2.jar:2.10.2]
        ... 74 common frames omitted
}}","$ uname -a
Linux pc-nc277 3.2.0-3-amd64 #1 SMP Mon Jul 23 02:45:17 UTC 2012 x86_64 GNU/Linux

$ java -version
java version ""1.7.0_07""
Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)

$ mvn -version
Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100)
Maven home: /home/jgr/downloads/apache-maven-3.0.4
Java version: 1.7.0_07, vendor: Oracle Corporation
Java home: /home/jgr/downloads/jdk1.7.0_07/jre
Default locale: fr_FR, platform encoding: UTF-8
OS name: ""linux"", version: ""3.2.0-3-amd64"", arch: ""amd64"", family: ""unix""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-10 11:09:09.637,,,no_permission,,Unknown,,,,,,,,,,,,256771,,,Mon Nov 12 07:31:53 UTC 2012,,,,,,,0|i0iqzb:,107465,,,,,,,,,"10/Nov/12 11:09;muellerc;Hello Julien!
Thanks for reporting and my apologize for the inconvenience. It's now fixed for Camel 2.10.3 and 2.11.0. Feel free to test the SNAPSHOT versions.","12/Nov/12 07:31;jgraglia;Great! Thx!
I confirm that you have resolved my problem with 2.10.3 and 2.11.0 SNAPSHOT versions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel JMS producer can block a thread under specific circumstances,CAMEL-5769,12614644,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,raulvk,raulvk,raulvk,03/Nov/12 12:57,04/Nov/12 23:34,14/Mar/19 02:43,04/Nov/12 23:32,2.10.2,2.8.6,2.9.4,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-jms,,,,0,,,,,,"This is an edge case, but when the following circumstances concur, the asynchronous routing engine in Camel become blocked:

- Sending an InOut exchange over JMS (request/reply), where:
- Persistent messages are enabled (deliveryPersistent=true)
- useMessageIDasCorrelationID is enabled
- replyToType is Temporary queues (default) (using TemporaryQueueReplyManager)
- a timeout is set

You have to be really unlucky, but if the following condition is satisfied, a thread will become blocked:

{{time the broker takes to ACK the produced message > message timeout}}

Hence, if we have a timeout of 3000ms, and the broker takes 4000ms to ACK the message (e.g. slow Disk I/O while the journal is rotating - it happened to us), at some point we'll see this.

{code}
2012-10-30 10:46:57,680 | WARN  | CorrelationMap | 89 - org.apache.camel.camel-core - 2.8.0.fuse-06-11 | Exception occurred during purge task. This exception will be ignored.
java.lang.NullPointerException
{code}

The CorrelationMap is rendered useless, so if subsequent exchanges time out, the ReplyHandler may never get an onTimeout callback, thus leading to the waiting thread getting blocked forever if the async routing engine was in place.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,255062,,,Sun Nov 04 23:34:38 UTC 2012,,,,,,,0|i0eotb:,83782,,,,,,,,,"04/Nov/12 23:32;raulvk;Fixed in trunk, 2.10.x and 2.9.x. Added a test case to reproduce the buggy situation: JmsBlockedAsyncRoutingEngineTest.","04/Nov/12 23:34;raulvk;I noticed that the issue doesn't necessarily happen with persistent messages only. It happens under any situation where the broker takes longer than the value set for the request timeout to ACK the message to the producer (and thus send back the final Message ID). In other words, this situation is reproduceable also when ActiveMQ Producer Flow Control has kicked in.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Data coding of 0x02 not considered 8-bit,CAMEL-5732,12612977,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,frankzinger,frankzinger,22/Oct/12 14:22,23/Oct/12 21:01,14/Mar/19 02:43,23/Oct/12 21:01,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-smpp,,,,0,,,,,,"SmppUtils.parseAlphabetFromDataCoding()) doesn't identify an input of 0x02 as 8-bit, but the SMPP spec (3.4 and 5.0) clearly states that 0x02 is octet-unspecified (8-bit).

The bug is actually in jsmpp, but the attached patch contains a workaround.

This seems like a pretty blatant mistake to make, so perhaps there is good explanation that I am not aware of?",,,,,,,,,,,,,,,,,,22/Oct/12 14:24;frankzinger;dcs_of_2_is_8bit.diff;https://issues.apache.org/jira/secure/attachment/12550290/dcs_of_2_is_8bit.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-23 20:43:53.83,,,no_permission,,Unknown,,,,,,,,,,,,250328,,,Tue Oct 23 21:01:36 UTC 2012,,,Patch Available,,,,0|i0ax5b:,61643,,,,,,,,,23/Oct/12 20:43;muellerc;See chapter 5.2.19 data_coding in http://docs.nimta.com/SMPP_v3_4_Issue1_2.pdf,"23/Oct/12 20:52;muellerc;fixed some checkstyle issues which are raised by running
{code}
mvn clean install -Psourcecheck
{code}

This is documented here: http://camel.apache.org/building.html.",23/Oct/12 21:01;muellerc;Thank you Francois for the patch! Feel free to test the SNAPSHOT versions.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Setting alphabet header to 8-bit doesn't update data coding,CAMEL-5731,12612971,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,frankzinger,frankzinger,22/Oct/12 14:02,03/Nov/12 15:37,14/Mar/19 02:43,03/Nov/12 15:37,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-smpp,,,,0,,,,,,"For derivatives of SmppSmCommand, setting the SmppConstants.ALPHABET header to e.g. Alphabet.ALPHA_8_BIT doesn't change the data coding of the resulting command.

I am not 100% clear on how the alphabet header is meant to interact with the data coding, but this seems like a bug to me.

Patch with demo unit test to follow.",,,,,,,,,,,,,,,,,,22/Oct/12 14:05;frankzinger;alpha_not_updating_dcs_demo_unit_test.diff;https://issues.apache.org/jira/secure/attachment/12550279/alpha_not_updating_dcs_demo_unit_test.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-03 15:33:18.503,,,no_permission,,Unknown,,,,,,,,,,,,250322,,,Sat Nov 03 15:36:59 UTC 2012,,,,,,,0|i0ax3r:,61636,,,,,,,,,"22/Oct/12 14:05;frankzinger;In this test, the alphabet header is set to 8-bit, but the data coding passed to SmppSession.submitShortMessage() is 0, which is the default and does not indicate an 8-bit data coding.",03/Nov/12 15:33;muellerc;A workaround is to use the header SmppConstants.DATA_CODING. This will be taken into account.,03/Nov/12 15:36;muellerc;Thanks for the test case Francois. I fixed this issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader mixup when consumers across bundles share the same camel-jetty port,CAMEL-5722,12612837,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,raulvk,raulvk,raulvk,20/Oct/12 16:02,27/Oct/12 18:33,14/Mar/19 02:43,27/Oct/12 18:33,2.8.0,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-jetty,,,,0,,,,,,"Happens in an OSGi environment; but it is also applicable in modular servers that build dynamic classloaders (e.g. JBoss AS) per deployed artifacts (WAR, module, EAR, etc.).

If bundles A and B are both creating camel-jetty consumers on the same TCP port, the consumers will share the underlying Jetty connector. Moreover, the Jetty connector is indeed created by the first consumer that initialises on that TCP port.

Since the Camel route executes on the Jetty Connector thread, all class resolutions will happen against the classloader of the bundle that initialises first.

This makes class resolution absolutely undeterministic and erratic. Quite a nasty bug IMHO.

Perhaps this can be fixed by adding a call to {{Thread.setContextClassLoader()}} passing the classloader of the JettyHttpEndpoint, as soon as a request comes in?","OSGi environment, Karaf 2.2.2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-21 10:02:15.844,,,no_permission,,Unknown,,,,,,,,,,,,250109,,,Sat Oct 27 18:07:02 UTC 2012,,,,,,,0|i0apcn:,60380,,,,,,,,,20/Oct/12 16:03;raulvk;Have only been able to test in Camel 2.8.0. Will test on a later release and provide feedback.,"21/Oct/12 10:02;njiang;We have faced the same issue in camel-jaxb, to resolve it we put the bundle class loader as application class laoder into the bus and it can be get by the CXF run time, so the TCCL can be set with the application class loader whenever the camel need. 
@Raul, to resolve the issue that you faced, you can use the CamelContext.getApplicationContxt() to set the TCCL on the CamelContinuationServlet.","21/Oct/12 10:14;raulvk;Thanks a lot for the indications. I have confirmed that setting the TCCL to the classloader from CamelContext.getApplicationContextClassLoader() does the trick.

Since the Jetty consumer is async, I just wondered if we also have to do something special on the AsyncCallbacks?",21/Oct/12 16:39;raulvk;Working on a fix. So far I have an itest-osgi that reproduces the issue.,25/Oct/12 12:15;davsclaus;Any update on this issue?,"25/Oct/12 12:17;davsclaus;I guess a generic solution is to let the UnitOfWorkProcessor that is 1st on the route processors, set the TCCL and restore it on done. Then it may be a generic fix for all use-cases","27/Oct/12 16:50;raulvk;Yep, I committed fixes on r1400729 and r1400734 on 21/10. There was also some discussion on the mailing list regarding other cases to consider.

Claus, that's another solution, but most consumers allow for some custom logic to execute before the route kicks in, e.g. HttpBinding and the like. The UoW processor wouldn't account for those scenarios, or would it?
","27/Oct/12 17:05;raulvk;I think this can also be a problem in the Direct VM component, if a new Exchange is not created at the consumer side... I'll check.","27/Oct/12 18:07;raulvk;Yep, filed CAMEL-5748.",,,,,,,,,,,,,,,,,,,,,
Bodies of SMs with 8-bit data_coding are mangled,CAMEL-5718,12612703,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,frankzinger,frankzinger,19/Oct/12 15:27,15/Nov/12 21:15,14/Mar/19 02:43,13/Nov/12 21:26,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-smpp,,,,0,,,,,,"Bytes in the body of 8-bit SUBMIT_SMs which do not fall within the chosen charset's range are set to '?', which is obviously wrong because 8-bit/binary data should not be modified in any way.

EDIT: Turns out the RX SMs (DELIVER_SM, etc.) were also affected.",,,,,,,,,,,,,,,,,,01/Nov/12 07:48;frankzinger;8bit_deliver_sm_bodies_mangled.diff;https://issues.apache.org/jira/secure/attachment/12551683/8bit_deliver_sm_bodies_mangled.diff,22/Oct/12 13:37;frankzinger;camel_smpp_8bit_messages.diff;https://issues.apache.org/jira/secure/attachment/12550270/camel_smpp_8bit_messages.diff,13/Nov/12 12:55;frankzinger;ci_failures_fixed_and_tested.diff;https://issues.apache.org/jira/secure/attachment/12553311/ci_failures_fixed_and_tested.diff,13/Nov/12 12:55;frankzinger;ci_failures_reproduced.diff;https://issues.apache.org/jira/secure/attachment/12553310/ci_failures_reproduced.diff,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2012-10-20 14:59:44.493,,,no_permission,,Unknown,,,,,,,,,,,,249954,,,Thu Nov 15 21:15:19 UTC 2012,,,Patch Available,,,,0|i0ane7:,60063,Regression,,,,,,,,19/Oct/12 15:31;frankzinger;I've also noticed that SUBMIT_SMs with SmppConstants.ALPHABET set to Alphabet.ALPHA_8_BIT have their bodies mangled in the same way.,19/Oct/12 16:40;frankzinger;I guess all the other message types need to be checked too. I will do so on Monday and provide another patch if necessary. I know DELIVER_SM works fine though.,20/Oct/12 14:59;davsclaus;Looking forward for the remainder patches.,20/Oct/12 20:27;muellerc;Looking forward for the patch - and the unit test ;-),"22/Oct/12 13:37;frankzinger;This patch supercedes the previous one. It fixes the mangling of 8-bit bodies in all the message types I could identify (basically all subclasses of SmppSmCommand: SmppSubmitSmCommand, SmppSubmitMultiCommand, SmppReplaceSmCommand).

I.e.:

- Setting data coding or alphabet to one of the 8-bit values prevents body from getting narrowed to charset;

- Data coding takes precedence over alphabet. I.e. if both headers are set, only the value of the data coding is taken into account and the alphabet is ignored.","23/Oct/12 09:08;frankzinger;As mentioned before, DELIVER_SM bodies are not mangled, but here is a patch (test_deliver_sm_bodies_not_mangled.diff) containing tests that confirm the fact in case you think it would be useful.","31/Oct/12 22:15;muellerc;After applying your patches, 4 test on my machine failed:

{noformat}
Results :

Failed tests: 
  createSmppMessageFromDefaultDataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createSmppMessageFromLatin1DataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createSmppMessageFrom8bitDataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createBodyShouldNotMangle8bitDataCodingShortMessage(org.apache.camel.component.smpp.SmppMessageTest): arrays first differed at element [0]; expected:<-1> but was:<-40>

Tests run: 125, Failures: 4, Errors: 0, Skipped: 4
{noformat}

Could you please have a look at it? What's your OS and default charset?","01/Nov/12 07:47;frankzinger;I am on Linux and my default charset is Latin1.

But anyway, I have improved the tests (they now fail on my system as well because they try every supported character encoding) and have provided the code fixes in the patch called '8bit_deliver_sm_bodies_mangled.diff', which I will attach soon.",01/Nov/12 07:51;frankzinger;The tests in the other patch should probably also be updated to try every supported charset.,"03/Nov/12 15:05;muellerc;I'm a bit confused. Do you work on an additional patch? Are both attached patches needed or only ""8bit_deliver_sm_bodies_mangled.diff""?",03/Nov/12 15:52;frankzinger;I added '8bit_deliver_sm_bodies_mangled.diff' and removed the previous patch which contained all the failing tests you pointed out. That one was called 'test_deliver_sm_bodies_not_mangled.diff'. Both of the currently-attached patches need to be committed.,"05/Nov/12 12:59;muellerc;Francois, thanks for the patch. I applied both. Could you please have a look at it, because I had to resolve merge conflicts in both. And a had to do a lot other formatting changes to make Checkstyle happy. You can read more about how you can test it too before you create the patch at [1].

So, thanks again!

[1] http://camel.apache.org/building.html","06/Nov/12 07:46;frankzinger;Sorry for the conflicts. I checked both of the affected files (SmppMessageTest.java and SmppSubmitSmCommandTest.java; does that look right?) and it all looks OK to me. I have also been made aware of Checkstyle, and actually used it for the second patch, so it shouldn't be a problem again. Thanks!","11/Nov/12 10:32;davsclaus;This patch causes 2 failures on our CI servers. Is anybody looking into this?

If not I will revert the commit as it prevent the CI servers from continue testing other parts of Camel.",11/Nov/12 10:34;davsclaus;https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-smpp/1090/testReport/,11/Nov/12 12:13;muellerc;I will fix it later today.,"12/Nov/12 08:32;bvahdat;They are still failing even after the latest fix:

https://builds.apache.org/job/Camel.trunk.fulltest/1092/org.apache.camel$camel-smpp/#showFailuresLink

Not sure if this sounds reasonable to you but I think the problem in both cases is the following line:

{code}
smppMessage.getBody(String.class).getBytes()
{code}

Which makes use of the platform's default charset for the byte array being returned. However the other body is a UTF-8 encoded byte array! So I think the usage of

{code}
IOConverter.toString(byte[] data, Exchange exchange)
{code}

could resolve the problem. To reproduce the problem on your local box you could set the following system property while running the tests:

{code}
-Dfile.encoding=UTF-16
{code}
","12/Nov/12 08:37;bvahdat;That is the usage of the following header while converting:

{code}
Exchange.CHARSET_NAME
{code}","12/Nov/12 09:03;frankzinger;Not so sure. SmppMessage.getBody() doesn't appear to do any conversion because the body is set to a String at SmppBinding.createSmppMessage (line 109) and also at SmppMessage.createBody (line 94). All SmppMessage.getBody() does is call MessageSupport.getBody(Class<T> type, Object body), which simply casts 'body' to 'type' if the body is already an instance of the type, which is the case here.

I think the problem is where the body is being set using String(byte[]) (at the above-mentioned locations). This String constructor decodes the byte array using the system's default charset. I initially was setting the body to a byte[] and I think that would prevent conversion and just seems generally safer and more sensible. I changed it to a String at the last minute for the sake of consistency because the body is a String when it's not 8-bit and the tests were passing under my default charset of Latin1.","12/Nov/12 09:07;frankzinger;Sorry, I guess you were talking about String.getBytes() doing conversion.

Anyway, I still think the best option would be to set and leave 8-bit bodies as byte[] unless you guys think the difference in types would be a problem? The body really should be left untouched in the case of 8-bit DCS. Otherwise there is just too much scope for things to go wrong.",12/Nov/12 21:20;muellerc;I create a new Ubuntu VM and run the test locally. On my MacOS all tests pass.,12/Nov/12 22:51;muellerc;I can reproduce this issue on my new Ubuntu instance. Looking for the issue...,"13/Nov/12 05:06;frankzinger;I could also have a look, so please let me know if it's necessary.",13/Nov/12 07:24;muellerc;It would be great if you could have a look at it. I did a small update two days ago but it didn't fixed the issue on Ubuntu. :-(,"13/Nov/12 08:10;bvahdat;{quote}
I create a new Ubuntu VM and run the test locally. On my MacOS all tests pass.
{quote}

You can also reproduce the two failing tests even on MacOS:

{code}
mvn test -Dfile.encoding=UTF-16
{code}

That's you change the default platform encoding from {{MacRoman}} to {{UTF-16}}. Unfortunatley I've got no knowledge of the SMPP protocol or jsmpp library but looking at the changes being made by this ticket I see the configured encoding (that's {{SmppConfiguration.getEncoding()}}) [is not taken into the account *anymore*|http://svn.apache.org/viewvc/camel/trunk/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java?r1=1395645&r2=1405775] to build Strings out of the given byte arrays:

{code}
smppMessage.setBody(new String(deliverSm.getShortMessage()));
{code}

which explains why the test results are platform depended!
","13/Nov/12 08:18;frankzinger;OK thanks for the help so far guys, I will take a look today still and report back.","13/Nov/12 12:54;frankzinger;I have had a look and I am of the opinion that leaving 8-bit bodies as byte[] is the only solution.

It is not possible to store a byte[] inside a String (using e.g. String.String(byte[])) and read those bytes out again later (using e.g. String.getBytes()) without involving the system's default charset. And as patch [1] shows, this fails (EDIT: fails as in the 8-bit data is modified) on at least one of my system's supported charsets (Big5, in this case). In a nutshell, storing 8-bit data inside a String is just plain wrong.

I don't think consistency (String vs. byte[] bodies) is an issue after all because users will still be able to get a String version of the body by calling SmppMessage.getBody(String.class) (although this will cause conversion on some systems). I think it's actually quite intuitive to retrieve 8-bit data using getBody(byte[].class) or (byte[])getBody().

I have attached two patches. *Note that these patches are not compatible*: patch [1] exists solely to show how I reproduced the CI failures on my machine. The real fix and its unit tests are in patch [2].

[1] _ci_failures_reproduced.diff_: For informational purposes only; modifies the tests that were causing the CI machine to fail so that they fail on my machine. (They should now fail on any machine which supports a reasonable set of character encodings.)

[2] _ci_failures_fixed_and_tested.diff_: The real fix and its unit tests.
",13/Nov/12 21:26;muellerc;Thanks again Francois for the patch. It works on my Ubuntu VM too.,"15/Nov/12 13:02;frankzinger;Cool, thanks to you guys too. Let's hope it survives the CI this time.","15/Nov/12 21:15;muellerc;It survived! ;-)
The last camel-smpp tests runs successfully..."
JmsBinding Does Not Handle BigInteger and BigDecimal Properly,CAMEL-5641,12608743,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,jwcarman,jwcarman,22/Sep/12 11:41,22/Sep/12 18:05,14/Mar/19 02:43,22/Sep/12 17:18,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jms,,,,0,patch,,,,,"According to the documentation:

""The values must be primitives or their counter objects (such as
Integer, Long, Character). The types, String, CharSequence, Date,
BigDecimal and BigInteger are all converted to their toString()
representation. All other types are dropped.""

So, it would seem that BigInteger should be toString()ed.  However, in
the JmsBinding class, we see the following code:

{code}
protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {
        if (headerValue instanceof String) {
            return headerValue;
        } else if (headerValue instanceof Number) {
            return headerValue;
        } else if (headerValue instanceof Character) {
            return headerValue;
        } else if (headerValue instanceof CharSequence) {
            return headerValue.toString();
        } else if (headerValue instanceof Boolean) {
            return headerValue;
        } else if (headerValue instanceof Date) {
            return headerValue.toString();
        }
        return null;
    }
{code}

Since BigInteger extends Number, it will merely return the instance
itself.","java version ""1.6.0_35""
Java(TM) SE Runtime Environment (build 1.6.0_35-b10-428-11M3811)
Java HotSpot(TM) 64-Bit Server VM (build 20.10-b01-428, mixed mode)",,,,,,,,,,,,,,,,,22/Sep/12 11:48;jwcarman;CAMEL-5641.patch;https://issues.apache.org/jira/secure/attachment/12546160/CAMEL-5641.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-22 17:18:54.492,,,no_permission,,Novice,,,,,,,,,,,,241513,,,Sat Sep 22 18:05:43 UTC 2012,,,Patch Available,,,,0|i028c7:,10952,,,,,,,,,22/Sep/12 11:48;jwcarman;Fix with test case.,"22/Sep/12 17:18;muellerc;Thanks for reporting and providing the patch James. I only did two small modifications to pass our Checkstyle checks. You can read more about it here [1].
It's now fixed. Do you consider to test the SNAPSHOT's whether your fix works for you? ;-)

[1] http://camel.apache.org/building.html",22/Sep/12 18:05;jwcarman;I'm going to run the build in my local Jenkins server.  I'll grab the snapshot once it's done.  Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,
EventHelper.notifyRouteStarted skips all remaining notifiers if one if the notifiers ignores route events,CAMEL-5631,12608431,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,frank.schoenheit,frank.schoenheit,20/Sep/12 11:18,21/Oct/12 18:16,14/Mar/19 02:43,22/Sep/12 16:55,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,"Having two or more notifiers registered at the management strategy of a camel context, where one of the notifiers (not the last one) is set up to ignore route events, results in all remaining notifiers to be skipped when notifying a RouteStartedEvent.

Look at http://svn.apache.org/viewvc/camel/branches/camel-2.10.x/camel-core/src/main/java/org/apache/camel/util/EventHelper.java?revision=1340446&view=markup, line 237: There's a ""return"" which actually should be a ""continue"".

Note: CamelContextStoppingEvents are also affected.",,,,,,,,,,,,,,,,,,20/Sep/12 11:19;frank.schoenheit;EventHelperTest.java;https://issues.apache.org/jira/secure/attachment/12545885/EventHelperTest.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-22 16:55:43.632,,,no_permission,,Unknown,,,,,,,,,,,,241504,,,Sun Oct 21 18:16:57 UTC 2012,,,,,,,0|i028a7:,10943,,,,,,,,,20/Sep/12 11:19;frank.schoenheit;EventHelperTest.java contains a unit test exposing the problem.,"22/Sep/12 16:55;muellerc;Thanks for reporting Frank.
It's now fixed. Do you consider to test the current SNAPSHOT's to see whether it works for you?","25/Sep/12 08:02;frank.schoenheit;Will do, probably today. Thanks for fixing.","19/Oct/12 19:48;frank.schoenheit;Uhm, this ... ??slightly?? slipped for a number of reasons. Well, finally: It's fixed in 2.10.3-SNAPSHOT. Thank you.",20/Oct/12 09:40;muellerc;It's fixed in 2.10.2 which is already released.,21/Oct/12 18:16;frank.schoenheit;ops :),,,,,,,,,,,,,,,,,,,,,,,,
sftp component: Cannot acquire read lock for files in sub directories if property recursive=true and readLock=changed,CAMEL-5605,12607450,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,basssjm,basssjm,13/Sep/12 12:54,18/Sep/12 10:43,14/Mar/19 02:43,17/Sep/12 15:58,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,,,camel-ftp,,,,0,,,,,,"I use endpoint to consummer files from sftp:
<endpoint id=""sftp_server"" uri=""sftp://${server_path}?privateKeyFile=${sftp_key_path}&amp;localWorkDirectory=${tmp}&amp;idempotent=true&amp;idempotentRepository=#fileStore&amp;readLock=changed&amp;recursive=true&amp;filter=#myAntFilter&amp;fastExistsCheck=true"" />

And if file exist in the sub directory of ${server_path}, I get warning:
16:31:16,288 WARN  [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Cannot acquire read lock within 20000 millis. Will skip the file: GenericFile[qwe/rty/test.csv]


16:31:01,081 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Using fast exists to update file information for GenericFile[qwe/rty/test.csv]
16:31:01,082 TRACE [org.apache.camel.component.file.remote.SftpOperations] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) listFiles(inbox2/qwe/rty/test.csv)
16:31:01,148 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) List files inbox2/qwe/rty/test.csv found 1 files
16:31:01,149 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous last modified: 0, new last modified: 0
16:31:01,150 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous length: 0, new length: 0
16:31:01,151 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Exclusive read lock not granted. Sleeping for 5000 millis.


16:30:56,005 TRACE [org.apache.camel.component.file.remote.SftpConsumer] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Processing file: GenericFile[qwe/rty/test.csv]
16:30:56,007 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Waiting for exclusive read lock to file: GenericFile[qwe/rty/test.csv]
16:30:56,008 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Using fast exists to update file information for GenericFile[qwe/rty/test.csv]
16:30:56,010 TRACE [org.apache.camel.component.file.remote.SftpOperations] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) listFiles(inbox2/qwe/rty/test.csv)
16:30:56,078 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) List files inbox2/qwe/rty/test.csv found 1 files
16:30:56,079 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous last modified: -9223372036854775808, new last modified: 0
16:30:56,079 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous length: -9223372036854775808, new length: 0
16:30:56,080 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Exclusive read lock not granted. Sleeping for 5000 millis.",,,,,,,,,,,,,,,,,,17/Sep/12 15:20;basssjm;SftpChangedExclusiveReadLockStrategy.patch;https://issues.apache.org/jira/secure/attachment/12545428/SftpChangedExclusiveReadLockStrategy.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-17 15:58:30.548,,,no_permission,,Unknown,,,,,,,,,,,,241478,,,Mon Sep 17 15:58:30 UTC 2012,,,Patch Available,,,,0|i0284f:,10917,,,,,,,,,17/Sep/12 15:58;davsclaus;Thanks for the patch. I did the same for the regular ftp as the name returned is the local name.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
missing dependency to spring-web in camel-example-cxf-tomcat ,CAMEL-5472,12600365,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,26/Jul/12 19:16,26/Jul/12 19:35,14/Mar/19 02:43,26/Jul/12 19:28,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,,,examples,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,241344,,,2012-07-26 19:16:55.0,,,,,,,0|i027an:,10783,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow configuring dataCoding independend of alphabet,CAMEL-5455,12599351,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,18/Jul/12 21:41,07/Nov/14 10:54,14/Mar/19 02:43,19/Jul/12 21:18,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-smpp,,,,0,,,,,,"See
- http://camel.465427.n5.nabble.com/Datacoding-issue-td5715971.html
- http://camel.465427.n5.nabble.com/Datacoding-Alphabet-issue-in-SMPP-td5280997.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-07 10:54:43.952,,,no_permission,,Unknown,,,,,,,,,,,,241328,,,Fri Nov 07 10:54:43 UTC 2014,,,,,,,0|i02773:,10767,,,,,,,,,"18/Jul/12 21:50;muellerc;Now it's possible to configure the dataCoding independent from the alphabet.
I would like to back port this change also to the 2.9.x and 2.10.x branch because I considered the old behavior as bug. Because the dataCoding is now a separate option (with a default value) and not derived from the provided alphabet, this COULD break existing user code. Is this fine for you, if we add this (as potential breaking stuff) to the release notes and do the back port?","07/Nov/14 10:54;daniel.pocock;Just some observations about dataCoding and alphabet:

- alphabet (either the header or config value) is still being used exclusively when deciding which charset to use for converting the message body (possibly a String) to a byte array for the wire

- if both CamelSmppDataCoding and CamelSmppAlphabet headers are present, CamelSmppDataCoding is used in the SMPP message

- if neither header is present on the exchange, then the alphabet config value is ignored, the dataCoding config value (default 0) is chosen.

- data coding does not just contain alphabet details, it also contains data about message class.  If message class is specified, it clobbers the lower two bits of the alphabet.  This is a limitation of the protocol, not Camel.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SqsEndpoint can't retrieve existing queue url with visibility timeout different than default,CAMEL-5414,12596544,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,lpezet,lpezet,01/Jul/12 20:12,19/Sep/12 20:23,14/Mar/19 02:43,19/Sep/12 20:23,2.9.2,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-aws,,,,0,,,,,,"This would happen in 2 scenarios:
1. Queue already exists with vsibility timeout different than 30 seconds (say use AWS Console to create a queue and set a different visibility timeout). Using this queue as an endpoint and problem will occur
2. Queue DOES NOT already exist and is created by SqsEndpoint (createQueue). If ""defaultVisibilityTimeout"" configured, it will still work...the first time. But restarting the endpoint (or the whole camel app) and the problem will occur.",,,,,,,,,,,,,,,,,,01/Jul/12 20:15;lpezet;SqsEndpointTest.java;https://issues.apache.org/jira/secure/attachment/12534172/SqsEndpointTest.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-28 22:00:06.908,,,no_permission,,Novice,,,,,,,,,,,,241287,,,Wed Sep 19 20:23:05 UTC 2012,,,,,,,0|i026xz:,10726,,,,,,,,,"01/Jul/12 20:15;lpezet;This is the test which I think follows Amazon behavior and shows that getting the queue url with the current SqsEndpoint implementation is broken.
I'd be more than happy to provide the patch if someone could just check the test and give me the go :)
Maybe I missed something and it's not broken...","28/Aug/12 22:00;muellerc;I can confirm, this is an issue. Thanks for reporting!
Would you like to work on a patch? I think I could provide a fix by tomorrow...","05/Sep/12 19:55;muellerc;I committed a patch which fixed this behavior. The SQS endpoint will now list the existing queues and use the url of the existing queue *AND ITS ATTRIBUTES!* If the queues doesn't exist, we will create a new one with the provided attributes.
Is this also your expected behavior? Or should we also call 'setQueueAttributes' and update all of them if the queue already exists?","06/Sep/12 05:18;lpezet;Thanks a lot Christian. 
I would expect the endpoint to be setup as specified in the URI options, so I'd vote for setting the queue attributes when the queue already exists. 
What do you think?","06/Sep/12 21:52;muellerc;Yes, makes sense for me too. I will work on it in the next days.",19/Sep/12 20:23;muellerc;I updated the behavior as discussed.,,,,,,,,,,,,,,,,,,,,,,,,
camel-stream overwrites files instead of appending,CAMEL-5279,12556091,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,16/May/12 17:48,05/Jul/12 19:59,14/Mar/19 02:43,16/May/12 18:22,2.8.5,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-stream,,,,0,,,,,,"When a file stream is used with camel-stream, the file is not opened in append mode, therefore the file is overwritten with every message, ending up with just the last message, all others are lost.

This contrasts with the documented behavior.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,241152,,,2012-05-16 17:48:15.0,,,Patch Available,,,,0|i0263z:,10591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Forgot a space between hours and minutes in org/apache/camel/util/TimeUtils.java,CAMEL-5277,12555977,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,olifant1990,olifant1990,16/May/12 07:54,24/May/12 06:58,14/Mar/19 02:43,16/May/12 20:32,,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,0,space,spaces,TimeUtil,uptime,,"org/apache/camel/util/TimeUtils.java

in the printDuration method is something wrong on line 63 and 72.

63: s += "" "" + fmtI.format(minutes) + (minutes > 1 ? "" minutes"" : ""minute"");
has to be:
63: s += "" "" + fmtI.format(minutes) + (minutes > 1 ? "" minutes"" : "" minute"");

72: s += "" "" + fmtI.format(hours) + (hours > 1 ? "" hours"" : ""hour"");
has to be:
72: s += "" "" + fmtI.format(hours) + (hours > 1 ? "" hours"" : "" hour"");",all environments,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-16 20:29:11.48,,,no_permission,,,,,,,,,,,,,,241150,,,Thu May 24 06:58:09 UTC 2012,,,,,,,0|i0263j:,10589,,,,,,,,,"16/May/12 20:29;muellerc;Ronald, thanks for the patch.",21/May/12 08:28;olifant1990;Has this also been changed in Karaf? Because it says it has been copied?,22/May/12 22:08;muellerc;I will have a look at the Karat code base and provide a fix if needed.,23/May/12 21:58;muellerc;I created KARAF-1500 and attached a patch for it.,24/May/12 06:58;olifant1990;Thanks for fixing it!,,,,,,,,,,,,,,,,,,,,,,,,,
LDAP Component lose headers,CAMEL-5260,12554452,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,anacortes,anacortes,09/May/12 09:12,10/May/12 18:37,14/Mar/19 02:43,09/May/12 20:59,2.9.0,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-ldap,,,,0,ldap,,,,,"When we call to a LDAP endpoint, the result is returned in the Out body and we lose the IN headers (see http://camel.465427.n5.nabble.com/LDAP-Component-lose-headers-td5696602.html). 

A fix seems relatively easy. The solution could be add this line inside the process() method in LdapProducer.java
 exchange.getOut().setHeaders(exchange.getIn().getHeaders());",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-09 09:24:39.851,,,no_permission,,Novice,,,,,,,,,,,,238694,,,Thu May 10 18:37:56 UTC 2012,,,,,,,0|i025zr:,10572,,,,,,,,,"09/May/12 09:24;davsclaus;Do you want to try working on a patch, to fix this bug?
Likewise attachments should also be copied to preserve those.","09/May/12 20:59;muellerc;Until this fix is available in a version which is suitable for you, you can use a content enricher [1] as workaround.

[1] http://camel.apache.org/content-enricher.html","10/May/12 16:52;anacortes;Cool! You've done this really fast, i haven't had time to see how to create the patch :)","10/May/12 18:37;muellerc;But you are more than welcome to work on other issues ;-) [1]
Normally it's a good to let easy to resolve issues for new contributors, but because we considered this as a bug, I prefer to make sure it will be part of Camel 2.10.0 which we plan to release soon...

[1] http://camel.apache.org/contributing.html

Best,
Christian",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel 2.9.2 jetty component no longer works with Jetty 7,CAMEL-5227,12553070,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,snortasprocket,snortasprocket,27/Apr/12 00:19,30/Apr/12 13:57,14/Mar/19 02:43,27/Apr/12 05:36,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-jetty,,,,0,,,,,,"When attempting to create a camel-jetty endpoint in Camel 2.9.2, the following exception is thrown:
{noformat}
java.lang.NoSuchMethodError: org.eclipse.jetty.servlet.ServletContextHandler.addFilter(Lorg/eclipse/jetty/servlet/FilterHolder;Ljava/lang/String;Ljava/util/EnumSet;)V
at org.apache.camel.component.jetty.JettyHttpComponent.enableMultipartFilter(JettyHttpComponent.java:407)
    at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:325)
    at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148)
    at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
    at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1707)
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:1979)
    at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1934)
    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1862)
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1646)
    at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1533)
    at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1420)
    at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1388)
.
.
.
{noformat}

This appears to be a regression of a caused by the [this merge from trunk|https://fisheye6.atlassian.com/changelog/camel?cs=1307901], which I suspect requires Jetty 8 to be used.

Creating the endpoint under 2.9.1 works fine.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-27 05:15:15.459,,,no_permission,,Novice,,,,,,,,,,,,237019,,,Mon Apr 30 13:57:03 UTC 2012,,,,,,,0|i025sf:,10539,Regression,,,,,,,,27/Apr/12 05:15;davsclaus;What version of Jetty are you using?,"27/Apr/12 05:16;davsclaus;Its this ticket
https://issues.apache.org/jira/browse/CAMEL-5016",27/Apr/12 05:27;davsclaus;I have reverted rev 1307901 on the 2.9 branch so the API is compatible with Jetty 7 again. This is the version we support on the 2.9 branch.,"27/Apr/12 05:28;davsclaus;I am inclined to do the same on the Camel trunk as we are not supporting Jetty 8 currently. Jetty is hard to upgrade as many other projects depend on it, CXF, AMQ, Karaf etc.",27/Apr/12 05:36;davsclaus;Thanks for reporting. I have reverted the change on Camel trunk so Camel 2.10 is Jetty 7 API compatible again.,30/Apr/12 13:57;snortasprocket;Verified as fixed in 2.9.3-SNAPSHOT. Thank you!,,,,,,,,,,,,,,,,,,,,,,,,
HazelcastComponent.doStop bombing out,CAMEL-5218,12552693,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,henriqueo,henriqueo,25/Apr/12 17:40,25/Apr/12 22:26,14/Mar/19 02:43,25/Apr/12 22:26,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-hazelcast,,,,0,,,,,,"I am setting up an own hazelcast instance on HazelcastComponent, it is created by Spring,
the problem is when HazelcastComponent.doStop is called, a NullPointerException is throw, because
createOwnInstance is null.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-25 22:26:41.408,,,no_permission,,Unknown,,,,,,,,,,,,236816,,,Wed Apr 25 22:26:41 UTC 2012,,,,,,,0|i025qf:,10530,,,,,,,,,"25/Apr/12 22:26;muellerc;Hello Henrique,
thanks for reporting!
I have it fixed for Camel 2.9.3 and Camel 2.10.0. Camel 2.8.x doesn't have this problem.

Best,
Christian",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
If MyBatis experiences an error on commit (e.g. unique PK violation) it appears to hold the session open and cause DB writelock errors,CAMEL-5161,12550449,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,daubman,daubman,10/Apr/12 22:01,11/Apr/12 22:03,14/Mar/19 02:43,11/Apr/12 22:03,2.10.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-mybatis,,,,0,exception,mybatis,sql,,,"When MyBatis experiences an error committing a statement the session.close() is not called and the DB is caught in a writelock state until camel is exited.
I have not tested a fix yet, but I believe that if, in: camel/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java
session.commit() is placed in a try/catch block with session.close() in its finally it will ensure the session is closed even when MyBatis throws an exception during a commit.

One of the exceptions I've experienced this with is 'java.sql.BatchUpdateException' where a row was attempting to be inserted with a field that violated a table's unique index constraint.

I should be able to submit a patch later this week if necessary.",,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-11 22:03:19.625,,,no_permission,,Novice,,,,,,,,,,,,235313,,,Wed Apr 11 22:03:19 UTC 2012,,,,,,,0|i025dr:,10473,,,,,,,,,"11/Apr/12 22:03;muellerc;Thanks for reporting Aaron! I fixed it today (because we will start releasing Camel 2.8.5 and 2.9.2 tomorrow).

Best,
Christian",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BindyCsvDataFormat breaks for non-required fields when separator is a whitespacecharacter like tab.,CAMEL-5133,12548943,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,magnuspalmer,magnuspalmer,31/Mar/12 11:17,16/Apr/12 18:00,14/Mar/19 02:43,04/Apr/12 10:04,2.7.3,2.8.4,2.9.1,,,,,,,,,,2.10.0,,,,camel-bindy,,,,0,,,,,,"When the separator is a whitespacecharacter and the last two (or more) fields are not required and empty, the parsing fails.

The cause is this:
BindyCsvDataFormat.java

 138               // Read the line
 139              String line = scanner.nextLine().trim();

String.trim() trims whitespace characters as in Character.isWhitespace(separatorChar)

See also:
http://camel.465427.n5.nabble.com/Bindy-Having-trouble-with-the-required-field-tp5597196p5597196.html

I can provide testcases and patches if necessary.","Windows:
OS Name:                   Microsoft Windows 7 Enterprise
OS Version:                6.1.7601 Service Pack 1 Build 7601
OS Manufacturer:           Microsoft Corporation

SpringSource Tool Suite 
Version: 2.9.1.RELEASE
Build Id: 201203221000",,,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-03 06:24:11.27,,,no_permission,,Moderate,,,,,,,,,,,,234016,,,Mon Apr 16 18:00:51 UTC 2012,,,,,,,0|i0257r:,10446,,,,,,,,,"02/Apr/12 23:21;magnuspalmer;This actually works in trunk (2.10-SNAPSHOT).
Seem like a side-effect of another change, haven't figured it out yet. ",03/Apr/12 06:24;njiang;I think CAMEL-5018 fix the issue.,"03/Apr/12 08:23;magnuspalmer;Yes, that seems to be the one.
Should I close this as a ""duplicate"" and link to CAMEL-5018?","04/Apr/12 10:04;njiang;
It was fixed by CAMEL-5018.","04/Apr/12 10:05;njiang;@Magnus, I just marked this issue to be resolved.","04/Apr/12 10:05;njiang;@Magnus, I just marked this issue to be resolved.","16/Apr/12 18:00;magnuspalmer;CAMEK-5018 fixes this.
CAMEL-5180 created to get that fix backported into the 2.9.x branch.",,,,,,,,,,,,,,,,,,,,,,,
Download page does not include any hashes,CAMEL-5114,12547931,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,sebb@apache.org,sebb@apache.org,24/Mar/12 01:46,25/Mar/12 13:30,14/Mar/19 02:43,25/Mar/12 13:30,,,,,,,,,,,,,2.10.0,,,,website,,,,0,,,,,,Download pages should include either MD5 or SHA1 hashes (or both),,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-25 13:30:05.9,,,no_permission,,Unknown,,,,,,,,,,,,233028,,,Sun Mar 25 13:30:05 UTC 2012,,,,,,,0|i0253b:,10426,,,,,,,,,25/Mar/12 13:30;muellerc;Thanks for pointing this out. I added the MD5 and SHA1 checksum links to our download page.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bam is not thread safe and throws ConcurrentModificationException,CAMEL-5060,12545093,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,04/Mar/12 14:15,02/Jun/12 21:00,14/Mar/19 02:43,02/Jun/12 21:00,2.9.0,,,,,,,,,,,,2.10.0,2.9.3,,,camel-bam,,,,0,,,,,,"camel-bam is not thread safe and throws ConcurrentModificationException:

{noformat}
2012-03-04 14:36:39,528 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:261)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:173)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:132)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-11 07:22:21.011,,,no_permission,,Unknown,,,,,,,,,,,,230279,,,Sat Jun 02 20:59:47 UTC 2012,,,,,,,0|i024rb:,10372,,,,,,,,,"11/Apr/12 07:22;davsclaus;Christian do you have a test to reproduce the issue?
I ran camel-bam test and looked in the logs and no exception was thrown.
The fix could just be to use a ConcurrentMap, but would like a test to verify as well.","11/Apr/12 11:06;muellerc;I hit this issue, by switching to derby and/or updating the maven profiles which use a different JPA provider.
I will provide a patch whith which you can reproduce this exception later today.","27/Apr/12 22:18;muellerc;Sorry for my delayed response Claus. When you build the camel-bam component with the Eclipselink profile, you will get the exception:

{code}
$ cd components/camel-bam
$ mvn clean install -Peclipselink
{code}

you will get
{code}
2012-04-27 23:44:57,280 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:266)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:178)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
{code}","29/May/12 19:53;muellerc;I still get this exception, if I use the eclipselink profile:
{code}
2012-05-29 21:45:51,084 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
2012-05-29 21:45:51,086 [d #0 - seda://a] DEBUG TransactionTemplate            - Initiating transaction rollback on application exception
org.apache.camel.RuntimeCamelException: java.util.ConcurrentModificationException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1256)
	at org.apache.camel.bam.processor.BamProcessorSupport.onError(BamProcessorSupport.java:151)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:101)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	... 33 more
{code}",02/Jun/12 12:14;davsclaus;Can you try again?,"02/Jun/12 20:57;muellerc;This issue is solved. I will close this issue.

Now I get another exception (which I will track with another issue, if I cannot resolve it by myself in the next days):
{code}
2012-06-02 22:49:15,385 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: org.springframework.orm.jpa.JpaSystemException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null]); nested exception is javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null])
org.springframework.orm.jpa.JpaSystemException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null]); nested exception is javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null])
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)
	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)
	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)
	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)
	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)
	at org.apache.camel.bam.model.ActivityState.isActivity(ActivityState.java:82)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:124)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null])
	at org.eclipse.persistence.internal.jpa.EntityManagerImpl.flush(EntityManagerImpl.java:786)
	at org.eclipse.persistence.internal.jpa.EJBQueryImpl.performPreQueryFlush(EJBQueryImpl.java:1298)
	at org.eclipse.persistence.internal.jpa.EJBQueryImpl.executeReadQuery(EJBQueryImpl.java:434)
	at org.eclipse.persistence.internal.jpa.EJBQueryImpl.getResultList(EJBQueryImpl.java:742)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)
	... 46 more
Caused by: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
{code}","02/Jun/12 20:59;muellerc;And with the openjpa profile, I got some other exceptions:
{code}
2012-06-02 22:55:55,532 [main           ] DEBUG JpaTransactionManager          - Initiating transaction rollback after commit exception
org.springframework.orm.jpa.JpaSystemException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.; nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.
FailedObject: org.apache.camel.bam.model.ProcessDefinition@5106def2
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)
	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:471)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:147)
	at org.apache.camel.bam.ProcessBuilder.createActivityProcessor(ProcessBuilder.java:96)
	at org.apache.camel.bam.ActivityBuilder.createProcessor(ActivityBuilder.java:50)
	at org.apache.camel.bam.ActivityBuilder.getProcessor(ActivityBuilder.java:58)
	at org.apache.camel.bam.ProcessBuilder.populateRoutes(ProcessBuilder.java:170)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:616)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:285)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:216)
	at org.apache.camel.bam.BamRouteTest.setUp(BamRouteTest.java:62)
	at org.apache.camel.bam.MultipleActivitiesConcurrentlyTest.setUp(MultipleActivitiesConcurrentlyTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:74)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.
FailedObject: org.apache.camel.bam.model.ProcessDefinition@5106def2
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2337)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2174)
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1990)
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1514)
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:933)
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:570)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:467)
	... 46 more
Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: Column 'NAME'  cannot accept a NULL value. {prepstmnt 1033140423 INSERT INTO CAMEL_PROCESSDEFINITION (id, name) VALUES (?, ?) [params=?, ?]} [code=20000, state=23502]
FailedObject: org.apache.camel.bam.model.ProcessDefinition@5106def2
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4912)
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4878)
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:136)
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:78)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:143)
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushAndUpdate(BatchingPreparedStatementManagerImpl.java:79)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:99)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:87)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:550)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:106)
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:59)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:103)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:76)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:713)
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:131)
	... 54 more
Caused by: org.apache.openjpa.lib.jdbc.ReportingSQLException: Column 'NAME'  cannot accept a NULL value. {prepstmnt 1033140423 INSERT INTO CAMEL_PROCESSDEFINITION (id, name) VALUES (?, ?) [params=?, ?]} [code=20000, state=23502]
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:247)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:223)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.access$1000(LoggingConnectionDecorator.java:72)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:1162)
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:272)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1741)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:267)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:118)
	... 64 more
{code}",,,,,,,,,,,,,,,,,,,,,,,
camel-twitter feature is invalid,CAMEL-5022,12543410,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,20/Feb/12 22:18,21/Feb/12 17:43,14/Mar/19 02:43,21/Feb/12 17:43,2.10.0,,,,,,,,,,,,2.10.0,,,,camel-twitter,,,,0,,,,,,"{noformat}
christian-muellers-macbook-pro:camel cmueller$ cd platforms/karaf/
christian-muellers-macbook-pro:karaf cmueller$ mvn clean install -Pvalidate
...
[WARNING] Failed to validate feature camel-twitter
[WARNING] No export found to match com.google.appengine.api.urlfetch (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.twitter4j/2.2.5_1)
[WARNING] No export found to match twitter4j.internal.http.alternative (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.twitter4j/2.2.5_1)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,228656,,,Tue Feb 21 17:42:52 UTC 2012,,,,,,,0|i024in:,10333,,,,,,,,,21/Feb/12 17:42;muellerc;fixed by Willem with r1291623,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
path to xsd in spring.schemas not equivalent to path on http site,CAMEL-4902,12538491,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akudrevatych,akudrevatych,16/Jan/12 08:35,17/Jan/12 09:23,14/Mar/19 02:43,17/Jan/12 09:23,2.9.0,,,,,,,,,,,,,,,,camel-cxf,,,,0,,,,,,"in spring.schemas we have line
http\://camel.apache.org/schema/cxf/camel-cxf-2.9.0.xsd=schema/cxfEndpoint.xsd
but there isn't such file on http://camel.apache.org/schema/cxf/ only camel-cxf.xsd and camel-cxf-2.9.0-spring.xsd
please make it correct.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-16 09:27:32.435,,,no_permission,,Unknown,,,,,,,,,,,,223995,,,Tue Jan 17 09:23:12 UTC 2012,,,,,,,0|i023s7:,10214,,,,,,,,,"16/Jan/12 09:27;njiang;I just updated the camel.apache.org web site with right name of the camel-cxf.xsd.
I also moved the camel-cxf-2.9.0-blueprint.xsd to  http://camel.apache.org/schema/blueprint/cxf ",17/Jan/12 09:23;akudrevatych;thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validation of camel-websocket feature failed,CAMEL-4896,12538402,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,14/Jan/12 16:11,14/Jan/12 17:48,14/Mar/19 02:43,14/Jan/12 17:48,2.10.0,,,,,,,,,,,,2.10.0,,,,karaf,,,,0,,,,,,"{noformat}
Christian-Muellers-MacBook-Pro:camel cmueller$ cd platforms/karaf/
Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Commands
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ karaf ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/target
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ karaf ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ karaf ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ karaf ---
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ karaf ---
[INFO] 
[INFO] --- maven-install-plugin:2.3.1:install (default-install) @ karaf ---
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/pom.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/2.10-SNAPSHOT/karaf-2.10-SNAPSHOT.pom
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Commands 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ camel-karaf-commands ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ camel-karaf-commands ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ camel-karaf-commands ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ camel-karaf-commands ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-karaf-commands ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-karaf-commands ---
[INFO] Compiling 15 source files to /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-karaf-commands ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ camel-karaf-commands ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-karaf-commands ---
[INFO] Surefire report directory: /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
There are no tests to run.

Results :

Tests run: 0, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-bundle-plugin:2.3.4:bundle (default-bundle) @ camel-karaf-commands ---
[WARNING] Warning building bundle org.apache.camel.karaf:camel-karaf-commands:bundle:2.10-SNAPSHOT : Split package org/apache/karaf/util
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:org.apache.karaf.jaas.modules, Jar:org.apache.karaf.util]
Reference from     /Users/cmueller/.m2/repository/org/apache/karaf/org.apache.karaf.util/2.2.5/org.apache.karaf.util-2.2.5.jar
Classpath          [Jar:., Jar:camel-core, Jar:slf4j-api, Jar:org.apache.karaf.shell.console, Jar:jline, Jar:jansi, Jar:org.osgi.core, Jar:org.osgi.compendium, Jar:org.apache.karaf.jaas.modules, Jar:org.apache.karaf.jaas.config, Jar:org.apache.karaf.jaas.boot, Jar:org.apache.aries.blueprint, Jar:org.apache.aries.util, Jar:org.apache.aries.testsupport.unit, Jar:org.apache.aries.proxy.api, Jar:org.apache.felix.gogo.runtime, Jar:org.apache.karaf.util]
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-karaf-commands ---
[INFO] Checking legal files in: camel-karaf-commands-2.10-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.3.1:install (default-install) @ camel-karaf-commands ---
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target/camel-karaf-commands-2.10-SNAPSHOT.jar to /Users/cmueller/.m2/repository/org/apache/camel/karaf/camel-karaf-commands/2.10-SNAPSHOT/camel-karaf-commands-2.10-SNAPSHOT.jar
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/pom.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/camel-karaf-commands/2.10-SNAPSHOT/camel-karaf-commands-2.10-SNAPSHOT.pom
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.4:install (default-install) @ camel-karaf-commands ---
[INFO] Installing org/apache/camel/karaf/camel-karaf-commands/2.10-SNAPSHOT/camel-karaf-commands-2.10-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ apache-camel ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ apache-camel ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (filter) @ apache-camel ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] >>> features-maven-plugin:2.2.5:validate (validate) @ apache-camel >>>
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ apache-camel ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (filter) @ apache-camel ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] <<< features-maven-plugin:2.2.5:validate (validate) @ apache-camel <<<
[INFO] 
[INFO] --- features-maven-plugin:2.2.5:validate (validate) @ apache-camel ---
[INFO] == Preparing for validation ==
[INFO]  - getting list of system bundle exports
[INFO]  - getting list of provided bundle exports
[INFO]     scanning org.apache.camel.karaf:apache-camel:pom:2.10-SNAPSHOT for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.2.0:provided for exports
[INFO]     scanning org.ops4j.pax.logging:pax-logging-api:jar:1.5.3:provided for exports
[INFO]     scanning org.ops4j.pax.logging:pax-logging-service:jar:1.5.3:provided for exports
[INFO]     scanning log4j:log4j:jar:1.2.16:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.framework:jar:2.0.5:provided for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.2.0:provided for exports
[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.2.0:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.configadmin:jar:1.2.4:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.core:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.compendium:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.core:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:javax.servlet:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.foundation:jar:1.0.0:provided for exports
[INFO]     scanning junit:junit:jar:4.8.1:provided for exports
[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint:jar:0.3:provided for exports
[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:0.3:provided for exports
[INFO]     scanning org.slf4j:slf4j-api:jar:1.6.1:provided for exports
[INFO]     scanning org.apache.aries.testsupport:org.apache.aries.testsupport.unit:jar:0.3:provided for exports
[INFO]     scanning org.apache.aries.proxy:org.apache.aries.proxy.api:jar:0.3:provided for exports
[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:0.3:provided for exports
[INFO]     scanning org.apache.karaf.shell:org.apache.karaf.shell.console:jar:2.2.5:provided for exports
[INFO]     scanning org.sonatype.jline:jline:jar:2.5:provided for exports
[INFO]     scanning org.fusesource.jansi:jansi:jar:1.7:provided for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.2.0:provided for exports
[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.2.0:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.modules:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.config:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.karaf:org.apache.karaf.util:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint:jar:0.3:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.gogo.runtime:jar:0.10.0:provided for exports
[INFO]  - populating repositories with Karaf core features descriptors
[INFO]  - validation of file:/Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml
[INFO] == Analyzing feature descriptor ==
[INFO]  - read /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml
[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/standard/2.2.5/xml/features
[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/standard/2.2.5/xml/features
[INFO]     scanning feature karaf-framework for exports
[INFO]     scanning feature spring for exports
[INFO]     scanning feature spring-web for exports
[INFO]     scanning feature spring for exports
[INFO]     scanning feature spring-aspects for exports
[INFO]     scanning feature spring-dm for exports
[INFO]     scanning feature spring-dm-web for exports
[INFO]     scanning feature spring-instrument for exports
[INFO]     scanning feature spring-jdbc for exports
[INFO]     scanning feature spring-jms for exports
[INFO]     scanning feature spring-struts for exports
[INFO]     scanning feature spring-test for exports
[INFO]     scanning feature spring-orm for exports
[INFO]     scanning feature spring-oxm for exports
[INFO]     scanning feature spring-tx for exports
[INFO]     scanning feature spring-web for exports
[INFO]     scanning feature spring-web-portlet for exports
[INFO]     scanning feature wrapper for exports
[INFO]     scanning feature obr for exports
[INFO]     scanning feature config for exports
[INFO]     scanning feature jetty for exports
[INFO]     scanning feature http for exports
[INFO]     scanning feature war for exports
[INFO]     scanning feature kar for exports
[INFO]     scanning feature webconsole-base for exports
[INFO]     scanning feature webconsole for exports
[INFO]     scanning feature ssh for exports
[INFO]     scanning feature management for exports
[INFO]     scanning feature eventadmin for exports
[INFO]     scanning feature jasypt-encryption for exports
[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/enterprise/2.2.5/xml/features
[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/enterprise/2.2.5/xml/features
[INFO]     scanning feature transaction for exports
[INFO]     scanning feature jpa for exports
[INFO]     scanning feature jndi for exports
[INFO]     scanning feature application-without-isolation for exports
[INFO]  - validation of mvn:org.apache.cxf.karaf/apache-cxf/2.5.1/xml/features
[INFO]  - adding 12 known features from mvn:org.apache.cxf.karaf/apache-cxf/2.5.1/xml/features
[INFO]     scanning feature activemq for exports
[INFO]     scanning feature cxf-specs for exports
[INFO]     scanning feature cxf-jaxb for exports
[INFO]     scanning feature cxf-abdera for exports
[INFO]     scanning feature opensaml for exports
[INFO]     scanning feature wss4j for exports
[INFO]     scanning feature cxf-saaj-impl for exports
[INFO]     scanning feature cxf-war-java5 for exports
[INFO]     scanning feature cxf for exports
[INFO]     scanning feature cxf-sts for exports
[INFO]     scanning feature cxf-wsn-api for exports
[INFO]     scanning feature cxf-wsn for exports
[INFO]  - validation of mvn:org.jclouds.karaf/jclouds-karaf/1.2.2/xml/features
[INFO]  - adding 46 known features from mvn:org.jclouds.karaf/jclouds-karaf/1.2.2/xml/features
[INFO]     scanning feature guice for exports
[INFO]     scanning feature jclouds for exports
[INFO]     scanning feature jclouds-compute for exports
[INFO]     scanning feature jclouds-api-filesystem for exports
[INFO]     scanning feature jclouds-api-eucalyptus for exports
[INFO]     scanning feature jclouds-api-elasticstack for exports
[INFO]     scanning feature jclouds-api-vcloud for exports
[INFO]     scanning feature jclouds-driver-jsch for exports
[INFO]     scanning feature jclouds-driver-sshj for exports
[INFO]     scanning feature jclouds-driver-slf4j for exports
[INFO]     scanning feature jclouds-driver-log4j for exports
[INFO]     scanning feature jclouds-driver-bouncycastle for exports
[INFO]     scanning feature jclouds-aws-cloudwatch for exports
[INFO]     scanning feature jclouds-aws-ec2 for exports
[INFO]     scanning feature jclouds-aws-s3 for exports
[INFO]     scanning feature jclouds-azureblob for exports
[INFO]     scanning feature jclouds-bluelock-vcloud-zone01 for exports
[INFO]     scanning feature jclouds-cloudfiles-uk for exports
[INFO]     scanning feature jclouds-cloudfiles-us for exports
[INFO]     scanning feature jclouds-cloudloadbalancers-us for exports
[INFO]     scanning feature jclouds-cloudonestorage for exports
[INFO]     scanning feature jclouds-cloudserver-uk for exports
[INFO]     scanning feature jclouds-cloudserver-us for exports
[INFO]     scanning feature jclouds-cloudsigma-zrh for exports
[INFO]     scanning feature jclouds-elastichosts-lon-b for exports
[INFO]     scanning feature jclouds-elastichosts-lon-p for exports
[INFO]     scanning feature jclouds-elastichosts-sat-p for exports
[INFO]     scanning feature jclouds-eucalyptus-s3 for exports
[INFO]     scanning feature jclouds-eucalyptus-ec2 for exports
[INFO]     scanning feature jclouds-gogrid for exports
[INFO]     scanning feature jclouds-go2cloud-jhb1 for exports
[INFO]     scanning feature jclouds-greenhousedata-element-vcloud for exports
[INFO]     scanning feature jclouds-ninefold-storage for exports
[INFO]     scanning feature jclouds-openhosting-east1 for exports
[INFO]     scanning feature jclouds-rimuhosting for exports
[INFO]     scanning feature jclouds-savvis-symphonyvpdc for exports
[INFO]     scanning feature jclouds-serverlove-z1-man for exports
[INFO]     scanning feature jclouds-skalicloud-sdg-my for exports
[INFO]     scanning feature jclouds-softlayer for exports
[INFO]     scanning feature jclouds-slicehost for exports
[INFO]     scanning feature jclouds-synaptic-storage for exports
[INFO]     scanning feature jclouds-stratogen-vcloud-mycloud for exports
[INFO]     scanning feature jclouds-trmk-ecloud for exports
[INFO]     scanning feature jclouds-trmk-vcloudexpress for exports
[INFO]     scanning feature jclouds-services for exports
[INFO]     scanning feature jclouds-commands for exports
[INFO] == Validating feature descriptor ==
[INFO]  - validating 105 features
[INFO]  - step 1: Checking if all artifacts exist
[INFO]     OK: all 500 OSGi bundles have been found
[INFO]  - step 2: Checking if all imports for bundles can be resolved
[INFO]     OK: imports resolved for xml-specs-api
[INFO]     OK: imports resolved for camel-core
[INFO]     OK: imports resolved for camel-spring
[INFO]     OK: imports resolved for camel
[INFO]     OK: imports resolved for camel-blueprint
[INFO]     OK: imports resolved for camel-test
[INFO]     OK: imports resolved for camel-context
[INFO]     OK: imports resolved for camel-cxf
[INFO]     OK: imports resolved for camel-cache
[INFO]     OK: imports resolved for camel-castor
[INFO]     OK: imports resolved for camel-crypto
[INFO]     OK: imports resolved for camel-http
[INFO]     OK: imports resolved for camel-http4
[INFO]     OK: imports resolved for camel-mina
[INFO]     OK: imports resolved for camel-mina2
[INFO]     OK: imports resolved for camel-jetty
[INFO]     OK: imports resolved for camel-servlet
[INFO]     OK: imports resolved for camel-jms
[INFO]     OK: imports resolved for camel-jmx
[INFO]     OK: imports resolved for camel-ahc
[INFO]     OK: imports resolved for camel-amqp
[INFO]     OK: imports resolved for camel-atom
[INFO]     OK: imports resolved for camel-aws
[INFO]     OK: imports resolved for camel-bam
[INFO]     OK: imports resolved for camel-bean-validator
[INFO]     OK: imports resolved for camel-bindy
[INFO]     OK: imports resolved for camel-cometd
[INFO]     OK: imports resolved for camel-csv
[INFO]     OK: imports resolved for camel-dozer
[INFO]     OK: imports resolved for camel-eventadmin
[INFO]     OK: imports resolved for camel-exec
[INFO]     OK: imports resolved for camel-flatpack
[INFO]     OK: imports resolved for camel-freemarker
[INFO]     OK: imports resolved for camel-ftp
[INFO]     OK: imports resolved for camel-guice
[INFO]     OK: imports resolved for camel-groovy
[INFO]     OK: imports resolved for camel-hazelcast
[INFO]     OK: imports resolved for camel-hawtdb
[INFO]     OK: imports resolved for camel-hdfs
[INFO]     OK: imports resolved for camel-hl7
[INFO]     OK: imports resolved for camel-ibatis
[INFO]     OK: imports resolved for camel-irc
[INFO]     OK: imports resolved for camel-jackson
[INFO]     OK: imports resolved for camel-jasypt
[INFO]     OK: imports resolved for camel-jaxb
[INFO]     OK: imports resolved for camel-jclouds
[INFO]     OK: imports resolved for camel-jcr
[INFO]     OK: imports resolved for camel-jing
[INFO]     OK: imports resolved for camel-jibx
[INFO]     OK: imports resolved for camel-jdbc
[INFO]     OK: imports resolved for camel-josql
[INFO]     OK: imports resolved for camel-jpa
[INFO]     OK: imports resolved for camel-jxpath
[INFO]     OK: imports resolved for camel-juel
[INFO]     OK: imports resolved for camel-kestrel
[INFO]     OK: imports resolved for camel-krati
[INFO]     OK: imports resolved for camel-ldap
[INFO]     OK: imports resolved for camel-lucene
[INFO]     OK: imports resolved for camel-mail
[INFO]     OK: imports resolved for camel-msv
[INFO]     OK: imports resolved for camel-mvel
[INFO]     OK: imports resolved for camel-mybatis
[INFO]     OK: imports resolved for camel-nagios
[INFO]     OK: imports resolved for camel-netty
[INFO]     OK: imports resolved for camel-ognl
[INFO]     OK: imports resolved for camel-paxlogging
[INFO]     OK: imports resolved for camel-printer
[INFO]     OK: imports resolved for camel-protobuf
[INFO]     OK: imports resolved for camel-quartz
[INFO]     OK: imports resolved for camel-quickfix
[INFO]     OK: imports resolved for camel-restlet
[INFO]     OK: imports resolved for camel-rmi
[INFO]     OK: imports resolved for camel-routebox
[INFO]     OK: imports resolved for camel-script
[INFO]     OK: imports resolved for camel-ruby
[INFO]     OK: imports resolved for camel-rss
[INFO]     OK: imports resolved for camel-saxon
[INFO]     OK: imports resolved for camel-scala
[INFO]     OK: imports resolved for camel-script-jruby
[INFO]     OK: imports resolved for camel-script-javascript
[INFO]     OK: imports resolved for camel-script-groovy
[INFO]     OK: imports resolved for camel-sip
[INFO]     OK: imports resolved for camel-shiro
[INFO]     OK: imports resolved for camel-smpp
[INFO]     OK: imports resolved for camel-snmp
[INFO]     OK: imports resolved for camel-soap
[INFO]     OK: imports resolved for camel-solr
[INFO]     OK: imports resolved for camel-spring-integration
[INFO]     OK: imports resolved for camel-spring-javaconfig
[INFO]     OK: imports resolved for camel-spring-security
[INFO]     OK: imports resolved for camel-spring-ws
[INFO]     OK: imports resolved for camel-sql
[INFO]     OK: imports resolved for camel-stax
[INFO]     OK: imports resolved for camel-stream
[INFO]     OK: imports resolved for camel-string-template
[INFO]     OK: imports resolved for camel-syslog
[INFO]     OK: imports resolved for camel-tagsoup
[INFO]     OK: imports resolved for camel-twitter
[INFO]     OK: imports resolved for camel-velocity
[WARNING] Failed to validate feature camel-websocket
[WARNING] No export found to match org.eclipse.jetty.websocket;version=""[7.0,8)"" (imported by mvn:org.apache.camel/camel-websocket/2.10-SNAPSHOT)
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.190s]
[INFO] Camel :: Platforms :: Apache Karaf :: Commands .... SUCCESS [8.200s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [3.677s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 15.020s
[INFO] Finished at: Sat Jan 14 17:09:24 CET 2012
[INFO] Final Memory: 16M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.5:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: 1 unresolved imports in feature camel-websocket -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :apache-camel
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,223908,,,Sat Jan 14 17:45:00 UTC 2012,,,,,,,0|i023rb:,10210,,,,,,,,,"14/Jan/12 17:45;muellerc;I fixed this by adding explicitly the needed dependency from Jetty. I asked on the dev@karaf list why this dependency was not included (still not included) in the Karaf 2.2.x branch, but it's included in the current trunk.
I added a TODO in our features file to remove the dependency when it's provided in the Jetty feature by Karaf.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Attachments is not propagated in the template components such as camel-stringtemplate,CAMEL-4870,12537547,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,davsclaus,davsclaus,06/Jan/12 17:17,07/Jan/12 14:49,14/Mar/19 02:43,07/Jan/12 14:49,2.7.3,,,,,,,,,,,,2.10.0,2.7.5,2.8.4,2.9.1,camel-freemarker,camel-stringtemplate,camel-velocity,,0,,,,,,"In the StringTemplateEndpoint we should propagate attachments as well, currently its only the headers.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-07 12:31:25.34,,,no_permission,,Unknown,,,,,,,,,,,,223053,,,Sat Jan 07 14:48:40 UTC 2012,,,,,,,0|i023lj:,10184,,,,,,,,,"06/Jan/12 17:18;davsclaus;See nabble
http://camel.465427.n5.nabble.com/How-to-send-a-templated-mail-with-attachment-tp5125167p5125167.html",07/Jan/12 12:31;muellerc;Committed into trunk with r1228603,07/Jan/12 12:37;muellerc;Committed into branch 2.9.x with r1228606,07/Jan/12 14:42;muellerc;Committed into branch 2.8.x with r1228623,07/Jan/12 14:48;muellerc;Committed into branch 2.7.x with r1228626,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ognl featues doesn't work,CAMEL-4811,12536084,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,21/Dec/11 20:49,22/Dec/11 17:51,14/Mar/19 02:43,22/Dec/11 17:51,2.9.0,,,,,,,,,,,,2.9.0,,,,osgi,,,,0,,,,,,"Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/features
karaf@root> features:install camel-ognl 
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.ognl/3.0.2_1 in feature(s) camel-ognl-2.9.0: The bundle ""org.apache.servicemix.bundles.ognl_3.0.2.1 [59]"" could not be resolved. Reason: Missing Constraint: Import-Package: javassist; version=""[3.11.0,4.0.0)""

In our parent/pom.xml we define
<javassist-bundle-version>3.9.0.GA_1</javassist-bundle-version>
which doesn't fit the import range",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,221767,,,Wed Dec 21 22:02:57 UTC 2011,,,,,,,0|i0238f:,10125,,,,,,,,,21/Dec/11 21:55;muellerc;I will upgrade to javassist bundle 3.12.1.GA_2 which is the latest one SMX provides,21/Dec/11 22:02;muellerc;We do not have this problem in camel-2.8.x,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-eventadmin do not work,CAMEL-4810,12536071,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,21/Dec/11 19:11,22/Dec/11 18:28,14/Mar/19 02:43,22/Dec/11 17:52,2.9.0,,,,,,,,,,,,2.8.4,2.9.0,,,osgi,,,,0,,,,,,"Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/features
karaf@root> features:install camel-eventadmin
Error executing command: Could not start bundle mvn:org.apache.camel/camel-eventadmin/2.9.0 in feature(s) camel-eventadmin-2.9.0: Unresolved constraint in bundle org.apache.camel.camel-eventadmin [59]: Unable to resolve 59.0: missing requirement [59.0] package; (&(package=org.osgi.service.event)(version>=1.2.0)(!(version>=2.0.0)))

We have to install the feature eventadmin (from Karaf) first",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,221754,,,2011-12-21 19:11:26.0,,,,,,,0|i02387:,10124,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Calling the camel-smpp component results in a NullPointerException,CAMEL-4695,12532007,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,18/Nov/11 22:32,18/Jul/13 19:20,14/Mar/19 02:43,18/Nov/11 22:37,,,,,,,,,,,,,2.9.0,,,,camel-smpp,,,,0,,,,,,"When the camel-smpp component is called to submit a SMS, a NullPointerException is thrown:

{code:title=Stacktrace}
Caused by: java.lang.NullPointerException
       at org.jsmpp.util.PDUByteBuffer.appendAll(PDUByteBuffer.java:182)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.util.DefaultComposer.submitSm(DefaultComposer.java:238)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.DefaultPDUSender.sendSubmitSm(DefaultPDUSender.java:196)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.SynchronizedPDUSender.sendSubmitSm(SynchronizedPDUSender.java:192)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.SubmitSmCommandTask.executeTask(SubmitSmCommandTask.java:86)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:248)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.SMPPSession.submitShortMessage(SMPPSession.java:320)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.apache.camel.component.smpp.SmppSubmitSmCommand.execute(SmppSubmitSmCommand.java:56)
       ... 62 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-18 06:37:42.337,,,no_permission,,Unknown,,,,,,,,,,,,217743,,,Thu Jul 18 19:20:00 UTC 2013,,,,,,,0|i022iv:,10010,,,,,,,,,"18/Jul/13 06:37;rusbob;Christian, how this issue has been resolved? Can I patch *2.8.0* version?",18/Jul/13 06:40;davsclaus;Yes you can patch the code yourself. Click the Source tab on this ticket to see the code changes.,"18/Jul/13 18:06;rusbob;Ok, but the fix has been done in *new* [SmppSubmitSmCommand file|https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java?r2=1203887&r1=1179457]

Where do I add this fix in [2.8.0 version|https://fisheye6.atlassian.com/browse/~br=camel-2.8.x/camel/branches/camel-2.8.x/components/camel-smpp/src/main/java/org/apache/camel/component/smpp]?","18/Jul/13 19:20;muellerc;It's easy if you have a look at the change set Claus mentioned [1]. The fix is also back ported to the camel-2.8.x maintenance branch...

[1] https://fisheye6.atlassian.com/changelog/camel?cs=1165993",,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-jms - When useMessageIDAsCorrelationID an timeout occurs due no reply message, then old correlationID is not evicted from dynamic reply selector",CAMEL-4530,12526371,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Oct/11 12:21,25/Oct/11 11:36,14/Mar/19 02:43,09/Oct/11 12:50,2.6.0,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-jms,,,,0,,,,,,"If you use both fixed reply queues and have useMessageIDAsCorrelationID=true, then the dynamic MessageSelectorCreator may not evict the correlationID causing the JMSMessage selector to keep growing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,50938,,,2011-10-09 12:21:22.0,,,,,,,0|i021if:,9846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel flatpack component drops all headers from the original message,CAMEL-4510,12525601,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,dragisak,dragisak,03/Oct/11 23:30,23/Oct/11 10:28,14/Mar/19 02:43,23/Oct/11 10:27,2.8.1,,,,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-flatpack,,,,0,flatpack,,,,,"In the simple example:

{code}
from(""file:/foo.csv"")
   .setHeader(""MyHeader"", constant(""Hello""))
   .to(""flatpack:foo"");

from(""flatpack:foo"")
   .to(""bean:importer"");
{code}

Header ""MyHeader"" is not being passed to the bean in the second route.

Looking at Camel Flatpack code I see that in {{FixedLengthEndpoint.processDataSet}} it creates an exchange object from scratch and, thus, looses any incoming headers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-04 06:36:22.781,,,no_permission,,Unknown,,,,,,,,,,,,43965,,,Sun Oct 23 10:28:47 UTC 2011,,,,,,,0|i021dr:,9825,,,,,,,,,"04/Oct/11 06:36;muellerc;Hello Dragisa!
Thanks for reporting. Do you consider to provide a patch for it?
Best,
Christian","04/Oct/11 16:57;dragisak;If I get some time, I'll try to submit a patch. Currently I have a workaround for this.",21/Oct/11 22:32;muellerc;Committed to trunk with revision r1187582,23/Oct/11 10:11;muellerc;Committed to branch 2.8.x with revision r1187857,23/Oct/11 10:21;muellerc;Committed to branch 2.7.x with revision r1187859,"23/Oct/11 10:28;muellerc;Hello Dragisa!
It would be great if you could test whether this patch fix your issue.
Best,
Christian",,,,,,,,,,,,,,,,,,,,,,,,
dataCoding not working properly in camel-smpp,CAMEL-4491,12524817,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,ljb,ljb,27/Sep/11 08:14,25/Oct/11 13:11,14/Mar/19 02:43,25/Oct/11 13:11,2.7.0,2.8.0,2.9.0,,,,,,,,,,2.9.0,,,,camel-smpp,,,,0,,,,,,"This is related to CAMEL-3093.

The way the dataCoding option works is incorrect (or at least very confusing). After reading the documentation I was under the impression that the given value would be used in the data_coding-part of the submit_sm PDU-packets, but this is not the case. When 0 is given as dataCoding 0x11 (hexadecimal) is sent in the PDU-packets. If 4 is specified 0x15 is sent, and if 8 is specified then 0x19 is sent. This is caused in SmppProducer by the use of the constructor with several parameters:
{code}
new GeneralDataCoding(
        false,
        true,
        MessageClass.CLASS1,
        Alphabet.valueOf(submitSm.getDataCoding()))
{code}
It constructs a DCS-value as defined in the GSM 03.38 specification, not as specified in the SMPP specification. 0x11 is for example a valid DCS-value in GSM 03.38, but is reserved in SMPP. I think that it would be better and more logical if the constructor with one parameter was used instead:
{code}
new GeneralDataCoding(submitSm.getDataCoding())
{code}

This is more flexibal (DCS-values can still be created manually) and is a better default value (0 instead of 0x11). With my SMS-center (this probably varies between centers though) a data_coding of 0x11 forces me to do the 7-bit GSM decoding myself. When 0 is specified (or 3) all I have to do is to pass it ISO-8859-1 encoded bytes.",,,,,,,,,,,,,CAMEL-4086,,,,,27/Sep/11 08:15;ljb;patch.txt;https://issues.apache.org/jira/secure/attachment/12496648/patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-21 21:37:56.771,,,no_permission,,Unknown,,,,,,,,,,,,17190,,,Tue Oct 25 13:10:35 UTC 2011,,,Patch Available,,,,0|i0219b:,9805,,,,,,,,,"21/Oct/11 21:37;muellerc;Hello Jonas!

A few days ago I committed a patch to this component to allow sending multilingual and multipart messages: [CAMEL-4086|https://issues.apache.org/jira/browse/CAMEL-4086]

It would be great if you could test whether this fix also your issue. You can find our latest SNAPSHOTS [here|https://repository.apache.org/content/repositories/snapshots/]. I still have to update the WIKI pages which should be done after the weekend.

Best,
Christian","25/Oct/11 09:08;ljb;I have now done some testing with the SNAPSHOT-version and so far it works great. With the new version, the only thing I have to do is to pass it strings. Even with the default values I don't have to do any extra work myself.","25/Oct/11 13:10;muellerc;Jonas, thank you very much. I really appreciate it.
I will close this issue, because it looks like it's solved with CAMEL-4086. Feel free to reopen this issue or open a new one if you have problems again.",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 sends out a 'http4' GET request,CAMEL-4489,12524630,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,fedexp,fedexp,26/Sep/11 13:23,25/Oct/11 11:35,14/Mar/19 02:43,09/Oct/11 14:52,,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-http,,,,0,http,http4,,,,"When I try to do : from(""http4://www.google.com/"").to(""mock:results"") using apache camel-http4 scheme, a GET request is being sent out with 'http4' as the protocol - my proxy server fails to understand this as a protocol. 

This is what the log looks like: 

  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (RequestAddCookies.java132) - CookieSpec selected: best-match
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (RequestAuthCache.java75) - Auth cache not set in the context
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultRequestDirector.java643) - Attempt 1 to execute request
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java264) - Sending request: GET http4://www.google.com/ HTTP/1.1
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""GET http4://www.google.com/ HTTP/1.1[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""Host: www.google.com[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""Proxy-Connection: Keep-Alive[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java268) - >> GET http4://www.google.com/ HTTP/1.1
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java271) - >> Host: www.google.com
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java271) - >> Proxy-Connection: Keep-Alive
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - << ""HTTP/1.1 502 Proxy Error 



","Windows XP, JDK 1.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-27 08:06:47.489,,,no_permission,,Moderate,,,,,,,,,,,,779,,,Wed Sep 28 08:43:36 UTC 2011,,,,,,,0|i0218v:,9803,,,,,,,,,"26/Sep/11 20:39;fedexp;I checked the same code from a non-proxy env and it seems to work fine. 
In my proxy environment however, ethereal trace tells me that a request for http4://www.google.com is being sent to the proxy!","27/Sep/11 08:06;davsclaus;Josh what are you trying to archive?

from(""http4:xxx"") will repeatable invoke a HTTP GET to that external url, and route the response as a message. What is your use case for doing that? ","27/Sep/11 10:18;fedexp;Claus, Did you mean to ask - what am I trying to achieve? 
I am trying to read from a streaming http url... I know polling it won't help coz, I would need to have a connection open and kept-alive (I'll have to find a way around it). 

The issue here is that camel is sending a ""GET *http4*://www.google.com"" instead of ""GET *http*://www.google.com"" - this happens only when I use it in my proxy environment. I am not sure what the issue is, coz httpclient 4 works perfectly fine when used standalone, using the same proxy.","27/Sep/11 10:22;fedexp;I can confirm it coz, I've used a packet sniffer  (ethereal) and observed the GET request and it is indeed a http4 protocol and not http - I can attach the trace if you want.","27/Sep/11 10:47;davsclaus;I think Willem have fixed this on trunk. There is a commit
http://svn.apache.org/viewvc?rev=1176274&view=rev","27/Sep/11 10:54;njiang;Hi Josh,

Can you try the patch that I just committed? you can merge it into the camel version that you are using without any trouble :).
I will merge the patch to the other branch of camel.

Willem
","27/Sep/11 12:28;njiang;committed the patch into trunk, camel-2.8.x, camel-2.7.x.","27/Sep/11 16:04;fedexp;I tried with the patch, it does not work. I did something to make it work, but I'll leave it to you to figure out what the issue is.

I see the changes you've made, but that doesn't change what is returned here:

In HttpPollingConsumer.java:

{code} protected HttpRequestBase createMethod() 
   {
        String uri = endpoint.getEndpointUri();
        return new HttpGet(uri);
    }
{code}

I had a debug point here on String uri=endpoint.getEndpointUri(); and I noticed that it pointed to 'http4://www.google.com' and to make it work, I changed the uri to ""http://www.google.com"" (during debug) and it returned the correct response (HTTP 200). 

","27/Sep/11 16:06;fedexp;what you really need to fix, I believe, is the EndPoint URI. It cannot contain a http4 instead of http as protocol.
Your changes were made to HttpEndPoint and HttpProducer files, but somehow my code never breaks in HttpProducer, instead it goes to HttpPollingConsumer all the time - may be you should look here to fix this issue?","28/Sep/11 08:04;njiang;Hi Josh,

I'm sorry I didn't check all the path that could effect the http method url.
After went through the code and I found a way to verify my change and find a minor issue of http component.

I will commit a better patch shortly.

Willem","28/Sep/11 08:12;fedexp;Willem, 

Thank you. I will look forward to your patch.","28/Sep/11 08:15;fedexp;I've an out-of-context question here... I understand that by default the HttpConsumer polls the target website, but how do I make it work in a 'http streaming' scenario? For instance, say you are connected to a twitter stream, which keeps pushing chunked data on a http connection that you would keep open, how would I handle this scenario using camel? ","28/Sep/11 08:43;njiang;Hi Josh,

I don't think current HttpConsumer support this 'http streaming' out of box.
You may take a look at the camel-cometd component to see if it can do the job for you.

Willem",,,,,,,,,,,,,,,,,
MockEndpoint should reset defaultProcessor,CAMEL-4487,12524545,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,25/Sep/11 00:56,25/Oct/11 11:36,14/Mar/19 02:43,25/Sep/11 08:10,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-core,,,,0,,,,,,Thanks for the patch. I added unit test as well.,,,,,,,,,,,,,,,,,,25/Sep/11 00:56;szhemzhitsky;MockEndpoint.patch;https://issues.apache.org/jira/secure/attachment/12496375/MockEndpoint.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-25 08:10:27.225,,,no_permission,,Unknown,,,,,,,,,,,,3342,,,Sun Sep 25 08:10:27 UTC 2011,,,Patch Available,,,,0|i0218f:,9801,,,,,,,,,25/Sep/11 08:10;davsclaus;Thanks for the patch. I added an unit test as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RuntimeCamelException ""Ambiguous Parameter Mapping"" must not be thrown, if there are parameters of the same type but with different QNames in ServiceInterfaceStrategy",CAMEL-4480,12524405,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ojelinski,ojelinski,23/Sep/11 11:58,26/Oct/11 17:02,14/Mar/19 02:43,08/Oct/11 11:54,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-soap,,,,0,,,,,,"In different WebMethods I have parameters of the same type, but with different QNames. The following if-clause (in ServiceInterfaceStrategy.analyzeServiceInterface(..)) throws an exeption in these cases (thrown if NOT QNameOfMethod1 equals QNameOfMethod2), but it should on the contrary throw an exception if the QNames ARE equal:

                if (inTypeNameToQName.containsKey(ti.getTypeName())
                    && (!(ti.getTypeName().equals(""javax.xml.ws.Holder"")))
                    && (!(inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))) {
                    throw new RuntimeCamelException(""Ambiguous parameter mapping. The type [ ""
                                                    + ti.getTypeName()
                                                    + "" ] is already mapped to a QName in this context."");
                }

The ""NOT"" must be deleted:

...
&& (inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))
...
",,,,,,,,,,,,,,,,,,04/Oct/11 06:49;rnewcomb;camel-4480-trunk.patch;https://issues.apache.org/jira/secure/attachment/12497593/camel-4480-trunk.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-01 08:25:11.469,,,no_permission,,Novice,,,,,,,,,,,,41784,,,Wed Oct 26 17:02:18 UTC 2011,,,,,,,0|i0216v:,9794,,,,,,,,,01/Oct/11 08:25;davsclaus;Can you attach an unit test that reproduces the issue?,"04/Oct/11 06:49;rnewcomb;The attached patch expands the multi-part unit test suite to demonstrates the behavior described in this issue.  

The patch also provides a potential fix for the issue. 

Note that the solution recommended in the original issue description will not work. That solution would cause parameters that are reused across multiple web methods to be rejected with an error.   

An alternative solution (as implemented in the patch) is as follows:

1. Change the behavior of the ServiceInterfaceStrategy to log a WARN message in the case where a new QName mapping would override an existing  mapping.  The new mapping will be ignored after the warning. 

2. Move the QName + dataType uniqueness enforcement to the @WebMethod level

The warning is an appropriate alternative to the current error. The ServiceInterfaceStrategy.findQNameForSoapActionOrType(…) operation _could_ return an unexpected value when a dataType is reused within the interface with a different QName; however, this risk is fully mitigated when calling findQNameForSoapActionOrType(…) with a valid soapAction that uniquely identifies the target @WebMethod on the service. At that point the MethodInfo class is queried for the type-to-QName mapping for the method, and the results will be as expected.","04/Oct/11 06:54;rnewcomb;Willem: would you mind having a look at this patch, since you committed the original multi-part enhancement?","08/Oct/11 11:53;njiang;Applied patch with thanks to Rich.
I also merged the patch into camel 2.8.x branch.",26/Oct/11 17:02;ojelinski;works for me. Thank you very much.,,,,,,,,,,,,,,,,,,,,,,,,,
"Because local PrintService objects on Windows have a name which is not their UNC path, the PrinterProducer can never find them.",CAMEL-4478,12524275,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,denis@denisrobert.net,denis@denisrobert.net,22/Sep/11 12:17,25/Oct/11 11:35,14/Mar/19 02:43,01/Oct/11 08:49,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-printer,,,,0,,,,,,"In org.apache.camel.component.printer.PrinterProducer, the line:

setPrinter(""\\\\"" + config.getHostname() + ""\\"" + config.getPrintername());

reconstructs a UNC path which is expected to match the name of a PrintService on the system. For local printers on Windows, the name of the PrintService is simply the name of the printer without the host and any backslashes, so the PrinterProducer is never able to find them.

So when config.getHostname() is ""localhost"", at least on Windows, the line should be simply:

setPrinter(config.getPrintername())

so that we'd have code like:

if (""localhost"".equalsIgnoreCase(config.getHostname())) {
  setPrinter(config.getPrintername());
} else {
  setPrinter(""\\\\"" + config.getHostname() + ""\\"" + config.getPrintername());
}

This can only work if issue CAMEL-4477 about the error in parseURI() in PrinterConfiguration is also fixed.
","Windows 7 64-bit, jdk 1.6.0_20",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-01 08:49:17.727,,,no_permission,,Novice,,,,,,,,,,,,41782,,,Sat Oct 01 08:49:17 UTC 2011,,,,,,,0|i0216f:,9792,,,,,,,,,01/Oct/11 08:49;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"parseURI in org.apache.camel.component.printer.PrinterConfiguration leaves a prefixed ""/"" on the printername attribute which should be removed",CAMEL-4477,12524271,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,denis@denisrobert.net,denis@denisrobert.net,22/Sep/11 12:10,25/Oct/11 11:36,14/Mar/19 02:43,01/Oct/11 08:39,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-printer,,,,0,,,,,,"in PrinterConfiguration.parseURI(), the line:

setPrintername(uri.getPath());

ends up leaving the starting ""/"" which is not really a part of the printer's name. When the PrinterProducer later searches for the matching PrintService, it attempts to recreate the printer path from the host name and the printer name with the following:

setPrinter(""\\\\"" + config.getHostname() + ""\\"" + config.getPrintername());

which ends up with a string like: \\<HostName>\/<printer> because the leading ""/"" was not removed from the printer name, and which leads to the printer never being found.","Windows 7 64-bit, jdk 1.6.0_20",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-22 13:26:23.715,,,no_permission,,Novice,,,,,,,,,,,,41783,,,Sat Oct 01 08:39:50 UTC 2011,,,,,,,0|i02167:,9791,,,,,,,,,"22/Sep/11 13:26;davsclaus;Thanks for reporting.

Do you want to try and provide a patch for this problem?
You can read about contributing here. And also some info how to create a patch
http://camel.apache.org/contributing.html",01/Oct/11 08:39;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file: consumer does not create directory,CAMEL-4474,12523860,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,taariql,davidkarlsen@gmail.com,davidkarlsen@gmail.com,21/Sep/11 13:04,25/Oct/11 11:35,14/Mar/19 02:43,23/Sep/11 07:51,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-core,,,,0,component,consumer,file,,,"According to http://camel.apache.org/file2.html autoCreate is true by default and should for a consumer create the directory.
{noformat}
autoCreate 	true 	Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory. For the file producer, it means the directory the files should be written to. 
{noformat}
This does not happen and thus a route startup would fail.",java 1.6,,,,,,,,,,,,,,,,,22/Sep/11 17:04;taariql;CAMEL-4474_file__consumer_does_not_create_directory.patch;https://issues.apache.org/jira/secure/attachment/12496142/CAMEL-4474_file__consumer_does_not_create_directory.patch,22/Sep/11 17:09;taariql;CAMEL-4474_file__consumer_does_not_create_directory1.patch;https://issues.apache.org/jira/secure/attachment/12496144/CAMEL-4474_file__consumer_does_not_create_directory1.patch,22/Sep/11 17:16;taariql;CAMEL-4474_file__consumer_does_not_create_directory2.patch;https://issues.apache.org/jira/secure/attachment/12496146/CAMEL-4474_file__consumer_does_not_create_directory2.patch,21/Sep/11 14:57;davidkarlsen@gmail.com;Camel4474.java;https://issues.apache.org/jira/secure/attachment/12495378/Camel4474.java,21/Sep/11 14:57;davidkarlsen@gmail.com;app-config-context.xml;https://issues.apache.org/jira/secure/attachment/12495379/app-config-context.xml,21/Sep/11 14:57;davidkarlsen@gmail.com;app-config.properties;https://issues.apache.org/jira/secure/attachment/12495377/app-config.properties,21/Sep/11 14:57;davidkarlsen@gmail.com;test-context.xml;https://issues.apache.org/jira/secure/attachment/12495380/test-context.xml,,,,,7.0,,,,,,,,,,,,,,,,,,,2011-09-21 14:39:09.027,,,no_permission,,Unknown,,,,,,,,,,,,13760,,,Fri Sep 23 07:23:33 UTC 2011,,,,,,,0|i0215j:,9788,Regression,,,,,,,,"21/Sep/11 14:39;taariql;David can you please post a test for this?
There are tests[1] for this code so maybe you missed something with permissions etc, or of course maybe these tests miss something.

[1] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerAutoCreateDirectoryTest.java",21/Sep/11 14:57;davidkarlsen@gmail.com;See attached test - you can toggle the mkdir flag to make it pass or fail.,"21/Sep/11 15:57;taariql;You're using a dot in the directory name which is not allowed, is this the error you're getting?

IllegalArgumentException(""Only directory is supported. Endpoint must be configured with a valid starting directory: "" + file);","21/Sep/11 16:15;davidkarlsen@gmail.com;I will have to test tomorrow at work. But I do not see this requirement documented an place: http://camel.apache.org/file2.html .
It's also not a problem as long as the directory in fact exists - so I doubt that is the case - but I'll double check tomorrow.","21/Sep/11 18:37;davidkarlsen@gmail.com;Hah! You are dead-right - but why??

{noformat}
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only directory is supported. Endpoint must be configured with a valid starting directory: target/incoming.dir
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1145)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:108)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:240)
	at 

{noformat}

Changing it to one w/o dot fixed it - and the error message ""Only directory is supported."" is misleading.","22/Sep/11 04:57;taariql;Great.

The reason is stated in the comments in FileEndpoint;
// we assume its a file if the name has a dot in it (eg foo.txt)

Since a directory can have a dot, like .m2, .camel etc, we should perhaps always assume it's a directory, but that doesn't sound right either.
Feel free to submit a patch to improve the code or even documentation to make it clearer.","22/Sep/11 07:25;davsclaus;That dot thingy is a left over from the 1.x days as you could configure a fileName and/or a directory. In 2.x it must be a starting directory. And you can use the new fileName option to pin point a specific file.

David there is something wrong with your system as we use the File API to check if its a directory first
{code}
boolean isDirectory = file.isDirectory();
        if (!isDirectory && file.getName().contains(""."")) {
            throw new IllegalArgumentException(""Only directory is supported. Endpoint must be configured with a valid starting directory: "" + file);
        }
{code}

So what OS and file system are you using?","22/Sep/11 08:48;taariql;Claus I don't think there's a problem with his OS or filesystem, isDirectory will return true only if it exists and is a directory.
So it will always throw the exception if the directory does not exist and has a dot.

I have half a patch from doing a new test yesterday, so if David hasn't got a patch in mind I can finish it the weekend when I get a gap.",22/Sep/11 13:29;davsclaus;Ah Taarig yeah of course :) ,"22/Sep/11 17:04;taariql;Doesn't seem like there's more to do on this, patch attached.","22/Sep/11 17:16;taariql;Fixed a comment in the test code. Please see the last attachment, CAMEL-4474_file__consumer_does_not_create_directory2.patch","23/Sep/11 07:23;davsclaus;Taariq thanks of the patch. I have granter your JIRA account karma to assign tickets, as you seem to contribute a fair number of patches to Camel. Soo keep it up.",,,,,,,,,,,,,,,,,,
Bug in parsing of JPA uri,CAMEL-4362,12519556,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,davidkarlsen@gmail.com,davidkarlsen@gmail.com,21/Aug/11 17:02,22/Nov/11 23:22,14/Mar/19 02:43,22/Nov/11 23:22,2.8.0,,,,,,,,,,,,2.8.4,2.9.0,,,camel-jpa,,,,0,,,,,,"According to http://camel.apache.org/jpa.html entityName is optional.
When configuring with the following uri (e.g. w/o entityName):
<camel:endpoint id=""jpaEndpoint"" uri=""jpa:?persistenceUnit=journalPersistenceUnit&amp;usePersist=true"" />
the following warning will be displayed
2011-08-21 18:57:11,381 [main][][][][][][][] WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttrue
due to the incorrect if test in the JpaComponent:

{noformat}
// lets interpret the next string as a class
        if (path != null) {
            // provide the class loader of this component to work in OSGi environments as camel-jpa must be able
            // to resolve the entity classes
            Class<?> type = getCamelContext().getClassResolver().resolveClass(path, JpaComponent.class.getClassLoader());
            if (type != null) {
                endpoint.setEntityType(type);
            }
        }
{noformat}

path is not null, but it is the rest of the string and not the entityname. e.g it should not start with ? if it is an entityname - else it is the options.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-21 20:42:49.309,,,no_permission,,Unknown,,,,,,,,,,,,60187,,,Tue Nov 22 23:22:56 UTC 2011,,,,,,,0|i020gv:,9677,,,,,,,,,"21/Aug/11 17:46;davidkarlsen@gmail.com;I now see:

commit ad352d2328a4dd398a334f24b6d03944a3bcfc59
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Fri Aug 19 11:27:59 2011 +0000

    Jpa component should only try to load EntityClass if the path is not empty string.
    
    git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1159596 13f79535-47bb-0310-9956-ffa450edef68

So this issue can be closed and the changelog updated.",21/Aug/11 20:42;muellerc;Already fixed with commit 1159596: http://svn.apache.org/viewvc?rev=1159596&view=rev,"22/Nov/11 17:05;davidkarlsen@gmail.com;I still see this message.
WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttrue

even with camel 2.8.3",22/Nov/11 23:22;muellerc;fixed for Camel 2.8.4 and 2.9.0,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf OSGi bundle uses an incorrect CXF version range,CAMEL-4276,12515644,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,28/Jul/11 13:17,25/Oct/11 11:35,14/Mar/19 02:43,29/Jul/11 07:46,2.7.3,2.8.0,,,,,,,,,,,2.7.4,2.8.1,2.9.0,,camel-cxf,,,,0,,,,,,"The camel-cxf Karaf feature defines the following CXF version range:

<feature version=""[2.4,2.6)"">cxf</feature>

which is correct.

Unfortunately the camel-cxf bundle import statement doesn't define explicitly the CXF version range. The Felix maven-bundle-plugin determines the version range with the CXF version used and so define it to [2.4,2.5).

1/ it's not correct as it doesn't match the feature definition
2/ it means that you can't use Camel with CXF 2.5.0-SNAPSHOT",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,66676,,,Fri Jul 29 07:46:21 UTC 2011,,,,,,,0|i01zxr:,9591,,,,,,,,,28/Jul/11 16:01;jbonofre;Fixed on Camel trunk: revision 1151903.,29/Jul/11 07:38;jbonofre;Fixed on camel-2.8.x branch: revision 1152130.,29/Jul/11 07:46;jbonofre;Fixed on camel-2.7.x branch: revision 1152136.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing setter or constructor-argument for elementNameStrategyRef in SoapJaxbDataFormat,CAMEL-4254,12514903,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ojelinski,ojelinski,21/Jul/11 12:59,23/Sep/11 12:32,14/Mar/19 02:43,04/Aug/11 10:19,2.7.0,2.7.3,,,,,,,,,,,2.8.1,2.9.0,,,camel-soap,,,,0,,,,,,"Because the variable ""elementNameStrategyRef"" in org.apache.camel.dataformat.soap.SoapJaxbDataFormat can't be set, it is always null. Therefore declaring the data format with spring-dsl leads to an automatic fallback to the default strategy ""TypeNameStrategy"" in org.apache.camel.dataformat.soap.SoapJaxbDataFormat.checkElementNameStrategy(Exchange exchange). This further leads to wrong results when marshalling.

So the following declararion does not work correctly:
...
    <bean id=""myStrategy"" class=""org.apache.camel.dataformat.soap.name.ServiceInterfaceStrategy"">
    	<constructor-arg value=""my.package.MyServiceInterface""/>
	<constructor-arg value=""true""/>
    </bean>
...
    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
...
		<dataFormats>
			<soapjaxb id=""mySoap"" 
                              contextPath=""my.package"" 
                              elementNameStrategyRef=""myStrategy""/>
		</dataFormats>
...
                <route>
        	        <from uri=""cxf:/MyService?serviceClass=my.package.MyServiceInterface"" />
...
            		<convertBodyTo type=""my.package.MyType""/>
			<marshal ref=""mySoap""/>
...",,,,,,,,,,,,,,,,,,27/Jul/11 19:01;ojelinski;camel-soap-2.7.3.patch.txt;https://issues.apache.org/jira/secure/attachment/12488010/camel-soap-2.7.3.patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-21 16:30:33.63,,,no_permission,,Novice,,,,,,,,,,,,13816,,,Fri Sep 23 12:32:29 UTC 2011,,,,,,,0|i01zsn:,9568,,,,,,,,,21/Jul/11 16:30;davsclaus;Oliver do you want to work on a patch?,"22/Jul/11 07:24;ojelinski;Yes, I think I can do that during the weekend. Are there any documents on naming conventions, code-style etc.?","22/Jul/11 07:33;davsclaus;There is some documentation here
http://camel.apache.org/developers.html

But in terms of code style / naming. Then follow the existing code.

There is a checkstyle rule which we run from a command line, which ensures the formatting of the code is consistent.
http://camel.apache.org/building.html

But dont worry to much about that as the Camel team can take care of that.","22/Jul/11 07:50;ojelinski;ok, thanks!","27/Jul/11 19:01;ojelinski;I generated a patch for the camel-2.7.3 tag, where the problem is solved. I had to modify the spring-context for one unit-test, too, because the strategy ref was not declared and after fixing the bug, this naturally lead to exceptions.",28/Jul/11 07:44;davsclaus;Willem can you look at this as part of that other ticket for camel-soap you have assigned?,04/Aug/11 10:19;njiang;Applied patch with thanks to Oliver.,23/Sep/11 12:32;ojelinski;It works. Thanx.,,,,,,,,,,,,,,,,,,,,,,
Archetypes fail to build in offline mode,CAMEL-4237,12514244,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,15/Jul/11 16:20,25/Oct/11 11:35,14/Mar/19 02:43,15/Jul/11 16:22,2.7.2,,,,,,,,,,,,2.7.4,2.8.0,,,,,,,0,,,,,,"If build tooling/archetypes with the --offline Maven argument you may see an error like

[ERROR]     Unresolveable build extension: Error resolving version for plugin 'org.apache.maven.archetype:archetype-packaging'

Seems the version for archetype-packaging in the dependencyManagement section defined in the parent pom is not propagating down to build extension... when Maven is not in offline mode it can simply grab the latest version from the metadata at central. I'm committing a simple fix shortly. ",Maven 3.0.2 on Linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13856,,,Fri Jul 15 16:23:18 UTC 2011,,,,,,,0|i01zov:,9551,,,,,,,,,"15/Jul/11 16:22;janstey;janstey@mojo:/x1/asf/camel/trunk$ svn ci -m ""CAMEL-4237 - fix issue with archetypes not building in Maven offline mode""
Sending        tooling/archetypes/camel-archetype-activemq/pom.xml
Sending        tooling/archetypes/camel-archetype-blueprint/pom.xml
Sending        tooling/archetypes/camel-archetype-component/pom.xml
Sending        tooling/archetypes/camel-archetype-java/pom.xml
Sending        tooling/archetypes/camel-archetype-scala/pom.xml
Sending        tooling/archetypes/camel-archetype-spring/pom.xml
Sending        tooling/archetypes/camel-archetype-spring-dm/pom.xml
Sending        tooling/archetypes/camel-archetype-web/pom.xml
Sending        tooling/archetypes/camel-archetype-webconsole/pom.xml
Transmitting file data .........
Committed revision 1147216.
",15/Jul/11 16:23;janstey;Assuming this issue will be fixed in 2.8 since the VOTE has been -1'd,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FtpOperations Delete operation not respecting Stepwise Attribute,CAMEL-4215,12513810,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dsmw,dsmw,12/Jul/11 15:59,25/Oct/11 11:36,14/Mar/19 02:43,13/Jul/11 07:07,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-ftp,,,,0,,,,,,"Current implementation of deleteFile(String name) ignores the Endpoints 'stepwise' requirement. 

This was noticed when interfacing with a MVS ftp system with the operation failing silently as the resulting exception is swallowed by higher order code.

I've unfortunately been unable to create a test case that emulates the behavior, since the Apache FtpServer and associated mocks used within the test cases don't emulate the behavior of the MVS platform.

I believe other operations suffer the same problem (e.g rename).

I've attached a patch that corrects the issue. Existing test cases all pass, though someone will probably want to see if this implementation is the most efficient.",All,,,,,,,,,,,,,,,,,12/Jul/11 16:00;dsmw;FtpOperations.patch;https://issues.apache.org/jira/secure/attachment/12486196/FtpOperations.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-13 07:07:43.26,,,no_permission,,,,,,,,,,,,,,13869,,,Wed Jul 13 07:07:43 UTC 2011,,,,,,,0|i01zjz:,9529,,,,,,,,,13/Jul/11 07:07;davsclaus;Thanks for the patch. I removed the code that swallowed the exception to surface the problem to the end user (as it will have the exception + stacktrace).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JmsEndpoint that is a topic should not be singleton scoped, only queues should be",CAMEL-4194,12513243,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Jul/11 10:31,25/Oct/11 11:35,14/Mar/19 02:43,08/Jul/11 10:54,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Removing-routes-programmatically-tp4556741p4556741.html

If you have multiple consumers on the *exact same* JMS endpoint uri, and if you remove on of the consumers (eg from a route), then the singleton JmsEndpoint will be stopped. This causes the other active consumers to not receive any messages anymore.

This problem is only if you remove the route. If you stop route then there is no problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13877,,,2011-07-08 10:31:30.0,,,,,,,0|i01zfb:,9508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nullpointer in camel-mail when body is null,CAMEL-4173,12512716,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,04/Jul/11 13:10,04/Jul/11 13:25,14/Mar/19 02:43,04/Jul/11 13:25,2.7.2,,,,,,,,,,,,2.8.0,,,,camel-mail,,,,0,,,,,,"When trying to send a mail with an empty body (null) then we get the following NullPointer exception.
We should instead either complain about the null body or send the mail with an empty body.

13:27:27,010 | INFO  | tp1062262230-101 | ache.camel.processor.CamelLogger   87 | 55 - org.apache.camel.camel-core - 2.7.1 | Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[com.ier.ebo_servicerequest.ServiceRequestType@10e07658]]
13:27:27,013 | ERROR | tp1062262230-101 | ache.camel.processor.CamelLogger  232 | 55 - org.apache.camel.camel-core - 2.7.1 | Failed delivery for exchangeId: ID-MacBook-Pro-de-bahaaldine-local-51035-1309771358240-2-6. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException
org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[124:org.apache.cxf.bundle:2.4.0]
            at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
            at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_24]
            at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_24]
            at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)[124:org.apache.cxf.bundle:2.4.0]
            at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)[72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)[124:org.apache.cxf.bundle:2.4.0]
            at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)[78:org.eclipse.jetty.security:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.Server.handle(Server.java:346)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)[73:org.eclipse.jetty.util:7.3.1.v20110307]
            at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]
Caused by: java.lang.NullPointerException
            at javax.mail.util.ByteArrayDataSource.<init>(ByteArrayDataSource.java:137)[69:javax.mail:1.4.3]
            at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)[281:org.apache.camel.camel-mail:2.7.1]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)[49:org.springframework.context.support:3.0.5.RELEASE]
            ... 98 more
13:27:27,023 | WARN  | tp1062262230-101 | ache.cxf.common.logging.LogUtils  371 |  -  -  | Interceptor for {http://www.ier.com/WS_ServiceRequest}WSServiceRequestService#{http://www.ier.com/WS_ServiceRequest}createServiceRequest has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not prepare mail; nested exception is java.lang.NullPointerException
            at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:218)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:195)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:142)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[124:org.apache.cxf.bundle:2.4.0]
            at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
            at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_24]
            at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_24]
            at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)[124:org.apache.cxf.bundle:2.4.0]
            at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)[72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)[124:org.apache.cxf.bundle:2.4.0]
            at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)[78:org.eclipse.jetty.security:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.Server.handle(Server.java:346)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)[73:org.eclipse.jetty.util:7.3.1.v20110307]
            at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]
Caused by: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)[125:org.apache.camel.camel-cxf:2.7.1]
            ... 41 more
Caused by: java.lang.NullPointerException
            at javax.mail.util.ByteArrayDataSource.<init>(ByteArrayDataSource.java:137)[69:javax.mail:1.4.3]
            at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)[281:org.apache.camel.camel-mail:2.7.1]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)[49:org.springframework.context.support:3.0.5.RELEASE]
            ... 98 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13888,,,Mon Jul 04 13:25:38 UTC 2011,,,,,,,0|i01zan:,9487,,,,,,,,,04/Jul/11 13:25;chris@die-schneider.net;Fixed .. see commit,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp component doesn't support sms messages longer than 254 symbols.,CAMEL-4170,12512438,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,justas,justas,01/Jul/11 07:52,04/Jul/11 16:12,14/Mar/19 02:43,04/Jul/11 16:12,2.6.0,,,,,,,,,,,,2.8.0,,,,camel-smpp,,,,0,,,,,,"Exception is thrown when trying to send sms messages longer than 254 characters. According to smpp specification:

The short message data
should be inserted in either
the short_message or
message_payload fields.
Both fields must not be used
simultaneously.

Camel-smpp producer always sets short_message field.
short_message max length is 254 octets, while message_payload can be up to 64K. camel smpp producer should set the correct smmp fields according to message length.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-03 20:02:56.443,,,no_permission,,,,,,,,,,,,,,13894,,,Mon Jul 04 16:09:03 UTC 2011,,,,,,,0|i01z9z:,9484,,,,,,,,,"03/Jul/11 20:02;muellerc;The JSMPP web site only provides an example which sends multiple messages in this case: [SubmitLongMessageExample|http://code.google.com/p/jsmpp/source/browse/trunk/src/java/examples/org/jsmpp/examples/SubmitLongMessageExample.java]

I will check the SMPP specification how to set the long message.","03/Jul/11 21:10;muellerc;If the short message is longer than 254 character, the message payload TLV optional parameter is used.
Thanks Justas for reporting this issue.",04/Jul/11 16:05;muellerc;the optional parameters are not set in the submitShortMessage call in SmppProducer,04/Jul/11 16:09;muellerc;Committed r1142721,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-smpp component prints ""1"" or ""2"" to console when sending sms messages.",CAMEL-4166,12512332,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,justas,justas,30/Jun/11 14:59,25/Oct/11 11:35,14/Mar/19 02:43,30/Jun/11 15:11,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-smpp,,,,0,,,,,,"in SmppBinding.java:
{code}
if (in.getHeaders().containsKey(DATA_CODING)) {
    System.out.println(""1"");
    submitSm.setDataCoding((Byte) in.getHeader(DATA_CODING));
} else {
    System.out.println(""2"");
    submitSm.setDataCoding(configuration.getDataCoding());
}
{code}
",,,,,,,,,,,,,,,,,,30/Jun/11 15:05;justas;patch.txt;https://issues.apache.org/jira/secure/attachment/12484783/patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-30 15:08:53.101,,,no_permission,,,,,,,,,,,,,,68700,,,Thu Jun 30 15:11:14 UTC 2011,,,,,,,0|i01z93:,9480,,,,,,,,,30/Jun/11 15:06;justas;Patch attached,30/Jun/11 15:08;janstey;Thanks Justas. This is already fixed in trunk. Checking now to see if it was fixed in the last release.,"30/Jun/11 15:11;janstey;It will be in the next release (version 2.8.0).

Thanks for reporting this.

Cheers,
Jon",,,,,,,,,,,,,,,,,,,,,,,,,,,
ThrottlingInflightRoutePolicy can deadlock,CAMEL-4149,12511461,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sm,sm,24/Jun/11 11:37,25/Oct/11 11:35,14/Mar/19 02:43,26/Jun/11 09:36,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"Using ThrottlingInflightRoutePolicy can deadlock a route in some situations. The unit test pasted in below shows one such situation.

What happens is that the bottom route processes its first exchange, then suspends. Since it is suspended it will not take the next exchange from the seda queue, and so it will never check whether it should re-enable the route.

Perhaps it will work by putting the check to re-enable the route in the onExchangeBegin method, if that is called even when the route is suspended?

{code}
import org.apache.camel.Exchange;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.DefaultInflightRepository;
import org.apache.camel.impl.ThrottlingInflightRoutePolicy;
import org.apache.camel.impl.ThrottlingInflightRoutePolicy.ThrottlingScope;
import org.apache.camel.test.CamelTestSupport;

public class ThrottleTest extends CamelTestSupport {

	@Produce(uri = ""direct:input"")
	protected ProducerTemplate input;
	protected MockEndpoint resultEndpoint;

	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {
	    return new RouteBuilder() {
            public void configure() {
            	resultEndpoint = new MockEndpoint(""mock:result"");
            	resultEndpoint.setCamelContext(getContext());
            	
            	getContext().setInflightRepository(new DefaultInflightRepository() {
            		@Override
            	    public void add(Exchange exchange) {
            			super.add(exchange);
            			System.out.println(""                        add "" + this.size());
            	    }
            		@Override
           	        public void remove(Exchange exchange) {
            			super.remove(exchange);
            			System.out.println(""                     remove "" + this.size());
           	        }
            		
            	});
            	
            	ThrottlingInflightRoutePolicy throttler = new ThrottlingInflightRoutePolicy();
            	
            	throttler.setMaxInflightExchanges(1);
            	throttler.setScope(ThrottlingScope.Context);

            	from(""direct:input"")
            		.inOnly(""seda:hey"", ""seda:hey"", ""seda:hey"", ""seda:hey"", ""seda:hey"")
            		.delay(1000)
        		.inOnly(""log:inputDone"");
            	
            	from(""seda:hey"")
            		.routePolicy(throttler)
            		.inOut(""log:outputDone"")
            		.to(resultEndpoint);
            }
        };
	}
	
	public void testThatAllExchangesAreReceived() throws Exception {
		input.sendBody(""hello"");
		
		resultEndpoint.expectedMessageCount(5);
		resultEndpoint.assertIsSatisfied();
	}
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-25 08:49:36.309,,,no_permission,,,,,,,,,,,,,,13909,,,Sun Jun 26 09:36:11 UTC 2011,,,,,,,0|i01z5b:,9463,,,,,,,,,"25/Jun/11 08:49;davsclaus;Its because you use seda endpoints, context scoped endpoints and only define the route policy in one of the routes.",26/Jun/11 09:36;davsclaus;Thanks for reporting. Fixed on trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfPayload to Node conversion is not working properly ,CAMEL-4143,12511324,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,avenderov,avenderov,23/Jun/11 06:56,25/Oct/11 11:35,14/Mar/19 02:43,24/Jun/11 06:28,2.8.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,"We are using {{camel-cxf}} component and building it from the sources. Also we have slightly modified {{CxfPayloadConverterTest.testCxfPayloadToNode}} test, added some additional checks. Here are the changes that were made to the test:
{code:borderStyle=solid}
Index: CxfPayloadConverterTest.java
===================================================================
--- CxfPayloadConverterTest.java	(revision 6644)
+++ CxfPayloadConverterTest.java	(revision 6686)
@@ -49,6 +49,7 @@
         DocumentBuilderFactory documentBuilderFactory =
                 DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setNamespaceAware(true);
         DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
         document = documentBuilder.parse(file);
         document.getDocumentElement().normalize();
@@ -118,5 +119,13 @@
         exchange.getIn().setBody(payload);
         node = exchange.getIn().getBody(Node.class);
         assertNotNull(node);
+        Element root = (Element) node;
+        assertEquals(""root element name"", ""root"", root.getNodeName());
+        assertEquals(""root element namespace"", ""http://www.test.org/foo"",
+                root.getNamespaceURI());
+        Element bar = (Element) root.getElementsByTagName(""bar"").item(0);
+        assertEquals(""child element name"", ""bar"", bar.getNodeName());
+        assertEquals(""child element namespace"", ""http://www.test.org/foo"",
+                bar.getNamespaceURI());
     }
 } 
{code}
Since there is no explicit converter from {{CxfPayload}} to {{Node}} the fallback converter from {{CxfPayloadConverter}} is used for this conversion. Fallback converter from {{CxfPayloadConverter}} under the hood uses converters from {{XmlConverter}}. There are two suitable converters in {{XmlConverter}} class which are randomly selected. Some times {{public Element toDOMElement(Node node)}} converter is used and some times {{public Document toDOMDocument(final Node node)}} converter is used. If {{public Document toDOMDocument(final Node node)}} converter is used then test fails with {{ClassCastException}}. To avoid this, explicit converter from {{CxfPayload}} to {{Node}} should be added. Patch that adds {{CxfPayload}} to {{Node}} converter is provided. 
",,,,,,,,,,,,,,,,,,23/Jun/11 06:58;avenderov;CxfPayloadConverter.patch;https://issues.apache.org/jira/secure/attachment/12483548/CxfPayloadConverter.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-23 07:51:31.517,,,no_permission,,,,,,,,,,,,,,13918,,,Fri Jun 24 06:28:31 UTC 2011,,,Patch Available,,,,0|i01z3z:,9457,Unit Test Broken,,,,,,,,23/Jun/11 06:58;avenderov;Patch that adds new converter.,23/Jun/11 07:51;nickolay_martinov;The problem is not that there is ClassCastException. The problem is that sometimes converter returns Element and sometimes it returns Document. Behavior should be at least stable. Ideally behavior should be predictable.,24/Jun/11 06:28;njiang;Applied patch with thanks to Alexey.,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint doesn't handle elements with a namespace prefix,CAMEL-4133,12511154,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,21/Jun/11 20:16,25/Oct/11 11:35,14/Mar/19 02:43,22/Jun/11 02:43,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-blueprint,,,,0,,,,,,"Camel-blueprint only works if the camelContext and related elements are not using a namespace prefix.  Like:

{code:xml}
  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/blueprint"">
    <routeBuilder ref=""reportIncidentRoutes""/>
  </camelContext>
{code}

If you try and use a prefixed form like:
{code:xml}
  <camel:camelContext id=""camel"" xmlns:camel=""http://camel.apache.org/schema/blueprint"">
    <camel:routeBuilder ref=""reportIncidentRoutes""/>
  </camel:camelContext>
{code}

it won't parse.

",,,,,,,,,,,,,,,,,,21/Jun/11 20:17;dkulp;CAMEL-4133.patch;https://issues.apache.org/jira/secure/attachment/12483338/CAMEL-4133.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-22 02:43:35.852,,,no_permission,,,,,,,,,,,,,,13937,,,Wed Jun 22 02:43:35 UTC 2011,,,Patch Available,,,,0|i01z1r:,9447,,,,,,,,,"21/Jun/11 20:17;dkulp;
The issue is using el.getNodeName() instead of el.getLocalName() in the namespace handler.",22/Jun/11 02:43;njiang;Applied patch with thanks to Dan. I also updated an OSGi integration test to verify the change.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Issue with using preserveMessageQos and JMS delivery mode not being propagated correctly,CAMEL-4124,12510978,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Jun/11 16:30,25/Oct/11 11:36,14/Mar/19 02:43,20/Jun/11 16:44,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,If doing a JMS -> JMS (preserveMessageQos) then the JMSDeliveryMode may not be correctly preserved. This problem is only if the route is a straight JMS -> JMS. If you add some steps in between then the JmsMessage may be touched and the property is then propagated correctly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13927,,,2011-06-20 16:30:27.0,,,,,,,0|i01yzr:,9438,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Thread controlling FTP Polling Process dies,CAMEL-4105,12510319,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bbuzzard,bbuzzard,14/Jun/11 15:02,25/Oct/11 11:35,14/Mar/19 02:43,16/Jun/11 05:32,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-ftp,,,,0,,,,,,"I have several threads each polling a different FTP Remote folder location.  This works fine for a couple of weeks then one or more FTP Threads die (disappear).  I'm going to attach a snippet from my log file below.  Notice that normally the connection to the FTP site does not exists.  The connection is then made and the folders are checked then the FTP process disconnects.  Some of the folders are on the same remote FTP site and I don't know if that causes a problem or not.

The first time I notice that the thread is dead is when the code starts checking the FTP threads to see if they are connected and I notices that not all of the thread are listed.

*** LOG SNIPPET ***
2011-06-13 11:40:00,531 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:00,905 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:00,911 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:00,914 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:00,918 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,184 | INFO  | Connected and logged in to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:01,470 | DEBUG | Took 0.565 seconds to poll: Outbound/Vendors | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:01,470 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:01,562 | DEBUG | Took 0.650 seconds to poll: Outbound/TransportXML | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:01,562 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:01,582 | DEBUG | Took 0.668 seconds to poll: Outbound/AP | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:01,583 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:01,583 | DEBUG | Took 0.665 seconds to poll: Outbound/Customers | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,583 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,877 | DEBUG | Took 0.693 seconds to poll: outbound | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:01,877 | DEBUG | Disconnecting from: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:46,452 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:03.418,dst=ROUTER,file=/esb/ToRouter/Binary/CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113850.EDI,modified=2011-06-13 11:38:56.000,size=264 | Inbound | DefaultMessageListenerContainer-1
2011-06-13 11:40:46,465 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:03.418,dst=Edi,file=Edi-CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113850.EDI,modified=2011-06-13 11:38:56.000,size=264 | DstEdi | DefaultMessageListenerContainer-1
2011-06-13 11:41:00,524 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:00,583 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:41:00,985 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:41:00,996 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:41:01,043 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:01,048 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:01,171 | INFO  | Connected and logged in to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:01,527 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:18.540,dst=ROUTER,file=/esb/ToRouter/Binary/CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113857.EDI,modified=2011-06-13 11:39:12.000,size=257 | Inbound | DefaultMessageListenerContainer-1
2011-06-13 11:41:01,536 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:18.540,dst=Edi,file=Edi-CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113857.EDI,modified=2011-06-13 11:39:12.000,size=257 | DstEdi | DefaultMessageListenerContainer-1
2011-06-13 11:41:01,596 | DEBUG | Took 0.553 seconds to poll: Outbound/AP | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:01,596 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:02,396 | DEBUG | Took 1.348 seconds to poll: Outbound/Customers | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:02,396 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:02,973 | DEBUG | Took 1.802 seconds to poll: outbound | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:02,973 | DEBUG | Disconnecting from: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:36,017 | ERROR | Could not accept connection : org.apache.activemq.transport.InactivityIOException: Channel was inactive for too long: /172.24.1.95:45512 | org.apache.activemq.broker.TransportConnector | ActiveMQ Task
2011-06-13 11:42:00,520 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:42:00,572 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:42:00,580 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
","apache-activemq-fuse-01-00, apache-camel-2.6.0-fuse-00-00, Java jdk1.6.0_25",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-14 16:05:01.623,,,no_permission,,,,,,,,,,,,,,13942,,,Thu Jun 16 16:39:10 UTC 2011,,,,,,,0|i01yvj:,9419,,,,,,,,,"14/Jun/11 16:05;davsclaus;Can you upgrade to a never Camel release.

","14/Jun/11 16:36;bbuzzard;Does the newest version fix this problem?  If so, what was the problem?  We prefer not to update unless there is a specific fix.  We don't want to introduce new bugs if we can avoid it.","14/Jun/11 16:39;bbuzzard;Pulling FTP files in from a remote FTP site is very important to us.  If we can't revolve this issue then I will have to remove the FTP Consumers and implement the code external to camel, so that's why I set the priority to ""BLOCKED'. ","15/Jun/11 15:47;davsclaus;I can see you use a FuseSource product. If you are a FuseSource subscriber then I suggest to use that channel to get help with your issue. They can provide you with a solution for your current version so you dont have to do a upgrade.

That said I am adding more logic in the ScheduledPollConsumer so we do a full try .. catch(Error e) to catch any kind of errors thrown to avoid the thread from dying. This may possible cause the JDK scheduled thread pool to fail scheduling the task. 

Also I am adding a runLoggingLevel option you can use to enable to configure a logging level that logs: START, COMPLETE on the scheduled task. Then that may help us/you to see when it stops logging that. Likewise there is a ERROR that logs all thrown error from the thread.

",15/Jun/11 15:48;davsclaus;See also CAMEL-3216,"15/Jun/11 16:17;davsclaus;I would suggest to set option: useFixedDelay=true, and also add a higher delay between pools instead of the default value of 500 millis. So for example: useFixedDelay=true&delay=10s. To only poll every 10th second.","15/Jun/11 16:53;bbuzzard;The delay for each FTP route is set to 60,000 (60 sec).  Some of the routes are polling from the same host, but different directories, and that is why it may appear in my log that I am polling every 500 millis.  Are you saying in the case where I am polling different directories on the same host that each of those polls should be further apart in time?

Yes I am using a particular version of Camel from FUSE, but it was not our intent to do this on a regular basis.  We were only trying to address a particular set of problems with the ActiveMQ-Camel 5.4.1 release.  The Fuse group assured us that the code we were using was submitted back to the open source ActiveMQ-Camel projects.  Please let us know if that is not true.

I would be more than happy to assist you with any coding or testing that needs to be done to work through this problem.    ","16/Jun/11 05:31;davsclaus;Yes FuseSource ensures that the code is submitted back to Apache. In fact we mostly fix and commit at Apache first, and then sync the code to FuseSource.

I have committed a fix to the trunk, that:
- option {{useFixedDelay}} is now default true
- will rigorously catch all errors throw from the scheduled task (catch {{java.lang.Error}})
- added runLoggingLevel option to log start/complete logs when the scheduled task runs. For example set {{runLoggingLevel=INFO}} and you should see this in the logs. This can maybe help you see when a thread stops from running.","16/Jun/11 16:08;bbuzzard;The fix looks good except I'm getting errors when I try to compile I get an error with LOG.error(""Scheduled task started on:   {}"", this.getEndpoint());

I looked at the Interface for LOG and I don't see that signature.  Was the LOG interface modified?",16/Jun/11 16:19;davsclaus;Camel 2.6 uses Apache commons-logging. Camel 2.7+ uses slf4j as logging. So you may have to adjust the patch slightly when back porting.,16/Jun/11 16:39;bbuzzard;Thank you for the quick fix!  I'm making the adjustment now for back porting.,,,,,,,,,,,,,,,,,,,
Camel PropertyPlaceHolder throws an Error when using ${user.home} environment variable in Windows,CAMEL-4099,12510093,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,carloc,carloc,13/Jun/11 12:00,25/Oct/11 11:35,14/Mar/19 02:43,13/Jun/11 18:58,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,"camel-core,",configuration,"propertyplaceholder,",,,"Error happens when I try to configure using properyconfigurer
<camel:propertyPlaceholder location=""file://${user.home}/aventurine-config/aventurine-config.properties"" id=""propertyPlaceHolder""/> and try to use an environment variable. THis happens only on windows environment. This works on Ubuntu, It seems that camel is removing the slashes in ${user.home}

org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route areaFileRoute: Route[[From[file:{{upload.folder}}]] -> [DoTry[[process[ref:... because of Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)
	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136)
	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1239)
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:466)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
	at org.mortbay.jetty.Server.doStart(Server.java:222)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at com.ccti.StartUFM.main(StartUFM.java:35)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route areaFileRoute: Route[[From[file:{{upload.folder}}]] -> [DoTry[[process[ref:... because of Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:170)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:706)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1643)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1432)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1336)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1314)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 18 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:407)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:793)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	... 28 more
Caused by: java.io.FileNotFoundException: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at java.io.FileInputStream.<init>(FileInputStream.java:66)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:67)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:49)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:96)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:83)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:963)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:405)
	... 36 more","Windows 7, Java 1.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-13 12:20:49.732,,,no_permission,,,,,,,,,,,,,,13955,,,Mon Jun 13 18:58:38 UTC 2011,,,,,,,0|i01yuf:,9414,,,,,,,,,"13/Jun/11 12:20;davsclaus;Can you use windows path separators?

Should be something like:
{code}
file:${user.home}\aventurine-config\aventurine-config.properties
{code}

","13/Jun/11 12:47;carloc;Changed it to this

<camel:camelContext id = ""camelContext"">
		<camel:propertyPlaceholder location=""file:${user.home}\aventurine-config\aventurine-config.properties"" id=""propertyPlaceHolder""/>

something's wrong with the user.home

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:407)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:793)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	... 28 more
Caused by: java.io.FileNotFoundException: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at java.io.FileInputStream.<init>(FileInputStream.java:66)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:67)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:49)
	at org.apache.camel.comp","13/Jun/11 12:55;davsclaus;Well of course it would be nice if Camel dont give a *** if the separators is \ or /. Well if only windows would be like the others :)

Can you check your user home property? It seems to be resolved to ""C:Userscarloc"". The \ is missing. Could still be a bug in Camel though.","13/Jun/11 14:10;carloc;seems to work fine with the spring propertyconfigurer. also happens on my colleague's workstation. his workstation is also windos.

THanks","13/Jun/11 14:56;davsclaus;Okay I guess there is an issue when using that on Windows as it uses \ path separators.

","13/Jun/11 18:55;davsclaus;Okay found the bug. The replacement string must be quoted when using replaceFirst in the matcher, to have it work as a direct literal replacement.

Se the JDK javadoc
http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#quoteReplacement(java.lang.String)",13/Jun/11 18:58;davsclaus;I have committed a fix. Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
camel-http - Issue with reusing cached http producer with authenticated user,CAMEL-4096,12510081,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,boday,davsclaus,davsclaus,13/Jun/11 08:46,28/Jun/11 03:18,14/Mar/19 02:43,28/Jun/11 03:17,,,,,,,,,,,,,2.5.0,,,,camel-http,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multiple-remote-connection-to-the-same-host-but-different-users-tp4309456p4309456.html

We should keep auth information in endpoint key, so using a different credential will not re-using cached with another credential.

This problem is most likely also in camel-http4.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-27 18:09:41.709,,,no_permission,,,,,,,,,,,,,,69868,,,Tue Jun 28 03:17:49 UTC 2011,,,,,,,0|i01ytr:,9411,,,,,,,,,"27/Jun/11 18:09;boday;I haven't been able to reproduce this issue.  From my testing, the producer cache uses the endpoint URI as the key which is unique because the user/password are part of the URI.  Perhaps, I'm missing something though.  Any thoughts on this?","28/Jun/11 03:15;njiang;I just checked the change log , and found this issue should be fix last year.
You can find more information in CAMEL-2945.",28/Jun/11 03:17;njiang;This issue was already fixed in CAMEL 2.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,
Setting pattern on <to> with a custom id causes a failure,CAMEL-4089,12509912,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jun/11 12:33,25/Oct/11 11:35,14/Mar/19 02:43,11/Jun/11 13:15,2.8.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-spring,,,,0,,,,,,"<to uri=""mock:result"" pattern=""InOut"" id=""crap""/>

{code}

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'crap': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'pattern' of bean class [org.apache.camel.spring.CamelEndpointFactoryBean]: Bean property 'pattern' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:563)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at org.apache.camel.spring.processor.SpringTestHelper.createSpringCamelContext(SpringTestHelper.java:37)
	at org.apache.camel.spring.processor.SpringSimpleResultTypeRouteTest.createCamelContext(SpringSimpleResultTypeRouteTest.java:46)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:88)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:62)
	at com.intellij.junit3.JUnit3IdeaTestRunner.doRun(JUnit3IdeaTestRunner.java:139)
	at com.intellij.junit3.JUnit3IdeaTestRunner.startRunnerWithArgs(JUnit3IdeaTestRunner.java:52)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:199)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'pattern' of bean class [org.apache.camel.spring.CamelEndpointFactoryBean]: Bean property 'pattern' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:900)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1358)
	... 34 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13968,,,2011-06-11 12:33:06.0,,,,,,,0|i01yrz:,9403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MailBinding may drop characters from content type when using determineContentType option,CAMEL-4083,12509836,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gm2552,gm2552,10/Jun/11 14:12,25/Oct/11 11:35,14/Mar/19 02:43,12/Jun/11 11:01,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-mail,,,,0,content-type,mail,mime,smime,,"The method ""determineContentType"" in the MailBinding class may drop characters from the end of the Content-Type header (specifically ending quotes).  

Example:

Take the following SMINE enveloped data content type:
{code}
   Content-Type: application/pkcs7-mime; smime-type=enveloped-data; name=""smime.p7m""
{code}

When an incoming Exchange is processed by the mail Component with the above content type header, the resulting content type after the determineContentType is application/pkcs7-mime; smime-type=enveloped-data; name=""smime.p7m   (note the ending quote).  This results in a parsing error later on the processing chain.  The following simple unit test demonstrates the issue as it fails on the assertEquals call.

-----------------------------------------------------------------------------------------------------
{code}
package org.apache.camel.component.mail;

import org.apache.camel.CamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ContentTypeTest
{
    @Test
    public void testDetermineContentType_endingWithQuotes_assertContentMatches()
    {
    	final String contentType = ""application/pkcs7-mime; smime-type=enveloped-data; name=\""smime.p7m\""""; 
    	
    	final MailConfiguration configuration = new MailConfiguration();
    	final MailBinding binding = new MailBinding();
    	
    	final DefaultExchange exchange = new DefaultExchange((CamelContext)null);
    	exchange.getIn().setHeader(""Content-Type"", contentType);
    	
    	
    	String determinedType = binding.determineContentType(configuration, exchange);
    	
    	assertEquals(contentType, determinedType);
    }
}
{code}
",JSE 1.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-11 18:21:06.687,,,no_permission,,,,,,,,,,,,,,13971,,,Sat Jun 11 18:21:06 UTC 2011,,,,,,,0|i01yqv:,9398,,,,,,,,,"11/Jun/11 18:21;davsclaus;Yeah the logic seems a bit misleading. It mistakenly looks for charset, without checking that the key is {{charset=xxx}} in the Content-Type.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in CxfConsumer.asyncInvoke that causes setResponseBack to be called twice,CAMEL-4079,12509721,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,09/Jun/11 14:33,25/Oct/11 11:35,14/Mar/19 02:43,09/Jun/11 20:00,2.6.0,2.7.2,2.8.0,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,Bug in CxfConsumer.asyncInvoke that causes setResponseBack to be called twice.  The asyncInvoke should execute one of the conditions (continuation.isNew() or continuation.isResumed().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13976,,,Thu Jun 09 20:00:09 UTC 2011,,,,,,,0|i01ypz:,9394,,,,,,,,,"09/Jun/11 20:00;wtam;2.7.3.x
Committed revision 1134060

2.8.0.x
Committed revision 1134059.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"FileIdempotentRepository fileStore does not get loaded on bootrapping, therefore files are processed again",CAMEL-4076,12509673,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,adkathuria@yahoo.com,adkathuria@yahoo.com,09/Jun/11 07:49,25/Oct/11 11:35,14/Mar/19 02:43,10/Jun/11 10:02,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,camel-ftp,,,0,FileIdempotent,"FileStore,",,,,"I am using JVM based initialization of Camel using Spring.
I use the documented Camel initialization procedure of main.setApplicationContext(""my-spring-camel-config.xml"");
main.start()

I also use the documented FileIdempotentRepository that points to a FileStore.
However, when Camel initializes this filestore is not loaded up. Hence, the LRU cache contained within this is empty.
As a result, all my files are FTPed again from the remote server.

This happens everytime I start my JVM resulting in expensive FTP of files.",Win,,,,,,,,,,,,,,,,,09/Jun/11 15:56;adkathuria@yahoo.com;BatchLoadDriver.java;https://issues.apache.org/jira/secure/attachment/12481950/BatchLoadDriver.java,09/Jun/11 15:56;adkathuria@yahoo.com;FtpRouteBuilder.java;https://issues.apache.org/jira/secure/attachment/12481951/FtpRouteBuilder.java,09/Jun/11 15:56;adkathuria@yahoo.com;InvokeWithProcessor.xml;https://issues.apache.org/jira/secure/attachment/12481952/InvokeWithProcessor.xml,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2011-06-09 08:01:52.651,,,no_permission,,,,,,,,,,,,,,13967,,,Fri Jun 10 10:02:29 UTC 2011,,,,,,,0|i01ypb:,9391,,,,,,,,,09/Jun/11 08:01;davsclaus;Can you attach your spring xml file with the camel routes and the file store definition.,09/Jun/11 13:44;davsclaus;Are you hot-deploying your application. I wonder if a restart may not cause Camel to recognize this and not load the store on the 2nd+ starts.,"09/Jun/11 15:56;adkathuria@yahoo.com;BatchLoadDriver - is the main spring driver
FtpRouteBuilder - Builds the FTP route
Spring Config - registers the route

On restart of the application, it does not read the '.dat' file, thereby downloading the files again","09/Jun/11 15:59;adkathuria@yahoo.com;Thanks for your reply. It is a simple Java program (please find attachments). It is not hot deployment, and the example is not container based, but a simple Java 'Main' driver that starts the camel context via spring initialization","10/Jun/11 09:33;davsclaus;Thanks I got this fixed now.

As a workaround in the <bean> tag you can use spring support for an init / destroy method and invoke doStart / doStop to load and stop the store.",10/Jun/11 10:02;davsclaus;Thanks for reporting. I have fixed it on trunk.,,,,,,,,,,,,,,,,,,,,,,,,
Misconfigured CXF Endpoint url results in NPE instead of actual exception.  ,CAMEL-4073,12509642,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,szetheli,szetheli,08/Jun/11 21:06,25/Oct/11 11:36,14/Mar/19 02:43,10/Jun/11 09:33,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,"I'm new to Camel, trying to setup the JMS CXF service based on the [http://camel.apache.org/better-jms-transport-for-cxf-webservice-using-apache-camel.html], but with our own JMS services.  In the process I transposed some configuration and ended up with an NPE when CXF tried to start.

The URL passed to jaxws:endpoint/@address=""tcp://MyDomainServer1:2506,tcp://MyDomainServer1:2506"".  I know this wasn't what camel expected here, after debugging, but wanted to open a bug, since the actual meaningful exception is actually lost due to an NPE.

Expected Exception.  this was obtained with a debugger in CXF/camel before the NPE is thrown.
{code}
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: MyDomainServer1://2506,tcp://MyDomainServer2:2506 due to: No component found with scheme: MyDomainServer1
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:457)
	at org.apache.camel.component.cxf.transport.CamelDestination.activate(CamelDestination.java:116)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:48)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:181)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:127)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:334)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:239)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:489)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1544)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1485)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
	at com.expedia.cc.container.remoting.prototype.Main.main(Main.java:37)

{code}

The Actual Exception was:
{code}
Exception in thread ""main"" java.lang.RuntimeException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'JMS_prototype.Server': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: java.lang.NullPointerException
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:96)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
	at com.expedia.cc.container.remoting.prototype.Main.main(Main.java:37)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'JMS_prototype.Server': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: java.lang.NullPointerException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	... 4 more
Caused by: javax.xml.ws.WebServiceException: java.lang.NullPointerException
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:343)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:239)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:489)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1544)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1485)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.FailedToCreateConsumerException.<init>(FailedToCreateConsumerException.java:31)
	at org.apache.camel.component.cxf.transport.CamelDestination.activate(CamelDestination.java:120)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:48)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:181)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:127)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:334)
	... 25 more
{code}

Basically the problem is that the {{destinationEndpoint = getCamelContext().getEndpoint(camelDestinationUri);}} call fails, resulting the the FailedToCreateConsumerException first parameter to be null.  Since its internally expecting the endpoint to not be null, it NPE's.  Fix is most likely to make FailedToCreateConsumerException null safe.  Since it principly uses the endpoint to get the URI, you could make a constructor that took the URI that you were trying to configure, instead of relying on an already created endpoint.","Spring 3.0.5.RELEASE, CXF 2.3.2, Camel 2.7.2",,,,,,,,,,,,,,,,,09/Jun/11 20:27;dkulp;CAMEL-4073.patch;https://issues.apache.org/jira/secure/attachment/12481976/CAMEL-4073.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-09 20:27:32.765,,,no_permission,,,,,,,,,,,,,,13966,,,Fri Jun 10 09:33:37 UTC 2011,,,,,,,0|i01yon:,9388,,,,,,,,,"09/Jun/11 20:27;dkulp;
Attached a Patch for this.   

The proposal above calls for a modification of the FailedToCreateConsumerException to handle this.   However, the proper fix is likely to throw a NoSuchEndpointException in this particular case.   The patch does that, however, if something ELSE goes wrong, it does use the original proposed modification to get something better than an NPE. 


",10/Jun/11 09:33;njiang;Applied patch with thanks to Dan :),,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failures in camel-hdfs on windows as Streams are not closed correctly,CAMEL-4067,12509479,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,07/Jun/11 16:10,07/Jun/11 16:19,14/Mar/19 02:43,07/Jun/11 16:18,2.7.2,,,,,,,,,,,,2.8.0,,,,camel-hdfs,,,,0,,,,,,"On windows some hdfs tests fail as the streams are not correctly being closed. 

The first stacktrace looks like below. This is a bit misleading as in fact the problem is that not all exchanges could be processed. The reason is that the file component can´t rename the file as it is still open. This is because an inputStream is opened for the file but never closed.

junit.framework.AssertionFailedError: expected:<40> but was:<12>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:283)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:195)
	at junit.framework.Assert.assertEquals(Assert.java:201)
	at org.apache.camel.component.hdfs.HdfsProducerFileWriteTest.testSimpleWriteFile(HdfsProducerFileWriteTest.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13980,,,Tue Jun 07 16:18:21 UTC 2011,,,,,,,0|i01ynb:,9382,,,,,,,,,07/Jun/11 16:18;chris@die-schneider.net;Added close calls were streams were left open,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure in bean validation BeanValidatorRouteTest ComparisonFailure: expected:<[may not be null]> but was:<[kann nicht null sein]>,CAMEL-4066,12509447,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,07/Jun/11 11:49,07/Jun/11 11:52,14/Mar/19 02:43,07/Jun/11 11:51,2.7.2,,,,,,,,,,,,2.8.0,,,,,,,,0,,,,,,"org.junit.ComparisonFailure: expected:<[may not be null]> but was:<[kann nicht null sein]>
	at org.junit.Assert.assertEquals(Assert.java:123)
	at org.junit.Assert.assertEquals(Assert.java:145)
	at org.apache.camel.component.bean.validator.BeanValidatorRouteTest.validateShouldFailWithImpliciteDefaultGroup(BeanValidatorRouteTest.java:89)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

",German locale,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,13981,,,Tue Jun 07 11:51:26 UTC 2011,,,,,,,0|i01yn3:,9381,Unit Test Broken,,,,,,,,07/Jun/11 11:51;chris@die-schneider.net;Setting default locale to US,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
continued(true) doesn't work when is invoked for the second time in the Camel flow,CAMEL-4057,12509344,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,boday,matihost,matihost,06/Jun/11 11:26,04/Apr/12 10:48,14/Mar/19 02:43,10/Jun/11 18:21,2.4.0,2.7.2,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,continued,exception,handler,,,"When Camel flow contains error handling as continued(true), it is not invoked when the error occurs for the second time (even in different onException).
What is more the exception is not handled even by global onException and Camel flow is interruped. ",Apache Camel 2.4.0-fuse-00-00 and Apache Camel 2.7.2 ,,,,,,,,,,,,,,,,,10/Jun/11 05:28;boday;CAMEL-4057.patch;https://issues.apache.org/jira/secure/attachment/12482020/CAMEL-4057.patch,06/Jun/11 11:28;matihost;ContinuedTest.java;https://issues.apache.org/jira/secure/attachment/12481562/ContinuedTest.java,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-06-09 05:26:38.104,,,no_permission,,,,,,,,,,,,,,13959,,,Fri Jun 10 18:21:35 UTC 2011,,,,,,,0|i01yl3:,9372,,,,,,,,,"06/Jun/11 11:28;matihost;Attached testcase which shows the issue.
Testes against Camel 2.7.2 and 2.4.0-fuse-00-00",09/Jun/11 05:26;boday;this also fails when simply throwing an exception multiple times in the same route...I'm looking into it,"10/Jun/11 05:28;boday;here is a proposed fix for this...just removing the Exchange.FAILURE_HANDLED property from the exchange (when being continued) did the trick...I don't see any side effects yet, but I'm still testing it...if anyone sees any issues with this, let me know...thanks","10/Jun/11 05:50;davsclaus;Bean yeah I think that does the trick. There is a number of error handler related metadata to keep track on :).
Can you retest with latest update from trunk as I just committed an improvement to the error handling in general.",10/Jun/11 18:21;boday;tested against latest and all seems well...just committed the fix,,,,,,,,,,,,,,,,,,,,,,,,,
ChoiceProcessor : unable to find the mBeans processor,CAMEL-4044,12509203,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,rdubois,rdubois,03/Jun/11 17:03,02/May/13 02:29,14/Mar/19 02:43,11/Jun/11 03:01,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"Using the jconsole, we are not able to locate some processors after a ChoiceProcessor.

For example :

from(""direct:start"").to(""mock:test1"").id(""mock1"")
.choice()
.when(predicate).to(""mock:test2"").id(""test2"")
.otherwise().to(""mock:test3"").id(""test3"")
.end()
.to(""mock:outOfChoice"").id(""outOfChoice"");

The processors mock1 and outOfChoice are well found but not the processors test2 and test3.
",Windows XP,,,,,,,,,,,,,,,,CAMEL-4050,10/Jun/11 21:48;dkulp;camel-4044.patch;https://issues.apache.org/jira/secure/attachment/12482103/camel-4044.patch,11/Jun/11 08:37;davsclaus;coverage.png;https://issues.apache.org/jira/secure/attachment/12482138/coverage.png,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-06-03 17:34:51.159,,,no_permission,,,,,,,,,,,,,,13885,,,Sat Jun 11 08:37:58 UTC 2011,,,,,,,0|i01yi7:,9359,Unit Test Broken,,,,,,,,"03/Jun/11 17:34;hadrian;Thanks Remy for reporting this.

I could reproduce the problem at least in part. I will look into it over the weekend and come back with more details, probably a fix too.",04/Jun/11 14:47;davsclaus;CAMEL-4050 fixes this issue,04/Jun/11 15:26;davsclaus;This one was fixed by chance when I got CAMEL-4050 resolved. I had a look at the unresolved bugs and notice this issue about the CBR. So I realized my changes most likely would resolve this as well. Adding unit test confirmed that.,"10/Jun/11 21:47;dkulp;
The added unit test does no actually test that this is solved.   It doesn't assert that calls to isRegistered actually return true.  If you assert that, you'll see the test fails.","10/Jun/11 21:48;dkulp;
Attaching a patch that actually  solves the issues.  It's a little more involved that could be, but needs some API cleanup, hopefully for 3.0.","10/Jun/11 22:06;hadrian;@Dan, awesome patch! I started a full test build and will apply later today if all goes well. Many thanks and we look forward to more contributions from you.",11/Jun/11 03:01;hadrian;Patch applied to both trunk and 2.7.x branch. Thanks Dan for the contribution.,11/Jun/11 08:37;davsclaus;Parts of all the new code added isn't tested. We should consider adding tests for this. See coverage image attached.,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException at DefaultCamelContext.getRouteDefinition(),CAMEL-4021,12508528,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,arkadi,arkadi,27/May/11 10:26,25/Oct/11 11:35,14/Mar/19 02:43,27/May/11 14:05,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"Similar to CAMEL-3493 there is also a race in getRouteDefinition()
{noformat}
java.util.ConcurrentModificationException
        at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)[:1.6.0_21]
        at java.util.AbstractList$Itr.next(AbstractList.java:343)[:1.6.0_21]
        at org.apache.camel.impl.DefaultCamelContext.getRouteDefinition(DefaultCamelContext.java:1098)[cih-core-1.0.jar:1.0]
        at com.tieto.cih.core.main.GatewayRouteSetup.startGatewayRoutes(GatewayRouteSetup.java:86)[cih-core-1.0.jar:1.0]
        at com.tieto.cih.core.main.GatewayRouteSetup.process(GatewayRouteSetup.java:73)[cih-core-1.0.jar:1.0]
{noformat}
As route count could be quite large, it would be nice to have them stored in synchronized map or something like that instead of list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14024,,,2011-05-27 10:26:05.0,,,,,,,0|i01yd3:,9336,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
type converters should return NULL for Double.NaN values instead of 0,CAMEL-4011,12508222,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,boday,boday,boday,24/May/11 17:41,25/Oct/11 11:36,14/Mar/19 02:43,26/May/11 00:45,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,converter,types,,,,"see this discussion...http://camel.465427.n5.nabble.com/XPath-for-an-Integer-td4422095.html

Update the ObjectConverter.toXXX() methods to check for Double.NaN and return NULL instead of relying on Number.intValue()
",,,,,,,,,,,,,,,,,,24/May/11 21:50;boday;CAMEL-4011.patch;https://issues.apache.org/jira/secure/attachment/12480330/CAMEL-4011.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-26 11:54:12.113,,,no_permission,,,,,,,,,,,,,,14017,,,Thu May 26 16:43:10 UTC 2011,,,,,,,0|i01yav:,9326,,,,,,,,,24/May/11 21:01;boday;patch for review...,26/May/11 00:45;boday;patch committed...,"26/May/11 11:54;bvahdat;see my comments on the revision 1127744 here:

http://camel.465427.n5.nabble.com/XPath-for-an-Integer-td4422095.html

","26/May/11 16:43;boday;thanks, just added the check for Float.NaN as well",,,,,,,,,,,,,,,,,,,,,,,,,,
Bad href links generated for certain endpoint uris in camel-web,CAMEL-3991,12507699,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,19/May/11 01:26,25/Oct/11 11:36,14/Mar/19 02:43,04/Jun/11 01:50,2.7.1,,,,,,,,,,,,2.7.2,2.8.0,,,camel-web,,,,0,,,,,,"When new Endpoints are created via camel-web, some endpoint uris result in bad href links generated for the endpoint page.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14029,,,Sat Jun 04 01:48:30 UTC 2011,,,,,,,0|i01y6f:,9306,,,,,,,,,19/May/11 01:28;hadrian;Fix applied in rev 1124497 for trunk and rev 1129431 for camel-2.7.2.,"04/Jun/11 01:48;hadrian;This issue is a potential XSS vulnerability discovered by Sow Ching Shiong and reported by Secunia (secunia.com). Please find below the original report:

{quote}
We have received a vulnerability report from a third-party researcher (Sow
Ching Shiong) regarding a cross-site scripting vulnerability in Apache Camel
and contact you on his behalf to attempt a coordinated disclosure.

Please see the vulnerability details below.

We have confirmed the vulnerability in version 2.7.0.

We have reserved Secunia Advisory SA44415 and set a preliminary release date
of 25th May, 2011 for the publication of our advisory. We are, of course,
prepared to postpone this date in case you need more time to address the
vulnerability, as long as you keep us updated on the status.

Also, don't hesitate to contact us in case you have any comments or
questions.

Details:

Input passed via the URL to ""camel/endpoints/<endpoint>"" is not properly
sanitised before being returned to the user. This can be exploited to
execute arbitrary HTML and script code in a user's browser session in
context of an affected site.


PoC from the reporter:

==
http://localhost:8161/camel/endpoints/mock:someName<iframe
src=""javascript:alert('Stored XSS')""

For Stored XSS, please visit
http://localhost:8161/camel/endpoints again to trigger it.
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Potential ClassCastException if JmsMessage isn't set anymore,CAMEL-3979,12507462,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/May/11 08:58,25/Oct/11 11:35,14/Mar/19 02:43,17/May/11 09:16,2.7.1,,,,,,,,,,,,2.7.2,2.8.0,,,camel-jms,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Correct-way-to-handle-transactions-acroos-multiple-routes-joined-with-ActiveMQ-tp4402998p4402998.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14037,,,2011-05-17 08:58:54.0,,,,,,,0|i01y3r:,9294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring-WS producer doesn't propagate headers,CAMEL-3974,12507187,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rkettelerij,rkettelerij,rkettelerij,13/May/11 21:53,25/Oct/11 11:35,14/Mar/19 02:43,29/May/11 22:19,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-spring-ws,,,,0,,,,,,"The Spring-WS producer only sets the body of the exchange, headers aren't propagated.

See Nabble: http://camel.465427.n5.nabble.com/spring-ws-component-not-propagating-in-headers-to-out-message-td4393731.html",,,,,,,,,,,,,,,,,,16/May/11 15:17;schmug;propagate-headers.patch;https://issues.apache.org/jira/secure/attachment/12479336/propagate-headers.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-16 15:17:03.341,,,no_permission,,,,,,,,,,,,,,14018,,,Sun May 29 22:19:00 UTC 2011,,,,,,,0|i01y2n:,9289,,,,,,,,,16/May/11 15:17;schmug;simple patch to propagate in headers to out message. Unit test could perhaps be simplified.,"27/May/11 13:44;davsclaus;Richard whats the status of this?

Getting bugs fixed is important so we have a path for doing a release.","27/May/11 14:46;rkettelerij;Claus, I'll pick it up this weekend. Had some trouble with my dev environment so I haven't committed a fix yet.","29/May/11 22:19;rkettelerij;trunk 1128970.

Thanks Doug for providing a patch, I've polished it a bit.",,,,,,,,,,,,,,,,,,,,,,,,,,
ftp producer - If sending noop fails it should force re-connection attempt,CAMEL-3965,12506935,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/May/11 05:35,25/Oct/11 11:35,14/Mar/19 02:43,12/May/11 06:12,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-ftp,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Limitations-or-bug-on-FTP2-with-FTPS-tp4372423p4372423.html

The RemoteFileProducer should force check if the connection is alive on the client, if the noop fails.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14050,,,2011-05-12 05:35:50.0,,,,,,,0|i01y0n:,9280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Route cannot be started within web-console, if autoStartup=""false"" is set in camel.xml",CAMEL-3950,12506417,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jimmyrueedi,jimmyrueedi,06/May/11 14:46,25/Oct/11 11:35,14/Mar/19 02:43,08/May/11 09:49,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-web,,,,0,,,,,,"When a route has autoStartup=""false"" set in the camel.xml, it cannot be started anymore in the web- console.
In the logfile, an entry is generated, similar to this:
""Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp7446303-52""
If a route does not have autoStartup=""false"", it can be stopped and started normally (as before with ActiveMQ 5.4.2 / Camel 2.4.0)

Reproduce steps:
- Configure a route with ""<route autoStartup=""false"">""
- Start the ActiveMQ Service
- Navigate to ""http://server.domain.tld:8161/camel/routes
- try to start the route with the button ""Start""
- check the logfile ""activemq.log""
","Windows 2008 R2, JRE 1.6, ActiveMQ 5.5.0, Camel 2.7.1 (included in ActiveMQ 5.5.0 plus: camel-ftp-2.7.1.jar)
NO JDK Installed",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-26 15:39:27.925,,,no_permission,,,,,,,,,,,,,,14074,,,Mon May 30 06:50:28 UTC 2011,,,,,,,0|i01xxb:,9265,,,,,,,,,"26/May/11 15:39;davsclaus;I think you need to upgrade your AMQ as well, as it ""rebrand"" the camel-web console it embeds.","30/May/11 06:50;jimmyrueedi;Well, I took the snapshots of camel and AMQ from May, 26th and upgraded my installation.
The behaviour is unchanged, even I removed the ""old"" .jar-files:
------------------- snip -------------------
2011-05-30 08:41:48,136 | INFO  | Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp2889719-43
------------------- snip -------------------
Seems, there is no change in effect, actually.

Update: 27.06.2011: Took the latest Snapshots actually (ActiveMQ5.6 from June, 24th and camel 2.8 from Junde 27th)
--> no change in behaviour, still doesn't work

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with the RSET command with POP3 servers,CAMEL-3948,12506357,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hadrian,hadrian,06/May/11 01:51,25/Oct/11 11:36,14/Mar/19 02:43,27/Jun/11 10:59,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-mail,,,,0,,,,,,"Issue is discussed in this [thread|http://camel.465427.n5.nabble.com/POP3-mail-deletion-td4370158.html].

Note: Donald posted interesting and helpful findings.",,,,,,,,,,,,,,,,,,21/Jun/11 22:21;dwhytock;MailConsumer.java;https://issues.apache.org/jira/secure/attachment/12483362/MailConsumer.java,27/Jun/11 16:30;dwhytock;MailConsumer_20110627.java;https://issues.apache.org/jira/secure/attachment/12483974/MailConsumer_20110627.java,21/Jun/11 22:21;dwhytock;diff.txt;https://issues.apache.org/jira/secure/attachment/12483363/diff.txt,27/Jun/11 16:30;dwhytock;diff_20110627.txt;https://issues.apache.org/jira/secure/attachment/12483973/diff_20110627.txt,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2011-06-20 03:08:47.671,,,no_permission,,,,,,,,,,,,,,13891,,,Fri Jul 01 03:04:03 UTC 2011,,,,,,,0|i01xwv:,9263,,,,,,,,,"20/Jun/11 03:08;dwhytock;Contributing this patch to MailConsumer.  It adds a property, POP3UID, to the exchange when it's created from a POP3 message, then synchronizes the exchange with the folder's message in processCommit() to ensure deletion.","20/Jun/11 03:37;njiang;Hi Donald,

Can you submit a diff patch instead of the java file?
It will be helpful for us to review the patch.
","20/Jun/11 06:57;davsclaus;This patch cannot be accepted as it uses some internal sun code, eg it has these imports
{code}
import com.sun.mail.pop3.POP3Folder;
import com.sun.mail.pop3.POP3Message;
{code}
","21/Jun/11 22:21;dwhytock;Generates a UID for POP3 messages by concatenating the header lines and using UUID.nameUUIDFromBytes().  Saves generated UID to the POP3UID property on the exchange.

This will work for any POP3 server that generates a sufficiently unique message ID in the headers, without being dependent on the format of the headers.",27/Jun/11 09:38;davsclaus;Donald thanks for the new patch.,27/Jun/11 10:52;davsclaus;Donald I have committed your patch on trunk with a few slight minor changes. Do you mind testing the code on trunk to see if that works on your system?,27/Jun/11 10:59;davsclaus;I have also removed the rsetbeforequit being set in the mail configuration. So Camel does not set that option at all.,"27/Jun/11 16:09;dwhytock;Not working on my system with the changes.  Will isolate the problem change and resubmit.
",27/Jun/11 16:30;dwhytock;getAllHeaders() returns a set of Header objects. Concatenating and comparing them requires extracting the text from them.,01/Jul/11 03:04;njiang;I just applied the diff_20110627 into the camel trunk.,,,,,,,,,,,,,,,,,,,,
AnnotationTypeConverterLoader fails for folders containing spaces,CAMEL-3942,12506305,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jcdelmas,jcdelmas,05/May/11 16:10,25/Oct/11 11:36,14/Mar/19 02:43,09/May/11 12:14,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"This problem appears when jar dependencies with type converters have path containing space characters.

In my case, the camel-mail-2.7.1.jar jar is located in my local maven repository.

I get this error during my project startup: 
{noformat}
[...]
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/D:/Documents and Settings/501915291/.m2/repository/org/apache/camel/camel-mail/2.7.1/camel-mail-2.7.1.jar!/META-INF/services/org/apache/camel/TypeConverter
        at java.net.URI$Parser.fail(URI.java:2809)
        at java.net.URI$Parser.checkChars(URI.java:2982)
        at java.net.URI$Parser.parse(URI.java:3019)
        at java.net.URI.<init>(URI.java:578)
        at java.net.URL.toURI(URL.java:918)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:118)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:108)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:69)
        ... 63 more
{noformat}

FIX:
findPackages method in AnnotationTypeConverterLoader shouldn't use URIs to store already visited jars.",Windows XP,,,7200,7200,,0%,7200,7200,,,,,,,,,09/May/11 08:24;jcdelmas;spaces_issue.patch;https://issues.apache.org/jira/secure/attachment/12478573/spaces_issue.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-07 08:59:50.776,,,no_permission,,,,,,,,,,,,,,14068,,,Mon May 09 12:14:34 UTC 2011,,,Patch Available,,,,0|i01xvj:,9257,,,,,,,,,07/May/11 08:59;davsclaus;Jean can you re-attach your patch and this time make sure to [x] in grant license to Apache. Otherwise we cannot accept your patch.,"09/May/11 08:37;jcdelmas;Ok, the patch has been re-attached.","09/May/11 12:14;davsclaus;Thanks for the patch. I have applied it, although I used getPath from the URL (no need to convert to URI).

Do you mind testing code from trunk on your system?",,,,,,,,,,,,,,,,,,,,,,,,,,,
JdbcAggregationRepository count (*) is not working with MySQL 5.0,CAMEL-3936,12506078,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,bouba,bouba,03/May/11 17:38,03/May/11 20:49,14/Mar/19 02:43,03/May/11 20:19,2.7.1,,,,,,,,,,,,2.8.0,,,,camel-sql,,,,0,Aggregation,Camel,JDBC,MySQL,Repository,"The JdbcAggregationRepository makes a {noformat} 'SELECT COUNT (*) FROM....'{noformat}  SQL request at line 131 in the source code. 

This appears to be incorrect with MySQL because theire is a space between COUNT and (. 

By replacing the request with {noformat} 'SELECT COUNT(*) FROM....'{noformat}  (without the white space) the bug is corrected for MySQL (I think it should be tested with other database without the space). 

This request can be tested with Mysql Query Browser (the returned error is the same as the one encountered when we execute the JdbcAggregationRepository with Camel). 

The exception returned is the following: 
{noformat} ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID:COE-WRKST2-1749-1304443569312-2:2:1:88:1. Exhausted after delivery attempt: 1 caught: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:233)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:673)
	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:728)
	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:744)
	at org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:775)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:131)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:114)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:114)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:251)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:189)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:662)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
	at sun.reflect.GeneratedConstructorAccessor83.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:409)
	at com.mysql.jdbc.Util.getInstance(Util.java:384)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1054)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3566)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3498)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1959)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2113)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2568)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2113)
	at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:2275)
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96)
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96)
	at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:643)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)
	... 42 more{noformat} ",MySQL 5.0 (but I suspect the bug appears with all 5.X versions...) ,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-03 20:04:09.638,,,no_permission,,,,,,,,,,,,,,14065,,,Tue May 03 20:49:22 UTC 2011,,,,,,,0|i01xu7:,9251,,,,,,,,,"03/May/11 20:04;muellerc;{code}
SELECT COUNT(*) FROM....
{code}

also works for:
- MySQL 5.1
- Oracle 10g


It looks like it's the right query: http://www.w3schools.com/SQL/sql_func_count.asp

I will change it
",03/May/11 20:14;muellerc;It works also with H2,"03/May/11 20:18;muellerc;Hello Baptiste!

Thanks for reporting this issue. I committed the proposed change with revision 1099228.

Cheers,
Christian","03/May/11 20:20;bouba;I also think the syntax without space is the good one. 

Thanks for the reactivity Christian ! 

Baptiste","03/May/11 20:49;rkettelerij;Note that you can work around this issue in MySQL by setting the SQL_MODE parameter to ""IGNORE_SPACE"". 
Nevertheless it's good that this is fixed in 2.8.",,,,,,,,,,,,,,,,,,,,,,,,,
custom interceptor - wrapProcessorInInterceptors - passing parent Description on Split,CAMEL-3928,12505924,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,javier.arilos@gmail.com,javier.arilos@gmail.com,02/May/11 12:55,25/Oct/11 11:36,14/Mar/19 02:43,04/May/11 11:24,2.2.0,2.3.0,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"In routes with a split step, when my wrapProcessorInInterceptors method is called, the  ProcessorDefinition<?> paremeter is referencing the Split definition instead of steps inside it.

For example, for the route:

from(""direct:a"").routeId(""route:a"")
        .split(xpath(""//a/b"")).id(""task:split.products"")
            .log(""*** splited ::: body : ${body} "").id(""task:handle.that"") (*)
            .setHeader(""insplit"",constant(""in-split"")) (*)
        .end()
        .log(""* aftersplit ::: body : ${body}"").id(""task:after.split"");

for steps inside the split (*) the ProcessorDefinition is referencing the splitdefinition, while i think it should point to the log and setHeader steps.

It can be easily fixed,  in class:::

org.apache.camel.processor.DefaultChannel

in the method initChannel, changing

target = strategy.wrapProcessorInInterceptors(routeContext.getCamelContext(), outputDefinition, target, next);

by this:

target = strategy.wrapProcessorInInterceptors(routeContext.getCamelContext(), traceDef, target, next);

","ubuntu 10.04
java version ""1.6.0_22""
Java HotSpot(TM) Client VM (build 17.1-b03, mixed mode, sharing)",,,0,0,,0%,0,0,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-02 15:27:32.302,,,no_permission,,,,,,,,,,,,,,14060,,,Wed May 04 11:24:41 UTC 2011,,,Patch Available,,,,0|i01xsf:,9243,,,,,,,,,"02/May/11 15:27;hadrian;@Javier, thanks for noticing this and for providing a fix!
You checked the patch available box. Do you intend to provide a patch with a unit test as well, or you were referring to the solution you provided in the description? A unit test would be fantastic.","02/May/11 16:06;javier.arilos@gmail.com;Hadrian,
I were referring to the solution provided, sorry but I wouldn't know how to
correctly write such a test...
Thank you.
Javier.

2011/5/2 Hadrian Zbarcea (JIRA) <jira@apache.org>

","02/May/11 16:14;hadrian;@Javier, thanks for the clarification. No worries then. We appreciate unit tests whenever contributors provide them, otherwise, we have to write them ourselves to prevent the issue from popping up again in a future release. I will assign this to me and provide a unit test. It doesn't make your contribution any less important. Thanks again.","02/May/11 16:22;javier.arilos@gmail.com;Thank you Hadrian,
may I have a look at your tests when you are done? this way I will learn for
next time.
Regards.

2011/5/2 Hadrian Zbarcea (JIRA) <jira@apache.org>

","04/May/11 11:24;davsclaus;Javier thanks for reporting. I have fixed this on trunk, and added unit test as well.",,,,,,,,,,,,,,,,,,,,,,,,,
CXF's Provider service using the payload data-format may not transfer the payload correctly,CAMEL-3927,12505919,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,ay,ay,02/May/11 11:40,25/Oct/11 11:35,14/Mar/19 02:43,02/May/11 15:37,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,"When using the Provider based service (i.e., one using the Provider<Source>'s invoke(Source m) signature), I observed that the payload content is not correctly extracted in the first call. The reason seems to be that the content is passed as a StaxSource instance to the camel's cxf binding component (DefaultCxfBinding) and this expects currently a DOMSource for the payload data format and therefore it not able to extract the payload content.

Some more information is described in a related mail thread at camel-user 
http://camel.465427.n5.nabble.com/Question-on-RemoveClassTypeInterceptor-in-Camel-Cxf-s-Payload-mode-td4358188.html

This problem can be reproduced using CxfConsumerProviderTest when this test is executed using the payload data format. I suppose this test should actually be executed in the payload data format mode. But this is currently not the case.

So, I am attaching the modified CxfConsumerProviderTest that uses the payload data format. This test will fail with the current trunk camel-cxf implementation. I am also attatching the patch file of the suggested change in DefaultCxfBinding that can resolve this issue and successfully pass this test.

I think we can eventually consider a different CxfPayload implementation that does not require a DOM object at all. But for now, I think we can live with this correction to avoid this payload extraction issue.

Thanks.
Regards, Aki


",,,,7200,7200,,0%,7200,7200,,,,,,,,,02/May/11 11:43;ay;camel-cxf-20110429b-patch.txt;https://issues.apache.org/jira/secure/attachment/12477943/camel-cxf-20110429b-patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-02 15:37:35.007,,,no_permission,,,,,,,,,,,,,,14094,,,Mon May 02 15:37:35 UTC 2011,,,Patch Available,,,,0|i01xs7:,9242,,,,,,,,,"02/May/11 11:43;ay;M       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerProviderTest.java
M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java
","02/May/11 15:37;wtam;Committed revision 1098630.  Thanks Aki Yoshida for the Jira and the patch.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Example 'camel-example-management': a lot of exceptions during shutdown,CAMEL-3925,12505916,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,amarkevich,amarkevich,02/May/11 10:56,25/Oct/11 11:35,14/Mar/19 02:43,02/May/11 15:33,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,examples,,,,0,,,,,,"I run example using
mvn camel:run
And stop the example with ctrl + c
Console output attached.","apache-maven-3.0.3
jdk1.6.0_25_x64",,,,,,,,,,,,,,,,,02/May/11 10:57;amarkevich;camel-example-management.log;https://issues.apache.org/jira/secure/attachment/12477938/camel-example-management.log,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14104,,,2011-05-02 10:56:17.0,,,,,,,0|i01xrr:,9240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-dns creates a new exchange and drops headers,CAMEL-3920,12505829,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,joed,joed,joed,30/Apr/11 00:31,25/Oct/11 11:35,14/Mar/19 02:43,30/Apr/11 00:33,2.8.0,,,,,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,"From irc:

17:33  sproingie> i have a weird problem with the dns component... it seems to not copy headers properly
17:34  sproingie> .setHeader(""foo"", constant(""bar"")).to(""dns:ip"").log(LogLevel.INFO, ""foo=${in.header.foo}"")
17:34  sproingie> foo turns up blank


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-30 06:50:28.673,,,no_permission,,,,,,,,,,,,,,14096,,,Sat Apr 30 06:50:28 UTC 2011,,,,,,,0|i01xqn:,9235,,,,,,,,,30/Apr/11 06:50;davsclaus;Yeah it should propagate headers and attachments so you dont loose those.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfPayloadConverter may start failing to convert a CxfPayload to a Node,CAMEL-3917,12505801,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ay,ay,29/Apr/11 15:45,25/Oct/11 11:36,14/Mar/19 02:43,29/Apr/11 18:56,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,"There is an issue with CxfPayloadConverter that can lead to a failure in converting the CxfPayload into something which is actually convertible. 

This problem happens when you try to convert a CxfPayload instance that has an empty body list into a Node instance. This returns null and subsequently registers this type mapping key (CxfPayload->Node) in org.apache.camel.impl.converter.BaseTypeConverterRegistry's conversion-misses table. Because of this, a subsequent conversion using a CxfPayload instance with an non empty body list will permanently fail.

I am attaching a modified CxfPayloadConversionTest that includes testCxfPayloadToNode that illustrates this problem. Currently, the last assertion of this test is failing when this issue is present.

I think we can fix this problem by returning Void.TYPE instead of a null for this case.
In this way, the conversion is regarded as a success and there will be no entry in the conversion-misses table.

So, I am also attaching the modiefied CxfPayloadConverter class that can handle this test case.

",,,,3600,3600,,0%,3600,3600,,,,,,,,,29/Apr/11 15:52;ay;camel-cxf-20110429-patch.txt;https://issues.apache.org/jira/secure/attachment/12477806/camel-cxf-20110429-patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-29 18:34:58.449,,,no_permission,,,,,,,,,,,,,,14102,,,Fri Apr 29 18:56:21 UTC 2011,,,Patch Available,,,,0|i01xpz:,9232,,,,,,,,,"29/Apr/11 15:52;ay;M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java
M       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/converter/CxfPayloadConverterTest.java","29/Apr/11 18:34;davsclaus;Thanks Aki for looking into this. Yeah those fallback converters is a bit tricky. You need to return Void.TYPE if you cannot convert it at this given time, but you may be able to do that later.",29/Apr/11 18:56;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,
jms listener can cause class cast exception if message body type changed during routing,CAMEL-3913,12505767,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Apr/11 08:59,25/Oct/11 11:36,14/Mar/19 02:43,29/Apr/11 10:38,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/error-handling-on-Http-POST-from-ActiveMQ-to-PHP-application-td4347185.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14090,,,2011-04-29 08:59:14.0,,,,,,,0|i01xp3:,9228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consumer URI parameters ignored after Route Restart,CAMEL-3912,12505748,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rrojas-chariot,rrojas-chariot,29/Apr/11 03:39,25/Oct/11 11:35,14/Mar/19 02:43,29/Apr/11 18:44,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"The URI parameters for a consumer appear to be ignored or disappear when the route where this consumer defined gets restarted.
One example could be JPA query passed in the URI and is used to filter the results from the consumer.
The attached test case shows this.
Look at the Readme.txt, camel-context.xml, and JPARouteRestartTest class for more information.

Also, took a stab at fixing the problem and provided a patch with a possible solution. I ran the unit tests after that change and all passed. :)","JDK ""1.6.0_24"", Apache Maven 2.2.1, MAC OS X 10.6.7",,,,,,,,,,,,,,,,,29/Apr/11 14:23;rrojas-chariot;jpa-route-start-stop-testcase.tar.gz;https://issues.apache.org/jira/secure/attachment/12477760/jpa-route-start-stop-testcase.tar.gz,29/Apr/11 14:24;rrojas-chariot;uri-params-ignored-route-restart-patch.txt;https://issues.apache.org/jira/secure/attachment/12477761/uri-params-ignored-route-restart-patch.txt,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-04-29 06:50:32.671,,,no_permission,,,,,,,,,,,,,,14088,,,Fri Apr 29 23:13:13 UTC 2011,,,Patch Available,,,,0|i01xov:,9227,,,,,,,,,"29/Apr/11 06:50;davsclaus;Robert can you re-attach your patches and make sure to [x] in grant license to Apache. We can only accept patches at Apache if you have done that, so there wont be a copyright issue. 

You can tell if there is an Apache feather icon next to the files.","29/Apr/11 14:23;rrojas-chariot;Sure, no problem. Let me know if you need me to do anything or have any questions. ",29/Apr/11 18:44;davsclaus;Thanks for the patch. I added an unit test in camel-core instead of the jpa test you provided.,"29/Apr/11 23:13;rrojas-chariot;Sure, any time.",,,,,,,,,,,,,,,,,,,,,,,,,,
Configuring any Byte type header via Spring XML constant would throw java.lang.ClassCastException,CAMEL-3909,12505340,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,acodapella,acodapella,27/Apr/11 18:49,25/Oct/11 11:36,14/Mar/19 02:43,12/May/11 06:56,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-smpp,,,,0,,,,,,"Configuring any Byte type header via Spring XML constant would throw java.lang.ClassCastException

{code:xml}
<camel:setHeader headerName=""CamelSmppDestAddrTon"">
  <camel:constant>0</camel:constant>
</camel:setHeader>
{code}

java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Byte
	at org.apache.camel.component.smpp.SmppBinding.createSubmitSm(SmppBinding.java:105)
	at org.apache.camel.component.smpp.SmppProducer.process(SmppProducer.java:128)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.component.mina.MinaConsumer$ReceiveHandler.messageReceived(MinaConsumer.java:117)
	at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:570)
	at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
	at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
	at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
	at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
	at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)",,,,,,,,,,,,,,,,,,29/Apr/11 21:51;acodapella;CAMEL-3909-patch.txt;https://issues.apache.org/jira/secure/attachment/12477845/CAMEL-3909-patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-27 20:36:34.057,,,no_permission,,,,,,,,,,,,,,14077,,,Thu May 12 06:56:49 UTC 2011,,,Patch Available,,,,0|i01xo7:,9224,,,,,,,,,"27/Apr/11 18:51;acodapella;the work around is to set it via URI, to avoid the (Byte) casting

{code:xml}
<camel:to uri=""smpp://user@host:1234password=78910&amp;enquireLinkTimer=3000&amp;transactionTimer=5000&amp;systemType=producer&amp;destAddrTon=0"" />
{code}

{code:title=org.apache.camel.component.smpp.SmppBinding.java|borderStyle=solid}
//  public SubmitSm createSubmitSm(Exchange exchange) throws UnsupportedEncodingException

if (in.getHeaders().containsKey(DEST_ADDR_TON)) {
 submitSm.setDestAddrTon((Byte) in.getHeader(DEST_ADDR_TON));
 } else {
 submitSm.setDestAddrTon(configuration.getDestAddrTon());
}

{code}

","27/Apr/11 20:36;davsclaus;Use the Camel type converter so it should be something like this:
{code}
submitSm.setDestAddrTon(in.getHeader(DEST_ADDR_TON, byte.class));
{code}",27/Apr/11 20:39;davsclaus;Christian can you take a look at this? There may be other options set having similar issue?,"12/May/11 06:56;davsclaus;I have fixed this. As well I spotted an issue in the disconnect logic, not setting the session instance to null.",,,,,,,,,,,,,,,,,,,,,,,,,,
Setting fault message after doing JMS request/reply fail propagating the fault flag,CAMEL-3902,12505181,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Apr/11 11:14,25/Oct/11 11:36,14/Mar/19 02:43,26/Apr/11 12:11,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,"If you do something like

from X
  inOut JMS
  setFaultBody

Then the fault flag is not propagated back when the consumer on X sees the result.
The issue is in JmsMessage which overrides copyFrom, from DefaultMessage. And it dont propagate the fault flag.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14086,,,2011-04-26 11:14:01.0,,,,,,,0|i01xmn:,9217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Syslog Converter Not Selected Automatically,CAMEL-3890,12504938,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,rrojas-chariot,rrojas-chariot,22/Apr/11 00:54,22/Nov/11 09:57,14/Mar/19 02:43,29/Apr/11 22:34,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,"When creating a route that sends text data from a file to the Camel Syslog unmarshal data format, the following error is returned.
Looking at the org.apache.camel.component.syslog.Rfc3164SyslogConverter reveals that the @Converter annotation is missing at the class level.
The attached test case illustrates the problem. With modifications to the pom.xml to point to the modified version of the camel-syslog the test works. See the comment: CHANGE TO POINT TO MODIFIED CAMEL-SYSLOG

org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value <165>Aug  4 05:34:00 mymachine myproc[10]: %% It's\n         time to make the do-nuts.  %%  Ingredients: Mix=OK, Jelly=OK #\n         Devices: Mixer=OK, Jelly_Injector=OK, Frier=OK # Transport:\n         Conveyer1=OK, Conveyer2=OK # %%

	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:143)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.ExchangeHelper.convertToMandatoryType(ExchangeHelper.java:142)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.syslog.Rfc3164SyslogDataFormat.marshal(Rfc3164SyslogDataFormat.java:29)[camel-syslog-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:57)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:330)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:157)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:121)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)[camel-core-2.7.1.jar:2.7.1]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_24]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_24]
	at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]
","Mac OS X 10.6.7, JDK 1.6, Maven 3.0.2, Camel 2.7.1",,,,,,,,,,,,,,,,,29/Apr/11 19:53;rrojas-chariot;camel-syslog-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12477836/camel-syslog-test.tar.gz,29/Apr/11 19:52;rrojas-chariot;camel-syslog.patch;https://issues.apache.org/jira/secure/attachment/12477835/camel-syslog.patch,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-04-29 19:02:30.461,,,no_permission,,,,,,,,,,,,,,14101,,,Tue Nov 22 09:57:02 UTC 2011,,,Patch Available,,,,0|i01xj3:,9201,,,,,,,,,29/Apr/11 19:02;davsclaus;Roberto do you mind re-attaching the patches and make sure to [x] about the Apache license. Then we should be able to get the patch into the trunk,"29/Apr/11 19:55;rrojas-chariot;Sure, no problem. I'll keep it in mind to apply the ASF license when upload those files.","29/Apr/11 22:34;joed;Fixed in revision 

1097978, Thanks Roberto!","29/Apr/11 23:11;rrojas-chariot;Sure, any time.","21/Nov/11 01:41;geemang;Has this been validated in 2.8.2 I get the same error. Hopefully something I'm doing wrong...

{code}
from(""direct:syslog"")
  .convertBodyTo(java.lang.String.class)
  .marshal().syslog()
  .to(""netty:udp://localhost:10514"")
{code}

2011-11-20 19:36:34,462 [main] INFO  interceptor.Tracer  - ID-martins-macbook-pro-local-50036-1321839379898-1-1 >>> (route1) from(direct://syslog) -->  <<< Pattern:InOnly, Headers:{breadcrumbId=ID-martin-gees-macbook-pro-local-50036-1321839379898-1-2}, BodyType:String, Body:THIS IS A TEST
2011-11-20 19:36:34,469 [main] INFO  interceptor.Tracer  - ID-martins-macbook-pro-local-50036-1321839379898-1-1 >>> (route1)  --> Marshal[org.apache.camel.model.dataformat.SyslogDataFormat@66e8791] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-martin-gees-macbook-pro-local-50036-1321839379898-1-2}, BodyType:String, Body:THIS IS A TEST
| Error 2011-11-20 19:36:34,618 [main] ERROR processor.DefaultErrorHandler  - Failed delivery for exchangeId: ID-martin-gees-macbook-pro-local-50036-1321839379898-1-1. Exhausted after delivery attempt: 1 caught: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value THIS IS A TEST
Message: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value THIS IS A TEST
   Line | Method
->> 140 | mandatoryConvertTo       in org.apache.camel.impl.converter.BaseTypeConverterRegistry
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
|   143 | convertToMandatoryType   in org.apache.camel.util.ExchangeHelper
|    29 | marshal . . . . . . . .  in org.apache.camel.component.syslog.Rfc3164SyslogDataFormat
|    58 | process                  in org.apache.camel.processor.MarshalProcessor
|    50 | process . . . . . . . .  in org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|   162 | process . . . . . . . .  in org.apache.camel.processor.interceptor.TraceInterceptor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|    50 | process . . . . . . . .  in org.apache.camel.processor.interceptor.Debug$1
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|   318 | processErrorHandler . .  in org.apache.camel.processor.RedeliveryErrorHandler
|   209 | process                  in     ''
|   306 | process . . . . . . . .  in org.apache.camel.processor.DefaultChannel
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|   116 | process . . . . . . . .  in org.apache.camel.processor.Pipeline
|    79 | process                  in     ''
|   132 | process . . . . . . . .  in org.apache.camel.processor.UnitOfWorkProcessor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|    69 | process . . . . . . . .  in org.apache.camel.management.InstrumentationProcessor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    61 | process . . . . . . . .  in org.apache.camel.component.direct.DirectProducer
|   102 | process                  in org.apache.camel.processor.UnitOfWorkProcessor
|   104 | process . . . . . . . .  in org.apache.camel.util.AsyncProcessorHelper
|    85 | process                  in org.apache.camel.processor.DelegateAsyncProcessor
|    63 | process . . . . . . . .  in org.apache.camel.processor.UnitOfWorkProducer
|   351 | doInProducer             in org.apache.camel.impl.ProducerCache$2
|   323 | doInProducer . . . . . . in     ''
|   222 | doInProducer             in org.apache.camel.impl.ProducerCache
|   323 | sendExchange . . . . . . in     ''
|   168 | send                     in     ''
|   110 | send . . . . . . . . . . in org.apache.camel.impl.DefaultProducerTemplate
|   123 | sendBody                 in     ''
|   341 | sendBody . . . . . . . . in     ''
|    49 | testSendingSyslogMessage in com.icsynergy.idr.SyslogRoutingTests
|    45 | runReflectiveCall . . .  in org.junit.runners.model.FrameworkMethod$1
|    15 | run                      in org.junit.internal.runners.model.ReflectiveCallable
|    42 | invokeExplosively . . .  in org.junit.runners.model.FrameworkMethod
|    20 | evaluate                 in org.junit.internal.runners.statements.InvokeMethod
|    28 | evaluate . . . . . . . . in org.junit.internal.runners.statements.RunBefores
|    30 | evaluate                 in org.junit.internal.runners.statements.RunAfters
|   263 | runLeaf . . . . . . . .  in org.junit.runners.ParentRunner
|    68 | runChild                 in org.junit.runners.BlockJUnit4ClassRunner
|    47 | runChild . . . . . . . . in     ''
|   231 | run                      in org.junit.runners.ParentRunner$3
|    60 | schedule . . . . . . . . in org.junit.runners.ParentRunner$1
|   229 | runChildren              in org.junit.runners.ParentRunner
|    50 | access$000 . . . . . . . in     ''
|   222 | evaluate                 in org.junit.runners.ParentRunner$2
|    30 | evaluate . . . . . . . . in org.junit.internal.runners.statements.RunAfters
|   300 | run                      in org.junit.runners.ParentRunner
|   128 | runChild . . . . . . . . in org.junit.runners.Suite
|    24 | runChild                 in     ''
|   231 | run . . . . . . . . . .  in org.junit.runners.ParentRunner$3
|    60 | schedule                 in org.junit.runners.ParentRunner$1
|   229 | runChildren . . . . . .  in org.junit.runners.ParentRunner
|    50 | access$000               in     ''
|   222 | evaluate . . . . . . . . in org.junit.runners.ParentRunner$2
|   300 | run                      in org.junit.runners.ParentRunner
|   285 | doCall . . . . . . . . . in _GrailsTest_groovy$_run_closure4
|   243 | doCall                   in _GrailsTest_groovy$_run_closure2
|   190 | doCall . . . . . . . . . in _GrailsTest_groovy$_run_closure1_closure21
|   179 | doCall                   in _GrailsTest_groovy$_run_closure1
^    82 | doCall . . . . . . . . . in TestApp$_run_closure1
Caused by RuntimeCamelException: java.nio.BufferUnderflowException
->> 834 | invokeMethod             in org.apache.camel.util.ObjectHelper
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
|    50 | convertTo                in org.apache.camel.impl.converter.StaticMethodTypeConverter
|   182 | doConvertTo . . . . . .  in org.apache.camel.impl.converter.BaseTypeConverterRegistry
|    47 | doConvertTo              in org.apache.camel.impl.converter.LazyLoadingTypeConverter
|   138 | mandatoryConvertTo . . . in org.apache.camel.impl.converter.BaseTypeConverterRegistry
|   143 | convertToMandatoryType   in org.apache.camel.util.ExchangeHelper
|    29 | marshal . . . . . . . .  in org.apache.camel.component.syslog.Rfc3164SyslogDataFormat","22/Nov/11 09:57;davsclaus;Martin what runtime do you use? eg do you run Camel in ServiceMix, Karaf, Tomcat etc?
",,,,,,,,,,,,,,,,,,,,,,,,
Stopping a route should not stop context scoped error handler,CAMEL-3878,12504482,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Apr/11 11:19,02/May/13 02:29,14/Mar/19 02:43,17/Apr/11 14:27,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"When stopping a route using .stopRoute from CamelContext or JMX etc. then the error handler should not be stopped if its a context scoped error handler, as it would be re-used.

We should defer stopping those resources till Camel is shutting down.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14168,,,2011-04-17 11:19:42.0,,,,,,,0|i01xgf:,9189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AdviceWith - Spring XML using a context scoped error handler causes adviceWith to not work,CAMEL-3877,12504473,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Apr/11 08:44,25/Oct/11 11:35,14/Mar/19 02:43,17/Apr/11 09:58,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,camel-spring,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Error-Handling-with-Spring-XML-tp4296920p4296920.html

I have reproduced the issue. Its only when you use a context scoped error handler. It works in all other situations. And only for XML DSL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14152,,,2011-04-17 08:44:31.0,,,,,,,0|i01xg7:,9188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-xmpp - Should stop and clean session, so hot-deploy works ",CAMEL-3873,12504446,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Apr/11 12:45,25/Oct/11 11:35,14/Mar/19 02:43,16/Apr/11 12:47,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-xmpp,,,,0,,,,,,"See this stacktrace


{code}
14:10:55,806 | ERROR | ExtenderThread-8 | ContextLoaderListener            | 72 - org.springframework.osgi.extender - 1.2.0 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=qbus-camel-osgi, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[xmpp://articleRoute@localhost?password=******&room=mechatron%40conference.mw-pc]. Reason: java.lang.NullPointerException
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:362)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:93)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.startProducer(ProducerCache.java:124)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:429)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:847)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:86)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:893)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:250)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1800)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1726)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1528)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1420)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1321)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1299)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)[72:org.springframework.osgi.extender:1.2.0]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_14]
Caused by: java.lang.NullPointerException
	at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:957)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:904)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1415)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.apache.camel.component.xmpp.XmppEndpoint.createConnection(XmppEndpoint.java:140)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09]
	at org.apache.camel.component.xmpp.XmppGroupChatProducer.doStart(XmppGroupChatProducer.java:76)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:360)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	... 65 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14116,,,2011-04-16 12:45:18.0,,,,,,,0|i01xfb:,9184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cache- ehcache cache replication data not distributed across nodes,CAMEL-3862,12504287,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nannou9,nannou9,14/Apr/11 16:51,25/Oct/11 11:36,14/Mar/19 02:43,16/Apr/11 12:21,2.6.0,2.7.0,2.7.1,,,,,,,,,,2.7.2,2.8.0,,,camel-cache,,,,0,camel-cache,cluster,jms,replication,,Cache replication across cluster nodes doesn't work using jms or rmi replication.,Apache ServiceMix 4.3.1-fuse-01-09 and newest snapshots,,,7200,7200,,0%,7200,7200,,,,,,,,,16/Apr/11 11:06;nannou9;camel-cache.replication.patch;https://issues.apache.org/jira/secure/attachment/12476522/camel-cache.replication.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-16 12:21:20.575,,,no_permission,,,,,,,,,,,,,,14118,,,Sat Apr 16 12:21:20 UTC 2011,,,,,,,0|i01xcv:,9173,,,,,,,,,"14/Apr/11 16:51;nannou9;I have already solved the problem. I will be happy to see my fix in 2.8 version :). Will post a patch soon as it needs to be polished. 
Another step closer to bring camel-cache to java- clustered world :)

BTW. I guess i am the very first person who get cache cluster to work using camel-cache component as this bug was not reported/fixed before :)","16/Apr/11 11:04;nannou9;Replication doesn't work before, because a second parameter of put,remove methods which was kind of ignore- listeners was set to true.

What was fixed:
- now you can replicate your cache across nodes using listeners

Of course it was tested in real life and using standard test cases","16/Apr/11 11:06;nannou9;Did not granted license to ASF before, so uploading again :)

Note that end lines are unix- like",16/Apr/11 12:21;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-web - Cannot browse endpoints if messages was consumed from jms queue,CAMEL-3861,12504242,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Apr/11 08:54,25/Oct/11 11:35,14/Mar/19 02:43,14/Apr/11 09:38,2.7.0,,,,,,,,,,,,2.7.2,2.8.0,,,camel-web,,,,0,,,,,,"You get a NPE if you brows the endpoint.

Caused by: 
java.lang.NullPointerException
        at org.apache.camel.web.resources.$_scalate_$ExchangeResource_index_ssp$$anonfun$$_scalate_$render$2.apply(ExchangeResource.index.ssp.scala:46)
        at org.apache.camel.web.resources.$_scalate_$ExchangeResource_index_ssp$$anonfun$$_scalate_$render$2.apply(ExchangeResource.index.ssp.scala:40)
        at scala.collection.Iterator$class.foreach(Iterator.scala:631)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14112,,,2011-04-14 08:54:27.0,,,,,,,0|i01xcn:,9172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel cxfrs producer should support the configure the query parameter from the Exchange.HTTP_QUERY message header,CAMEL-3860,12504224,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Apr/11 04:31,25/Oct/11 11:36,14/Mar/19 02:43,15/Apr/11 09:33,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,"As CXFRS producer can't deal with the HttpQuery from the Exchange.HTTP_QUERY message header, the camel-cxfrs router can't route the http get request with query rightly.
Here is the mail thread[1] which talks about it.

[1]http://camel.465427.n5.nabble.com/CXF-RS-QueryParam-and-HeaderParam-tp4301808p4301808.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14211,,,2011-04-14 04:31:48.0,,,,,,,0|i01xcf:,9171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.quartz package export not versioned Quartz component,CAMEL-3856,12504134,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davaleri,davaleri,13/Apr/11 04:14,25/Oct/11 11:35,14/Mar/19 02:43,13/Apr/11 13:23,2.7.0,2.7.1,,,,,,,,,,,2.7.2,2.8.0,,,camel-quartz,,,,0,,,,,,"The Quartz packaging for OSGi uses the following configuration:

{code:xml}
<camel.osgi.export.pkg>
org.apache.camel.component.quartz.*,
org.apache.camel.routepolicy.quartz.*
</camel.osgi.export.pkg>
{code}

This gets concatenated as ${camel.osgi.export.pkg};${camel.osgi.version} and then fed to the Felix Bundle Plug-in.  The issue I am seeing is that only the second package gets versioned in the bundle manifest.  org.apache.camel.component.quartz is exported without a version.",,,,,,,,,,,,,,,,,,13/Apr/11 04:17;davaleri;CAMEL-3856.patch;https://issues.apache.org/jira/secure/attachment/12476211/CAMEL-3856.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-13 13:23:39.009,,,no_permission,,,,,,,,,,,,,,14189,,,Wed Apr 13 13:28:39 UTC 2011,,,Patch Available,,,,0|i01xbj:,9167,,,,,,,,,13/Apr/11 04:17;davaleri;Attaching patch.  Tested against OSGi integration tests.  A selection of Karaf integration tests from trunk all fail on my machine so I am assuming that there is an underlying cause not related to this patch.,"13/Apr/11 13:23;davsclaus;Thanks for the patch. I have applied it.

The quartz osgi test passes.","13/Apr/11 13:25;davsclaus;But it just shows how we are not there yet with osgi. It would be nice if the felix maven bundle plugin would be able to detect this. Or just being able to generate better metadata out of the box.

I will check the other camel components using multiple packages as they may have the same problem.","13/Apr/11 13:28;davsclaus;Bah we need to ignore the routepolicy package as well.

The rule of thumb would be to only use one ""root"" package for components, thats easier then.",,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter uses a to low configured aggregation task thread pool,CAMEL-3850,12503817,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Apr/11 09:04,25/Oct/11 11:36,14/Mar/19 02:43,09/Apr/11 11:09,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-split-aggregate-parallelProcessing-hiccup-td4288393.html#a4292610

We should increase the thread pool to use a thread pool profile which has 10 threads by default.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14200,,,2011-04-09 09:04:23.0,,,,,,,0|i01xa7:,9161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OSGi - No possibility to enable ehcache clustering as: ehcache.xml is ignored and there is no possibility to set cacheManagerFactory described camel-cache docs,CAMEL-3849,12503740,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nannou9,nannou9,08/Apr/11 14:13,25/Oct/11 11:35,14/Mar/19 02:43,11/Apr/11 08:19,2.6.0,2.7.0,,,,,,,,,,,2.7.3,2.8.0,,,camel-cache,,,,0,cacheManagerFactory,camel-cache,cluster,clustering,osgi,"This bug is caused by more than one problem as:
1. camel-cache bundle provides ehcache.xml config which is ignored so then default ehcache-failsafe.xml is taken by ehcache bundle.
2. according to camel-cache docs there is a way to set cacheManagerFactory but it seems to be not implemented as
a) default CacheManagerFactory instance is created when when CacheComponent is instantiated.
b) setter method: public void setCacheManagerFactory(CacheManagerFactory cacheManagerFactory) is used just nowhere.
c) there is no suitable filed in class CacheConfiguration

All above problems cause camel-cache to be not able to work in java- clustered world as default failsafe config. is really failsafe- w/o clustering.
",Apache ServiceMix 4.3.1-fuse-01-09,,,,,,,,,,,,,,,,,11/Apr/11 07:45;nannou9;camel-cache.patch;https://issues.apache.org/jira/secure/attachment/12475984/camel-cache.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-08 14:29:43.866,,,no_permission,,,,,,,,,,,,,,14106,,,Mon Apr 11 09:45:35 UTC 2011,,,,,,,0|i01x9z:,9160,,,,,,,,,08/Apr/11 14:29;davsclaus;Please dont add any estimates. They just distract.,"08/Apr/11 23:43;joed;Just a question, but have you tried attaching the ehcache.xml file you want as a fragment bundle?
","08/Apr/11 23:46;joed;Also, cacheManagerFactory is used as an option via ?cacheManagerFactory=theBean in the registry (spring/jndi/simple registry) so that method is used via the normal field resolution in Camel as far as I can see.","09/Apr/11 00:35;nannou9;Haven't tried with fragment. But have tried with ?cacheMana... but it faild.
This is because: c) there is no suitable filed in class CacheConfiguration

I have already fixed the problem.
Will upload the patch file soon.",10/Apr/11 07:53;davsclaus;Piotr can you upload your patch so we can get it fixed?,10/Apr/11 21:21;nannou9;Fixed loading ehcache.xml and fixed setting cacheManagerFactory property via endpoint URI,"10/Apr/11 21:26;nannou9;Sorry for late answer. I was off for longer time.

Patch is fully working. Tested using junit and a real world servicemix 4.3.1 scenerio.
Patch was made to version apache-camel-2.6.0-fuse-00-00.

What was fixed:
* ehcache.xml file in now loaded, no more ""No configuration found. Configuring ehcache from ehcache-failsafe.xml"" logs.
* ability to set property cacheManagerFactory via spring bean ref. using ""#""

What's new:
* test case testing setting cacheManagerFactory via spring ref.

Have a FUN!

Greetings
Piotr","10/Apr/11 21:43;hadrian;Piotr,

Thanks for the patch. We do not close an issue until the patch is reviewed, applied and documentation updated. The reason is that if it's marked closed, we may not realized that there is still work to be done for an issue.","11/Apr/11 07:02;nannou9;Thanks Hadrian,

i will remember about that in future. This is my 1st patch to apache. But I'm sure not the last one :).
According to the patch, i haven't got much time (spent just few hours most on analyzing camel source code) but i did my best to make just a little, easy to review changes.",11/Apr/11 07:45;nannou9;changed eols to Windows,11/Apr/11 08:19;davsclaus;Added osgi unit test as well.,11/Apr/11 08:39;nannou9;I was thinking about adding an osgi test. But was not sure what testing framework you are using. Pax Exam maybe?- this is the one i use.,"11/Apr/11 08:43;davsclaus;Yeah see
https://svn.apache.org/repos/asf/camel/trunk/tests/

We have karaf = just testing a bundle can be deployed
And then osgi = full unit test with pax-exam",11/Apr/11 08:54;nannou9;Thanks! Great! Now i know where to look for tests and where to place them :),"11/Apr/11 09:23;nannou9;I see there is only a basic osgi test. Do you want me to write additional osgi test (or extend your) that will test my patch? Then include it to the patch file? It could check is the ehcache.xml file really loaded instead of ehcache-failsafe.xml. As you know loading ehcache.xml is not so obvious with osgi classloaders so it could be helpful, especially for future changes.","11/Apr/11 09:39;davsclaus;Yeah we love more osgi tests, so please fell free to copy the unit test file and do a 2nd test. I like when we have multiple tests. Some are simple and others more complicated.

Then create a new ticket and attach the patch / unit test, and remember to [x] in grant license to apache.",11/Apr/11 09:45;nannou9;Great! Sound like a fun! Will do that soon :),,,,,,,,,,,,,
Adding type converter should clear misses map for the given type,CAMEL-3847,12503722,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Apr/11 10:19,25/Oct/11 11:36,14/Mar/19 02:43,08/Apr/11 11:25,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/addTypeConverter-does-not-clear-misses-in-BaseTypeConverterRegistry-tp4288871p4288871.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14171,,,2011-04-08 10:19:47.0,,,,,,,0|i01x9j:,9158,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
keys in cxf's protocol_headers must be handled case-insenstively,CAMEL-3842,12503631,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ay,ay,07/Apr/11 12:45,25/Oct/11 11:36,14/Mar/19 02:43,17/Apr/11 15:21,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,"There was an issue in CXF, where the protocol headers were not stored in a case-insensitive manor. This lead to the problem of not being able to find some headers or finding some headers in duplicates at some CXF interceptors. This issue was fixed in CXF-3367 for CXF 2.3.4 and 2.4. It was fixed by not using the plain HashMap for storing the protocol headers. 

Currently (in trunk), camel-cxf's CxfHeaderHelper and DefaultCxfBinding seem to be using HashMap to create a new CXF's message instance and this can lead to the same issue.

In CXF, this issue was fixed by replacing the usage of HashMap<String, List<String>)() with that of TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER). This approach was chosen over an alternative approach that converts the header names into lowercase and store them a hashmap because there are typically a small number of entries and using a binary search in TreeMap seems appropriate in this use case.

I have prepared a patch for a similar change in camel-cxf's CxfHeaderHelper and DefaultCxfBinding and also prepared some unit test cases to verify the behavior.

Please take a look at this suggestion.

Thanks.
Regards, Aki
",,,,7200,7200,,0%,7200,7200,,,,,,,,,07/Apr/11 13:12;ay;patch-trunk-20110407.zip;https://issues.apache.org/jira/secure/attachment/12475708/patch-trunk-20110407.zip,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-17 15:21:13.691,,,no_permission,,,,,,,,,,,,,,14135,,,Sun Apr 17 15:21:13 UTC 2011,,,Patch Available,,,,0|i01x8f:,9153,,,,,,,,,"07/Apr/11 13:12;ay;the zip file including the following changes
M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java
M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfHeaderHelper.java

A       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/DefaultCxfBindingTest.java
M       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfMessageHelperTest.java
",17/Apr/11 15:21;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cache osgi metadata isn't correct,CAMEL-3835,12503366,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ffang,ffang,05/Apr/11 05:14,25/Oct/11 11:35,14/Mar/19 02:43,05/Apr/11 08:02,,,,,,,,,,,,,2.7.1,2.8.0,,,camel-cache,,,,0,,,,,,"1. export package org.apache.camel.component.cache doesn't has version
2. both import and export org.apache.camel.processor.cache package",,,,,,,,,,,,,,,,,,05/Apr/11 05:25;ffang;CAMEL-3835.patch;https://issues.apache.org/jira/secure/attachment/12475459/CAMEL-3835.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-05 08:02:07.862,,,no_permission,,,,,,,,,,,,,,14190,,,Tue Apr 05 08:02:07 UTC 2011,,,,,,,0|i01x6v:,9146,,,,,,,,,05/Apr/11 08:02;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SmppProducer sends incorrect data_coding parameter,CAMEL-3834,12503340,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,sgansemer@mfoundry.com,sgansemer@mfoundry.com,04/Apr/11 20:37,25/Oct/11 11:35,14/Mar/19 02:43,30/May/11 22:04,2.7.0,,,,,,,,,,,,2.7.2,2.8.0,,,camel-smpp,,,,0,,,,,,"The dataCoding parameter on the SMPP uri allows for a value of 0,4, or 8.  Our aggregator expects the data_coding parameter on the SMPP request from the SmppProducer to be 0=SMSC Default Alphabet.  However, when 0, 4, or 8 is specified for the dataCoding parameter, the actual value sent on the smpp request is 1, 5, or 9.  It appears the MessageClass.Class1 on the GeneralDataCoding object in SmppProducer is masking an additional 1 to the byte value.

It seems the dataCoding parameter should allow you to specify the actual value that is needed as defined by the SMPP Protocol specification.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-07 20:19:37.354,,,no_permission,,,,,,,,,,,,,,14193,,,Tue Apr 12 17:48:45 UTC 2011,,,,,,,0|i01x6n:,9145,,,,,,,,,"07/Apr/11 20:19;muellerc;Steve, what exactly is the problem?
SmppProducer use the Alphabet [1] class from jsmpp to set the data coding parameter. The Alphabet enum defines the values 0x00, 0x04 and 0x08. We use the Alphabet.valueOf(dataCoding) method to set the dataCoding. If you try to set a different value than 0x00, 0x04 and 0x08, you will get an IllegalArgumentException. So, everything looks good for me. Where do you receive the 1, 5 and 9 value?

[1] http://code.google.com/p/jsmpp/source/browse/tags/2.1.0/src/java/main/org/jsmpp/bean/Alphabet.java

Christian","11/Apr/11 13:08;sgansemer@mfoundry.com;The value that ends up being sent on the smpp request for the data_coding byte ends up being 1,5, or 9. I believe this is caused because the GeneralDataCoding object that is used by the SmppProducer is using a MessageClass.CLASS1 which ends up masking an additional bit onto the value.  

In my case, our back end aggregator expects the data_coding value to be 0 which I can't specify because this extra bit is being set.","12/Apr/11 17:48;muellerc;Steve, I think I fixed this issue. I applied a patch which uses the same configuration as in the jsmpp [SimpleSubmitExample|http://code.google.com/p/jsmpp/source/browse/tags/2.1.0/src/java/examples/org/jsmpp/examples/SimpleSubmitExample.java] for the data coding.
Could you please test this fix with the latest code from trunk or with the snapshot version from tomorrow?

Christian",,,,,,,,,,,,,,,,,,,,,,,,,,,
Hawtdb - File store keeps growing if index are unique,CAMEL-3826,12503100,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Apr/11 08:08,25/Oct/11 11:36,14/Mar/19 02:43,11/Apr/11 14:16,2.6.0,2.7.0,,,,,,,,,,,2.7.3,2.8.0,,,camel-hawtdb,,,,0,,,,,,"If you use unique correlation expressions for aggregator with hawtdb, but uses timeout for completion, the indexes are properly removed using the hawtdb API. But the file store keeps growing.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14107,,,Mon Apr 11 14:16:52 UTC 2011,,,,,,,0|i01x4v:,9137,,,,,,,,,11/Apr/11 14:16;davsclaus;Fixed thanks to help from Hiram.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInfo not reset when new bean looked up,CAMEL-3812,12502543,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,maximilien,maximilien,28/Mar/11 07:26,25/Oct/11 11:36,14/Mar/19 02:43,28/Mar/11 09:38,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"In camel-bean, when a bean is looked-up and it is not the same bean as the previous one beanInfo has to be reset.
This is done in getBean() method of org.apache.camel.component.bean.RegistryBean but the test is placed after setting bean=value so beanInfo is never reset :

if (value != bean) { 
    bean = value; 
    processor = null; 
    if (!ObjectHelper.equal(ObjectHelper.type(bean), ObjectHelper.type(value))) { 
        beanInfo = null; 
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-28 07:50:29.248,,,no_permission,,,,,,,,,,,,,,14188,,,Mon Mar 28 09:38:22 UTC 2011,,,,,,,0|i01x1r:,9123,,,,,,,,,"28/Mar/11 07:50;davsclaus;See nabble
http://camel.465427.n5.nabble.com/camel-ejb-problem-td4258807.html",28/Mar/11 09:38;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"At payload model, set soap body element to header uncorrectly",CAMEL-3810,12502491,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ext2xhb,ext2xhb,27/Mar/11 05:47,11/Mar/15 13:31,14/Mar/19 02:43,01/Apr/11 11:17,2.4.0,,,,,,,,,,,,2.7.1,2.8.0,,,camel-cxf,,,,0,,,,,,"if wsdl's operatin's has multi parts and the parts use same xml-element. Camel CXF Payload model, will mixup the xml element in body with header",,,,,,,,,,,,,,,,,,27/Mar/11 05:53;ext2xhb;CXFMultiPartTest.java;https://issues.apache.org/jira/secure/attachment/12474723/CXFMultiPartTest.java,27/Mar/11 05:53;ext2xhb;MultiPartInvokeImpl.java;https://issues.apache.org/jira/secure/attachment/12474724/MultiPartInvokeImpl.java,27/Mar/11 05:53;ext2xhb;MultiPartTest.wsdl;https://issues.apache.org/jira/secure/attachment/12474721/MultiPartTest.wsdl,27/Mar/11 05:53;ext2xhb;MultiPartTest.xml;https://issues.apache.org/jira/secure/attachment/12474722/MultiPartTest.xml,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2011-03-27 10:26:08.563,,,no_permission,,,,,,,,,,,,,,14162,,,Wed Mar 11 13:31:06 UTC 2015,,,,,,,0|i01x1b:,9121,Unit Test Broken,,,,,,,,"27/Mar/11 05:53;ext2xhb; MultiPartTest.wsdl: is the wsdl, which will cause the bug;
MultiPartTest.xml: is the spring configured route.
CXFMultiPartTest.java: is the test case which failed.
MultiPartInvokeImpl.java: is service's simple ogical ","27/Mar/11 06:01;ext2xhb;Here is SOAP Message show how Camel CXF mix-up the body with header

Following is soap sent by the original client to camel
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Header><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in0</v></inE></soap:Header><soap:Body><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in1</v></inE></soap:Body></soap:Envelope>

Following is the soap routed by camel to service(which mixed up)
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Header><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in0</v></inE><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in1</v></inE></soap:Header><soap:Body /></soap:Envelope>
","27/Mar/11 06:06;ext2xhb;here is my temporary solution for Camel

CxfEndpoint.CxfClientImpl.setParameters(){
........
/*
for (MessagePartInfo partInfo : boi.getOperationInfo().getInput().getMessageParts()) 
{
	if (elements.size() > i && partInfo.getConcreteName().getLocalPart()
                        .equals(elements.get(i).getLocalName()))
	content.put(partInfo, elements.get(i++));
}
*/
//boi.getInput().getMessageParts())  will return the message-part which have been binding to soap body; 
for (MessagePartInfo partInfo : boi.getInput().getMessageParts()) {
	content.put(partInfo, elements.get(i++));
}

}

DefaultCxfBinding.getResponsePayloadList(...) {
....
/*
 for (MessagePartInfo partInfo : boi.getOperationInfo().getOutput().getMessageParts()) {
	if (elements.size() > i) {
		answer.put(partInfo, elements.get(i++));
    }
 }
*/
for (MessagePartInfo partInfo : boi.getInput().getMessageParts()) {
	answer.put(partInfo, elements.get(i++));
}  
.......
}  

","27/Mar/11 06:10;ext2xhb;some description for my temporary solution:
To find which message part  matched with body elemens, we must rely on the WSDL Binding informations, not rely on wsdl portType's operation information.",27/Mar/11 10:26;davsclaus;Have you tried with Camel 2.7 release?,"27/Mar/11 13:05;ext2xhb;I haven't tried on Camel 2.7. but I have review the source code of cxf component of Camel2.7. 
As source code of Camel 2.7 which deal with message partis , is just like as Camel 2.4, so this test will also failed on camel 2.7.","01/Apr/11 08:52;njiang;Applied patch with thanks to ext2.

In the CXF SoapBindingFactory.createBindingInfo method, you will see the message parts of the soap body will be store in the BindingOperationInfo's input and output message. The patch shows a way to help us tell which message part is below to message body.

BTW, the change of DefaultCxfBinding.getResponsePayloadList should be
{code}
DefaultCxfBinding.getResponsePayloadList(...) {
...
-- for (MessagePartInfo partInfo : boi.getOperationInfo().getOutput().getMessageParts()) {

++ for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) { 
...
{code}","22/Feb/15 00:23;githubbot;GitHub user oombadness opened a pull request:

    https://github.com/apache/camel/pull/403

    CAMEL-3810 - RabbitMQ - Adding ability to requeue message

    Adding ability to REQUEUE a message on RabbitMQ server instead of REJECTING message / sending it to DLQ.  Messages that are in Fault / Exception state and have the header rabbitmq.REQUEUE set to the boolean true will be rejected and have the requeue flag set to true, otherwise the message will be rejected with the requeue flag set to false (as is current behavior).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oombadness/camel CAMEL-8310

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/403.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #403
    
----
commit 20050c12682752cd13e93187f902a4aa9f2a42e7
Author: Andrew Austin <andrew.austin@wgu.edu>
Date:   2015-02-22T00:16:24Z

    Adding ability to REQUEUE a message on RabbitMQ server instead of REJECTING message / sending it to DLQ.

----
","11/Mar/15 13:31;githubbot;Github user oombadness closed the pull request at:

    https://github.com/apache/camel/pull/403
",,,,,,,,,,,,,,,,,,,,,
Restlet Producer to add query to request URI based on runtime information (e.g. Camel header),CAMEL-3808,12502407,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,wtam,wtam,wtam,25/Mar/11 19:12,25/Oct/11 11:35,14/Mar/19 02:43,25/Mar/11 20:13,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-restlet,,,,0,,,,,,"Currently, custom queries to be sent in the request URI must be defined in the route.  It is more usable to set the request URI queries at runtime. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14147,,,Fri Mar 25 20:28:22 UTC 2011,,,,,,,0|i01x0v:,9119,,,,,,,,,"25/Mar/11 20:13;wtam;Committed revision 1085543.
","25/Mar/11 20:28;wtam;It looks we have documented this feature (setting CamelHttpQuery header to add query to request URI).  So, it is possibly a regression bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAPAction HTTP header value not copied correctly to from CXF message to Camel message header,CAMEL-3806,12502380,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tmielke,tmielke,25/Mar/11 14:06,25/Oct/11 11:35,14/Mar/19 02:43,29/Mar/11 03:17,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,1,CXF,header,HTTP,SOAPAction,,"When using camel-cxf consumer endpoint with PAYLOAD data format, the SoapActionInInterceptor correctly strips off any double quotes surrounding the SOAPAction header value, e.g:
{code}
SOAPAction: ""http://apache.org/hello_world_soap_http/greetMe""
{code}

and then sets this header on the message again:

{code:title=SoapActionInInterceptor.java}
public void handleMessage(SoapMessage message) throws Fault {
        String action = getSoapAction(message);
        if (!StringUtils.isEmpty(action)) {
            getAndSetOperation(message, action);
        }
    }
{code}

After the execution of getAndSetOperation(message, action), there are two SOAPAction headers set on the message. The original SOAPAction header value (with surrounding quotes) is part of the org.apache.cxf.message.Message.PROTOCOL_HEADERS. In addition the getAndSetOperation() method also adds 
SOAPAction=http://apache.org/hello_world_soap_http/greetMe header (without surrounding quotes). 

Later in org.apache.camel.component.cxf.DefaultCxfBinding.propagateHeadersFromCxfToCamel(), when the CXF message headers get copied to the Camel message, it only retrieves the org.apache.cxf.message.Message.PROTOCOL_HEADERS:

{code}
Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS);
{code}

The SOAPAction header in PROTOCOL_HEADERS wasn't changed by the SoapActionInInterceptor and hence still has enclosed double quotes. These headers then get copied to the Camel In message headers. The header that was set by the SoapActionInInterceptor SOAPAction=http://apache.org/hello_world_soap_http/greetMe does not get copied!

If later in a Camel route a custom Camel Processor tries to resolve this SOAPAction header, it gets the the value with surrounding double quotes, but these should actually have been stripped off. 

This behavior is a bug.

","camel-cxf, CXF consumer endpoint with PAYLOAD data format ",,,,,,,,,,,,,,,,,25/Mar/11 14:07;tmielke;testcase.zip;https://issues.apache.org/jira/secure/attachment/12474616/testcase.zip,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-03-27 10:29:41.29,,,no_permission,,,,,,,,,,,,,,14175,,,Tue Mar 29 03:17:06 UTC 2011,,,,,,,0|i01x0f:,9117,,,,,,,,,25/Mar/11 14:07;tmielke;Attaching JUnit test. It currently fails but will succeed if the SOAPAction header value is not enclosed by double quotes.,"25/Mar/11 14:08;tmielke;I see two solutions:

1) copy all CXF headers into Camel in message headers:

{code:title=org.apache.camel.component.cxf.DefaultCxfBinding.java}
// pseudo code
protected void propagateHeadersFromCxfToCamel(Message cxfMessage,
            org.apache.camel.Message camelMessage, Exchange exchange) {
        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.getHeaders()
        Map<String, Object> camelHeaders = camelMessage.getHeaders();
        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage);
...
{code}

This should also copy the SOAPAction header that the SoapActionInInterceptor added to the message.

2) Have the SoapActionInInterceptor strip off the surrounding double quote from the SOAPAction header (which it does already) and replace the SOAPAction header in the already populated org.apache.cxf.message.Message.PROTOCOL_HEADERS with the modified (stripped off) value. 
That way org.apache.camel.component.cxf.DefaultCxfBinding.java does not need to be changed. 

I personally kinda prefer the second option.
",27/Mar/11 10:29;davsclaus;Willem can you take a look? We should strip off double quotes from the value IMHO,"27/Mar/11 10:30;davsclaus;Btw which client put quotes in the value? I actually wonder if that's really best practice, and allowed to do?","28/Mar/11 07:51;njiang;Because SOAP11 and SOAP12 send the SOAPAction with different protocol:
SOAP11 uses SOAPAction=""xxx"" http header,
SOAP12 uses action=""xxx""  as a part of content-type
If we want to provides the user with consistence result, we need to store the result with key of ""SOAPAction"" for common using, CXF SOAPActionInterceptor takes care of it and strip the ""/"""" for using. In camel-cxf we copy the PROTOCOL_HEADER directly into the Camel message header, if the user using SOAP11 binding, the SOAPAction is also a part of the PROTOOL_HEADER. If the user want to get the message header of SOAPAction, he will get.
If the user using SOAP12 binding, he can't get any value with the message header of SOAPAction.

SO my suggestion is we just put the SOAPAction header from CXF message into camel message, in this way the user can get this kind of the message header directly from the camel message whatever the soap binding is.

Willem","28/Mar/11 08:18;tmielke;{quote}
Btw which client put quotes in the value? I actually wonder if that's really best practice, and allowed to do?
{quote}
According to the [SOAP 1.1 spec|http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383528], the SOAPAction header value needs to be enclosed by double quotes. Here an extract of the grammar defining the SOAPAction header:

{quote}
soapaction    = ""SOAPAction"" "":"" [ <""> URI-reference <""> ]
URI-reference = <as defined in RFC 2396 [4]>
{quote}

CXF also generates double quotes around the SOAPAction header value. ","29/Mar/11 03:17;njiang;Committed a patch to fix this issue.
For the Message data formate, as the SOAPActionInInterceptor is not installed, the use can still get the SOAPAction header with double quotes surrounding.",,,,,,,,,,,,,,,,,,,,,,,
Setting null body on JmsMessage should not re-initialize JMS message again,CAMEL-3805,12502372,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Mar/11 11:34,25/Oct/11 11:36,14/Mar/19 02:43,25/Mar/11 20:26,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,1,,,,,,"See nabble
http://camel.465427.n5.nabble.com/choice-when-check-BodyType-null-Body-null-tp4259599p4259599.html

We should use a boolean to keep track if the message body has been explict set to null using setBody(null) to avoid re-initialize the message body on subsequent accesses",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,14169,,,2011-03-25 11:34:30.0,,,,,,,0|i01x07:,9116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language and OGNL does not support dots in key name,CAMEL-3802,12502268,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,cmoulliard,cmoulliard,24/Mar/11 09:37,25/Oct/11 11:36,14/Mar/19 02:43,25/Mar/11 08:04,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"It is not possible in a simple expression to have access to a key of a Map when the key name contains dots

ex : <simple>${body[com.fusesource.webinars.persistence.model.Incident]}</simple>
where com.fusesource.webinars.persistence.model.Incident is the key name

Camel generates the error :

{code}
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: [com not found on bean: [{com.fusesource.webinars.persistence.model.Incident=com.fusesource.webinars.persistence.model.Incident@7fec0e19[
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,68711,,,Thu Mar 24 21:26:24 UTC 2011,,,,,,,0|i01wzj:,9113,,,,,,,,,"24/Mar/11 21:26;cmoulliard;I suggest that we add a test to check if the first character of the body is a bracket. If this is the case, than we should no remove the dots from the key value

code to be changed

{code}
    public static Expression headersOgnlExpression(final String ognl) {
        return new ExpressionAdapter() {
            public Object evaluate(Exchange exchange) {
                // try with full name first
                Object header = exchange.getIn().getHeader(ognl);
                if (header != null) {
                    return header;
                }

                // split into first name
                List<String> methods = OgnlHelper.splitOgnl(ognl);
                // remove any OGNL operators so we got the pure key name
                String key = OgnlHelper.removeOperators(methods.get(0));

                header = exchange.getIn().getHeader(key);
                if (header == null) {
                    return null;
                }
                // the remainder is the rest of the ognl without the key
                String remainder = ObjectHelper.after(ognl, key);
                return new MethodCallExpression(header, remainder).evaluate(exchange);
            }

            @Override
            public String toString() {
                return ""headerOgnl("" + ognl + "")"";
            }
        };
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console: NPE when browsing routes with no description,CAMEL-3797,12502042,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,dejanb,dejanb,22/Mar/11 12:42,25/Oct/11 11:36,14/Mar/19 02:43,22/Mar/11 12:56,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,"When some of the routes does not have a description NPE will be thrown, because of the code

{code}${i.getDescription.getText}{code}

To prevent it, just use

{code}${i.getDescriptionText}{code}",,,,,,,,,,,,,,,,,,22/Mar/11 12:43;dejanb;patch;https://issues.apache.org/jira/secure/attachment/12474290/patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-03-22 12:56:19.698,,,no_permission,,,,,,,,,,,,,,14182,,,Tue Mar 22 12:59:31 UTC 2011,,,Patch Available,,,,0|i01wyf:,9108,,,,,,,,,"22/Mar/11 12:56;janstey;Hey Dejan,

Committed your patch in http://svn.apache.org/viewvc?view=revision&revision=1084150. Thanks for the fix!

Cheers,
Jon",22/Mar/11 12:59;dejanb;Thanks Jon!,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.concurrent.RejectedExecutionException using interceptSendToEndpoint,CAMEL-3795,12501970,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,21/Mar/11 18:48,25/Oct/11 11:36,14/Mar/19 02:43,30/Mar/11 16:14,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,in some circumstances interceptSendToEndpoint in conjunction with recipientList is running in exception. this seems to be the case when an http endpoint is sent in the recipient list after having processed and ftp in the previous exchange.,,,,,,,,,,,,,,,,,,21/Mar/11 18:50;crive;InterceptSendToEndpointException.java;https://issues.apache.org/jira/secure/attachment/12474211/InterceptSendToEndpointException.java,30/Mar/11 09:28;crive;InterceptSendToEndpointExecutionException.java;https://issues.apache.org/jira/secure/attachment/12474956/InterceptSendToEndpointExecutionException.java,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-03-27 10:54:12.266,,,no_permission,,,,,,,,,,,,,,14177,,,Mon Apr 04 15:17:56 UTC 2011,,,,,,,0|i01wxz:,9106,,,,,,,,,21/Mar/11 18:50;crive;JUnit test showing the exception,"27/Mar/11 10:54;davsclaus;Please remember to add link to discussion using nabble
http://camel.465427.n5.nabble.com/java-util-concurrent-RejectedExecutionException-using-interceptSendToEndpoint-td3425179.html","27/Mar/11 10:56;davsclaus;The problem is that the end user is using a custom thread pool where the default strategy is to reject executing tasks, when the thread pool do not have any free threads. And thus you get the rejected exception.

Not a problem in Camel.","29/Mar/11 08:36;crive;The unit test uses mock up endpoint which does not show the wrong behaviour. 
The test attached to the ticket does not make use of custom thread pool: 

from(""direct:start"").recipientList(header(InterceptSendToEndpointException.recipientListHeaderName).tokenize("","")).to(""mock:end"");","29/Mar/11 17:35;davsclaus;Can you attach the unit test which fails for you.
The attached test case works just fine! In fact it doesn't use any thread pool at all.","30/Mar/11 09:28;crive;Attaching another unit test showing the exception, the difference with previous one is that it is using real endpoints.",30/Mar/11 14:15;davsclaus;Okay I found the culprint. The lifecycle of the interceptor was affected by ftp producer as it was a pooled resource and thus its lifecycle is unusual. ,30/Mar/11 16:14;davsclaus;It should be fixed now,04/Apr/11 15:17;crive;I am still experiencing the same issue with the latest test attached. I am using camel 2.8-snapshot,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy is not thread-safe,CAMEL-3789,12501793,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,maria.iracheta@gmail.com,maria.iracheta@gmail.com,18/Mar/11 14:09,25/Oct/11 11:36,14/Mar/19 02:43,27/Mar/11 10:25,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"MarkerFileExclusiveReadLockStrategy is not thread-safe. When I run  a File endpoint with more than one thread the MarkerFileExclusiveReadLockStrategy only deletes the last file to start being processed. 

The MarkerFileExclusiveReadLockStrategy uses global variables: 
private File lock; 
private String lockFileName; 
and gives them values on the acquireExclusiveReadLock method. When another thread calls the releaseExclusiveReadLock method it uses the global variables to delete the locked file. That means that if another thread came and called the acquireExclusiveReadLock it would have changed the values on the global variables. 

If lock and lockFileName are not global variables the problem seems to disappear and I can a multithreaded File endpoint and not locked file is left undeleted. 
",,,,,,,,,,,,,,,,,,22/Mar/11 14:33;maria.iracheta@gmail.com;FileOperations.java.patch;https://issues.apache.org/jira/secure/attachment/12474298/FileOperations.java.patch,22/Mar/11 14:38;maria.iracheta@gmail.com;GenericFileDeleteProcessStrategy.java.patch;https://issues.apache.org/jira/secure/attachment/12474300/GenericFileDeleteProcessStrategy.java.patch,22/Mar/11 14:38;maria.iracheta@gmail.com;GenericFileRenameProcessStrategy.java.patch;https://issues.apache.org/jira/secure/attachment/12474299/GenericFileRenameProcessStrategy.java.patch,22/Mar/11 12:45;maria.iracheta@gmail.com;MarkerFileExclusiveReadLockStrategy.java.patch;https://issues.apache.org/jira/secure/attachment/12474291/MarkerFileExclusiveReadLockStrategy.java.patch,22/Mar/11 14:40;maria.iracheta@gmail.com;MarkerFileExclusiveReadLockStrategyTest.java;https://issues.apache.org/jira/secure/attachment/12474301/MarkerFileExclusiveReadLockStrategyTest.java,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2011-03-27 10:25:22.311,,,no_permission,,,,,,,,,,,,,,14157,,,Sun Mar 27 10:25:22 UTC 2011,,,Patch Available,,,,0|i01wwn:,9100,,,,,,,,,22/Mar/11 12:45;maria.iracheta@gmail.com;This readLockStrategy was not thread-safe. It was unlocking the last File that had been locked. Now each of the methods recreates the lock file based on the input attributes,22/Mar/11 14:33;maria.iracheta@gmail.com;The method buildDirectory was not Thread Safe at the point of trying to create the directory.,22/Mar/11 14:38;maria.iracheta@gmail.com;The method begin was calling super.begin and passing the original File instead of the renamed File. But in the rollback and the commit methods the file passed is the renamed File. So in the begin method we are using the original file but in rollback and commit we are using the renamed File.,22/Mar/11 14:38;maria.iracheta@gmail.com;The method begin was calling super.begin and passing the original File instead of the renamed File. But in the rollback and the commit methods the file passed is the renamed File. So in the begin method we are using the original file but in rollback and commit we are using the renamed File.,22/Mar/11 14:40;maria.iracheta@gmail.com;Junit class to test the MarkerFileExclusiveReadLockStrategy in a multithreaded scenario,27/Mar/11 10:25;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,,
HTTP Producer seems to send an empty body request on redelivery when the original request fails due to a connection timeout,CAMEL-3788,12501723,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akarpe,akarpe,17/Mar/11 19:47,25/Oct/11 11:36,14/Mar/19 02:43,21/Mar/11 10:13,2.0-M2,2.6.0,,,,,,,,,,,2.7.3,2.8.0,,,camel-http,,,,0,,,,,,"Camel HTTP Producer is throwing an exception when it encounters a connection timeout. However instead of preserving the original message it is treating it processing the exception output. When connected to a redelivery meachanism, this results in an exception message being sent as input to the HTTP Consumer. The older versions of Camel behaved differently on read timeout. In Camel 1.x, in a read timeout, the Exception is thrown and the input message to the producer is passed through the pipeline. Now there is a difference: An exception is thrown and the output of the HTTP Producer is passed through the pipeline. 

Need to study why and what changed since Camel 1.x and ensure that the above does not happen.

For more details, please check out the following nabble entry

http://camel.465427.n5.nabble.com/Http-route-returning-with-200-but-also-getting-read-timed-out-td3741631.html#a3897410

Cheers,

Ashwin...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-21 10:13:45.299,,,no_permission,,,,,,,,,,,,,,14154,,,Mon Mar 21 10:13:45 UTC 2011,,,,,,,0|i01wwf:,9099,,,,,,,,,21/Mar/11 10:13;njiang;Committed the patch into camel-http and camel-http4.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mail component issue with starttls option,CAMEL-3769,12500780,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ahiebl,ahiebl,08/Mar/11 16:08,25/Oct/11 11:35,14/Mar/19 02:43,09/Mar/11 09:22,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-mail,,,,0,,,,,,"The problem occurs when I read from a pop3 endpoint and send to an smtp endpoint in the same camel context with the mail.pop3.starttls.enable=true and mail.smtp.starttls.enable=true options.

Required Java options for starttls are set:
-Djavax.net.ssl.trustStore=D:\test\xxx.jks
-Djavax.net.ssl.trustStorePassword=yyy


When I only configure one of either route, everything works fine. When I configure both, I get the following exception:

AUTH LOGIN
C: STAT
530 Must issue STARTTLS command first
STARTTLS
S: +OK 0 0
C: NOOP
220 begin TLS negotiation
S: +OK
C: RSET
S: +OK
C: QUIT
AUTH LOGIN
S: +OK POP3 server closing connection
503 wrong state for AUTH command
2011-03-03 10:08:36,797 [foo] ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID-E6500-ahi-61446-1299143304838-0-2. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH command

org.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH command

        at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:392)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:340)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:355)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)[camel-mail-2.6.0.jar:2.6.0]
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.RoutePolicyProcessor.process(RoutePolicyProcessor.java:75)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:104)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)[camel-core-2.6.0.jar:2.6.0]
        at java.util.TimerThread.mainLoop(Unknown Source)[:1.5.0_22]
        at java.util.TimerThread.run(Unknown Source)[:1.5.0_22]



The problem seems to be in org.apache.camel.component.mail.MailConfiguration.createJavaMailSender() where it uses the same mail session for both connection; see Session.getDefaultInstance below

        if (session != null) {
            answer.setSession(session);
        } else {
            // use our authenticator that does no live user interaction but returns the already configured username and password
            Session session;
            try {
                session = Session.getDefaultInstance(answer.getJavaMailProperties(), getAuthenticator());
            } catch (Throwable t) {
                // fallback as default instance may not be allowed on some systems
                session = Session.getInstance(answer.getJavaMailProperties(), getAuthenticator());
            }
            answer.setSession(session);
        }


This is because getDefaultInstance creates a Session object the first time it is called. Then it caches that Session and returns it for all subsequent calls. It also ignores the new and different properties for the second route.


See also http://camel.465427.n5.nabble.com/Mail-component-with-starttls-td3409505.html 
",,,,,,,,,,,,,,,,,,08/Mar/11 17:02;ahiebl;MailConfiguration.java;https://issues.apache.org/jira/secure/attachment/12473006/MailConfiguration.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-03-09 09:22:07.953,,,no_permission,,,,,,,,,,,,,,14165,,,Wed Mar 09 09:22:07 UTC 2011,,,Patch Available,,,,0|i01ws7:,9080,,,,,,,,,"08/Mar/11 16:11;ahiebl;I suggest to change this section of the code to always use getInstance instead of getDefaultInstance.

{code}
        if (session != null) {
            answer.setSession(session);
        } else {
            // use our authenticator that does no live user interaction but returns the already configured username and password
            Session session = Session.getInstance(answer.getJavaMailProperties(), getAuthenticator());
            // sets the debug mode of the underlying mail framework
            session.setDebug(debugMode);
            answer.setSession(session);
        }
{code}","08/Mar/11 16:16;ahiebl;At least in my tests, the debugMode=true did not work either. I think this is beacuse 

{code}
// sets the debug mode of the underlying mail framework
answer.getSession().setDebug(debugMode);
{code}

creates a Session and sets the debug option for this session object. In the next few line the JavaMailProperties are set

{code}
answer.setJavaMailProperties()
{code}

which actually resets the Session object in JavaMailSenderImpl answer to null.
","08/Mar/11 17:02;ahiebl;Changes are highlighted with kex word ""BUG FIX""",09/Mar/11 09:22;davsclaus;trunk: 1079708.,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagementNamingStrategy - Should normalize ObjectName to avoid using illegal characters,CAMEL-3760,12500536,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Mar/11 08:43,25/Oct/11 11:35,14/Mar/19 02:43,06/Mar/11 10:08,,,,,,,,,,,,,2.7.0,,,,camel-core,jmx,,,0,,,,,,"For example when using JMS in the loanbroaker example. There us a colon in the JMS queue name which is invalid char in JMX.

2011-03-06 08:26:55,859 [main           ] WARN  ManagedManagementStrategy      - Cannot check whether the managed object is registered. This exception will be ignored.
javax.management.MalformedObjectNameException: Could not create ObjectName from: org.apache.camel:context=vesta.apache.org/camel-1,type=threadpools,name=JmsReplyManagerTimeoutChecker[queue2:parallelLoanRequestQueue]. Reason: javax.management.MalformedObjectNameException: Invalid character ':' in value part of property
	at org.apache.camel.management.DefaultManagementNamingStrategy.createObjectName(DefaultManagementNamingStrategy.java:315)[camel-core-2.7-SNAPSHOT.jar:2.7-SNAPSHOT]


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76190,,,Sun Mar 06 10:08:28 UTC 2011,,,,,,,0|i01wq7:,9071,,,,,,,,,06/Mar/11 10:03;davsclaus;We just needed to quote the thread pool name which wasn't done.,06/Mar/11 10:08;davsclaus;trunk: 1078442.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Auto mock endpoints should strip parameters to avoid confusing when accessing the mocked endpoint,CAMEL-3757,12500510,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Mar/11 12:29,25/Oct/11 11:35,14/Mar/19 02:43,05/Mar/11 14:20,2.7.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,"If you use mocking existing endpoints, which is detailed here
http://camel.apache.org/mock.html

We should stip parameters of the mocked endpoint, eg {{file:xxxx?noop=true}}. eg so the mocked endpoint would be {{mock:file:xxxx}} without any of the parameters.

Otherwise the mock endpoint expects those parameters is part of the mock endpoint and will fail creating the mock endpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76191,,,Sat Mar 05 14:20:09 UTC 2011,,,,,,,0|i01wpj:,9068,,,,,,,,,05/Mar/11 14:20;davsclaus;trunk: 1078291.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Relax check for clientId must be set when using durable subscribers,CAMEL-3753,12500499,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Mar/11 07:36,25/Oct/11 11:35,14/Mar/19 02:43,05/Mar/11 07:59,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-jms,,,,0,,,,,,"Using durable subscribers, the clientId must be configured as well, so the broker knows who the client is.
However some JMS providers mandates the client id to be configured on the JMS ConnectionFactory instead.

So we should relax this check in camel-jms

See nabble
http://camel.465427.n5.nabble.com/Camel-GlassFish-and-durable-subscriber-tp3408634p3408634.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76192,,,Sat Mar 05 07:59:16 UTC 2011,,,,,,,0|i01won:,9064,Regression,,,,,,,,05/Mar/11 07:59;davsclaus;trunk: 1078241.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sftp producer runs in exception fileName does not contain any path information,CAMEL-3749,12500323,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,03/Mar/11 16:58,25/Oct/11 11:36,14/Mar/19 02:43,04/Mar/11 12:25,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-ftp,,,,0,,,,,,"When the fileName uri option does not contain any folder information, ie: ""fileName=filename.txt"" the producer runs in exception

The exception is thrown when the producer calls ls method of jsch ChannelSftp passing an empty string as directory parameter in org.apache.camel.component.file.remote.SftpOperations.existsFile line 704

sample URI: 
sftp://user@hostname:22?disconnect=true&eagerDeleteTargetFile=false%3Bstepwise%3Dfalse&fileName=SYSTEM01&password=******&soTimeout=30000&tempFileName=%24%7Bfile%3Aname.noext%7D.tmp

Stack trace:
{code}
[2011-03-03 14:40:40,827][RecipientList (thread #4)][ERROR][org.apache.camel.processor.DefaultErrorHandler][] Failed delivery for exchangeId: ID-******-33331-1299163043684-0-10. Exhausted after delivery attempt: 1 caught: org.apache.camel.component.file.GenericFileOperationFailedExcept on: 
org.apache.camel.component.file.GenericFileOperationFailedException: 
        at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:727) 
        at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:130) 
        at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:50) 
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) 
        at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:716) 
        at org.apache.camel.processor.MulticastProcessor.access$100(MulticastProcessor.java:78) 
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:282) 
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:274) 
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) 
        at java.util.concurrent.FutureTask.run(FutureTask.java:138) 
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) 
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) 
        at java.util.concurrent.FutureTask.run(FutureTask.java:138) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
        at java.lang.Thread.run(Thread.java:619) 
Caused by: 4: 
        at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1353) 
        at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:704) 
        ... 20 more 
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0 
        at java.lang.String.charAt(String.java:686) 
        at com.jcraft.jsch.ChannelSftp.remoteAbsolutePath(ChannelSftp.java:2367) 
        at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1185) 
        ... 21 more
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-04 07:16:19.382,,,no_permission,,,,,,,,,,,,,,76193,,,Mon Mar 07 14:57:45 UTC 2011,,,,,,,0|i01wnr:,9060,,,,,,,,,"04/Mar/11 07:16;davsclaus;Can you report the issue to JSCH as well? Its in fact their library which doesn't accept an empty string or provide a better error message if an empty string is invalid.
",04/Mar/11 10:00;crive;Tried to commit a bug to jsch but unfortunately while trying to create a new issue report the server runs in error,04/Mar/11 12:14;davsclaus;The issue is only when using the tempFileName option,"04/Mar/11 12:25;davsclaus;I have fixed it on trunk. I use ""."" now which is current path.

trunk: 1077904.",07/Mar/11 14:57;crive;works for me,,,,,,,,,,,,,,,,,,,,,,,,,
JAXB marshaling broken in 2.6.0,CAMEL-3729,12499963,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,28/Feb/11 18:46,25/Oct/11 11:36,14/Mar/19 02:43,01/Mar/11 08:43,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-jaxb,,,,0,jaxb,,,,,"This used to work in 2.5.0 but in 2.6.0 it throws:

{noformat}
Caused by: javax.xml.bind.JAXBException: class com.ask.ugc.camel.Jask3061$Foo nor any of its super class is known to this context.
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:594)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:482)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:315)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:244)
	at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:75)
	at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:117)
	at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:96)
...
{noformat}


{code:java}
@ContextConfiguration(
        locations = ""foo.bar.JaxbBug$ContextConfig"",
        loader = JavaConfigContextLoader.class)
public class JaxbBug extends AbstractTestNGSpringContextTests {

    @EndpointInject(uri = ""mock:end"")
    protected MockEndpoint mockEndpoint;

    @Produce(uri = ""direct:test"")
    protected ProducerTemplate producer;

    @Test
    @DirtiesContext
    public void testJaxbMarshalling() throws InterruptedException {
        mockEndpoint.expectedMessageCount(1);

        producer.sendBody(new Foo());

        mockEndpoint.assertIsSatisfied();

    }

    @Configuration
    public static class ContextConfig extends SingleRouteCamelConfiguration {
        @Bean
        public RouteBuilder route() {
            return new RouteBuilder() {
                @Override
                public void configure() throws Exception {
                    JaxbDataFormat jaxb = new JaxbDataFormat(JAXBContext.newInstance(Foo.class));
                    from(""direct:test"").marshal(jaxb).to(""mock:end"");


                }
            };
        }
    }

    @XmlRootElement
    public static class Foo {
        String bar;

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }

}
{code}","Sun Jdk 1.6, Mac OSX",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-01 08:08:43.458,,,no_permission,,,,,,,,,,,,,,76196,,,Tue Mar 01 17:39:11 UTC 2011,,,,,,,0|i01wjb:,9040,Regression,,,,,,,,"01/Mar/11 08:08;davsclaus;It must be something with Spring JavaConfig Testing. Using plain camel-test kit works without any problem.

I suggest to provide a classloader in the JAXBContext.newInstance, so the Foo class can be loaded.
","01/Mar/11 08:18;davsclaus;Okay I have a test using JUnit instad of TestNG and it works fine on trunk code. I will add it to camel-jaxb.
",01/Mar/11 08:43;davsclaus;trunk: 1075707.,"01/Mar/11 17:39;dragisak;We have this problem in our web app (Jersey+Spring 3.0.5). It happened when we upgraded Camel from 2.5 to 2.6. The test is just to demonstrate problem.

This same test passes with Camel 2.5 but fails with Camel 2.6",,,,,,,,,,,,,,,,,,,,,,,,,,
Recipient list with parallel processing doesn't reuse aggregation threads,CAMEL-3727,12499913,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marcin kolda,marcin kolda,28/Feb/11 12:28,25/Oct/11 11:36,14/Mar/19 02:43,28/Feb/11 15:20,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,"When I'm using recipient list in parallel mode {{aggregateExecutorService}} in {{MulticastProcessor}} doesn't reuse threads and is creating one new thread per each request.

To reproduce this bug simply add a loop to {{RecipientListParallelTest.testRecipientListParallel()}} test:
{code:title=RecipientListParallelTest.java|borderStyle=solid}
    public void testRecipientListParallel() throws Exception {
        for (int i = 0; i < 10000; i++) {
            MockEndpoint mock = getMockEndpoint(""mock:result"");
            mock.reset();
            mock.expectedBodiesReceivedInAnyOrder(""c"", ""b"", ""a"");
            template.sendBodyAndHeader(""direct:start"", ""Hello World"", ""foo"", ""direct:a,direct:b,direct:c"");
            assertMockEndpointsSatisfied();
        }
    }
{code}

In the logs you can find:
{code}
2011-02-28 13:22:30,984 [) thread #0 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:31,984 [) thread #4 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:32,984 [) thread #8 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:34,000 [ thread #12 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:35,000 [ thread #14 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:36,000 [ thread #15 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:37,015 [ thread #16 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:38,015 [ thread #17 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-28 13:35:02.008,,,no_permission,,,,,,,,,,,,,,76197,,,Mon Feb 28 15:20:20 UTC 2011,,,,,,,0|i01wiv:,9038,,,,,,,,,28/Feb/11 13:35;davsclaus;Thanks for reporting. I got this covered now. Running full tests before committing the fix.,28/Feb/11 15:20;davsclaus;trunk: 1075372.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kestrel: concurrent gets optimized into a single get,CAMEL-3720,12499753,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dcheckoway,dcheckoway,25/Feb/11 20:15,25/Oct/11 11:35,14/Mar/19 02:43,26/Feb/11 08:11,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,"Please add camel-kestrel as a component in JIRA...thx.

The bug is that spymemcached is optimizing concurrent gets for the same key into a single get.  The fix is in the attached patch.",,,,,,,,,,,,,,,,,,25/Feb/11 20:17;dcheckoway;camel-kestrel-fix.patch;https://issues.apache.org/jira/secure/attachment/12471964/camel-kestrel-fix.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-02-26 08:11:24.915,,,no_permission,,,,,,,,,,,,,,37858,,,Sat Feb 26 08:11:24 UTC 2011,,,Patch Available,,,,0|i01whb:,9031,,,,,,,,,25/Feb/11 20:17;dcheckoway;This patch tweaks the way we build the spymemcached client so it doesn't optimize get calls together.,"26/Feb/11 08:11;davsclaus;trunk: 1074801.

Thanks for the patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"OracleAQ does not support JMSReplyTo, so ensure try catch is used when accessing it",CAMEL-3718,12499673,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Feb/11 07:04,25/Oct/11 11:35,14/Mar/19 02:43,25/Feb/11 07:38,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-jms,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/JmsComponent-changes-between-2-4-0-and-2-6-0-tp3398446p3398446.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76198,,,Fri Feb 25 07:38:51 UTC 2011,,,,,,,0|i01wgv:,9029,,,,,,,,,25/Feb/11 07:38;davsclaus;trunk: 1074420.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Archetype camel-archetype-war generates well the project but no web console is available in the browser,CAMEL-3716,12499584,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cmoulliard,cmoulliard,24/Feb/11 11:32,25/Oct/11 11:36,14/Mar/19 02:43,04/Mar/11 06:42,2.6.0,,,,,,,,,,,,2.7.0,,,,tooling,,,,0,,,,,,The archetype camel-archetype-war is not longer synchronized with last modifications made with component camel-web and so the camel web console does not appear into the web browser,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-04 06:42:23.169,,,no_permission,,,,,,,,,,,,,,76199,,,Fri Mar 04 06:42:23 UTC 2011,,,,,,,0|i01wgf:,9027,,,,,,,,,04/Mar/11 06:42;davsclaus;The console works now,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sending to http endpoint may double encoding parameters,CAMEL-3715,12499570,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Feb/11 09:24,25/Oct/11 11:35,14/Mar/19 02:43,24/Feb/11 13:58,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-http,,,,0,,,,,,"See nabble


The workaround is to use either HTTP_URI or HTTP_QUERY as a header with the parameters. Then they are not double encoded.

Also the HTTP_URI should be placeholder resolved, so we can use {{port}} or the likes to inject the port number dynamic.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76200,,,Thu Feb 24 13:58:30 UTC 2011,,,,,,,0|i01wg7:,9026,,,,,,,,,"24/Feb/11 13:58;davsclaus;trunk: 1074153.

Also fixed camel-http4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate mail attachment names breaks the Message.getAttachments() interface contract,CAMEL-3713,12499544,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,pegli,pegli,23/Feb/11 23:46,25/Oct/11 11:35,14/Mar/19 02:43,24/Feb/11 03:41,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-mail,,,,0,,,,,,"If the camel-mail component consumes a Multipart email message that contains two parts with the same filename, subsequent calls to {{DataHandler dh = Message.getAttachments().get(""filename"")}} result in a ClassCastException.  This occurs because {{MailBinding.extractAttachmentsFromMultipart()}} calls {{CollectionHelper.appendValue(map, fileName, part.getDataHandler())}} to add an attachment to the Message attachments map.  If appendValue is passed a duplicate key, it converts the map value to an ArrayList and adds the existing value and the new value to the list.  The result is a Map that contains a mix of <String,DataSource> and <String,ArrayList>.

Fix is to NOT use CollectionHelper and to check for duplicate keys prior to adding an attachment.","Mac OSX 10.6.6
java version ""1.6.0_22""
Java(TM) SE Runtime Environment (build 1.6.0_22-b04-307-10M3261)
Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-307, mixed mode)
",,,,,,,,,,,,,,,,,23/Feb/11 23:48;pegli;camel-3713.diff;https://issues.apache.org/jira/secure/attachment/12471788/camel-3713.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-02-24 03:41:57.991,,,no_permission,,,,,,,,,,,,,,37854,,,Thu Feb 24 03:41:57 UTC 2011,,,Patch Available,,,,0|i01wfr:,9024,,,,,,,,,23/Feb/11 23:48;pegli;patch against trunk that fixes CAMEL-3713.,"24/Feb/11 03:41;hadrian;Patch applied in r1074033 with thanks to Paul Mietz Egli.
Also added a minor checkstyle fix in r1074034.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnException - The order they are defined in the RouteBuilder / XML should be preserved when you have multiple of the same exception type,CAMEL-3711,12499504,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Feb/11 17:22,25/Oct/11 11:36,14/Mar/19 02:43,24/Feb/11 05:24,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,camel-spring,,,0,,,,,,"When you have 2+ of {{onException(MyExcpetion.class)}} then the order may get reversed, in the logic which prepares the routes. The logic should cater for clashes and ensure orders is preserved.

This currently only occurs for XML based routes. The Java DSL works.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76201,,,Thu Feb 24 05:24:46 UTC 2011,,,,,,,0|i01wfb:,9022,,,,,,,,,24/Feb/11 05:24;davsclaus;trunk: 1074046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
interceptFrom and from(Endpoint) don't work together,CAMEL-3709,12499477,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sm,sm,23/Feb/11 12:12,25/Oct/11 11:35,14/Mar/19 02:43,24/Feb/11 05:21,2.5.0,2.6.0,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,"When using interceptFrom(String) together with from(Endpoint), the below Exception occurs during the routes building process. Looking at RoutesDefinition.java:217 reveals, that the FromDefintion just created has no URI. That causes the comparison to all the interceptFroms' URIs to fail. As far as I can tell, the way to fix this would be to add {{setUri(myEndpoint.getEndpointUri())}} in the constructor {{FromDefinition(Endpoint endpoint)}}.

Below the stack trace, there is a unit test that demonstrates the issue. Until it if fixed, it can be easily circumvented by adding the commented-out line, and then change to {{from(""myEndpoint"")}}.
{code}
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: null due to: null
	at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:109)
	at org.apache.camel.model.RoutesDefinition.route(RoutesDefinition.java:217)
	at org.apache.camel.model.RoutesDefinition.from(RoutesDefinition.java:167)
	at org.apache.camel.builder.RouteBuilder.from(RouteBuilder.java:101)
	at dk.mobilethink.adc2.endpoint.UnsetUriTest$1.configure(UnsetUriTest.java:18)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:318)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:273)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:259)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:612)
	at org.apache.camel.test.CamelTestSupport.setUp(CamelTestSupport.java:111)
	at junit.framework.TestCase.runBare(TestCase.java:132)
	at org.apache.camel.test.TestSupport.runBare(TestSupport.java:65)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.NullPointerException
	at org.apache.camel.util.UnsafeUriCharactersEncoder.encode(UnsafeUriCharactersEncoder.java:56)
	at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:162)
	at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:107)
	... 24 more
{code}

{code}
package dk.mobilethink.adc2.endpoint;

import org.apache.camel.Endpoint;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.CamelTestSupport;

public class UnsetUriTest extends CamelTestSupport {
	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {

		return new RouteBuilder() {
			public void configure() throws Exception {
				interceptFrom(""URI1"").to(""irrelevantURI"");

				Endpoint myEndpoint = getContext().getComponent(""direct"").createEndpoint(""ignoredURI"");
				
//				getContext().addEndpoint(""myEndpoint"", myEndpoint);
				from(myEndpoint)
					.inOnly(""log:foo"");
			}
		};
	}

	public void testNothing() { }
}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-23 16:20:35.347,,,no_permission,,,,,,,,,,,,,,76202,,,Thu Feb 24 07:24:22 UTC 2011,,,,,,,0|i01wev:,9020,,,,,,,,,"23/Feb/11 16:20;davsclaus;You found the easter egg. There is a todo in the source code to support endpoint via ref's

    // TODO: Support lookup endpoint by ref (requires a bit more work)
",24/Feb/11 05:21;davsclaus;trunk: 1074045,"24/Feb/11 07:24;davsclaus;trunk: 1074058.

Now works when from is using ref instead of url as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Example camel-example-cxf-tomcat does not work on Tomcat 7,CAMEL-3702,12499334,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,arnoud,arnoud,22/Feb/11 12:39,25/Oct/11 11:35,14/Mar/19 02:43,12/Apr/11 07:01,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,examples,,,,0,,,,,,"I am trying to get the example camel-example-cxf-tomcat to work on Tomcat 7.0.8. This example contains a CxfEndpoint that is configured as being asynchronous (by default). Because of this asynchronous setting I was notified by an Exception that I should set the async-supported property of the CXFServlet in the web.xml. After I set this property to true, I see that invocations are received and processed by the Camel route, however the result is not returned: the connection is closed directly.
I assume this issue is not directly related to the example itself (apart from the missing async-supported property), however I was not able to pinpoint which component is triggering the connection to be closed before the result is written.","Windows 7, Tomcat 7.0.8, Camel 2.6.0",,,,,,,,,,,,CAMEL-3734,CAMEL-3698,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-23 07:25:08.019,,,no_permission,,,,,,,,,,,,,,68803,,,Tue Apr 12 07:01:46 UTC 2011,,,,,,,0|i01wdb:,9013,,,,,,,,,"23/Feb/11 07:25;davsclaus;Can you try another container such as Jetty to see if make a difference? Just notice to know if its Tomcat only issue or generic web container.

Also would be nice to check with the Apache CXF if they have any issues on Tomcat with the async-supported property.","23/Feb/11 08:46;arnoud;I deployed the same war in Jetty 8.0.0.M2 (supporting Servlet 3.0). Upon invoking the service I see the exception below in the logging of Jetty and the invoker gets the HTTP 500 error. 
The exact fault differs from Tomcat, as in the Tomcat case the connection was closed without any exception(s). In both cases I see the INFO logging from the route itself (input/output).
 
If I change the CxfEndpoint to be synchronous, it works fine in Jetty as well. 

{noformat}
2011-02-23 09:21:51,793 [qtp18378667-26 ] INFO  input                          - Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[org.apache.camel.example.cxf.incident.InputStatusIncident@83dae1]]
2011-02-23 09:21:51,829 [qtp18378667-26 ] INFO  output                         - Exchange[ExchangePattern:InOut, BodyType:org.apache.camel.example.cxf.incident.OutputStatusIncident, Body:org.apache.camel.example.cxf.incident.OutputStatusIncident@62812d]
2011-02-23 09:21:51.839:WARN::/camel-example-cxf-tomcat-2.6.0/webservices/incident 
org.apache.cxf.continuations.SuspendedInvocationException
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:258)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:546)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:483)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:479)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:230)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:956)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:411)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:188)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:891)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:247)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:151)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:114)
        at org.eclipse.jetty.server.Server.handle(Server.java:353)
        at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:598)
        at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1076)
        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:805)
        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)
        at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:427)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:510)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.access$000(SelectChannelEndPoint.java:34)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:450)
        at java.lang.Thread.run(Unknown Source)
2011-02-23 09:21:51,989 [qtp18378667-26 ] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:222)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[servlet-api-3.0.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:546)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:483)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:500)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:230)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:956)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:411)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:188)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:891)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:185)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:151)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:114)
        at org.eclipse.jetty.server.Server.handleAsync(Server.java:398)
        at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:603)
        at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1076)
        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:805)
        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)
        at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:427)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:510)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.access$000(SelectChannelEndPoint.java:34)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:450)
        at java.lang.Thread.run(Unknown Source)[:1.6.0_20]
{noformat}","23/Feb/11 10:54;arnoud;I also deployed the war to GlassFish 3.0.1, resulting in the logging below. Both GlassFish and Jetty fail with the same exception in the same method (ReadHeadersInterceptor.handleMessage()). I tried to verify if Tomcat (silently) fails in the same method as well, however it seems that it continues after invoking this method.

{noformat}
[#|2011-02-23T11:19:08.306+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|2011-02-23 11:19:08,305 [d-pool-8080-(1)] INFO  input                          - Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[org.apache.camel.example.cxf.incident.InputStatusI
ncident@1797bf]]
|#]

[#|2011-02-23T11:19:08.398+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|2011-02-23 11:19:08,398 [d-pool-8080-(1)] INFO  output                         - Exchange[ExchangePattern:InOut, BodyType:org.apache.camel.example.cxf.incident.OutputStatusIncident, Body:org.apache.camel.example.cxf.incide
nt.OutputStatusIncident@112691e]
|#]

[#|2011-02-23T11:19:08.405+0100|WARNING|glassfish3.0.1|javax.enterprise.system.container.web.com.sun.enterprise.web|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|StandardWrapperValve[CXFServlet]: PWC1406: Servlet.service() for servlet CXFServlet threw exception
org.apache.cxf.continuations.SuspendedInvocationException
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:258)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:279)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:188)
        at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:641)
        at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:97)
        at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:85)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:185)
        at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:325)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:226)
        at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:165)
        at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:791)
        at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:693)
        at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:954)
        at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:170)
        at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:135)
        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:102)
        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:88)
        at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:76)
        at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:53)
        at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:57)
        at com.sun.grizzly.ContextTask.run(ContextTask.java:69)
        at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:330)
        at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:309)
        at java.lang.Thread.run(Thread.java:619)
|#]

[#|2011-02-23T11:19:08.429+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=31;_ThreadName=pool-44-thread-1;|2011-02-23 11:19:08,427 [ool-44-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:222)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]

[#|2011-02-23T11:19:08.485+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=31;_ThreadName=pool-44-thread-1;|2011-02-23 11:19:08,479 [ool-44-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
java.lang.NullPointerException
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.getFormHintFieldEncoding(PwcCoyoteRequest.java:245)[web-glue.jar:3.0.1]
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.setRequestEncodingFromSunWebXml(PwcCoyoteRequest.java:208)[web-glue.jar:3.0.1]
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.getCharacterEncoding(PwcCoyoteRequest.java:129)[web-glue.jar:3.0.1]
        at org.apache.catalina.connector.RequestFacade.getCharacterEncoding(RequestFacade.java:360)[web-core.jar:3.0.1]
        at javax.servlet.ServletRequestWrapper.getCharacterEncoding(ServletRequestWrapper.java:134)[javax.servlet.jar:]
        at org.apache.cxf.transport.http.HttpServletRequestSnapshot.<init>(HttpServletRequestSnapshot.java:68)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination$1.cacheInput(AbstractHTTPDestination.java:303)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.cacheInput(AbstractHTTPDestination.java:519)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.flushHeaders(AbstractHTTPDestination.java:531)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.flushHeaders(AbstractHTTPDestination.java:524)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination$WrappedOutputStream.onFirstWrite(AbstractHTTPDestination.java:659)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.io.AbstractWrappedOutputStream.write(AbstractWrappedOutputStream.java:42)[cxf-api-2.3.2.jar:2.3.2]
        at com.ctc.wstx.io.UTF8Writer.flush(UTF8Writer.java:96)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BufferingXmlWriter.flush(BufferingXmlWriter.java:214)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BufferingXmlWriter.close(BufferingXmlWriter.java:194)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1685)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585)[woodstox-osgi.jar:3.2.1]
        at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor.handleMessage(SoapOutInterceptor.java:282)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor.handleMessage(SoapOutInterceptor.java:270)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:99)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:315)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]
{noformat}","23/Feb/11 13:31;njiang;It looks like a CXF servlet transport issue.
I will spend some time to dig it tomorrow.
","23/Feb/11 13:48;dkulp;
Willem,
It might be slightly harder to debug with 2.3.3-SNAPSHOT/2.4.0-SNAPSHOT as the HttpRequestWrapper is now only created for one-ways and in some WS-RM/Addr cases.   Thus, it may ""just work"" with 2.3.3.   Try doing a one-way and seeing if the behavior persists.

","24/Feb/11 14:31;njiang;Applied patch into CXF trunk and 2.3.x branch.
If someone wants to try out the fix, please change cxf version in Camel trunk to 2.3.4-SNAPSHOT, and build the example with it.

Will resolve this issue when we upgrade the CXF version.","24/Feb/11 15:54;arnoud;I've tested the example against the CXF 2.3.4-SNAPSHOT. It works fine now for Tomcat 7 and Jetty 8. On GlassFish v3 however I get the following Exception:

{noformat}
[#|2011-02-24T16:44:47.451+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=pool-36-thread-1;|2011-02-24 16:44:47,450 [ool-36-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService#{http://incident.cxf.example.camel.apache.org/}reportIncident has thrown exception, unwinding now
java.lang.IllegalStateException: The request has not been put into asynchronous mode, must call ServletRequest.startAsync first
        at org.apache.catalina.connector.Request.getAsyncContext(Request.java:3764)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.RequestFacade.getAsyncContext(RequestFacade.java:1105)[web-core.jar:3.0.1]
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider$Servlet3Continuation.<init>(Servlet3ContinuationProvider.java:77)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider.getContinuation(Servlet3ContinuationProvider.java:57)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:126)[camel-cxf-2.6.0.jar:2.6.0]
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:67)[camel-cxf-2.6.0.jar:2.6.0]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:224)[cxf-api-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:70)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:118)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]
{noformat}","25/Feb/11 08:08;njiang;Hi Arnound,

Thanks for reporting this, I didn't try the GlassFish v3 when I fix the issue in CXF.
It looks like different Servlet3 implementation provides different status checking, 
I will commit a quick fix in CXF to work around the issue that you just found.

Cheers,

Willem
","25/Feb/11 13:29;njiang;Hi Arnoud,

I just committed a quick fix into CXF 2.3.x and trunk branch after went through the Servlet3 JRS315 the async section.
Now you should access the camel-cxf-example war which is deployed to GlassFish 3.0.1 without any other issue.
Please keep me posted if you have other issue about the camel-example-cxf-tomcat.

Cheers,
Willem","25/Feb/11 18:45;arnoud;Hi Willem,

I have tested this fixed version of CXF and the example now works on GlassFish v3. Also Tomcat and Jetty still work with this fixed version. I suppose we can consider this issue as fixed?

Thanks for your time and effort!

Arnoud.","26/Feb/11 08:08;davsclaus;Thanks for testing. I think we should close this ticket when Camel upgrades and uses the CXF version which has the fix. 

Willem is there an ETA on a new CXF release having that fix? We want to ship out Camel 2.7 soon.","26/Feb/11 08:33;njiang;CXF 2.3.3 is already cut and voted, the servlet3 patch is not catch up this release.
I think we should add this issue as a known issue when we release Camel 2.7.0.
","01/Mar/11 09:43;davsclaus;Added a note to known issues about the CXF bug, so the example doesn't work in Tomcat 7.","01/Mar/11 10:04;njiang;@Claus,
I think we should keep this issue open until we upgrade the CXF version to 2.3.4.
 ",01/Mar/11 10:23;davsclaus;Will be fixed by CXF 2.3.4 upgrade in CAMEL-3734,12/Apr/11 07:01;njiang;Update the CXF version to 2.3.4-SNAPSHOT.,,,,,,,,,,,,,,
Endpoints may be shutdown twice as they are tracked in two lists in CamelContext,CAMEL-3690,12499198,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Feb/11 08:16,25/Oct/11 11:36,14/Mar/19 02:43,21/Feb/11 09:19,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,"Endpoint is a Service which means they are listed in both a endpoint and service list. They should only be listed in the endpoint list.

This avoids issues with endpoints may be shutdown twice when Camel shutdown.

See nabble
http://camel.465427.n5.nabble.com/QuartzComponent-do-not-delete-quartz-worker-threads-when-shutdown-Camel-tp3393728p3393728.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76203,,,Mon Feb 21 09:19:07 UTC 2011,,,,,,,0|i01wan:,9001,,,,,,,,,21/Feb/11 09:19;davsclaus;trunk: 1072897.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel-javaspaces component doesn't work with the latest version of Gigaspaces,CAMEL-3687,12499124,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgreco,dgreco,19/Feb/11 15:15,25/Oct/11 11:36,14/Mar/19 02:43,21/Feb/11 10:41,2.7.0,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,I upgraded the camel-javaspaces to work with the latest 2.7-SNAPSHOT. Tested with Gigaspaces only,,,,,,,,,,,,,,,,,,19/Feb/11 15:18;dgreco;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12471473/patchfile.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-02-21 10:41:00.193,,,no_permission,,,,,,,,,,,,,,76204,,,Mon Feb 21 18:50:02 UTC 2011,,,Patch Available,,,,0|i01w9z:,8998,,,,,,,,,19/Feb/11 15:18;dgreco;Patch with the corrected component. The patch has been created from the trunk,"21/Feb/11 10:41;davsclaus;trunk: 1072924.

Thanks for the patch.

BTW: Now that camel 2.7 is JDK1.6+, should we migrate your other Camel components to Apache?","21/Feb/11 12:44;dgreco;Hi Claus,
there is the camel-hdfs component I could add, let me know you if you want me to add it","21/Feb/11 18:50;davsclaus;David that would be nice, please open a JIRA ticket and attach a patch. That's how we can accept contributions at Apache. (we cannot slurp from github etc.)",,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter in parallel mode blocks when empty body to split,CAMEL-3685,12499114,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Feb/11 07:35,25/Oct/11 11:36,14/Mar/19 02:43,19/Feb/11 08:34,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,"This is only in the parallel mode. Works fine in non parallel.

See nabble:
http://camel.465427.n5.nabble.com/Trying-to-split-an-empty-List-blocks-a-Quartz-initiated-thread-indefinitely-td3391736.html#a3392166",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76205,,,Sat Feb 19 08:34:45 UTC 2011,,,,,,,0|i01w9j:,8996,,,,,,,,,19/Feb/11 08:34;davsclaus;trunk: 1072268.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When splitting inside another split, the custom aggregationStrategy is not used.",CAMEL-3677,12498874,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ojelinski,ojelinski,17/Feb/11 12:01,17/Feb/11 12:47,14/Mar/19 02:43,17/Feb/11 12:47,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"When splitting inside another split, the custom aggregationStrategy is not used. For example in the route:

{code:xml}
	    <route id=""DoubleSplitRoute"">
	    	<from uri=""direct:in"" />
	    	<setBody>
	    		<constant>
&lt;a&gt;
	&lt;b&gt;
		&lt;c&gt;Hello&lt;/c&gt;
		&lt;c&gt;World&lt;/c&gt;
	&lt;/b&gt;
	&lt;b&gt;
		&lt;c&gt;Hello&lt;/c&gt;
		&lt;c&gt;again&lt;/c&gt;
	&lt;/b&gt;
&lt;/a&gt;
	    		</constant>
	    	</setBody>
			<split>
				<xpath>a/b</xpath>
				<split strategyRef=""concatWithSpaceStrategy"">
					<xpath>b/c/text()</xpath>
					<setBody><simple>${bodyAs(java.lang.String)}</simple></setBody>
					<log message=""Got a part: ${body}""/>
				</split>
				<log message=""Got a result: ${body}""/>
			</split>
		</route>
{code}

(where the {{concatWithSpaceStrategy}} does nothing more than to concat the bodies with a space inbetween.)

The expected results would be:

{code}
Got a result: Hello World
{code}

and 

{code}
Got a result: Hello again
{code}

But that is not what happens. The actual results are two times the same:

{code}
Got a result: 
<a>
	<b>
		<c>Hello</c>
		<c>World</c>
	</b>
	<b>
		<c>Hello</c>
		<c>again</c>
	</b>
</a>
{code}

The reason is, that the strategy is not used. In the class {{org.apache.camel.processor.MulticastProcessor}}, in the method {{protected AggregationStrategy getAggregationStrategy(Exchange exchange)}}, the first step is to find an aggregationStrategy in the Exchange. This is set to {{UseOriginalAggregationStrategy}}, and because it is not null, this aggregation strategy will be used, not the one declared for the splitter.

---

A workaround would be to remove the AggregationStrategy of the Exchange, before it is aggregated, by using a processor with the following process method:

{code:java}
	public void process(Exchange exchange) throws Exception {
		if (exchange != null) {
			exchange.removeProperty(Exchange.AGGREGATION_STRATEGY);
		}
	}
{code}

After integrating this in my route, I got the desired results.","Mac OS X 10.6.6, Eclipse Helios",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-17 12:25:51.897,,,no_permission,,,,,,,,,,,,,,76206,,,Thu Feb 17 12:47:51 UTC 2011,,,,,,,0|i01w7r:,8988,,,,,,,,,17/Feb/11 12:25;davsclaus;Can you try with Camel 2.6.0 - We have fixed issus with splitter in that release.,"17/Feb/11 12:47;ojelinski;Yes, sorry, I didn't use 2.6 yet, because I had different issues, and I didn't find the bug reported, so I didn't think it would have been fixed yet. But: yes! You fixed it in 2.6. My routes are working correct without my workaround.",17/Feb/11 12:47;ojelinski;Workaround no longer needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,
<jmxAgent>'s disabled attribute does not support property placeholders,CAMEL-3675,12498812,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marbor,marbor,16/Feb/11 23:25,25/Oct/11 11:36,14/Mar/19 02:43,17/Feb/11 07:45,2.5.0,,,,,,,,,,,,2.7.0,,,,jmx,,,,0,,,,,,"The Camel Properties web page (http://camel.apache.org/properties.html) states that property placeholder are supported on the <jmxAgent> tag.  However, the ""disabled"" attribute on this tag doesn't support property placeholders.

The AbstractCamelContextFactoryBean.initJMXAgent() method needs to call CamelContextHelper.parseBoolean() passing in the camelJMXAgent.isAgentDisabled() value to get property placeholders to work with this attribute.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-17 07:45:57.744,,,no_permission,,,,,,,,,,,,,,76207,,,Thu Feb 17 07:46:12 UTC 2011,,,,,,,0|i01w7b:,8986,,,,,,,,,17/Feb/11 07:45;davsclaus;trunk: 1071531.,17/Feb/11 07:46;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bean component - Thread safey issue when selecting method to use in BeanInfo,CAMEL-3670,12498726,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Feb/11 07:33,25/Oct/11 11:35,14/Mar/19 02:43,16/Feb/11 09:13,2.4.0,,,,,,,,,,,,2.7.0,,,,camel-cache,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bean-component-BeanInfo-thread-safety-tp3387197p3387197.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76208,,,Wed Feb 16 09:13:47 UTC 2011,,,,,,,0|i01w67:,8981,,,,,,,,,16/Feb/11 09:13;davsclaus;trunk: 1071179.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make Content-Type HTTP Header Optional,CAMEL-3666,12498589,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fribeiro,fribeiro,14/Feb/11 23:31,25/Oct/11 11:36,14/Mar/19 02:43,15/Feb/11 06:22,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-restlet,,,,0,,,,,,"As per section 7.2.1 of RFC 2616, any HTTP/1.1 message containing an entity-body SHOULD (not MUST) include a Content- Type header field defining the media type of that body.

The populateExchangeFromRestletRequest method of the DefaultRestletBinding class, unlike others in the same class, needs to be changed:

{code:Java}if (request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)) {
  ...
} else {
  inMessage.setBody(request.getEntity().getStream());
}{code}",,,,,,,,,,,,,,,,,,15/Feb/11 00:33;fribeiro;patch.txt;https://issues.apache.org/jira/secure/attachment/12471044/patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-02-15 06:22:22.537,,,no_permission,,,,,,,,,,,,,,76209,,,Tue Feb 15 06:22:22 UTC 2011,,,Patch Available,,,,0|i01w5b:,8977,,,,,,,,,"15/Feb/11 06:22;davsclaus;trunk: 1070784.

Thanks for the patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sampling EIP - NPE in toString,CAMEL-3664,12498521,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,14/Feb/11 12:07,25/Oct/11 11:35,14/Mar/19 02:43,14/Feb/11 12:11,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,The toString in SamplingDefinition should cater for units may be null.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76210,,,2011-02-14 12:07:21.0,,,,,,,0|i01w4v:,8975,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SMSC initiated unbind spawns exponential amounts of reconnect threads,CAMEL-3650,12498227,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,muellerc,jacovt,jacovt,10/Feb/11 10:49,25/Oct/11 11:35,14/Mar/19 02:43,28/Feb/11 18:42,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-smpp,,,,0,smpp,,,,,"It took me a bit of time to put my finger on this problem.

When an unbind PDU is sent from the SMSC side to a camel-smpp endpoint, a cascading amount reconnect threads are spawned by the reconnect code. I can reliably re-produce this problem having a simple smpp consumer to a SMSC / simulator and issuing an unbind from the SMSC / simulator.

Here are some logs (I have added additional debug messages to the SmppConsumer to show the object references and state of the SmppSession objects):

{code}
2011-02-10 12:23:05,931 [ing.Main.main()] INFO  MainSupport          - Apache Camel 2.6.0 starting
2011-02-10 12:23:06,338 [ing.Main.main()] INFO  amelNamespaceHandler - OSGi environment not detected.
2011-02-10 12:23:06,338 [ing.Main.main()] DEBUG amelNamespaceHandler - Using org.apache.camel.spring.CamelContextFactoryBean as CamelContextBeanDefinitionParser
2011-02-10 12:23:06,764 [ing.Main.main()] DEBUG amelNamespaceHandler - Registered default: org.apache.camel.spring.CamelProducerTemplateFactoryBean with id: template on camel context: camelTestRouteBuilderContext
2011-02-10 12:23:06,764 [ing.Main.main()] DEBUG amelNamespaceHandler - Registered default: org.apache.camel.spring.CamelConsumerTemplateFactoryBean with id: consumerTemplate on camel context: camelTestRouteBuilderContext
2011-02-10 12:23:06,965 [ing.Main.main()] DEBUG SpringCamelContext   - Set the application context classloader to: java.net.URLClassLoader@16e7eec9
2011-02-10 12:23:06,984 [ing.Main.main()] DEBUG elContextFactoryBean - Found JAXB created routes: []
2011-02-10 12:23:06,990 [ing.Main.main()] DEBUG SpringCamelContext   - Adding routes from builder: Routes: []
2011-02-10 12:23:07,059 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:23:07,059 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) is starting
2011-02-10 12:23:07,059 [ing.Main.main()] INFO  SpringCamelContext   - JMX enabled. Using ManagedManagementStrategy.
2011-02-10 12:23:07,106 [ing.Main.main()] DEBUG faultManagementAgent - Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@7e3b014c
2011-02-10 12:23:07,168 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=context,name=""camelTestRouteBuilderContext""
2011-02-10 12:23:07,194 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultTypeConverter(0x61e481c1)
2011-02-10 12:23:07,194 [ing.Main.main()] DEBUG DefaultTypeConverter - Loading type converters ...
2011-02-10 12:23:07,194 [ing.Main.main()] INFO  nTypeConverterLoader - Loading file META-INF/services/org/apache/camel/TypeConverter to retrieve list of packages, from url: jar:file:/home/jacovt/.m2/repository/org/apache/camel/camel-core/2.6.0/camel-core-2.6.0.jar!/META-INF/services/org/apache/camel/TypeConverter
2011-02-10 12:23:07,195 [ing.Main.main()] INFO  nTypeConverterLoader - Loading file META-INF/services/org/apache/camel/TypeConverter to retrieve list of packages, from url: jar:file:/home/jacovt/.m2/repository/org/apache/activemq/activemq-camel/5.3.1-fuse-02-00/activemq-camel-5.3.1-fuse-02-00.jar!/META-INF/services/org/apache/camel/TypeConverter
2011-02-10 12:23:07,196 [ing.Main.main()] DEBUG ageScanClassResolver - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter, org.apache.activemq.camel.converter]
2011-02-10 12:23:07,474 [ing.Main.main()] DEBUG ageScanClassResolver - Found: [class org.apache.camel.component.file.GenericFileConverter, class org.apache.camel.component.bean.BeanConverter, class org.apache.camel.converter.CamelConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.TimePatternConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.activemq.camel.converter.ActiveMQConverter, class org.apache.activemq.camel.converter.ActiveMQMessageConverter]
2011-02-10 12:23:07,474 [ing.Main.main()] INFO  nTypeConverterLoader - Found 4 packages with 15 @Converter classes to load
2011-02-10 12:23:07,474 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.component.file.GenericFileConverter
2011-02-10 12:23:07,479 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.component.bean.BeanConverter
2011-02-10 12:23:07,479 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.CamelConverter
2011-02-10 12:23:07,482 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.CollectionConverter
2011-02-10 12:23:07,483 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.IOConverter
2011-02-10 12:23:07,488 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.NIOConverter
2011-02-10 12:23:07,490 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.ObjectConverter
2011-02-10 12:23:07,491 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.TimePatternConverter
2011-02-10 12:23:07,491 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.DomConverter
2011-02-10 12:23:07,492 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.StaxConverter
2011-02-10 12:23:07,494 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter
2011-02-10 12:23:07,494 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.XmlConverter
2011-02-10 12:23:07,499 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter
2011-02-10 12:23:07,499 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.activemq.camel.converter.ActiveMQConverter
2011-02-10 12:23:07,501 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.activemq.camel.converter.ActiveMQMessageConverter
2011-02-10 12:23:07,507 [ing.Main.main()] DEBUG DefaultTypeConverter - Loading type converters done
2011-02-10 12:23:07,508 [ing.Main.main()] INFO  DefaultTypeConverter - Loaded 150 type converters in 0.313 seconds
2011-02-10 12:23:07,516 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultExecutorServiceStrategy(0x4d12ee4f)
2011-02-10 12:23:07,525 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=SharedProducerServicePool(0x15dbac11)
2011-02-10 12:23:07,525 [ing.Main.main()] DEBUG dProducerServicePool - Starting service pool: org.apache.camel.impl.SharedProducerServicePool@15dbac11
2011-02-10 12:23:07,534 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultInflightRepository(0xf7b650a)
2011-02-10 12:23:07,542 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultShutdownStrategy(0x6e267b76)
2011-02-10 12:23:07,555 [ing.Main.main()] DEBUG ultComponentResolver - Found component: smpp via type: org.apache.camel.component.smpp.SmppComponent via: META-INF/services/org/apache/camel/component/smpp
2011-02-10 12:23:07,590 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""smpp""
2011-02-10 12:23:07,591 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=u%24%40nk01], path=[ubankmobile01@127.0.0.1:2775], parameters=[{amp;enquireLinkTimer=55000, amp;systemType=ubankmobile01, amp;transactionTimer=15000, password=u$@nk01}]
2011-02-10 12:23:07,605 [ing.Main.main()] DEBUG SpringCamelContext   - smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=u%24%40nk01 converted to endpoint: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******] by component: org.apache.camel.component.smpp.SmppComponent@517c804b
2011-02-10 12:23:07,615 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""smpp://ubankmobile01@127.0.0.1:2775""
2011-02-10 12:23:07,655 [ing.Main.main()] DEBUG ultComponentResolver - Found component: log via type: org.apache.camel.component.log.LogComponent via: META-INF/services/org/apache/camel/component/log
2011-02-10 12:23:07,661 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""log""
2011-02-10 12:23:07,661 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[log://SmppIn], path=[SmppIn], parameters=[{}]
2011-02-10 12:23:07,666 [ing.Main.main()] DEBUG SpringCamelContext   - log://SmppIn converted to endpoint: Endpoint[log://SmppIn] by component: org.apache.camel.component.log.LogComponent@4633c1aa
2011-02-10 12:23:07,669 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""log://SmppIn""
2011-02-10 12:23:07,712 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=tracer,name=Tracer(0x3761f888)
2011-02-10 12:23:07,747 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
2011-02-10 12:23:07,754 [ing.Main.main()] DEBUG SpringCamelContext   - Warming up route id: SmppConsumerRoute having autoStartup=true
2011-02-10 12:23:07,772 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=ProducerCache(0x3a67ad79)
2011-02-10 12:23:07,774 [ing.Main.main()] DEBUG ProcessorEndpoint$1  - Starting producer: Producer[log://SmppIn]
2011-02-10 12:23:07,775 [ing.Main.main()] DEBUG ProducerCache        - Adding to producer cache with key: Endpoint[log://SmppIn] for producer: Producer[log://SmppIn]
2011-02-10 12:23:07,797 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=threadpools,name=DefaultErrorHandler(0xa62b39f)
2011-02-10 12:23:07,797 [ing.Main.main()] DEBUG cutorServiceStrategy - Created new scheduled thread pool for source: DefaultErrorHandler[TraceInterceptor[To[log:SmppIn]]] with name: ErrorHandlerRedeliveryTask. [poolSize=10]. -> java.util.concurrent.ScheduledThreadPoolExecutor@55fe910c
2011-02-10 12:23:07,844 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=processors,name=""to1""
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=routes,name=""SmppConsumerRoute""
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG SpringCamelContext   - Route: SmppConsumerRoute >>> EventDrivenConsumerRoute[Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******] -> Instrumentation:route[UnitOfWork(Channel[sendTo(Endpoint[log://SmppIn])])]]
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG SpringCamelContext   - Starting consumer (order: 1000) on route: SmppConsumerRoute
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x59c27402)
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG SmppConsumer         - Connecting to: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG SmppConsumer         - Starting consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:23:07,922 [ing.Main.main()] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:23:07,923 [ing.Main.main()] INFO  SMPPSession          - Connected
2011-02-10 12:23:07,923 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:23:07,925 [Thread-6       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:23:10,913 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:10,913 [pool-1-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-10 12:23:10,915 [ing.Main.main()] DEBUG AbstractSession      - bind response received
2011-02-10 12:23:10,915 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:23:10,916 [ing.Main.main()] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: BOUND_RX
2011-02-10 12:23:10,916 [Thread-7       ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-10 12:23:10,916 [ing.Main.main()] INFO  SmppConsumer         - Connected to: smpp://ubankmobile01@127.0.0.1:2775
2011-02-10 12:23:10,917 [ing.Main.main()] INFO  SpringCamelContext   - Route: SmppConsumerRoute started and consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******]
2011-02-10 12:23:10,918 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[spring-event://default], path=[default], parameters=[{}]
2011-02-10 12:23:10,919 [ing.Main.main()] DEBUG SpringCamelContext   - spring-event://default converted to endpoint: Endpoint[spring-event://default] by component: org.apache.camel.component.event.EventComponent@774e1f2b
2011-02-10 12:23:10,925 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-10 12:23:10,926 [ing.Main.main()] INFO  SpringCamelContext   - Total 1 routes, of which 1 is started.
2011-02-10 12:23:10,926 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) started in 3.866 seconds
2011-02-10 12:23:10,935 [ing.Main.main()] DEBUG MainSupport          - Starting Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af
2011-02-10 12:23:10,936 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextStartedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:23:11,408 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:11,408 [pool-1-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-10 12:23:16,413 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:16,413 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:18,851 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:18,852 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:23,853 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:23,853 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:24,854 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:24,854 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:29,859 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:29,859 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:30,938 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:30,938 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:35,943 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:35,943 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:37,901 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:37,901 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:42,906 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:42,906 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:45,256 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:45,256 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:50,261 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:50,261 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:51,232 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:51,232 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:56,237 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:56,237 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:57,208 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:57,208 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:02,211 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:02,211 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:24:03,277 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:03,277 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:08,281 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:08,281 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:24:09,436 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:09,437 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:09,821 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:09,821 [pool-1-thread-3] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-10 12:24:09,822 [pool-1-thread-3] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@501b2cb9]
{code}

Everything is perfectly fine up to this point. It is here that the SMSC / simulator issues an unbind request towards the camel-smpp consumer.

{code}
2011-02-10 12:24:09,937 [Thread-7       ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-10 12:24:14,826 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:14,827 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:14,827 [Thread-6       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:14,827 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:14,829 [Thread-8       ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:19,829 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:19,830 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@1b6b7f83]
2011-02-10 12:24:19,831 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:22,834 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:22,834 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:22,835 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:22,837 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@1b6b7f83]
{code}

The above negative bind responseis due to the fact that only a single smpp RX bind is allowed to the SMSC / simulator. I suspect the underlying problem is how the exception is handled here, but I might be wrong.

{code}
2011-02-10 12:24:22,838 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:22,838 [Thread-10      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:22,838 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:22,838 [Thread-9       ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:27,838 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:27,839 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:27,839 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:27,839 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:27,839 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@62bc184]
2011-02-10 12:24:27,840 [Thread-11      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:27,840 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:27,840 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@3e30e173]
{code}

OK, wait, we have 2 SMPPSession object references now? Seems like we have 2 Threads running that tries to re-connect...

{code}
2011-02-10 12:24:27,841 [Thread-12      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:31,035 [pool-3-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:31,035 [pool-3-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:31,035 [Thread-10      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:31,035 [Thread-10      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@62bc184]
2011-02-10 12:24:31,036 [Thread-10      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:31,036 [Thread-10      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:31,036 [Thread-11      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:31,037 [Thread-13      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:32,846 [Thread-12      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:32,982 [pool-4-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:32,982 [pool-4-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:32,982 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@3e30e173]
2011-02-10 12:24:32,982 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:32,983 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:32,983 [Thread-12      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:32,983 [Thread-14      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:32,983 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:32,983 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:36,037 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:36,037 [Thread-13      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
{code}

Some more re-connect threads...

{code}
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:36,038 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:36,038 [Thread-13      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:36,038 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:36,038 [Thread-13      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@782bbb7b]
2011-02-10 12:24:36,039 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@7f21c5df]
2011-02-10 12:24:36,039 [Thread-15      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:36,039 [Thread-16      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:37,983 [Thread-14      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:37,984 [Thread-14      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:37,984 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #3...
2011-02-10 12:24:37,984 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:37,984 [Thread-14      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:37,984 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:37,984 [Thread-14      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:37,984 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:37,985 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@6a754384]
2011-02-10 12:24:37,985 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@38a3c5b6]
2011-02-10 12:24:37,985 [Thread-17      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:37,987 [Thread-18      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:38,831 [pool-6-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:38,831 [pool-6-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:38,831 [Thread-13      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:38,831 [Thread-13      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@7f21c5df]
2011-02-10 12:24:38,832 [Thread-13      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:38,832 [Thread-19      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:38,832 [Thread-13      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:38,832 [Thread-16      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:38,833 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:40,957 [pool-5-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:40,957 [pool-5-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:40,957 [Thread-10      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:40,957 [Thread-10      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@782bbb7b]
2011-02-10 12:24:40,958 [Thread-10      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:40,958 [Thread-20      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:40,958 [Thread-15      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:40,958 [Thread-10      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:40,959 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,821 [pool-8-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:42,821 [pool-8-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:42,821 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:42,822 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@38a3c5b6]
2011-02-10 12:24:42,822 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,822 [Thread-21      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:42,822 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:42,822 [Thread-18      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:42,823 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,988 [Thread-17      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:43,832 [Thread-19      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:43,833 [Thread-13      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:43,833 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:43,833 [Thread-19      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:43,833 [Thread-13      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@18dd7404]
2011-02-10 12:24:43,834 [Thread-13      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:43,834 [Thread-22      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:43,834 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@53606bf5]
2011-02-10 12:24:43,835 [Thread-23      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:44,972 [pool-7-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:44,972 [pool-7-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:44,972 [Thread-14      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:44,972 [Thread-14      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:44,972 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@6a754384]
2011-02-10 12:24:44,973 [Thread-14      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:44,973 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:44,973 [Thread-14      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:44,973 [Thread-24      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:44,973 [Thread-17      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:44,973 [Thread-14      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:44,974 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:45,958 [Thread-20      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:45,958 [Thread-20      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:45,959 [Thread-20      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:45,959 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #3...
2011-02-10 12:24:45,959 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:45,959 [Thread-20      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:45,959 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:45,959 [Thread-20      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@684be8b8]
2011-02-10 12:24:45,960 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:45,960 [Thread-25      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:45,960 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@79b7d13e]
2011-02-10 12:24:45,960 [Thread-26      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:47,018 [pool-9-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:47,018 [pool-9-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:47,018 [Thread-19      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:47,018 [Thread-19      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:47,018 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@18dd7404]
2011-02-10 12:24:47,019 [Thread-19      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,019 [Thread-19      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:47,019 [Thread-22      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:47,020 [Thread-27      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
{code}

Even more re-connect threads being spawned...

{code}
2011-02-10 12:24:47,823 [Thread-21      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:47,823 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #4...
2011-02-10 12:24:47,823 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,823 [Thread-21      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:47,823 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@490eb6ae]
2011-02-10 12:24:47,824 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:47,824 [Thread-28      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:47,824 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@3b4d82e1]
2011-02-10 12:24:47,825 [Thread-29      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:48,838 [Thread-23      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:48,962 [ool-10-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:48,962 [ool-10-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:48,962 [Thread-13      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:48,962 [Thread-13      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@53606bf5]
2011-02-10 12:24:48,963 [Thread-13      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:48,963 [Thread-13      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:48,963 [Thread-23      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:48,964 [Thread-30      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
^C2011-02-10 12:24:49,726 [Thread-5       ] INFO  rt$HangupInterceptor - Received hang up - stopping the main instance.
2011-02-10 12:24:49,726 [Thread-5       ] INFO  MainSupport          - Apache Camel 2.6.0 stopping
2011-02-10 12:24:49,727 [Thread-5       ] DEBUG MainSupport          - Stopping Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af
2011-02-10 12:24:49,733 [Thread-5       ] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:24:49,735 [Thread-5       ] DEBUG ledConnectionFactory - Stop the PooledConnectionFactory, number of connections in cache: 0
2011-02-10 12:24:49,736 [Thread-5       ] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext:camelTestRouteBuilderContext) is shutting down
2011-02-10 12:24:49,737 [Thread-5       ] INFO  aultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 300 seconds)
2011-02-10 12:24:49,738 [Thread-5       ] DEBUG cutorServiceStrategy - Created new single thread pool for source: org.apache.camel.impl.DefaultShutdownStrategy@6e267b76 with name: ShutdownTask. -> java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6ea53502
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG aultShutdownStrategy - There are 1 routes to shutdown
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Disconnecting from: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Closing session: org.jsmpp.session.SMPPSession@501b2cb9
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - calling super.doStop()
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Stopping consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG ProcessorEndpoint$1  - Stopping producer: Producer[log://SmppIn]
2011-02-10 12:24:49,743 [ - ShutdownTask] INFO  SmppConsumer         - Disconnected from: smpp://ubankmobile01@127.0.0.1:2775
2011-02-10 12:24:49,743 [ - ShutdownTask] DEBUG aultShutdownStrategy - Shutdown complete for: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:24:49,743 [ - ShutdownTask] INFO  aultShutdownStrategy - Route: SmppConsumerRoute shutdown complete, was consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******]
2011-02-10 12:24:49,744 [Thread-5       ] INFO  aultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=routes,name=""SmppConsumerRoute""
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x59c27402)
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=processors,name=""to1""
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=context,name=""camelTestRouteBuilderContext""
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG cutorServiceStrategy - ShutdownNow ExecutorService: java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6ea53502
2011-02-10 12:24:49,747 [Thread-5       ] INFO  ltInflightRepository - Shutting down with no inflight exchanges.
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG dProducerServicePool - Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@15dbac11
2011-02-10 12:24:49,748 [Thread-5       ] DEBUG cutorServiceStrategy - ShutdownNow ExecutorService: java.util.concurrent.ScheduledThreadPoolExecutor@55fe910c
2011-02-10 12:24:49,748 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=threadpools,name=DefaultErrorHandler(0xa62b39f)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""smpp""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultExecutorServiceStrategy(0x4d12ee4f)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""log://SmppIn""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=ProducerCache(0x3a67ad79)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultTypeConverter(0x61e481c1)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=SharedProducerServicePool(0x15dbac11)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=tracer,name=Tracer(0x3761f888)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultShutdownStrategy(0x6e267b76)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""log""
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultInflightRepository(0xf7b650a)
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""smpp://ubankmobile01@127.0.0.1:2775""
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
2011-02-10 12:24:49,750 [Thread-5       ] INFO  SpringCamelContext   - Uptime: 1 minute
2011-02-10 12:24:49,750 [Thread-5       ] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) is shutdown in 0.014 seconds
{code}


The above thread-spawning quickly gets out of hand with thousands being created.

Note however that this problem does not seem to happen when the smsc goes down (session is closed and a connection refused pops up), but only when an unbind happens and then a negative bind.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-10 14:35:00.797,,,no_permission,,,,,,,,,,,,,,76211,,,Mon Feb 28 18:41:44 UTC 2011,,,,,,,0|i01w1r:,8961,,,,,,,,,10/Feb/11 14:35;muellerc;Will have a look on it later today...,10/Feb/11 20:52;muellerc;Committed r1069564,"10/Feb/11 20:53;muellerc;Jaco, I applied a patch to truck. It would be nice, if you could check whether this patch solves your problem (It's a bit tricky to test).","11/Feb/11 09:33;jacovt;Christian,

Thanks for the quick patch. On first glance it seems to do the trick, I would just like to do a couple more tests to see how it behaves with multiple SMPP consumers, different providers, etc.

I see the same reconnect also lives in the SmppProducer class. Could we perhaps get the fix in there too?

Thanks again. :)

---Jaco",11/Feb/11 09:37;muellerc;This should also be fixed in SmppProducer,11/Feb/11 20:42;muellerc;Committed r1069950,"11/Feb/11 20:44;muellerc;Jaco, I also fixed this issue in SmppProducer. Would be nice, if you also could check, whether this works also for the SMSC you can test with.","13/Feb/11 01:20;jacovt;Hello Christian,

I have tested a bit more and after the lock change, it seems that it triggers some more exceptions down the line that stops the threads from reconnecting completely now.

Here the the full debug session:

{code}
2011-02-13 03:09:30,907 [ing.Main.main()] DEBUG SpringCamelContext   - Route: SmppConsumerRoute >>> EventDrivenConsumerRoute[Endpoint[smpp://ubankmobile01@127.0.0.1:2775?enquireLinkTimer=10000&initialReconnectDelay=30000&password=******&reconnectDelay=15000&transactionTimer=15000] -> Instrumentation:route[UnitOfWork(Channel[sendTo(Endpoint[log://SmppIn])])]]
2011-02-13 03:09:30,907 [ing.Main.main()] DEBUG SpringCamelContext   - Starting consumer (order: 1000) on route: SmppConsumerRoute
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x3cee5a06)
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG SmppConsumer         - Connecting to: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG SmppConsumer         - Starting consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-13 03:09:30,958 [ing.Main.main()] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-13 03:09:30,959 [ing.Main.main()] INFO  SMPPSession          - Connected
2011-02-13 03:09:30,959 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:09:30,961 [Thread-6       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-13 03:09:33,005 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:33,005 [pool-1-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-13 03:09:33,007 [ing.Main.main()] DEBUG AbstractSession      - bind response received
2011-02-13 03:09:33,007 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:09:33,008 [ing.Main.main()] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@69d1964d], session state: BOUND_RX
2011-02-13 03:09:33,008 [Thread-7       ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-13 03:09:33,008 [ing.Main.main()] INFO  SmppConsumer         - Connected to: smpp://ubankmobile01@127.0.0.1:2775
2011-02-13 03:09:33,009 [ing.Main.main()] INFO  SpringCamelContext   - Route: SmppConsumerRoute started and consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?enquireLinkTimer=10000&initialReconnectDelay=30000&password=******&reconnectDelay=15000&transactionTimer=15000]
2011-02-13 03:09:33,010 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[spring-event://default], path=[default], parameters=[{}]
2011-02-13 03:09:33,011 [ing.Main.main()] DEBUG SpringCamelContext   - spring-event://default converted to endpoint: Endpoint[spring-event://default] by component: org.apache.camel.component.event.EventComponent@110f965e
2011-02-13 03:09:33,017 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-13 03:09:33,017 [ing.Main.main()] INFO  SpringCamelContext   - Total 1 routes, of which 1 is started.
2011-02-13 03:09:33,018 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) started in 2.886 seconds
2011-02-13 03:09:33,020 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:33,020 [pool-1-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-13 03:09:33,027 [ing.Main.main()] DEBUG MainSupport          - Starting Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@46eff545
2011-02-13 03:09:33,028 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextStartedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@46eff545: startup date [Sun Feb 13 03:09:29 SAST 2011]; root of context hierarchy]
2011-02-13 03:09:43,048 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:09:43,048 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:09:45,075 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:45,076 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:09:55,085 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:09:55,085 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:09:55,137 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:55,138 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:05,143 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:05,143 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:05,199 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:05,199 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:15,209 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:15,209 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:15,261 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:15,261 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:25,264 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:25,264 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:25,323 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:25,323 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:31,359 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:31,359 [pool-1-thread-2] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-13 03:10:31,360 [pool-1-thread-2] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:31,825 [Thread-7       ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-13 03:10:36,367 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:36,367 [Thread-6       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-13 03:10:36,367 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:36,369 [Thread-8       ] INFO  SmppConsumer         - Schedule reconnect after 30000 millis
2011-02-13 03:11:06,370 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-13 03:11:06,370 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@69d1964d], session state: CLOSED
2011-02-13 03:11:06,370 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-13 03:11:06,370 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-13 03:11:06,371 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:11:06,371 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-13 03:11:08,426 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:08,426 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-13 03:11:08,426 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-13 03:11:08,426 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:11:08,427 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@71b456f], session state: BOUND_RX
2011-02-13 03:11:08,427 [Thread-10      ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-13 03:11:08,427 [Thread-8       ] INFO  SmppConsumer         - Reconnected to smpp://ubankmobile01@127.0.0.1:2775
2011-02-13 03:11:08,427 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@71b456f], session state: BOUND_RX
[WARNING] an additional exception was thrown
java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:127)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1239)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:431)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:248)
2011-02-13 03:11:08,449 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:08,449 [pool-2-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-13 03:11:18,453 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:18,454 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:18,488 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:18,488 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:28,498 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:28,498 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:28,547 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:28,548 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:38,548 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:38,548 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:38,612 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:38,612 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:48,622 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:48,622 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:48,674 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:48,674 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:58,684 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:58,684 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:58,733 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:58,733 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:12:08,743 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:12:08,743 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:12:08,795 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:12:08,795 [pool-2-thread-2] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-13 03:12:08,796 [pool-2-thread-2] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:12:13,802 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:12:13,802 [Thread-9       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-13 03:12:13,802 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@71b456f]
[WARNING] an additional exception was thrown
java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:76)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:62)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:198)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.readPDU(SMPPSession.java:575)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.run(SMPPSession.java:539)
2011-02-13 03:12:23,744 [Thread-10      ] INFO  SMPPSession          - EnquireLinkSender stop

{code}

After this line nothing seems to happen at all, and all threads are dead. Here is a complete thread dump:

{code}

2011-02-13 03:18:56
Full thread dump Java HotSpot(TM) 64-Bit Server VM (19.0-b09 mixed mode):

""RMI TCP Connection(3)-172.17.5.113"" daemon prio=10 tid=0x0000000042254000 nid=0x236f runnable [0x00007feee3161000]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
	- locked <0x00000000ee284830> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(FilterInputStream.java:66)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:517)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8d548> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""RMI TCP Connection(2)-172.17.5.113"" daemon prio=10 tid=0x00000000417ff800 nid=0x236d runnable [0x00007feee3262000]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
	- locked <0x00000000ee145210> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(FilterInputStream.java:66)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:517)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8cd40> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""JMX server connection timeout 41"" daemon prio=10 tid=0x00000000417ef800 nid=0x236a in Object.wait() [0x00007feee3363000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000edf12f50> (a [I)
	at com.sun.jmx.remote.internal.ServerCommunicatorAdmin$Timeout.run(ServerCommunicatorAdmin.java:150)
	- locked <0x00000000edf12f50> (a [I)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""RMI Scheduler(0)"" daemon prio=10 tid=0x00000000417ee800 nid=0x2369 waiting on condition [0x00007feee3464000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000edc9f6d0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:198)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	at java.util.concurrent.DelayQueue.take(DelayQueue.java:164)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:609)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:602)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""RMI TCP Connection(1)-172.17.5.113"" daemon prio=10 tid=0x0000000041c90800 nid=0x2368 in Object.wait() [0x00007feee3665000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000ee15ea40> (a com.sun.jmx.remote.internal.ArrayNotificationBuffer)
	at com.sun.jmx.remote.internal.ArrayNotificationBuffer.fetchNotifications(ArrayNotificationBuffer.java:417)
	- locked <0x00000000ee15ea40> (a com.sun.jmx.remote.internal.ArrayNotificationBuffer)
	at com.sun.jmx.remote.internal.ArrayNotificationBuffer$ShareBuffer.fetchNotifications(ArrayNotificationBuffer.java:209)
	at com.sun.jmx.remote.internal.ServerNotifForwarder.fetchNotifs(ServerNotifForwarder.java:258)
	at javax.management.remote.rmi.RMIConnectionImpl$2.run(RMIConnectionImpl.java:1227)
	at javax.management.remote.rmi.RMIConnectionImpl$2.run(RMIConnectionImpl.java:1225)
	at javax.management.remote.rmi.RMIConnectionImpl.fetchNotifications(RMIConnectionImpl.java:1231)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
	at sun.rmi.transport.Transport$1.run(Transport.java:159)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8c518> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""RMI TCP Accept-0"" daemon prio=10 tid=0x0000000041f21000 nid=0x2366 runnable [0x00007feee3ffe000]
   java.lang.Thread.State: RUNNABLE
	at java.net.PlainSocketImpl.socketAccept(Native Method)
	at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:390)
	- locked <0x00000000edca3180> (a java.net.SocksSocketImpl)
	at java.net.ServerSocket.implAccept(ServerSocket.java:462)
	at java.net.ServerSocket.accept(ServerSocket.java:430)
	at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:34)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:369)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:341)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""Attach Listener"" daemon prio=10 tid=0x0000000041b8b000 nid=0x2364 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""pool-2-thread-3"" prio=10 tid=0x0000000041b8c000 nid=0x21a9 waiting on condition [0x00007feee3871000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-2-thread-2"" prio=10 tid=0x0000000041c90000 nid=0x21a3 waiting on condition [0x00007feee3c75000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-2-thread-1"" prio=10 tid=0x0000000041b8a000 nid=0x21a1 waiting on condition [0x00007feee3a73000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-3"" prio=10 tid=0x0000000041c8f800 nid=0x2173 waiting on condition [0x00007feee8372000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-2"" prio=10 tid=0x00000000418fa800 nid=0x2168 waiting on condition [0x00007feee3b74000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-1"" prio=10 tid=0x00000000418f9000 nid=0x2166 waiting on condition [0x00007feee8170000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""org.apache.camel.spring.Main.main()"" prio=10 tid=0x00007feee4420000 nid=0x2164 waiting on condition [0x00007feee8270000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000f7bd6a28> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
	at org.apache.camel.impl.MainSupport.waitUntilCompleted(MainSupport.java:309)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:139)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:322)
	at org.apache.camel.spring.Main.main(Main.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:415)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-5"" prio=10 tid=0x00007feee43a2800 nid=0x213b in Object.wait() [0x00007feee8bc9000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-4"" prio=10 tid=0x00007feee42a7800 nid=0x213a in Object.wait() [0x00007feee8cca000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-3"" prio=10 tid=0x00000000419b2000 nid=0x2134 in Object.wait() [0x00007feee8dcb000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-2"" prio=10 tid=0x00007feee449a800 nid=0x2133 in Object.wait() [0x00007feee8ecc000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-1"" prio=10 tid=0x00007feee4400000 nid=0x2132 in Object.wait() [0x00007feee8fcd000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""Low Memory Detector"" daemon prio=10 tid=0x0000000041704800 nid=0x212c runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""CompilerThread1"" daemon prio=10 tid=0x00007feee406d800 nid=0x212b waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""CompilerThread0"" daemon prio=10 tid=0x00007feee406a800 nid=0x212a waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Signal Dispatcher"" daemon prio=10 tid=0x00007feee4068800 nid=0x2129 runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Finalizer"" daemon prio=10 tid=0x00007feee404a000 nid=0x2128 in Object.wait() [0x00007feee98b4000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c467df20> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)
	- locked <0x00000000c467df20> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)
	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)

   Locked ownable synchronizers:
	- None

""Reference Handler"" daemon prio=10 tid=0x00007feee4048000 nid=0x2127 in Object.wait() [0x00007feee99b5000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c467deb8> (a java.lang.ref.Reference$Lock)
	at java.lang.Object.wait(Object.java:485)
	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
	- locked <0x00000000c467deb8> (a java.lang.ref.Reference$Lock)

   Locked ownable synchronizers:
	- None

""main"" prio=10 tid=0x00000000416e3000 nid=0x2121 in Object.wait() [0x00007feeee8c4000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000f7bd56c0> (a java.lang.Thread)
	at java.lang.Thread.join(Thread.java:1186)
	- locked <0x00000000f7bd56c0> (a java.lang.Thread)
	at org.apache.camel.maven.RunMojo.joinThread(RunMojo.java:511)
	at org.apache.camel.maven.RunMojo.joinNonDaemonThreads(RunMojo.java:503)
	at org.apache.camel.maven.RunMojo.execute(RunMojo.java:430)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

   Locked ownable synchronizers:
	- None

""VM Thread"" prio=10 tid=0x00007feee4044000 nid=0x2126 runnable 

""GC task thread#0 (ParallelGC)"" prio=10 tid=0x00000000416f6000 nid=0x2122 runnable 

""GC task thread#1 (ParallelGC)"" prio=10 tid=0x00000000416f8000 nid=0x2123 runnable 

""GC task thread#2 (ParallelGC)"" prio=10 tid=0x00000000416fa000 nid=0x2124 runnable 

""GC task thread#3 (ParallelGC)"" prio=10 tid=0x00000000416fb800 nid=0x2125 runnable 

""VM Periodic Task Thread"" prio=10 tid=0x000000004170f000 nid=0x212d waiting on condition 

JNI global references: 1696
{code}

It seems that this might be triggered by a bug in jsmpp itself (The concurrent modification exception)

Thanks,
---Jaco","13/Feb/11 21:44;muellerc;Jaco,
thanks for reporting this and your very useful tests. I found an issue in SmppConsumer and fixed it. Could you please test the latest version again.
Thanks,
Christian","14/Feb/11 11:11;jacovt;Hello Christian,

Just had a quick test, the same problem seems to persist even after the latest bugfix. Here are the logs:

{code}
2011-02-14 12:54:57,128 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@590a8143], session state: CLOSED
2011-02-14 12:54:57,129 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-14 12:54:57,129 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-14 12:54:57,129 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:54:57,130 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-14 12:54:59,726 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:54:59,727 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@5d748654], session state: BOUND_RX
2011-02-14 12:54:59,728 [Thread-10      ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-14 12:54:59,728 [Thread-8       ] INFO  SmppConsumer         - Reconnected to smpp://ubankmobile01@127.0.0.1:2775
2011-02-14 12:54:59,728 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@5d748654], session state: BOUND_RX
[WARNING] an additional exception was thrown
java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:127)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1239)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:431)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:248)
2011-02-14 12:55:00,062 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:00,062 [pool-2-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-14 12:55:10,072 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:10,072 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:11,802 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:11,802 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:21,803 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:21,803 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:24,858 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:24,858 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:34,868 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:34,868 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:36,067 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:36,067 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:46,076 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:46,076 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:48,176 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:48,176 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:58,174 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:58,174 [pool-2-thread-1] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-14 12:55:58,175 [pool-2-thread-1] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:55:58,179 [Thread-10      ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-14 12:56:03,138 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:56:03,138 [Thread-9       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-14 12:56:03,138 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@5d748654]
[WARNING] an additional exception was thrown
java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:76)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:62)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:198)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.readPDU(SMPPSession.java:575)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.run(SMPPSession.java:539)
{code}

The first exception bugs be a bit, I don't think that the locking / unlocking of the thread is working as expected. Reason I am saying this is that it throws that IllegalMonitorStateException the very first time it reaches the unlock() portion of the reconnect code.

Hope this helps.
---Jaco","14/Feb/11 12:32;jacovt;Hello Christian,

I have spotted where the IllegalMonitorStateException comes from: in the reconnect method, the recconectLock is locked outside of the new thread that gets spawned to reconnect the smpp session, but the unlock() is done inside of the thread that gets created, meaning that the inner thread does not own the lock.

Would it not make more sense to make this whole reconnect method synchronized?

Thank you! :)
---Jaco","15/Feb/11 18:47;muellerc;Yeah, well spotted. I wanted check the java doc for the ReentrantLock, but I forgot it... :-(
Anyway, I think I could solve it. The lock is now released in the same thread (Committed r1071012).

Could you check it again, please? And by the way, do you use a open source or free ware tool for your tests which I could also use?

Christian","16/Feb/11 10:26;jacovt;Christian,

Thanks for the patch. I have just updated and tested it a bit. The ConcurrentModificationException persists. This seems to have something to do with the way the JSMPP session is disposed of (I don't think it actually dies). I can see this when I have visualvm connected to the JMX endoint exposed from camel. For every reconnect the live thread count increases (meaning those old threads never seems to die).

I am in the process of creating a thread dump to attach to this issue so you can have a better look. I could possibly also create the actual dump (including heap and references) that you can inspect?

I am currently not using a simulator for this testing, SMPPsim does not have unbind available from the simulator side. I did ask the developers over there to implement that functionality, but they are lacking time at the moment to do so. I have added you on gtalk to discuss a possible testing scenario from your side. I assume you have gtalk access?

---Jaco","27/Feb/11 12:43;muellerc;The ConcurrentModificationException is thrown inside the jsmpp library when I remove the sessionStateListener and call unbindAndClose:
{code}
session.removeSessionStateListener(this.sessionStateListener);
session.unbindAndClose();
{code}

I removed the calls to removeSessionStateListener which should work around this issue:

{code}
session.unbindAndClose();
{code}

This should not be a problem, but without a good test SMSC it's hard to test it.

I will work on a simple SMSC test implementation with which we can automate out integration unit tests.

@Jaco: Could you please test the latest trunk version!?",27/Feb/11 12:43;muellerc;Committed r1075042,27/Feb/11 12:58;muellerc;Report the jsmpp issue: http://code.google.com/p/jsmpp/issues/detail?id=93,"28/Feb/11 12:27;jacovt;Hello Christian,

Thanks for the updates and the defect that you logged over at jsmpp.

I had a quick look at the code, and yes, you are right. The bug seems to be inside of jsmpp when removing the session from an array that is not 100% thread safe.

From my side I would suggest we keep the call to session.removeSessionStateListener() in the camel-smpp code. This is the correct behavior from camel's point of view. The ConcurrentModificationException *should* not have an effect on the camel route, but it will definitely keep the thread alive (as witnessed in the stack trace / thread dump a couple of comments above) because of the still-active listener.

Even with the current trunk version of the code (the code that removed session.removeSessionStateListener()) the threads will stay alive, since there is still a listener attached.

As a workaround in the camel-smpp code, I wonder if it would be possible to surround this with a try/catch block to catch the ConcurrentModificationException: 
{code}
session.removeSessionStateListener(this.sessionStateListener);
session.unbindAndClose();
{code}

I know that would not be the cleanest solution in the world, but doing it that way, we can warn the user about the problem (LOG.warn() on exception comes to mind) and the code will not have to change once jsmpp fixes the bug. Or should we rather let the exception boil all the way up and let onException() in camel handle it? We would have to document this on the camel-smpp wiki page though. This will also not fix the memory leak, but at least the code will work out of the box when the jsmpp bug is fixed and the new bundle is dropped into servicemix.

I also suggest we try to get a patch together to fix the jsmpp bug and submit it. I will see if I can get around to do that. That way we can see how quickly we can get the bug fixed in jsmpp and let the nice folk over at servicemix build an updated OSGi-aware bundle for jsmpp.

Ideas?

Thank you,
---Jaco","28/Feb/11 18:39;muellerc;I will go for the following solution:
{code}
session.removeSessionStateListener(this.sessionStateListener);
// remove this hack after http://code.google.com/p/jsmpp/issues/detail?id=93 is fixed
try {
    Thread.sleep(1000);
    session.unbindAndClose();
} catch (Exception e) {
    LOG.warn(""Could not close session "" + session);
}
session = null;
{code}

With a little sleep which only has an affect if we shutdown the component or if we have to reconnect, the problem could be solved (I will test it when we have a good test SMSC implementation we can use).
However, I added also the try catch block to be sure, the ConcurrentModificationException will not boil all the way up to our user.

Do you agree?

Christian",28/Feb/11 18:41;muellerc;Committed r1075473,,,,,,,,,,,
camel-ftp - Should import bundle from camel-core to load file strategies,CAMEL-3642,12498088,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Feb/11 07:57,25/Oct/11 11:36,14/Mar/19 02:43,09/Feb/11 07:58,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-ftp,,,,0,,,,,,"See forum
http://fusesource.com/forums/thread.jspa?threadID=2654&tstart=0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76212,,,Wed Feb 09 07:58:23 UTC 2011,,,,,,,0|i01vzz:,8953,,,,,,,,,09/Feb/11 07:58;davsclaus;trunk: 1068776.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-lucene - Should use Camel type converter when casting headers to String,CAMEL-3640,12497964,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Feb/11 08:51,25/Oct/11 11:35,14/Mar/19 02:43,11/Feb/11 06:09,2.6.0,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-camel-lucene-component-tp3369088p3369088.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76213,,,Fri Feb 11 06:09:25 UTC 2011,,,,,,,0|i01vzj:,8951,,,,,,,,,11/Feb/11 06:09;davsclaus;trunk: 1069680.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mistake in camel-eventAdmin feature,CAMEL-3637,12497816,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,07/Feb/11 07:47,25/Oct/11 11:35,14/Mar/19 02:43,07/Feb/11 09:41,2.6.0,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,"The Camel Karaf feature camel-eventAdmin is not correct.

The features is described as follow:
<feature name=""camel-eventAdmin"" version=""2.6.0"">
  <feature version=""2.6.0"">camel-core</feature>
  <bundle>mvn:org.apache.camel/camel-eventAdmin/2.6.0</bundle>
</feature>

but the camel-eventAdmin artifact correct name is camel-eventadmin:
http://repo2.maven.org/maven2/org/apache/camel/camel-eventadmin/2.6.0/camel-eventadmin-2.6.0.jar

This typo mistake provides:
Downloading: http://repo1.maven.org/maven2/org/apache/camel/camel-eventAdmin/2.6.0/camel-eventAdmin-2.6.0.jar
[INFO] Unable to find resource 'org.apache.camel:camel-eventAdmin:jar:2.6.0' in repository central (http://repo1.maven.org/maven2)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Can't resolve bundle org.apache.camel:camel-eventAdmin:jar:2.6.0
[INFO] ------------------------------------------------------------------------

I'm gonna submit a patch to fix that.
",,,,,,,,,,,,,,,,,,07/Feb/11 09:29;jbonofre;CAMEL-3637.patch;https://issues.apache.org/jira/secure/attachment/12470424/CAMEL-3637.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-02-07 09:41:20.364,,,no_permission,,,,,,,,,,,,,,76214,,,Mon Feb 07 09:41:20 UTC 2011,,,,,,,0|i01vyv:,8948,,,,,,,,,"07/Feb/11 09:41;davsclaus;trunk: 1067890.

Thanks for patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blueprint container goes 'GracePeriod' if component is defined in the same XML file,CAMEL-3620,12497618,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gertvanthienen,gertvanthienen,03/Feb/11 20:49,25/Oct/11 11:35,14/Mar/19 02:43,24/Feb/11 10:25,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-blueprint,,,,1,,,,,,"When a Blueprint file contains both a route and a component bean definition, the Camel routes get started correct but the Blueprint container will go to status 'GracePeriod'.  

An example:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint
    xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""
      http://www.osgi.org/xmlns/blueprint/v1.0.0
      http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
      <route>
        <from uri=""file:activemq/input""/>
        <to uri=""file:activemq/output""/>

        <setBody>
          <simple>
            FileMovedEvent(file: ${file:name}, timestamp: ${date:now:hh:MM:ss.SSS})
          </simple>
        </setBody>
        <to uri=""amq://events"" />
      </route>
    </camelContext>

    <bean id=""amq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
      <property name=""brokerURL"" value=""vm://default?create=false&amp;waitForStart=10000""/>
    </bean>

</blueprint>
{code}

After the 5 minute time-out period, the routes are stopped and we end up with this message in the log file.
{noformat}
Unable to start blueprint container for bundle activemq2.xml due to unresolved dependencies 
  [(&(component=log)(objectClass=org.apache.camel.spi.ComponentResolver)), 
   (&(component=amq)(objectClass=org.apache.camel.spi.ComponentResolver))]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-22 06:34:34.268,,,no_permission,,,,,,,,,,,,,,76215,,,Thu Feb 24 10:25:57 UTC 2011,,,,,,,0|i01vv3:,8931,,,,,,,,,22/Feb/11 06:34;davsclaus;Guillaume do you have a clue why this happen?,"24/Feb/11 00:33;justinbeck;I experienced this today.  It appeared to be unrelated to whether I defined components in the same file as routes.  My temporary fix was to add ""blueprint.graceperiod:=false"" to the Bundle-SymbolicName in the pom for this bundle.","24/Feb/11 07:25;gnt;Yes, I understand what's going on.  I'll see if I can do something, but I'm not sure that there's a nice way out.

@Justin: if you define the component in a different bundle that should work, but splitting into multiples blueprint files in the same bundle has no effect at all for blueprint.",24/Feb/11 10:25;gnt;Fixed by switching the service reference to optional if there's a bean defined with the same name.,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent filename value when move attribute is used with File component,CAMEL-3617,12497561,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmmorel,jmmorel,03/Feb/11 14:00,25/Oct/11 11:35,14/Mar/19 02:43,04/Feb/11 11:49,2.5.0,2.6.0,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,"Unless I miss a point, when I use the following endpoint, the file:name value is incorrect and is equal to file:absolute.path

<endpoint id=""fileEndpoint"" uri=""file:${queue.input.folder}?recursive=true&amp;include=.*\.dat&amp;move=${queue.done.folder}/$simple{file:name}&amp;moveFailed=${queue.failed.folder}/$simple{file:name}"" />

${queue.input.folder}, ${queue.done.folder} and ${queue.failed.folder} are absolute paths resolved by Spring.

In fact, Camel tries to move the file to ${queue.done.folder}/${queue.input.folder}/$simple{file:name}
I've also tried using $simple{header.CamelFileName} instead of $simple{file:name} and it gives the same result.

For now, I've found a workaround using a processor which put the CamelFileName header value into a ""destFile"" property 
<endpoint id=""fileEndpoint"" uri=""file:${queue.input.folder}?recursive=true&amp;include=.*\.dat&amp;move=${queue.done.folder}/$simple{property.destFile}&amp;moveFailed=${queue.failed.folder}/$simple{property.destFile}"" />
",Windows Vista,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-03 15:35:21.285,,,no_permission,,,,,,,,,,,,,,76216,,,Fri Feb 04 11:49:04 UTC 2011,,,,,,,0|i01vuf:,8928,,,,,,,,,03/Feb/11 15:35;davsclaus;Can you try with Camel 2.6 which has been released?,04/Feb/11 08:12;jmmorel;this doesn't work either with 2.6.0.,"04/Feb/11 08:19;davsclaus;Can you post an example of the paths from
- ${queue.input.folder}
- ${queue.done.folder}

And when you drop a file in the input folder, is that in the ""root"" or in a sub folder? You have recursive=true enabled.","04/Feb/11 09:21;davsclaus;I found the problem, which happens when using absolute paths. There was an issue resolving the relative name of ${file:name} which didn't work properly and the name was computed as the absolute name instead.",04/Feb/11 09:57;davsclaus;trunk: 1067124.,04/Feb/11 11:48;davsclaus;And this fixes a test on windows: 1067159,04/Feb/11 11:49;davsclaus;This should be fixed on trunk now.,,,,,,,,,,,,,,,,,,,,,,,
camel-josql doesnot export org.apache.camel.language.sql.* ,CAMEL-3616,12497470,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rajdavies,rajdavies,rajdavies,02/Feb/11 15:04,25/Oct/11 11:35,14/Mar/19 02:43,02/Feb/11 15:07,2.6.0,2.7.0,,,,,,,,,,,2.7.0,,,,camel-sql,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76217,,,Wed Feb 02 15:07:30 UTC 2011,,,,,,,0|i01vu7:,8927,,,,,,,,,02/Feb/11 15:07;rajdavies;Fixed by SVN revision 1066494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When the OsgiTypeConverter looks for TypeConverterLoader services in the OSGi registry, it should use its own BundleContext instead of the one from the client bundle so that class space consistency can be fully enforced",CAMEL-3614,12497440,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,02/Feb/11 09:51,25/Oct/11 11:36,14/Mar/19 02:43,02/Feb/11 22:16,,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-03 05:33:41.67,,,no_permission,,,,,,,,,,,,,,76218,,,Thu Feb 03 06:23:15 UTC 2011,,,,,,,0|i01vtr:,8925,,,,,,,,,"02/Feb/11 22:16;gnt;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java
	M	components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
	A	components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/utils/BundleContextUtils.java
	M	components/camel-spring/src/main/java/org/apache/camel/osgi/OsgiSpringCamelContext.java
Committed r1066642
","03/Feb/11 05:33;davsclaus;There is a compilation error now. Probably the bundle plugin not adding the new utils package.

[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /Users/davsclaus/workspace/camel/components/camel-spring/src/main/java/org/apache/camel/osgi/OsgiSpringCamelContext.java:[40,28] cannot find symbol
symbol  : variable BundleContextUtils
location: class org.apache.camel.osgi.OsgiSpringCamelContext
[INFO] 1 error
[INFO] -------------------------------------------------------------",03/Feb/11 05:40;davsclaus;Fixed CS in camel-core-osig in rev: 1066734.,03/Feb/11 05:44;davsclaus;Fixed the compilation error in rev: 1066735,03/Feb/11 05:44;davsclaus;Fixed CS in camel-blueprint in rev: 1066736.,"03/Feb/11 06:11;gnt;Sorry about that, and thx for the fixes.",03/Feb/11 06:23;davsclaus;No problem. We are just glad OSGi experts help us out :),,,,,,,,,,,,,,,,,,,,,,,
HttpProducer should not eat up the content-type when working in proxy mode.,CAMEL-3608,12497334,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Feb/11 13:26,25/Oct/11 11:35,14/Mar/19 02:43,03/Feb/11 10:02,,,,,,,,,,,,,2.7.0,,,,camel-http,,,,0,,,,,,"Here is the user story about it.
http://stackoverflow.com/questions/4810050/how-do-i-implement-a-pass-through-jax-rs-proxy-using-apache-camel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-03 10:02:07.908,,,no_permission,,,,,,,,,,,,,,76219,,,Thu Feb 03 10:02:07 UTC 2011,,,,,,,0|i01vsf:,8919,,,,,,,,,03/Feb/11 10:02;davsclaus;trunk: 1066039,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTP rename fails,CAMEL-3595,12496943,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mikaelfj,mikaelfj,27/Jan/11 14:08,25/Oct/11 11:36,14/Mar/19 02:43,30/Jan/11 14:10,2.4.0,,,,,,,,,,,,2.7.0,,,,camel-ftp,,,,0,,,,,,"(This is related to the user group discussion http://camel.465427.n5.nabble.com/Problem-renaming-existing-file-in-FTP-td3307670.html)

When using a tmpPrefix when uploading, the rename from the tmp-file to the destination file fails, if the destination file is already present, even though the option fileExist=Override is used.

We have the problem on just a few destination servers which all seems to be windows machines(?).

I have fetched the 2.4 branch of camel-ftp to find out why it does not work, since the unit test you refer to in your previous post do excercise the problem.

It appears that the cause of the problem is, that the FtpOperations.existsFile fails to return true, which then causes the code not to enter the part where it deletes the exisiting file.

The reason for the FtpOperations.existsFile to return false, is, that the list of existing files has the directoryname prepended, e.g. I'm trying to upload Test.REN to folder test/rename, and in the code 
""if (existing.equals(onlyName))"" 
existing=test/rename\Test.REN and onlyName=Test.REN - which returns false - but causes the later rename to fail as the target folder did contain the Test.REN. 

My guess is that it is server dependent whether the returned list of names in the directory include the directory name or not?

To fix this I have added the following line of code before the if-statement
existing = FileUtil.stripPath(FileUtil.normalizePath(existing));
So it will strip the path part of the file name before comparing it to onlyName.",,,,,,,,,,,,,,,,,,30/Jan/11 11:26;mikaelfj;camel-ftp-patch.txt;https://issues.apache.org/jira/secure/attachment/12469767/camel-ftp-patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-30 12:53:57.519,,,no_permission,,,,,,,,,,,,,,37988,,,Mon Jan 31 10:51:23 UTC 2011,,,Patch Available,,,,0|i01vpj:,8906,,,,,,,,,27/Jan/11 14:11;mikaelfj;Patch file from eclipse,"30/Jan/11 11:26;mikaelfj;The previous patch did not work when the client (camel) machine is unix and the target (ftp server) is windows as the normalizePath method checks the local OS etc.

The attached patch is now working or us - but just takes the file name as the part of the string after the left-most occurence of either / or \ - so it will not work in a rare occation where a / or \ could be part of the filename.","30/Jan/11 12:53;davsclaus;Can you try with Camel 2.6 when its released. There has been many improvements and fixes since Camel 2.4.

What FTP server do you use, and which OS does it run?
The API of {{listNames}} ought to *only* return the filename, without any path indication. Hence a plain {{equals}} ought to be sufficient.

","30/Jan/11 13:22;mikaelfj;We can try with 2.6 when it is out.

I'll see if I can find out which ftp server that is in use - and try out the NLST command from the command-line (which should be the ftp-command behind listNames.","30/Jan/11 14:07;davsclaus;Camel 2.6 has been released. Just that we haven't put out an announcement. You can download it from the links at the release note
http://camel.apache.org/camel-260-release.html","30/Jan/11 14:10;davsclaus;Based on your patch I have committed an improvement to trunk.

The path will be stripped of the name when comparing. Also the operations to strip the path caters for mixed separators.

trunk: 1065278.","31/Jan/11 10:51;mikaelfj;I made the following small test case:

    public void testNlstWin() throws Exception {
        FTPClient ftpClient = new FTPClient();
        ftpClient.connect(""xxx"", 21);
        ftpClient.login(""yyy"", ""zzz"");
        System.out.println(ftpClient.getSystemName());
        String[] names = ftpClient.listNames(""test/rename"");
        for (String existing : names) {
            System.out.println(existing);
        }
        ftpClient.logout();
        ftpClient.disconnect();
    }


The strange thing is, that I get the same result from both windows and unix (runing the test of a windows machine:

Windows_NT
test/rename\Test.REN

UNIX Type: L8 Version: BSD-44
test/rename/Test.REN

I.e. both of them contains the directory as part of the returned filename - which I hadn't expected.

It might be, that we have only seen the problem on windows servers because this has been the only place where we transfer multiple files to the same destination-name. ",,,,,,,,,,,,,,,,,,,,,,,
Concurrent writes to the same file has race condition,CAMEL-3584,12496560,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Jan/11 15:17,25/Oct/11 11:35,14/Mar/19 02:43,08/Feb/11 15:35,2.5.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,1,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Using-Splitter-and-file-producer-with-option-fileExist-Append-failed-tp3353618p3353618.html

We need to synchronize on the file name to avoid concurrent writes to the same file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76220,,,Tue Feb 08 15:35:24 UTC 2011,,,,,,,0|i01vn3:,8895,,,,,,,,,24/Jan/11 15:17;davsclaus;The workaround is to use {{threads(1)}} before the file endpoint to force single threaded access to the file producer.,08/Feb/11 15:35;davsclaus;trunk: 1068443.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel CXF does not forward the response code from CXF to Camel,CAMEL-3581,12496537,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,24/Jan/11 13:38,25/Oct/11 11:36,14/Mar/19 02:43,24/Jan/11 13:59,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"When calling a CXF service from a camel route the reponse code from CXF should be set on the camel exachange.

Currently this is not done. So when CXF sets the reponse code to e.g. 403 camel still sends 200 and the client will not be able to work with this reponse.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76221,,,2011-01-24 13:38:05.0,,,Patch Available,,,,0|i01vmf:,8892,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"allow ScheduledRoutePolicy to handle more than one action (start, stop, resume, pause)",CAMEL-3575,12496322,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,rveguilla,rveguilla,21/Jan/11 19:37,25/Oct/11 11:35,14/Mar/19 02:43,28/Jan/11 22:29,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-quartz,,,,0,,,,,,"The current implementation of ScheuledRoutePolicy only supports one type of action (start,stop,resume,pause) for only one route.  If, for example,  you attempt to configure a CronScheduleRoutePolicy with a routeStartTime and routeStopTime, only the one will by handled because ScheduleRoutePolicy (super-class of CronScheduleRoutePolicy) only store one action and one route in the SchedulerContext:

 protected void loadCallbackDataIntoSchedulerContext(Action action, Route route) throws SchedulerException {
       getScheduler().getContext().put(SCHEDULED_ACTION, action);
        getScheduler().getContext().put(SCHEDULED_ROUTE, route);
}

with the effect of creating two timers (one for startTime, the other for stopTime) that execute the same action (the last call to scheduleRoute).

",,,,,,,,,,,,,,,,,,21/Jan/11 19:40;rveguilla;ScheduledRoutePolicy-Patch.diff;https://issues.apache.org/jira/secure/attachment/12469005/ScheduledRoutePolicy-Patch.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-21 20:33:46.849,,,no_permission,,,,,,,,,,,,,,76222,,,Fri Jan 28 22:30:41 UTC 2011,,,Patch Available,,,,0|i01vl3:,8886,,,,,,,,,21/Jan/11 19:40;rveguilla;The following patch is a preliminary solution which stores ScheduledJobState info (action and route) using the jobDetail.getName() as key. ,"21/Jan/11 20:33;davsclaus;We have code freeze on the trunk, so we will look at this in the next release","26/Jan/11 23:09;akarpe;Hi,

I am not sure that this is an issue... It is indeed possible to set a start and stop time using a single policy for a given route. The only difference is that it sets two separate triggers to handle the start and stop based on my understanding. I will create unit tests to test if this is an issue and validate this behavior and if needed use the patch above to fix it if it does the trick.

The patch above is missing unit tests to validate that it indeed works...

There is however a problem in being able to apply multiple policies (policy lists on a given route in CAMEL-3254).

I will be working on this over the next few days and will apply a fix for this as well as CAMEL-3254 in 2.7.0, following the release of 2.6.0

Cheers,

Ashwin...

P.S: Please hold off on applying the above patch...
","27/Jan/11 14:42;akarpe;Hi,

I confirmed that this is an issue with a unit test. Will look into the patch and see if it can be applied without sideeffects.

Cheers,

Ashwin...","27/Jan/11 15:41;akarpe;Thanks to Ricardo Veguilla for the patch.

Fix applied along with a unit test and removal of an unnecessary Routebuilder import in ScheduledJobState.

Committed to the Camel trunk as revision r1064154.

Cheers,

Ashwin...

","28/Jan/11 17:34;rveguilla;Ashwin, should this issue be reclassified as a bug?

Anyway, thanks for your prompt response.",28/Jan/11 22:30;akarpe;Reclassified as a bug and closed...,,,,,,,,,,,,,,,,,,,,,,,
Camel transport for cxf does not forward exception to camel exchange,CAMEL-3572,12496255,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,21/Jan/11 10:41,25/Oct/11 11:35,14/Mar/19 02:43,21/Jan/11 11:09,,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"I encountered a problem that happens if you run a route like
from(""servlet:///test"").to(""direct:cxfendpoint"")

Behind the direct endpoint there is a cxf jax-rs endpoint that is secured by spring-security. If spring security denies access based on method annotations it throws an AccessDeniedException. As JAX-RS does not handle it the exception hits the CamelDestination. There it is only logged and swallowed. As the client then gets no error it tries to handle the reponse with jaxb which fails. (See below)

21.01.2011 11:19:51 org.apache.cxf.jaxrs.provider.AbstractJAXBProvider handleJAXBException
WARNUNG: javax.xml.bind.UnmarshalException
 - with linked exception:
[com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}]: [1,0]]
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:426)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.unmarshalFromInputStream(JAXBElementProvider.java:229)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.doUnmarshal(JAXBElementProvider.java:195)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.readFrom(JAXBElementProvider.java:166)
	at org.apache.cxf.jaxrs.client.AbstractClient.readBody(AbstractClient.java:445)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.handleResponse(ClientProxyImpl.java:463)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.doChainedInvocation(ClientProxyImpl.java:445)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:177)
	at $Proxy18.getUsers(Unknown Source)
	at client.RESTClient.sayHelloAsUser(RESTClient.java:63)
	at client.RESTClient.main(RESTClient.java:34)
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}]: [1,0]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:682)
	at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2090)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:1996)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1100)
	at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:160)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
	... 11 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-21 12:19:08.587,,,no_permission,,,,,,,,,,,,,,76223,,,Fri Jan 21 13:28:43 UTC 2011,,,,,,,0|i01vkf:,8883,,,,,,,,,"21/Jan/11 10:44;chris@die-schneider.net;I have tracked the problem to:

public class CamelDestination extends AbstractDestination implements Configurable {
protected class ConsumerProcessor implements Processor {
        public void process(Exchange exchange) {
            try {
                incoming(exchange);
            } catch (Throwable ex) {
                getLogger().log(Level.WARNING, ""Failed to process incoming message: "", ex);
                
            }
        }
    }
}

By exchanging the logging with
exchange.setException(ex);

The processing error is correctly transmitted to the client and the exception on client side does not happen anymore.
",21/Jan/11 11:09;chris@die-schneider.net;Committed the fix. As we are near the release date please review,"21/Jan/11 12:19;njiang;@Christian
Can I have a look at the configure of the a cxf jax-rs endpoint ?
Here is an unit test[1] which works with old CamelDestination,  I'm not sure how the 
{code}
incoming(exchange)
{code}
 throw the exception.

As the below code will take care or the exception which is thrown from ServiceImplementor.
{code}
incomingObserver.onMessage(inMessage);
{code}

[1]https://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-cxf/src/test/java/org/apache/camel/example/camel/transport/CamelTransportClientServerTest.java","21/Jan/11 12:29;chris@die-schneider.net;The jaxrs server is configured like below. The exception is thrown by Spring Security when it intercepts the call the the implementation method

     <global-method-security jsr250-annotations=""enabled"" xmlns=""http://www.springframework.org/schema/security""/>

     <jaxrs:server id=""hello_rest"" address=""camel://direct:HelloWorldRestServerEndpoint"">
       <jaxrs:serviceBeans>
         <ref bean=""hello-world-bean""/>
       </jaxrs:serviceBeans>
       <jaxrs:features>
         <bean class=""org.apache.cxf.feature.LoggingFeature"" />
       </jaxrs:features>
     </jaxrs:server>
     
     <bean id=""hello-world-bean"" class=""server.HelloWorldImpl""/>

The impl class has this method:
@RolesAllowed(""ROLE_ADMIN"")
    public Map<Integer, User> getUsers()

Sergey already told me that I should use an interceptor to handle the exception from spring security and translate it. Still I think we should handle any exceptions in the CamelDestination that slip thorugh.
","21/Jan/11 13:07;njiang;@Christian,
If we just throw the exception into camel route,  you need to take care the marshal the exception into the stream as not all the camel component support it out of box.

","21/Jan/11 13:08;njiang;BTW, I think this change should be OK.","21/Jan/11 13:28;chris@die-schneider.net;Yes. You are right about the marshalling but it is not so important as the exception in this place is rather a last resort. Normally the exceptions should be handled by cxf interceptors.
",,,,,,,,,,,,,,,,,,,,,,,
Fix compiler error in code generated by camel-archetype-component,CAMEL-3569,12496228,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,21/Jan/11 04:45,25/Oct/11 11:35,14/Mar/19 02:43,21/Jan/11 05:01,2.5.0,,,,,,,,,,,,2.6.0,,,,tooling,,,,0,,,,,,"Sample output:
{code}

[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-xxx ---
[WARNING] File encoding has not been set, using platform encoding MacRoman, i.e. build is platform dependent!
[INFO] Compiling 4 source files to /w1/apache/camel/projects/camel-xxx/target/classes
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[28,7] org.apache.camel.example.HelloWorldConsumer is not abstract and does not override abstract method poll() in org.apache.camel.impl.ScheduledPollConsumer
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[38,19] poll() in org.apache.camel.example.HelloWorldConsumer cannot override poll() in org.apache.camel.impl.ScheduledPollConsumer; attempting to use incompatible return type
found   : void
required: int
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[36,4] method does not override or implement a method from a supertype
[INFO] 3 errors 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76224,,,Fri Jan 21 05:01:07 UTC 2011,,,,,,,0|i01vjr:,8880,,,,,,,,,"21/Jan/11 05:01;hadrian;Fixed in r1061633.

Problem caused by changed api and archetype code not updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Detect uncaught exceptions in UoWProcessor to ensure UoW is done even for those uncaught exceptions,CAMEL-3560,12495996,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Jan/11 11:05,25/Oct/11 11:35,14/Mar/19 02:43,19/Jan/11 11:19,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"The Camel routing engines will handle this in 99.9% of the cases, but when you shutdown a Spring AC then Spring may stop beans in whatever order and this can cause those beans to fail operating during a graceful shutdown. And in worst case exceptions is thrown in situations where they are not normally done.

To cater for that and other situations the UoWProcessor should detect this and act accordingly.

This ensure the in flight registry will be tracked and we are not stuck with a missing inflight message, causing Camel to wait for the 300 sec timeout to shutdown.

For example just try hitting ctrl + c in that camel-example-management and you can see such an example.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76225,,,Wed Jan 19 11:19:20 UTC 2011,,,,,,,0|i01vhr:,8871,,,,,,,,,19/Jan/11 11:19;davsclaus;trunk: 1060768.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator - The completionFromBatchConsumer option dont aggregate the last incoming exchange,CAMEL-3559,12495901,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Jan/11 14:31,25/Oct/11 11:36,14/Mar/19 02:43,18/Jan/11 15:07,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Last-Aggregated-Exchange-lost-Aggregator-with-a-Batch-Consumer-and-persistent-AggregationRepository-tp3346214p3346214.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76226,,,Tue Jan 18 15:07:25 UTC 2011,,,,,,,0|i01vhj:,8870,,,,,,,,,18/Jan/11 15:07;davsclaus;trunk: 1060406.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MethodCallExpression doesn't validate whether the method exists for all cases,CAMEL-3545,12495675,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,muellerc,muellerc,15/Jan/11 14:29,25/Oct/11 11:36,14/Mar/19 02:43,15/Jan/11 16:26,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"I tried to refactor

{code:title=org.apache.camel.model.language.MethodCallExpression.java}
    public Expression createExpression(CamelContext camelContext) {
        Expression answer;

        if (beanType != null) {            
            instance = ObjectHelper.newInstance(beanType);
            return new BeanExpression(instance, getMethod(), parameterType); // <--
        } else if (instance != null) {
            return new BeanExpression(instance, getMethod(), parameterType); // <--
        } else {
            String ref = beanName();
            // if its a ref then check that the ref exists
            BeanHolder holder = new RegistryBean(camelContext, ref);
            // get the bean which will check that it exists
            instance = holder.getBean();
            answer = new BeanExpression(ref, getMethod(), parameterType);
        }

        // validate method
        validateHasMethod(camelContext, instance, getMethod(), parameterType);

        return answer;
    }
{code}

to

{code:title=org.apache.camel.model.language.MethodCallExpression.java}
    public Expression createExpression(CamelContext camelContext) {
        Expression answer;

        if (beanType != null) {            
            instance = ObjectHelper.newInstance(beanType);
            answer = new BeanExpression(instance, getMethod(), parameterType); // <--
        } else if (instance != null) {
            answer = new BeanExpression(instance, getMethod(), parameterType); // <--
        } else {
            String ref = beanName();
            // if its a ref then check that the ref exists
            BeanHolder holder = new RegistryBean(camelContext, ref);
            // get the bean which will check that it exists
            instance = holder.getBean();
            answer = new BeanExpression(ref, getMethod(), parameterType);
        }

        // validate method
        validateHasMethod(camelContext, instance, getMethod(), parameterType);

        return answer;
    }
{code}

so that the created BeanExpression is also validate if you provide the bean type or an instance. With this change, some tests in org.apache.camel.language.SimpleTest fails.
I'm not sure whether the tests are faulty or if it's a bug.
Also not sure whether this should fixed in 2.6. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-15 15:36:20.67,,,no_permission,,,,,,,,,,,,,,76227,,,Sat Jan 15 16:25:52 UTC 2011,,,,,,,0|i01vef:,8856,,,,,,,,,15/Jan/11 15:36;davsclaus;I polished the code and added a comment why we only validate the last use-case.,"15/Jan/11 16:25;davsclaus;See CAMEL-2920

I improved the validation check to test in all 3 cases now.

trunk: 1059363.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loading routes using loadRouteDefinition from CamelContext lacks some logic from camel-core-xml,CAMEL-3543,12495591,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Jan/11 14:25,25/Oct/11 11:36,14/Mar/19 02:43,15/Jan/11 07:47,2.6.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"We have shared logic in camel-core-xml to use when build / loading routes from XML using JAXB. The routes must be prepared before they are usable for creating the runtime processors.

The logic should be moved into camel-core in the model package so we have it centralized and its more easy to reuse

See nabble
http://camel.465427.n5.nabble.com/Loading-routes-from-XML-files-with-Camel-2-4-0-tp3340082p3340082.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76228,,,Sat Jan 15 13:47:03 UTC 2011,,,,,,,0|i01vdz:,8854,,,,,,,,,14/Jan/11 15:40;davsclaus;trunk: 1059045.,15/Jan/11 13:47;davsclaus;trunk: 1059327.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jt400DataQueueConsumer incorrectly implements timeout semantics (jt400 component),CAMEL-3540,12495503,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jloureiro,jloureiro,13/Jan/11 15:53,25/Oct/11 11:36,14/Mar/19 02:43,13/Jan/11 16:59,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"Jt400DataQueueConsumer implementation of receive(long) passes the timeout argument directly to com.ibm.as400.access.DataQueue.read(int), not performing unit conversion. However, Jt400DataQueueConsumer.receive(long) accepts milliseconds, whereas DataQueue.read(int) accepts seconds as the time unit.

Also, invoking Jt400DataQueueConsumer.receive() results in a call to DataQueue.read(), which is not a blocking call; on the contrary, it will not wait for entries.

Code snippet below.

{code:title=Jt400DataQueueConsumer.java|borderStyle=solid}
        DataQueue queue = endpoint.getDataQueue();
        try {
            DataQueueEntry entry;
            if (timeout >= 0) {
                entry = queue.read((int)timeout);
            } else {
                entry = queue.read();
            }
{code}

Note that the submitted patch floors the timeout value when converting to seconds, but different rounding might be desired, which should be specified in the class documentation.",,,,,,,,,,,,,,,,,,13/Jan/11 15:57;jloureiro;Jt400DataQueueConsumer.patch;https://issues.apache.org/jira/secure/attachment/12468260/Jt400DataQueueConsumer.patch,13/Jan/11 15:57;jloureiro;Jt400DataQueueConsumerTest.java;https://issues.apache.org/jira/secure/attachment/12468261/Jt400DataQueueConsumerTest.java,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-01-13 16:59:41.374,,,no_permission,,,,,,,,,,,,,,76229,,,Thu Jan 13 16:59:41 UTC 2011,,,Patch Available,,,,0|i01vdb:,8851,,,,,,,,,13/Jan/11 16:59;davsclaus;trunk: 1058659.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-snmp - Does not support tcp protocol,CAMEL-3537,12495465,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/11 08:12,25/Oct/11 11:35,14/Mar/19 02:43,13/Jan/11 08:20,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-snmp,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-snmp-2-5-problems-tp3339373p3339373.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76230,,,Thu Jan 13 08:20:38 UTC 2011,,,,,,,0|i01vcn:,8848,,,,,,,,,13/Jan/11 08:20;davsclaus;trunk: 1058457,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregation fails to call onComplete for exchanges if the aggregation is after a bean or process.,CAMEL-3535,12495418,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bfeaver,bfeaver,12/Jan/11 20:43,25/Oct/11 11:36,14/Mar/19 02:43,14/Jan/11 10:37,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"When creating a route that contains an aggregation, if that aggregation is preceded by a bean or process, it will fail to call AggregateOnCompletion.onComplete(). I've attached a unit test that can show you the behavior. Trace level loggging will need to be enabled to see the difference. With the call to the bean, it won't show the following log entry:
{noformat}TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: ab]{noformat}
If you remove the bean call, it'll start calling onComplete() again.

What I've noticed is that if this call is not made, it ends up in a memory leak since the inProgressCompleteExchanges HashSet in AggregateProcessor never has any exchange ID's removed.",,,,,,,,,,,,,,,,,,12/Jan/11 20:45;bfeaver;AggregationTest.java;https://issues.apache.org/jira/secure/attachment/12468161/AggregationTest.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-13 06:19:16.088,,,no_permission,,,,,,,,,,,,,,76231,,,Fri Jan 14 17:02:51 UTC 2011,,,,,,,0|i01vc7:,8846,,,,,,,,,13/Jan/11 06:19;davsclaus;Works fine in trunk,"13/Jan/11 18:44;bfeaver;I noticed in the test that you committed, that you changed it to use a completion size instead of a completion interval or timeout. After running it against trunk with completion size, I see it does in fact call the AggregateOnCompletion.onComplete(). However, I'm still noticing that if you set an interval or timeout, it doesn't appear to hit that method.","13/Jan/11 19:20;davsclaus;Brain this route works fine as well
{code}
                from(""seda:start"")
                    .bean(TestBean.class)
                    .aggregate(constant(""true""), new BodyInAggregatingStrategy())
                        .completionInterval(2000)
                        .to(""mock:result"");
{code}

Trace logging show the interval task triggers and invokes the onComplete
{code}

2011-01-13 20:20:06,218 [eTimeoutChecker] TRACE AggregateProcessor             - Completion interval triggered for correlation key: true
2011-01-13 20:20:06,219 [eTimeoutChecker] DEBUG AggregateProcessor             - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: A+B]
2011-01-13 20:20:06,221 [eTimeoutChecker] DEBUG AggregateProcessor             - Processing aggregated exchange: Exchange[Message: A+B]
2011-01-13 20:20:06,223 [eTimeoutChecker] TRACE AggregateProcessor             - Processing aggregated exchange: Exchange[Message: A+B] complete.
2011-01-13 20:20:06,223 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2011-01-13 20:20:06,223 [eTimeoutChecker] TRACE AggregateProcessor             - Completion interval task complete
{code}","13/Jan/11 20:26;bfeaver;Even in your output the line I'm expecting is missing. Hope this clears up what I'm seeing. Here's the output when it works

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval triggered for correlation key: true
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: AB]
[main] INFO test.AggregationTest - Testing done: test.AggregationTest@77546dbc
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB] complete.
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval task complete
{noformat}

Here's the output when it doesn't

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval triggered for correlation key: true
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB] complete.
[main] INFO test.AggregationTest - Testing done: test.AggregationTest@614a75bb
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval task complete
{noformat}

The difference between the two is the following line:

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: AB]
{noformat}

This would be written to the log in AggregateProcesor$AggregateOnCompletion.onComplete() on or around line 544 in AggregateProcessor.

{code}        public void onComplete(Exchange exchange) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Aggregated exchange onComplete: "" + exchange);
            }

            // only confirm if we processed without a problem
            try {
                aggregationRepository.confirm(exchange.getContext(), exchangeId);
                // and remove redelivery state as well
                redeliveryState.remove(exchangeId);
            } finally {
                // must remember to remove in progress when we are complete
                inProgressCompleteExchanges.remove(exchangeId);
            }
        }
{code}

The lack of the inProgressCompleteExchanges.remove(exchangeId); call is precisely what's causing inProgressCompleteExchanges to grow larger and not get cleaned up.","14/Jan/11 01:30;bfeaver;Looking through it a bit more, I believe the problem is related to the Pipeline that is created when there is a bean before the aggregation. Without the Pipeline, each exchange's unit of work is done after each iteration of the aggregation. When there is a pipeline, the pipeline is creating the next exchange as a copy of the first exchange and the unit of work for the copy is what is done instead of the original exchange. But the exchange that is stored within the aggregation repository is the original exchange, still with a unit of work defined (it hasn't been done, and therefore hasn't been set to null). When the aggregation completes, the UnitOfWorkProcessor finds the unit of work in the original exchange and doesn't complete that unit of work (process() method in UnitOfWorkProcessor).

{code}
// There was an existing UoW, so we should just pass through..
// so that the guy the initiated the UoW can terminate it.
return processor.process(exchange, callback);
{code}

Since the unit of work never gets done, it never calls the AggregateOnCompletion.onComplete() method. In a debugger, I ended up nulling out the UnitOfWork on the exchange before it finished the aggregation and it worked as expected.",14/Jan/11 09:45;davsclaus;Thanks Brian for explaining it in more details. I will look into it.,"14/Jan/11 10:37;davsclaus;trunk: 1058930.

Thanks Brian it should be fixed now. Can you test it on yours side as well.",14/Jan/11 17:02;bfeaver;Confirmed. Working for me as well.,,,,,,,,,,,,,,,,,,,,,,
Stopping a route has side effects on adviced routes,CAMEL-3534,12495386,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jfansler,jfansler,12/Jan/11 16:10,02/May/13 02:29,14/Mar/19 02:43,17/Apr/11 14:27,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,"See nable:
http://camel.465427.n5.nabble.com/errorHandler-when-stopping-routes-in-test-td3335015.html",,,,,,,,,,,,,,,,,CAMEL-3878,12/Jan/11 16:14;jfansler;StopRouteImpactsErrorHandlerTest.java;https://issues.apache.org/jira/secure/attachment/12468134/StopRouteImpactsErrorHandlerTest.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-12 16:32:48.404,,,no_permission,,,,,,,,,,,,,,68806,,,Sun Apr 17 11:21:33 UTC 2011,,,,,,,0|i01vbz:,8845,,,,,,,,,12/Jan/11 16:14;jfansler;Attached is the unit test I have to recreate the issue.,"12/Jan/11 16:32;davsclaus;We will revisit this when we work on Camel 3.0 having a more dynamic engine when applying interceptors, error handlers at runtime","12/Jan/11 16:33;davsclaus;And btw you should stop the route before you do the advice, then it may not cause side effects","12/Jan/11 16:44;jfansler;You are correct Claus, moving the stop to before the advice makes the issue go away. I had set it up this way because I normally do the advice configuration in the ""setup"" call for a testing class. I then created a number of different tests/methods within the class. This causes the route to be restarted before each test, thus my call to stop it after the advice. Maybe this isn't the best way to setup my normal tests.",17/Apr/11 11:21;davsclaus;CAMEL-3878 fixes this issue as well.,,,,,,,,,,,,,,,,,,,,,,,,,
scala - xpath not working together with choice/when,CAMEL-3531,12495334,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cpmcdaniel,cpmcdaniel,12/Jan/11 05:17,25/Oct/11 11:35,14/Mar/19 02:43,24/Apr/11 17:00,2.5.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-scala,,,,0,,,,,,"When using the Scala DSL, xpath expressions inside when() do not work as expected. As an example:
{code:none}
     ""direct:a"" ==> {
     choice {
        when (xpath(""//hello"")) to (""mock:english"")
        when (xpath(""//hallo"")) {
          to (""mock:dutch"")
          to (""mock:german"")
        } 
        otherwise to (""mock:french"")
      }
    }

// Send messages
""direct:a"" ! (""<hello/>"", ""<hallo/>"", ""<hellos/>"")
{code}

Here we should receive 1 message in each of the mocks. For whatever reason, all 3 messages go to mock:english. Similar routes work as expected with the Java DSL. ","Ubuntu Linux 10.04, java 1.6",,,,,,,,,,,,,,,,,12/Jan/11 05:18;cpmcdaniel;XPathContentBasedRouterTest.scala;https://issues.apache.org/jira/secure/attachment/12468109/XPathContentBasedRouterTest.scala,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-16 15:31:15.946,,,no_permission,,,,,,,,,,,,,,14125,,,Sun Apr 24 16:00:04 UTC 2011,,,,,,,0|i01vbb:,8842,,,,,,,,,12/Jan/11 05:18;cpmcdaniel;Here is the unit test that exercises this bug. ,"13/Jan/11 04:36;cpmcdaniel;From what I can tell so far, the same method is being used for both the splitter and when/filter. The first message hits the //hello XPath expression and returns a NodeList of size 1, the message goes to mock:english. The second and third messages hit the //hello XPath and return a NodeList of size 0. I'm guessing since this is not a Boolean, it is assuming a non-null result is true. I'm not sure yet how to patch this. ","16/Jan/11 15:31;davsclaus;Thanks Craig for looking into this.

We could use some help with the camel-scala component. So if you got the time and energy. For example look for EIPs and options which hasn't been ported to the scala DSL yet.",24/Apr/11 16:00;davsclaus;Yeah I have reproduced the issue as well. The problem is that the xpath is evaluated as an expression and not as a predicate in the filter EIP in Scala DSL.,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-atom - Issue with seda consumer,CAMEL-3529,12495280,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jan/11 18:26,25/Oct/11 11:35,14/Mar/19 02:43,12/Jan/11 07:52,,,,,,,,,,,,,2.6.0,,,,camel-atom,,,,0,,,,,,"This test fails
https://hudson.apache.org/hudson/job/Camel.trunk.fulltest/org.apache.camel$camel-atom/109/testReport/org.apache.camel.component.atom/AtomGoodBlogsTest/testFiltering/

There is an issue with camel-atom starting 2 consumers. I have to dig into this, next morning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76232,,,Wed Jan 12 07:52:35 UTC 2011,,,,,,,0|i01vav:,8840,,,,,,,,,12/Jan/11 07:52;davsclaus;trunk: 1058013.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HybridSourceDataBinding not thread safe...,CAMEL-3528,12495270,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,11/Jan/11 16:44,25/Oct/11 11:35,14/Mar/19 02:43,11/Jan/11 17:45,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"
The HybridSourceDataBinding in camel-cxf is not thread safe.  The readers/writers in CXF hold state (like schemas and properties) and  must be created when needed.    

",,,,,,,,,,,,,,,,,,11/Jan/11 16:45;dkulp;HybridSourceDataBinding.patch;https://issues.apache.org/jira/secure/attachment/12468025/HybridSourceDataBinding.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-11 17:45:53.922,,,no_permission,,,,,,,,,,,,,,14173,,,Tue Jan 11 17:45:53 UTC 2011,,,Patch Available,,,,0|i01van:,8839,,,,,,,,,11/Jan/11 17:45;hadrian;Committed in r1057758. Thanks Dan for the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SplitterWithXqureyTest refereces Sun JDK specific classes,CAMEL-3526,12495205,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,dkulp,dkulp,11/Jan/11 03:51,25/Oct/11 11:35,14/Mar/19 02:43,11/Jan/11 05:11,,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"
The SplitterWithXqureyTest references com.sun classes that are internal to the Sun JDK.  This makes it not build with an IBM jdk, but also causes errors in Eclipse as eclipse prohibits access to them.

Will attach patch.",,,,,,,,,,,,,,,,,,11/Jan/11 03:51;dkulp;SplitterWithXqureyTest.patch;https://issues.apache.org/jira/secure/attachment/12467968/SplitterWithXqureyTest.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-11 05:11:26.717,,,no_permission,,,,,,,,,,,,,,76233,,,Tue Jan 11 05:11:26 UTC 2011,,,Patch Available,,,,0|i01va7:,8837,,,,,,,,,11/Jan/11 05:11;njiang;Applied patch with thanks to Dan Kulp.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with camel-soap - <dataFormats> -  JAXBContext not created,CAMEL-3499,12494703,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,05/Jan/11 10:07,06/Jan/11 10:08,14/Mar/19 02:43,06/Jan/11 10:03,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"I would like to use camel-soap into the following camel route

   <cxf:cxfEndpoint id=""busServicesFinder""
                    address=""http://localhost:8282/cxf/serviceFinder""
                    serviceClass=""fr.client.proxy.Services"">
   </cxf:cxfEndpoint>

   <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

       <dataFormats>
           <soapjaxb id=""soap"" contextPath=""fr.client.proxy""/>
       </dataFormats>

       <route>
           <from uri=""cxf:bean:busServicesFinder?dataFormat=MESSAGE""/>
           <log message=""WebService called"" loggingLevel=""INFO""/>
           <!-- <convertBodyTo type=""String""/> -->
           <unmarshal ref=""soap""/>
           ...

but I get the following error in karaf when CXF extract the content and parse it with JAXB

Additional info

>  * which jaxb bundle is/are deployed ?
[ 200] [Active     ] [            ] [       ] [   60] Apache
ServiceMix :: Bundles :: jaxb-impl (2.1.13.1)

>  * does the system bundle export the sun packages ?
No

200 com.sun.xml.bind.v2
  200 com.sun.xml.bind.v2.model.annotation
  200 com.sun.xml.bind.unmarshaller
  200 com.sun.xml.bind.api.impl
  200 com.sun.xml.bind.v2.schemagen.episode
  200 com.sun.xml.bind.v2.util
  200 com.sun.xml.bind.v2.runtime.unmarshaller
  200 com.sun.xml.bind.marshaller
  200 com.sun.xml.bind.v2.model.runtime
  200 com.sun.xml.bind.v2.runtime.reflect.opt
  200 com.sun.xml.bind.v2.schemagen.xmlschema
  200 com.sun.xml.bind
  200 com.sun.xml.bind.v2.model.core
  200 com.sun.xml.bind.v2.runtime.output
  200 com.sun.xml.bind.v2.bytecode
  200 com.sun.xml.bind.api
  200 com.sun.xml.bind.v2.model.impl
  200 com.sun.xml.bind.v2.model.nav
  200 com.sun.xml.bind.v2.schemagen
  200 com.sun.xml.bind.util
  200 com.sun.xml.bind.v2.runtime.reflect
  200 com.sun.xml.bind.v2.runtime
  200 com.sun.xml.bind.annotation
  200 com.sun.xml.bind.v2.runtime.property

>  * is there a boot delegation on the com.sun.* packages from the jre ?
Yes (karaf - 2.1-SNAPSHOT)

{code}
as thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Unable to create context
       at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:223)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:200)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:113)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:68)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[598:org.apache.cxf.bundle:2.2.11]
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_22]
       at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_22]
       at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_22]
       at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:111)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:311)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:275)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)[598:org.apache.cxf.bundle:2.2.11]
       at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.Server.handle(Server.java:326)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
Caused by: java.io.IOException: Unable to create context
       at org.apache.camel.util.IOHelper.createIOException(IOHelper.java:80)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.IOHelper.createIOException(IOHelper.java:72)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:151)[602:org.apache.camel.camel-jaxb:2.5.0]
       at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.unmarshal(SoapJaxbDataFormat.java:226)[603:org.apache.camel.camel-soap:2.5.0]
       at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:51)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:174)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:80)[600:org.apache.camel.camel-cxf:2.5.0]
       ... 23 more
Caused by: javax.xml.bind.JAXBException: Unable to create context
 - with linked exception:
[java.lang.NoSuchMethodException:
com.sun.xml.bind.v2.ContextFactory.createContext(java.lang.String,
java.lang.ClassLoader)]
       at javax.xml.bind.ContextFinder.find(ContextFinder.java:72)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:77)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:73)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:69)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.createContext(SoapJaxbDataFormat.java:286)[603:org.apache.camel.camel-soap:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.getContext(JaxbDataFormat.java:183)[602:org.apache.camel.camel-jaxb:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:126)[602:org.apache.camel.camel-jaxb:2.5.0]
       ... 47 more
Caused by: java.lang.NoSuchMethodException:
com.sun.xml.bind.v2.ContextFactory.createContext(java.lang.String,
java.lang.ClassLoader)
       at java.lang.Class.getMethod(Class.java:1605)[:1.6.0_22]
       at javax.xml.bind.ContextFinder.find(ContextFinder.java:69)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       ... 53 more
{code}",Apache Karaf 2.1-SNAPSHOT,,,,,,,,,,,,CAMEL-3505,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-06 03:32:07.991,,,no_permission,,,,,,,,,,,,,,76236,,,Thu Jan 06 10:08:48 UTC 2011,,,,,,,0|i01v4f:,8811,,,,,,,,,"06/Jan/11 03:32;njiang;@ Charles,
As you know, JDK 1.6 also shipped the jaxb impl. If you enable the boot delegation,  there could be more then two jaxb implementation will be located by the jaxb-api.
Can you try to run the test case within JDK 1.5 or don't enable the boot delegation of ""com.sun.xml"" and try again?

BTW, I committed an OSGi unit test with pax exam into camel trunk, it works well.","06/Jan/11 07:53;cmoulliard;I have removed the two bundles providing JAXB support to only use what is provided by JDK 1.6

[  61] [Active     ] [            ] [       ] [   60] mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.1/1.5.0
[  63] [Active     ] [            ] [       ] [   60] mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.1.13_1

BUT now I'm faced to the following error with camel-soap bundle

It cannot find the following packages

javax.xml.ws;version=""[2.1,3)"",
org.xmlsoap.schemas.soap.envelope;version=""[2.5,3)""

but javax.xml.ws is well exported by JDK ....","06/Jan/11 08:30;njiang;The jaxax.xml.ws is exported by JDK, the package has no version range, 
if we install other JAXWS API bundle,  I'm not sure the OSGi platform can help us to resolve it.

""org.xmlsoap.schemas.soap.envelope"" is exported by camel-soap bundle, it should not export the package which it exports.","06/Jan/11 08:38;cmoulliard;I propose that we remove the version range of camel-soap to allow to work with packages exported by JDK

{code}
Import-Package = 
	javax.jws;version=""[2.0,3)"",
	javax.xml.bind,
	javax.xml.bind.annotation,
	javax.xml.namespace,
	javax.xml.ws;version=""[2.1,3)"",
	org.apache.camel;version=""[2.5,2.6)"",
	org.apache.camel.component.bean;version=""[2.5,2.6)"",
	org.apache.camel.converter.jaxb;version=""[2.5,2.6)"",
	org.apache.camel.spi;version=""[2.5,2.6)"",
	org.xmlsoap.schemas.soap.envelope;version=""[2.5,3)""

{code}

--> should become

{code}
Import-Package = 
	javax.jws,
	javax.xml.bind,
	javax.xml.bind.annotation,
	javax.xml.namespace,
	javax.xml.ws,
	org.apache.camel;version=""[2.5,2.6)"",
	org.apache.camel.component.bean;version=""[2.5,2.6)"",
	org.apache.camel.converter.jaxb;version=""[2.5,2.6)"",
	org.apache.camel.spi;version=""[2.5,2.6)""
{code}","06/Jan/11 10:03;cmoulliard;If we want to support packages exported by JRE/JDK while packages exported by ServiceMix bundles or specs, then we should add as version range like this

ex: javax.jws;version=""[0,3)"",

I have made the change manually into the manifest of camel-soap and being able to deploy my camel route",06/Jan/11 10:08;njiang;committed the patch into Camel trunk repository.,,,,,,,,,,,,,,,,,,,,,,,,
"Splitter Component: Setting 'streaming = ""true""' breaks error handling",CAMEL-3498,12494700,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rsteppac,rsteppac,05/Jan/11 09:38,25/Oct/11 11:36,14/Mar/19 02:43,06/Jan/11 15:55,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"Setting 'streaming = ""true""' breaks error handling:
If an exception is thrown in a processor, the exception in the subExchange is copied to the original exchange in MulticastProcessor line 554. In Splitter line 140 the original exchange is copied, including the exception that was thrown while processing the previous exchange. This prevents all subsequent exchanges from being processed successfully.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-05 10:43:25.16,,,no_permission,,,,,,,,,,,,,,76237,,,Thu Jan 06 15:55:45 UTC 2011,,,,,,,0|i01v47:,8810,,,,,,,,,"05/Jan/11 10:43;davsclaus;Try with 2.6-SNAPSHOT as said on user forum and if its still an issue (you think) then attach a test case / sample. And pin point what you expect to happen.
","05/Jan/11 10:43;davsclaus;See nabble
http://camel.465427.n5.nabble.com/2-Bugs-in-Splitter-Camel-2-5-0-tp3326727p3326727.html","06/Jan/11 09:29;rsteppac;The problem is still present in the 2.6-SNAPSHOT.

Expectation: 
If in a route like below an exception is raised in the line validation processor, then that exception should be logged once and the message exchange for that particular source line should not be forwarded to the destination. Subsequent source lines that pass validation should be forwarded to the destination.

Actual:
The first source line failing validation/raising an exception prevents all subsequent source lines from being forwarded to the destination. For every subsequent source line the exception of the one failing line is logged again.

<camel:route id=""fileConsumer1"">
	<camel:from uri=""file://c:/tmp/"" />
	<camel:split streaming=""true"">
		<camel:tokenize token=""\r\n"" />
		<camel:process ref=""myValidationProcessorThrowingExceptionsOnFail"" />
		<camel:to uri=""activemq:queue:MY.TOKEN.QUEUE"" />
	</camel:split>
</camel:route>","06/Jan/11 14:00;davsclaus;It doesn't matter if you use streaming or not.
",06/Jan/11 15:55;davsclaus;trunk: 1055913,,,,,,,,,,,,,,,,,,,,,,,,,
"Splitter Component: Setting 'streaming=""true"" parallelProcessing=""true""' consumes large amounts > of heap space for big original messages",CAMEL-3497,12494696,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rsteppac,rsteppac,05/Jan/11 09:21,25/Oct/11 11:35,14/Mar/19 02:43,08/Jan/11 17:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"Setting 'streaming=""true"" parallelProcessing=""true""' consumes large amounts of heap space for big original messages. E.g. 1024m of heap is not enough to process an 80Mb with 500'000 lines, splitting it line by line.
The problem seems to be the ArrayList in MulticastProcessor line 224. It contains a Future<Exchange> object for every token delivered by the java.util.Scanner. The list is only cleared (going out of scope) after all Future objects have been completed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-05 10:44:18.126,,,no_permission,,,,,,,,,,,,,,76238,,,Mon Jan 10 09:59:46 UTC 2011,,,,,,,0|i01v3z:,8809,,,,,,,,,"05/Jan/11 10:44;davsclaus;See nabble
http://camel.465427.n5.nabble.com/2-Bugs-in-Splitter-Camel-2-5-0-tp3326727p3326727.html",05/Jan/11 12:17;davsclaus;Yeah the tasks list is only used for cancelling tasks which isn't needed to be processed anymore due we are done due timeout or stop on exception. So it should be possible to refactor the code to not use a task list for that. ,05/Jan/11 15:03;davsclaus;The CompletionService holds a reference to the Future so there is no gain really.,"05/Jan/11 17:36;davsclaus;The issue is the splitter copies the exchange for each splitted message. And the CompletionService keeps reference to all exchanges, which means we end up with a lot of Exchange at once in memory which eats up memory.

Will have to come up with some way of discarding not needed exchanges during processing. Maybe even using something else than the CompletionService if its the culprint.
I added this to the known issues to Camel 2.5 release notes.",06/Jan/11 09:35;davsclaus;Camel 3.0 will have internal optimization which helps reducing memory footprint used during routing.,"07/Jan/11 14:07;davsclaus;trunk on Camel 2.6 in rev 1056325:
Cancelling future tasks is now done using a running boolean instead of a keeping a big array list with the future references.","07/Jan/11 16:43;davsclaus;trunk on Camel 2.6 in rev 1056380:

I have reduced memory consumption used, which should allow it to be a bit better. But the splitter still uses a bit additional memory due the splitting is based on a copy of the input message for each splitted message.

Ralf you are welcome to test again and see if you can process a bit more than previously.","08/Jan/11 10:49;davsclaus;Okay good news. I refactored the logic so Camel now aggregates the parallel tasks on-the-fly.

This makes a tremendous difference. Now I can split a file into 50.000 sub messages and process that in 7 sec, using at most 18mb.
Before I would hit an issue at about 25.000-30.000 message and hit OOME with 130mb.

Since the logic is more complex because there is a separate tasks which aggregates on the fly, while the other task submit new tasks, there is logic to signal between the two tasks. They kinda need to agree when there are no more messages to split, and when it has aggregated all of those.","08/Jan/11 17:27;davsclaus;I ran a test with 1.000.000 rows in a file
{code}
2011-01-08 18:25:44,216 [read #9 - Split] INFO  split                          - Received: 1000000 messages so far. Last group took: 50 millis which is: 20,000 messages per second. average: 17,775.566
2011-01-08 18:25:44,217 [main           ] INFO  SplitterParallelBigFileTest    - Took 57.423 seconds
2011-01-08 18:25:44,218 [://target/split] INFO  route1                         - Done splitting bigfile.txt
{code}

And the memory usage was at most 33mb at peak.","08/Jan/11 17:29;davsclaus;trunk: 1056744.

Now it should run with low memory consumption and you should be able to process very big files.

Ralf fell free to test with latest code on your system.","10/Jan/11 09:59;davsclaus;Fixed rare potential deadlock issue with aggregate task not being given time to run due thread pool overloaded when running in parallel mode on multicast/splitter.

trunk: 1057139.",,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in DefaultCamelContext.removeRouteDefinitions(),CAMEL-3493,12494663,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jn,jn,05/Jan/11 01:09,25/Oct/11 11:35,14/Mar/19 02:43,05/Jan/11 06:39,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"I get the following exception in DefaultCamelContext.removeRouteDefinitions().  We are removing route definitions from multiple threads.  I see synchronization in various other methods, but not this one. 

Caused by: java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at java.util.AbstractCollection.removeAll(AbstractCollection.java:336)
	at org.apache.camel.impl.DefaultCamelContext.removeRouteDefinitions(DefaultCamelContext.java:588)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-05 06:39:08.99,,,no_permission,,,,,,,,,,,,,,76239,,,Wed Jan 05 06:39:08 UTC 2011,,,,,,,0|i01v33:,8805,,,,,,,,,"05/Jan/11 01:14;jn;We are also adding routes from multiple threads.  Although I haven't seen a problem yet, from looking at the source code it looks like the same problem exists with addRouteDefinitions().",05/Jan/11 06:39;davsclaus;trunk: 1055309,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 BindyCsvDataFormat broken for pipe delimited files,CAMEL-3489,12494633,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,steven.lewis,steven.lewis,04/Jan/11 19:32,25/Oct/11 11:35,14/Mar/19 02:43,05/Jan/11 09:30,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-bindy,,,,0,,,,,,"Attempting to unmarshall a pipe delimited CSV file into a POJO using Bindy causese the first and last character the the line processed to be dropped.  It appears that the BindyCsvDataFormat class removes the first and the last character from the line read from the CSV if the seperator is > 1 characters in length (see below or line 162-165 in BindyCsvDataFormat).  For pipe delimited files, you need to specify \\| as the seperator, as | is not evaluated correctly as a java regex by the split fuction.  This leads to the first and last character for the line being parsed being dropped.  From the comments it appears a ""fix"" was added to remove the first and last character of the line when the seperator contains quotes or double quotes.  Making this determination using the length of the seperator, rather than evaluating using a regex seems to be a poor solution that breaks other CSV delimiters.

See Attached for an code example.


",,,,,,,,,,,,,,,,,,04/Jan/11 19:37;steven.lewis;BindyPipeDelimiterBugTest.java;https://issues.apache.org/jira/secure/attachment/12467458/BindyPipeDelimiterBugTest.java,04/Jan/11 19:37;steven.lewis;bug.txt;https://issues.apache.org/jira/secure/attachment/12467457/bug.txt,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-01-05 09:30:51.542,,,no_permission,,,,,,,,,,,,,,76240,,,Wed Jan 05 09:30:51 UTC 2011,,,,,,,0|i01v27:,8801,,,,,,,,,04/Jan/11 19:37;steven.lewis;place bug.txt in a directory called bug,"05/Jan/11 09:30;davsclaus;trunk: 1055373.

Also fixed issue with using quoted csv records.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-juel fails to validate due to missing import,CAMEL-3487,12494622,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,tjsnell,tjsnell,04/Jan/11 17:49,25/Oct/11 11:36,14/Mar/19 02:43,04/Jan/11 19:32,,,,,,,,,,,,,2.6.0,,,,camel-juel,,,,0,,,,,,Needed servlet-api,,,,,,,,,,,,,,,,,,04/Jan/11 17:52;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12467444/patchfile.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-04 19:32:26.477,,,no_permission,,,,,,,,,,,,,,76241,,,Tue Jan 04 19:32:26 UTC 2011,,,Patch Available,,,,0|i01v1r:,8799,,,,,,,,,"04/Jan/11 19:32;hadrian;Patch applied (r1055149) with thanks to Tracy. Great contribution, keep them coming.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring feature dependency error in features.xml,CAMEL-3484,12494553,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tjsnell,tjsnell,tjsnell,04/Jan/11 01:58,04/Jan/11 02:36,14/Mar/19 02:43,04/Jan/11 02:36,,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,The spring feature won't load because the feature has the dependencies in the wrong order. Looks like it happened at revision 949956.,,,,,,,,,,,,,,,,,,04/Jan/11 02:11;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12467390/patchfile.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-01-04 02:19:18.156,,,no_permission,,,,,,,,,,,,,,76242,,,Tue Jan 04 02:36:30 UTC 2011,,,Patch Available,,,,0|i01v13:,8796,,,,,,,,,"04/Jan/11 02:19;njiang;@Tracy,
Can you also past the stack trace?
The spring feature wasn't changed for a long time, I'm not sure why the bundle dependencies order can cause this kind error.
 ","04/Jan/11 02:36;tjsnell;Haha. Can we delete this issue and pretend it didn't happen. As a simplistic test I did
{code}install -s ....{code}
for each bundle in the feature. Which of course would give and error if the order was incorrect. However, order doesn't matter in features since each bundled is installed then after all are installed they are each started. Stupid shortcut test on my part!

",04/Jan/11 02:36;tjsnell;Let's just pretend this never happened.,,,,,,,,,,,,,,,,,,,,,,,,,,,
csv unmarshal and maybe other components uses default encoding ,CAMEL-3483,12494540,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,03/Jan/11 22:53,07/Feb/12 15:08,14/Mar/19 02:43,04/Jan/11 21:54,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,See discussion in Nabble: http://camel.465427.n5.nabble.com/csv-unmarshal-uses-default-encoding-td3325474.html,,,,,,,,,,,,,CAMEL-4989,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76243,,,2011-01-03 22:53:23.0,,,,,,,0|i01v0v:,8795,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContinuationServlet - May produce NPE under heavy load,CAMEL-3479,12494486,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Jan/11 13:01,25/Oct/11 11:35,14/Mar/19 02:43,03/Jan/11 13:36,2.4.0,2.5.0,,,,,,,,,,,2.6.0,,,,camel-jetty,,,,0,,,,,,"CAMEL-2986 fixes some issue with the CamelContinationServlet.

However under extreme load and under some circumstances you can still get a NPE.

The Jetty guides for writing and using continuation at
http://wiki.eclipse.org/Jetty/Feature/Continuations

Shows a different style for suspend/resume than we currently have implemented. 
I think it's best practice that we refactor the code in camel-jetty to be aligned with the Jetty guide.

I will follow the _Suspend Resume Pattern_ style listed on the Jetty guide.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76244,,,Mon Jan 03 13:36:21 UTC 2011,,,,,,,0|i01uzz:,8791,,,,,,,,,03/Jan/11 13:36;davsclaus;trunk: 1054613.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
register several cacheEnpoint with different name,CAMEL-3473,12494248,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tjsnell,skydjol,skydjol,29/Dec/10 14:33,25/Oct/11 11:36,14/Mar/19 02:43,04/Jan/11 14:17,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cache,,,,0,,,,,,"When you declare in camel context

<camel:endpoint id=""cache1"" uri=""cache:cache1"" />
<camel:endpoint id=""cache2"" uri=""cache:cache2"" />
<camel:endpoint id=""cache3"" uri=""cache:cache3"" />

CamelCacheProducer produce systematically  in same cache because in CacheComponent, CacheConfiguration is modified by method createEndpoint

{code:title=CamelCacheProducer.java|borderStyle=solid}

public void process(Exchange exchange) throws Exception {
        if (LOG.isTraceEnabled()) {
            LOG.trace(""Cache Name: "" + config.getCacheName());
        }

        if (cacheManager.cacheExists(config.getCacheName())) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Found an existing cache: "" + config.getCacheName());
                LOG.trace(""Cache "" + config.getCacheName() + "" currently contains ""
                        + cacheManager.getCache(config.getCacheName()).getSize() + "" elements"");
            }
            cache = cacheManager.getCache(config.getCacheName());
        } else {
            cache = new Cache(config.getCacheName(),
                    config.getMaxElementsInMemory(),
                    config.getMemoryStoreEvictionPolicy(),
                    config.isOverflowToDisk(),
                    config.getDiskStorePath(),
                    config.isEternal(),
                    config.getTimeToLiveSeconds(),
                    config.getTimeToIdleSeconds(),
                    config.isDiskPersistent(),
                    config.getDiskExpiryThreadIntervalSeconds(),
                    null);
            cacheManager.addCache(cache);
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Added a new cache: "" + cache.getName());
            }
        }

        String key = exchange.getIn().getHeader(CacheConstants.CACHE_KEY, String.class);
        String operation = exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION, String.class);

        if (operation == null) {
            throw new CacheException(""Operation not specified in the message header ["" + CacheConstants.CACHE_KEY + ""]"");
        }
        if ((key == null) && (!operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL))) {
            throw new CacheException(""Cache Key is not specified in message header header or endpoint URL."");
        }

        performCacheOperation(exchange, operation, key);
    }
{code} 

{code:title=CacheComponent.java|borderStyle=solid}

   public class CacheComponent extends DefaultComponent {
    private CacheConfiguration config;
    private CacheManagerFactory cacheManagerFactory = new CacheManagerFactory();
    
    public CacheComponent() {
        config = new CacheConfiguration();
    }

    public CacheComponent(CamelContext context) {
        super(context);
        config = new CacheConfiguration();
    }

    @Override
    @SuppressWarnings(""unchecked"")
    protected Endpoint createEndpoint(String uri, String remaining, Map parameters) throws Exception {
        config.parseURI(new URI(uri));
        
        CacheEndpoint cacheEndpoint = new CacheEndpoint(uri, this, config, cacheManagerFactory);
        setProperties(cacheEndpoint.getConfig(), parameters);
        return cacheEndpoint;
    }

    public CacheManagerFactory getCacheManagerFactory() {
        return cacheManagerFactory;
    }

    public void setCacheManagerFactory(CacheManagerFactory cacheManagerFactory) {
        this.cacheManagerFactory = cacheManagerFactory;
    }

    @Override
    protected void doStart() throws Exception {
        super.doStart();
        ServiceHelper.startService(cacheManagerFactory);
    }

    @Override
    protected void doStop() throws Exception {
        ServiceHelper.stopService(cacheManagerFactory);
        super.doStop();
    }
}
{code} 

The resolution could be in CacheComponent

{code:title=CacheComponent.java|borderStyle=solid}
    @Override
    @SuppressWarnings(""unchecked"")
    protected Endpoint createEndpoint(String uri, String remaining, Map parameters) throws Exception {
        CacheConfiguration   config = new CacheConfiguration();
        config.parseURI(new URI(uri));
        
        CacheEndpoint cacheEndpoint = new CacheEndpoint(uri, this, config, cacheManagerFactory);
        setProperties(cacheEndpoint.getConfig(), parameters);
        return cacheEndpoint;
    }
{code} ",,,,,,,,,,,,,,,,,,04/Jan/11 14:05;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12467418/patchfile.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-12-31 09:00:58.213,,,no_permission,,,,,,,,,,,,,,76245,,,Tue Jan 04 14:17:33 UTC 2011,,,,,,,0|i01uyn:,8785,,,,,,,,,"31/Dec/10 09:00;davsclaus;Can you elaborate a bit more whats the problem?

Can you attach a test case which demonstrates the issue?

And we love contributions, so you are welcome to work on a patch.
http://camel.apache.org/contributing.html","04/Jan/11 00:45;tjsnell;I think I follow his issue, I hit it in camel-aws. If the configuration is per component that assumes that all endpoints share the same configuration. In camel-aws' case this meant that you couldn't have a route that consumed from one aws account and produced to another (among other things). In this case the URI points to the URI of the last endpoint created, for all endpoints. His change would move the config to the endpoint and solve the problem.

I'll be glad to make the code change and test if no one else is.",04/Jan/11 11:30;davsclaus;Ah yeah Tracy that would be the problem. See the camel-mail component where the Configuration instance is defensively copied when creating an endpoint.,04/Jan/11 14:05;tjsnell;Changed to defensively copy the config to each endpoint on creation. Added a simple test to confirm.,"04/Jan/11 14:17;davsclaus;Thanks Tracy for the patch.

trunk: 1055051.",,,,,,,,,,,,,,,,,,,,,,,,,
Wiki Page for Google App Engine example needs improving,CAMEL-3464,12494043,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,joed,mrjcleaver,mrjcleaver,24/Dec/10 16:53,24/Apr/11 09:57,14/Mar/19 02:43,24/Dec/10 20:22,2.5.0,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"[11:26am] MartinCleaver: ok, well I did build it against trunk, I used ""svn co http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-gae camel-example-gae""
[11:26am] MartinCleaver: but the pom.xml didn't work for me
[11:27am] MartinCleaver: maybe I installed google app engine incorrectly, the instructions felt vague
[11:27am] joed: You are buidling a snapshot, you don't have any of the parent pom deps, you'll need the whole source tree most likely.
[11:29am] MartinCleaver: ah - is this mentioned on http://camel.apache.org/tutorial-for-camel-on-google-app-engine.html ? I should have checked out google app engine rather than just a ""Install the http://code.google.com/appengine/downloads.html""
[11:31am] MartinCleaver: and, did installing google app engine not install the parent pom deps?
[11:33am] joed: I just tried that too and that also works fine with mvn clean install
[11:33am] MartinCleaver: ok, so I've screwed up somewhere.
[11:33am] tjsnell: you have snapshot in your repo already though
[11:33am] tjsnell: hrmm
[11:33am] joed: True.
[11:34am] joed: One sec.
[11:34am] tjsnell: trying a clean repo?
[11:34am] MartinCleaver: I was surprised I needed to edit the pom.xml file, but perhaps that's just my naivety
[11:35am] joed: Yeah, those instructions won't work.
[11:35am] MartinCleaver: ah!
[11:36am] • MartinCleaver feels a little vindicated, but mostly thankful
[11:36am] tjsnell: heh
[11:36am] joed: MartinCleaver: you are right, since you followed the instructions - the example gets the null: basically because you have the project only and no the parent poms.
[11:36am] joed: not*
[11:36am] tjsnell: can he set the version to a realeased version not snapshot?
[11:37am] tjsnell: should pull the poms then right?
[11:38am] joed: If you were to build against trunk, it'll work fine
[11:38am] joed: tjsnell: Don't think so, since properties/version/parent/etc still is missing.
[11:39am] tjsnell: ahh
[11:39am] tjsnell: yeah
[11:39am] joed: MartinCleaver: the quickest fix is this : svn co http://svn.apache.org/repos/asf/camel/trunk camel ; cd camel/examples/camel-example-gae ; mvn clean install
[11:40am] joed: We need to improve the wiki page though.",Mac OSX 10.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-24 20:22:52.57,,,no_permission,,,,,,,,,,,,,,76246,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,0|i01uwn:,8776,,,,,,,,,24/Dec/10 20:22;joed;Fixed svn co instructions on Wiki. ,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy should support clipping fields if they exceed maximum length allowed when using fixed length,CAMEL-3458,12493986,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Dec/10 16:19,24/Apr/11 09:57,14/Mar/19 02:43,23/Dec/10 16:24,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-bindy,,,,0,,,,,,"Adding a new option to bindy annotation

{code}

    /**
     * Indicates to clip data in the field if it exceeds the allowed length when using fixed length.
     */
    boolean clip() default false;
{code}

Then if enabled it will clip the data so it can fit the length.
Also now Camel throws an exception if the data is too long and you have clip set as false.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76247,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,0|i01uvb:,8770,,,,,,,,,"23/Dec/10 16:19;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Bindy-fixed-length-length-attribute-and-truncate-tp3312636p3312636.html",23/Dec/10 16:24;davsclaus;trunk: 1052312.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Route scoped onException may pick onException from another route if they are the same class type,CAMEL-3448,12493680,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,20/Dec/10 14:56,24/Apr/11 09:57,14/Mar/19 02:43,20/Dec/10 18:48,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"If you have a clash with route scoped onException and have the exact same class, then the key in the map isn't catering for this. And thus a 2nd route could override the 1st route onException definition.

For example:

from X route A
  onException IOException

from Y route B
  onException IOException

The map should contain 2 entries, but unfortunately it only contain 1. This only happens when its an exact type match.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76248,,,Sun Apr 24 09:57:12 UTC 2011,,,,,,,0|i01ut3:,8760,,,,,,,,,20/Dec/10 18:48;davsclaus;trunk: 1051239.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in camel-printer when not setting media size or omitting sides attribute,CAMEL-3446,12493665,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tmielke,tmielke,20/Dec/10 10:50,24/Apr/11 09:57,14/Mar/19 02:43,20/Dec/10 14:13,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"When specifying a camel-printer configuration that does not include config properties for sides or mediaSize, the camel route will fail to start up with a NullPointerException. E.g. this route

{code:java}
from(""file://target/incoming?delete=true"")
	.to(""lpr://localhost/default"");
{code}

will raise an NPE at route startup time.


",component: camel-printer (Could not select it from components list).,,,,,,,,,,,,,,,,,20/Dec/10 10:52;tmielke;PrinterConfiguration.patch;https://issues.apache.org/jira/secure/attachment/12466619/PrinterConfiguration.patch,20/Dec/10 11:32;tmielke;tests.patch;https://issues.apache.org/jira/secure/attachment/12466623/tests.patch,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-12-20 14:13:36.992,,,no_permission,,,,,,,,,,,,,,76249,,,Sun Apr 24 09:57:51 UTC 2011,,,Patch Available,,,,0|i01usn:,8758,,,,,,,,,"20/Dec/10 10:51;tmielke;Proposed patch attached. It assigned default values for sides and mediaSize attributes if they are not specified as part of the endpoint configuration. 
Also, some additional logging statements included.
",20/Dec/10 11:32;tmielke;Attaching additional JUnit test method (see tests.patch) to test for this bug.,"20/Dec/10 14:13;davsclaus;trunk: 1051116.

Thanks Torsten for the patch. I polished it a bit.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
JBI ClassLoading issue in SMX 4.x in OsgiPackageScanClassResolver,CAMEL-3442,12493603,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Dec/10 18:56,24/Apr/11 09:57,14/Mar/19 02:43,19/Dec/10 09:18,2.5.0,,,,,,,,,,,,2.6.0,,,,osgi,,,,0,,,,,,"CAMEL-3302 introduced a fallback when using JBI in Apache ServiceMix 4.x.

However it may lead to an issue with ConcurrentModificationException when traversing the list of classloaders.

{code}
            for (ClassLoader classLoader : super.getClassLoaders()) {
                if (!isOsgiClassloader(classLoader)) {
                    find(test, packageName, classLoader, classes);
                }
            }  
{code}

The for loop is line 62 which causes the exception.

Issue reported here
http://camel.465427.n5.nabble.com/ServiceMix-4-Fuse-4-3-0-fuse-03-00-Problems-running-JBI-example-examples-camel-td3309088.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-19 02:23:15.559,,,no_permission,,,,,,,,,,,,,,76250,,,Sun Apr 24 09:57:08 UTC 2011,,,,,,,0|i01urr:,8754,,,,,,,,,"19/Dec/10 02:23;ffang;Hi Claus,

I just checked the patch which I appended with CAMEL-3302, my original patch about the concern code is like

+           Set<ClassLoader> set = getClassLoaders();
+            for (ClassLoader classLoader : set.toArray(new ClassLoader[set.size()])) {
+                if (!isOsgiClassloader(classLoader)) {
+                    find(test, packageName, classLoader, classes);
+                }
+            }

With this patch, there should be no ConcurrentModificationException on the Iterator.  Willem revised my patch probably for better performance but introduce potential ConcurrentModificationException.

@Willem
Would you please re-check  my patch,  as classloaders set size isn't big, so change it to an array isn't a big deal IMHO, but this can avoid concurrent problem(such as ConcurrentModificationException).
Another solution I can come up with is change getClassLoaders() in DefaultPackageScanClassResolver

use
classLoaders = Collections.synchronizedSet(new HashSet<ClassLoader>()); 

instead of
classLoaders = new HashSet<ClassLoader>();

But this also bring in performance impact, I still prefer the way in my original patch.

Best Regards
Freeman




","19/Dec/10 07:27;davsclaus;Thanks Freeman

I think we should fix this in the core, so it returns a new set when invoking {{getClassLoaders}}, that will fix this issue for other custom package scan resolvers that may encounter similar issue.

Something like this:
{code}
    public Set<ClassLoader> getClassLoaders() {
        // return a new set to avoid any concurrency issues in other runtimes such as OSGi
        return Collections.unmodifiableSet(new LinkedHashSet<ClassLoader>(classLoaders));
    }
{code}",19/Dec/10 09:18;davsclaus;trunk: 1050776.,"20/Dec/10 08:37;davsclaus;trunk: 1051019.

Fixed unit test failure",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
JAXBDataFormatter should using Spring ApplicationContext's classLoader explicitly,CAMEL-3438,12493539,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,ext2xhb,ext2xhb,17/Dec/10 17:35,25/Oct/11 11:35,14/Mar/19 02:43,05/Feb/11 03:50,2.4.0,,,,,,,,,,,,2.7.0,,,,camel-jaxb,,,,1,,,,,,"JAXBDataFormatter now using JAXBContext.newInstance(path) to create JAXBContext,
but this will using Thread's context classLoader.
this may causing un-expected class or resource not found exceptions;",,,,,,,,,,,,,,,,CAMEL-3441,,17/Dec/10 17:37;ext2xhb;JaxbDataFormat.java;https://issues.apache.org/jira/secure/attachment/12466472/JaxbDataFormat.java,02/Feb/11 00:47;nickheudecker;JaxbDataFormat.patch.diff;https://issues.apache.org/jira/secure/attachment/12470005/JaxbDataFormat.patch.diff,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-12-17 17:59:41.129,,,no_permission,,,,,,,,,,,,,,76251,,,Sat Feb 05 03:50:36 UTC 2011,,,,,,,0|i01uqv:,8750,Regression,,,,,,,,"17/Dec/10 17:37;ext2xhb;This is a patch for JAXBDataFormatter to explicitly using Spring Application context's class loader;

major changes exists in the JAXBDataFormatter .getContext() method","17/Dec/10 17:59;davsclaus;Sorry but we cannot accept the patch as it's tied to Spring. Its important the camel-core is independent on any other framework.
Also classloading should work with OSGi, J2EE app servers and whatnot, so its not trivial to do.

That said CamelContext has a classResolver which is runtime agnostic. So I suggest to use that.","17/Dec/10 18:54;ext2xhb;Hi ,Clause

I don't think so.  
I aggree the camel-jaxb component should not dependency to spring

But I don't agree ""manageing context classLoader"" is a trivial things in osgi;

J2EE will managed the context class loader carefully. 
 But osgi doesn't. 

 the osgi specification(expect osgi-enterprise) doesn't give any rules about thread's context class loader;
if you check spring-dm 's reference, even spring-dm just give rules of context class loader for osgi-services configured by spring ; and doesn't give any rules for other situation;

 so the thread context  will act as  jdk default behavior, ""inherit parent thread's context class Loader"", so that's to say:

1)  thread context class loader is leaved as unmanaged in standard osgi environment; 
2) it dependency the thread is how created;

So camel should managed context class loader carefully, otherwise, it hardly to use in standard osgi . servicemix 4 is a standard osgi environment too;

","18/Dec/10 04:11;ext2xhb;Hi:

Could the DataFormatter interface add a initialize method? it need's no arguments. just plain init () method;
if so, we could prepare the jaxb context at initializing time, but not at executing time(because at executing time to create jaxb context , will be unexpected)

If camel doesn't accept , it's unfortunally.
 this means I cannot using jaxb databinding in osgi safely. etc: if I using a global OSGI ThreadPoolExecutor service to serve as the threadpool for camel components, then jaxb convert will failed; (because  threads of ThreadPoolExecutor is not always created in the correct bundles); 

if you check the mail-list in the community, you will find such bug is reported by the other user, not only mine; you can find it by the topic ("" Help with Camel JAXB (SMX4 + Camel 2.1.0)""). the mail is sent very earlier; The original mail illustrate two route, one route start by file component, jaxb will work right; while another route started by ""direct"" endpoint, it will failed.
 I think the reason is file component's thread is created in the spring context loading time, so it inherit the spring extender thread's context class loader.  while the direct endpoint's belong to another user created thread, it's context class loader is not correct, so jaxb will failed;
","18/Dec/10 06:11;njiang;@xuhongbo
You can get the Spring Application Context Classloader from the SpringCamelContext.
But I don't think you can get the CamelContext from the JAXBDataFormatter now.

Maybe we can do some improvement in Camel3.0.
","18/Dec/10 09:31;davsclaus;You ought to be able to implement {{Service}} and {{CamelContextAware}} on the data format to have the CamelContext injected and have start/stop methods invoked.
If possible then extend ServiceSupport which has doStart and doStop callbacks and is capable of storing the state whether its started or not.

That ought to work for DataFormat as well, as it does work for Processor.

Could you try that?

","18/Dec/10 14:54;davsclaus;I took a look and DataFormat didn't have the same level as Components in Camel. So I added support for Service and CamelContextAware callbacks on DataFormat as well.
This allows you much easier to do init logic in the start method. And you have access to CamelContext as well.

I made a slight change to camel-jaxb to use the classloader of CamelContext with JAXB.
Maybe you can try this out. It may need some other tweaks to run with OSGi, but it ought to be the same as you's as we grab the classloader which created SpringCamelContext.

trunk: 1050641.","18/Dec/10 18:12;davsclaus;I have modified JaxbDataFormat a bit more to let it leverage the ApplicationContext classloader if it was present.

I also optimized and removed the need for synchronization to initialize various pieces as we can do this in start now.

trunk: 1050688.","18/Dec/10 18:12;davsclaus;This nabble thread should take about some of the issues reported here
http://camel.465427.n5.nabble.com/Help-with-Camel-JAXB-SMX4-Camel-2-1-0-tp470566p470566.html","19/Dec/10 05:14;ext2xhb;Thanks for thequickly patch;
Just as Claus Ibsen has said, there are still other tweaks in OSGI.

The end user must make ensure that the generated JAXB class is visible to the camel route's bundle;  

some times the end-user should manually import the generated JAXB package , if  the generated JAXB class doesn't exists in the same bundle of camel routes; because the maven-bundle-plugin cannot recognize the spring configuration automatically.","19/Dec/10 08:12;sharma_arun_se;Hi,

Thanks ext2 for taking initiative and pointing out the bug and suggesting solution (though spring centric ;) ).  Thanks Claus and Willem for such a quick action and response. 

I am already working with OSGI and will report back, if I faced any issue.


Thanks,

Arun Kumar (sharma_arun_se)","20/Dec/10 06:16;davsclaus;Did you guys have any chance to test this patch in your system, and see if it resolves the JAXB issues you may have?

I think we should also offer a setter so you can set a custom ClassLoader on the JaxbDataFormat.",02/Feb/11 00:45;hadrian;Fails for injected jaxb context.,"02/Feb/11 00:47;nickheudecker;Attaching a patch to fix JaxbDataFormat when a JAXBContext is passed in instead of a context path.  In the 2.6.0 version, the passed in JAXBContext is clobbered by the created context.  ","05/Feb/11 03:48;hadrian;Updated fix version to 2.7.0. 
A fix was available in 2.6.0 missing just the case where the context is injected.",05/Feb/11 03:50;hadrian;Patch applied in r1067385. Thanks Nick for spotting this and providing the patch.,,,,,,,,,,,,,,
Undefined header results in Nullpointer when expression is evaluated,CAMEL-3433,12493282,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,blob79,blob79,15/Dec/10 09:17,24/Apr/11 09:58,14/Mar/19 02:43,15/Dec/10 16:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"If you define a filter for a header that is not defined like

from(""p:a"").filter(header(""header"").in(""value"")).to(""p:b"");

it results in a NullPointerException:

{code}
2010-12-15 10:07:45,920 [main] ERROR DefaultErrorHandler            - 
Failed delivery for exchangeId: 0215-1237-1292404064936-0-2. 
Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
	at org.apache.camel.builder.ExpressionBuilder$40.evaluate(ExpressionBuilder.java:955)
	at org.apache.camel.impl.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:54)
	at org.apache.camel.builder.PredicateBuilder$5.matches(PredicateBuilder.java:127)
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:46)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
{code}

This test reproduces the problem:
{code}
public void testExpressionForUndefinedHeader(){
    Expression type = ExpressionBuilder.headerExpression(""header"");
    Expression expression = ExpressionBuilder.constantExpression(""value"");
    Expression convertToExpression = ExpressionBuilder.convertToExpression(expression, type);
    convertToExpression.evaluate(exchange, Object.class);
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-15 16:29:05.34,,,no_permission,,,,,,,,,,,,,,76252,,,Sun Apr 24 09:58:13 UTC 2011,,,,,,,0|i01upr:,8745,,,,,,,,,15/Dec/10 16:29;davsclaus;trunk: 1049635.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InterceptSendToEndpoint has issues with interception http endpoints which has multiple parameters,CAMEL-3430,12493273,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Dec/10 08:05,17/Mar/14 21:08,14/Mar/19 02:43,15/Dec/10 08:39,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/interceptSendToEndpoint-with-dynamic-endpoint-tp3301978p3301978.html

The issue is when any endpoints have parameters which may be re-ordered when the endpoint is normalized.",,,,,,,,,,,,,,,,CAMEL-3434,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76253,,,Sun Apr 24 09:58:15 UTC 2011,,,,,,,0|i01up3:,8742,,,,,,,,,15/Dec/10 08:39;davsclaus;trunk: 1049455.,15/Dec/10 14:57;davsclaus;This issue is fixed by CAME-3434 as well. As the first fix wasn't sufficient.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
"DefaultCamelContext.getEndpoint(String name, Class<T> endpointType) throws Nullpointer for unknown endpoint",CAMEL-3428,12493240,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,blob79,blob79,14/Dec/10 21:05,24/Apr/11 09:58,14/Mar/19 02:43,15/Dec/10 00:05,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"The method getEndpoint throws an NullPointerException when it's called with an unknown endpoint name:

java.lang.NullPointerException
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:480)
	at org.apache.camel.impl.DefaultCamelContextTest.testGetEndPointByTypeUnknown(DefaultCamelContextTest.java:95)

The patch is attached.
",,,,,,,,,,,,,,,,,,14/Dec/10 21:06;blob79;camel.patch;https://issues.apache.org/jira/secure/attachment/12466249/camel.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-12-15 00:05:20.517,,,no_permission,,,,,,,,,,,,,,76254,,,Sun Apr 24 09:58:17 UTC 2011,,,Patch Available,,,,0|i01uon:,8740,,,,,,,,,15/Dec/10 00:05;hadrian;Patch applied in r1049343. Many thanks for the contribution.,15/Dec/10 05:47;davsclaus;I changed it to throw a NoSuchEndpointException which is more appropriate in rev: 1049435.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfProducer doesn't callback.done when the operation is oneway.,CAMEL-3426,12493187,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Dec/10 14:02,24/Apr/11 09:57,14/Mar/19 02:43,15/Dec/10 07:38,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"There is a mail thread[1] describes the whole story.
[1]http://camel.465427.n5.nabble.com/file-to-oneway-cxf-service-scenario-does-not-work-with-camel-2-5-0-td3303263.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:31.539,,,no_permission,,,,,,,,,,,,,,76255,,,Sun Apr 24 09:57:31 UTC 2011,,,,,,,0|i01uo7:,8738,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext is started twice when using camel-blueprint,CAMEL-3425,12493164,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,gnt,davsclaus,davsclaus,14/Dec/10 10:36,24/Apr/11 09:57,14/Mar/19 02:43,17/Dec/10 15:27,2.6.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,"For example if you run the {{testRouteWithAllComponents}} test in {{CamelBlueprintTest}} in tests/camel-itest-osgi you will see _a lot_ of logging. But notice
{code}
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) is starting
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) started in 0.147 seconds
{code}

Then blueprint does something
{code}
[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) is starting
[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) started in 0.071 seconds
{code}

And likewise both CamelContext's is shutdown when the test completes. There are logging events for that as well.

Pay attention to the name of the 1st CamelContext {{67-camel-2}}. This is the *correct* name as its based on the bundle id, our end user Camel application is given. This ensures that the CamelContext from his application has a name which is unique and refers to the bundle id as well.

Now if you look at the 2nd CamelContext being started its given another name {{4-camel-5}}. That id is most likely using a shared bundle id with a low number. For example camel-blueprint or camel-core bundle, or something like that. 

In essence camel-blueprint should only create *one* CamelContext and it should use the {{67-camel-2}} as the name of the CamelContext (eg. include the bundle id of the end user application).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-17 15:27:04.124,,,no_permission,,,,,,,,,,,,,,76256,,,Sun Apr 24 09:57:25 UTC 2011,,,,,,,0|i01unz:,8737,,,,,,,,,"14/Dec/10 10:40;davsclaus;If you compare this to a spring-dm test from tests/camel-itest-osgi. For example org.apache.camel.itest.osgi.core.direct.DirectTest 

{code}
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - ********************************************************************************
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - Testing: (org.apache.camel.itest.osgi.core.direct.DirectTest)
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - ********************************************************************************
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.OSGiIntegrationTestSupport - Get the bundleContext is org.eclipse.osgi.framework.internal.core.BundleContextImpl@53dafbaf
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.OSGiIntegrationTestSupport - Application installed as bundle id: 49
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 49-camel-2) is starting
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Debugger: DefaultDebugger is enabled on CamelContext: 49-camel-2
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - JMX is disabled. Using DefaultManagementStrategy.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.osgi.Activator - Found 13 @Converter classes to load
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Route: route1 started and consuming from: Endpoint[direct://start]
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Total 1 routes, of which 1 is started.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 49-camel-2) started in 0.188 seconds
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.component.mock.MockEndpoint - Asserting: Endpoint[mock://result] is satisfied
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - Testing done: org.apache.camel.itest.osgi.core.direct.DirectTest@109ce4a3
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext:49-camel-2) is shutting down
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 10 seconds)
[Camel (49-camel-2) thread #0 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Route: route1 suspension deferred.
[Camel (49-camel-2) thread #0 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Route: route1 preparing to shutdown complete.
[Camel (49-camel-2) thread #0 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Route: route1 shutdown complete.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.DefaultInflightRepository - Shutting down with no inflight exchanges.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Uptime: 0.222 seconds
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 49-camel-2) is shutdown in 0.007 seconds
{code}

As you can see from the log above, CamelContext is only started *once*, and it has been given a name using its bundle id. The end user Camel application was given bundle id 49, which is included in the CamelContext name.

edit: I fixed the logger in DefaultCamelContext so its not static anymore, which means you can see the actual classname. So now it shows {{OsgiDefaultCamelContext}} instead of {{DefaultCamelContext}}. ","17/Dec/10 15:27;gnt;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/AbstractIntegrationTest.java
Committed r1050422
",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
timestamp property in JpaTraceEventMessage does not specify a temporal type,CAMEL-3419,12492825,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marcozapletal,marcozapletal,09/Dec/10 12:00,24/Apr/11 09:58,14/Mar/19 02:43,09/Dec/10 13:10,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-jpa,,,,0,,,,,,"The timestamp property in the JpaTraceEventMessage does not specify a temporal type. This results in an exception using EclipseLink 2.1.0 (and maybe using other JPA frameworks, too). 

Using the annotation  @Temporal(TemporalType.TIMESTAMP) on timestamp should solve this issue.",JPA 2.0 / EclipseLink 2.1.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-09 13:10:28.217,,,no_permission,,,,,,,,,,,,,,76257,,,Sun Apr 24 09:58:14 UTC 2011,,,,,,,0|i01umn:,8731,,,,,,,,,"09/Dec/10 13:10;davsclaus;Thanks for reporting.

trunk: 1043957.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using java based RouteBuilder reference in blueprint.xml CameContext definition failing,CAMEL-3413,12492759,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,ivanhoe.abrahams,ivanhoe.abrahams,08/Dec/10 19:28,09/Dec/10 17:04,14/Mar/19 02:43,09/Dec/10 17:04,,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,"Hi 

I am trying to get the Java based RouteBuilder to work using the simple ""camel-osgi-example"" project.
I have downloaded and installed karaf 2.1.2
I also downloaded the latest 2.6-SNAPSHOT build of Camel (8 Dec 2010).

I proceeded to unzip the camel download an in Karaf I installed the ""camel-core"" and ""camel-blueprint"" bundles, (I also installed the servicemix jaxb-impl jar)

I then amended the ""camel-osgi-example"" project blueprint.xml file, so that it creates the example RouteBuilder as a bean, and the references the bean from the CamelContext.

Below is the bluerint.xml file contents,

<?xml version=""1.0"" encoding=""UTF-8""?>

<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:jpa=""http://aries.apache.org/xmlns/jpa/v1.0.0""
	xmlns:tx=""http://aries.apache.org/xmlns/transactions/v1.0.0""
	xmlns:camel=""http://camel.apache.org/schema/blueprint""
	default-activation=""eager"" default-availability=""optional"">


	<bean id=""routeBuilder"" class=""org.apache.camel.example.osgi.MyRouteBuilder"" />
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
			<camel:routeBuilder ref=""routeBuilder""/>
<!--		<camel:route>-->
<!--			<camel:from uri=""timer://myTimer?fixedRate=true&amp;period=2000"" />-->
<!--			<camel:bean ref=""myTransform"" method=""transform"" />-->
<!--			<camel:to uri=""log:ExampleRouter"" />-->
<!--		</camel:route>-->
	</camelContext>

	<bean id=""myTransform"" class=""org.apache.camel.example.osgi.MyTransform"">
		<property name=""prefix"" value=""SpringDSL"" />
	</bean>

</blueprint>
 

Now when I deploy this bundle in Karaf I encounter the following exception.

org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to initialize camel context factory
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:271)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:479)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:299)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:213)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_21]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_21]
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_21]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)[:1.6.0_21]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_21]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_21]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Bean[org.apache.camel.example.osgi.MyTransform@7439aca7] <<< in route: Route[[From[timer://myTimer?fixedRate=true&period=2000]] -> ... because of org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:773)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:174)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:654)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1559)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1348)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1257)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1235)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:79)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:72)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:269)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	... 11 more
Caused by: org.apache.camel.RuntimeCamelException: org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1140)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:56)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.component.bean.BeanInfo.createParameterMappingStrategy(BeanInfo.java:115)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.component.bean.BeanProcessor.<init>(BeanProcessor.java:60)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.BeanDefinition.createProcessor(BeanDefinition.java:170)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:403)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:174)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:770)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	... 22 more
Caused by: org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.aries.blueprint.container.DependencyGraph.getSortedRecipes(DependencyGraph.java:51)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:214)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:702)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:47)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:54)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	... 28 more


Regards 
Ivanhoe
 ","Camel 2.6-SNAPSHOT, Karaf 2.1.2 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-08 22:08:01.992,,,no_permission,,,,,,,,,,,,,,76258,,,Thu Dec 09 17:04:23 UTC 2010,,,,,,,0|i01ulb:,8725,,,,,,,,,"08/Dec/10 22:08;gnt;This exception should already been fixed.  Could you try again tomorrow, or building camel yourself ?

FWIW, I'm actively working on the blueprint stuff to bring it on par with the spring support, so let me know if you have any more problems.","08/Dec/10 22:34;gnt;Btw, I have a unit test case working already in trunk, so I think this problem has been solved already.  Just make sure to use the latest version.","09/Dec/10 17:02;ivanhoe.abrahams;Hi Guillaume

Sorry for taking so long, I can only do the nice OSGI stuff at home, at work people dont seem to see it as an elegant solution to the modularization problems we have. 
 
Yes I downloaded the latest snapshot version -> 2.6-SNAPSHOT,  and now the example works, also with the java-based RouteBuilder referenced from within the  camelcontext . Thanks

I will try to make a more complex example, maybe one with CXF and JMS components, to see if I hit any other issues.

Thanx

Regards
Ivanhoe",09/Dec/10 17:04;ivanhoe.abrahams;Referencing a Java based routeBuilder from within the CamelContext in blueprint now works.,,,,,,,,,,,,,,,,,,,,,,,,,,
InterceptSendToEndpoint should check for if stop DSL has been used,CAMEL-3403,12492706,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Dec/10 07:44,24/Apr/11 09:58,14/Mar/19 02:43,08/Dec/10 08:16,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/InterceptSendToEndpoint-Http-Component-tp3296620p3296620.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76259,,,Sun Apr 24 09:58:08 UTC 2011,,,,,,,0|i01uj3:,8715,,,,,,,,,08/Dec/10 08:16;davsclaus;trunk: 1043330.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty component does not work when authentication is enable,CAMEL-3401,12492632,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,07/Dec/10 15:53,28/Oct/11 13:23,14/Mar/19 02:43,16/Dec/10 07:24,2.5.0,,,,,,,,,,,,,,,,,,,,0,,,,,,"I try to use camel-jetty in a camel route usign LDAP authentication. The authentication mechanisms of Jetty works fine as I'm able to authenticate a LDAP user from the web page but the camel route is not called.

Here is the camel route

{code}
    <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

        <route>
            <from uri=""jetty:http://localhost:8080/services?handlers=securityHandler&amp;matchOnUriPrefix=true""/>
            <onException>
                <exception>java.lang.Exception</exception>
                <!-- we can set the redelivery policy here as well -->
                <redeliveryPolicy maximumRedeliveries=""1""/>
                <handled>
                    <constant>true</constant>
                </handled>
                <transform>
                    <simple>Due to something went wrong</simple>
                </transform>
                <setHeader headerName=""Exchange.HTTP_RESPONSE_CODE"">
                    <simple>500</simple>
                </setHeader>
            </onException>

            <bean ref=""responseBean""/>
        </route>
    </camelContext>
{code}

REMARK : the camel route works fine when authentication is disabled

and the error

{code}
14:56:31,587 | WARN  | 0-98 - /services | log                              | .eclipse.jetty.util.log.Slf4jLog   40 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | /services: java.lang.NullPointerException
14:56:31,587 | DEBUG | 0-98 - /services | log                              | .eclipse.jetty.util.log.Slf4jLog   80 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | EXCEPTION 
java.lang.NullPointerException
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:489)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.server.Server.handle(Server.java:347)[67:org.eclipse.jetty.server:7.1.6.v20100715]

{code}",Apache Karaf 2.1-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-07 20:37:06.456,,,no_permission,,,,,,,,,,,,,,76260,,,Fri Oct 28 13:23:41 UTC 2011,,,,,,,0|i01uin:,8713,,,,,,,,,"07/Dec/10 20:37;njiang;@Charles
How did you setup the security handler to make the LDAP works for the webpage?
Camel manages the connector and handlers itself In the camel-jetty component, so you may need to some way to make sure the security handler is configured rightly. ","08/Dec/10 07:42;cmoulliard;@Willem,

Of course that the security is enabled and works !

{code}
    <bean id=""loginService"" class=""org.eclipse.jetty.plus.jaas.JAASLoginService"">
        <property name=""name"" value=""ldap""/>
        <property name=""loginModuleName"" value=""ldap""/>
        <property name=""roleClassNames"">
            <list>
                <value>org.apache.karaf.jaas.modules.RolePrincipal</value>
            </list>
        </property>
    </bean>

    <bean id=""constraint"" class=""org.eclipse.jetty.http.security.Constraint"">
        <property name=""name"" value=""BASIC""/>
        <property name=""roles"" value=""system""/>
        <property name=""authenticate"" value=""true""/>
    </bean>

    <bean id=""constraintMapping"" class=""org.eclipse.jetty.security.ConstraintMapping"">
        <property name=""constraint"" ref=""constraint""/>
        <property name=""pathSpec"" value=""/*""/>
    </bean>

    <bean id=""securityHandler"" class=""org.eclipse.jetty.security.ConstraintSecurityHandler"">
        <property name=""authenticator"">
            <bean class=""org.eclipse.jetty.security.authentication.BasicAuthenticator""/>
        </property>
        <property name=""constraintMappings"">
            <list>
                <ref bean=""constraintMapping""/>
            </list>
        </property>
        <property name=""loginService"" ref=""loginService""/>
        <property name=""strict"" value=""false""/>
    </bean>
{code}

I don t know if this is related or not but during camel starting up, the following WARN is generated I have checked the doc of Jetty and I don t know how to setup IdentityService for JAAS authentication

{code}
18:38:41,711 | DEBUG | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   70 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | STARTED org.eclipse.jetty.plus.jaas.JAASLoginService@2433cf0f
18:38:41,711 | WARN  | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   40 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | FAILED ConstraintSecurityHandler@617ce686: java.lang.IllegalStateException: No IdentityService for org.eclipse.jetty.security.authentication.BasicAuthenticator@455ef45a in ConstraintSecurityHandler@617ce686
18:38:41,711 | DEBUG | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   80 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | EXCEPTION 
java.lang.IllegalStateException: No IdentityService for org.eclipse.jetty.security.authentication.BasicAuthenticator@455ef45a in ConstraintSecurityHandler@617ce686
	at org.eclipse.jetty.security.authentication.LoginAuthenticator.setConfiguration(LoginAuthenticator.java:37)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.security.SecurityHandler.doStart(SecurityHandler.java:333)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.security.ConstraintSecurityHandler.doStart(ConstraintSecurityHandler.java:229)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)[61:org.eclipse.jetty.util:7.1.6.v20100715]
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:92)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.server.Server.doStart(Server.java:242)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)[61:org.eclipse.jetty.util:7.1.6.v20100715]
	at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:233)[73:org.apache.camel.camel-jetty:2.5.0]
	at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148)[60:org.apache.camel.camel-http:2.5.0]
	at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:52)[60:org.apache.camel.camel-http:2.5.0]

{code}
",16/Dec/10 07:24;cmoulliard;Problem solved with last JAAS module of Karaf and workaround exist (adding an IdentityService in the spring xml file),"28/Oct/11 13:23;metatech;The line to add is the following : 
<bean id=""identityService"" class=""org.eclipse.jetty.security.DefaultIdentityService""/>
",,,,,,,,,,,,,,,,,,,,,,,,,,
"Automatically imported beans are not taken into account in camel-blueprint (InterceptStrategy, LifecycleStrategy, etc...)",CAMEL-3398,12492550,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,06/Dec/10 22:20,24/Apr/11 09:57,14/Mar/19 02:43,07/Dec/10 14:57,,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:47.336,,,no_permission,,,,,,,,,,,,,,76261,,,Sun Apr 24 09:57:47 UTC 2011,,,,,,,0|i01uhz:,8710,,,,,,,,,"06/Dec/10 23:24;gnt;This issue seems much more complicated than it seems.
The reason is that in order for the camel blueprint namespace handler to find the dependencies (such as components, etc...) so that the route will wait until components are available, the handler does initialize the CamelContextFactoryBean while the handler is parsing the xml.  The bad effect is that beans that are declared after the camel context won't be available yet in the blueprint metadata registry.

I need to investigate a work around for that.","07/Dec/10 14:57;gnt;The drawback is that you can't inject an initialized CamelContext into something else, as the initialization is done after all singletons are built.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter - Exchange.CORRELATION_ID should point back to parent Exchange id,CAMEL-3395,12492164,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Dec/10 15:02,24/Apr/11 09:57,14/Mar/19 02:43,06/Dec/10 15:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Splitted-exchange-has-incorrect-correlation-ID-tp3289354p3289354.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76263,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,0|i01uhb:,8707,,,,,,,,,06/Dec/10 15:29;davsclaus;trunk: 1042676.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter and Multicast EIP marks exchange as exhausted to early if exception was thrown from an evaluation,CAMEL-3394,12492149,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Dec/10 12:59,23/Nov/12 13:52,14/Mar/19 02:43,06/Dec/10 14:20,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Cannot-handle-Exception-thrown-from-Splitter-Expression-tp3286043p3286043.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 13:52:30.347,,,no_permission,,,,,,,,,,,,,,76264,,,Fri Nov 23 13:52:30 UTC 2012,,,,,,,0|i01uh3:,8706,,,,,,,,,06/Dec/10 14:20;davsclaus;trunk: 1042656.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,"23/Nov/12 13:52;chris889;{code}
Can it be that the issue here is back since version 2.9.4? 

The following route works ok in camel 2.9.3 -> if an exception is thrown by body.list the errorhandler kicks in and the
message is handled by ""direct:errorhandler"". Since 2.9.4 (and also with the latest version, 2.10.2) the errorhandler is no longer
active.

from(""direct:sampleUri"")
  .errorHandler(deadLetterChannel(""direct:errorhandler"").disableRedelivery())
  .multicast()
    .stopOnException()
    .split(simple(""${body.list}""))
      .streaming()
      .stopOnException()
      .process(new Processor() {
        @Override
	public void process(Exchange exchange) throws Exception {

	
	}
	
     }).end()
    .end()
    .to(""direct:somewhere_else_1"")
    .to(""direct:somewhere_else_2"")
.end();

{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,
routeBuilder ref not working in camel 2.5.0,CAMEL-3390,12492093,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,ivanhoe.abrahams,ivanhoe.abrahams,05/Dec/10 09:40,24/Apr/11 09:57,14/Mar/19 02:43,07/Dec/10 16:35,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,," I amended the camel-example-osgi project so as to use the Java RouteBuilder, the MyRouteBuilder class in that project

I changed the blueprint.xml file to the following

	<bean id=""routeBuilder"" class=""org.apache.camel.example.osgi.MyRouteBuilder"" />
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
			<routeBuilder ref=""routeBuilder""/>
	</camelContext>
 
However nothing happens, no error message is displayed either.
If I leave the example in its original state, in other words using the xml-based dsl, then it works.
Maybe this is somehow related to the fact that packageScan does not work???

Regards 
Ivanhoe

","Windows, Camel 2.5.0, running in Apache Felix",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:14.384,,,no_permission,,,,,,,,,,,,,,76265,,,Sun Apr 24 09:57:14 UTC 2011,,,,,,,0|i01ug7:,8702,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageHelper - issue with version numbers which contains non decimal,CAMEL-3389,12492091,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Dec/10 09:04,24/Apr/11 09:57,14/Mar/19 02:43,05/Dec/10 10:57,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See more here
http://fusesource.com/forums/thread.jspa?threadID=2447&tstart=0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-06 16:34:18.264,,,no_permission,,,,,,,,,,,,,,76266,,,Sun Apr 24 09:57:15 UTC 2011,,,,,,,0|i01ufz:,8701,,,,,,,,,05/Dec/10 10:57;davsclaus;trunk: 1042312.,"06/Dec/10 16:34;pchandler;Thanks, ",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
@OutHeaders in bean binding issue with InOnly MEP,CAMEL-3388,12492079,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ammulder,ammulder,04/Dec/10 22:32,24/Apr/11 09:57,14/Mar/19 02:43,05/Dec/10 10:46,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"When you invoke a bean with a method signature like this in Camel 2.5.0/HEAD, the in and out message both are null (the ""Hello!"" value just disappears):

{code:java}
    public String doTest(@Body Object body, @Headers Map headers, @OutHeaders Map outHeaders) {
        return ""Hello!"";
    }
{code}

The same thing without the headers works OK:

{code:java}
    public String doTest(@Body Object body) {
        return ""Hello!"";
    }
{code}
See camel-core/src/test/java/org/apache/camel/component/bean/BeanWithHeadersAndBodyInject3Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-05 10:46:00.268,,,no_permission,,,,,,,,,,,,,,76267,,,Sun Apr 24 09:57:58 UTC 2011,,,,,,,0|i01ufr:,8700,,,,,,,,,"04/Dec/10 22:41;ammulder;Seems to happen when @OutHeaders is used?

{code:java}
    public String doTest(@OutHeaders Map headers) {
        return ""Hello!"";
    }
{code}

does not work but this does:

{code:java}
    public String doTest(@Headers Map headers) {
        return ""Hello!"";
    }
{code}
","05/Dec/10 00:11;ammulder;The problem seems to lie in Pipeline.createNextExchange

It looks like if you use @OutHeaders then you force an out message to be created, which means in this pipeline method it will overwrite the in message (containing your bean return value) with the out message (containing only headers).

I'm not sure what the appropriate resolution is.  If it's an InOnly exchange then it probably doesn't make sense to overwrite the in message with the out message.  But just having the out headers you wrote disappear doesn't seem right either.

It seems like if you write to the out headers in a bean method you are trying to control what headers are present in the message after the bean method invocation completes.  Perhaps if it's an InOnly exchange then no out message should be generated by using @OutHeaders, it should just supply a new empty map, and after the invocation has completed, replace the in headers with the new map?

You might say that you shouldn't use @OutHeaders for an InOnly exchange, but in some cases (JMS, or a reusable bean component) you might not know whether it's an InOnly or InOut exchange just based on the route definition, and it doesn't seem like you should need different bean methods and a content based router that looks at the exchange pattern just because you always want to put some headers into the output message.","05/Dec/10 10:46;davsclaus;trunk: 1042310.

@OutHeaders is now only bound if MEP is out capable. If you send an InOnly then it will be null.
The @Body and other parameters is now not affected.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
spring-integration - Should have better configuration validation,CAMEL-3377,12491521,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Nov/10 09:40,24/Apr/11 09:58,14/Mar/19 02:43,29/Nov/10 10:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-spring-integration,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Integration-camel-and-spring-integration-tp3284105p3284105.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76268,,,Sun Apr 24 09:58:04 UTC 2011,,,,,,,0|i01udb:,8689,,,,,,,,,29/Nov/10 10:29;davsclaus;trunk: 1040056.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
markRollbackOnlyLast should remove caused exception to avoid it affecting outer transaction,CAMEL-3373,12491485,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Nov/10 13:23,24/Apr/11 09:57,14/Mar/19 02:43,28/Nov/10 13:24,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-spring,,,,0,,,,,,"The {{markRollbackOnlyLast()}} should remove any caused exception because it should not affect outer transactions.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76269,,,Sun Apr 24 09:57:42 UTC 2011,,,,,,,0|i01ucf:,8685,,,,,,,,,28/Nov/10 13:23;davsclaus;Also the transaction manager doesn't log correct that it will do a rollback if markRollbackOnlyLast was used,28/Nov/10 13:24;davsclaus;trunk: 1039880.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consumer template ignores options in uri for file consumer,CAMEL-3358,12487919,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ngochai,ngochai,24/Nov/10 06:48,24/Apr/11 09:57,14/Mar/19 02:43,24/Nov/10 07:20,2.2.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"I have an OSGi bundle:

My camel-context.xml:
------------
	<osgi:camelContext xmlns=""http://camel.apache.org/schema/spring"">					
		<template id=""producer"" />
		<consumerTemplate id=""consumer"" />
		<routeBuilder ref=""routeBuilder""/>
	</osgi:camelContext>

	<bean id=""routeBuilder"" class=""com.proiam.postmarque.customer.RouteBuilder"">	
	</bean>
	
	<bean id=""customerFilePolling"" class=""com.proiam.postmarque.customer.CustomerFilePolling"">
		<property name=""pullAddress"" value=""${pullAddress}"" />
	</bean>
------------------
RouteBuilder:
------------------
		from(""quartz://customer4pxfilein?cron="" + cronTime)		
		.beanRef(""customer4PXFilePolling"", ""pollFiles"");
-----------------
pollFiles:
-----------------
public class CustomerFilePolling {
	//@AutoWired gives me NPE
	@EndpointInject
	ConsumerTemplate consumer;
	//@AutoWired gives me NPE
	@EndpointInject
	ProducerTemplate producer;

        public void pollFiles() {
		while (true) {
			//System.out.println(""Prepare to comsume"");
			Exchange exchange = consumer.receive(""file:///tmp/test/in?move=../done&readLock=changed"", 2000);
			if (exchange == null) {
				break;
			}
			Exchange result = producer.send(""activemq:queue:CustomerFileInBody"", exchange);
			if (result.isFailed()) {
				System.out.println(""pollFiles processor raised an error!"");
			}
		}
	}
}

--------------
Everything is fine except that after being processed, the files are still there together with their .camelLock ","Debian sid i686
sun jdk 1.6.0_22-b04
apache-servicemix-4.2.0-fuse-02
",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-24 07:20:49.116,,,no_permission,,,,,,,,,,,,,,76270,,,Sun Apr 24 09:57:25 UTC 2011,,,,,,,0|i01u93:,8670,,,,,,,,,24/Nov/10 07:20;davsclaus;You need Camel 2.5 which has this fixed,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hard coded locale in Bindy DatePatternFormat,CAMEL-3356,12487890,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,rkettelerij,rkettelerij,23/Nov/10 20:39,24/Apr/11 09:58,14/Mar/19 02:43,24/Nov/10 05:16,2.6.0,,,,,,,,,,,,2.6.0,,,,camel-bindy,,,,0,,,,,,"As reported by a user from the community (http://camel.465427.n5.nabble.com/Bindy-Dateformat-Parsing-exception-td3276981.html), the locale of SimpeDateFormat in bindy's DatePatternFormat class is hard coded to FRANCE.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-24 04:57:08.261,,,no_permission,,,,,,,,,,,,,,76271,,,Sun Apr 24 09:58:24 UTC 2011,,,,,,,0|i01u8n:,8668,,,,,,,,,"24/Nov/10 04:57;hadrian;Sorry Willem, I didn't see that you assigned it to yourself.
Committed fix in r1038476 and improved support for Locale in camel-bindy.
Richard, thanks for taking the time to follow up on this.","24/Nov/10 05:25;njiang;@Hadrian,
It's OK, all I did was removing the hard code of local.","24/Nov/10 08:08;davsclaus;Havent looked into if this is possible.

I suggest that it should be possible to set a locale on the class annotation so all the fields etc. will default and use that locale.
It would be cumbersome to set locale on each field one by one if you just want to use the same locale.

",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
"ConcurrentModifictionException on UoW done, when under heavy load",CAMEL-3355,12487915,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Nov/10 09:15,24/Apr/11 09:58,14/Mar/19 02:43,23/Nov/10 12:00,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Errors-when-under-load-tp3276259p3276259.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76272,,,Sun Apr 24 09:58:04 UTC 2011,,,,,,,0|i01u8f:,8667,,,,,,,,,23/Nov/10 12:00;davsclaus;trunk: 1038075.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsInvoker silently swallows exceptions,CAMEL-3353,12487912,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,boristerzic,boristerzic,22/Nov/10 19:25,25/Oct/11 11:36,14/Mar/19 02:43,27/Dec/10 08:59,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"If you have a route with a CXF consuming endpoint in the beginning and any component afterwards that can produce Exceptions that are not RuntimeCamelExceptions or WebApplicationException then the CxfRsInvoker will swallow the exception and return a HTTP 204 (all fine but no content to return) response.

For example in the following route:
{code:java}
 from(""cxfrs://bean://fooServer"")
            .convertBodyTo(Foo.class)
            .to(""bean-validator://x"")
            .to(""jms:queue:foos"").inOnly();
{code}

The bean validator component can throw BeanValidationException when the Foo instance has errors. This exception will be ignored by the CxfRsInvoker.

This causes important exceptions to become invisible by default which seems wrong to me. The docs and Camel in Action additionally talk about how the DefaultErrorHandler has a strategy of returning exceptions to the caller and this is also not happening here.

My local fix is a patched version of camel-cxf that converts any unknown exception (i.e. not CamelRuntimeException or WebApplicationException) to a WebApplicationException with the original exception as a constructor parameter. This is then effectively an HTTP 500 Exception and will be returned as such to the caller.

However my knowledge of camel and camel-cxf is not sufficient to ascertain whether this is the right approach, it seems to me that the CamelRuntimeException should also be treated this way since in the current code that will also be swallowed (as far as I can tell).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-12-27 08:59:08.904,,,no_permission,,,,,,,,,,,,,,76273,,,Mon Jan 03 20:28:47 UTC 2011,,,,,,,0|i01u7z:,8665,,,,,,,,,"27/Dec/10 08:59;njiang;@Boris
I just committed a fix of this issue, now the exception will be sent back to the client.
Please check out the latest Camel 2.6-SNAPSHOT to verify the fix.",03/Jan/11 20:28;boristerzic;I just tested it with the trunk version of Camel 2.6-SNAPSHOT and it works for me. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multicast with UseLatestAggregationStrategy fails to propagated exceptions which has been handled by onException,CAMEL-3352,12487906,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Nov/10 13:58,24/Apr/11 09:57,14/Mar/19 02:43,24/Nov/10 14:05,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multicast-Behaviour-with-Exceptions-tp3270272p3270272.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76274,,,Sun Apr 24 09:57:51 UTC 2011,,,,,,,0|i01u7r:,8664,,,,,,,,,"23/Nov/10 14:26;davsclaus;trunk: 1038128

Logic from pipeline is now made reusable as we need this in multicast EIP to fix this issue",24/Nov/10 14:05;davsclaus;trunk: 1038605.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-irc component silently fails on nick collision,CAMEL-3351,12487913,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,tjsnell,tjsnell,21/Nov/10 13:54,24/Apr/11 09:57,14/Mar/19 02:43,08/Dec/10 06:54,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-irc,,,,0,,,,,,When the camel-irc component connects to an irc server and there's a nick collision it silently fails. Also note there is no camel-irc component in Jira.,,,,,,,,,,,,,,,,,,08/Dec/10 02:32;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12465771/patchfile.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-12-08 06:54:35.187,,,no_permission,,,,,,,,,,,,,,76275,,,Sun Apr 24 09:57:55 UTC 2011,,,,,,,0|i01u7j:,8663,,,,,,,,,21/Nov/10 13:55;tjsnell;This will cause an NPE when the route is actually called but the root cause is hidden.,21/Nov/10 16:10;tjsnell;All irc events are just logged (I missed it in the logs). In this case the collision is logged as well as the server initiated disconnect. However the component code is unaware of the state. In general there are a lot of useful things that could be done with the various IRC events. Specifically though the code needs to be aware of disconnects.,"08/Dec/10 02:32;tjsnell;I got carried away and made several changes and fixed a minor bug. Here are my notes:



IrcComponent:

- Removed IrcConfiguration member variable. Didn't make sense. Removed constructor with IrcConfiguration as the param.
- ircLogger moved to method.

IrcProducer:
- Changed doStart to call component.joinChannels instead of doing it in the start method. Ditto for IrcConsumer
  removing dupe code.
- Check to see if we're still connected before sending a message in process. If disconnected throw a RuntimeCamelException.
- Removed unused imports
- Add a listener so we can get error messages
- Change listener type from FilteredIRCEventAdapter to IRCEventAdapter and added getter/setter for easier testing
- doStop didn't remove the listener fixed. Added. This would've caused an NPE if a user was stopping individual routes.


IrcConsumer:
- Changed doStart to call component.joinChannels instead of doing it in the start method. 
- Removed unused imports
- Added check in onKick to see if we got kicked and rejoin if so
- Change listener type from FilteredIRCEventAdapter to IRCEventAdapter and added getter/setter for easier testing


IrcEndpoint:
- Extracted method getExchange. Same 2 lines of code in 9 methods. Slightly cleaner this way.
- Added handleIrcError to handle any IRC errors that the producer or consumer hit
- Added handleNickInUse to handle nick in use errors. On endpoint startup this would cause a failed connection. For the Consumer this would just mean we'd never consume anything. For the Producer sends would throw an NPE (now there's a check for a valid connection and RuntimeCamelException is thrown instead)
- Added method joinChannels
- Added method joinChannel


IrcConfiguration
- Add autoRejoin setting
- Changed key storage to a Dictionary.

Added several new tests using mockito


",08/Dec/10 06:54;njiang;Applied patch with thanks to Tracy.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition found in CxfRsEndpoint while getting the endpoint binding under load and performing sync and async invocation,CAMEL-3349,12487911,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,akarpe,akarpe,akarpe,19/Nov/10 22:32,24/Apr/11 09:57,14/Mar/19 02:43,19/Nov/10 22:57,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"The CxfRsEndpoint's getBinding method is not thread safe. At a customer site, I ran into an issue at startup if 2 threads raced to perform sync and async invocation, the code for getBinding (given below) would react in the following way.
      - Thread 1 would proceed to create a binding object 
      - Thread 2 would mean while still find the  binding to be null and proceed to create a new binding
      - Meanwhile thread one would have its binding and set the Atomic boolean for binding initialized and proceed to set the HeaderStrategy.
      - Thread 2 meanwhile would overwrite the original binding object and find that Atomic boolean already set and would have no way to associate a HeaderFilterStrategy object since the flag is up.
      - In the absence of a HeaderFilterStrategy, copying of ProtocolHeaders etc will throw exceptions on every following request/invocation.

--------------------------------------------------
    public CxfRsBinding getBinding() {
        if (binding == null) {
            binding = new DefaultCxfRsBinding();
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Create default CXF Binding "" + binding);
            }
        } 
        
        if (!bindingInitialized.getAndSet(true) && binding instanceof HeaderFilterStrategyAware) {
            ((HeaderFilterStrategyAware)binding).setHeaderFilterStrategy(getHeaderFilterStrategy());
        }
        
        return binding;
    }
------------------------------------------------",,,,,,,,,,,,,,,,,,19/Nov/10 22:34;akarpe;camel-cxf-race-condition.patch;https://issues.apache.org/jira/secure/attachment/12463419/camel-cxf-race-condition.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-20 07:16:02.564,,,no_permission,,,,,,,,,,,,,,76276,,,Sun Apr 24 09:57:38 UTC 2011,,,,,,,0|i01u73:,8661,,,,,,,,,"19/Nov/10 22:34;akarpe;Made the getBinding() method synchronized to overcome this issue. The penalty for this is very minimal since, the need for creating a binding is only on the first set of invocations. The binding is then held until the endpoint is in operation.
",19/Nov/10 22:57;akarpe;Applied patch to subversion trunk as revision r1037070,"20/Nov/10 07:16;davsclaus;Nice catch.

I wonder if the initialization of the binding can be done in doStart. This is much better as it would avoid the synchronized block on the getter. Which I assume is invoked lazy at runtime on processing a new Exchange.

Generally initialization should be done in doStart because starting it is single threaded and we don't care _so much_ about performance at startup.","20/Nov/10 13:15;akarpe;Hi Claus,

Yes, I completely agree. I was hesitating to do this since I have not studied this camel-cxf component code closely and was worried about side-effects and multiple rounds of testing since it is a heavily used component.

BTW, I found this at a customer site and I have given them an identical patch for camel version 2.2.

I will make this change in the coming weeks.

Cheers,

Ashwin...  ",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultShutdownStrategy and ShutdownAware (SedaConsumer) losing exchange,CAMEL-3348,12487910,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ddelautre,ddelautre,19/Nov/10 22:02,24/Apr/11 09:57,14/Mar/19 02:43,22/Nov/10 10:39,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"There's a problem when we shutdown the camel context with a seda endpoint.

In the SedaConsumer, the exchange is removed from the queue and then, later, is added to the InflightRepository as shown in the following code (I put comments where it is done):

{code}
public void run() {
        BlockingQueue<Exchange> queue = endpoint.getQueue();
        while (queue != null && isRunAllowed()) {
            final Exchange exchange;
            try {
                exchange = queue.poll(1000, TimeUnit.MILLISECONDS); // The exchange is removed here from the queue
            } catch (InterruptedException e) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Sleep interrupted, are we stopping? "" + (isStopping() || isStopped()));
                }
                continue;
            }
            if (exchange != null) {
                if (isRunAllowed()) {
                    try {
                        sendToConsumers(exchange); // Call to sendToConsumers detailed below

                        if (exchange.getException() != null) {
                            getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());
                        }
                    } catch (Exception e) {
                        getExceptionHandler().handleException(""Error processing exchange"", exchange, e);
                    }
                } else {
                    if (LOG.isWarnEnabled()) {
                        LOG.warn(""This consumer is stopped during polling an exchange, so putting it back on the seda queue: "" + exchange);
                    }
                    try {
                        queue.put(exchange);
                    } catch (InterruptedException e) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(""Sleep interrupted, are we stopping? "" + (isStopping() || isStopped()));
                        }
                        continue;
                    }
                }
            }
        }
    }

    protected void sendToConsumers(Exchange exchange) throws Exception {
        int size = endpoint.getConsumers().size();

        if (size > 1) {

            if (LOG.isDebugEnabled()) {
                LOG.debug(""Multicasting to "" + endpoint.getConsumers().size() + "" consumers for Exchange: "" + exchange);
            }
           
            MulticastProcessor mp = endpoint.getConumserMulticastProcessor();

            AsyncProcessorHelper.process(mp, exchange, new AsyncCallback() {
                public void done(boolean doneSync) {
                }
            });
        } else {
            AsyncProcessorHelper.process(processor, exchange, new AsyncCallback() { // This line will create the UnitOfWork (in UnitOfWorkProcessor) which will put the exchange in the InflightRepository
                public void done(boolean doneSync) {

                }
            });
        }
    }
{code}

If the shutdown occurs between these two actions, the DefaultShutdownStrategy will shutdown the route even if there is a message in progress. And the message will be lost.

Here is the code of ShutdownTask in DefaultShutdownStrategy which cause the shutdown even if there is some messages still in progress. (I put comments in it to show the state of the seda queue and InflightRepository if it is called between the queue.poll() and the InflightRepository.add())

{code}
for (Consumer consumer : order.getInputs()) {
                        int inflight = context.getInflightRepository().size(consumer.getEndpoint()); // check the number of inflight exchanges which is 0 because the UnitOfWork is not created

                        if (consumer instanceof ShutdownAware) {
                            inflight += ((ShutdownAware) consumer).getPendingExchangesSize(); // check the number of exchange in the seda queue which is 0 because the message is already removed
                        }
                        if (inflight > 0) {
                            size += inflight;
                            if (LOG.isDebugEnabled()) {
                                LOG.debug(inflight + "" inflight and pending exchanges for consumer: "" + consumer);
                            }
                        }
                    }
{code}
You can reproduce it by putting a breakpoint in the method {code}protected void sendToConsumers(Exchange exchange){code} in SedaConsumer and calling stop() on the CamelContext while the thread is suspended by the breakpoint.

We caught the problem in a unit test where we were testing the shutdown and when our test server was under heavy load.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-20 17:14:27.679,,,no_permission,,,,,,,,,,,,,,76277,,,Sun Apr 24 09:57:56 UTC 2011,,,,,,,0|i01u6v:,8660,,,,,,,,,"20/Nov/10 17:14;davsclaus;Well spotted.

","22/Nov/10 10:39;davsclaus;trunk: 1037666.

Damien could you test the fix on your system if possible?","22/Nov/10 20:23;ddelautre;Thank you for your quick fix! 

So I tested it and if I left my breakpoint where it was (for testing purpose), it works.

But, if I put a breakpoint at the line with tasks.incrementAndGet() in SedaConsumer to simulate that the call to getPendingExchangesSize() is done between the queue.poll and the tasks.incrementAndGet(), I can reproduce the problem:

{code}
public void run() {
        BlockingQueue<Exchange> queue = endpoint.getQueue();
        while (queue != null && isRunAllowed()) {
            Exchange exchange = null;
            try {
                exchange = queue.poll(1000, TimeUnit.MILLISECONDS);
                if (exchange != null) {
                    try {
                        tasks.incrementAndGet();  // if we put a breakpoint here the problem will occur
                        sendToConsumers(exchange);

                        // log exception if an exception occurred and was not handled
                        if (exchange.getException() != null) {
                            getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());
                        }
                    } catch (Exception e) {
                        getExceptionHandler().handleException(""Error processing exchange"", exchange, e);
                    } finally {
                        tasks.decrementAndGet();
                    }
                }
            } catch (InterruptedException e) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Sleep interrupted, are we stopping? "" + (isStopping() || isStopped()));
                }
                continue;
            } catch (Throwable e) {
                if (exchange != null) {
                    getExceptionHandler().handleException(""Error processing exchange"", exchange, e);
                } else {
                    getExceptionHandler().handleException(e);
                }
            }
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug(""Ending this polling consumer thread, there are still "" + tasks.get() + "" threads left."");
        }
    }
{code}

The odds that it will occur are lower but it can happen if we are really, really unlucky.

I've seen that you fixed this bug for the 2.6.0 version. When will it be released?","23/Nov/10 09:25;davsclaus;Yeah there is maybe this problem but its much less likely to happen.

Let me try to register the task pre emptive before polling. Then we use a bit more logic to figure out if we shutting down and wait until all pending exchanges and tasks has been completed.

The problem with the executor service if you use {{shutdownNow}} is that it will maybe also interrupt and stop currently processed exchanges.
And all we just want to do is to stop the threads which is doing poll. But we can't do that easily, hence we gotta figure this out differently.","23/Nov/10 10:06;davsclaus;trunk: 1038033.

Damien can you test this again :)","23/Nov/10 16:11;ddelautre;Everything seems ok. Thanks again!

When will the 2.6.0 version be released?","23/Nov/10 16:23;davsclaus;Great.

Camel 2.6 will be released when its _done_ :)
Ah okay we usually do a release every quarter, or maybe a bit faster. 

But we are hitting x-mas time, so I assume in mid Januar 2011.

But anyone is free to raise their voice in the mailing list when they think its time for a new release.

FuseSource just cut the MR 2.5 release today, but this last fix didn't make it, however the commit from yesterday did.
So you can consider using the MR 2.5.0 release.
http://repo.fusesource.com/nexus/content/repositories/releases/org/apache/camel/apache-camel/2.5.0-fuse-00-00/
","24/Nov/10 19:38;davsclaus;Damien I had to rework the code logic a bit. Can you retest on your system.

trunk: 1038780.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,
RedeliveryPolicy does not honor MaximumRedeliveryDelay,CAMEL-3344,12487907,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lorrin,lorrin,18/Nov/10 05:48,24/Apr/11 09:58,14/Mar/19 02:43,18/Nov/10 10:11,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"When using exponential retry back-off with a maximumRedeliveryDelay, the delay is not honored.

The bug is in RedeliveryPolicy.java's calculateRedeliveryDelay method:

        if (maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay) {
            redeliveryDelayResult = maximumRedeliveryDelay;
        }

redeliveryDelay is the initial delay and never increases, so the max is never applied. It needs to compare against redeliveryDelayResult instead.",,,,,,,,,,,,,,,,,,28/Dec/10 02:30;pherrero;RedeliveryPolicyMaxDelayTest.java;https://issues.apache.org/jira/secure/attachment/12467024/RedeliveryPolicyMaxDelayTest.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-18 10:11:34.601,,,no_permission,,,,,,,,,,,,,,76278,,,Sun Apr 24 09:58:00 UTC 2011,,,,,,,0|i01u5z:,8656,,,,,,,,,"18/Nov/10 10:11;davsclaus;trunk: 1036381.

Thanks for reporting.","28/Dec/10 02:30;pherrero;I ran into this issue too (just now, so I searched the JIRA queue to avoid duplicating this report). I'm attaching the unit test I wrote for it.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsInvoker produces NullpointerException when no ContinuationProvider is set in the InMessage,CAMEL-3343,12487905,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,boristerzic,boristerzic,17/Nov/10 21:16,25/Oct/11 11:36,14/Mar/19 02:43,18/Nov/10 08:37,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"In my usage of CXF-RS with Camel through the camel-cxf component I ran into a NullpointerException, the specific case is described in some detail on StackOverflow: http://stackoverflow.com/questions/4198461/why-do-i-get-a-nullpointerexception-when-invoking-the-cxf-rs-endpoint-of-a-camel 

Specifically I run into a NullpointerException:

{code:java}
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.getContinuation(CxfRsInvoker.java:63)
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:52)
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:89)
        ... 33 more
{code}

I was assuming I was misconfiguring something but didn't find any alternative way so I started digging in the camel-cxf source code.

I found that such a ""getContinuation"" method also exists for the {{org.apache.camel.component.cxf.CxfConsumer}} as well as for the CxfRsInvoker (where it was failing for me). However in the case of the CxfConsumer there is a guard on the ContinuationProvider so that if it is null, then null is returned:

{code:java}
return provider == null ? null : provider.getContinuation();
{code}

CxfRsInvoker does not have this guard, but it does have code to deal with a ""null"" Continuation at the calling site (line 52, in performInvocation). Therefore I assumed this was a bug and patched the guard into the CxfRsInvoker as well.

My program now seems to work correctly. I assume this is a bug.

For completeness sake, this is what getContinuation now looks like for me:

{code:java}
    private Continuation getContinuation(Exchange cxfExchange) {
        ContinuationProvider provider = 
            (ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
        return provider == null ? null : provider.getContinuation();
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-18 08:36:41.582,,,no_permission,,,,,,,,,,,,,,76279,,,Mon Jan 03 20:30:22 UTC 2011,,,Patch Available,,,,0|i01u5r:,8655,,,,,,,,,"18/Nov/10 08:36;njiang;Yes, It's a bug of camel-cxfrs, I just committed a quick fix for it  and updated the CxfRsInvoker  to use CXF 2.3.0 continuation API.
Please check out the latest Camel 2.6-SNAPSHOT for verification.
",03/Jan/11 20:30;boristerzic;Confirmed that this works with the current trunk 2.6-SNAPSHOT version of camel-cxf.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProxyHelper and JMS component - need to start producer or fails with NPE,CAMEL-3341,12487904,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,earcam,earcam,17/Nov/10 12:01,24/Apr/11 09:57,14/Mar/19 02:43,18/Nov/10 08:46,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,camel-jms,,,0,,,,,,"

I've a very simple unit test (based on http://camel.apache.org/using-camelproxy.html) that works fine when using endpoint uri ""direct:start"" but fails with the following exception when using ""activemq:somequeue""

java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:140)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.impl.DefaultAsyncProducer.process(DefaultAsyncProducer.java:37)
	at org.apache.camel.component.bean.CamelInvocationHandler.invoke(CamelInvocationHandler.java:65)
	at $Proxy7.sayWordTo(Unknown Source)
	at net.earcam.cdosgi.remoteserviceadmin.CamelProxyTest.simpleArgTest(CamelProxyTest.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)



Looks like the problem is simply that the producer isn't started so never creates a UuidGenerator (needed for the JMS Reply-To)

org.apache.camel.component.bean.ProxyHelper - lines 45 - 51, needs to start producer (for JmsProducer)
    /**
     * Creates a Proxy which sends PojoExchange to the endpoint.
     */
    @SuppressWarnings(""unchecked"")
    public static <T> T createProxy(Endpoint endpoint, ClassLoader cl, Class[] interfaces, MethodInfoCache methodCache) throws Exception {
        return (T) createProxyObject(endpoint, endpoint.createProducer(), cl, interfaces, methodCache);
    }


As a workaround, simply create the producer, start it and use the overloaded method createProxy that takes a producer parameter.
","linux (debian) 2.6, maven 2.2.1, pax-exam 1.2.2 (using latest felix and equinox)",,,,,,,,,,,,,,,,,17/Nov/10 12:02;earcam;ProxyHelper.diff;https://issues.apache.org/jira/secure/attachment/12463418/ProxyHelper.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-17 17:54:08.365,,,no_permission,,,,,,,,,,,,,,76280,,,Sun Apr 24 09:57:21 UTC 2011,,,Patch Available,,,,0|i01u5b:,8653,,,,,,,,,"17/Nov/10 12:02;earcam;
Can't see any side effects of applying this.","17/Nov/10 17:54;davsclaus;Thanks for reporting and well spotted.

Yes the producer needs to be started beforehand.

The patch looks good.
However we can use ServiceHelper.startService to have it log the event that this service/producer is being started.
","18/Nov/10 08:46;davsclaus;trunk: 1036350.

Thanks for reporting.","18/Nov/10 08:49;earcam;
Thanks Claus.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
NPE occurs without @Entity annotation,CAMEL-3335,12487880,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,12/Nov/10 09:12,24/Apr/11 09:58,14/Mar/19 02:43,12/Nov/10 10:07,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-jpa,,,,0,,,,,,"Here is code from the org.apache.camel.component.jpa.JpaConsumer class

protected String getEntityName(Class<?> clazz) {
        
    Entity entity = clazz.getAnnotation(Entity.class);
        
    // Check if the property name has been defined for Entity annotation
    if (!entity.name().equals("""")) { // line 307
        return entity.name();
    } else {
        return null;
    }
 
}

When trying to consume entities from jpa endpoint exception occurs

java.lang.NullPointerException
	at org.apache.camel.component.jpa.JpaConsumer.getEntityName(JpaConsumer.java:307)
	at org.apache.camel.component.jpa.JpaConsumer.createQueryFactory(JpaConsumer.java:287)
	at org.apache.camel.component.jpa.JpaConsumer.getQueryFactory(JpaConsumer.java:196)
	at org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:83)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:82)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:80)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:78)
	at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:79)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)

This is because there is no @Entity annotation and persistence is configured by means of orm.xml.

To fix the problem change line 307 to
if (entity != null && !entity.name().equals(""""))",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-12 10:07:55.844,,,no_permission,,,,,,,,,,,,,,76281,,,Sun Apr 24 09:58:16 UTC 2011,,,,,,,0|i01u3z:,8647,,,,,,,,,"12/Nov/10 10:07;davsclaus;Thanks for reporting

trunk: 1034325.",12/Nov/10 10:16;szhemzhitsky;You're welcome,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanShell Expressions Don't Work,CAMEL-3334,12487881,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ammulder,ammulder,12/Nov/10 08:48,23/Nov/12 13:58,14/Mar/19 02:43,12/Nov/10 09:32,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-script,,,,0,,,,,,"BeanShell 2.0b5 has the JSR-223 integration, but it implements Compilable, when in fact it throws an exception if you call compile.

Camel calls compile for any language that implements Compilable, therefore you get an exception every time your route has BeanShell in it.

I notice the BeanShell tests are commented-out in camel-script.

Also, the Camel Wiki page for BeanShell is stupendously vague on actual usage.",,,,,,,,,,,,,,,,,,12/Nov/10 09:01;ammulder;camel-script-beanshell.patch;https://issues.apache.org/jira/secure/attachment/12463414/camel-script-beanshell.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-12 09:32:54.376,,,no_permission,,,,,,,,,,,,,,76282,,,Sun Apr 24 09:57:26 UTC 2011,,,Patch Available,,,,0|i01u3r:,8646,,,,,,,,,"12/Nov/10 09:32;davsclaus;Thanks for the patch and updating the wiki. Keep it up.

trunk: 1034306.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nested multicast in splitter EIP and issue with UseOriginalAggregationStrategy,CAMEL-3333,12487887,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Nov/10 08:30,24/Apr/11 09:57,14/Mar/19 02:43,13/Nov/10 13:44,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multicast-inside-splitter-tp3261288p3261288.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76283,,,Sun Apr 24 09:57:20 UTC 2011,,,,,,,0|i01u3j:,8645,,,,,,,,,13/Nov/10 13:44;davsclaus;trunk: 1034759.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE on Request-Reply InOut (Test attached),CAMEL-3328,12487883,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lkwg,lkwg,11/Nov/10 14:25,24/Apr/11 09:58,14/Mar/19 02:43,11/Nov/10 17:15,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-jms,,,,0,,,,,,"simply request reply with ActiveMQ 5.4.1 using a queue is failing in v2.5 instead is running in v.2.4

{code:java} 
import static org.junit.Assert.assertTrue;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.Endpoint;
import org.apache.camel.Exchange;
import org.apache.camel.ExchangePattern;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class RequestReplyFailureTest
{
	private Endpoint			endpoint;
	private Producer			producer;
	private DefaultCamelContext	camel;

	@Before
	public void before() throws Exception
	{
		String brokerUrl = ""tcp://localhost:61616"";
		camel = new DefaultCamelContext();
		camel.addComponent(""jms"", JmsComponent.jmsComponentAutoAcknowledge(new ActiveMQConnectionFactory(brokerUrl)));

		final String url = ""jms:queue:test"";
		endpoint = camel.getEndpoint(url);

		camel.addRoutes(new RouteBuilder()
		{
			@Override
			public void configure() throws Exception
			{
				from(url).process(new Processor()
				{
					@Override
					public void process(Exchange exchange) throws Exception
					{
						// simply set 'pong' as response
						exchange.getOut().setBody(""pong"");
					}
				});
			}
		});

		System.out.println(camel.getVersion());
		camel.start();

		producer = endpoint.createProducer();
	}

	@After
	public void after() throws Exception
	{
		camel.stop();
	}

	/**
	 * @throws Exception
	 */
	@Test
	public void testInOut() throws Exception
	{
		Exchange exchange = endpoint.createExchange(ExchangePattern.InOut);
		exchange.getIn().setBody(""ping"");
		producer.process(exchange);

		assertTrue(""pong"".equals(exchange.getOut().getBody()));
	}
{code} ","Linux rudi-duo 2.6.32-24-generic-pae #43-Ubuntu SMP Thu Sep 16 15:30:27 UTC 2010 i686 GNU/Linux
java 1.6.0.22",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-11 15:12:47.264,,,no_permission,,,,,,,,,,,,,,76284,,,Sun Apr 24 09:58:20 UTC 2011,,,,,,,0|i01u2f:,8640,,,,,,,,,11/Nov/10 14:39;lkwg;formatting,"11/Nov/10 15:12;davsclaus;What error do you get? Can you post your stacktrace.

The unit test works fine for me, however I use the Camel Test Kit for the unit test as it will be part of camel-jms unit tests.","11/Nov/10 15:14;davsclaus;See this unit test which works
http://svn.apache.org/viewvc?rev=1033961&view=rev","11/Nov/10 15:17;lkwg;sry, this is my stacktrace

java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:140)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.impl.DefaultAsyncProducer.process(DefaultAsyncProducer.java:37)
	at de.lgohlke.services.simulate.RequestReplyFailureTest.testInOut(RequestReplyFailureTest.java:71)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

","11/Nov/10 16:16;lkwg;ur posted test runs in both versions,

what is different or wrong?

I dont see the point.","11/Nov/10 16:18;davsclaus;Lars, you need to start your producer before you can use it

{code}
producer = endpoint.createProducer();
producer.start();
{code}

Likewise you should stop it when you are done using it, eg when you test is done","11/Nov/10 17:00;lkwg;ok, this solved my issue;

Maybe you can put a hint beside the NPE that, the producer should be started before using.

thx anyway","11/Nov/10 17:15;davsclaus;trunk: 1034004.

camel-jms now throws an exception if it hasnt been started tell the end user that it must be started before it can be used",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,
SmppBinding raises NullPointerException when an SMSC insert the Short Message Data inside the message_payload field,CAMEL-3321,12487864,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,vincenzo.cacurri,vincenzo.cacurri,08/Nov/10 11:29,24/Apr/11 09:58,14/Mar/19 02:43,08/Nov/10 23:29,2.4.0,2.5.0,,,,,,,,,,,2.6.0,,,,camel-smpp,,,,0,,,,,,"When an SMSC sends the DeliverSm with the short message data inside the message_payload field (in the OptionalParameter) the method
createSmppMessage(DeliverSm deliverSm) in the SmppBinding class raises a nullPointerException at the following line:

else {
            smppMessage.setBody(String.valueOf(new String(deliverSm.getShortMessage(),  
                    
this happen because deliverySm.getShortMessage return null

",,,,,,,,,,,,,,,,,,08/Nov/10 11:33;vincenzo.cacurri;SmppBinding_Patch.txt;https://issues.apache.org/jira/secure/attachment/12463377/SmppBinding_Patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-08 13:19:34.411,,,no_permission,,,,,,,,,,,,,,76285,,,Sun Apr 24 09:58:15 UTC 2011,,,Patch Available,,,,0|i01u0v:,8633,,,,,,,,,08/Nov/10 13:19;davsclaus;Is it possible to create an unit test which demonstrates this bug?,"08/Nov/10 18:05;muellerc;Will have a look on it this evening...

Christian","08/Nov/10 23:29;muellerc;Vincenzo, thanks for reporting the issue and providing the patch.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfEndpoint of camel-cxf doesn't support  the shcemaLocation element,CAMEL-3319,12487771,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Nov/10 04:23,24/Apr/11 09:58,14/Mar/19 02:43,08/Nov/10 00:24,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,2.6.0,,,,,,,,0,,,,,,"Here is the mail thread[1] which discusses about it.
[1]http://camel.465427.n5.nabble.com/camel-cxf-exception-when-parsing-cxf-schemaLocation-element-td3253254.html#a3253254",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:58:10.453,,,no_permission,,,,,,,,,,,,,,76286,,,Sun Apr 24 09:58:10 UTC 2011,,,,,,,0|i01u0f:,8631,,,,,,,,,08/Nov/10 00:24;njiang;Applied the patch into trunk in reversion 1032256 ,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Property resolve in EIP does not work when in a sub route.,CAMEL-3314,12487858,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ankelee,ankelee,05/Nov/10 13:29,24/Apr/11 09:57,14/Mar/19 02:43,05/Nov/10 14:03,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"The 2.5 feature: ""The EIP now supports property placeholders in the String based options (a few spots in Java DSL where its not possible). For example: 
<convertBodyTo type=""String"" charset=""{{foo.myCharset}}""/>"" does not work correctly when ie nested in a <choice> tag.

See discussion: http://camel.465427.n5.nabble.com/Camel-2-5-Propertyplaceholders-and-Spring-DSL-still-not-working-td3251608.html#a3251608

Example route:

This works: 
<route> 
        <from uri=""direct:in"" /> 
        <convertBodyTo type=""String"" charset=""{{charset.external}}"" />	
        <log message=""Charset: {{charset.external}}"" /> 
        <to uri=""mock:out"" /> 
</route> 

This fails: 
<route> 
        <from uri=""direct:in"" /> 
        <choice> 
                <when> 
                        <constant>true</constant> 
                        <convertBodyTo type=""String"" charset=""{{charset.external}}"" />	
                </when> 
        </choice> 
        <to uri=""mock:out"" /> 
</route> ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-05 14:03:11.721,,,no_permission,,,,,,,,,,,,,,76288,,,Sun Apr 24 09:57:18 UTC 2011,,,,,,,0|i01tzb:,8626,,,,,,,,,"05/Nov/10 14:03;davsclaus;trunk: 1031566.

Now its fixed. Thanks for reporting.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update camel-soap to use 2.3.0 tooling,CAMEL-3310,12487865,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dkulp,dkulp,04/Nov/10 15:42,24/Apr/11 09:57,14/Mar/19 02:43,09/Nov/10 01:47,,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"
The camel-soap component does not build with the update to CXF 2.3.   patch will be supplied.",,,,,,,,,,,,,,,,,,04/Nov/10 15:56;dkulp;CAMEL-3310-b.patch;https://issues.apache.org/jira/secure/attachment/12463372/CAMEL-3310-b.patch,04/Nov/10 15:43;dkulp;CAMEL-3310.patch;https://issues.apache.org/jira/secure/attachment/12463369/CAMEL-3310.patch,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-11-04 15:50:16.411,,,no_permission,,,,,,,,,,,,,,76289,,,Sun Apr 24 09:57:51 UTC 2011,,,Patch Available,,,,0|i01tyf:,8622,,,,,,,,,"04/Nov/10 15:50;chris@die-schneider.net;Hi Dan,

you changed from ${cxf-version} to 2.3.0. Shouldn´t we rather update the property to reflect this?
Apart from this the changed artifacts will of course make sense.

Christian","04/Nov/10 15:54;dkulp;
Well, it would involve creating a new property, which is definitely a valid option.

With 2.3.0, the xjc utilities that we have were pulled out into a subproject of CXF that is not likely to be released as part of the fixes and such of the rest of CXF.   Thus, the version for those is separate than for the rest of the cxf dependencies that are used in Camel.

","04/Nov/10 15:56;dkulp;
new patch with new property","04/Nov/10 23:00;chris@die-schneider.net;I was just trying to apply your patch but it looks a bit strange
--- a/components/camel-soap/pom.xml
+++ b/components/camel-soap/pom.xml

Do you compare two checkouts there? When I apply this in subversion it does not find any matches. Does this have to do with git?",04/Nov/10 23:06;dkulp;Yea. It's a git diff. Usually a patch -p1 should do it. ,05/Nov/10 06:11;njiang;Applied patch with thanks to DanK.,"05/Nov/10 08:42;davsclaus;This cannot compile with JDK 1.5


davsclaus:(svn)camel[trunk:1031468]/components/camel-soap$ mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.5.0_24
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"" version: ""10.6.4"" arch: ""i386"" Family: ""unix""


{code}
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure

/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[56,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[59,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[63,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[56,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[59,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[63,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
{code}",05/Nov/10 08:43;davsclaus;Compiling with 1.6 works fine.,05/Nov/10 09:14;chris@die-schneider.net;I guess the dependency to the jaxb and jaxws annotations apis are missing. I can not correct this from work but I can take a look from home later today. It would be nice to only add the jars for jdk 1.5 builds. I have seen that we already have a profile for jdk 1.5. ,"05/Nov/10 09:18;njiang;When build the camel-soap with JDK 1.5, cxf will try to load the JAXWS 2.2 API instead of JAXWS 2.1 API which will introduce the below issue.","05/Nov/10 15:08;dkulp;

The two new deps need to move to normal scope, not test scope:

diff --git a/components/camel-soap/pom.xml b/components/camel-soap/pom.xml
index e610f4a..a1583f9 100644
--- a/components/camel-soap/pom.xml
+++ b/components/camel-soap/pom.xml
@@ -60,18 +60,16 @@
             <artifactId>jaxb-impl</artifactId>
         </dependency>
 
-               <!-- JAXWS api jars -->
-               <dependency>
+       <!-- JAXWS api jars -->
+       <dependency>
             <groupId>org.apache.geronimo.specs</groupId>
             <artifactId>geronimo-ws-metadata_2.0_spec</artifactId>
             <version>1.1.2</version>
-            <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.geronimo.specs</groupId>
             <artifactId>geronimo-jaxws_2.2_spec</artifactId>
             <version>1.0</version>
-            <scope>test</scope>
         </dependency>
 
         <!-- for testing -->
","06/Nov/10 03:29;njiang;Just applied the patch that DanK provided, now the camel-soap should be OK now.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,
Transfer-Encoding chunking implementation leaves a loop hole for error,CAMEL-3306,12487897,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,unmarshall,unmarshall,03/Nov/10 16:33,24/Apr/11 09:57,14/Mar/19 02:43,18/Nov/10 08:41,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"The description of this issue is at [1].

[1] http://camel.465427.n5.nabble.com/CXF-http-conduit-AllowChunking-does-not-work-td3247495.html#a3248727",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:49.145,,,no_permission,,,,,,,,,,,,,,76290,,,Sun Apr 24 09:57:49 UTC 2011,,,,,,,0|i01txj:,8618,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf bundle should not export META-INF.cxf which is also exported by cxf-bundle.,CAMEL-3303,12487841,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Nov/10 02:32,24/Apr/11 09:58,14/Mar/19 02:43,03/Nov/10 06:29,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,2.6.0,,,,,,,,0,,,,,,"Here is the mailing thread[1] about it.

[1] http://camel.465427.n5.nabble.com/CXF-Startup-issue-with-Camel-in-OSGI-runtime-tp3241913p3247484.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:58:27.65,,,no_permission,,,,,,,,,,,,,,76291,,,Sun Apr 24 09:58:27 UTC 2011,,,,,,,0|i01twv:,8615,,,,,,,,,"03/Nov/10 03:34;njiang;Exporting the META-INF.cxf.camel instead of META-INF.cxf to avoid the package conflict of cxf-bundle.
Now you should use
{code}
<import resource=""classpath:META-INF/cxf/camel/cxf-extension-camel.xml"" />
{code}

instead of 
{code}
<import resource=""classpath:META-INF/cxf/cxf-extension-camel.xml"" />
{code}
to use the camel transport module in OSGi with spring.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiPackageScanClassResolver should have Non-OSGi classloader check fallback,CAMEL-3302,12487851,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,02/Nov/10 12:02,24/Apr/11 09:57,14/Mar/19 02:43,04/Nov/10 07:50,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-spring,,,,0,,,,,,"This is necessary when use JBI packaging for servicemix-camel ServiceUnit  so that we get chance to use SU classloader to scan packages in the ServiceUnit
",,,,,,,,,,,,,,,CAMEL-3442,,,02/Nov/10 12:04;ffang;CAMEL-3302.patch;https://issues.apache.org/jira/secure/attachment/12463367/CAMEL-3302.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-04 07:50:59.103,,,no_permission,,,,,,,,,,,,,,76292,,,Sun Apr 24 09:57:48 UTC 2011,,,,,,,0|i01twn:,8614,,,,,,,,,02/Nov/10 12:04;ffang;append patch to fix this issue,"04/Nov/10 07:50;njiang;Applied the patch with thanks to Freeman, I also added an unit test to make sure the fallback is working.","18/Dec/10 19:00;davsclaus;There is an issue with concurrency in this, see CAMEL-3442",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInvocation handling LinkedHashMap cannot be converted to java.util.Map,CAMEL-3299,12487652,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,di_m_an,di_m_an,02/Nov/10 00:12,24/Apr/11 09:57,14/Mar/19 02:43,02/Nov/10 03:18,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"I'm calling a Camel proxy and passing it a single argument of type LinkedHashMap.
On the service side I'm waiting for a java.util.Map, so the converter BeanInvocation -> java.util.Map is called.
Finally it comes to BeanConverter:convertTo with type=java.util.Map and value class=BeanInvocation

then it goes to
            // maybe from is already the type we want
            if (from.isAssignableFrom(type)) {
                return body;
            }
where from=LinkedHashMap
and... the condition is false!

The LinkedHashMap is not assignable from java.util.Map,
but java.util.Map is assignable from LinkedHashMap and, I guess, that is what we want.

Please fix?
- if (from.isAssignableFrom(type)) {
+ if (type.isAssignableFrom(from)) {",,,,,,,,,,,,CAMEL-3082,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-02 03:18:36.003,,,no_permission,,,,,,,,,,,,,,76293,,,Sun Apr 24 09:57:29 UTC 2011,,,Patch Available,,,,0|i01tvz:,8611,,,,,,,,,"02/Nov/10 03:18;njiang;This bug was fixed in CAMEL-3082, please check out the latest released Camel 2.5.0 for it.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmppPrivateChatProducer should close the connection when it is stopped.,CAMEL-3298,12487495,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Nov/10 08:38,24/Apr/11 09:58,14/Mar/19 02:43,05/Nov/10 07:32,,,,,,,,,,,,,2.6.0,,,,camel-xmpp,,,,0,,,,,,"Here is a the mail thread[1] which is discussing about it.
http://camel.465427.n5.nabble.com/XMPP-communication-not-closed-and-new-message-rejected-td3236657.html#a3236657 ",,,,,,,,,,,,,,,,,,01/Nov/10 08:58;njiang;camel-3298.patch;https://issues.apache.org/jira/secure/attachment/12463392/camel-3298.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:58:04.152,,,no_permission,,,,,,,,,,,,,,76294,,,Sun Apr 24 09:58:04 UTC 2011,,,,,,,0|i01tvr:,8610,,,,,,,,,05/Nov/10 07:32;njiang;Applied the patch into revision 1031458.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Dependency Injection seems not working,CAMEL-3295,12487647,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gnt,joed,joed,30/Oct/10 05:02,24/Apr/11 09:57,14/Mar/19 02:43,07/Dec/10 14:57,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,"This is just a placeholder - things like this should work.

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0
            http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">


    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""camelBlueprint"">
        <route>
            <from uri=""jms:queue""/>
            <to uri=""mock:result""/>
        </route>
    </camelContext>

    <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""connectionFactory"" ref=""jmsConnectionPool""/>
    </bean>

    <reference id=""jmsConnectionPool"" interface=""javax.jms.ConnectionFactory""/>

</blueprint>
{code}

Currently the jmsConnectionPool is not at all passed to the JmsComponent.
The usage of JmsTemplate as debated on the mailinglists I think is of a (currently) much lesser concern.
Especially comparing a little to the ProducerCode in the servicemix-jms components.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:44.44,,,no_permission,,,,,,,,,,,,,,76295,,,Sun Apr 24 09:57:44 UTC 2011,,,,,,,0|i01tv3:,8607,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Setting TaskExecutor should support both Spring 2.5 and 3.0,CAMEL-3286,12487616,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/10 04:20,25/Oct/11 11:36,14/Mar/19 02:43,29/Oct/10 07:57,2.4.0,2.5.0,,,,,,,,,,,2.6.0,,,,camel-jms,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-2-4-with-spring-2-5-6-TaskExecutor-issue-tp3237897p3237897.html

We need to use reflection when invoking setTaskExecutor on the spring JMS stuff.
Because at compile time it would be linked to the Spring 3.0 method signature.
And in Spring 2.5 the method signature is different.

Using reflection should allow us to support both cases. And this is only done on startup so no runtime overhead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76297,,,Wed Jan 19 10:12:46 UTC 2011,,,,,,,0|i01tt3:,8598,,,,,,,,,"29/Oct/10 07:57;davsclaus;We have introduced a new {{taskExecutorSpring2}} option you should use when using Spring 2.x with camel-jms.

trunk: 1028636.","19/Jan/11 10:12;davsclaus;trunk: 1060739.

I spotted another case where it should be configurable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RouteBuilder - Let if fail if end user is configuring onException etc after routes,CAMEL-3281,12487609,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Oct/10 06:28,24/Apr/11 09:57,14/Mar/19 02:43,27/Oct/10 11:38,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"All such cross cutting concerns must be defined before routes.

We should throw an exception if end user has configured them after routes, which is currently not supported in the DSL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76298,,,Sun Apr 24 09:57:21 UTC 2011,,,,,,,0|i01trz:,8593,,,,,,,,,27/Oct/10 07:46;davsclaus;The issue is that if you do it after the onException is not being used and end user may think it was used. Hence we should fail.,27/Oct/10 11:38;davsclaus;trunk: 1027919.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Threading issue which lets converter loading abort,CAMEL-3277,12487595,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lhein,lhein,25/Oct/10 19:46,23/May/11 22:17,14/Mar/19 02:43,26/Oct/10 06:42,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"The type converter loading is not threadsafe and fails sometimes. That will end up with around 17 type converters loaded only which will probably let your camel routes fail with conversion errors like:

{noformat}
07:04:31,112 | ERROR | qtp25205731-2783 | DefaultErrorHandler | rg.apache.camel.processor.Logger 248 | 68 - org.apache.camel.camel-core - 2.4.0.fuse-00-00 | Failed delivery for exchangeId: 53e23457-5551-4487-9fc4-87dd33687f0b. Exhausted after delivery attempt: 1 caught: java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:116)[:1.6.0_17]
at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:98)[:1.6.0_17]
at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:180)[:1.6.0_17]
at org.apache.camel.builder.xml.XPathBuilder.doInEvaluateAs(XPathBuilder.java:598)[68:org.apache.camel.camel-core:2.4.0.fuse-00-00]
at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:570)[68:org.apache.camel.camel-core:2.4.0.fuse-00-00]
at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:122)[68:org.apache.camel.camel-core:2.4.0.fuse-00-00]
{noformat}

Tracking the issue down showed that several type converter loaders share the same registry object and fail to load all converters every once a while. That can be fixed by making the load method synchronized...see attached patch.
",SMX 4,,,,,,,,,,,,,,,,,25/Oct/10 19:47;lhein;patch.diff;https://issues.apache.org/jira/secure/attachment/12463389/patch.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-26 06:42:29.19,,,no_permission,,,,,,,,,,,,,,76299,,,Mon May 23 01:30:50 UTC 2011,,,Patch Available,,,,0|i01tr3:,8589,,,,,,,,,25/Oct/10 19:47;lhein;attached patch,"26/Oct/10 06:42;davsclaus;trunk: 1027380.

Thanks Lars for the patch.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,"22/May/11 17:03;fracca;Managed to reproduce this issue with Camel 2.7.0

A simple HTTP request followed by an XPath expression in a bean.


public class PricesParser {

    public static void main(String args[]) throws Exception {
        // create CamelContext
        CamelContext context = new DefaultCamelContext();

        // add our route to the CamelContext
        context.addRoutes(new RouteBuilder() {
            public void configure() {

        from(""http://url"").bean(new MyBean()).to(""file:target/prices"");

        // start the route and let it do its work
        context.start();
        Thread.sleep(3000);

        // stop the CamelContext
        context.stop();
}

public static class MyBean {
	public String parse(@XPath(""//div[@id='prices']"") String prices)  {
		return prices;
	}
}

However, all converters seem to have loaded:

.........


[                          main] AnnotationTypeConverterLoader  INFO  Found 4 packages with 15 @Converter classes to load
[                          main] DefaultTypeConverter           INFO  Loaded 157 type converters in 0.515 seconds

main] DefaultCamelContext            INFO  Route: route1 started and consuming from: Endpoint[http://url]
[                          main] DefaultCamelContext            INFO  Total 1 routes, of which 1 is started.
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext: camel-1) started in 1.914 seconds
[url] route1                         INFO  before
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext:camel-1) is shutting down
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[                          main] DefaultExecutorServiceStrategy DEBUG Created new single thread pool for source: org.apache.camel.impl.DefaultShutdownStrategy@64c5e2cf with name: ShutdownTask. -> java.util.concurrent.Executors$FinalizableDelegatedExecutorService@95d0a50
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG There are 1 routes to shutdown
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG Suspend complete for: Consumer[http://url]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 suspended and shutdown deferred, was consuming from: Endpoint[http://url]


Unit tests that don't read from that http url seem to work fine.

Should i open a new jira for this?","23/May/11 01:30;njiang;@Fernando
Did you send the request to the http://uri ?
I don't find any stack trace in the log file that you showed us.",,,,,,,,,,,,,,,,,,,,,,,,,
Multicast with pipeline may cause wrong aggregated exchange,CAMEL-3276,12487590,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/10 15:05,24/Apr/11 09:57,14/Mar/19 02:43,26/Oct/10 06:35,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,"This is a problem when using 2 set of nested pipeline and doing a transform as the first processor in that pipeline
{code}
                from(""direct:start"").multicast(new SumAggregateBean())
                    .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to(""log:foo"").end()
                    .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to(""log:bar"").end()
                .end()
                .to(""mock:result"");
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76300,,,Sun Apr 24 09:57:40 UTC 2011,,,,,,,0|i01tqv:,8588,,,,,,,,,26/Oct/10 06:35;davsclaus;trunk: 1027378.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
packageScan does not work with camel-blueprint,CAMEL-3271,12487615,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gnt,cathodion,cathodion,24/Oct/10 08:02,24/Apr/11 09:57,14/Mar/19 02:43,06/Dec/10 20:29,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,"Using the following xml code does not activate the Java Camel routes that can be found in the given package;

<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
		<packageScan>
			<package>eu.schuring.camel.blueprint.route</package>
		</packageScan>
	</camelContext>
</blueprint>

Attached is a usecase that should output messages from both a native blueprint DSL route and a Java DSL route activated by the xml section above. I've attached both the bundle and a source jar.",Fuse servicemix 4.3,,,,,,,,,,,,,,,,,24/Oct/10 08:03;cathodion;camel-blueprint-0.0.1-SNAPSHOT-sources.jar;https://issues.apache.org/jira/secure/attachment/12463363/camel-blueprint-0.0.1-SNAPSHOT-sources.jar,24/Oct/10 08:03;cathodion;camel-blueprint-0.0.1-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463388/camel-blueprint-0.0.1-SNAPSHOT.jar,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-10-24 08:09:32.2,,,no_permission,,,,,,,,,,,,,,76301,,,Sun Apr 24 09:57:56 UTC 2011,,,,,,,0|i01tpr:,8583,,,,,,,,,"24/Oct/10 08:09;davsclaus;Can you try using <package> instead of <packageScan>. 

<package> was the old way before we introduced <packageScan> which has the filters.
","24/Oct/10 10:42;cathodion;I've tried using just <package> without being nested in <packageScan>, but the result is the same: The route is not activated, but blueprint doesn't complain about the given XML either. So I have no idea what exactly is wrong.

@Claus: Do you know of any working example that uses either <package> or <packageScan> in blueprint?","24/Oct/10 11:56;davsclaus;No I dont know of any examples. Blueprint is still in the works in a few spots, so some features may be not working / missing.","28/Oct/10 00:01;joed;Dug around in the code some yesterday, some TLC is needed.
It should be quite easy to map to what the camel-spring stuff does as well as just inspecting the blueprint container.
","06/Dec/10 20:29;gnt;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
	A	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/PackageScanRouteBuilderFinder.java
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/OSGiBlueprintTestSupport.java
	A	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/TestRouteBuilder.java
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-4.xml
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-5.xml
Committed r1042780
",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
"CXF CamelTransport and ""Can't find input stream in message""",CAMEL-3269,12487643,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,jeremie.brebec,jeremie.brebec,23/Oct/10 16:18,24/Apr/11 09:57,14/Mar/19 02:43,01/Nov/10 05:58,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,"When using a JaxWS proxy with camel transport, to a route with only one processor, CXF fail with the message ""Can't find input stream in message"".

CamelConduit call CxfMessageHelper.getCxfInMessage which is looking for an Out part in the exchange. If the processor of the route doesn't use the Out message, or doesn't copy the in part to the out part (like the Pipeline processor), the call to the JaxWS proxy fail with ""Can't find input stream in message""",,,,,,,,,,,,,,,,,,23/Oct/10 16:20;jeremie.brebec;camel-cxf.patch;https://issues.apache.org/jira/secure/attachment/12463364/camel-cxf.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-01 05:58:10.237,,,no_permission,,,,,,,,,,,,,,76302,,,Sun Apr 24 09:57:51 UTC 2011,,,,,,,0|i01tpb:,8581,,,,,,,,,23/Oct/10 16:20;jeremie.brebec;A simple patch with a JUnit testcase for this issue,01/Nov/10 05:58;njiang;Applied the patch in reversion 1029558 with thanks to Jeremie.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dead links to JavaDocs items,CAMEL-3259,12487519,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,hasalex,hasalex,20/Oct/10 13:42,24/Apr/11 09:57,14/Mar/19 02:43,20/Oct/10 14:17,,,,,,,,,,,,,2.5.0,,,,website,,,,0,,,,,,"On the http://camel.apache.org/component.html, the link to the CamelContext class JavaDoc point to the old http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html URL, which is a dead link. There some additional dead links to other JavaDoc items.

Same issue on the following pages :
  http://camel.apache.org/camelcontext.html
  http://camel.apache.org/error-handler.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-10-20 14:17:34.783,,,no_permission,,,,,,,,,,,,,,76303,,,Sun Apr 24 09:57:39 UTC 2011,,,,,,,0|i01tn3:,8571,,,,,,,,,"20/Oct/10 14:17;davsclaus;Thanks for reporting.

If you find additional then fell free to comment or create a new ticket.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE log of the ConsumerTemplate,CAMEL-3252,12487526,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,19/Oct/10 10:56,24/Apr/11 09:58,14/Mar/19 02:43,20/Oct/10 05:34,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"When I try to run the CamelInAction code with Camel 2.5.0, I found this warning message.
{code}

[                          main] DefaultConsumerTemplate        WARN  Exception occurred during done UnitOfWork for Exchange: null. This exception will be ignored.
java.lang.NullPointerException
	at org.apache.camel.impl.DefaultConsumerTemplate.doneUoW(DefaultConsumerTemplate.java:229)[camel-core-2.5.0.jar:2.5.0]
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:168)[camel-core-2.5.0.jar:2.5.0]
	at camelinaction.OrderCollectorBean.getOrders(OrderCollectorBean.java:17)[file:/Users/jiangning/work/camel/camelinaction/appendixC/consumer/target/classes/:]
	at camelinaction.ConsumerTemplateTest.testConsumerTemplate(ConsumerTemplateTest.java:46)[file:/Users/jiangning/work/camel/camelinaction/appendixC/consumer/target/test-classes/:]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_20]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_20]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_20]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_20]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)[junit-4.8.1.jar:]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)[junit-4.8.1.jar:]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)[junit-4.8.1.jar:]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)[junit-4.8.1.jar:]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)[junit-4.8.1.jar:]
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)[surefire-api-2.5.jar:2.5]
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)[surefire-api-2.5.jar:2.5]
	at org.apache.maven.surefire.Surefire.run(Surefire.java:180)[surefire-api-2.5.jar:2.5]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_20]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_20]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_20]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_20]
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)[surefire-booter-2.5.jar:2.5]
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)[surefire-booter-2.5.jar:2.5]

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:58:28.123,,,no_permission,,,,,,,,,,,,,,76304,,,Sun Apr 24 09:58:28 UTC 2011,,,,,,,0|i01tlj:,8564,,,,,,,,,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HawtDB file grows indefinitely over time,CAMEL-3249,12487431,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,gim,gim,18/Oct/10 23:19,24/Apr/11 09:57,14/Mar/19 02:43,21/Oct/10 17:52,2.3.0,2.4.0,2.5.0,,,,,,,,,,2.5.0,,,,camel-hawtdb,,,,0,,,,,,"When using an aggregator with the HawtDB persistent store, the file grows indefinitely until it fills the volume on which it's stored. This prevents the persistence from being used in any kind of long-running production deployment.",Using 2.5-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-10-19 17:48:57.111,,,no_permission,,,,,,,,,,,,,,76305,,,Sun Apr 24 09:57:18 UTC 2011,,,,,,,0|i01tkv:,8561,,,,,,,,,"19/Oct/10 17:48;davsclaus;Can you post how you have setup this?

","19/Oct/10 21:37;gim;Here's how I've used the aggregator:

{code}
from(""activemq:source"")
  .aggregate(header(""some-id""), new MyAggregationStrategy())
  .aggregationRepository(new HawtDBAggregationRepository(""repo"", ""hawtdbfile""))
  .to(""activemq:destination"");
{code}

I've replicated the behaviour with only HawtDB. By opening a new HawtDB file, and only putting in data of a fixed size into the identical key, the file size grows indefinitely, depending on the size of the data. In the following code, the breakpoint appears to be at 489 characters of data. The file size remains constant with 488 character string, but grows indefinitely with a 489-character string. I think this probably has something to do with how the size of the data relates to the page size (set on TxPageFileFactory).

{code}
public class App {
  public static void main (String[] args) {
    String filename = args[0];
    int dataSize = Integer.parseInt(args[1]);

    BTreeIndexFactory<String, String> indexFact =
        new BTreeIndexFactory<String, String>();
    indexFact.setKeyCodec(StringCodec.INSTANCE);
    indexFact.setValueCodec(StringCodec.INSTANCE);
    indexFact.setDeferredEncoding(true);

    TxPageFileFactory pageFact = new TxPageFileFactory();
    pageFact.setFile(new File(filename));
    pageFact.setPageSize((short)512);
    pageFact.setMappingSegementSize(8 * 1024 * 1024);
    pageFact.setSync(true);
    pageFact.open();
    TxPageFile pageFile = pageFact.getTxPageFile();

    Transaction tx = pageFile.tx();
    if (!tx.allocator().isAllocated(0)) {
        SortedIndex<String, String> created = indexFact.create(tx);
    }
    tx.commit();
    pageFile.flush();

    String data = """";
    for (int i = 0; i < dataSize; i++) {
      data += ""0"";
    }

    try {
      while (true) {
        tx = pageFile.tx();
        SortedIndex<String, String> index = indexFact.open(tx);

        index.put(""foo"", data);

        tx.commit();
        pageFile.flush();
      }
    } finally {
      pageFact.close();
    }
  }
}
{code}","20/Oct/10 05:31;davsclaus;Ah your problem is that you do not have any completion conditions. So data is never gone be sent out of the aggregator, and hence why the hawtdb file keeps growing.

You need to add 1 .. n completion conditions. See more at
http://camel.apache.org/aggregator2

For example a completionTimeout or completionSize etc.

Also Camel in Action chapter 8 covers the aggregator pattern and how to use it with HawtDB","20/Oct/10 18:28;gim;Sorry, in sanitizing the code, I did leave the completion condition out, but be assured that I do have one. As I detailed in the remainder of my comment, the problem is reproducible with only HawtDB code, and appears to not be dependent on the aggregator component.","20/Oct/10 19:27;davsclaus;Please leave all details its important.

What version of HawtDB are you using?

What JDK are you using?
",20/Oct/10 23:40;gim;We're using HawtDB 1.4 and JDK 1.6. (I don't have the exact version number as I don't have access to the machine I was using for testing right now.),"21/Oct/10 07:37;davsclaus;Hiram can you take a look.

It looks like HawtDB doesn't register the old data as free.

I have created an unit test in camel-hawtdb
org.apache.camel.component.hawtdb.HawtDBGrowIssueTest

",21/Oct/10 15:13;davsclaus;Hiram is working on a fix so we should try to get it fixed in Camel 2.5. eg a new release of hawtDB that camel-hawtdb uses.,21/Oct/10 15:20;chirino;Thanks for the test case.  I found an allocation leak in HawtDB.  I've got it fixed in the latest snapshot now and am working on spinning a new release so you guys can pick the fix up.,21/Oct/10 16:32;davsclaus;Also remember to update the release notes and camel-hawtdb that v1.5 is required due the bug in older releases,"21/Oct/10 17:52;davsclaus;trunk: 1026081.

Gleen HawtDB 1.5 has been released which has the fix. So you should be able to upgrade and use that version.
Thanks for reporting.

Its already in central maven repo","23/Oct/10 16:18;gim;Thanks for your work on this. I'm currently out if the office for a while, but I'm excited to try it out once I'm back. ",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,
camel-exec not present in the feature,CAMEL-3248,12487953,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jb@nanthrax.net,jb@nanthrax.net,18/Oct/10 12:18,24/Apr/11 09:57,14/Mar/19 02:43,21/Oct/10 18:11,,,,,,,,,,,,,2.5.0,,,,,,,,1,,,,,,"camel-exec component is not present in the feature descriptor.

I'm gonna submit a patch for that component.",,,,,,,,,,,,,,,,,,21/Oct/10 12:50;jb@nanthrax.net;CAMEL-3248.patch;https://issues.apache.org/jira/secure/attachment/12463433/CAMEL-3248.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-19 04:40:41.2,,,no_permission,,,,,,,,,,,,,,76306,,,Sun Apr 24 09:57:59 UTC 2011,,,,,,,0|i01tkn:,8560,,,,,,,,,"19/Oct/10 04:40;davsclaus;Thanks for the patch. There is however a features-spring2.xml file as well for end users using Spring 2.5.6 with OSGi.

BTW: We actually need a better way than having 2 separate files. Would be better if the spring2.xml file was auto generated.","19/Oct/10 04:41;davsclaus;And you can add an unit test in tests/camel-itest-karaf
It just tests that the feature can be deployed on karaf.",19/Oct/10 06:28;splatch;The generation of the second features.xml may be done by XSLT. What do you think?,"19/Oct/10 07:24;jb@nanthrax.net;Thanks a lot Claus for your comment.

I will submit a new patch including both feature updated and itests.","19/Oct/10 09:04;njiang;@Lukasz,
There is a component which is not support by spring 2.2.x.
camel-spring-javaconfig , please filtered it when you are using the XSLT to do the job.","21/Oct/10 07:41;davsclaus;Jean maybe you can attach the patch with the features.xml features-spring2.xml so we can get that into the kit.

Hadrian may very well start creating a new 2.5 RC so better get this fixed. Then we can add the unit tests later.","21/Oct/10 07:45;jb@nanthrax.net;I already have the patch with both features updated.

Anyway, I begun to add camel-itests, camel-itests-karaf and camel-itests-osgi test case.

I speed up the unit test completion and provide the patch.",21/Oct/10 12:50;jb@nanthrax.net;This new patch provides both features descriptor updated and itests.,"21/Oct/10 18:11;davsclaus;trunk: 1026089.

Thanks for the patch.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,
XmppEndPoint - setting login to false when creating an account results in no action,CAMEL-3237,12487884,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mdhomem,mdhomem,15/Oct/10 16:01,24/Apr/11 09:57,14/Mar/19 02:43,11/Nov/10 11:58,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-xmpp,,,,0,,,,,,"{code}
XmppEndPoint myXmppEndPoint = new XmppEndPoint();
(...)
myXmppEndPoint.setCreateAccount(true);
myXmppEndPoint .setLogin(false);
(...)
{code}

This will result in ""no action"" in xmpp server, if setLogin true the account is created and the user stays online.

I believe it's because of the logic used in createConnection() method of XmppEndPoint that could be changed to:
{code}
if (!connection.isAuthenticated()) {
            if (user != null) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Logging in to XMPP as user: "" + user + "" on connection: "" + getConnectionMessage(connection));
                }
                if (password == null) {
                    LOG.warn(""No password configured for user: "" + user + "" on connection: "" + getConnectionMessage(connection));
                }

                if (createAccount) {
                    AccountManager accountManager = new AccountManager(connection);
                    accountManager.createAccount(user, password);
                }
                if(login){
                	if (resource != null) {
                		connection.login(user, password, resource);
                	} else {
                		connection.login(user, password);
                	}
                }
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Logging in anonymously to XMPP on connection: ""  + getConnectionMessage(connection));
                }
                connection.loginAnonymously();
            }
{code}

",,,,900,900,,0%,900,900,,,,,,,,,17/Oct/10 20:06;jb@nanthrax.net;CAMEL-3237.patch;https://issues.apache.org/jira/secure/attachment/12463431/CAMEL-3237.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-16 13:28:25.41,,,no_permission,,,,,,,,,,,,,,76307,,,Sun Apr 24 09:57:59 UTC 2011,,,,,,,0|i01ti7:,8549,,,,,,,,,16/Oct/10 13:28;davsclaus;What is it you suggest to be changed in the code?,16/Oct/10 13:28;davsclaus;Added code snippet to easier read the code,"17/Oct/10 20:05;jb@nanthrax.net;I reproduce the issue.

createAccount shouldn't be affected by the login attribute.

I submit a patch in that way.","18/Oct/10 14:33;mdhomem;Hi,

Ok Jean the patch resolves the issue.

Claus thanks for the tip about ""code snippet"".","11/Nov/10 11:58;davsclaus;trunk: 1033904.

Thanks for the patch.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
-Psetup.eclipse with Java6 doesn't use proper dependencies or JRE level,CAMEL-3234,12487507,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,14/Oct/10 18:31,24/Apr/11 09:57,14/Mar/19 02:43,15/Oct/10 02:21,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"
If you use -Psetup.eclipse or eclipse:eclipse to setup the projects, it sets the execution environment to J2SE-1.5.  HOWEVER, if using Java6, it doesn't include many of the dependencies that are required for Java 5, like JAXB and activation and such.

I'm attaching a patch that, when you use -Psetup.eclipse, changes the compiler plugin to 1.6 when using 1.6 ONLY for that profile.   This, in effect, sets the execution environment to workspace default (which will likely be 1.6 if using 1.6) and thus things build.   The projects then import correctly and build.

FYI: this was taken from CXF's build system.  :-)",,,,,,,,,,,,,,,,,,14/Oct/10 18:31;dkulp;camel-eclipse.patch;https://issues.apache.org/jira/secure/attachment/12463335/camel-eclipse.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-15 02:21:39.047,,,no_permission,,,,,,,,,,,,,,76308,,,Sun Apr 24 09:57:23 UTC 2011,,,Patch Available,,,,0|i01thr:,8547,,,,,,,,,15/Oct/10 02:21;hadrian;Patch applied at rev: 1022811. Thanks again Dan.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eclipse setup targets generate invalid projects,CAMEL-3233,12487502,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,14/Oct/10 17:17,24/Apr/11 09:57,14/Mar/19 02:43,14/Oct/10 18:49,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"
The eclipse setups in the poms generates invalid  projects for camel-blueprint and camel-spring due to refering to source directories outside of the basedir.    ",,,,,,,,,,,,CAMEL-3234,,,,,,14/Oct/10 17:18;dkulp;patch.txt;https://issues.apache.org/jira/secure/attachment/12463334/patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-14 18:26:50.218,,,no_permission,,,,,,,,,,,,,,76309,,,Sun Apr 24 09:57:04 UTC 2011,,,Patch Available,,,,0|i01thj:,8546,,,,,,,,,"14/Oct/10 17:18;dkulp;
Use antrun to add the extra sources into the sources jar.","14/Oct/10 18:26;hadrian;Patch working with java5 and committed at rev: 1022639. Testing with java6 now.
Dan, thanks for the contribution!",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX MBeans not registered for initiators,CAMEL-3231,12487500,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bglattfelder,bglattfelder,13/Oct/10 14:34,24/Apr/11 09:57,14/Mar/19 02:43,14/Oct/10 19:39,2.5.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"registering the Initiator before it has been started will not register the sessions mbeans with JMX. So the acceptors are ther, but no initiators.",all,,,1800,1800,,0%,1800,1800,,,,,,,,,13/Oct/10 14:36;bglattfelder;QuickfixjEngine.java;https://issues.apache.org/jira/secure/attachment/12463383/QuickfixjEngine.java,13/Oct/10 15:36;bglattfelder;QuickfixjEngineTest.java;https://issues.apache.org/jira/secure/attachment/12463384/QuickfixjEngineTest.java,13/Oct/10 17:44;hadrian;camel-3231.txt;https://issues.apache.org/jira/secure/attachment/12463362/camel-3231.txt,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2010-10-13 17:44:57.309,,,no_permission,,,,,,,,,,,,,,76310,,,Sun Apr 24 09:57:51 UTC 2011,,,Patch Available,,,,0|i01tgv:,8543,,,,,,,,,13/Oct/10 14:36;bglattfelder;Moved the JMX registration to the start() method,13/Oct/10 15:36;bglattfelder;... and the updated unit test,"13/Oct/10 17:44;hadrian;Hi Beat,

It is easier to review if you attach just the patch, not the whole file. I edited the files manually and created the patch that reflects your changes (`svn diff > patch.txt` if you use svn).

However I get 2 QFJ mbean not registered errors this patch seems to introduce and I'll have to look into before applying it (unless you beat me to it).

Many thanks for the patch!","14/Oct/10 09:17;bglattfelder;Where do you get the errors, in the unit tests?","14/Oct/10 12:02;hadrian;Yes, 2 of the tests in QuickfixjEngineTest.","14/Oct/10 12:25;bglattfelder;I have patched both ""enableJmx.."" test methods and they both passed","14/Oct/10 19:39;davsclaus;trunk: 1022678.

Thanks Beat for the patch.

Tested it with both JDK 1.5 and 1.6.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,
GenericFileProducer.writeFile method creates instance of un-used InputStream,CAMEL-3223,12487504,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,unmarshall,unmarshall,12/Oct/10 14:41,24/Apr/11 09:57,14/Mar/19 02:43,14/Oct/10 20:09,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,1,,,,,,"org.apache.camel.component.file.GenericFileProducer
Method: writeFile

This method has the following statement:
InputStream payload = exchange.getIn().getBody(InputStream.class);

This internally results in calling a TypeConverter to convert an object into InputStream type. However this InputStream has not been used and is eventually closed in the finally block. 

In the same method calling method storeFile on FileOperations (boolean success = operations.storeFile(fileName, exchange);) also opens an InputStream on the same message.","Not significant, can be reproduced agnostic of any environment",,,,,,,,,,,,,,,,,12/Oct/10 16:53;mukundha_g;patch.txt;https://issues.apache.org/jira/secure/attachment/12463346/patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-12 16:53:13.894,,,no_permission,,,,,,,,,,,,,,76311,,,Sun Apr 24 09:57:42 UTC 2011,,,,,,,0|i01tf3:,8535,,,,,,,,,"12/Oct/10 16:53;mukundha_g;Fix for Issue CAMEL-3223: GenericFileProducer.writeFile method creates instance of un-used InputStream
* src\main\java\org\apache\camel\component\file\GenericFileProducer.java
   writeFile(): Removed the InputStream variable initialization

Patch by: Mukundha Madhavan","13/Oct/10 07:38;njiang;@Claus, 
I'm not sure what's the payload InputStream for, it looks like useless, Can you confirm it?","14/Oct/10 19:42;davsclaus;Yeah its an oversight we didnt remove during the big file/ftp refactoring.
We should remove it.

I am running tests now with it removed.",14/Oct/10 20:09;davsclaus;trunk: 1022687.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
Threads - Should allow using 0 in core pool size,CAMEL-3220,12487478,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Oct/10 06:43,24/Apr/11 09:58,14/Mar/19 02:43,12/Oct/10 07:14,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/ThreadPoolExecutor-configuration-tp3207845p3207845.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76312,,,Sun Apr 24 09:58:09 UTC 2011,,,,,,,0|i01tef:,8532,,,,,,,,,12/Oct/10 07:14;davsclaus;trunk: 1021642.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy should not trim separate in case end users use tab separators or the likes,CAMEL-3219,12487487,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Oct/10 05:23,24/Apr/11 09:57,14/Mar/19 02:43,12/Oct/10 05:54,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-bindy,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Big-problem-with-csv-tab-separator-file-and-bindy-data-format-tp3207520p3207520.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76313,,,Sun Apr 24 09:57:40 UTC 2011,,,,,,,0|i01te7:,8531,,,,,,,,,12/Oct/10 05:54;davsclaus;trunk: 1021635.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScheduledPollConsumer should avoid runnable thread to die to ensure its kept being scheduled,CAMEL-3216,12487475,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Oct/10 15:25,24/Apr/11 09:57,14/Mar/19 02:43,11/Oct/10 15:57,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"scheduled consumers such as file / ftp uses ScheduledPollConsumer to poll. If a throwable is thrown then the thread may die due it throws that to the JDK.
We should avoid this and ensure to catch all exceptions, otherwise the thread may die, and the JDK will not re-schedule a new thread.

This cause it to stop polling.

See
http://fusesource.com/forums/thread.jspa?threadID=2320&tstart=0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76314,,,Sun Apr 24 09:57:57 UTC 2011,,,,,,,0|i01tdj:,8528,,,,,,,,,11/Oct/10 15:57;davsclaus;trunk: 1021396.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Quartz routes are not started if quartz component is referenced after context was started,CAMEL-3203,12487457,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,anydoby,anydoby,06/Oct/10 14:48,24/Apr/11 09:57,14/Mar/19 02:43,07/Oct/10 15:17,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,"Quartz routes are not active if added after camel context was already started.

Here is an elaborate description of the problem and a sample project that reproduces it: http://anydoby.com/jblog/en/java/1955
Sorry, no patch this time because I may not know enough about the internals of QuartzComponent, hesitate to offer anything but a boolean flag somewhere.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-10-06 15:07:58.64,,,no_permission,,,,,,,,,,,,,,76315,,,Sun Apr 24 09:57:35 UTC 2011,,,,,,,0|i01tan:,8515,,,,,,,,,06/Oct/10 15:07;davsclaus;Settings as minor as there is a workaround,"07/Oct/10 15:17;davsclaus;trunk: 1005489.

Thanks for reporting and having a sample application to demonstrate the issue.","08/Oct/10 08:23;anydoby;Thank you Claus, no problem. I have another issue on Quartz coming. I will describe it in the next ticket.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
The CxfConsumer's getContinuation method might throw NPE,CAMEL-3201,12487450,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,alitokmen,alitokmen,06/Oct/10 12:59,24/Apr/11 09:57,14/Mar/19 02:43,07/Oct/10 06:07,2.5.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,"Hello

When trying the latest CAMEL 2.5.0 SNAPSHOT, I got a NPE:

{noformat}
java.lang.NullPointerException
       at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:129)
       at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:65)
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
       at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
...
{noformat}",,,,,,,,,,,,,,,,,,06/Oct/10 13:19;alitokmen;CAMEL-3201.patch;https://issues.apache.org/jira/secure/attachment/12463344/CAMEL-3201.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-06 13:12:21.499,,,no_permission,,,,,,,,,,,,,,76316,,,Sun Apr 24 09:57:11 UTC 2011,,,Patch Available,,,,0|i01ta7:,8513,Regression,,,,,,,,06/Oct/10 13:01;alitokmen;Attaching patch,"06/Oct/10 13:12;hadrian;Thanks for reporting this and for the patch. If provider is null, what happens?
Did you intend something like below?
{code}
return provider == null ? null : provider.getContinuation();
{code}
","06/Oct/10 13:18;alitokmen;Hello

Yes, indeed I had meant your version :)

The return being null is already checked by the caller, here is a snippet:

{noformat}
                Continuation continuation = getContinuation(cxfExchange);
                if (continuation != null && !endpoint.isSynchronous()) {
                    return asyncInvoke(cxfExchange, continuation);
                } else {
                    return syncInvoke(cxfExchange);
                }
{noformat}","06/Oct/10 13:39;hadrian;Thanks Savas, I'll apply the patch, you still get the credit :).",06/Oct/10 15:08;davsclaus;Hadrian get in touch with willem as he knows this CXF continuation stuff and have worked on this.,"07/Oct/10 05:27;njiang;@Hadrian

I'm OK with the patch, please apply it.","07/Oct/10 05:29;njiang;If you are using cxf-rt-http-jetty-transport or cxf-rt-jms-transport, there is always a ContinuationProvider, but if you are using other transport, you will get the NPE.
",07/Oct/10 06:07;hadrian;Patch applied with thanks to Savas (rev: 1005334). Keep them coming.,"07/Oct/10 07:18;alitokmen;Excellent :)

Indeed, I'm using the HTTP transport without Jetty, hence the NPE as Willem explained

Cheers",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,
"Allow : and , inside quoted names for addresses",CAMEL-3199,12487449,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tjsnell,tjsnell,tjsnell,05/Oct/10 15:57,24/Apr/11 09:58,14/Mar/19 02:43,06/Oct/10 03:55,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-mail,,,,1,,,,,,"""Snell, Tracy"" <tjs@juicelabs.com> breaks with the current address parsing.",,,,,,,,,,,,,,,,,,06/Oct/10 02:45;tjsnell;camel-mail-patch.txt;https://issues.apache.org/jira/secure/attachment/12463331/camel-mail-patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-06 00:39:53.504,,,no_permission,,,,,,,,,,,,,,76317,,,Sun Apr 24 09:58:23 UTC 2011,,,Patch Available,,,,0|i01t9r:,8511,,,,,,,,,"06/Oct/10 00:39;karthz;In MailBinding.java, in the method appendRecipientToMimeMessage(), 

{code} 
replace this line

        String[] lines = recipient.split(""[,;]"");

with 

        String[] lines = recipient.split(""[,;](?=([^\""]*\""[^\""]*\"")*[^\""]*$)"");
{code} 


The regex just does a lookahead to see if every quote has its matching quote till the end.","06/Oct/10 01:05;tjsnell;Heh, that's exactly what I did. Added it to the test, now just testing with an example to do a final confirmation.

Actually this is the regex I used:

{code}
  String[] lines = recipient.split(""[,;]++(?=(?:(?:[^\\\""]*+\\\""){2})*+[^\\\""]*+$)"");
{code}",06/Oct/10 02:45;tjsnell;Here's the new regex and a modified test for coverage.,06/Oct/10 02:56;hadrian;I assume the pom.xml change is unintentional.,06/Oct/10 03:06;tjsnell;Fat fingers in my IDE :) Blitz that change.,"06/Oct/10 03:55;hadrian;Patch applied (r1004889) with thanks to Tracy Snell. Nice contribution, keep them coming.
",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,
 DefaultCamelContext throws NPE in getRoute(String id),CAMEL-3198,12487448,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,stefan_b,stefan_b,05/Oct/10 15:29,24/Apr/11 09:57,14/Mar/19 02:43,07/Oct/10 06:02,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,," DefaultCamelContext throws NPE in getRoute(String id) if no routes are deployed.
This happens because the ""route LinkedHashSet"" is not initialized.

Fix:
 don't do Lazy init of route  or add this to getRoute(String id):
 if (routes == null) {
	routes = new LinkedHashSet<Route>();
 } 


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-10-06 04:02:52.613,,,no_permission,,,,,,,,,,,,,,76318,,,Sun Apr 24 09:57:05 UTC 2011,,,Patch Available,,,,0|i01t9j:,8510,,,,,,,,,"06/Oct/10 04:02;hadrian;Stefan, thanks for reporting this and for the proposed fix! The change below does it (similar to your suggestion), but I have to fix a test before I commit it.

{code}
     public Route getRoute(String id) {
-        for (Route route : routes) {
+        for (Route route : getRoutes()) {
             if (route.getId().equals(id)) {
                 return route;
             }

{code}",07/Oct/10 06:02;hadrian;Fix applied. Thanks Stefan for reporting and proposed fix.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
request/reply over JMS using temporary queues - if connection lost the temporary queue is not re-created which causes the producer to not work anymore,CAMEL-3193,12487430,12487853,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,04/Oct/10 06:24,05/Oct/10 12:55,14/Mar/19 02:43,05/Oct/10 12:54,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jms,,,,0,,,,,,"To recreate the problem you need a route with a jms inout endpoint that is configured to use a temporary destination for replies. Till now I was only able to show the problem with tibco ems.

- Start broker
- Start the jms consumer that replies to the request
- Start the route 
- Send a request/reoply exchange (should work)
- Stop the broker
- Wait long enough for the client to do a full reconnect (I used connectionFactory.setReconnAttemptCount(1) on the client so I do not have to wait so long)
- Start the broker -> The jms component will do a full new connect
- Send a request/reoply exchange -> Now a InvalidDestination Exception happens

The client route will not work anymore until a restart as it creates the temporary destination only once and it is invalid now.

",,,,,,,,,,,,,,,,,,04/Oct/10 10:01;davsclaus;CAMEL-3193.patch;https://issues.apache.org/jira/secure/attachment/12463410/CAMEL-3193.patch,04/Oct/10 06:49;chris@die-schneider.net;ClientTest.java;https://issues.apache.org/jira/secure/attachment/12463408/ClientTest.java,04/Oct/10 06:30;chris@die-schneider.net;patch.txt;https://issues.apache.org/jira/secure/attachment/12463407/patch.txt,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2010-10-04 06:46:43.172,,,no_permission,,,,,,,,,,,,,,76319,,,Tue Oct 05 08:38:06 UTC 2010,,,,,,,0|i01t8f:,8505,,,,,,,,,"04/Oct/10 06:30;chris@die-schneider.net;Adding a patch that contains a unit test for the problem. Unfortunately the test is not yet working unattended. I was only able to recreate the problem in Tibco EMS. As the EMS server is external it has to be stopped / started by hand.

So my first goal is to recreate the problem in ActiveMQ and make the test run fully unattended.

 Any ideas how to achieve this?
","04/Oct/10 06:46;davsclaus;Chrsitian the title of this ticket is misleading. Could you change it.

Its a problem with failover/re-connection on some brokers such as Tibco EMS which doesn't automatic failover temporary queues.
It ought to be the brokers problem to ensure this works out of the box.

What happens when the _other_ side returns back a reply on that _old_ temporary queue? You can't just create a new temporary queue on re-connection/failover.
Hence I think its more a broker problem than the camel-jms component.","04/Oct/10 06:49;chris@die-schneider.net;Adding a small sample client with pure spring jms (without camel) that shows an attempt how we can fix the problem. 
The idea is to use setExceptionListener for the MessageListenerComntainer. It catches the InvalidDestinationException and then 
recreates the temp queue and the Listener. I think we will need something similar in camel.

listener.setExceptionListener(new ExceptionListener() {

            @Override
            public void onException(JMSException exception) {
                exception.printStackTrace();
                if (exception instanceof InvalidDestinationException) {
                    listener.stop();
                    setupListener(connectionFactory, jmsTemplate);
                }
            }

        });

After looking into the code of camel jms I think the right place is in the TemporaryQueueReplyManager. I will attach a patch shortly.","04/Oct/10 06:50;davsclaus;Maybe you can used a fixed reply to queue instead? Just to see if that works for you with re-connection/failover. Then you have a workaround/solution. 
","04/Oct/10 06:57;chris@die-schneider.net;A fixed reply queue will work but has more adminsitrative overhead. I also never have used fixed reply queues with more than one consumer on them but I guess camel will handle this case.

I will try to work out a patch in any case. If we do not get it into the 2.5.0 then I can still create a small branch for EnBW that contains the fix. But I only do these things as soon as a fix is in trunk so I am sure the next release will contain it. 

Thanks for the fast reply. Btw. What is your estimation for the 2.5.0 release date?
","04/Oct/10 07:06;davsclaus;Yeah fixed queues on brokers which may not be able to automatic create the queues on demand often causes admin overhead :)

I can see one issue if a patch will create a new temporary queue, if there was an exception using the old one. 
In that cause I think you could lose messages which are in-flight (eg replies are expected on the old temporary queue)

However it would fix the issue of new messages as they just use the newly created temporary queue and it ought to just work.
But I bet this is better than _nothing_.

I will try to touch base with some AMQ committers and hear their point of view.

We are talking about Camel 2.5 on the dev forum. We are waiting for scalate 1.3 to be released. But with good luck we may be able to start the release this week or start of next.","04/Oct/10 09:28;davsclaus;Had a chat with the AMQ people. Temporary queues is only associated with a jms connection. So when that connection dies the pending messages on the temporary queue as well.

The best option is to use real queues if you want to be absolute sure that a reply message is not lost.

Anyway I think your idea of using an exception listener and then catch the invalid destination and then restart the listener is a good idea.
","04/Oct/10 10:01;davsclaus;Christian it is maybe something like this patch you need to resolve your problem?

Maybe you can take a look at it and try it out on your system.","04/Oct/10 12:40;chris@die-schneider.net;Hi Claus,

I have to wait till I am at home to be able to test the patch. From what I tested in the morning I think you will also need to do ""setReplyTo(null)"" to let camel forget the old destination.

Thanks for the quick help

Christian
","04/Oct/10 12:43;chris@die-schneider.net;Hi Claus,

did the ActiveMQ folks have any idea how to reproduce the problem in ActiveMQ. I tried to shutdown the broker and restart it but the Temporary queue was still valid. So it almost seems the temp queue outlives a connection in ActiveMQ. It would be great to have a automatic test for this problem to test the fix and document the issue in code. 

Thanks 

Christian
","04/Oct/10 13:17;davsclaus;The AMQ people use a SocketProxy when testing various network issues.

For example:
https://fisheye6.atlassian.com/browse/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/transport/SoWriteTimeoutTest.java?r=HEAD","05/Oct/10 07:29;chris@die-schneider.net;I tested your patch yesterday and found we can solve this even much easier. The current code of TemporaryQueueReplyManager uses SimpleMessageListenerContainer. I just needed to switch to the DefaultMessageListenerContainer to achieve the same effect. I noticed this when I merged your patch with mine and tried to recreate the error. The problem did  not occur anymore even when I switched off your exceptionListener. 

So I looked into DefaultMessageListenerContainer and found that they support reconnections. They even do a fresh resolve of the temporary queue so it is recreated automatically. So I propose we simply go this way.

I just committed this change. Feel free to roll back if you see any problem with this aproach for the 2.5.0 release. I also committed the test but disabled it as it does not run unattended.","05/Oct/10 08:38;davsclaus;Ah that is perfect. Why didn't we consider this before, its after all the spring DMLC that is used to consume the reply messages from the temporary queue.

",,,,,,,,,,,,,,,,,
Completed aggregated exchanges are never confirmed in the AggregationRepository,CAMEL-3189,12487838,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gim,gim,01/Oct/10 23:38,24/Apr/11 09:58,14/Mar/19 02:43,02/Oct/10 07:58,2.3.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"Under certain circumstances, the completed exchanges from an aggregator would remain in the AggregationRepository and redeliver after a restart of Camel. These exchanges had already successfully completed their route, so this redelivery is in error.

My guess is that in the AggregationProcessor on line 374, the AggregateOnCompletion gets added to a UnitOfWork that doesn't ever get done() called on it... or something.

I seemed to be able to prevent the problem by changing my AggregationStrategy. The old version looked like this:
{code}
public Exchange aggregate (Exchange oldExchange, Exchange newExchange) {
  String body = """";
  if (oldExchange != null) {
    body = oldExchange.getIn().getBody(String.class);
  }
  body += newExchange.getIn().getBody(String.class);
 newExchange.getIn().setBody(body);
 return newExchange;
}
{code}

You can see that the exchanges are aggregated into the newExchange. I changed it to aggregate into the oldExchange:
{code}
public Exchange aggregate (Exchange oldExchange, Exchange newExchange) {
  String body = """";
  if (oldExchange != null) {
    body = oldExchange.getIn().getBody(String.class);
  } else {
    oldExchange = newExchange;
  }

  body += newExchange.getIn().getBody(String.class);
  oldExchange.getIn().setBody(body);
 return oldExchange;
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-10-02 07:39:35.724,,,no_permission,,,,,,,,,,,,,,76320,,,Sun Apr 24 09:58:11 UTC 2011,,,,,,,0|i01t7j:,8501,,,,,,,,,02/Oct/10 07:39;davsclaus;You could paste details about the route you use as well?,"02/Oct/10 07:58;davsclaus;trunk: 1003751.

It works fine in 2.5. I actually would assume it works fine in 2.4 as well as we improve the aggregator in that version.
You should upgrade to Camel 2.4 and try with that version.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrent consumers on seda endpoint can cause content routing to mismatch,CAMEL-3188,12487844,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bfeaver,bfeaver,01/Oct/10 20:21,24/Apr/11 09:57,14/Mar/19 02:43,02/Oct/10 15:16,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"When consuming concurrently from a seda endpoint, when the route contains a content router based on the header, it will randomly route through the wrong choice.

In my specific case, I was consuming from an activemq queue, which would receive messages with a header that would then determine which route it would follow. It would randomly send messages down the wrong path. When I turned on tracing, it would behave itself. It also behaved itself when I limited it to only a single consumer. I was, however, able to duplicate it with the unit test below. Due to the concurrency issue, the test can occasionally pass, but run it a couple times and it should fail. It'll either receive 2 messages when it should have only gotten 1, or it will get no messages when it should have gotten 1.

{code:title=ConcurrencyTest.java|borderStyle=solid}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.CamelTestSupport;

public class ConcurrencyTest extends CamelTestSupport {

	@EndpointInject(uri = ""mock:result"")
	protected MockEndpoint resultEndpoint;
	
	@EndpointInject(uri = ""mock:otherResult"")
	protected MockEndpoint otherResultEndpoint;

	@Produce(uri = ""seda:start"")
	protected ProducerTemplate template;

	public void testSendMatchingMessage() throws Exception {
		String expectedBody = ""<matched/>"";
		
		resultEndpoint.expectedBodiesReceived(expectedBody);
		otherResultEndpoint.expectedBodiesReceived(expectedBody);

		template.sendBodyAndHeader(expectedBody, ""myDirection"", ""send"");
		template.sendBodyAndHeader(expectedBody, ""myDirection"", ""received"");

		resultEndpoint.assertIsSatisfied();
	}

	@Override
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""seda:start?concurrentConsumers=10"")
//                from(""seda:start?concurrentConsumers=1"")
                	.choice()
                		.when(header(""myDirection"").isEqualTo(""send"")).to(""mock:result"")
                		.when(header(""myDirection"").isEqualTo(""received"")).to(""mock:otherResult"");
            }
        };
    }
}
{code}","Mac OS X 10.6.4
Java(TM) SE Runtime Environment (build 1.6.0_20-b02-279-10M3065)",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-10-02 10:40:16.73,,,no_permission,,,,,,,,,,,,,,76321,,,Sun Apr 24 09:57:06 UTC 2011,,,,,,,0|i01t7b:,8500,,,,,,,,,"02/Oct/10 10:40;davsclaus;The problem actually seems to be the isEqualTo predicate.

The CBR is okay.",02/Oct/10 11:49;davsclaus;CAMEL-2651 is the culprit.,02/Oct/10 15:16;davsclaus;trunk: 1003810.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
PublishEventNotifier - Should not emit events during startup/shutdown and not spawn new events when processing event,CAMEL-3187,12487834,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/10 12:51,24/Apr/11 09:57,14/Mar/19 02:43,01/Oct/10 13:16,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"When an event is being send to an endpoint using PublishEventNotifier it may create new events, and so forth. This causes a flood of events.

Also further complications occur during start/shutdown of Camel when you send events to routes, which are then being graceful shutdown. Therefore this event notifier should *only* publish if camel is fully started and running.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76322,,,Sun Apr 24 09:57:30 UTC 2011,,,,,,,0|i01t73:,8499,,,,,,,,,01/Oct/10 13:16;davsclaus;trunk: 1003527.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@EndpointInject not working in bean created by blueprint,CAMEL-3186,12487543,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,ariekenb,ariekenb,01/Oct/10 12:42,24/Apr/11 09:58,14/Mar/19 02:43,08/Dec/10 13:28,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,"I am attaching a small test project that uses blueprint to create a camel context and a bean named Producer.  This project builds an OSGi bundle that I am deploying in FUSE ESB 4.3.0-fuse-01-00.  The Producer bean has an @EndpointInject annotation on a ProducerTemplate:

	@EndpointInject(ref = ""testEndpoint"")
	private ProducerTemplate testEndpoint;

The Producer bean's init method sets a timer that tries to call testEndpoint.sendBody() once per second.  This throws a null pointer exception because the testEndpoint did not get injected:

07:35:31,826 | WARN  | Producer         | Producer                         | org.aaron.camel.Producer           51 | 118 - org.aaron.camel - 1.0.0.SNAPSHOT | send exception
java.lang.NullPointerException
        at org.aaron.camel.Producer.timerPop(Producer.java:48)[118:org.aaron.camel:1.0.0.SNAPSHOT]
        at org.aaron.camel.Producer.access$000(Producer.java:11)[118:org.aaron.camel:1.0.0.SNAPSHOT]
        at org.aaron.camel.Producer$1.run(Producer.java:29)[118:org.aaron.camel:1.0.0.SNAPSHOT]
        at java.util.TimerThread.mainLoop(Timer.java:512)[:1.6.0_21]
        at java.util.TimerThread.run(Timer.java:462)[:1.6.0_21]

This same test works perfectly if I use Spring DM to create the camel context and Producer bean.
","Ubuntu Linux 10.04, Sun JDK 1.6.0_21",,,,,,,,,,,,,,,,,01/Oct/10 12:42;ariekenb;camel-blueprint-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12463406/camel-blueprint-test.tar.gz,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-01 13:06:50.431,,,no_permission,,,,,,,,,,,,,,76323,,,Sun Apr 24 09:58:15 UTC 2011,,,,,,,0|i01t6v:,8498,,,,,,,,,01/Oct/10 12:42;ariekenb;Test project.,"01/Oct/10 13:06;davsclaus;See
http://fusesource.com/forums/thread.jspa?threadID=2278&tstart=0","03/Oct/10 06:51;davsclaus;Get in touch with gnodet what feature OSGi provides for IoC stuff which you need to hook into. 

You should leverage {{org.apache.camel.impl.CamelPostProcessorHelper}} from camel-core. Just as the spring stuff do in camel-spring.","04/Oct/10 07:02;gnt;This is one of the few limitations of the blueprint stuff right now, but i think it should be fixed.
You need to uncomment line 99 of the blueprint CamelContextFactoryBean:
{code}
@XmlElement(name = ""beanPostProcessor"", type = CamelBeanPostProcessor.class, required = false),
{code}

So you need to create the appropriate CamelBeanPostProcessor class in the blueprint module.
To define a processor using Aries Blueprint, you need to have the class implement the org.apache.aries.blueprint.BeanProcessor interface and make sure the associated ExtendedBeanMetadata#isProcessor() returns true (this flag needs to be set in the namespace handler).

When that's done, you should be able to intercept bean creation / destruction events from the processor and do what's needed.
","21/Oct/10 13:35;njiang;@Guillaume
I didn't find a way to associate my BeanProcessor with the ExtendedBeanMetadata.
Can you show me some code snippet for it ?","21/Oct/10 14:02;gnt;Once you have your processor, you need to register the blueprint metadata.
You can find an example in the decorateManagedProperties method  at http://svn.apache.org/repos/asf/incubator/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
Note the call to metadata.setProcessor(true);","08/Dec/10 13:28;gnt;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	C	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelConsumerTemplateFactoryBean.java => components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintContainerRegistry.java
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelConsumerTemplateFactoryBean.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelEndpointFactoryBean.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelProducerTemplateFactoryBean.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelThreadPoolFactoryBean.java
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/OSGiBlueprintTestSupport.java
	A	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/TestProducer.java
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-10.xml
Committed r1043407
",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,
restlet producer - Should set status code,CAMEL-3185,12487825,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/10 08:24,24/Apr/11 09:57,14/Mar/19 02:43,01/Oct/10 08:35,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-restlet,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Restlet-HTTP-status-and-message-tp3047023p3047023.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76324,,,Sun Apr 24 09:57:11 UTC 2011,,,,,,,0|i01t6n:,8497,,,,,,,,,01/Oct/10 08:35;davsclaus;trunk: 1003431.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Confusing IllegalArgumentException when address attribute isn't specified on CXF endpoint.,CAMEL-3181,12487955,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,adrian.trenaman,adrian.trenaman,30/Sep/10 09:13,24/Apr/11 09:57,14/Mar/19 02:43,30/Sep/10 14:00,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,"If you create CXF endpoint, like this, without the address attribute, 

{code:xml}
	<cxf:cxfEndpoint 
		id=""greeting"" 
		wsdlURL=""greeting.wsdl""
		serviceClass=""tutorial.hanbo.webservice.Greeting""
		>
	</cxf:cxfEndpoint>
{code} 

... then you get a really confusing error when you deploy the endpoint in ServiceMix: the error is 

{code}
Caused by: java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint 
does not implement createEndpointUri() to create a default value
	at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:83)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onEndpointAdd(DefaultManagementLifecycleStrategy.java:205)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:386)
{code} 

We find that if you explicitly set the address then the problem goes away (see below)

{code:xml} 
	<cxf:cxfEndpoint 
		id=""greeting"" 
		wsdlURL=""greeting.wsdl""
		address=""http://localhost:9000/GreeterContext/SOAPMessageService""
		serviceClass=""tutorial.hanbo.webservice.Greeting""
		>
	</cxf:cxfEndpoint>
{code} 

On camel-cxf web page, the 'address' attribute is not mentioned anywhere in the table of URI properties, so you might be lead to believe that it's not necessary. ",all,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-30 09:19:28.094,,,no_permission,,,,,,,,,,,,,,76325,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,0|i01t5r:,8493,,,,,,,,,"30/Sep/10 09:19;njiang;The CXF should pick up the Address information from the WSDL, I will dig the Exception to see how to fix it.",30/Sep/10 09:31;adrian.trenaman;Nice one Willem - much appreciated! ,"30/Sep/10 13:57;njiang;Hi Adrian,

I tried the reproduce the error in the camel trunk and I found this issue had been fixed about 2 month ago by CAMEL-2997.
Please try the latest Camel 2.5-SNAPSHOT to verify it.


","30/Sep/10 14:12;njiang;Just one more note, if the wsdl has multiple service or port, you need to specify the service name and endpoint name like this.
{code}
  <cxf:cxfEndpoint id=""routerEndpoint"" address=""http://localhost:8092/PersonService/""
                   serviceClass=""org.apache.camel.wsdl_first.Person""
                   endpointName=""person:soap""
                   serviceName=""person:PersonService""
                   wsdlURL=""person.wsdl""
                   xmlns:person=""http://camel.apache.org/wsdl-first""/>
{code}

",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Change dir before retrieving file,CAMEL-3174,12487792,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Sep/10 06:38,24/Apr/11 09:57,14/Mar/19 02:43,29/Sep/10 09:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-change-directory-while-using-sftp-component-tp2806817p2806817.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76326,,,Sun Apr 24 09:57:37 UTC 2011,,,,,,,0|i01t47:,8486,,,,,,,,,"29/Sep/10 09:45;davsclaus;Already fixed for FTP.

Fixed this for SFTP as well in trunk: 1002541.","29/Sep/10 19:31;davsclaus;changing dir is now done folder at a time, trunk: 1002821.",03/Oct/10 07:57;davsclaus;improved a bit more: 1003927.,06/Oct/10 08:09;davsclaus;Improved to let it work with absolute paths: 1004923.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Setting password and username using UserInfo on uri does not work,CAMEL-3170,12487692,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Sep/10 11:54,24/Apr/11 09:57,14/Mar/19 02:43,28/Sep/10 12:01,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,"You should be able to set ftp endpoint uri as:
{code}
""ftp://scott@localhost:"" + getPort() + ""/deletefile?password=tiger&binary=false&delete=true""
{code}

And when using password and username in the userinfo part of the uri:
{code}
""ftp://tiger:scott@localhost:"" + getPort() + ""/deletefile?binary=false&delete=true""
{code}

The latter didn't work",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76327,,,Sun Apr 24 09:57:48 UTC 2011,,,,,,,0|i01t3b:,8482,,,,,,,,,28/Sep/10 12:01;davsclaus;trunk: 1002131.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PollingConsumerSupport.start() do not get called,CAMEL-3158,12487650,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,azarov,azarov,25/Sep/10 12:18,24/Apr/11 09:58,14/Mar/19 02:43,26/Sep/10 06:06,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"I have a subclass of PollingConsumerSupport and create it in a subclass of DefaultPollingEndpoint. The problem is that DefaultPollingEndpoint wraps PollingConsumer into DefaultScheduledPollConsumer and the latter does not call PollingConsumerSupport.start:

DefaultScheduledPollConsumer.java:

    @Override
    protected void doStart() throws Exception {
        pollingConsumer = getEndpoint().createPollingConsumer();
        super.doStart();
    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-26 06:06:20.992,,,no_permission,,,,,,,,,,,,,,76328,,,Sun Apr 24 09:58:20 UTC 2011,,,,,,,0|i01t0n:,8470,,,,,,,,,"26/Sep/10 06:06;davsclaus;trunk: 1001365.

Thanks for reporting.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CXF Producer if no type converter is available,CAMEL-3151,12487855,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,siano,siano,23/Sep/10 10:57,24/Apr/11 09:57,14/Mar/19 02:43,03/Oct/10 11:07,,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,"When I am trying to send the content of a file to an CXF endpoint in PAYLOAD format, I get a NullPointerException in line 603 of the CXFEndpoint class (in the current trunk). The offending coding is:
                CxfPayload<?> payload = (CxfPayload<?>)params[0];
                List<Element> elements = payload.getBody();

The params are set in line 282 of the CxfProducer class:
            params = new Object[1];
            // TODO: maybe it should be mandatory body?
            params[0] = exchange.getIn().getBody(CxfPayload.class);

The fix is most probably trivial (change to getMandatoryBody()) and add a throws InvalidPayloadException to the getParams() method of CxfProducer). After this is fixed (the same for the MESSAGE format two lines lower), the example will still not work, but I get a meaningful error message saying that there is no type converter between GenericFile and CxfPayload.

One could argue, that under some circumstances null payloads may be legal (I just don't see any), but in this case the CxfEndpoint class would have to be modified to avoid the NullPointerException. As the coding is a missing converter or a null payload will trigger NullPointerExceptions for CxfEndpoints unconditionally.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-25 11:52:25.068,,,no_permission,,,,,,,,,,,,,,76329,,,Sun Apr 24 09:57:33 UTC 2011,,,,,,,0|i01sz3:,8463,,,,,,,,,"25/Sep/10 11:52;davsclaus;Can you attach a small unit test which demonstrates this?

And what content in the message do you send?","27/Sep/10 10:55;siano;Actually it is an issue in error handling, so I don't really know how to write a unit test for that. 

Maybe it helps explaining what I actually do:
I have a beans.xml that looks like that:

<?xml version=""1.0""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	   xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	   xmlns:camel=""http://camel.apache.org/schema/spring""
	   xmlns:cxf=""http://camel.apache.org/schema/cxf""
	   xmlns:http-conf=""http://cxf.apache.org/transports/http/configuration""
	   xmlns:sample=""http://services.samples/xsd""
	   xsi:schemaLocation=""
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
         http://cxf.apache.org/transports/http/configuration
         http://cxf.apache.org/schemas/configuration/http-conf.xsd
         http://camel.apache.org/schema/cxf
         http://camel.apache.org/schema/cxf/camel-cxf.xsd
         http://camel.apache.org/schema/spring
         http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-http.xml""/>  
     
	<cxf:cxfEndpoint id=""serviceEndpoint""
        		     address=""http://myhost:8080/MockServices/EchoService""
        		     wsdlURL=""EchoService.wsdl""
        		     endpointName=""sample:EchoServicePort"" 
        		     serviceName=""sample:EchoService"">
		<cxf:properties>
			<entry key=""dataFormat"" value=""PAYLOAD"" />
		</cxf:properties>
	</cxf:cxfEndpoint>

	<camel:camelContext>
		<camel:route>
			<camel:from uri=""file://c:/temp/camel/poller"" />
			<!-- The wsdl contains multiple operations, so we select one -->
			<camel:setHeader headerName=""operationName"">
				<camel:constant>buyStocksOperation1K</camel:constant>
			</camel:setHeader>	
			<camel:to uri=""cxf:bean:serviceEndpoint"" />
		</camel:route>
	</camel:camelContext>
</beans>

You can use any wsdl for that (even for a webservice that does not exist, because it will not get called). Then put a xml-file matching the request type of the endpoint into the /temp/camel/poller directory. You will encounter a NullPointerException. After the getBody() statements are replaced by getMandatoryBody() statements, the scenario does still not work, but now you get a (IMO much better) TypeConversionException that indicates the reason for the issue.

Mid-term it might be a good idea to have a TypeConverter for CxfPayload type messages. If that is there, the fix will not show up anymore in this scenario (but maybe in other scenarios where no type converter is available).","03/Oct/10 10:31;davsclaus;So the file contains the XML for the SOAP message? You can use the SOAP data format to transform that file into SOAP.

But yes I wonder if the camel-cxf can have a type converter which can do that as well?","03/Oct/10 11:07;davsclaus;trunk: 1003946.

Now uses mandatory body.","04/Oct/10 07:21;siano;The file contains the XML for the Payload of the SOAP message (without the SOAP Envelope). If the file did contain the whole SOAP message (with envelope and all) this would be MESSAGE data format and that works.

Writing a type converter for camel-cxf is pretty easy. The CXFPayload contains two lists, one for headers, that can remain empty for this use case and one for the body, which is a list of DOM elements, so it's actually pretty easy to have a type converter between NodeList, Document or Element and CXFPayload. This can be glued together with other type converters by a default converter.

I have already done so (about 100 lines of code), however before I can provide the code we need to undergo some outbound open source process, which will take some weeks, sorry for that.

Nevertheless, I think this fix here is useful, even if these type converters where there, because there could still be some StrangeMessageWithoutConverters and it is helpful to get the error message that there is no type converter for that instead of a NullPointerException.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp: fileExist=Fail not honored when producer works in FTP root path,CAMEL-3144,12487632,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,raphael@apache.org,raphael@apache.org,21/Sep/10 19:59,24/Apr/11 09:57,14/Mar/19 02:43,22/Sep/10 06:22,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,camel-ftp,,,0,,,,,,"when using a route with ftp producer such as :

 <to uri=""ftp://user@host/?fileExist=Fail&fileName=test&password=mypass"" />

The route will not correctly fail if the fileName already exists.

It will work in any sub-directory:

 <to uri=""ftp://user@host/mydir?fileExist=Fail&fileName=test&password=mypass"" />

The root cause of the bug is an incorrect test in org.apache.camel.util.FileUtil.onlyPath() in component camel-core.
This method returns null when the parameter string is ""/"". It should return ""/"".

The attached patch fixes the issue.
",Camel on Linux; IIS FTP server ,,,,,,,,,,,,,,,,,21/Sep/10 20:00;raphael@apache.org;FileUtil.patch;https://issues.apache.org/jira/secure/attachment/12463398/FileUtil.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-09-22 06:22:30.446,,,no_permission,,,,,,,,,,,,,,76330,,,Sun Apr 24 09:57:57 UTC 2011,,,Patch Available,,,,0|i01sxj:,8456,,,,,,,,,22/Sep/10 06:22;hadrian;Patch applied with minor changes and checkstyle fixes. Thanks Raphael for spotting this.,22/Sep/10 06:26;davsclaus;Hadrian I am adding additional unit test for this in camel-core and camel-ftp,"22/Sep/10 06:55;davsclaus;Btw the patch is buggy. It should return null if there is no path, but it returns the name of the file. I have fixed that as well.
Running full tests before committing fixes and additional unit tests.

Hadrian we should take time to add tests for patches when they discover a bug in which we don't have an unit test for.",22/Sep/10 07:11;davsclaus;Okay unit test added and file util fixed as well.,"22/Sep/10 07:33;raphael@apache.org;You're right, the patch is buggy. I should have tested it with more use cases than my own before attaching, sorry about this.

Actually, I'm not even sure it is the correct fix because other components may depend on the FileUtil.onlyPath(""/"") == null behavior for correct operation.
I'm unsure of the expected semantics of the operation in root directory on a file system rather than remote file system.

An alternate fix with less potential side effects would be to directly fix FtpOperations to better handle a return null from onlyPath(), something like:

--- FtpOperations.java	2010-09-22 09:16:25.000000000 +0200
+++ FtpOperations.java.patched	2010-09-22 09:18:51.000000000 +0200
@@ -381,7 +381,7 @@
         // check whether a file already exists
         String directory = FileUtil.onlyPath(name);
         if (directory == null) {
-            return false;
+	    directory = ""/"";
         }
 
         String onlyName = FileUtil.stripPath(name);
",22/Sep/10 08:20;davsclaus;Raphael can you test source from trunk as I also modified camel-ftp as well.,"23/Sep/10 10:58;raphael@apache.org;I've created a test environment using camel-2.5-SNAPSHOT artefacts and could not reproduce the bug.

A tcpdump trace shows that camel-ftp now correctly tries to list the target directory before attempting to write the file.",23/Sep/10 13:17;davsclaus;Ah this is great news. Thanks for testing Raphael.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,
OsgiDefaultCamelContext.getTypeConverterRegistry() returns null ,CAMEL-3143,12487627,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cl4es,cl4es,21/Sep/10 19:40,24/Apr/11 09:58,14/Mar/19 02:43,22/Sep/10 09:40,2.4.0,,,,,,,,,,,,2.5.0,,,,osgi,,,,0,,,,,,"The showed up when using dozer as shown in http://camel.apache.org/dozer-type-conversion.html, whose DozerTypeConverterLoader tries to get the type converter registry using: {{{TypeConverterRegistry registry = camelContext.getTypeConverterRegistry();}}}

Plausible error:
{code:title=OsgiDefaultCamelContext.java}
   @Override
    protected TypeConverter createTypeConverter() {
        return new OsgiTypeConverter(bundleContext, getInjector());
    }
{code}

{code:title=DefaultCamelContext.java}
public TypeConverterRegistry getTypeConverterRegistry() {
        if (typeConverterRegistry == null) {
            // init type converter as its lazy
            if (typeConverter == null) {
                getTypeConverter();
            }
            // type converter is usually the default one that also is the registry
            if (typeConverter instanceof DefaultTypeConverter) {
                typeConverterRegistry = (DefaultTypeConverter) typeConverter;
            }
        }
        return typeConverterRegistry;
    }
{code}

Error:
getTypeConverter() returns an OsgiTypeConverter 
OsgiTypeConverter does not inherit from DefaultTypeConverter, thus the instanceof returns false
=> null is returned

Solution:
Lots of different ways to do this, and it's getting late here. In this case, maybe it's OsgiDefaultCamelContext's responsibility to also override getTypeConverterRegistry with something along the lines of:
{code}
@Override
public TypeConverterRegistry getTypeConverterRegistry() {
        if (typeConverterRegistry == null) {
            // init type converter as its lazy
            if (typeConverter == null) {
                getTypeConverter();
            }
            // type converter is usually the default one that also is the registry
            if (typeConverter instanceof OsgiDefaultTypeConverter) {
                typeConverterRegistry = ((OsgiDefaultTypeConverter) typeConverter).getRegistry();
            }
        }
        return typeConverterRegistry;
    }
{code}

We've employed an (ugly) workaround in a local version of DozerTypeConverterLoader.java:
{code:java}
        TypeConverter typeConverter = camelContext.getTypeConverter();
        DefaultTypeConverter registry = null;
        if (typeConverter instanceof DefaultTypeConverter) {
            registry = (DefaultTypeConverter)typeConverter;
        } else if (typeConverter instanceof OsgiTypeConverter) {
            OsgiTypeConverter osgiTypeConverter = (OsgiTypeConverter)typeConverter;
            registry = osgiTypeConverter.getRegistry();
        }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-22 06:31:50.822,,,no_permission,,,,,,,,,,,,,,76331,,,Sun Apr 24 09:58:02 UTC 2011,,,,,,,0|i01sxb:,8455,,,,,,,,,22/Sep/10 06:31;davsclaus;Yeah lets add a dozer test in camel-itest-osgi. Then we can look at a nicer solution to this,"22/Sep/10 09:03;davsclaus;Dozer is not OSGi compliant. 

The Dozer team is working on integration out of the box with Apache Camel.","22/Sep/10 09:24;davsclaus;Looking into the source code of Dozer its really not well designed for 3rd party to influence loading of resources, overriding classes or hooking into custom logic.

","22/Sep/10 09:29;davsclaus;See here
http://sourceforge.net/tracker/?func=detail&aid=3022810&group_id=133517&atid=727371

As far as in the current camel-dozer component we cannot make it osgi compliant due {{DozerBeanMapper}} being poorly configurable. So we cannot configure how the mapping files should be loaded, by using a custom loader.

","22/Sep/10 09:31;davsclaus;Also {{MappingProcessor}} which does the actual mapping is also a big heavy weight and not easily customizable.

The {{DozerBeanMapper}} will load the mapping files using thread context classloader which doesnt work in that way in OSGi land.
So we end up with this error

{code}
Caused by: org.dozer.MappingException: Unable to locate dozer mapping file [org/apache/camel/itest/osgi/dozer/dozer-mapping.xml] in the classpath!
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:93)
	at org.dozer.util.MappingValidator.validateURL(MappingValidator.java:61)
	at org.dozer.loader.CustomMappingsLoader.loadFromFiles(CustomMappingsLoader.java:101)
	at org.dozer.loader.CustomMappingsLoader.load(CustomMappingsLoader.java:57)
	at org.dozer.DozerBeanMapper.loadCustomMappings(DozerBeanMapper.java:153)
	at org.dozer.DozerBeanMapper.getMappingProcessor(DozerBeanMapper.java:136)
	at org.dozer.DozerBeanMapper.map(DozerBeanMapper.java:92)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:46)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:181)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:136)
{code}","22/Sep/10 09:40;davsclaus;Fixed the OSGi type converter stuff.

trunk: 999836.

But Dozer is still not working in OSGi when loading the mapping files from classpath. Or can you get it working?","22/Sep/10 09:48;bjornbength;Hello Claus,

I'm a colleague of Claes, 
This ticket (as I assume you understand) is not related directly to Dozer. The same null pointer is encountered for me
when i try to explicitly add type converters and fallback converters using java code in our routebuilders in servicemix 4.3.


About dozer:
I can confirm that Dozer could be simpler to use in OSGi but we currently have it running in a few bundles in camel contexts 
in ServiceMix 4.2 with mapping files. 
An upgrade to ServiceMix 4.3 encountered this problem that Claes did work around . However, as you you know,
the camel and osgi refactoring last time around seems to have hidden a few camel osgi packages as private, which means that, with this workaround we need access to these hidden osgi classes. But thats another story..


","22/Sep/10 09:56;davsclaus;Thanks Bjorn.

I have fixed it so the {{getTypeConverterRegistry}} on {{CamelContext}} returns the osgi aware which is now also a {{TypeConverterRegistry}} so you can add your custom type converters directly to it. So the ugly hack is not needed.

Also I have refined the code in {{DozerTypeConverterLoader}} to not use the Dozer CustomerMappingLoader which doesn't work in OSGi.
Now the mapping files can be correctly loaded in OSGi.

However Dozer bits me later when you use the {{DozerBeanMapper}} because it want's to load the mapping file once again.
And the Dozer API is unfriendly to customize so we can't work around this.","22/Sep/10 12:09;cl4es;Nicely done! 

 We've gotten dozer to work in ServiceMix 4.3 by explicitly importing the resource folder which contains the dozer mapping file, i.e. {{<Export-Package>mappings</Export-Package>}} in the maven felix plugin. 

 We had to get this to work inside ServiceMix 4.3, so we improved the previous temporary workaround some to account for camel-core-osgi being a private package with an even *uglier* hack to account for the mindboggling fact that OSGi can load stuff in different classloaders, making us unable to actually cast to OsgiTypeConverter (as in our previous workaround - test code first, good, yes yes):

{code}

    TypeConverter typeConverter = camelContext.getTypeConverter();
    try { 
        Method method = typeConverter.getClass().getMethod(""getRegistry"");
        registry = (DefaultTypeConverter)method.invoke(typeConverter);
    } catch (Throwable t) {
        registry = (DefaultTypeConverter)typeConverter; 
    }
{code}

Cheers! ",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,
Route autoStartup configurable through Property,CAMEL-3141,12487612,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,achim_nierbeck,achim_nierbeck,21/Sep/10 12:31,24/Apr/11 09:58,14/Mar/19 02:43,21/Sep/10 14:17,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,camel-spring,,,0,,,,,,"Using Camel 2.4 I want to make the usage of a certain route configurable through properties. 


{code}
<camelContext id=""camel"" trace=""true""
	xmlns=""http://camel.apache.org/schema/spring"">
	
	<route id=""configurable_1"" autoStartup=""{{startup_1}}"">
		<from uri=""direct:start_1""/>
		<to uri=""mock:end_1""/>
	</route>
		
	<route id=""configurable_2"" autoStartup=""{{startup_2}}"">
		<from uri=""direct:start_2""/>
		<to uri=""mock:end_2""/>
	</route>

</camelContext>
{code}

But if I do use the PropertyPlaceholder on the CamelContext like below it works. 

{code}
<camelContext id=""camel"" trace=""true"" autoStartup=""{{startup_context}}""
{code}

So is this a bug or should this work this way?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-21 12:41:42.457,,,no_permission,,,,,,,,,,,,,,76332,,,Sun Apr 24 09:58:09 UTC 2011,,,,,,,0|i01swv:,8453,,,,,,,,,"21/Sep/10 12:41;davsclaus;Are you saying it only works on <camelContext> level, and not on <route> level?","21/Sep/10 12:45;achim_nierbeck;Exactly, 

here probably the relevant part of the exception: 


{code}
Caused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '{{startup_1}}' is not a valid value for 'boolean'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)
{code}","21/Sep/10 12:48;davsclaus;Thanks, the <route> tag should have the attributes define as String types so the properties resolver can kick in there as well, just as the <camelContext> does",21/Sep/10 14:17;davsclaus;trunk: 999428.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
ftp login anonymous should send empty string as password instead of null parameter,CAMEL-3137,12487593,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Sep/10 07:01,24/Apr/11 09:57,14/Mar/19 02:43,20/Sep/10 07:21,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/anonymous-FTP-login-fails-tp2846235p2846235.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76333,,,Sun Apr 24 09:57:41 UTC 2011,,,,,,,0|i01svz:,8449,,,,,,,,,20/Sep/10 07:21;davsclaus;trunk: 998815.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfbean creates another instance of the class instead of directly using the referenced bean,CAMEL-3136,12487591,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,di_m_an,di_m_an,19/Sep/10 13:18,24/Apr/11 09:57,14/Mar/19 02:43,19/Sep/10 15:47,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,"... this makes it impossible to inject properties to the @WebService class

<camelContext>
        <route>
            <from uri=""...."" />
            <to uri=""cxfbean:handler"" />
        </route>
</camelContext>

<bean id=""handler"" class=""a.b.c.Handler"">
        <property name=""prop1"" value=""5"" />
</bean>

when ""handler"" is created by Spring, its 'prop1' is set to '5'

when the cxfbean:handler is triggered, the 'prop1' is null, because CXF created another instance of Handler instead of using the one created by Spring",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-19 13:56:40.372,,,no_permission,,,,,,,,,,,,,,76334,,,Sun Apr 24 09:57:08 UTC 2011,,,,,,,0|i01svr:,8448,,,,,,,,,"19/Sep/10 13:56;davsclaus;Please take more time to write down details when creating tickets.

Just providing a title is not sufficient to go after.
More details and source code helps us to go track down what you mean.

",19/Sep/10 15:09;di_m_an;Done,"19/Sep/10 15:13;davsclaus;What version of Spring are you using as Spring 2.5 and 3.0 is different how Spring does IoC internally which somehow could cause an issue, so its great to know which version of Spring you use.","19/Sep/10 15:27;di_m_an;I use Spring 3.0.3

As far as I could understand, for some reason CXF uses SingletonFactory to get (create) the bean, but should use SpringBeanFactory.","19/Sep/10 15:30;davsclaus;I have re-produced the issue in an unit test in camel-cxf.

I think I have it fixed, but running tests to ensure it wont break stuff.","19/Sep/10 15:47;davsclaus;trunk: 998687.

Feel free to test the fix in your system as well.","19/Sep/10 16:32;di_m_an;Great! Tested and it works now, thanks!",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,
Camel soap dataformat does not work correctly if a method has no input or no output,CAMEL-3133,12487561,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,17/Sep/10 12:49,25/Oct/11 11:35,14/Mar/19 02:43,06/Jan/11 09:24,2.4.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,"Currently the camel soap dataformat can not handle exachanges for a soap method that has no input or no output. This is a known limitation but we should support this.
",,,,,,,,,,,,,,,,,,04/Jan/11 14:52;chris@die-schneider.net;camel-soap-3133.patch;https://issues.apache.org/jira/secure/attachment/12467423/camel-soap-3133.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-12-24 10:08:51.409,,,no_permission,,,,,,,,,,,,,,76335,,,Wed Jan 05 11:14:39 UTC 2011,,,,,,,0|i01sv3:,8445,,,,,,,,,24/Dec/10 10:08;davsclaus;Christian do you have time to work on this in the near future? If not push it for v2.7,"24/Dec/10 10:21;chris@die-schneider.net;Depends on when the release is planned. I really should finish this soon as it currently limits where you can use the Soap dataformat quite a lot.

",04/Jan/11 14:52;chris@die-schneider.net;Added patch to show the problem with void returns. The problem is in SoapCXFClientTest.testRoundTripSaveCustomer,"04/Jan/11 16:38;hadrian;Camel uses the convention that the next in is the previous out (if any) or previous in otherwise. So the camel way of defining void is really an null output.

However in this case, especially because it is possible to have not only one bean invoked, but many between unmarshall and marshall (and other processors as well), my take would be to add a property on the Exchange during unmarshall that identifies the soap method, so that during marshall you can use it do serialize the bean output (if any) into the right type, and perform an automatic type conversion if necessary (and available) as well.","05/Jan/11 11:14;chris@die-schneider.net;I implemented your proposed solution. On Unmarshall I store the CamelSoapAction on the exchange and retrieve it later for the marshal step. As there already is a constant for the property name I just reused this. I hope this does not cause problems anywehere else.
",,,,,,,,,,,,,,,,,,,,,,,,,
"Ref component causes consumer parameters to be cleared, such as delay and initialDelay",CAMEL-3130,12487557,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Sep/10 16:33,24/Apr/11 09:57,14/Mar/19 02:43,16/Sep/10 17:28,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/The-delay-option-seems-not-to-be-working-in-CAMEL-Java-DSL-mode-tp2840369p2840369.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-17 08:54:13.346,,,no_permission,,,,,,,,,,,,,,76336,,,Sun Apr 24 09:57:07 UTC 2011,,,,,,,0|i01suf:,8442,,,,,,,,,16/Sep/10 17:28;davsclaus;trunk: 997856.,"17/Sep/10 08:54;alitokmen;Thank you, it is perfectly operational now",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using $ in endpoint uri causes thread name parser to fail,CAMEL-3128,12487520,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Sep/10 13:41,24/Apr/11 09:58,14/Mar/19 02:43,16/Sep/10 14:13,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-specify-route-to-folder-with-in-actual-name-tp2839895p2839895.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76337,,,Sun Apr 24 09:58:24 UTC 2011,,,,,,,0|i01stz:,8440,,,,,,,,,16/Sep/10 14:13;davsclaus;trunk: 997755.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
polling of feeds in FeedEntryPollingConsumer is broken.,CAMEL-3124,12487556,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ebunders,ebunders,14/Sep/10 13:59,24/Apr/11 09:57,14/Mar/19 02:43,17/Sep/10 11:27,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-rss,,,,0,,,,,,"The FeedEntryPollingConsumer class implements the poll() method for the 'splitEntries' mode of the RssEndpoint is broken.

You can think of two ways that polling feeds could work:
1) A feed is created, then one item is processed, then the delay, then process another item. This way the feed is kept between calls to poll().
2) A feed is created, then all the items are processed, the feed is cleared, and then the delay.

But the way it presently works:
A feed is created, one items is processed, and the feed is cleared, then the delay, and again the feed is created and the next item is cleared.

This is clearly wrong. Feed entries can be missed, because the index of the next item to process is stored over polls but the list isn't. Also this creates a big network overhead when polling very active feeds such as twitter search...

This is easy to fix. In the below code:
{code}
public void poll() throws Exception {
        Object feed = createFeed();
        populateList(feed);   

        while (hasNextEntry()) {
            Object entry = list.get(entryIndex--);

            boolean valid = true;
            if (entryFilter != null) {
                valid = entryFilter.isValidEntry(endpoint, feed, entry);
            }
            if (valid) {
                Exchange exchange = endpoint.createExchange(feed, entry);
                getProcessor().process(exchange);
                // return and wait for the next poll to continue from last time (this consumer is stateful)
                return;
            }
        }
{code}

The return (at line 56 of org.apache.camel.component.feed.FeedEntryPollingConsumer) should be deleted.","ubuntu 10.4
java 6",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-15 12:13:14.388,,,no_permission,,,,,,,,,,,,,,76339,,,Sun Apr 24 09:57:16 UTC 2011,,,,,,,0|i01st3:,8436,,,,,,,,,"15/Sep/10 12:13;davsclaus;This is how its designed to work form the very start, its not a bug.","15/Sep/10 12:37;ebunders;Well, not strictly a bug. But it seems very strange behavior to me, If you should choose to process one item at each poll, here seems to be no reason to discard the list, in stead of keeping it over polls until depleted. Unless there is a reason I didn't think of...
Is there?

Also I think it would be nice to make the behavior configurable. We now chose to process all feed items with one poll, because it suites our needs, perhaps other use cases are best served with the one-item-per-poll strategy. 

regards,

Ernst","15/Sep/10 13:01;davsclaus;I agree we can improve this behavior, but however it was designed how it works now.","15/Sep/10 13:04;davsclaus;Lets get this improved for Camel 2.5 as we got time for this, waiting for Karaf 2.1 to be released.","17/Sep/10 11:25;davsclaus;After looking into it some more I agree this is a minor bug as it should keep the feed/list in memory to avoid re-loading the feed when it wasn't necessary.

trunk: 998075.","17/Sep/10 11:26;davsclaus;And you can set {{throttleEntries=false}} to let it parse the entire feed at once, and hence it doesn't keep state in memory between polls.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,
protobuf dataformat Spring DSL is not working,CAMEL-3122,12487544,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Sep/10 13:24,24/Apr/11 09:57,14/Mar/19 02:43,14/Sep/10 14:02,2.3.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"There is the mail thread talks about it.
[1]http://camel.465427.n5.nabble.com/Problem-with-protobuf-example-Spring-DSL-to-unmarshal-to-protobuf-td2835112.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:12.693,,,no_permission,,,,,,,,,,,,,,76340,,,Sun Apr 24 09:57:12 UTC 2011,,,,,,,0|i01ssn:,8434,,,,,,,,,14/Sep/10 14:02;njiang;Committed the patch with an unit test into the trunk.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter EIP - The sub exchanges should not contains on completions from original Exchange,CAMEL-3121,12487528,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Sep/10 11:39,24/Apr/11 09:57,14/Mar/19 02:43,14/Sep/10 12:00,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-calling-commit-too-early-when-using-split-seda-file-endpoint-tp2830894p2830894.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-14 12:09:52.153,,,no_permission,,,,,,,,,,,,,,76341,,,Sun Apr 24 09:57:34 UTC 2011,,,,,,,0|i01ssf:,8433,,,,,,,,,"14/Sep/10 12:00;davsclaus;Added unit test to trunk: 996857.

Cannot re produce the error on trunk. ","14/Sep/10 12:00;davsclaus;I fixed some stuff on file commit stuff due another ticket, so this bug should be resolved as well.","14/Sep/10 12:09;smcduff@hotmail.com;The following post contains 2 problems :

Issue 1:
Cannot rename the file exception. It was found and fixed there:
https://issues.apache.org/activemq/browse/CAMEL-2897
But  the problem only fix when streaming is used. If streaming isn't used... the problem persist. 
Quick patch: 
Splitter.java 
private Iterable<ProcessorExchangePair> createProcessorExchangePairsList( 
                        Exchange exchange, Object value) { 
                List<ProcessorExchangePair> result; 
                Integer collectionSize = CollectionHelper.size(value); 
                if (collectionSize != null) { 
                        result = new ArrayList<ProcessorExchangePair>(collectionSize); 
                } else { 
                        result = new ArrayList<ProcessorExchangePair>(); 
                } 
                Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable( 
                                exchange, value); 
                Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable 
                                .iterator(); 
                while (iterator.hasNext()) { 
                        ProcessorExchangePair next = iterator.next(); 
                        result.add(next); 
                } 
                return result; 
        } 


Issue 2:
We found a problem of shutdown in the patch we submitted. Now we do not create a DefaultUNitOfWork we only set it at null.

Quick patch: 
public Object next() { 
        Object part = iterator.next(); 
        Exchange newExchange = exchange.copy(); 
                if (iterator.hasNext()) { 
                        newExchange.setUnitOfWork(null); 
                        }                        if (part instanceof Message) { 
                                                        newExchange.setIn((Message) part); 
                                                } else { 
                                                        Message in = newExchange.getIn(); 
                                                        in.setBody(part); 
                                                } 
                                                return createProcessorExchangePair(index++, 
                                                                getProcessors().iterator().next(), newExchange); 
                                        } 

","14/Sep/10 13:20;smcduff@hotmail.com;Hi Claus,

We are still able to reproduce it with 2.5.0. (both problems)

Did you try it on Windows ?

Issue 1:
{code}
from(""file:e:/test/camel"").split(body().tokenize("","")).process(new Processor() {
        @Override
        public void process(Exchange arg0) throws Exception {
                Thread.sleep(2000);
        }
}); 
{code}

It looks like the testcase you`ve done for FileSplitStreamingWithChoiceTest.java except you need to remove streaming.
Quick patch: Splitter.java

{code}
private Iterable<ProcessorExchangePair> createProcessorExchangePairsList(
                        Exchange exchange, Object value) {
                List<ProcessorExchangePair> result;
                Integer collectionSize = CollectionHelper.size(value);
                if (collectionSize != null) {
                        result = new ArrayList<ProcessorExchangePair>(collectionSize);
                } else {
                        result = new ArrayList<ProcessorExchangePair>();
                }
                Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable(
                                exchange, value);
                Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable
                                .iterator();
                while (iterator.hasNext()) {
                        ProcessorExchangePair next = iterator.next();
                        result.add(next);
                }
                return result;
        } 
{code}

Issue 2
Quick Patch:

{code}
public Object next() {
        Object part = iterator.next();
        Exchange newExchange = exchange.copy();
                if (iterator.hasNext()) {
                        newExchange.setUnitOfWork(null);
                        }                        if (part instanceof Message) {
                                                        newExchange.setIn((Message) part);
                                                } else {
                                                        Message in = newExchange.getIn();
                                                        in.setBody(part);
                                                }
                                                return createProcessorExchangePair(index++,
                                                                getProcessors().iterator().next(), newExchange);
                                        }
:
{code}","15/Sep/10 08:01;davsclaus;Thanks Simon, I have fixed the windows issue. trunk: 997217",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
hawtdb - Should work in OSGi,CAMEL-3120,12487547,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Sep/10 08:43,24/Apr/11 09:57,14/Mar/19 02:43,14/Sep/10 15:00,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"The {{decode}} method in {{ObjectCodec}} should wrap the causes stacktrace in the wrapped IOException.

For example OSGi frameworks may be pesky and we want to be able to see whatever stacktrace it may thrown on you.

{code}

    public T decode(DataInput dataIn) throws IOException {
        int size = dataIn.readInt();
        byte[] data = new byte[size];
        dataIn.readFully(data);
        ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
        ObjectInputStream objectIn = new ObjectInputStream(bytesIn);
        try {
            return (T) objectIn.readObject();
        } catch (ClassNotFoundException e) {
            throw new IOException(e.getMessage());
        }
    }
{code}

For being JDK 1.5 compatible you need to do it like
{code}
    public static IOException createIOException(String message, Throwable cause) {
        IOException answer = new IOException(message);
        answer.initCause(cause);
        return answer;
    }
{code}
",,,,,,,,,,,,,,,,,,14/Sep/10 10:23;davsclaus;CAMEL-3120-buf.patch;https://issues.apache.org/jira/secure/attachment/12463395/CAMEL-3120-buf.patch,14/Sep/10 10:23;davsclaus;CAMEL-3120-db.patch;https://issues.apache.org/jira/secure/attachment/12463342/CAMEL-3120-db.patch,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76342,,,Sun Apr 24 09:57:47 UTC 2011,,,,,,,0|i01ss7:,8432,,,,,,,,,"14/Sep/10 09:32;davsclaus;Also hawtdb may have to change how it loads the class. See for example from AMQ:
http://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java","14/Sep/10 09:38;davsclaus;The stacktrace is now
{code}
Caused by: java.io.IOException: org.apache.camel.impl.DefaultExchangeHolder
	at org.fusesource.hawtbuf.codec.ObjectCodec.createIOException(ObjectCodec.java:60)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:55)
	at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:159)
	... 56 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.impl.DefaultExchangeHolder
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at org.apache.felix.framework.ModuleImpl.searchDynamicImports(ModuleImpl.java:1484)
	at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:695)
	at org.apache.felix.framework.ModuleImpl.access$100(ModuleImpl.java:61)
	at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1656)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:604)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1575)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:51)
	... 58 more
{code}","14/Sep/10 09:41;davsclaus;And when using equinox

{code}
Caused by: java.io.IOException: org.apache.camel.impl.DefaultExchangeHolder
	at org.fusesource.hawtbuf.codec.ObjectCodec.createIOException(ObjectCodec.java:60)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:55)
	at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:159)
	... 56 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.impl.DefaultExchangeHolder
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:494)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:51)
	at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:398)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:159)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:207)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:184)
	at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:604)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1575)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:51)
	... 58 more
{code}",14/Sep/10 10:23;davsclaus;Patch for hawtdb-buf,14/Sep/10 10:23;davsclaus;Patch for hawtdb,"14/Sep/10 10:24;davsclaus;Hiram can you apply the patches to hawtbuf and hawtdb?

Also we need a new release of hawtdb/buf so we can have it work with Apache ServiceMix and OSGi.",14/Sep/10 15:00;davsclaus;Now it works with hawtdb 1.4 and hawtbuf 1.2,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,
camel-spring causes wrong initialization-order of dependent beans,CAMEL-3118,12487536,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mrt1nz,mrt1nz,11/Sep/10 14:51,24/Apr/11 09:57,14/Mar/19 02:43,13/Sep/10 04:30,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-spring,,,,0,,,,,,"Attached is a patch with a test that demonstrates the problem. The test uses a custom RouteBuilder ({{SampleIninitalizingRouteBuilder}}) and another bean ({{SampleIninitalizingBean}}) that both implement {{InitializingBean}}. When the beans' {{afterPropertiesSet()}} methods are called, these beans add their names to a shared list. When the {{SampleIninitalizingRouteBuilder.configure()}} method is called then ""configured"" is added to the shared list.

{code:java}
package  org.apache.camel.spring.issues

// imports omitted ...

public class SampleInitializingBean implements InitializingBean {
    private String name;
    private List<String> entries;

    public void setName(String name) {
        this.name = name;
    }

    public void setEntries(List<String> entries) {
        this.entries = entries;
    }

    public void afterPropertiesSet() {
        entries.add(name);
    }
}

public class SampleInitializingRouteBuilder extends RouteBuilder implements InitializingBean {
    private String name;
    private List<String> entries;

    public void setName(String name) {
        this.name = name;
    }

    public void setEntries(List<String> entries) {
        this.entries = entries;
    }

    public void afterPropertiesSet() {
        entries.add(name);
    }

    @Override
    public void configure() throws Exception {
        entries.add(""configured"");
    }
}
{code}

These beans are wired as follows:

{code:xml}
    <bean id=""entries1"" class=""java.util.ArrayList""/>

    <bean id=""sampleBean1""
          class=""org.apache.camel.spring.issues.SampleInitializingBean"">
        <property name=""name"" value=""test1a""/>
        <property name=""entries"" ref=""entries1""/>
    </bean>

    <bean id=""sampleRouteBuilder1""
          class=""org.apache.camel.spring.issues.SampleInitializingRouteBuilder"" depends-on=""sampleBean1"">
        <property name=""name"" value=""test1b""/>
        <property name=""entries"" ref=""entries1""/>
    </bean>

    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <routeBuilder ref=""sampleRouteBuilder1""/>
    </camelContext>
{code}

Note the {{depends-on}} attribute on the {{sampleRouteBuilder1}} bean: it should ensure that {{sampleBean1}} is being initialized before {{sampleRouteBuilder1}} and the {{camelContext}}. 

Actual behaviour, however, is that the beans are initialized in the following order:

# {{sampleRouteBuilder1}}
# {{camelContext}}
# {{sampleBean1}}

which is definitely wrong. The shared list contains the entries

# {{test1b}}
# {{configured}}
# {{test1a}}

This differs from the expected order

# {{test1a}}
# {{test1b}}
# {{configured}}

which cannot be observed. After some debugging, it seems the problem is related to the {{CamelBeanPostProcessor.postProcessBeforeInitialization()}} method. It does a lookup of the {{camelContext}} (i.e. {{applicationContext.getBean(camelId))}}) *before* the application context finished initialization of dependent beans. The problem is that this lookup already triggers a {{SampleInitializingRouteBuilder.configure()}} method call.

Even worse, this behaviour depends on the declaration order of the beans in the application context XML file. When the {{camelContext}} bean is moved to the top, the bean initialization are done in the correct order.

To demonstrate that this is not a Spring-related problem, the attached test also contains another bean ({{SampleRouteBuilderContainer}}) that plays the role of the {{camelContext}} but does nothing else than calling {{configure()}} on the injected route builder within ({{afterPropertiesSet()}}). In this case, the bean initialization occur in the expected, correct order.

I didn't find a solution to this problem so far and need to dig in further (hope to find some time next week for that). If any of the committers (who are more familiar with camel-spring than I am) have already an idea how to solve that, I appreciate any hints.
",,,,,,,,,,,,,,,,,,11/Sep/10 14:51;mrt1nz;camel-spring-test.patch;https://issues.apache.org/jira/secure/attachment/12463354/camel-spring-test.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-09-13 04:05:38.871,,,no_permission,,,,,,,,,,,,,,76343,,,Sun Apr 24 09:57:41 UTC 2011,,,,,,,0|i01srr:,8430,,,,,,,,,"13/Sep/10 04:05;njiang;This issue is related to recent change of CAMEL-3050, I'm working on the patch for it now.",13/Sep/10 04:30;njiang;Applied patch into the trunk.,13/Sep/10 06:54;mrt1nz;Thanks for fixing!,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
url encoding goes wrong in org.apache.camel.component.rss.RssComponent#afterConfiguration,CAMEL-3114,12487579,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ebunders,ebunders,10/Sep/10 10:53,24/Apr/11 09:58,14/Mar/19 02:43,19/Sep/10 07:59,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-rss,,,,0,,,,,,"The method org.apache.camel.component.rss.RssComponent#afterConfiguration creates the Url that will be used to fetch the rss feed. We find that with some url's url encoding goes wrong.

consider this url: http://api.flickr.com/services/feeds/photos_public.gne?id=23353282@N05&tags=lowlands&lang=en-us&format=rss_200

AfterConfiguration() calls org.apache.camel.util.URISupport#createRemainingURI This method first calls org.apache.camel.util.URISupport#createQueryString, which is a method that will iterate over a map of request parameters, escape each param name and value using java.net.URLEncoder#encode, and put them together with all the & and = stuff to form the query string.
Then it calls org.apache.camel.util.URISupport#createURIWithQuery Which is a method that takes a URI (the base url) and the constructed query string, and simply creates a new URI with that, returning the toString() output from that.

So this is what the output of this procedure looks like: http://api.flickr.com/services/feeds/photos_public.gne?format=rss_200&id=23353282%2540N05&lang=en-us&tags=lowlands

1 the @ sign was escaped by org.apache.camel.util.URISupport#createQueryString, creating a query string like: id=23353282%40N05&tags=lowlands&lang=en-us&format=rss_200 (which is good)
2 the URI constructor then finds the % in %40 and escapes that again! creating a url like: http://api.flickr.com/services/feeds/photos_public.gne?format=rss_200&id=23353282%2540N05&lang=en-us&tags=lowlands 

Which predictably fails...

I did some tests with the URI constructor, and it seems it only escapes % chars, everything else is left alone.

I attach a groovy script that demonstrates the problem

regards,

Ernst Bunders","jdk: Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
platform: linux (ubuntu 10.04)",,,,,,,,,,,,,,,,,10/Sep/10 10:54;ebunders;test.groovy;https://issues.apache.org/jira/secure/attachment/12463353/test.groovy,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-09-15 12:15:24.704,,,no_permission,,,,,,,,,,,,,,76344,,,Sun Apr 24 09:58:10 UTC 2011,,,,,,,0|i01sqv:,8426,,,,,,,,,10/Sep/10 10:54;ebunders;this script demonstrates the problem,"15/Sep/10 12:15;davsclaus;Can you create a pure Java unit test which demonstrates this, then it can be included as an unit test in the source",15/Sep/10 12:39;ebunders;I guess I could do that,"19/Sep/10 07:59;davsclaus;trunk: 998608.

I found the bug and fixed it. I can now read the feed from flickr.

Thanks for reporting. Feel free to test it on your system as well.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
@QueryParam doesn't work for CxfBeans,CAMEL-3113,12487532,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Sep/10 01:17,24/Apr/11 09:57,14/Mar/19 02:43,10/Sep/10 02:08,2.2.0,2.3.0,2.4.0,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,"Charle report an issue[1], after tracing the code I found the DefaultCxfBeanBinding doesn't put the http query string into the cxf message.
So the @QueryParam will not take effect on the resource beans.
[1]http://camel.465427.n5.nabble.com/camel-cxfbean-JAX-Rs-QueryParam-td2827252.html#a2827252",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:20.057,,,no_permission,,,,,,,,,,,,,,76345,,,Sun Apr 24 09:57:20 UTC 2011,,,,,,,0|i01sqn:,8425,,,,,,,,,10/Sep/10 02:08;njiang;Applied patch into the trunk.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConsumerTemplate return body should complete UoW beforehand,CAMEL-3108,12487541,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ankelee,ankelee,07/Sep/10 08:50,24/Apr/11 09:58,14/Mar/19 02:43,14/Sep/10 14:19,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,Issue is discussed here: http://camel.465427.n5.nabble.com/ConsumerTemplate-not-finishing-td2642233.html#a2642233,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-14 14:19:10.879,,,no_permission,,,,,,,,,,,,,,76346,,,Sun Apr 24 09:58:08 UTC 2011,,,,,,,0|i01spj:,8420,,,,,,,,,14/Sep/10 14:19;davsclaus;trunk: 996908.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SmppBinding set the destination address npi instead of the source address npi,CAMEL-3107,12487506,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,06/Sep/10 19:06,24/Apr/11 09:57,14/Mar/19 02:43,06/Sep/10 19:10,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-smpp,,,,0,,,,,,See discussion on the [user@list|http://camel.465427.n5.nabble.com/SMPP-sourceAddrNpi-bug-td2801906.html#a2801906],All,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:20.479,,,no_permission,,,,,,,,,,,,,,76347,,,Sun Apr 24 09:57:20 UTC 2011,,,Patch Available,,,,0|i01spb:,8419,,,,,,,,,06/Sep/10 19:10;muellerc;Patch applied with thanks to Pavel,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
${file:length} should return 0 instead of null if the file length is 0,CAMEL-3100,12487482,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Sep/10 03:48,24/Apr/11 09:57,14/Mar/19 02:43,02/Sep/10 05:13,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"{code}
--- camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java	(revision 991781)
+++ camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java	(working copy)
@@ -122,7 +122,8 @@
             message.setHeader(""CamelFileRelativePath"", getRelativeFilePath());
             message.setHeader(Exchange.FILE_PARENT, getParent());
     
-            if (getFileLength() > 0) {
+            if (getFileLength() >= 0) {
                 message.setHeader(""CamelFileLength"", getFileLength());
             }
             if (getLastModified() > 0) {
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:14.916,,,no_permission,,,,,,,,,,,,,,76348,,,Sun Apr 24 09:57:14 UTC 2011,,,,,,,0|i01snr:,8412,,,,,,,,,02/Sep/10 05:13;njiang;Applied patch into camel trunk.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp shoud honor the configured encoding,CAMEL-3093,12487459,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,31/Aug/10 19:35,31/Aug/10 20:48,14/Mar/19 02:43,31/Aug/10 20:47,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-smpp,,,,0,,,,,,Currently camel-smpp doesn't honor the encoding option by creating the consumer/producer.,All,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76349,,,Tue Aug 31 20:47:28 UTC 2010,,,,,,,0|i01sm7:,8405,,,,,,,,,31/Aug/10 20:47;muellerc;added the new option dataCoding and updated the wiki page,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QuartzEndpoint does not set the job name properly,CAMEL-3091,12487455,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,31/Aug/10 01:58,24/Apr/11 09:57,14/Mar/19 02:43,31/Aug/10 13:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,"Looks like the job.name argument is not se properly on the endpoint and defaults to the uri path.

Another nastier issue (for which I should have probably created a separate issue) is that the uri gets messed up if it does not have the double slashes after the scheme (as in {{""quartz:<uri>""}} vs {{""quartz://<uri>""}}) and the @cron argument contains '?'. The workaround (arguably) is to start the uri with {{""quartz://...""}}.

See [nabble thread|http://camel.465427.n5.nabble.com/Problem-with-cron-expression-configuration-in-camel-context-with-spring-tt2796958.html#a2796958]. Many thanks to SK for reporting this.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-31 13:46:40.392,,,no_permission,,,,,,,,,,,,,,76350,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,0|i01slr:,8403,,,,,,,,,31/Aug/10 02:36;hadrian;The job name part is resolved in r991060.,31/Aug/10 02:56;hadrian;Added failing test in {{QuartzEndpointConfigureTest}} that shows the problem.,"31/Aug/10 13:46;davsclaus;trunk: 991189.

Fixed the parameter parsing bug in camel-core due the ? mark in the cron expression",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - requestTimeout with 0 or negative value should mean no timeout,CAMEL-3084,12487423,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Aug/10 12:11,24/Apr/11 09:57,14/Mar/19 02:43,26/Aug/10 12:20,2.5.0,,,,,,,,,,,,2.5.0,,,,camel-jms,,,,0,,,,,,This only affects the refactored camel-jms component.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76351,,,Sun Apr 24 09:57:58 UTC 2011,,,,,,,0|i01sk7:,8396,,,,,,,,,26/Aug/10 12:20;davsclaus;trunk: 989637.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanConveter didn't try to covert the bean invocation argument rightly,CAMEL-3082,12487421,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Aug/10 07:00,24/Apr/11 09:57,14/Mar/19 02:43,26/Aug/10 12:10,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Bug-in-the-BeanConverter-class-td2653552.html#a2653552",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:15.451,,,no_permission,,,,,,,,,,,,,,76352,,,Sun Apr 24 09:57:15 UTC 2011,,,,,,,0|i01sjr:,8394,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty timeout exception,CAMEL-3081,12487416,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skusma@arccorp.com,skusma@arccorp.com,25/Aug/10 15:45,24/Apr/11 09:57,14/Mar/19 02:43,26/Aug/10 08:03,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-netty,,,,0,,,,,,"eventhough message was received by netty procuder, it thows a timeout exception after 30 secs. here is the route and log. as this is a basic functionality I think this is critical priority.

		from(""netty:tcp://localhost:6205?textline=true&sync=true"").process(new Processor() {
		    int i=0;
			public void process(Exchange exchange) throws Exception {
		        String body = exchange.getIn().getBody(String.class);
				Thread.sleep(5000);
		        exchange.getOut().setBody(""Bye 1"" + body);
		       // if(i++%2==1) throw new IOException(""custom exception"");
		    }
		});


		from(""file:///test/test/response"")
		.convertBodyTo(String.class)
		.threads(1)
		.to(ExchangePattern.InOut,""netty:tcp://localhost:6205?textline=true&sync=true"")
		.to(""log:+++ reply++++"");

2010-08-25 11:33:29,963 [1 - file:///test/test/response] FileConsumer                   DEBUG Total 1 files to consume
2010-08-25 11:33:29,963 [1 - file:///test/test/response] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\hello1.txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\hello1.txt]]
2010-08-25 11:33:31,510 [      Camel Thread 6 - Threads] SendProcessor                  DEBUG >>>> Endpoint[tcp://localhost:6205] Exchange[GenericFileMessage with body: hello1]
2010-08-25 11:33:31,682 [      Camel Thread 6 - Threads] NettyProducer                  DEBUG Creating connector to address: localhost:6205
2010-08-25 11:33:31,682 [      Camel Thread 6 - Threads] NettyProducer                  DEBUG Writing body: hello1

2010-08-25 11:33:31,697 [    New I/O client worker #1-1] NettyProducer                  DEBUG Operation complete org.jboss.netty.channel.DefaultChannelFuture@944dbd
2010-08-25 11:33:31,697 [    New I/O server worker #1-1] ServerChannelHandler           DEBUG Incoming message: hello1
2010-08-25 11:33:36,697 [    New I/O server worker #1-1] ServerChannelHandler           DEBUG Writing body: Bye 1hello1

2010-08-25 11:33:36,697 [    New I/O client worker #1-1] ClientChannelHandler           DEBUG Message received: Bye 1hello1
2010-08-25 11:33:36,697 [    New I/O client worker #1-1] SendProcessor                  DEBUG >>>> Endpoint[log://+++ reply++++] Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] +++ reply++++                  INFO  Exchange[ExchangePattern:InOut, BodyType:String, Body:Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\hello1.txt] using exchange: Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\hello1.txt.camelLock with result: true
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\hello1.txt] to: GenericFile[C:\test\test\response\.camel\hello1.txt]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\hello1.txt to: C:\test\test\response\.camel\hello1.txt with result: true
2010-08-25 11:34:06,886 [         Hashed wheel timer #1] DefaultErrorHandler            DEBUG Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. On delivery attempt: 0 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:34:06,886 [         Hashed wheel timer #1] DefaultErrorHandler            ERROR Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
",tomcat,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-25 16:01:16.628,,,no_permission,,,,,,,,,,,,,,76353,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,0|i01sjj:,8393,,,,,,,,,"25/Aug/10 16:01;davsclaus;See the release notes for Camel 2.4.0
http://camel.apache.org/camel-240-release.html

It explains that you must set the timeout to 0 as it doesnt work in Camel 2.4.

Try using 2.5-SNAPSHOT",25/Aug/10 16:12;skusma@arccorp.com;changing from critical to major becuase it doesn't crash but does trigger false failure alerts.,"25/Aug/10 16:24;skusma@arccorp.com;as you are fixing it in next release, I guess this bug can be closed?. sorry, I didn't realise it was in release notes.","25/Aug/10 16:31;skusma@arccorp.com;I tried with timeout as zero, it doesn't generate that exception any more.i hope 2.5 still runs in a async mode fine. I am thinking timeout is applicable only for sync mode?.","26/Aug/10 08:03;davsclaus;trunk: 989516.

Removed the {{timeout}} option as it was flawed.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
job rescheduling and clustering does not work properly ,CAMEL-3079,12484611,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,idueppe,idueppe,25/Aug/10 15:26,24/Apr/11 09:58,14/Mar/19 02:43,25/Aug/10 15:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,"Currently stateful cron jobs are identified by their group name, job name and the cron expression. This prevents an easy rescheduling of cron jobs. For instance, stopping a camel context, rescheduling the cron job by editing the cron expressing and restart will end up in an exception. This will happen because the rescheduled job will be added as an additional job. The already existing job will produce an exception because the corresponding endpoint doesn't exist anymore. The previous solution deleting all triggers on shutdown doesn't work in a cluster scenario. 

I suggest to identify cron jobs only by their group and job name. On startup it will check if a trigger already exists and check if the cron expression has changed. If so it will be rescheduled.

Also the current explicit resuming of stateful jobs will produce an exception during startup, because the scheduler automatically finds and resumes stored triggers. 
",Database cluster scenario,,,,,,,,,,,,,,,,,25/Aug/10 15:27;idueppe;camel-quartz.patch;https://issues.apache.org/jira/secure/attachment/12463246/camel-quartz.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-08-25 15:46:27.999,,,no_permission,,,,,,,,,,,,,,76354,,,Sun Apr 24 09:58:14 UTC 2011,,,Patch Available,,,,0|i01sj3:,8391,,,,,,,,,25/Aug/10 15:27;idueppe;Patch is for the current trunk version of 2.5-SNAPSHOT.,"25/Aug/10 15:46;davsclaus;trunk: 989179.

Thanks for the patch.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Cache Component configuration requires MemoryStoreEvictionPolicy instance, will not accept parameter as part of URI",CAMEL-3078,12484613,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,deckerego,deckerego,25/Aug/10 03:29,24/Apr/11 09:58,14/Mar/19 02:43,25/Aug/10 12:10,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"In Spring, if one attempts to specify a cache endpoint as:
<endpoint id=""myCache"" uri=""cache://MyCache?memoryStoreEvictionPolicy=MemoryStoreEvictionPolicy.FIFO""/>
an exception will be thrown that the String ""MemoryStoreEvictionPolicy.FIFO"" was not a proper Java Object and no TypeConverter is available. This can be worked-around by manually creating a type converter that performs:
    String policyName = evictionPolicy.replace(""MemoryStoreEvictionPolicy."", """");
    return MemoryStoreEvictionPolicy.fromString(policyName);

Or one could just try to create a new instance from reflection. Above way is a bit more manageable however, since EhCache is taking care of the conversion for you.

",Camel core and cache component retrieved from Maven repo,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-25 12:10:29.42,,,no_permission,,,,,,,,,,,,,,76355,,,Sun Apr 24 09:58:22 UTC 2011,,,,,,,0|i01siv:,8390,,,,,,,,,"25/Aug/10 12:10;davsclaus;trunk: 989045.

Thanks for reporting. You can now just assign the option the value as {{FIFO}}. ",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cache Component needs to check for null values during GET operations,CAMEL-3077,12484607,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,deckerego,deckerego,25/Aug/10 03:22,24/Apr/11 09:57,14/Mar/19 02:43,25/Aug/10 11:52,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"EhCache often has a bit of lag time when invalidating expired cache elements, first setting the Element value to null and then removing the key. If you are hitting a cache rapidly one often will run across a key that is present in the cache that still has a null element entry.

The logic for successfully key retrieval just needs to be slightly tweaked to check for null values.",Received 2.4.0 release of Camel and Camel Cache component from Maven repo,,,,,,,,,,,,,,,,,25/Aug/10 03:23;deckerego;CacheProducer.NPE.patch;https://issues.apache.org/jira/secure/attachment/12463241/CacheProducer.NPE.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-08-25 11:52:31.134,,,no_permission,,,,,,,,,,,,,,76356,,,Sun Apr 24 09:57:39 UTC 2011,,,Patch Available,,,,0|i01sin:,8389,,,,,,,,,"25/Aug/10 03:34;deckerego;If it helps, steps to reproduce:
1) Set timeToLiveSeconds to something like 30 seconds
2) Add an entry in a route
3) Wait 30-ish seconds
4) Attempt to make several GETs around the expiry time. One will likely result in an NPE as the entry is being removed by the EhCache monitor","25/Aug/10 11:52;davsclaus;trunk: 989026.

Thanks for the patch.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX statistics is incomplete for processors,CAMEL-3069,12484612,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Aug/10 15:28,24/Apr/11 09:57,14/Mar/19 02:43,23/Aug/10 17:22,2.4.0,,,,,,,,,,,,2.5.0,,,,jmx,,,,0,,,,,,"The statistics for routes is correct. However for processors the stats is wrong. For example {{ExchangesCompleted}} appears to be doubled.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76357,,,Sun Apr 24 09:57:53 UTC 2011,,,,,,,0|i01sgv:,8381,,,,,,,,,23/Aug/10 17:22;davsclaus;trunk: 988215.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator - Exception thrown from custom aggregation strategy could cause BatchSender thread to terminate,CAMEL-3064,12484640,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Aug/10 14:03,17/Jan/11 16:50,14/Mar/19 02:43,19/Aug/10 14:46,1.6.3,,,,,,,,,,,,1.6.4,,,,camel-core,,,,0,,,,,,We should use try .. catch to catch custom exceptions being thrown from AggregationStrategy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76358,,,Mon Jan 17 16:50:49 UTC 2011,,,,,,,0|i01sfr:,8376,,,,,,,,,"19/Aug/10 14:46;davsclaus;trunk: 987166.

This issue only applies for 1.x.",17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Out of Heap memory issues with Camel-File processing large files,CAMEL-3060,12484657,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,v_cheruvu@hotmail.com,v_cheruvu@hotmail.com,18/Aug/10 13:52,24/Apr/11 09:57,14/Mar/19 02:43,19/Aug/10 03:47,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"Camel-File component throws heap memory issue when processing csv file which is about 45MB with 218k Lines. 

http://camel.465427.n5.nabble.com/Java-heap-space-issue-with-reading-large-CSV-file-tt2638903.html#a2638903",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-19 03:47:20.454,,,no_permission,,,,,,,,,,,,,,76359,,,Sun Apr 24 09:57:13 UTC 2011,,,,,,,0|i01sev:,8372,,,,,,,,,19/Aug/10 03:47;davsclaus;trunk: 987008.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dummyTrustManager does not work as described,CAMEL-3056,12484954,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,varnerac,varnerac,14/Aug/10 12:49,24/Apr/11 09:57,14/Mar/19 02:43,14/Aug/10 15:49,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-mail,,,,0,,,,,,"The documentation for the Mail component (http://camel.apache.org/mail.html) indicates that the {{dummyTrustManager}} option will allow you to skip over the certificate check. Using that option in a Mail component's URI results in:

{quote}
Caused by: java.io.IOException: Couldn't connect using SSL socket factory class null to host, port: my.email.server.com, -1; Exception: java.lang.ClassNotFoundException: org.apache.camel.component.mail.security.DummySSLSocketFactory
	at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:216)
	at com.sun.mail.iap.Protocol.<init>(Protocol.java:109)
	at com.sun.mail.imap.protocol.IMAPProtocol.<init>(IMAPProtocol.java:104)
	at com.sun.mail.imap.IMAPStore.protocolConnect(IMAPStore.java:585)
	... 13 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.component.mail.security.DummySSLSocketFactory
{quote}

This is because of a decision made in CAMEL-1215 to move it to test. I think the documentation implies that this is a tool you could use (cautiously) in the development phase, and shouldn't be restricted to the unit tests. Either way, the class needs to be moved back into {{camel-mail.jar}} or the documentation needs to remove this option.","Snow Leopard, JDK 1.6, ",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-14 15:49:09.876,,,no_permission,,,,,,,,,,,,,,76360,,,Sun Apr 24 09:57:17 UTC 2011,,,,,,,0|i01sdz:,8368,,,,,,,,,"14/Aug/10 15:49;davsclaus;Thanks I have updated the documentation.
https://cwiki.apache.org/confluence/display/CAMEL/Mail",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RouteBuilderRef should work out of the box with Spring 3 and dependency injection,CAMEL-3050,12484692,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Aug/10 13:30,24/Apr/11 09:57,14/Mar/19 02:43,12/Aug/10 13:51,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-spring,,,,0,,,,,,"Spring 3 changed internally how dependency resolution works. Its now worse as we have to play tricks in the Camel namespace handler to tell Camel the various pieces you can ref, should depend on Camel. Otherwise the dependency resolution in Spring is not working properly.

This used to work like a charm in Spring 2.5.6.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76361,,,Sun Apr 24 09:57:37 UTC 2011,,,,,,,0|i01scn:,8362,,,,,,,,,12/Aug/10 13:51;davsclaus;trunk: 984775.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using custom global interceptor can cause routes to not entirely warmup,CAMEL-3049,12484678,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Aug/10 11:15,24/Apr/11 09:57,14/Mar/19 02:43,13/Aug/10 09:05,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-2-4-InterceptStrategy-error-tp2473088p2473088.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-12 14:06:40.834,,,no_permission,,,,,,,,,,,,,,76362,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,0|i01scf:,8361,,,,,,,,,"12/Aug/10 14:06;cmoulliard;The code is coming from Fusesource/forge web site --> project Fuse ESB Audit --> http://fusesource.com/forge/projects/ESBAUDIT/source 

git://forge.fusesource.com/esbaudit.git

look in this directory to chekc the content of the class : org.fusesource.esb.audit.camel\src\main\java\org\fusesource\esb\audit

I have simply modify some pom.xml files + one class to be able to use camel 2.4/Karaf2.0. My code has not been yest committed as I'm not sure that I have the rights to commit something.","13/Aug/10 08:38;davsclaus;The interceptor should extend DelegateAsyncProcessor instead, then it should work. But this requires Camel 2.4 onwards.

{code}
public class AuditInterceptor extends DelegateProcessor
{code}

Should be
{code}
public class AuditInterceptor extends DelegateAsyncProcessor
{code}

And then implement the async process method instead.
I will fix the logic in camel-core to cater for both situations, to ensure child services is started in both situations.",13/Aug/10 09:05;davsclaus;trunk: 985137.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
"JettyHttpComponent.doStop() shuts down all servers in the VM, not just those associated with the component",CAMEL-3047,12487534,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pegli,pegli,11/Aug/10 22:33,24/Apr/11 09:58,14/Mar/19 02:43,19/Aug/10 09:43,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jetty,,,,0,,,,,,"We are running several bundles in Karaf with separate Camel contexts, each of which uses the camel-jetty component to expose services over HTTP.  Each bundle has an assigned port and may listen on multiple URIs.  We noticed that when we updated or shut down one of these bundles, all of the Jetty servers in the other bundles would stop listening on their respective ports.

The problem is that the map of ConnectorRef objects in JettyHttpComponent is static, and therefore shared across the entire VM.  Changing this from static to an instance variable fixed the issue for us.  ","Java 1.6.0_20, Karaf 1.6.0, OSX 10.6.4",,,,,,,,,,,,,,,,,12/Aug/10 22:00;pegli;CAMEL-3047-refcount.patch;https://issues.apache.org/jira/secure/attachment/12463326/CAMEL-3047-refcount.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-08-12 06:47:44.001,,,no_permission,,,,,,,,,,,,,,76363,,,Sun Apr 24 09:58:02 UTC 2011,,,Patch Available,,,,0|i01sbz:,8359,,,,,,,,,11/Aug/10 22:35;pegli;patch against trunk 984599,"12/Aug/10 06:47;davsclaus;I don't think changing to not static solves the problem.

What if you want to use the same connector in multiple bundles? eg you want to use port 8080 in bundle A and bundle B.
",12/Aug/10 22:00;pegli;Patch against trunk 984912 which maintains the static connectors map and uses reference counting to determine whether a connector should be shut down completely.,"12/Aug/10 22:02;pegli;Claus, this new patch should address the issue of sharing connectors across different bundles (really, across different CamelContexts in the same VM).  I'm pressed for time right now, but will try to get a unit test that exercises the multiple-context case soon.","13/Aug/10 07:59;davsclaus;Thanks Paul for the revised path.

Yeah would be good with an unit test in both camel-jetty and in camel-itest-osgi","13/Aug/10 08:00;davsclaus;Willem do you mind patching this?

And if possible create an unit test in osgi which has 2 bundles using jetty. And then stop one of the bundles. And send in a http request to the 2nd bundle to ensure it still runs.","19/Aug/10 09:43;njiang;Applied the patch with thanks to Paul,  I also fix an issue which could shutdown the server still has one reference.
I also added an OSGi unit test for it.
",19/Aug/10 10:23;davsclaus;Perfect. Great work both guys.,"20/Oct/10 09:44;ialex;It is a bit irrelevant, since 2.5 is almost out, but i think the patch has a little problem.

The line : 
if (connectorRef != null && connectorRef.decrement() == 0)
should be 
if (connectorRef != null && connectorRef.refCount == 0)

Otherwise, it gets decremented twice -in disconnect too?-  (in my example i had 2 routes and the problem was still there after a restart of one of them).
In 2.5 it is ok though, just the attached patch has this code.","20/Oct/10 11:49;njiang;@Ioannis,
Yes, the patch has a defect, and I already fixed it before committed the patch :)
You can check the change here https://issues.apache.org/activemq/browse/CAMEL-3047?page=com.atlassian.jira.plugin.ext.subversion%3Asubversion-commits-tabpanel.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,
Flatpack component : unable to set the delimiter parameter in spring config file,CAMEL-3045,12485142,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rsinelle,rsinelle,11/Aug/10 12:38,24/Apr/11 09:58,14/Mar/19 02:43,11/Aug/10 14:28,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-flatpack,,,,0,,,,,,"It's not possible to set the delimiter parameter in spring configuration file or I don't find the way to do it !
For example : 
<route id=""routeA"">
   <from uri=""file:src/test/resources/csv?move=done/&amp;fileName=testfileRouteA.csv"" />
   <to uri=""flatpack:delim:META-INF/Delimited.pzmap.xml?delimiter=;"" />
</route>

I get the following error :
Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route routeA at: >>> To[flatpack:delim:META-INF/Delimited.pzmap.xml?ignoreFirstRecord=false&splitRows=true&delimiter=;] <<< in route: Route[[From[file:src/test/resources/csv?move=done/&fileName=... because of Failed to resolve endpoint: flatpack://delim:META-INF/Delimited.pzmap.xml?delimiter=%3B&ignoreFirstRecord=false&splitRows=true due to: Could not find a suitable setter for property: delimiter as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: char with value ;
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1126)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:231)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:219)
	at org.apache.camel.spring.Main.doStart(Main.java:173)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:114)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:291)
	at org.apache.camel.spring.Main.main(Main.java:97)

If it's a bug, to solve it, it's just necessary to change the class org.apache.camel.component.flatpack.DelimitedEndpoint as below :
- change the flied definition like this (and getter/setter to):
    private String delimiter = "","";
    private String textQualifier = ""\"""";

- and the the method createParser like this :
    public Parser createParser(Exchange exchange) throws InvalidPayloadException, IOException {
        Reader bodyReader = ExchangeHelper.getMandatoryInBody(exchange, Reader.class);
        Resource resource = getResource();
        if (delimiter == null || delimiter.equals(""""))
        	delimiter = "","";        
        if (textQualifier == null || textQualifier.equals(""""))
        	textQualifier = ""\"""";
        if (resource == null) {
            return getParserFactory().newDelimitedParser(bodyReader, delimiter.charAt(0), textQualifier.charAt(0));
        } else {
            return getParserFactory().newDelimitedParser(new InputStreamReader(resource.getInputStream()), bodyReader, delimiter.charAt(0), textQualifier.charAt(0), ignoreFirstRecord);
        }
    }

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-11 13:21:57.688,,,no_permission,,,,,,,,,,,,,,76364,,,Sun Apr 24 09:58:14 UTC 2011,,,,,,,0|i01sbj:,8357,,,,,,,,,11/Aug/10 13:21;davsclaus;Ah we just need a String -> char type converter and we are all set.,11/Aug/10 14:28;davsclaus;trunk: 984420.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
LoggingErrorHandler interfere with onException,CAMEL-3044,12484779,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Aug/10 11:52,24/Apr/11 09:57,14/Mar/19 02:43,11/Aug/10 12:28,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"Looks like if you have an onException to catch and handle an exception, the logging error handler may interfere and cause the message to be logged as well, which causes the onException to kick in due the logging action is also a route process. (possible endless loop)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76365,,,Sun Apr 24 09:57:46 UTC 2011,,,,,,,0|i01sbb:,8356,,,,,,,,,11/Aug/10 12:28;davsclaus;trunk: 984390.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The OSGiIntegrationSpringTest's setup method is called twice,CAMEL-3040,12484712,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Aug/10 03:33,24/Apr/11 09:57,14/Mar/19 02:43,11/Aug/10 14:18,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"After checking the @Before annotation's java doc, you will find that the methods which are annotated with @Before will be called even it's in the superclasses.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:46.5,,,no_permission,,,,,,,,,,,,,,76366,,,Sun Apr 24 09:57:46 UTC 2011,,,,,,,0|i01saf:,8352,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel archetype complains about Java.lang.ClassNotFoundException: com.sun.xml.bind.v2.ContextFactory in JDK 1.5,CAMEL-3037,12484682,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Aug/10 11:57,24/Apr/11 09:57,14/Mar/19 02:43,12/Aug/10 08:24,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Camel-2-4-0-NoClassDefFoundError-org-springframework-context-SmartLifecycle-appears-in-camel-in-acti-td2268328.html#a2268328",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-12 08:24:16.938,,,no_permission,,,,,,,,,,,,,,76367,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,0|i01s9r:,8349,,,,,,,,,12/Aug/10 08:24;davsclaus;Willem have committed a fix for this,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-web seems a bit borked viewing an endpoint in tomcat,CAMEL-3036,12485044,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,jstrachan,jstrachan,09/Aug/10 10:23,24/Apr/11 09:57,14/Mar/19 02:43,09/Aug/10 11:42,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"e.g. try ""mvn tomcat:run"" then try navigate to an endpoint to try send a message to it.",,,,,,,,,,,,,,,,,CAMEL-3035,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:28.095,,,no_permission,,,,,,,,,,,,,,76368,,,Sun Apr 24 09:57:28 UTC 2011,,,,,,,0|i01s9j:,8348,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Auto assigned CamelContext id should be unique in the JVM,CAMEL-3031,12484839,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Aug/10 05:42,24/Apr/11 09:58,14/Mar/19 02:43,07/Aug/10 10:20,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/multiple-camel-contexts-as-viewed-from-JMX-tp2265902p2265902.html

Route ids are being unique, so we should be able to do that for CamelContext id as well. And we should reject starting an application if an existing CamelContext exists with the same id. This applies to JMX.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-06 19:05:12.069,,,no_permission,,,,,,,,,,,,,,76369,,,Sun Apr 24 09:58:08 UTC 2011,,,,,,,0|i01s8f:,8343,,,,,,,,,06/Aug/10 08:40;davsclaus;I will implement a check which will fail starting a CamelContext if another context has been registered in JMX with the same ObjectName,"06/Aug/10 19:05;akarpe;Hi Claus,

This is a rather serious issue. I also verified that direct endpoints for camel contexts with the same context id in 2 different bundles cannot see each other. However they can indeed see each other using VM endpoints.

It seems Camel creates 2 separate camel contexts ignoring the fact that they have the same context id. i would have thought Spring would not allow this to happen and would use an existing bean and not instantiate a fresh one if the id was the same. 

In JMX, however, Camel seems to lists both contexts against the same context id.

Not sure whether the fix should be that the route should not be instantiated if a context already exists under the same name. I would hae thought Spring beahvior would be to automatically use the existing bean of the given id instead of failing. Also is a bundle the determinant for failure...?
Would this not be a problem then for applications that use Spring but not OSGi and do want to re-use the camel context...

Is it not better to see if a context already exists and re-use it... ?

Regards,

Ashwin... ","06/Aug/10 19:56;akarpe;Hi Claus,

Ben and I are working on the same customer project where we ran into this issue. The version of Camel that the customer is using is Camel version 2.2. The deployment is on a FUSE OSGi container version 4.2.0

Hope this helps.

Cheers,

Ashwin...
 ","07/Aug/10 07:05;davsclaus;When you define a <camelContext/> in a XML file, you have 2 choices
a) the id can be explicit given
b) no id given

In the former case Camel will use this id as the bean id in Spring ApplicationContext and as well for JMX.
In the latter Camel will auto assign an unique id to be used in Spring ApplicationContext and as well for JMX.

There are 2 problems with the current code

1)
When registering a CamelContext in JMX, Camel would ignore if an existing CamelContext with the same id was already registered. This means that you would end up with 2 different CamelContext's merged into the same. This means you cannot manage the 2nd CamelContext, for example to stop it etc as it would not be enlisted. Also when the 1st is unregistered, you would leave mbeans _hanging_ in there for the 2nd which doensn't have a CamelContext etc.  Also there are problems with clashes of endpoint uris, error handlers, tracers etc.

Bottom line we end up with mixed data. 

2)
In OSGi the auto assigned unique name is *not* unique because OSGi causes the atomic counter to be multiple instances so you end up with Camel ids' all being {{camel-1}}. This works in non OSGi environments such as WARs etc.


All these problems can of course be resolved by explicit assigning an unique id for you <camelContext>'s.


We will also try to enhance the auto assigned unique name in OSGi to include bundle id etc. so it brings more value for you. So if you bundle has given id 147, then the auto assigned id should be {{camel-147}} etc.

","07/Aug/10 07:08;davsclaus;{quote}
Is it not better to see if a context already exists and re-use it... ?
{quote}

No a CamelContext should really be isolated and live by itself. And this should also be reflected in JMX.
",07/Aug/10 10:20;davsclaus;trunk: 983197.,"11/Aug/10 02:57;njiang;@Claus,

I just didn't some test about camelContext name within the OSGi container,  I don't find the issue of static atomic counter which causes all the camel id end up with camel-1.
But I agree to add the bundle id in to the camelContext which will help user to find their camel context easily.

","11/Aug/10 03:22;njiang;I just found there are something wrong with the CamelContextFactoryBean's createCamelContext.
It will set the camelcontext id with id name which could be an implicit one, and it will override the OsgiCamelContextNameStratgy which an ExplicitCamelContextNameStratgy.

So I made some change in the trunk: 984294",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,
camel-cxf consumer should support take the fault message,CAMEL-3022,12485423,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Aug/10 13:52,24/Apr/11 09:57,14/Mar/19 02:43,03/Aug/10 14:12,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,"CxfConsumer will try to cast the fault message body to a Throwable, if  the fault message body is any other message, it will cause some trouble like this.
{code}
java.lang.ClassCastException: javax.xml.transform.dom.DOMSource cannot be cast to java.lang.Throwable
at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:99)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:110)
at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:312)
at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:276)
at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:05.99,,,no_permission,,,,,,,,,,,,,,76370,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,0|i01s6f:,8334,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Building not possible with maven3,CAMEL-3018,12487429,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,norman,norman,02/Aug/10 11:49,24/Apr/11 09:57,14/Mar/19 02:43,02/Aug/10 12:55,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"maven3 is a way stricter with duplicated specified dependencies, so its not possible to compile camel with it. ",,,,,,,,,,,,,,,,,,02/Aug/10 11:50;norman;camel-pom.diff;https://issues.apache.org/jira/secure/attachment/12463321/camel-pom.diff,27/Aug/10 11:39;danielbevenius;pom.patch;https://issues.apache.org/jira/secure/attachment/12463317/pom.patch,26/Aug/10 11:32;danielbevenius;pom.patch;https://issues.apache.org/jira/secure/attachment/12463316/pom.patch,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2010-08-02 12:55:02.678,,,no_permission,,,,,,,,,,,,,,76371,,,Sun Apr 24 09:57:50 UTC 2011,,,Patch Available,,,,0|i01s5j:,8330,,,,,,,,,02/Aug/10 11:50;norman;This patch fix it,"02/Aug/10 12:55;davsclaus;trunk: 981492.

Thanks Norman for the patch. I have applied it to trunk.","26/Aug/10 09:58;danielbevenius;I'm having issues when using maven3 as well. I get the following;

c-dc9ee055:camel-web danbev$ mvn clean install
[INFO] Scanning for projects...
[INFO] snapshot org.apache.camel:camel-parent:2.5-SNAPSHOT: checking for updates from java.net.m2
[INFO] snapshot org.apache.camel:camel-parent:2.5-SNAPSHOT: checking for updates from fusesource.snapshots
[INFO] snapshot org.apache.camel:camel:2.5-SNAPSHOT: checking for updates from java.net.m2
[INFO] snapshot org.apache.camel:camel:2.5-SNAPSHOT: checking for updates from fusesource.snapshots
[ERROR] The build could not read 1 project -> [Help 1]
[ERROR]   The project org.apache.camel:camel-web:2.5-SNAPSHOT (/Users/danbev/work/apache/camel/trunk/components/camel-web/pom.xml) has 1 error
[ERROR]     'repositories.repository.id' must be unique: glassfish-repo-archive -> http://maven.glassfish.org/content/groups/glassfish vs http://maven.glassfish.org/content/groups/glassfish
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException

There is indeed a duplicate in components/web/pom.xml (pom.patch attached). 

Using the patch I'm able to build but I get failures during the test phase which I'm looking into at the moment. 


",26/Aug/10 10:01;danielbevenius;patch for components/camel-web/pom.xml,26/Aug/10 11:26;davsclaus;Daniel you have to attached the file with copyright assigned to Apache. eg there must be this apache feather logo on the attached file.,26/Aug/10 11:32;danielbevenius;Checked the wrong box when attaching previously.,26/Aug/10 11:42;davsclaus;Thanks Daniel. I have applied the patch to trunk: 989608.,"27/Aug/10 11:39;danielbevenius;Sorry about adding comments this jira but I found another issue...
Problem
=======
Running 'mvn eclipse:eclipse' using maven3 causes the following build failure:
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.220s
[INFO] Finished at: Fri Aug 27 12:25:55 CEST 2010
[INFO] Final Memory: 59M/117M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-eclipse-plugin:2.9-SNAPSHOT:eclipse (default-cli) on project camel-core: Unable to resolve resource location: /camel-eclipse-checkstyle -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR]
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-core


When running with maven2 these are the dependencies for the maven-eclipse-plugin:
[DEBUG] Plugin dependencies for:

org.apache.maven.plugins:maven-eclipse-plugin:2.5.1

are:

org.apache.camel:camel-buildtools:jar:2.5-SNAPSHOT:compile
org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-7:runtime
org.apache.maven:maven-project:jar:2.0.8:runtime
org.apache.maven:maven-plugin-api:jar:2.0.8:runtime
org.apache.maven:maven-model:jar:2.0.8:runtime
org.apache.maven:maven-artifact-manager:jar:2.0.8:runtime
org.apache.maven:maven-artifact:jar:2.0.8:runtime
org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime
org.codehaus.plexus:plexus-interactivity-jline:jar:1.0-alpha-5:runtime
org.apache.maven:maven-archiver:jar:2.2:runtime
org.codehaus.plexus:plexus-resources:jar:1.0-alpha-4:runtime
biz.aQute:bndlib:jar:0.0.145:runtime
org.apache.maven.shared:maven-osgi:jar:0.2.0:runtime
org.eclipse.core:resources:jar:3.3.0-v20070604:runtime

Notice how 'org.apache.camel:camel-buildtools:jar:2.5-SNAPSHOT:compile' in the list above. This the jar that camel-eclipse-checkstyle is in but when running with maven3 it is not. 
I've added 'camel-buildtools' as a dependency to the eclipse-maven-plugin in parent/pom.xml (attached pom.patch) and this then worked for both maven2 and maven3.
",27/Aug/10 11:39;danielbevenius;Patch for parent/pom.xml,"27/Aug/10 11:46;davsclaus;why is mvn eclipse:eclipse needed? Can't you just open a pom.xml from Eclipse? Would make more sense as maintaining the eclipse stuff is done by Eclipse itself and not from eg Camel.

","27/Aug/10 11:58;njiang;@Claus,
The eclipse plugin needs to set up the checkstyle configure on the eclipse project, and the checkstyle file is part of camel-buildtools.
I think it make sense to add this module dependency on the parent pom.
","27/Aug/10 12:00;danielbevenius;> why is mvn eclipse:eclipse needed? Can't you just open a pom.xml from Eclipse?
Old habit :) I'll try that instead. Thanks","27/Aug/10 12:16;davsclaus;Daniel let us know if Eclipse got smart and is capable of loading a pom.xml file. 

I will apply the patch. But first I give it a run on my maven 2.2.1.
","27/Aug/10 12:33;danielbevenius;>Daniel let us know if Eclipse got smart and is capable of loading a pom.xml file.
Worked like a charm. Thanks!",27/Aug/10 13:10;davsclaus;Applied patch to trunk: 990132,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,
MailConsumer - Use OnCompletion for commit/rollback,CAMEL-3015,12485318,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jul/10 09:21,24/Apr/11 09:57,14/Mar/19 02:43,30/Jul/10 09:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-mail,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Mail-component-velocity-and-NullpointerException-td2256742.html#a2259340

This ensure the mail message is kept and we can do commit/rollback without impact of mail message being lost during the routing",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76372,,,Sun Apr 24 09:57:41 UTC 2011,,,,,,,0|i01s4v:,8327,,,,,,,,,30/Jul/10 09:46;davsclaus;trunk: 980707.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using multiple CamelContext with quartz scheduler so keep track of the individual camel contexts,CAMEL-3011,12485406,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/10 10:03,24/Apr/11 09:58,14/Mar/19 02:43,29/Jul/10 10:10,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,"The default will by default only register the first CamelContext. Which is used in non statefull jobs to lookup endpoints etc.

Instead the camel-quartz component should keep track of all the different camel contexts and use the id of the context on the job so it can lookup the context.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76373,,,Sun Apr 24 09:58:25 UTC 2011,,,,,,,0|i01s3z:,8323,,,,,,,,,"29/Jul/10 10:10;davsclaus;trunk: 980386.

Also fixed potential issue with restarting/resuming a route which adds a job premature and causing the job to fire before the route has been fully started. Now adding jobs is deferred.","29/Jul/10 10:11;davsclaus;For example you could have multiple camel contexts running and suspend one of them, this means the scheduler is still started and active for the other camel context. Now resuming the first context will re-add the job to the scheduler. Which must be deferred so the route is fully started, so when the job is triggered it has a fully started route to process.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Starting CamelContext with autoStartup=false should startup JMX connector,CAMEL-3008,12485437,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/10 04:03,24/Apr/11 09:58,14/Mar/19 02:43,30/Jul/10 15:11,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"I recall some user saying something about JMX appears to not be loaded if he has autoStartup=false on the CamelContext.
It should only be the routes which are not started. The other stuff should start.

You may need to use JMX to start the routes there after :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76374,,,Sun Apr 24 09:58:26 UTC 2011,,,,,,,0|i01s3b:,8320,,,,,,,,,30/Jul/10 15:11;davsclaus;trunk: 980821.,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding route from XML should honor its autoStartup flag,CAMEL-3007,12485225,12485205,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/10 04:01,24/Apr/11 09:57,14/Mar/19 02:43,04/Aug/10 12:29,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"If a route is adding after CamelContext has been started, then it's autoStartup flag should be honored. In case the flag is autoStartup=false, the route should not be auto started.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76375,,,Sun Apr 24 09:57:57 UTC 2011,,,,,,,0|i01s33:,8319,,,,,,,,,"29/Jul/10 04:01;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Auto-Start-up-issue-when-adding-RouteDefintions-tp2256671p2256671.html","29/Jul/10 04:04;davsclaus;Also routes loaded form XML stream may have to have it prepared before it can be added as a route. e.g. setting parent, onException etc. like we do for camel-spring.",04/Aug/10 12:11;davsclaus;trunk: 982228.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
Endpoints are recreated instead or restarted,CAMEL-3001,12485530,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wtam,wtam,27/Jul/10 15:46,24/Apr/11 09:57,14/Mar/19 02:43,29/Jul/10 10:54,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"The change (r979549) made by CAMEL-2991 causes every single endpoint to be recreated instead of restarted which takes Camel a (quite big) step back.  It is bad for the following reasons:

1) recreating services associated could be expensive (the design should not assume recreating the services is cheap).
2) states (if any) in Endpoint/Service could not be preserved (stop does not mean destroy after all).   
3) it is unnecessary to recreate to the whole shebank and it is an unexpected behavior for the users.  (Users think stop but it is gone.)

In the code (DefaultCamelContext.doStartCamel()), one can clearly see the original intent of the author (who even bothered to put in a nice comment) is to avoid re-initialization the route definition after stopping the camel context.  (Well, things may change but not necessarily for the better.)

{code}
       // To avoid initiating the routeDefinitions after stopping the camel context
        if (!routeDefinitionInitiated) {
            startRouteDefinitions(routeDefinitions);
            routeDefinitionInitiated = true;
        }
{code}

But, the change simply reset the routeDefinitionInitiated flag in doStop() which is the exact opposite of the original intention and routeDefinitionInitiated is unless pretty much.  :-( 
",,,,,,,,,,,,,,,,,CAMEL-3012,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-27 16:05:37.556,,,no_permission,,,,,,,,,,,,,,76376,,,Sun Apr 24 09:57:37 UTC 2011,,,,,,,0|i01s1r:,8313,,,,,,,,,"27/Jul/10 16:05;davsclaus;Thanks for being so cheerful.

Stopping a CamelContext means shutting it down. It's primary intent is to shutdown in a reliable and graceful manner!

A CamelContext is *not* meant to be pause and resumed on-the-fly at your will.

You can do that on the consumers, if you want to pause activity in Camel.
And some consumer is specialized for that as they are {{SuspendableService}}

","28/Jul/10 14:05;davsclaus;I am working on adding a
- {{suspend}}
- {{resume}}

methods to {{CamelContext}}. This allows you to suspend Camel, which suspends/stops all the active routes. This ensure the other stuff is still _warm_ which makes resuming {{CamelContext}} faster as its a matter of resuming/starting the previously suspended routes.

The implication is as with graceful shutdown, the ordering of how this is done between the routes matter. So the logic need to cater for this.","29/Jul/10 09:12;davsclaus;trunk: 980370.

Committed suspend/resume to CamelContext to be used for hot restarts.","29/Jul/10 10:54;davsclaus;Created a new ticket to better name the intend.

Just from a single test I did with the CxfBeanTest
- cold restart = 1.2 sec
- warm restart = 0.2 sec",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
"charset parser should cater for quotes, both single and double quotes",CAMEL-2995,12485476,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,26/Jul/10 14:21,24/Apr/11 09:58,14/Mar/19 02:43,29/Jul/10 09:59,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-http,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/issue-with-encoding-when-using-HTTP-component-td2227887.html#a2227887

I bet many systems may report charset in different ways such as
{code}
Content-Type:text/xml;charset=""utf-8"" 
Content-Type:text/xml;charset='utf-8' 
Content-Type:text/xml;charset=utf-8 
{code}

We should ensure that we support all ways of setting this. And there may also be spaces between so we should trim and whatnot.

The code in 2.4 may have been improved. Just creating a ticket to be sure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76377,,,Sun Apr 24 09:58:12 UTC 2011,,,,,,,0|i01s0f:,8307,,,,,,,,,"27/Jul/10 06:26;davsclaus;Maybe camel-mail also have such an issue?

If possible create a util method in camel-core so it can be used in other components.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - CxfClientCallback is invoked twice when only one was expected,CAMEL-2994,12485607,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,26/Jul/10 11:21,24/Apr/11 09:57,14/Mar/19 02:43,26/Jul/10 13:29,2.5.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,"Run the test CXFWsdlOnlyTest

Because CXF invokes the CxfClientCallback 2 times there is a race condition with 2 threads wanting to complete routing the Exchange.

You can then end up with errors such as
{code}
>>>>>>>>>
2010-07-26 13:22:13,305 [default-workqueue-1                ] INFO  Logger                         - Exchange[Message: [Body is instance of java.io.InputStream]]
Exception in thread ""default-workqueue-1"" java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:153)
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:77)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:55)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2144)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:253)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)
2010-07-26 13:22:13,305 [default-workqueue-2                ] INFO  Logger                         - Exchange[Message: [Body is instance of java.io.InputStream]]
Exception in thread ""default-workqueue-2"" java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:153)
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:77)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:55)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2144)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:253)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)
{code}

CXF should only invoke the {{org.apache.cxf.endpoint.ClientCallback}} one time as we have only registered this once.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-26 13:29:07.131,,,no_permission,,,,,,,,,,,,,,76378,,,Sun Apr 24 09:57:55 UTC 2011,,,,,,,0|i01s07:,8306,,,,,,,,,"26/Jul/10 11:22;davsclaus;In the log above there is race with 2 threads
- ""default-workqueue-1""
- ""default-workqueue-2""
","26/Jul/10 13:29;njiang;
RawMessageContentRedirectInterceptor should not close the OutputStream as it will be closed by the interceptor chain.
I just committed a patch for it.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restart CamelContext won't restart services on CxfBeanEndpoint,CAMEL-2991,12485562,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wtam,wtam,25/Jul/10 03:02,24/Apr/11 09:58,14/Mar/19 02:43,27/Jul/10 06:23,,,,,,,,,,,,,2.5.0,,,,camel-core,camel-cxf,,,0,,,,,,"A route that sends to a CxfBean destination is unusable after the CamelContext has been stopped and re-started.  The following is an example of a route that demonstrates the problem.

{code}
	<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
		<route>
			<from uri=""jetty:http://localhost:9000?matchOnUriPrefix=true"" />
			<to uri=""cxfbean:customerServiceBean"" />
		</route>
	</camelContext>

	<util:list id=""customerServiceBean"">
		<bean class=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"" />
	</util:list>
{code}

The follow issues have been identified.

1) SendProcessor should implement the Navigate interface so that its children (if they are Services) can be managed by the lifecycle methods.  This will address any destination endpoint that requires services to be re-started.

2) CxfBeanEndpoint should be a Service itself.  The reason why the start() on CxfBeanEndpoint gets called during the first start is because CxfBeanComponent.start() gets invoked during route definition initialization.   The problem is that re-starting doesn't trigger the CxfBeanComponent.start() method.  Therefore, putting the hook in CxfBeanComponent to start/stop CxfBeanEndpoint was a bug.

3) The default type converter which is a Service won't get ""re-started' as the (lazy-instantiation) getTypeConverter() method won't perform addService() on a created but ""stopped' typeConverter.  We need to discuss the correct remedy since I am not sure how to fix it.  It is kind of strange that the type converter is a service (which has the start/stop semantics) and yet it can be used even the CamelContext is stopped (or never started).  In the patch, I just set the type converter to null in DefaultCamelContext doStop() for now.",,,,,,,,,,,,,,,CAMEL-3001,,,26/Jul/10 15:46;wtam;CAMEL-2991-test-case.txt;https://issues.apache.org/jira/secure/attachment/12463309/CAMEL-2991-test-case.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-07-25 06:50:45.44,,,no_permission,,,,,,,,,,,,,,76379,,,Sun Apr 24 09:58:12 UTC 2011,,,,,,,0|i01rzj:,8303,,,,,,,,,25/Jul/10 06:50;davsclaus;Which runtime are you using? OSGi or something else?,"25/Jul/10 06:53;davsclaus;BTW Doing a stop/start of CamelContext is not 100% safe to be totally possible to restart.
The mantra is to create a new context instead. ","25/Jul/10 07:28;davsclaus;trunk: 978994.

I have fixed the issue in CamelContext to re-initialize type converter registry on restart","26/Jul/10 06:02;davsclaus;trunk: 979164.

a)
Endpoint is now a Service which means (#2) CxfBeanEndpoint is now also a Service.

b)
TypeConverter now check state that it's started when being used.","26/Jul/10 07:31;davsclaus;Hmm the logic in {{CxfBeanDestination}} is a bit peculiar

The {{active}} method is invoked when {{org.apache.cxf.endpoint.Server}} is started from {{CxfBeanEndpoint}} in the {{createServer}} method.
Then the {{active}} method will lookup a shared {{CxfBeanEndpoint}} which is stored on {{CxfBeanComponent}}.

The problem is that this shared endpoint instance will have the {{setProcessor}} invoked, which then *overrides* a previously set processor.

I don't know a good solution to this at this point. Maybe there is a bit impedance mismatch between the CXF API lifecycle and Camel's lifecycle API.","26/Jul/10 07:44;davsclaus;I found a problem in {{CamelDestination}} as it just creates a new {{DefaultCamelContext}}

{code}
    public CamelContext getCamelContext() {
        if (camelContext == null) {
            getLogger().log(Level.INFO, ""No CamelContext injected, create a default one"");
            camelContext = new DefaultCamelContext();
        }
        return camelContext;
    }
{code}

This is a big no no. And I have fixed the issue as the CamelContext can be obtained from the {{CxfBeanComponent}} which has the context injected.

Also there was an issue when creating a CxfConsumer and if that failed with an Exception it was just logged. Instead a FailedToCreateConsumerException should be thrown. We should fail fast in such cases.


Fixed the above issue and polished the code and javadoc

trunk: 979188.",26/Jul/10 15:50;wtam;@claus  I tried your fixes but my route is still unusable after CamelContext is restarted.  I attached the test case and assign to you.  Thanks for looking at it.,"27/Jul/10 06:23;davsclaus;trunk: 979549.

I found an issue in camel-core and the test now works.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,
IllegalStateException in CamelContinuationServlet under heavy load,CAMEL-2986,12485716,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,mrt1nz,mrt1nz,mrt1nz,22/Jul/10 19:19,24/Apr/11 09:58,14/Mar/19 02:43,22/Jul/10 19:27,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jetty,,,,0,,,,,,"Reason is a race between continuation.suspend() and continuation.resume(). It can occur that continuation.resume() is executed before continuation.suspend() leading to an IllegalStateException thrown by Jetty:

{noformat}
java.lang.IllegalStateException: DISPATCHED,initial
    at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:364)
    at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:769)
    at org.apache.camel.component.jetty.CamelContinuationServlet$1.done(CamelContinuationServlet.java:85)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
    at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:104)
    at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
    at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
{noformat}

This is the case when an async completion callback is faster than the thread that is concurrently executing the {{if (continuation.isInitial())}} block. 

I'll commit a fix soon that also follows the recommendations in http://wiki.eclipse.org/Jetty/Feature/Continuations to always call continuation.suspend() before registering the continuation with a callback handler.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:58:10.176,,,no_permission,,,,,,,,,,,,,,76380,,,Sun Apr 24 09:58:10 UTC 2011,,,,,,,0|i01ryf:,8298,,,,,,,,,22/Jul/10 19:27;mrt1nz;Fixed with revision 966815,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa doesn't use EntityManager.merge(entity) in the right way,CAMEL-2980,12485488,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,21/Jul/10 14:55,24/Apr/11 09:57,14/Mar/19 02:43,05/Aug/10 12:35,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jpa,,,,0,,,,,,"The EntityManager.merge(entity) method returns the merged entity. The exchange in message body should be updated with the merged entity (what camel-jpa currently not do).
I running into this problem, because after saving an entity in the database, the id field was still null. So, we don't know, which entity in the database is the corresponding to this entity... :-(

Have a look in the process method of [JpaProducer|http://svn.apache.org/viewvc/camel/trunk/components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaProducer.java?view=markup] and the Java doc from the [EntityManager|http://download.oracle.com/docs/cd/E17477_01/javaee/5/api/javax/persistence/EntityManager.html#merge%28T%29].

Christian",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-23 04:48:55.81,,,no_permission,,,,,,,,,,,,,,76381,,,Sun Apr 24 09:57:46 UTC 2011,,,,,,,0|i01rx3:,8292,,,,,,,,,"21/Jul/10 22:30;muellerc;I modified in my workspace the [JpaTest.java|http://svn.apache.org/viewvc/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaTest.java?view=markup].

old:
{code}
        template.send(endpoint, new Processor() {
            public void process(Exchange exchange) {
                exchange.getIn().setBody(new SendEmail(""foo@bar.com""));
            }
        });
{code}

new:
{code}
        Exchange returnedExchange = template.send(endpoint, new Processor() {
            public void process(Exchange exchange) {
                exchange.getIn().setBody(new SendEmail(""foo@bar.com""));
            }
        });
        
        SendEmail sendEmail = returnedExchange.getIn().getBody(SendEmail.class);
        assertEquals(""address property"", ""foo@bar.com"", sendEmail.getAddress());
        assertNotNull(""id property should set"", sendEmail.getId());
{code}

This fails with:
{code}
java.lang.AssertionError: id property should set
	at org.junit.Assert.fail(Assert.java:91)
	...
{code}

After switching from EntityManager.merge(entity) to EntityManager.persist(entity), the test succeed.

Because of this and [CAMEL-2982|https://issues.apache.org/activemq/browse/CAMEL-2982], my question is: ""Should we in general switch from EntityManager.merge(entity) to EntityManager.persist(entity)?"" Is there a reason to use EntityManager.merge(entity)?

Christian","22/Jul/10 21:30;muellerc;The following two posts explains, why we need the EntityManager.merge(entity) method. In short, we need it (only) for updates:
- http://openjpa.apache.org/builds/1.2.2/apache-openjpa-1.2.2/docs/manual/jpa_overview_em_lifecycle.html
- http://openjpa.208410.n2.nabble.com/persisting-an-entity-and-JPA-behaviour-with-referenced-entities-td210469.html

I'm wondering, if EntityManager.persist(entity) is a better default than EntityManager.merge(entity)? I could imagine, that most of the user insert a new entity in the database instead of updating an existing entity.
- Pro: EntityManager.persist(entity) do not execute a select query for each entity which should be stored.
- Con: EntityManager.persist(entity) doesn't work for detached entities (executing an UPDATE instead of an INSERT).

Christian",23/Jul/10 04:48;davsclaus;Christian I think we should add an option so end users can choose if they want to use {{merge}} or {{persist}}. The default value could be the current one.,25/Jul/10 12:23;davsclaus;Christian I think you have fixed this with the new option? If so close this ticket,"26/Jul/10 21:28;muellerc;Unfortunately not. I have fixed [CAMEL-2982|https://issues.apache.org/activemq/browse/CAMEL-2982] with the new 'usePersist' option. What I have to change for this issue is something like this:

is:
{code}
entityManager.merge(entity); 
{code}

shall:
{code}
Object managedEntity = entityManager.merge(entity);
exchange.getIn().setBody(managedEntity);
{code}

But this is not so trivial, because the input could be not only an annotated entity, it could also be a list, map, ... and in the current implementation we iterate over a collection (which may be only have one entry):

{code}
public void process(Exchange exchange) {
  exchange.getIn().setHeader(JpaConstants.JPA_TEMPLATE, endpoint.getTemplate());
  final Object values = expression.evaluate(exchange, Object.class);
  if (values != null) {
    template.execute(new JpaCallback() {
      public Object doInJpa(EntityManager entityManager) throws PersistenceException {
        Iterator iter = ObjectHelper.createIterator(values);
          Object value = iter.next();
          if (endpoint.isUsePersist()) {
            entityManager.persist(value);
          } else {
            entityManager.merge(value);
          }
        }
        if (endpoint.isFlushOnSend()) {
          entityManager.flush();
        }
        return null;
      }
    });
  }
  exchange.getIn().removeHeader(JpaConstants.JPA_TEMPLATE);
} 
{code}

Christian","26/Jul/10 21:52;muellerc;The Camel JPA [wiki page|http://camel.apache.org/jpa.html] explains, that: ""_The body of the In message is assumed to be an entity bean (that is, a POJO with an @Entity annotation on it)._""
I wonder, whether the wiki page is outdated (because the code looks like that we support also collections, ... as body). To be sure, first I will write some unit tests for this...

Christian",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,
FtpComponent: If login fails and disconnect=true another connection is opened.,CAMEL-2979,12485630,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ankelee,ankelee,21/Jul/10 09:07,24/Apr/11 09:57,14/Mar/19 02:43,22/Jul/10 15:00,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,"In a route such as below a second connection to the ftp server is opened if the login fails.

<route> 
        <from uri=""ftp:localhost/inbox/?username=usr&password=pwd&disconnect=true&consumer.delay=60s&maximumReconnectAttempts=0"" /> 
        <to uri=""file:test_data"" /> 
</route> 

Further description: http://camel.465427.n5.nabble.com/FTP-Try-login-once-and-disconnect-if-failure-td1692660.html#a1692660

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-22 14:32:15.7,,,no_permission,,,,,,,,,,,,,,76382,,,Sun Apr 24 09:57:22 UTC 2011,,,,,,,0|i01rwv:,8291,,,,,,,,,"22/Jul/10 14:32;davsclaus;Ah yeah Camel will re-connect if the first connection fails. I am fixing this so it will not do this if {{maximumReconnectAttempts=0}} as you have configured.

So when you configure {{maximumReconnectAttempts=0}} then Camel should never try to re-connect.","22/Jul/10 15:00;davsclaus;trunk: 966699, 966700.

","22/Jul/10 15:39;davsclaus;Andreas if you want to test this you need to update both camel-core and camel-ftp to 2.5-SNAPSHOT versions.

Apache should build and upload SNAPSHOTs nighly on their maven server. You can see details here
http://camel.apache.org/download.html

Otherwise I can attach the .jars to this ticket.","23/Jul/10 11:45;ankelee;Hi I've tested this and it works.

When logging in with incorrect user/pass it only polls once and skips, which is nice.
However could it be possible for the component to throw an exception as I would like to catch this exception and make sure that no further polls are done to the ftp (ie shut down the route/application).",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
java.net.SocketException: Too many open files with Apache Camel(Netty TCP) 2.4.0.,CAMEL-2978,12485603,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,seanparsons,seanparsons,20/Jul/10 22:46,24/Apr/11 09:57,14/Mar/19 02:43,26/Jul/10 13:33,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-netty,,,,0,,,,,,"I've got a unit test that works fine with Apache Camel 2.3.0, but as soon as I upgraded to 2.4.0 it consistently started to fail.

It performs a number of concurrent requests using this url:
netty:tcp://localhost:2048?sync=true
In both the client and server side of the unit test.

There's also a sister test which does the same thing with Netty directly and that works in isolation, so it would appear something has been broken in the transition to 2.4.0.  Previously this code was also using a beta version of Netty, but even updating that specific dependency has made no difference.","Linux laptop 2.6.32-24-generic #38-Ubuntu SMP Mon Jul 5 09:20:59 UTC 2010 x86_64 GNU/Linux
java version ""1.6.0_20""
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) 64-Bit Server VM (build 16.3-b01, mixed mode)",,,,,,,,,,,,,,,,,25/Jul/10 19:11;seanparsons;Camel2978Test.java;https://issues.apache.org/jira/secure/attachment/12463299/Camel2978Test.java,21/Jul/10 20:27;seanparsons;CamelBreakingTest.groovy;https://issues.apache.org/jira/secure/attachment/12463271/CamelBreakingTest.groovy,25/Jul/10 13:21;seanparsons;CamelBreakingTest2.groovy;https://issues.apache.org/jira/secure/attachment/12463298/CamelBreakingTest2.groovy,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2010-07-20 23:07:21.079,,,no_permission,,,,,,,,,,,,,,76383,,,Sun Apr 24 09:57:29 UTC 2011,,,,,,,0|i01rwn:,8290,,,,,,,,,"20/Jul/10 23:07;hadrian;Sean, could you attach the unit test so that we take a look?",21/Jul/10 07:33;davsclaus;Camel 2.4 uses the latest release of Netty which is 3.2.1. Camel 2.3 used an older release.,"21/Jul/10 20:27;seanparsons;This Groovy file manifests the issue, the @Grab annotation for camel-netty can be changed between 2.3.0 and 2.4.0 with the latter throwing the exceptions.  This also uses the latest version of Netty in both cases.","25/Jul/10 12:14;davsclaus;You should *not* create a new instance of producer template when sending
{code}
 def producerTemplate = context.createProducerTemplate();
{code}

See this FAQ
http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html",25/Jul/10 13:21;seanparsons;Updated script to not create the ProducerTemplate on each send.,25/Jul/10 13:22;seanparsons;The issue still occurs even if the ProducerTemplate isn't being created on each send.,25/Jul/10 18:14;davsclaus;Can you create an example in pure java. For example as a JUnit test. Then we can use that as a test in camel-netty and much easier to use to lookup into the issue.,25/Jul/10 19:11;seanparsons;One Java based unit test that causes the same issue.,"26/Jul/10 13:14;davsclaus;Sean

Thanks for the test. I am looking into it right now and appears to have a fix.

Can you try with Camel 2.4.0 to disable timeout. You do this to set {{timeout=0}} in the endpoint uri.
The bug seems to be a timeout timer from Jetty which should have been shared and not prototype scoped :)","26/Jul/10 13:33;davsclaus;trunk: 979276.

Sean fell free to also test with latest code from trunk.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,
onException not working correctly when using routeContext,CAMEL-2972,12485541,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ankelee,ankelee,20/Jul/10 11:46,24/Apr/11 09:57,14/Mar/19 02:43,27/Jul/10 16:09,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"When using a routeContext, the last (in the xml-file) defined route-scoped <onException> configuration is shared by the other routes in the context.

http://camel.465427.n5.nabble.com/possible-onException-bug-when-using-routeContext-td1616244.html#a1616244",,,,,,,,,,,,,,,,,,26/Jul/10 05:55;spohl;CAMEL-2972.patch;https://issues.apache.org/jira/secure/attachment/12463300/CAMEL-2972.patch,20/Jul/10 11:50;ankelee;PerRouteOnExceptionTest.zip;https://issues.apache.org/jira/secure/attachment/12463314/PerRouteOnExceptionTest.zip,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-07-26 05:55:54.407,,,no_permission,,,,,,,,,,,,,,76384,,,Sun Apr 24 09:57:54 UTC 2011,,,,,,,0|i01rvb:,8284,,,,,,,,,20/Jul/10 11:50;ankelee;Sample demonstrating the issue.,26/Jul/10 05:55;spohl;here is the bug fix,"27/Jul/10 12:54;davsclaus;Silvio thanks for the patch.

However the fix requires a bit more work as the {{exchange.getFromRouteId()}} is the starting route id, and you could have the Exchange routed in multiple routes and one of them have a route scoped onException which should trigger.

I got it fixed but it revealed an issue when you perform RecipientList EIP pattern in parallel mode. So the bonus is that we fix an issue in there as well.",27/Jul/10 16:09;davsclaus;trunk: 979762.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
camel feature of spring2.5 is deployed with wrong name ,CAMEL-2968,12485690,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Jul/10 08:33,24/Apr/11 09:57,14/Mar/19 02:43,20/Jul/10 08:34,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"Camel 2.4.0 karaf feature with spring 2.5 is deployed with spring3 name.
http://repo2.maven.org/maven2/org/apache/camel/karaf/apache-camel/2.4.0/apache-camel-2.4.0-features-spring3.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:05.013,,,no_permission,,,,,,,,,,,,,,76385,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,0|i01ruf:,8280,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dead letter channel - Should enforce the MEP to be InOnly,CAMEL-2963,12485733,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,19/Jul/10 08:40,24/Apr/11 09:57,14/Mar/19 02:43,19/Jul/10 10:19,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"When a message is moved into DLQ the MEP should be enforced to be InOnly as we should not expect a reply. For example if using a JMS queue as DLQ. To avoid JmsProducer will expect a reply and wait for it, which never comes and then timeout after 20 sec.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76386,,,Sun Apr 24 09:57:56 UTC 2011,,,,,,,0|i01rtb:,8275,,,,,,,,,19/Jul/10 10:19;davsclaus;trunk: 965414.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - disableReplyTo is not used in JmsProducer,CAMEL-2962,12485649,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,19/Jul/10 08:32,24/Apr/11 09:57,14/Mar/19 02:43,19/Jul/10 09:12,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jms,,,,0,,,,,,The JmsProducer does not check the {{disableReplyTo}} option when sending the message.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76387,,,Sun Apr 24 09:57:11 UTC 2011,,,,,,,0|i01rt3:,8274,,,,,,,,,19/Jul/10 09:12;davsclaus;trunk: 965392.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.ConcurrentModificationException in Method org.apache.camel.util.CaseInsensitiveMap.putAll(),CAMEL-2958,12485769,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mouch,mouch,16/Jul/10 10:25,24/Apr/11 09:58,14/Mar/19 02:43,17/Jul/10 12:16,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"Every now and then I'm facing the ConcurrentModificationException. It very hard to reproduce. This is my stack trace:

Failed delivery for exchangeId: ba969718-9044-4261-bc57-ca10aafb0a03. Exhausted after delivery attempt: 1 caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException: null
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) [na:1.6.0_20]
        at java.util.HashMap$KeyIterator.next(HashMap.java:828) [na:1.6.0_20]
        at org.apache.camel.util.CaseInsensitiveMap.putAll(CaseInsensitiveMap.java:86) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.impl.MessageSupport.copyFrom(MessageSupport.java:142) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.impl.DefaultMessage.copyFrom(DefaultMessage.java:52) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.util.ExchangeHelper.copyResults(ExchangeHelper.java:199) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:114) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:51) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:75) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:71) [camel-http-2.3.0.jar:2.3.0]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) [javaee.jar:9.1]
...


Looks like CaseInsensitiveMap isn't enough thread save. But I have no idea what other thread is modifies the map. Most of the time everything is ok.","Ubuntu Linux 10.04 i386
Sun JDK 1.6.0_20-b02
Glassfish 2.1",,,,,,,,,,,,,,,,,16/Jul/10 12:23;mouch;CaseInsensitiveMap.java;https://issues.apache.org/jira/secure/attachment/12463311/CaseInsensitiveMap.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-07-17 10:05:52.198,,,no_permission,,,,,,,,,,,,,,76388,,,Sun Apr 24 09:58:03 UTC 2011,,,,,,,0|i01rs7:,8270,,,,,,,,,16/Jul/10 12:23;mouch;Suggestion for the fix,"17/Jul/10 10:05;davsclaus;Thanks for reporting.

The stacktrace looks as if the entry / map is empty. I wonder if that may have been the cause?

And the double lock idiom is not thread safe either (see eg Brian Goetz book, Java concurrency in practice).

I have modified the implementation a bit to be synchronized when using _write_ operations on the map.","17/Jul/10 12:16;davsclaus;trunk: 965065.

Christian you are welcome to try out source from trunk to see if you have any luck reproducing the issue on your system.","20/Jul/10 09:13;mouch;Hi Claus, thank's a lot for fixing this issue. I just built a ""private"" JAR from tags/2.3.0 with your changes for using with our project. I'm trying to find the code position that causes this problem.","20/Jul/10 09:25;davsclaus;Yeah cool Christian.

Give the ""fix"" a throughly test on your system. And report back. Would be great to know if the bug has been eliminated.","20/Jul/10 14:20;mouch;Got it!
I found the bug.

Has something to do with splitter & aggregator. In my route I receive from servlet do some splitting with xpath performing business methods from a bean and holding the aggregated responses (e.g. a List) in a claim check. Key is the original message-id before splitting. Outside the split the claim check is read again and is set as response for the servlet. (Without that tricky stuff I only got the last split element.)

I don't understand what modifies the map.entrySet (CaseInsensitiveMap:90 [trunk]) out of the aggregation thread. Anyway with your synchronizes it works well.

BTW. I read that volatile can fix the broken double check idiom: http://jeremymanson.blogspot.com/2008/05/double-checked-locking.html",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Support polling from MVS file system,CAMEL-2952,12485594,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Jul/10 13:19,24/Apr/11 09:58,14/Mar/19 02:43,17/Jul/10 09:46,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,"The MVS file system requires to change directory to starting path and use CD to traverse file path instead of using listFile(path) as currently done in camel-ftp.

This means we should walk the path using code like:
0. remember path
1. cd path
2. list files()
3. loop files
4. if dir then goto 1
5. if file add file
6. when done cd back to ""remember path""

",,,,,,,,,,,,,,,,,,23/Jul/10 11:53;davsclaus;camel-ftp-2.5-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463279/camel-ftp-2.5-SNAPSHOT.jar,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76389,,,Sun Apr 24 09:58:14 UTC 2011,,,,,,,0|i01rqv:,8264,,,,,,,,,"15/Jul/10 13:20;davsclaus;See nabble
http://camel.465427.n5.nabble.com/FTP-on-MVS-filesystem-tp1092836p1092836.html",17/Jul/10 09:46;davsclaus;trunk: 965043.,17/Jul/10 09:47;davsclaus;jar with the fix,22/Jul/10 14:08;davsclaus;trunk: 966667.,22/Jul/10 14:09;davsclaus;new jar with patch,"23/Jul/10 12:43;davsclaus;trunk: 967074.

Now works :)",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,
"Attachment DataHander.getName() returns the name of the temporary storage file, not the MIME part name",CAMEL-2949,12485832,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pegli,pegli,14/Jul/10 17:43,24/Apr/11 09:58,14/Mar/19 02:43,15/Jul/10 03:03,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-http,camel-jetty,,,0,,,,,,"When multipart file uploads are converted to message attachments in the DefaultHttpBinding class, the DataHandler that is created for the attachment returns the name of the temporary file created by Jetty, not the value of the name from the Content-Disposition header.  It would be useful to have the actual attachment name instead of the temporary filename in the DataHandler object for easier downstream processing.",,,,,,,,,,,,,,,,,,14/Jul/10 17:45;pegli;CAMEL-2949.patch;https://issues.apache.org/jira/secure/attachment/12463310/CAMEL-2949.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-07-15 03:02:45.768,,,no_permission,,,,,,,,,,,,,,76390,,,Sun Apr 24 09:58:20 UTC 2011,,,Patch Available,,,,0|i01rq7:,8261,,,,,,,,,14/Jul/10 17:45;pegli;Patch for CamelFileDataSource which exposes the attachment name instead of the temporary file name.  Includes update to camel-jetty MultiPartFormTest unit test class to verify change.,"15/Jul/10 03:02;njiang;Applied patch with thanks to Paul, also merge this change into camel-http4.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
CachedOutputStream supports not to close itself when the exchange is completed,CAMEL-2947,12485934,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Jul/10 10:06,24/Apr/11 09:57,14/Mar/19 02:43,14/Jul/10 12:03,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"The patch of CAMEL-2944 just introduced a regression issue of CAMEL-2776.
We just need to find a way to avoid the CachedOutputStream close itself when the exchange is completed, as the input stream which is get from the CachedOutputStream will be used after that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:14.092,,,no_permission,,,,,,,,,,,,,,76391,,,Sun Apr 24 09:57:14 UTC 2011,,,,,,,0|i01rpr:,8259,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamCache - File spooled stream cache does not work well on Windows due not closing file resource,CAMEL-2944,12485941,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Jul/10 07:03,24/Apr/11 09:57,14/Mar/19 02:43,14/Jul/10 08:35,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,"Windows is pesky about deleting files which may have an open stream hanging. While other OS is capable of that.

SplitterStreamCacheTest fails on windows due this issue.

The logic in CachedOutputStream should better leverage the Synchronization to be able to close the streams at the end.

Also various DOM converters will automatic closes input streams when converting to DOM. The only reliable mechanism is Camels synchronization which is invoked when the Exchange is done. And thus the time where we can cleanup.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76392,,,Sun Apr 24 09:57:15 UTC 2011,,,,,,,0|i01rp3:,8256,,,,,,,,,14/Jul/10 08:35;davsclaus;trunk: 963966,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelHttpTransportServlet.destroy causes java.lang.IllegalArgumentException: Cannot find the deployed servlet,CAMEL-2942,12485961,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bstiles@bstiles.net,bstiles@bstiles.net,13/Jul/10 17:18,24/Apr/11 09:57,14/Mar/19 02:43,14/Jul/10 01:41,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-servlet,,,,0,,,,,,"CamelHttpTransportServlet.destroy removes the servlet from a static map named CAMEL_SERVLET_MAP prior to stopping its associated Spring application context.  If that context defines a route using a servletEndpoint, the route is shutdown AFTER the servlet is removed from the map.  The shutdown code then looks for the servlet in the map by calling CamelHttpTransportServlet.getCamelServlet.  The servlet can't be found, and the ensuing exception is logged (copied below).

It seems to me that CamelHttpTransportServlet.destroy should be defined like this:
    
    public void destroy() {
        // Removal was here
        if (applicationContext != null) {
            applicationContext.stop();
        }
        // Moved the removal to here
        CAMEL_SERVLET_MAP.remove(servletName);
    }

so that the servlet is removed from the map after the context is stopped.

I know for sure that removal of the servlet from the map before the context is stopped causes this problem when my route is shutdown.  I DON'T know for sure that my overall configuration is correct, though I think it is valid.

If the above change is not obviously correct, or if there are further questions, please let me know, and I'll work up a sample that demonstrates the problem to help answer any questions.

--

2010-07-13 09:06:23,918 [Camel Thread 0 - ShutdownTask] WARN  org.apache.camel.impl.DefaultShutdownStrategy at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:219)
         Error occurred while shutting down route: Consumer[/relay]. This exception will be ignored.
java.lang.IllegalArgumentException: Cannot find the deployed servlet, please configure the ServletComponent or configure a org.apache.camel.component.servlet.CamelHttpTransportServlet servlet in web.xml 
	at org.apache.camel.component.servlet.ServletComponent.getCamelServlet(ServletComponent.java:55)
	at org.apache.camel.component.servlet.ServletComponent.disconnect(ServletComponent.java:116)
	at org.apache.camel.component.http.HttpEndpoint.disconnect(HttpEndpoint.java:152)
	at org.apache.camel.component.http.HttpConsumer.doStop(HttpConsumer.java:56)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:86)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:107)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:100)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:217)
	at org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask.run(DefaultShutdownStrategy.java:413)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-14 01:31:47.815,,,no_permission,,,,,,,,,,,,,,76393,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,0|i01ron:,8254,,,,,,,,,"14/Jul/10 01:31;njiang;Yeah, we need to remove the the ServletMap after the application context is stopped.
Thanks for pointing that out, I will commit the fix shortly.
",14/Jul/10 01:40;bstiles@bstiles.net;Fantastic.  Thanks for the quick response!,14/Jul/10 01:41;njiang;Committed the patch with thanks to Brian.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.test package is imported in camel-spring component - generates error on OSGI platform,CAMEL-2940,12485952,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,12/Jul/10 15:12,24/Apr/11 09:57,14/Mar/19 02:43,13/Jul/10 13:28,2.5.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"{code}
[  86] [Installed  ] [            ] [   60] camel-spring (2.5.0.SNAPSHOT)
karaf@root> start 86
Error executing command: Unresolved constraint in bundle org.apache.camel.camel-spring [86]: Unable to resolve 86.0: missing requirement [86.0] package; (&(package=org.ap
ache.camel.component.test)(version>=2.5.0)(!(version>=2.5.1))) - [86.0] package; (&(package=org.apache.camel.component.test)(version>=2.5.0)(!(version>=2.5.1)))
karaf@root> headers 86

camel-spring (86)
-----------------
Bnd-LastModified = 1278946400750
Build-Jdk = 1.6.0_20
Built-By = Charlesm
Bundle-Activator = org.apache.camel.osgi.Activator
Bundle-Description = Camel Spring support
Bundle-DocURL = http://www.apache.org/
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2
Bundle-Name = camel-spring
Bundle-SymbolicName = org.apache.camel.camel-spring
Bundle-Vendor = The Apache Software Foundation
Bundle-Version = 2.5.0.SNAPSHOT
Created-By = Apache Maven Bundle Plugin
Export-Package = org.apache.camel.spring.spi;uses:=""org.springframework.context,org.apache.camel.spi,org.springframework.beans.factory,org.apache.camel,org.springframewor
k.beans.factory.config,org.apache.camel.builder,org.springframework.transaction,org.apache.commons.logging,org.apache.camel.processor.exceptionpolicy,org.apache.camel.pro
cessor,org.apache.camel.util,org.apache.camel.model,org.springframework.transaction.support"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring.util;uses:=""org.apache.camel
,org.springframework.context,org.apache.camel.util,org.apache.commons.logging,org.springframework.beans.factory,org.springframework.util"";version=""2.5.0.SNAPSHOT"",org.apa
che.camel.spring.remoting;uses:=""org.apache.camel.util,org.springframework.remoting.support,org.apache.camel.component.bean,org.apache.camel,org.springframework.beans,org
.springframework.context,org.apache.camel.spi,org.apache.camel.spring.util,org.springframework.beans.factory"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring;uses:=""org.
apache.camel.impl,org.apache.camel.util,org.apache.commons.logging,org.apache.camel,org.springframework.beans,org.springframework.context,org.springframework.util,org.spr
ingframework.beans.factory.config,org.apache.camel.spring.util,javax.xml.bind.annotation,org.springframework.beans.factory,org.apache.camel.builder,org.apache.camel.model
.dataformat,org.springframework.context.event,org.apache.camel.model.config,org.apache.camel.model,org.apache.camel.spi,org.apache.camel.spring.spi,org.apache.camel.view,
org.springframework.context.support,org.apache.camel.spring.handler,javax.xml.bind,org.apache.camel.component.bean,org.apache.camel.component.event,org.springframework.tr
ansaction,org.springframework.transaction.support"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring.handler;uses:=""org.springframework.beans.factory.support,org.springfra
mework.core,org.springframework.util,org.springframework.beans.factory.xml,org.w3c.dom,org.springframework.beans,org.springframework.beans.factory.config,org.springframew
ork.beans.factory.parsing,org.apache.camel.model.dataformat,org.apache.camel.model.config,org.apache.camel.util,org.apache.camel.model,org.apache.camel.spring,javax.xml.b
ind,org.springframework.beans.factory,org.apache.camel.view,org.apache.commons.logging,org.apache.camel.model.loadbalancer,org.apache.camel.builder.xml,org.apache.camel.s
pring.remoting,org.apache.camel.spi,org.apache.camel,org.apache.camel.model.language,org.apache.camel.processor"";version=""2.5.0.SNAPSHOT"",org.apache.camel.osgi;uses:=""org
.osgi.framework,org.apache.camel.impl,org.springframework.osgi.context,org.apache.commons.logging,javax.xml.bind.annotation,org.springframework.context,org.apache.camel.s
pring,org.apache.camel.model,org.apache.camel.model.loadbalancer,org.apache.camel,org.apache.camel.model.language,org.springframework.beans.factory.xml,org.apache.camel.m
odel.dataformat,org.apache.camel.spring.handler,org.apache.camel.model.config,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component;uses:=""org.apache.
camel.impl,org.apache.commons.logging,org.springframework.core.io,org.apache.camel,org.apache.camel.converter,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT"",org.apache.ca
mel.component.event;uses:=""org.apache.camel,org.springframework.context,org.apache.camel.impl,org.springframework.beans,org.apache.camel.util,org.apache.camel.processor.l
oadbalancer"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component.test;uses:=""org.apache.camel.impl,org.apache.camel.util,org.apache.camel,org.apache.commons.logging,org.a
pache.camel.component.mock"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component.validator;uses:=""javax.xml.transform,org.springframework.core.io,javax.xml.transform.strea
m,org.apache.camel.processor.validation,org.apache.camel.impl,org.apache.camel.component,org.apache.commons.logging,org.apache.camel"";version=""2.5.0.SNAPSHOT"",org.apache.
camel.component.xslt;uses:=""org.apache.camel.impl,org.apache.camel.component,org.apache.commons.logging,org.apache.camel,org.springframework.core.io,org.apache.camel.buil
der.xml,org.apache.camel.util,javax.xml.transform,org.apache.camel.converter.jaxp,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT""
Ignore-Package = org.apache.camel.spring.remoting,org.apache.camel.component,org.apache.camel.component.validator,org.apache.camel.component.xslt,org.apache.camel.spring.
spi,org.apache.camel.spring,org.apache.camel.osgi,org.apache.camel.spring.handler,org.apache.camel.component.event,org.apache.camel.spring.util
Implementation-Title = Camel :: Spring
Implementation-Vendor = The Apache Software Foundation
Implementation-Vendor-Id = org.apache.camel
Implementation-Version = 2.5-SNAPSHOT
Import-Package = javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.transform,javax.xml.transform.stream,org.apache.camel;version=""[2.5
.0,2.5.1)"",org.apache.camel.builder;version=""[2.5.0,2.5.1)"",org.apache.camel.builder.xml;version=""[2.5.0,2.5.1)"",org.apache.camel.component.bean;version=""[2.5.0,2.5.1)"",o
rg.apache.camel.component.mock;version=""[2.5.0,2.5.1)"",org.apache.camel.component.properties;version=""[2.5.0,2.5.1)"",org.apache.camel.component.test;version=""[2.5.0,2.5.1
)"",org.apache.camel.converter;version=""[2.5.0,2.5.1)"",org.apache.camel.converter.jaxp;version=""[2.5.0,2.5.1)"",org.apache.camel.impl;version=""[2.5.0,2.5.1)"",org.apache.cam
el.impl.converter;version=""[2.5.0,2.5.1)"",org.apache.camel.management;version=""[2.5.0,2.5.1)"",org.apache.camel.model;version=""[2.5.0,2.5.1)"",org.apache.camel.model.config
;version=""[2.5.0,2.5.1)"",org.apache.camel.model.dataformat;version=""[2.5.0,2.5.1)"",org.apache.camel.model.language;version=""[2.5.0,2.5.1)"",org.apache.camel.model.loadbala
ncer;version=""[2.5.0,2.5.1)"",org.apache.camel.processor;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.exceptionpolicy;version=""[2.5.0,2.5.1)"",org.apache.camel.proces
sor.interceptor;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.loadbalancer;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.validation;version=""[2.5.0,2.5.1)"",org.
apache.camel.spi;version=""[2.5.0,2.5.1)"",org.apache.camel.util;version=""[2.5.0,2.5.1)"",org.apache.camel.view;version=""[2.5.0,2.5.1)"",org.apache.commons.logging,org.osgi.f
ramework;version=""[1.3,2)"",org.osgi.util.tracker;version=""[1.3,2)"",org.springframework.beans;version=""[2.5,4)"",org.springframework.beans.factory;version=""[2.5,4)"",org.spr
ingframework.beans.factory.config;version=""[2.5,4)"",org.springframework.beans.factory.parsing;version=""[2.5,4)"",org.springframework.beans.factory.support;version=""[2.5,4)
"",org.springframework.beans.factory.xml;version=""[2.5,4)"",org.springframework.context;version=""[2.5,4)"",org.springframework.context.event;version=""[2.5,4)"",org.springfram
ework.context.support;version=""[2.5,4)"",org.springframework.core;version=""[2.5,4)"",org.springframework.core.io;version=""[2.5,4)"",org.springframework.osgi.context;version=
""[1.2,2)"",org.springframework.remoting.support;version=""[2.5,4)"",org.springframework.transaction;version=""[2.5,4)"",org.springframework.transaction.support;version=""[2.5,4
)"",org.springframework.util;version=""[2.5,4)"",org.w3c.dom
Manifest-Version = 1.0
Specification-Title = Camel :: Spring
Specification-Vendor = The Apache Software Foundation
Specification-Version = 2.5-SNAPSHOT
Tool = Bnd-0.0.357
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:35.541,,,no_permission,,,,,,,,,,,,,,76394,,,Sun Apr 24 09:57:35 UTC 2011,,,,,,,0|i01ro7:,8252,,,,,,,,,13/Jul/10 13:28;cmoulliard;code committed,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamProducer does not close stream in camel-stream,CAMEL-2937,12486010,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,11/Jul/10 16:26,02/May/13 02:30,14/Mar/19 02:43,11/Jul/10 16:36,2.3.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,"Since the stream could be System.out or System.err, the producer does not close the stream ever. It should close all streams with the noted exceptions.",,,,,,,,,,,,,CAMEL-6152,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:58:01.328,,,no_permission,,,,,,,,,,,,,,76395,,,Sun Apr 24 09:58:01 UTC 2011,,,,,,,0|i01rnj:,8249,,,,,,,,,11/Jul/10 16:36;hadrian;r963105,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken failure reporting via DefaultProucerTemplate.asyncCallback and Synchronization.onFailure,CAMEL-2935,12486038,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mrt1nz,mrt1nz,10/Jul/10 10:01,24/Apr/11 09:57,14/Mar/19 02:43,10/Jul/10 20:56,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"The recent change in {{ProducerCache.send}}

{code:java|title=ProducerCache.java}
    public void send(Endpoint endpoint, Exchange exchange) {
        try {
            sendExchange(endpoint, null, null, exchange);
            // RECENT CHANGE HERE:
            // ensure that CamelExecutionException is always thrown
            if (exchange.getException() != null) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
        } catch (Exception e) {
            throw wrapCamelExecutionException(exchange, e);
        }
    }
{code}

that throws a {{CamelExecutionException}} if {{exchange.getException}} is not null, makes it impossible for {{DefaultProducerTemplate.asyncCallback}} to report failures (other than fault messages) asynchronously via {{Synchronization.onFailure}}

{code:java|title=DefaultProducerTemplate.java}
    public Future<Exchange> asyncCallback(final Endpoint endpoint, final Exchange exchange, final Synchronization onCompletion) {
        Callable<Exchange> task = new Callable<Exchange>() {
            public Exchange call() throws Exception {

                // FIXME: exception is thrown in Camel 2.4 where a normal return with answer.getException != null was done in Camel 2.3
                Exchange answer = send(endpoint, exchange);

                if (answer.isFailed()) {
                    onCompletion.onFailure(answer);
                } else {
                    // ...
                }
                return answer;
            }
        };
        // ...
    }
{code}

This was working in Camel 2.3 (but unfortunately there wasn't any test case for it). I attached a patch for {{DefaultProducerTemplateAsyncTest}} that demonstrates the problem. I didn't commit a fix yet because I'm unsure at the moment about the best way to fix that. Of course I tried a naive fix in the DefaultProducerTemplate.asyncCallback methods which causes the test (in the patch) to pass but I'd like to hear other opinions before I continue.",,,,,,,,,,,,,,,,,,10/Jul/10 11:35;mrt1nz;on-failure.patch;https://issues.apache.org/jira/secure/attachment/12463308/on-failure.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-07-10 10:18:06.411,,,no_permission,,,,,,,,,,,,,,76396,,,Sun Apr 24 09:57:26 UTC 2011,,,,,,,0|i01rn3:,8247,,,,,,,,,"10/Jul/10 10:18;davsclaus;Ah well spotted. We should definitely have an unit test for this so callbacks *always* can handle the reply.

I would suggest to change the internals of producer template to have a *send* method to be used for the sync cases (the one we got now, so no changes needed for the sync cases).

However for the async we should introduce a new {{sendAsync}} variation that the various {{asyncCallback}} methods leverage.
Then that method is used in the {{call}} method as shown above.","10/Jul/10 10:24;mrt1nz;Thanks for your feedback Claus. Sounds good to me, I'll try that.","10/Jul/10 10:37;davsclaus;In fact you may want to ensure sendAsync never throws exception, but instead always set the thrown exception on the Exchange. This ensure that in the {{call}} method we can invoke the {{onFailure}} method on the {{onCompletion}} callback.","10/Jul/10 11:35;mrt1nz;Claus, I'd like to first suggest a solution as implemented by {{on-failure.patch}}. This is a solution that fixes the problem with only minimal changes (i.e. without introducing new {{sendAsync}} methods). In this patch I simply moved

{code:java}
            if (exchange.getException() != null) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
{code} 

from {{ProducerCache.send(Endpoint, Exchange)}} to {{ProducerTemplate.send(Endpoint, Exchange)}} because it is the *only* user of  {{ProducerCache.send(Endpoint, Exchange)}}. In {{ProducerCache.asyncCallback(Endpoint, Exchange, Synchronization)}} the {{ProducerCache.send(Endpoint, Exchange)}} is now used directly (and this again re-introduces the same behaviour as in Camel 2.3). All the camel-core tests run through locally (except SplitterStreamCache test but it also fails without the changes ... so it must be something else).

Although, I see this issue as resolved with this patch, I still don't understand why the if-statement above was introduced only for {{ProducerCache.send(Endpoint, Exchange)}} and not for the other {{ProducerCache.send}} methods as well. This looks somehow inconsistent to me. Maybe I just miss something obvious. 

If you are fine with the provided patch, please let me know and I'll commit the changes.","10/Jul/10 12:51;davsclaus;Okay I had a look at the patch and have been fixed the issue.

The problem was that {{ProducerTemplate}} interface has been tighten up a bit to ensure that all methods will thrown a {{CamelExecutionException}} if any of the {{send}} or {{request}} methods is invoked. This ensures its consistent. Before there where a few methods which didn't do this. This causes the end user to be a bit confused and they would then have to double check with try .. catch and the Exchange as well.

Unfortunately the fix was done at {{ProoducerCache}} instead on {{DefaultProducerTemplate}} itself. So I have fixed this. Running full test before committing.

","10/Jul/10 13:10;mrt1nz;Great, thanks!","10/Jul/10 13:15;davsclaus;In fact I am tighten up a bit on the {{ProducerCache}} as well and ensuring the javadoc states the contract. 

Now exceptions is not thrown but stored on the returned Exchange which ensures a friendly API which caters for both the synchronous and asynchronous routing engine in Camel.
","10/Jul/10 14:26;davsclaus;I have to fix some unit tests which was relying on the old behavior of {{template.send(Exchange)}} and {{template.request(Exchange)}} not throwing an exception, which wasn't entirely covered by the first fix. Now with all the template methods fixed they surface some tests which now fails due to the tighten contract.
","10/Jul/10 16:21;davsclaus;I have cleared the confusing of the {{ProducerTemplate}} and {{ProducerCache}} API.

I had made a minor mistake before which causes several tests to fail. I have corrected this and the problem is in fact just the async behavior Martin reported.

Running full tests now, before committing.",10/Jul/10 20:56;davsclaus;trunk: 962915.,11/Jul/10 08:39;mrt1nz;Just upgraded Akka to the latest Camel 2.4-SNAPSHOT and all tests are now running through. Thanks again!,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,
httpClient.soTimeout property is not returned when getting HTTP endpoint URI,CAMEL-2924,12485790,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,08/Jul/10 15:04,24/Apr/11 09:57,14/Mar/19 02:43,16/Jul/10 10:12,2.3.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"getting the endpoint URI of an HTTP EndPoint with httpClient.soTimeout property set won't return the property

i.e: ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"" is returned as ""http://crive.optadev.com/valde/utils/posttest.php""

* I have noticed this using ExchangeHelper.resolveEndpoint:
String uri = ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"";
uri = ExchangeHelper.resolveEndpoint(exchange, uri.trim()).getEndpointUri();
//uri is now missing httpClient.soTimeout=5000

* it is also happening reading @Header(Exchange.TO_ENDPOINT)

this is not happening when using the soTimeout option in FTP component.


I think this is a major issue as recipientList is making use of ExchangeHelper and therefore the option will be ingored.

",Windows,,,,,,,,,,,,,,,,CAMEL-2945,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-09 06:16:21.726,,,no_permission,,,,,,,,,,,,,,76397,,,Sun Apr 24 09:57:32 UTC 2011,,,,,,,0|i01rkn:,8236,,,,,,,,,08/Jul/10 15:07;crive;please ignore my last sentence about recipientList,"09/Jul/10 06:16;davsclaus;What's your problem?
","09/Jul/10 07:42;crive;calling

uriCamel = ExchangeHelper.resolveEndpoint(exchange, ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"").getEndpointUri();

will result in uriCamel = ""http://crive.optadev.com/valde/utils/posttest.php""

so without the ""httpClient.soTimeout=5000""

I've noticed the same behaviour using a retryUntil bean getting the header Exchange.TO_ENDPOINT: @Header(Exchange.TO_ENDPOINT) String target

target variable will be set to: ""http://crive.optadev.com/valde/utils/posttest.php""","09/Jul/10 07:57;davsclaus;But what do you use the resolveEndpoint for?

The getEndpointUri is important for Camel to use a consistent uri so it can lookup endpoints in its registry.

The http endpoint has lenient parameters, which means that you want to use the *same* http endpoint but being able to send different parameters to the http server

{code}
http://foo.com?a=foo
http://foo.com?a=bar
http://foo.com?a=foo&beer=yes
{code}
Should all use the same http endpoint, and thus get endpoint uri returns the same for all 3 instances.
This is by design.

The httpClient parameters is passed to the underlying HTTPClient instance which does the actual HTTP work.
","09/Jul/10 08:11;crive;I am using a recipientList, in order to get additional parameters needed in my process (each for every endpoint)
I make use of resolveEndpoint to get the URI Camel is using internally to identify the endpoint (using a map with the URI as the key).

I thought this was a bug, as this is by design I will change the way I am currently creating the recipientList (by fist getting URI out of resolveEndpoint).


I've got a side question about this ""lenient parameters"":
would it be possible to have them in FTP component as well?
we are currently facing the problem that delivering several files (different file names) to a given FTP is creating a new FTP endpoint (and therefore connection) each time;
I know we can set the option to disconnect after every delivery but I think it would improve performances if we do not connect/disconnect on each file (we are sending a huge amount of data).
I can create a new ticket for this if you think it is sensible.

Thank you for the reply I really appreciate the responses I receive each time.

",09/Jul/10 08:22;davsclaus;The FTP component supports providing the file name as a header. Use {{Exchange.FILE_NAME}} then you can reuse the same FTP endpoint and thus the same connection.,09/Jul/10 08:34;crive;Thank you.,"16/Jul/10 10:12;njiang;I think we can close this issue, as it is fixed by CAMEL-2924.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,
XMPPConsumer does not remove the message which causes OOME with XMPP,CAMEL-2922,12485960,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Jul/10 05:13,24/Apr/11 09:57,14/Mar/19 02:43,14/Jul/10 04:36,2.1.0,2.2.0,2.3.0,,,,,,,,,,2.5.0,,,,camel-xmpp,,,,0,,,,,,,,,,,,,,300,300,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-14 03:27:17.097,,,no_permission,,,,,,,,,,,,,,76398,,,Sun Apr 24 09:57:31 UTC 2011,,,,,,,0|i01rk7:,8234,,,,,,,,,"08/Jul/10 05:14;davsclaus;See CAMEL-1476

{quote}
The patch for this bug was removed in revision 779121. The result is that the XMPPConsumer does not remove the message from the MultiUserChat and the possibility for an OutOfMemoryException still exists.
The OOM occurs because the org.jivesoftware.smackx.muc.RoomListenerMultiplexor is a packet listener that contains a collector that stores all of the messages received up to a hard coded limit of 65k messages. These messages are not removed unless muc.pollMessage() or muc.nextMessage() is called. I'm not sure the reason behind storing these messages in a collector.

I have tested this in 2.1.0 and 2.3.0 and reviewed the code in 2.4-SNAPSHOT. I can supply a test case if needed.
{quote}","14/Jul/10 03:27;mark.ford;I haven't had a chance to look at integrating my test into the integration tests for this component. 

However, the snippet below is almost the same as what was originally applied and mistakenly overwritten. My only change is to call the non-blocking pollMessage() instead of nextMessage(). The non-blocking call seems safer in case the packet listener that's doing the collecting hasn't been called yet.

The diff below is from the 2.1.0 base. The method (public void processMessage(Chat chat, Message message)) is the same in the 2.4-SNAPSHOT version.

Index: XmppConsumer.java
===================================================================
--- XmppConsumer.java	(revision 960908)
+++ XmppConsumer.java	(working copy)
@@ -130,5 +130,9 @@
         } catch (Exception e) {
             exchange.setException(e);
         }
+        
+        if (muc != null) {
+            muc.pollMessage();
+        }
     }
 }
","14/Jul/10 04:36;davsclaus;Thanks Mark for pointing this out. I have committed a fix and polished the logging a bit.

trunk: 963946.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
"SFTP throws ResolveEndpointFailedException when ""ftpClient.connectionTimeout"" option is provided",CAMEL-2912,12486171,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matsev,matsev,06/Jul/10 13:32,24/Apr/11 09:57,14/Mar/19 02:43,06/Jul/10 15:27,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,"Currently, SFTP throws an ResolveEndpointFailed exception if the option ""ftpClient.connectionTimeout"" is provided as a part of the URI. This could be fixed by calling the Session.connect(int timeout) method of JSCH. Some investigation reveals that this method eventually calls Socket.setSoTimeout(int timeout), which implies that the time unit of the timeout is milliseconds.

http://grepcode.com/file/repo1.maven.org/maven2/com.jcraft/jsch/0.1.42/com/jcraft/jsch/Session.java#Session.connect%28int%29


Example:

sftp://user@host/dir?password=secret&ftpClient.connectionTimeout=30000&disconnect=true&passiveMode=true

ResolveEndpointFailedException:
[...]
There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{ftpClient.connectionTimeout=30000}] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-06 15:27:01.237,,,no_permission,,,,,,,,,,,,,,76399,,,Sun Apr 24 09:57:36 UTC 2011,,,,,,,0|i01rhz:,8224,,,,,,,,,"06/Jul/10 15:27;davsclaus;I have introduced new timeout options in the FTP endpoint uri so its easier to configure.

See wiki page
https://cwiki.apache.org/confluence/display/CAMEL/FTP2
",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Oracle AQ does not support the JMSReplyTo property and therefore throws a ""JMS-102: Feature not supported"" exception when the JMS provider tries to get it.",CAMEL-2909,12486039,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mmatveev,mmatveev,05/Jul/10 14:11,09/Jul/10 08:29,14/Mar/19 02:43,06/Jul/10 09:01,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-jms,,,,0,,,,,,"Oracle AQ does not support the JMSReplyTo property and therefore throws a ""JMS-102: Feature not supported"" exception when the JMS provider tries to get it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-05 14:34:17.03,,,no_permission,,,,,,,,,,,,,,76400,,,Fri Jul 09 08:29:17 UTC 2010,,,,,,,0|i01rhb:,8221,,,,,,,,,"05/Jul/10 14:34;davsclaus;Could you add information such as:
- What version of the Oracle AQ are you using?
- What OS are you using
- The stacktrace
- For example related Camel configuration

And what do you mean by JMS provider? Where does the exception happen precisely? 

Link to Oracle AQ documentation about the lack of support for the JMSReplyTo would be great as well.","05/Jul/10 14:55;mmatveev;I'm using Oracle AQ 10.2.0.2, reproduced this error on Windows XP and RHEL 5 linux.

This exception will appear in few different places, namel everywhere where jmsMessage.getReplyTo() is called. For example in public Map extractHeadersFromJms(Message, Exchange) method in JmsBinding class (line number 174 in 2.3.0 version):
       map.put(""JMSReplyTo"", jmsMessage.getJMSReplyTo());

Stacktrace is the following:
org.apache.camel.RuntimeCamelException: oracle.jms.AQjmsException: JMS-102: Feature not supported 
	at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:181)
	at org.apache.camel.component.jms.JmsMessage.populateInitialHeaders(JmsMessage.java:191)
	at org.apache.camel.impl.DefaultMessage.createHeaders(DefaultMessage.java:178)
	at org.apache.camel.component.jms.JmsMessage.ensureInitialHeaders(JmsMessage.java:176)
	at org.apache.camel.component.jms.JmsMessage.setHeader(JmsMessage.java:152)
	at org.apache.camel.processor.RedeliveryErrorHandler.incrementRedeliveryCounter(RedeliveryErrorHandler.java:524)
	at org.apache.camel.processor.RedeliveryErrorHandler.handleException(RedeliveryErrorHandler.java:294)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:101)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)
	at java.lang.Thread.run(Thread.java:619)
Caused by: oracle.jms.AQjmsException: JMS-102: Feature not supported 
	at oracle.jms.AQjmsError.throwEx(AQjmsError.java:288)
	at oracle.jms.AQjmsAdtMessage.getJMSReplyTo(AQjmsAdtMessage.java:145)
	at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:174)
	... 24 more

I meant Camel JMS Component, not Provider, sorry.

For your reference: similar bug was in Mule framework: http://www.mulesoft.org/jira/browse/MULE-489 and it was fixed by ignoring this exception for Oracle AQ.

Related config is:
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""jms:topic:TOPIC_NAME""/>
            <to uri=""mock:result""/>
        </route>
    </camelContext>

    <bean id=""aqConfiguration"" class=""com.example.aqsupport.AqJmsConfiguration"">
        <property name=""connectionFactory"" ref=""aqConnectionFactory""/>
        <property name=""destinationResolver"" ref=""aqDestinationResolver""/>
        <property name=""durableSubscriptionName"" value=""SUBSCRIPTION_NAME""/>
        <property name=""subscriptionDurable"" value=""true""/>
    </bean>

    <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""configuration"" ref=""aqConfiguration""/>
    </bean>

    <bean id=""aqDestinationResolver"" class=""com.example.aqsupport.AqDestinationResolver"">
        <property name=""ownerName"" value=""OWNER""/>
    </bean>

    <bean id=""oracleAqJdbcDataSource"" class=""org.springframework.jdbc.datasource.DriverManagerDataSource"">
        <property name=""driverClassName"" value=""oracle.jdbc.driver.OracleDriver""/>
        <property name=""url"" value=""jdbc:oracle:thin:host:port:schema""/>
        <property name=""username"" value=""USERNAME""/>
        <property name=""password"" value=""PASSWORD""/>
    </bean>

    <bean id=""aqConnectionFactory"" class=""oracle.jms.AQjmsFactory"" factory-method=""getQueueConnectionFactory"">
        <constructor-arg index=""0"" ref=""oracleAqJdbcDataSource""/>
    </bean>

AqDestinationResolver is DestinationResolver thaht supports AQ's Owner property, actually there is 1 line of code there:
public class AqDestinationResolver implements DestinationResolver {
    private String ownerName;
    public void setOwnerName(String ownerName) {
        this.ownerName = ownerName;
    }
    public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException {
        return ((AQjmsSession) session).getTopic(ownerName, destinationName);
    }
}
AqJmsConfiguration class extends camel' JmsConfiguration class by adding support for custom MessageListenerContainer, it is needed to support Oracle AQ Payload Factory
public class AqJmsConfiguration extends JmsConfiguration {
    @Override
    public AbstractMessageListenerContainer createMessageListenerContainer(JmsEndpoint endpoint) {
        AbstractMessageListenerContainer messageListenerContainer = new AqMessageListenerContainer();
        configureMessageListenerContainer(messageListenerContainer, endpoint);
        return messageListenerContainer;
    }
}
and AqMessageListenerContainer is 
public class AqMessageListenerContainer extends DefaultMessageListenerContainer {
    @Override
    protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {
        TopicSubscriber consumer = ((AQjmsSession) session).getDurableSubscriber((Topic) destination,
                getDurableSubscriptionName(), new ExamplePayloadFactory());
        return consumer;
    }
}

Sorry, cannot find related Oracle docs.","06/Jul/10 08:51;mmatveev;Small addition: The ""JMSType"" property is not supported as well for Oracle AQ messages with ADT type payload.","06/Jul/10 09:01;davsclaus;trunk: 960845.

Will now ignore this exception and log a message at TRACE level in case you want to see the thrown exception.","06/Jul/10 09:17;mmatveev;Sorry for bothering Claus, but same fix should be applied for ""JMSType"" property in JmsBinding class (two lines below the ""JMSReplyTo"")
Thanks.","08/Jul/10 17:51;davsclaus;Max sorry I missed your update on this ticket.

I actually stumbled across this ticket
http://jira.springframework.org/browse/INT-1229

Which indicated that the 2nd field needed to be fixed, so I was just about to comment here about the fix.","08/Jul/10 17:53;davsclaus;trunk: 961847.

Max feel free to test with latest source code.","09/Jul/10 08:29;mmatveev;Everything is working, thanks",,,,,,,,,,,,,,,,,,,,,,
<proxy> doesn't support setting camelContextId,CAMEL-2904,12485873,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Jul/10 09:20,24/Apr/11 09:57,14/Mar/19 02:43,03/Jul/10 09:37,,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,"Here is the mail thread which discusses about it.
http://camel.465427.n5.nabble.com/proxy-export-don-t-support-setting-camel-context-tp547161p547161.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 09:57:19.793,,,no_permission,,,,,,,,,,,,,,76401,,,Sun Apr 24 09:57:19 UTC 2011,,,,,,,0|i01rgf:,8217,,,,,,,,,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade to HawtDB 1.1,CAMEL-2901,12486249,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,chirino,chirino,02/Jul/10 13:12,24/Apr/11 10:01,14/Mar/19 02:43,02/Jul/10 13:13,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-hawtdb,,,,0,,,,,,"HawtDB 1.1 has been released.  Change log at: http://github.com/chirino/hawtdb/blob/master/changelog.md
We should upgrade to pick up the listed bug fixes:
{quote}
    * Fixing BTree node next linking.. It was possible that a next link would not properly get set in some conditions during a node removal.
    * You can add get callbacks when a commit gets flushed to disk.
    * Changed the way the journal was handling callback based write completed notifications. They are now delivered in batch form to a single JournalListener. This reduces thread contention and increases throughput.
    * Moved the built in predicate implementations into a Predicates class.
    * Added close method to the Transaction interface. Implementation now asserts it is no longer used after a close.
    * Making the appender's max write batch size configurable.
    * Revamped how Update and DefferedUpdates track shadow pages. A little easier to follow now. - changed the interface to PagedAccessor so that instead of removing the linked pages, it just needs to report what the linked pages are.
    * Got rid of the WriteKey wrapper class, updated logging.
    * Better looking printStrucuture BTree method
    * Added a few Logging classes to reduce the number of places we need to update if in case we decided to switch logging APIs.
    * Fixing free page allocation bug when using deferred updates.
    * Javadoc improvements
    * Expose a config property to control the read cache size.
    * Reworked how snapshot tracking was being done. Fixes errors that occurred during heavy concurrent access.
    * Added a non-blocking flush method to the TxPageFile
    * Read cache was not getting updated when a update batch was performed. Cached entries that were updated and flushed to disk continued returning stale data.
    * Fixed an recovery edge cases
    * Don't start the thread from the thread factory. that causes illegal state exceptions
    * Fixed journal bug where getting next location could return a the current location
    * Renamed EncoderDecoder to PagedAccessor
    * The util.buffer package has moved into it's own project at http://github.com/chirino/hawtbuf
    * Fixes #4 : Errors occur when you re-open an empty data file.
    * Extracted a SortedIndex interface from the Index interface to non sorted indexes having to deal with that leaky abstraction.
    * added a free() method to the Paged for symmetry with the alloc() method.
    * Improved website documentation
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:39.522,,,no_permission,,,,,,,,,,,,,,76402,,,Sun Apr 24 10:01:39 UTC 2011,,,,,,,0|i01rfr:,8214,,,,,,,,,02/Jul/10 13:13;chirino;upgraded trunk.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
out of heap space if remote FTP site has too many files to pick up,CAMEL-2899,12486190,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,karlp,karlp,02/Jul/10 11:49,24/Apr/11 09:57,14/Mar/19 02:43,06/Jul/10 08:22,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,"2010-07-02 11:38:07,439 FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 10]   - <Consumer Consumer[my_ftp_URI_here caused by: Java heap space>
java.lang.OutOfMemoryError: Java heap space

My remote FTP server has ~60k 100 byte files, and the camel endpoint consumer falls over and doesn't start again.  I can use JMX to stop/start the consumer, (it still has status ""started"") and it will log in to the remote server again, but then fall over with the out of heap space.

I can work around this by increasing the heap, or by moving some of the files aside,  but I don't think camel should care how many files there are, or at least, I think it should deal with it more gracefully.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-02 11:59:32.741,,,no_permission,,,,,,,,,,,,,,76403,,,Sun Apr 24 09:57:21 UTC 2011,,,,,,,0|i01rfb:,8212,,,,,,,,,02/Jul/10 11:59;gertvanthienen;I think you can already configure that with the *{{maxMessagesPerPoll}}* URI parameter to limit the number of files being processing in a single poll (cfr. http://camel.apache.org/file2.html) - could you give that a try to see if it solves your problem?,"02/Jul/10 17:07;karlp;Seemed very reasonable, but unfortunately, it doesn't help....

2010-07-02 17:02:42,327 FATAL Consumer Consumer[ftp://sms02@localhost:2121/autre
q/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.process
ed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localho
st:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&
move=.processed&passiveMode=true&password=sms02 caused by: Java heap space
java.lang.OutOfMemoryError: Java heap space

I tried again without file filter, (just an ant pattern name matcher) in case that was causing any problems, but it still fails.","02/Jul/10 18:45;karlp;Some stack traces...

This is without having a file name pattern match filter


 FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.ConcurrentHashMap.<init>(ConcurrentHashMap.java:613)
	at java.util.concurrent.ConcurrentHashMap.<init>(ConcurrentHashMap.java:652)
	at org.apache.camel.impl.DefaultExchange.getProperties(DefaultExchange.java:168)
	at org.apache.camel.impl.DefaultExchange.setProperty(DefaultExchange.java:153)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:96)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)



The two below here were when I had an ant pattern match filter.  From the debug logs, it filtered _every_ file, regardless of the max messages per poll

FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2882)
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)
	at java.lang.StringBuilder.append(StringBuilder.java:119)
	at org.apache.camel.component.file.GenericFile.populateHeaders(GenericFile.java:118)
	at org.apache.camel.component.file.remote.RemoteFile.populateHeaders(RemoteFile.java:39)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:99)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)



FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2882)
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)
	at java.lang.StringBuilder.append(StringBuilder.java:119)
	at org.apache.camel.component.file.GenericFile.populateHeaders(GenericFile.java:118)
	at org.apache.camel.component.file.remote.RemoteFile.populateHeaders(RemoteFile.java:39)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:99)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)","03/Jul/10 08:26;davsclaus;We could either

a)
Use lightweight record structure for the 160K list of files instead of turning them into Exchange objects which carries extra load

b)
Alter so the maxMessagesPerPoll will be effective earlier. Currently it loads the entire list, then you can filter, sort etc. And after all this it will cut down the list.
If we apply the maxMessagesPerPoll earlier we can't really be able to sort the entire list etc. And the filter could also cut out some from the max list.
Or in other words we will have to re-add files until we hit that limit if there are more files.

In your case I don't think you care about sorting/filtering etc. You just want to poll X number of files per go to avoid excessive memory overhead. So I think we could add an option in the uri for solution b.

Anyone got a good name for such an option?

Any thoughts?","06/Jul/10 08:22;davsclaus;The {{maxMessagesPerPoll}} option is now applied earlier for the file/ftp components so we avoid creating so many Exchange objects which are then afterwards discarded.

trunk: 960839.

Notice there is no limit in the java.io.File or FTP API to tell it to only list at most X number of files.",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
Splitting file using tokenizer should close the Scanner to avoid files not being able to be moved thereafter,CAMEL-2897,12485908,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Jul/10 08:22,24/Apr/11 10:00,14/Mar/19 02:43,02/Jul/10 08:26,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,02/Jul/10 08:28;davsclaus;camel-core-2.4-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463301/camel-core-2.4-SNAPSHOT.jar,02/Jul/10 08:29;davsclaus;camel-spring-2.4-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463302/camel-spring-2.4-SNAPSHOT.jar,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76404,,,Sun Apr 24 10:00:40 UTC 2011,,,,,,,0|i01rev:,8210,,,,,,,,,"02/Jul/10 08:22;davsclaus;This problem occurs on Windows which has a lock on the file.
Unix and Mac works fine.

See nabble
http://camel.465427.n5.nabble.com/File-can-t-be-moved-or-deleted-on-Windows-tp512484p512484.html",02/Jul/10 08:26;davsclaus;trunk: 959916.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiPackageScanClassResolver can't find the class after refactoring,CAMEL-2895,12486160,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Jul/10 06:54,24/Apr/11 10:00,14/Mar/19 02:43,02/Jul/10 07:03,,,,,,,,,,,,,2.4.0,,,,osgi,,,,0,,,,,,"After I applied the patch of CAMEL-2894, I can't get let camel load the router with package scan option.

As the Bundle.getResources(String name), can't work as the ClassLoader.getResources(String name).
So we have to use Bundle.findEntries() to check the package's resource.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:54.565,,,no_permission,,,,,,,,,,,,,,76405,,,Sun Apr 24 10:00:54 UTC 2011,,,,,,,0|i01ref:,8208,,,,,,,,,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPackageScanClassResolver.addClassLoader should check the UnsupportedOperationException,CAMEL-2894,12486234,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Jul/10 06:47,24/Apr/11 10:00,14/Mar/19 02:43,02/Jul/10 07:03,,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"When I was running some OSGi tests with Camel 2.4-SNAPSHOT, I got this UnsupportedOperationExcpetion,
This is stack trace
{code}
Caused by: java.lang.UnsupportedOperationException
	at java.util.AbstractCollection.add(AbstractCollection.java:221)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.addClassLoader(DefaultPackageScanClassResolver.java:58)
	at org.apache.camel.spring.PackageScanRouteBuilderFinder.<init>(PackageScanRouteBuilderFinder.java:52)
	at org.apache.camel.spring.CamelContextFactoryBean.findRouteBuildersByPackageScan(CamelContextFactoryBean.java:183)

{code}

After digging the code , I found current OsgiPackageScanClassResolver only supports to turn the bundle classloader, so we need to check this kind of error.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:39.409,,,no_permission,,,,,,,,,,,,,,76406,,,Sun Apr 24 10:00:39 UTC 2011,,,,,,,0|i01re7:,8207,,,,,,,,,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(FromDefintion|ToDefinition).getUriOrRef tend to return null when they should return a URI,CAMEL-2893,12486052,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,jstrachan,jstrachan,01/Jul/10 17:24,24/Apr/11 10:00,14/Mar/19 02:43,01/Jul/10 17:27,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,looks like a simple logic bug to me. Have a fix locally - just checking it works...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:43.226,,,no_permission,,,,,,,,,,,,,,76407,,,Sun Apr 24 10:00:43 UTC 2011,,,,,,,0|i01rdz:,8206,,,,,,,,,01/Jul/10 17:24;jstrachan;this only tends to affect graph drawing tools btw :),24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jms consumer should handle markRollbackOnly,CAMEL-2881,12486287,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,30/Jun/10 09:40,24/Apr/11 10:01,14/Mar/19 02:43,30/Jun/10 10:00,2.2.0,2.3.0,,,,,,,,,,,2.4.0,,,,camel-jms,,,,0,,,,,,If using markRollbackOnly to dente the route should rollback the Spring DMLC does not rollback despite its status has been told so. We are forced to thrown runtime exceptions.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76408,,,Sun Apr 24 10:01:37 UTC 2011,,,,,,,0|i01rbb:,8194,,,,,,,,,30/Jun/10 10:00;davsclaus;trunk: 959252.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
convertBodyTo should handle null bodies,CAMEL-2867,12486303,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Jun/10 07:03,24/Apr/11 10:01,14/Mar/19 02:43,28/Jun/10 07:04,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,If the body is {{null}} and you use {{convertBodyTo}} you will get a no type converter exception due body is null. Instead it should accept the null body and continue routing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76409,,,Sun Apr 24 10:01:36 UTC 2011,,,,,,,0|i01r7z:,8179,,,,,,,,,28/Jun/10 07:04;davsclaus;trunk: 958475.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-ftp - Should use absolute paths, eg the leading / should always be included",CAMEL-2860,12486260,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jun/10 11:53,24/Apr/11 10:00,14/Mar/19 02:43,01/Jul/10 08:07,2.0.0,2.1.0,2.2.0,2.3.0,,,,,,,,,2.4.0,,,,camel-ftp,,,,2,,,,,,"FTP Servers expect clients to use absolute paths, so camel-ftp clients should not clip any leading /

We could consider adding a flag to preserve the old behavior to have people if they rely on the old behavior be able to switch that flag on.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-25 12:04:02.611,,,no_permission,,,,,,,,,,,,,,76410,,,Sun Apr 24 10:00:37 UTC 2011,,,,,,,0|i01r6f:,8172,,,,,,,,,"25/Jun/10 12:04;davisond;I think it's worth pointing out that this must have changed recently as camel-1.6 doesn't exhibit this problem, so the ""old"" behaviour is the correct behaviour that we should revert to.  

Most FTP clients send absolute paths to the server.  It is the server's responsibility to decide what absolute means (usually a protected FTP root dir is configured in the server and FTP clients cannot escape this regardless of paths used).  If the server allows full f/s access via FTP then that's either up to the server admin or a fault in the FTP server software.  Either way, it should *not* be down to camel-ftp to make unilateral, non-overridable, backwards-incompatible decisions about potential server software configuration.

Personally, I vote for this to be fixed and backported to current production versions.","26/Jun/10 08:28;davsclaus;Looking into camel 1.6 I cannot see it send absolute paths.

It just change dir to current dir at first. And current dir is from the start /. 
And then cd into the starting directory (configured from the endpoint uri). 
So that together makes it appear as it works absolute.


Camel 2.x will not change into current dir at first.
But list files without changing current directory

","26/Jun/10 09:54;davsclaus;trunk: 958207.

You can now specify absolute paths on the endpoint uri, by using double / slashes. Since the first is part of the URI

{{ftp:admin:secret@someserver//foo}}

Notice how we use {{//}} in the uri above to denote an absolute starting path.",01/Jul/10 08:07;davsclaus;Use // slashes in the endpoint uri to denote an absolute starting path.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
useOriginalBody() still appears in fluent API; should be useOriginalMessage(),CAMEL-2858,12486216,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,fbolton,fbolton,25/Jun/10 11:06,24/Apr/11 10:01,14/Mar/19 02:43,30/Jun/10 15:18,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"The {{org.apache.camel.model.OnExceptionDefinition}} class defines {{useOriginalBody()}} in the fluent API. This should actually be {{useOriginalMessage()}}, in accordance with CAMEL-1820.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:29.864,,,no_permission,,,,,,,,,,,,,,41613,,,Sun Apr 24 10:01:29 UTC 2011,,,,,,,0|i01r5z:,8170,,,,,,,,,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"No consumers available on ""direct://xyz"" endpoint",CAMEL-2854,12486289,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,mwc_tonesoft,mwc_tonesoft,24/Jun/10 23:47,24/Apr/11 10:01,14/Mar/19 02:43,29/Jun/10 09:20,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"The following warning in log4j log shows up with no predictable reason:

2010-06-24 14:07:01,090  WARN [DefaultMessageListenerContainer-7:DirectProducer.java:42] No consumers available on endpoint: Endpoint[direct://UserCancelJobRequest] to process: Exchange[JmsMessage: RunnerBase{locationToRunId='DV02YcABTE43HTRPATEGCBFk0m0', jobrun_id=1234, requestOrigId='null', secretKey='null', replyToQueueOrTopic='null', corrolationId='null', requestCreationTime=Thu Jun 24 14:07:01 PDT 2010}]

The endpoint [direct://UserCancelJobRequest] could be a number of different endpoints in our application and all of them are of ""direct:"" type.  When this happens, all messages that run through that endpoint will fail, and it will never recover unless the application is restarted.

Also, if I restart the application and use that route immediately, that warning will not occur and the request will finish successfully.  It seems to happen to routes that have not been used for a while after startup.

When this happens, I can find the exact Camel endpoint/route/processor in JConsole, and nothing seems to be wrong.  How can a ""direct:"" endpoint runs out of consumer?  Isn't the thread that product this warning THE thread to process the message?

We recently upgraded from 5.2 to 5.3.2 and this starts to show up randomly. It is a show stopper!

--Michael",ActiveMQ 5.3.2 / Camel 2.2.0,,,,,,,,,,,,,,,,CAMEL-2873,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-25 09:37:02.568,,,no_permission,,,,,,,,,,,,,,76411,,,Sun Apr 24 10:01:25 UTC 2011,,,,,,,0|i01r53:,8166,,,,,,,,,"25/Jun/10 09:37;njiang;What's your route looks like ?
Did you do some thing to start or stop the route which has the direct endpoints ?","25/Jun/10 17:03;mwc_tonesoft;No, we never explicitly start or stop any endpoint. We only rely on the route-builder to setup the routes during startup.

We do have some cases where the endpoint is ""obtained"" during run-time and added to the route-slip. Still we never start or stop any endpoint.

My colleague discovered that in one instance, we hold on to the reference of an endpoint and got the same warning. It turns out Camel context has a little LRUCache that discards older endpoint instances. We fixed that one place, but it still does not explain all other instances of this problem.","25/Jun/10 21:05;hadrian;Michael, if there is a problem, we'll fix it, but it's not clear what you're doing.

If you have a route that starts with;
{code}
from(""direct:UserCancelJobRequest"").[...]
{code}
then you will have a consumer for that direct endpoint. So it looks to me that you don't have such a route and hence no such consumer, yet you try to send messages to such an endpoint from another route using something like:
{code}
from(some-endpoint-probably-jms).[...].to(""direct:UserCancelJobRequest"")[...];
{code}

My guess though is that you are actually using camel embedded in activemq and your activemq upgrade from 5.2.0 to 5.3.2 caused an upgrade of camel from 1.5.0 to 2.2.0. There are slight changes in camel 2.x, including the dsl syntax, that you should take a look at. I am fairly certain that your route syntax is not totally right with camel 2.2.0. 

I hope this helps. Showing us your route or posting a unit test will allow us understand what's going on and help you better. If you have concerns about posting things that may be proprietary to your organization you could also ask for help on the [#camel irc channel|http://camel.apache.org/irc-room.html].

","28/Jun/10 15:48;mwc_tonesoft;As I said before, the route DOES WORK -- most of the time. Therefore, there is no issue of spelling or Camel syntax.

If I can reliably reproduce this problem with a simple unit-test, then I can debug into the Camel code and tell you exactly what this bug is.

Unfortunately, the ""most of the time"" part makes it difficult to reproduce. Also, as I mentioned before, when it does NOT work, I can find and confirm that the route DOES exist and DOES have a consumer in JConsole, even though the warning says otherwise.

Have you look into what I said about Camel's LRUcache? I hope a second look from folks familiar with the code can come up with some educated guess.

Thanks

--Michael","29/Jun/10 06:49;davsclaus;Michael

Do you send messages to a lot of different Camel endpoints? For example do you use any of the dynamic EIP patterns such as recipient list or routing slip.
And when the issue happens, is that after a long period without sending messages to that given endpoint?

Do you have other direct endpoints at the same time working?

How many routes do you have in your application? And can you see a lot of endpoints listed in JConsole?",29/Jun/10 06:57;davsclaus;And can you attach the route which fails?,"29/Jun/10 07:01;davsclaus;And can you attach the route which consumes as well?

And this route is not stopped in any way? The code will when its stopped, remove itself as consumer on the endpoint, and the reason why the producer then says there are no consumers.",29/Jun/10 07:10;davsclaus;Okay I have reproduced a litte unit test,"29/Jun/10 09:20;davsclaus;Fixed the issue.

trunk: 958893.

A workaround for you would be to use multiple CamelContext's if possible to reduce the chance of hitting this issue in Camel 2.2.","29/Jun/10 16:31;mwc_tonesoft;

Yes, we have pervasive use of dynamically constructed routing slip.




Yes, it seems so. As I mentioned before, if you restart the app and run the
same route immediately, the problem does NOT occur as before.



Yes, most of them works, including the ones that have problems most of the
time.



We have close to 140 endpoints.

I see that you created a unit test. May I have that unit test?  Would you
please also explain the bug in more detail?

Thank you

--Michael
",29/Jun/10 16:37;davsclaus;I have put the rev number in the comment so you can find the commit log and the unit test etc.,"29/Jun/10 16:37;davsclaus;See source here
http://svn.apache.org/viewvc/camel/trunk/","29/Jun/10 16:38;davsclaus;Ah and the Fisheye tab in JIRA also works, just click it to see the code changes.","29/Jun/10 16:40;davsclaus;The issue was how Camel kept the list of active direct consumers on the endpoint, and not on the component.
Then if that endpoint was evicted from the LRUCache (due not used in long time) that link to the consumer would be lost.
And then you hit that {{No consumers ...}} warning.

By keeping it around all the time on the component we can always lookup the active consumers.

And the warning have been changed into thrown an exception so your app logic can catch it, eg rollback etc.","29/Jun/10 16:44;mwc_tonesoft;Claus,

This is not a fix. How did a ""direct:"" route lose its consumer in the first
place?  It's like a Java program cannot call a method it has previously
called successfully.  The fix should be on that issue. Otherwise, it is
still a fatal run-time error.

BTW, I found the unit test in source control.

--Michael



","29/Jun/10 16:48;mwc_tonesoft;Claus,

Revision 958852 you submitted only contains the throwing exception change. I don't see the ""By keeping it around all the time on the component we can always lookup the active consumers"" part in the fix.  Do you mean user code has to do that?

Thanks

--Michael","29/Jun/10 17:02;davsclaus;You may not know Camel that well to question the fix.

The Java compiler will link method invocations at compile time, so its hardcoded in the byte code.

There is no Camel compiler, so Camel will link the routes at runtime. After all you define the endpoints using String (eg uris).
So it have to figure out this at runtime. And thus its *not hardcoded in the bytecode* and it can in fact loose the _link_.

And I would suggest that you take the time to look into the fix, apply the patches on your system and test it before ranting.","29/Jun/10 17:04;davsclaus;Lowering the priority to critical as
- the app can run, it *unfortunately* have to be restarted to fix the issue on his end.
- and by not using a lot of dynamic endpoints you wont hit this issue.

A blocker is something that you can't work around at all.","29/Jun/10 17:28;mwc_tonesoft;I have no disrespect towards you.

Your fix does not prevent the ""No consumer..."" condition from happening. Agree? You also said,

  ""By keeping it around all the time on the component we can always lookup the active consumers.""

How do I accomplish that without applying major changes like using multiple Camel context?

If there is a limit on the total number of endpoints, then it should be documented. If this is related to the LRCcache, then can I increase the cache size?

Thanks

--Michael","29/Jun/10 21:07;mwc_tonesoft;Here how the route is built:

    from(""direct:UserCancelJobRequest"").process(new Processor() {
            public void process(Exchange exchange) throws Exception {
                ....
            }
        }).
        to(""direct:JobRunInstanceUpdate""). ...

We use dynamically constructed routing slip or template to send messages to the ""direct:UserCancelJobRequest"" endpoint.

There should always be consumers for this. Otherwise Camel would be to unpredictable to use. That is the real bug that needs to be fixed.

Thanks

--Michael","30/Jun/10 04:03;davsclaus;Yes it fixes the issue.

See the source code
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/component/direct/
","30/Jun/10 04:08;davsclaus;The LRUCache cannot be changed.
The endpoints should be safe to re-create again. And the cache keeps preventing having Camel hooking up memory when end users uses many different endpoints.
So it keep the last 1000 endpoints around in the cache.

Its just the direct component which had an issue, storing state on the endpoint. Which should have been stored on the component instead.
The seda component works this way btw.

","30/Jun/10 06:14;davsclaus;The unit test is here
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/direct/SendingToAlotOfDifferentDirectEndpointTest.java

You can run it on 2.2 and see it should fail. And then on trunk to see it pass.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,
typo: ManagedBrowsableEndpoint qeue should be queue,CAMEL-2851,12486317,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,karlp,karlp,24/Jun/10 14:23,24/Apr/11 10:00,14/Mar/19 02:43,25/Jun/10 09:07,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"{code}
    @ManagedOperation(description = ""Current number of Exchanges in Queue"")
    public long qeueSize() {
        return endpoint.getExchanges().size();
    }
{code}

Should be 

{code}
    @ManagedOperation(description = ""Current number of Exchanges in Queue"")
    public long queueSize() {
        return endpoint.getExchanges().size();
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-25 09:07:00.529,,,no_permission,,,,,,,,,,,,,,76412,,,Sun Apr 24 10:00:46 UTC 2011,,,,,,,0|i01r4f:,8163,,,,,,,,,"25/Jun/10 09:07;davsclaus;trunk: 957856.

Thanks Karl for reporting.",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-groovy - setting header causes exchange to lose message details,CAMEL-2843,12486123,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jun/10 11:25,24/Apr/11 09:57,14/Mar/19 02:43,23/Jun/10 11:33,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-groovy,,,,0,,,,,,"See SMX4-417

This is the ticket to fix this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76413,,,Sun Apr 24 09:57:53 UTC 2011,,,,,,,0|i01r2n:,8155,,,,,,,,,23/Jun/10 11:33;davsclaus;trunk: 957165.,24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Unconnected sockets not implemented"" exception in camel-ftp when using ftps",CAMEL-2829,12486381,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rodehav,rodehav,18/Jun/10 12:41,24/Apr/11 10:00,14/Mar/19 02:43,22/Jun/10 04:36,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,"When using ftps with a secure data channel, camel-ftp cannot recover from a lost connection. This is due to a bug/flaw in the SFTPClient class in commons-net. Once a secure data channel has been established, SFTPClient replaces the connection factory with one that does not provide support for creating ""unconnected sockets"".

While waiting for a fix from the commons-net team (should they chosse to create one), a work-around in camel-ftp is to always create a new instance of SFTPClient for every connect attempt.

Attached are patches containing an attempt to implement the mentioned work-around. The classes, FtpsOperations, FtpsEndpoint and FtpOperations are involved.",,,,,,,,,,,,,,,,,,18/Jun/10 12:43;rodehav;FtpOperations.diff;https://issues.apache.org/jira/secure/attachment/12463292/FtpOperations.diff,18/Jun/10 12:42;rodehav;FtpOperations.java;https://issues.apache.org/jira/secure/attachment/12463290/FtpOperations.java,18/Jun/10 12:43;rodehav;FtpsEndpoint.diff;https://issues.apache.org/jira/secure/attachment/12463293/FtpsEndpoint.diff,18/Jun/10 12:42;rodehav;FtpsEndpoint.java;https://issues.apache.org/jira/secure/attachment/12463289/FtpsEndpoint.java,18/Jun/10 12:43;rodehav;FtpsOperations.diff;https://issues.apache.org/jira/secure/attachment/12463291/FtpsOperations.diff,18/Jun/10 12:42;rodehav;FtpsOperations.java;https://issues.apache.org/jira/secure/attachment/12463288/FtpsOperations.java,,,,,,6.0,,,,,,,,,,,,,,,,,,,2010-06-21 09:13:56.019,,,no_permission,,,,,,,,,,,,,,76414,,,Sun Apr 24 10:00:58 UTC 2011,,,Patch Available,,,,0|i01qzj:,8141,,,,,,,,,18/Jun/10 12:43;rodehav;Diff files relative to revision 955969.,"21/Jun/10 09:13;davsclaus;trunk: 956507.

Bengt I have committed a fix for better re-connect logic in camel-ftp. Could you test it on your system?","21/Jun/10 09:14;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Unconnected-sockets-not-implemented-exception-in-camel-ftp-when-using-ftps-tp509695p509695.html","21/Jun/10 09:14;davsclaus;Link to created ticket at Apache Commons Net
https://issues.apache.org/jira/browse/NET-327","21/Jun/10 19:38;rodehav;Claus, I've tested your new re-connect logic and it works fine. So far I've only tested the producer side. Will try to test the consumer side as well.","21/Jun/10 20:07;rodehav;I've now tested the consumer side as well. Seems to work as well. If I poll via ftps and then stop the ftps server (Filezilla) then I can see the ""unconnected sockets"" in the log. When I start Filezilla again, camel manages to recover and re-connect.","22/Jun/10 04:36;davsclaus;Yeah thanks a lot Bengt for reporting and helping with resolving this issue. Great work digging into the source and identify the root cause and testing it with live systems.

Community works!",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,
Message content redelivered asynchronously by DLC is not re-readable,CAMEL-2826,12486438,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,rgavlin,rgavlin,17/Jun/10 08:56,17/Jan/11 16:50,14/Mar/19 02:43,18/Jun/10 05:06,1.6.3,,,,,,,,,,,,1.6.4,,,,camel-core,,,,0,,,,,,"When a route contains an exception handler clause, a stream based message being redelivered asynchronously after an error is not readable. The cached streams must be reset before redelivery so that they can be read again by the target endpoint. See CAMEL-1834 for a similar problem.
",,,,,,,,,,,,,,,,,,17/Jun/10 11:22;rgavlin;camel-2826-1.x.patch;https://issues.apache.org/jira/secure/attachment/12463286/camel-2826-1.x.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-06-18 04:59:42.03,,,no_permission,,,,,,,,,,,,,,76415,,,Mon Jan 17 16:50:48 UTC 2011,,,Patch Available,,,,0|i01qyv:,8138,,,,,,,,,17/Jun/10 08:58;rgavlin;I plan to submit a patch shortly for this issue.,17/Jun/10 11:22;rgavlin;DeadLetterChannel patch for 1.x branch.,18/Jun/10 04:59;davsclaus;Thanks for the patch Ron. Willem have committed it to 1.x so it will be part of the 1.6.4 release.,18/Jun/10 05:06;davsclaus;1.x: 955817,17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,
onException - continued should not log exhausted just as handled does neither,CAMEL-2825,12486443,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Jun/10 07:16,24/Apr/11 10:01,14/Mar/19 02:43,17/Jun/10 07:42,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,Continued is in fact just like handled by will not break out but continue routing as if the exception didnt occur. So we should not log the exception by default.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76416,,,Sun Apr 24 10:01:37 UTC 2011,,,,,,,0|i01qyn:,8137,,,,,,,,,17/Jun/10 07:42;davsclaus;trunk: 955499.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in org.apache.camel.util.DefaultTimeoutMap,CAMEL-2824,12486417,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tarjei@scanmine.com,tarjei@scanmine.com,16/Jun/10 19:43,24/Apr/11 10:01,14/Mar/19 02:43,18/Jun/10 05:36,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"After running a camel route with a camel Aggregator for a while, I get a deadlock in  org.apache.camel.util.DefaultTimeoutMap. A full processdump is attached to this bug.

I have also tried to recreate this as failing testcase, but without any luck so far. ","Centos 4, Java HotSpot(TM) Server VM (11.0-b15 mixed mode)
",,,,,,,,,,,,,,,,,16/Jun/10 20:11;tarjei@scanmine.com;DeadlockTestCase.java;https://issues.apache.org/jira/secure/attachment/12463284/DeadlockTestCase.java,16/Jun/10 20:18;tarjei@scanmine.com;camel-base-context.xml;https://issues.apache.org/jira/secure/attachment/12463285/camel-base-context.xml,16/Jun/10 19:44;tarjei@scanmine.com;deadlock.log;https://issues.apache.org/jira/secure/attachment/12463283/deadlock.log,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2010-06-18 05:36:52.69,,,no_permission,,,,,,,,,,,,,,76417,,,Sun Apr 24 10:01:07 UTC 2011,,,,,,,0|i01qyf:,8136,,,,,,,,,16/Jun/10 19:44;tarjei@scanmine.com;The attached processdump shows the deadlock as well as the running threads. ,"16/Jun/10 20:11;tarjei@scanmine.com;I have managed to recreate the deadlock using the testcase above on a different computer, linux kernel and JVM. 

Found one Java-level deadlock:
=============================
""Camel Thread 0 - AggregateTimeoutChecker"":
  waiting for ownable synchronizer 0xb0ff7060, (a java.util.concurrent.locks.ReentrantLock$FairSync),
  which is held by ""main""
""main"":
  waiting for ownable synchronizer 0xb0ffef28, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),
  which is held by ""Camel Thread 0 - AggregateTimeoutChecker""

Java stack information for the threads listed above:
===================================================
""Camel Thread 0 - AggregateTimeoutChecker"":
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0xb0ff7060> (a java.util.concurrent.locks.ReentrantLock$FairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
	at java.util.concurrent.locks.ReentrantLock$FairSync.lock(ReentrantLock.java:201)
	at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
	at org.apache.camel.processor.aggregate.AggregateProcessor$AggregationTimeoutMap.onEviction(AggregateProcessor.java:575)
	at org.apache.camel.processor.aggregate.AggregateProcessor$AggregationTimeoutMap.onEviction(AggregateProcessor.java:548)
	at org.apache.camel.util.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:166)
	at org.apache.camel.util.DefaultTimeoutMap.run(DefaultTimeoutMap.java:121)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
""main"":
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0xb0ffef28> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
	at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)
	at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
	at org.apache.camel.util.DefaultTimeoutMap.put(DefaultTimeoutMap.java:78)
	at org.apache.camel.processor.aggregate.AggregateProcessor.isCompleted(AggregateProcessor.java:318)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:235)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)


	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:44)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:230)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:209)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:189)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:208)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:118)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:104)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:344)
	at org.apache.camel.core.DeadlockTestCase.sendMsg(DeadlockTestCase.java:82)
	at org.apache.camel.core.DeadlockTestCase.testDeadlock(DeadlockTestCase.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)
	at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
	at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.run(SurefireBooter.java:241)
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:537)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

Found 1 deadlock.
",16/Jun/10 20:18;tarjei@scanmine.com;This is the basic contextfile I use to run the deadlock testcase.,"18/Jun/10 05:36;davsclaus;trunk: 955841.

Tarjei thanks for the dump and reporting this issue.

I have committed a fix. Can you test it on your system with the fix?",18/Jun/10 05:41;davsclaus;This dead lock only occurs when using timeout as completion condition and Camel is currently aggregating while a timeout condition occurs and there is an Exchange to be evicted.,18/Jun/10 09:58;tarjei@scanmine.com;I can confirm that the deadlock test I created does not fail in multiple runs. The change has been implemented to the system so we'll see if it works. ,"22/Jun/10 07:39;davsclaus;trunk: 956800.

Tarjei I have improved the locking logic so there is only 1 lock in use which should prevent any dead locks. Feel free to give it a test in your system.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - SFTP in fileExists should handle exception being thrown with id code stating no such file,CAMEL-2821,12486700,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Jun/10 04:14,24/Apr/11 10:01,14/Mar/19 02:43,16/Jun/10 04:17,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-ftp-cannot-create-directory-using-sftp-tp479092p479092.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76418,,,Sun Apr 24 10:01:32 UTC 2011,,,,,,,0|i01qxr:,8133,,,,,,,,,16/Jun/10 04:17;davsclaus;trunk: 955123,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
renames (to .processed) are sometimes done even if the download failed.,CAMEL-2817,12486703,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,karlp,karlp,15/Jun/10 22:17,24/Apr/11 10:00,14/Mar/19 02:43,16/Jun/10 04:49,2.1.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,"I have an ftp consumer endpoint URI like: 
{{ftp://conaxTest@localhost:2121/autreq/ok?passiveMode=true&amp;password=conaxTest&move=.processed&delay=5000}}

From my ftp server logs, I can see files being downloaded, and then renamed...
{quote}
[org.apache.ftpserver.command.impl.RETR:pool-2-thread-56] - <File downloaded /autreq/ok/vp006331.emm>
[org.apache.ftpserver.command.impl.RETR:pool-2-thread-56] - <File downloaded /autreq/ok/vp006332.emm>
[org.apache.ftpserver.impl.DefaultFtpHandler:pool-2-thread-57] - <Session idle, closing>
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-56] - <File rename from ""/autreq/ok/vp006331.emm"" to ""/autreq/ok/.processed/vp006331.emm"">
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-54] - <File rename from ""/autreq/ok/vp006332.emm"" to ""/autreq/ok/.processed/vp006332.emm"">
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-54] - <File rename from ""/autreq/ok/vp006333.emm"" to ""/autreq/ok/.processed/vp006333.emm"">
{quote}

Note, that vp006333.emm is renamed, but was never downloaded.  There's no other mention of the file in my logs.  On the camel ftp consumer side, I see that camel attempted to download the file, but ended up with a null...

{quote}
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006331.emm]>
[is.vf.conan.ConanCore:Camel thread 7: seda://updateOk] - <updating operation txid:006331 with the results: OK>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006332.emm]>
[is.vf.conan.ConanCore:Camel thread 7: seda://updateOk] - <updating operation txid:006332 with the results: OK>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006333.emm]>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <Requested parse of an empty file!>
{quote}

The ""requested parse of an empty file"" is logged when {{ex.getIn().getBody(String.class)}} is empty or blank for the file object.

I had a look through the bugs fixed for 2.3.0, but I don't see anything that would be related to this at all.
","linux, apache ftp server.",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-16 04:36:54.403,,,no_permission,,,,,,,,,,,,,,76419,,,Sun Apr 24 10:00:55 UTC 2011,,,,,,,0|i01qwv:,8129,,,,,,,,,16/Jun/10 04:36;davsclaus;Karl how often can you reproduce this issue?,"16/Jun/10 04:49;davsclaus;trunk: 955126.

I found an issue and have fixed this. You are welcome to test with 2.4-SNAPSHOT jars on your system.
The fix is in camel-core so you need to upgrade all Camel JARs to 2.4-SNAPSHOT",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-castor relies on specific, out of date version of Castor",CAMEL-2815,12486707,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davisond,davisond,15/Jun/10 10:32,24/Apr/11 10:01,14/Mar/19 02:43,15/Jun/10 11:42,2.2.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,"camel-castor specifies a non-flexible version dependency on Castor 1.2.0.  Ideally should be changed to [1.2.0,2.0) to allow later versions of Castor to be deployed.  Castor 1.2 was released in Feb 2008, 1.3 was first released in Feb 2009",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:05.379,,,no_permission,,,,,,,,,,,,,,76420,,,Sun Apr 24 10:01:05 UTC 2011,,,,,,,0|i01qwf:,8127,,,,,,,,,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContexts seems to not correctly create their own instance of an imported routeContext.,CAMEL-2811,12486705,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ankelee,ankelee,14/Jun/10 15:28,24/Apr/11 10:01,14/Mar/19 02:43,15/Jun/10 11:50,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"Issue: http://old.nabble.com/Direct-route-not-shared-across-contexts--td28766143.html

When two CamelContexts import the same routeContext they should instantiate their own route based on the definition in the routeContext. But something is not working correctly. One example is having a directqueue of the same name in each route-instance. Camel crashed with the exception:

org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: Endpoint direct://foo only allows 1 active consumer but you attempted to start a 2nd consumer.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1126)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103) ...

This is demonstrated in the sample file attached to this issue.

Obviously this makes other things than the direct-endpoints malfunction. But this should be enough to show the problem.",,,,,,,,,,,,,,,,,,14/Jun/10 15:29;ankelee;RouteContextInstanceError.zip;https://issues.apache.org/jira/secure/attachment/12463282/RouteContextInstanceError.zip,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-06-15 11:48:33.343,,,no_permission,,,,,,,,,,,,,,76421,,,Sun Apr 24 10:01:44 UTC 2011,,,,,,,0|i01qvj:,8123,,,,,,,,,14/Jun/10 15:29;ankelee;Sample case showing the error.,"15/Jun/10 11:48;njiang;This issue is caused by the FromDefinition and SendDefinition remember the endpoint that they resolved from the uri within the first camel context.
I just committed a patch to let these two Definition don't remember the endpoint, in this way we can make route definitions independent with the camel context.","15/Jun/10 11:49;njiang;@Andreas
Please check out the latest camel trunk and verify the fix :)","15/Jun/10 14:21;ankelee;Hi Willem

I tried getting the camel-core jar but I get some XML exceptions. I suppose some dependencies has changed.","16/Jun/10 08:17;njiang;Yes, you need to build the camel trunk from scratch. ",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz component dosen't support to start with a new camelContext after the scheduler is shutdown ,CAMEL-2810,12486454,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Jun/10 08:01,24/Apr/11 10:00,14/Mar/19 02:43,16/Jun/10 08:18,,,,,,,,,,,,,2.4.0,,,,camel-quartz,,,,0,,,,,,"You will get the below error if you want to create a new camel context after the scheduler is shutdown.
 
{code}
org.quartz.SchedulerException: The Scheduler has been shutdown.
	at org.quartz.core.QuartzScheduler.validateState(QuartzScheduler.java:637)
	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:688)
	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:265)
	at org.apache.camel.component.quartz.QuartzComponent.addJob(QuartzComponent.java:150)
	at org.apache.camel.component.quartz.QuartzEndpoint.addTrigger(QuartzEndpoint.java:77)
	at org.apache.camel.component.quartz.QuartzEndpoint.consumerStarted(QuartzEndpoint.java:190)
	at org.apache.camel.component.quartz.QuartzConsumer.doStart(QuartzConsumer.java:39)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:53)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1015)
	at org.apache.camel.component.quartz.QuartzTwoCamelContextTest.setUp(QuartzTwoCamelContextTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at org.junit.internal.runners.MethodRoadie.runBefores(MethodRoadie.java:122)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:86)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:48.338,,,no_permission,,,,,,,,,,,,,,76422,,,Sun Apr 24 10:00:48 UTC 2011,,,,,,,0|i01qvb:,8122,,,,,,,,,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiFactoryFinder should be able to go through the bundle entry to check the META-INF of the Factory,CAMEL-2809,12486641,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Jun/10 03:34,24/Apr/11 10:00,14/Mar/19 02:43,14/Jun/10 05:55,,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,"The refactor of OSGi CAMEL-2693 let the OSGiFactoryFinder just find the factory information based on the camel application context.
As camel core doesn't exports the its META-INF/...  package, we'd better to revert the change, and let OSGiFactoryFinder be able to find the factory class as usual.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:57.24,,,no_permission,,,,,,,,,,,,,,76423,,,Sun Apr 24 10:00:57 UTC 2011,,,,,,,0|i01qv3:,8121,,,,,,,,,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty  can't config the temp directory for the multi part form support rightly,CAMEL-2806,12486512,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Jun/10 05:39,24/Apr/11 10:01,14/Mar/19 02:43,12/Jun/10 05:42,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-jetty,,,,0,,,,,,You will get a ClassCastException if you try to set the temp directory from the camel property.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-12 15:56:23.581,,,no_permission,,,,,,,,,,,,,,76424,,,Sun Apr 24 10:01:14 UTC 2011,,,,,,,0|i01quf:,8118,,,,,,,,,12/Jun/10 15:56;davsclaus;Willem could you add documentation on the Jetty wiki page how to set this temp directory with Jetty?,"13/Jun/10 07:45;njiang;@Claus,

I added a example with comments in the unit test, and it's already a part of the wiki page.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
It is impossible to put # sign in SQL statement in camel-sql,CAMEL-2805,12486729,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,10/Jun/10 14:19,16/Jun/10 08:45,14/Mar/19 02:43,16/Jun/10 08:45,2.3.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,{{SqlProducer}} implementation turns all {{#}} characters into {{?}} making it impossible to have {{#}} in the SQL statement.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76425,,,Wed Jun 16 08:45:24 UTC 2010,,,,,,,0|i01qu7:,8117,,,,,,,,,16/Jun/10 08:45;romkal;Change introducing {{placeholder}} parameter commited in r955155 and documentation updated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel OSGi language resolver can't work rightly,CAMEL-2804,12486735,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Jun/10 08:54,24/Apr/11 10:00,14/Mar/19 02:43,10/Jun/10 09:06,,,,,,,,,,,,,2.4.0,,,,osgi,,,,0,,,,,,"The OSGiResolver doesn't work rightly in OSGi platform.
Here is the mail [thread|http://old.nabble.com/camel-ftp-problems-with-ftps-implicit-mode-ts28777705.html#a28839339] to show it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:44.734,,,no_permission,,,,,,,,,,,,,,76426,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,0|i01qtz:,8116,,,,,,,,,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cxf does not properly populate MessageContentList for PAYLOAD mode,CAMEL-2802,12486734,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,09/Jun/10 18:38,24/Apr/11 10:01,14/Mar/19 02:43,09/Jun/10 19:25,,,,,,,,,,,,,2.4.0,,,,camel-cxf,,,,0,,,,,,"Currently, CxfEndpoint.CamelCxfClientImpl does not leave place holder for SOAP header in MessageContentList.  It could be a problem when CXF tries to retrieve the values in the MessageContentList.  Without the placeholder in place, SOAP body part can be mistakenly retrieved as SOAP header.  This patch should fix the problem.  Note: The fix depends on CXF-2837 (Add null pointer check in SoapOutInterceptor) which will be delivered in CXF 2.2.10.

{code}
Index: src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
===================================================================
--- src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java	(revision 43)
+++ src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java	(working copy)
@@ -513,8 +513,9 @@
                 MessageContentsList content = new MessageContentsList();
                 int i = 0;
                 
-                for (MessagePartInfo partInfo : boi.getOperationInfo().getInput().getMessageParts()) {
-                    if (elements.size() > i) {
+                for (MessagePartInfo partInfo : boi.getOperationInfo().getInput().getMessageParts()) {                 
+                    if (elements.size() > i && partInfo.getConcreteName().getLocalPart()
+                        .equals(elements.get(i).getLocalName())) {
                         content.put(partInfo, elements.get(i++));
                     }
                 }

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:33.611,,,no_permission,,,,,,,,,,,,,,76427,,,Sun Apr 24 10:01:33 UTC 2011,,,,,,,0|i01qtj:,8114,,,,,,,,,09/Jun/10 19:25;wtam;Committed revision 953122.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregation raises NullPointerException if last file in batch is not to be aggregated.,CAMEL-2798,12486739,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,ankelee,ankelee,08/Jun/10 08:33,24/Apr/11 10:00,14/Mar/19 02:43,09/Jun/10 11:09,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"When trying to aggregate files from a directory, it seems that camel-core raises a NullPointerException if the last file of the batch is a single file. That is it doesn't match the correlationExpression with any other files and therefore should just pass through. If such a file is the first file or in the middle of the files (alphabetically) this issue is not present.

See:
http://old.nabble.com/Aggregator-problem-with-files-(Camel-2.3)-td28778641.html#a28780522",Windows 7. NTFS.,,,,,,,,,,,,,,,,,08/Jun/10 08:41;ankelee;aggregator_npe.zip;https://issues.apache.org/jira/secure/attachment/12463280/aggregator_npe.zip,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-06-09 10:47:27.545,,,no_permission,,,,,,,,,,,,,,76428,,,Sun Apr 24 10:00:39 UTC 2011,,,,,,,0|i01qsn:,8110,,,,,,,,,"08/Jun/10 08:35;ankelee;AggregationStrategy + a route using it + data for it.

Run in Spring.","09/Jun/10 10:47;njiang;Hi Andreas,

I can reproduce the issue with your test case, I will committed a quick fix for it today.",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Docs for camel-spring-security not clear on where the Authentication object should be placed,CAMEL-2793,12486722,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pegli,pegli,04/Jun/10 22:23,24/Apr/11 10:01,14/Mar/19 02:43,07/Jun/10 02:56,2.3.0,,,,,,,,,,,,,,,,,,,,0,,,,,,"The docs for the new camel-spring-security component (http://camel.apache.org/spring-security.html) do not specify where the Authentication object should be placed in order to use a secured route.  Initially, I thought that the Authentication object should be a property on the exchange since the constant for authentication is on the Exchange class, but after looking at the code, I found that the component only checks the in message headers.  It would be nice to specify this in the docs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-07 02:56:36.337,,,no_permission,,,,,,,,,,,,,,76429,,,Sun Apr 24 10:01:28 UTC 2011,,,,,,,0|i01qrj:,8105,,,,,,,,,07/Jun/10 02:56;njiang;update the wiki doc for it.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Escaped characters in http4 URLs do not work,CAMEL-2778,12487011,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,scrutinizer,scrutinizer,02/Jun/10 00:42,24/Apr/11 10:01,14/Mar/19 02:43,02/Jun/10 08:36,2.3.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,There is a bug in http4 HttpProducer that is unescaping URL query and path components too early. Patch fix attached.,,,,,,,,,,,,,,,,,,02/Jun/10 00:43;scrutinizer;HttpProducer.patch;https://issues.apache.org/jira/secure/attachment/12463272/HttpProducer.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-06-02 01:01:10.18,,,no_permission,,,,,,,,,,,,,,76430,,,Sun Apr 24 10:01:09 UTC 2011,,,Patch Available,,,,0|i01qo7:,8090,,,,,,,,,"02/Jun/10 01:01;njiang;Hi Roland,

Thanks for your patch. Can you also add a unit test for it?
","02/Jun/10 01:25;scrutinizer;Can't compile the tests due to missing handler package (don't have time to
investigate why). Assuming the request sets the HTTP_PATH header (big
assumption on my part - I am not that familiar with this code), the code
below should work:

HttpPathTest
    @Test
    public void httpEscapedPath() throws Exception {
        Exchange exchange = template.request(""http4://"" + getHostName() +
"":"" + getPort() + ""/search%20more"", new Processor() {
            public void process(Exchange exchange) throws Exception {
            }
        });

        assertExchange(exchange);

 assert(""/search%20more"".equals(exchange.getIn().getHeader(Exchange.HTTP_PATH));
    }


If this code works, the same needs to be done for HTTP_QUERY.

Also, note that I have only fixed these two cases in http4. There may be
more cases in http4 and http.




","02/Jun/10 08:33;njiang;@Roland
I just committed a patch into camel-http4 and also merged the changed into camel-http.
Please feel free to try the Camel 2.4-SNAPSHOT to verify the fix.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
Cached stream file deletion causing file not found errors,CAMEL-2776,12486762,12486755,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,scrutinizer,scrutinizer,01/Jun/10 20:17,24/Apr/11 10:00,14/Mar/19 02:43,07/Jun/10 01:44,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"Cached streams larger than the threshold (64K by default) are almost impossible to work with since when a cached stream is closed, the cached file is deleted. This occurs as a side effect of converting the associated body to string which can occur frequently if tracing is turned on. The net result is file not found errors shown below. The only workaround is to increase the threshold to a large value to keep the body in memory.

It seems that if stream caching is to be useful, the cached files should be kept in a map and cleaned up and the end of the route, rather than upon close.


Work around (set threshold to 10M):
    camelContext.getProperties().put(CachedOutputStream.THRESHOLD, ""10000000"");


Error without work around:

16:09:49.278 [main] ERROR o.a.c.c.t.TimerConsumer - Error processing exchange. Exchange[Message: [Body is instance of java.io.InputStream]]. Caused by: [org.apache.camel.RuntimeCamelException - java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)]
org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:65)
	at org.apache.camel.util.MessageHelper.resetStreamCache(MessageHelper.java:106)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:344)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:111)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:80)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:44)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:106)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:104)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:189)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:103)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:87)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:173)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:102)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)
Caused by: java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:63)
	... 36 common frames omitted
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-02 04:05:15.724,,,no_permission,,,,,,,,,,,,,,76431,,,Sun Apr 24 10:00:41 UTC 2011,,,,,,,0|i01qnr:,8088,,,,,,,,,"02/Jun/10 04:05;davsclaus;The stream cache should be changed to use HawtDB or the likes for a better cache store and leverage Exchange OnCompletion to cleanup the cache. This will ensure the ""file"" is not deleted pre mature.

","02/Jun/10 08:52;njiang;We can't just delete the cached file on Exchange OnCompletion, as we may still need to access the CachedInputStream after that. 
You can see it from https://issues.apache.org/activemq/browse/CAMEL-2636.
I think we can mark the CachedInputStream can delete the file when the exchange onCompletion is called, and then the CachedInputStream is closed we can delete the file.
We don't delete the file before the onCompletion even the CachedInputStream is closed.

When we change to using HawtDB, we can do the same thing.","02/Jun/10 09:32;davsclaus;@Willem

Yeah that is right. I kinda thought of that too this morning.

So if the OnCompletion will _enrich_ the stream with a DeleteFileOnCloseStream then the Camel component can use the stream to send back the reply and when it closes it, the file will be deleted as well.

The only concern would be what if that stream is *not* closed or used after the on completion? Then the file is not deleted and kept on file system to take up space.

","04/Jun/10 09:24;njiang;@Claus,
I think user has the responsibility to close the stream that he don't want to use.
Maybe we can address this issue by using HawtDB.
",07/Jun/10 01:44;njiang;Committed a patch in revision 951337 and created a JIRA CAMEL-2794 for using the HawtDB to store the cached file.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
Bindy - No @Section causes a null key being generated which causes a NumberFormatException,CAMEL-2773,12486511,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,davsclaus,davsclaus,01/Jun/10 06:33,24/Apr/11 10:00,14/Mar/19 02:43,11/Jun/10 15:02,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-bindy,,,,0,,,,,,"See nabble
http://old.nabble.com/Bindy-CSV-not-Marshaling-ts28719942.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-11 15:00:06.938,,,no_permission,,,,,,,,,,,,,,76432,,,Sun Apr 24 10:00:54 UTC 2011,,,,,,,0|i01qn3:,8085,,,,,,,,,11/Jun/10 15:00;cmoulliard;I have committed the fix,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty can't deal with multiform data rightly,CAMEL-2772,12485929,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Jun/10 00:55,24/Apr/11 09:57,14/Mar/19 02:43,02/Jun/10 10:10,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-jetty,,,,0,,,,,,"You can't get the inputStream from the attachment when camel-jetty handle the request of MultiPartForm.
Here is the mail thread[1] which discusses about it.

[1] http://old.nabble.com/Unsupported-data-type-exception-with-Jetty-component-tp28730373p28731758.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-14 17:48:44.499,,,no_permission,,,,,,,,,,,,,,76433,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,0|i01qmv:,8084,,,,,,,,,"14/Jul/10 17:48;pegli;In case anyone finds this bug and need direction, here's the workaround that I use when processing attachments.  Note that I set the Exchange.FILE_NAME header to the attachment name prior to calling this code, as dh.getName() always seems to return null in Camel 2.3.0:

{code}
DataHandler dh  = exchange.getIn().getAttachment(""myfile.txt"");
if (dh.getContent() instanceof DataSource) {
    InputStream in = ((DataSource) dh.getContent()).getInputStream();
    String name = dh.getName() != null ? dh.getName() : exchange.getIn().getHeader(Exchange.FILE_NAME, String.class);
    String contentType = dh.getContentType();
}
{code}",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MailBinding can't handle the subject header with NO_ASCII code rightly.,CAMEL-2763,12487243,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/May/10 03:40,17/Jan/11 16:50,14/Mar/19 02:43,28/May/10 08:16,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,2.3.0,1.6.3,2.4.0,,,camel-mail,,,,0,,,,,,"Here is the [mail thread|http://old.nabble.com/Camel-Mail%3A-Subject-cannot-handle-unicode-chars--tp28700124p28700124.html] which discusses about it.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-17 16:50:47.381,,,no_permission,,,,,,,,,,,,,,76434,,,Mon Jan 17 16:50:47 UTC 2011,,,,,,,0|i01qkv:,8075,,,,,,,,,28/May/10 08:16;njiang;Committed the patch in camel trunk and camel-1.x branch.,17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default Tracer configuration eats Mina ByteBuffer responses,CAMEL-2762,12487945,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cott@internetstaff.com,cott@internetstaff.com,27/May/10 16:07,24/Apr/11 10:00,14/Mar/19 02:43,28/May/10 07:39,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-mina,,,,0,,,,,,"It appears that the only way to get UDP responses out of Camel Mina without binary ( > 7 bit) getting garbled by internal conversions is to reply with a Mina ByteBuffer.

Unfortunately, if you have Trace on, the DefaultTraceFormatter ends up calling MinaConverter.toByteArray, which ""consumes"" the ByteBuffer, setting it to empty, which means no reply goes out. :)
{code}
27/05/10 07:02:41:DEBUG:org.apache.camel.component.mina.MinaConsumer:Writing body: DirectBuffer[pos=11 lim=11 cap=16: empty]
{code}
I'm not sure how to fix this one cleanly, so I don't have a patch.  I might also be doing something wrong, if so I'm all ears. :)

Here's a trace:
{code}
	  at org.apache.camel.component.mina.MinaConverter.toByteArray(MinaConverter.java:44)
	  at org.apache.camel.component.mina.MinaConverter.toString(MinaConverter.java:49)
	  at sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source:-1)
	  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	  at java.lang.reflect.Method.invoke(Method.java:597)
	  at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:736)
	  at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:50)
	  at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:159)
	  at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:85)
	  at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:74)
	  at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:48)
	  at org.apache.camel.util.MessageHelper.extractBodyAsString(MessageHelper.java:63)
	  at org.apache.camel.processor.interceptor.DefaultTraceFormatter.format(DefaultTraceFormatter.java:75)
	  at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:231)
{code}

Thanks!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-28 07:39:27.542,,,no_permission,,,,,,,,,,,,,,76435,,,Sun Apr 24 10:00:59 UTC 2011,,,,,,,0|i01qkn:,8074,,,,,,,,,"28/May/10 07:39;davsclaus;trunk: 949124.

Cott can you test with latest code on your system?",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Consume should run in an unit of work,CAMEL-2760,12485785,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/May/10 13:19,24/Apr/11 10:01,14/Mar/19 02:43,27/May/10 13:31,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76436,,,Sun Apr 24 10:01:35 UTC 2011,,,,,,,0|i01qk7:,8072,,,,,,,,,27/May/10 13:31;davsclaus;trunk: 948830.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnCompletion - Should use pipes and filters to ensure IN is OUT from last step,CAMEL-2758,12487245,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/May/10 05:23,24/Apr/11 10:00,14/Mar/19 02:43,27/May/10 06:09,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"OnCompletion will route the Exchange directly as is which means if you have set an OUT the first step in the onCompletion route may not use this OUT but the IN instead.

And also add option {{useOriginalBody}} so you can do work based on the original input instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76437,,,Sun Apr 24 10:00:59 UTC 2011,,,,,,,0|i01qjr:,8070,,,,,,,,,27/May/10 06:09;davsclaus;trunk: 948683.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM endpoints with same name do not communicate if args don't match,CAMEL-2755,12487241,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ndjensen,ndjensen,26/May/10 21:59,24/Apr/11 10:01,14/Mar/19 02:43,27/May/10 06:26,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"If you send to a VM endpoint from one route and consume from the same endpoint in another route, but include an argument on only one of the routes, Camel sees them as two different routes.  Therefore, the messages are never consumed.  For example:

<camelContext id=""sendNotifyContext""
	xmlns=""http://camel.apache.org/schema/spring""
	errorHandlerRef=""errorHandler"">

      <route id=""sendToNotify"">
            <from uri=""..."" />
            ....
            *<to uri=""vm:myNotify"" />*
      </route>
</camelContext>

<camelContext id=""receiveNotifyContext""
	xmlns=""http://camel.apache.org/schema/spring""
	errorHandlerRef=""errorHandler"">

      <route id=""receiveNotify"">
            *<from uri=""vm:myNotify?size=2500"" />*
            ....
            <to uri=""..."" />
      </route>
</camelContext>


The producer appears to send to vm:myNotify while the consumer is listening to a separate endpoint named vm:myNotify?size=2500, so the messages build up and are never received.",JDK 1.6 using Spring 2.5.6 to start camel contexts,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-27 06:26:26.098,,,no_permission,,,,,,,,,,,,,,76438,,,Sun Apr 24 10:01:26 UTC 2011,,,,,,,0|i01qj3:,8067,,,,,,,,,27/May/10 06:26;davsclaus;trunk: 948686.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer Component is not Restartable,CAMEL-2751,12487258,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,scranton,scranton,25/May/10 18:58,24/Apr/11 10:00,14/Mar/19 02:43,26/May/10 02:21,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"When the TimerComponent is stopped, it cancels all of the Timer instances it has created, which is good. However, TimerEndpoint keeps a local reference to the Timer instance, so if the TimerComponent is restarted, the TimerEndpoint will throw an exception as its timer is no longer usable as it has been canceled.

This patch provides a unit test, TimerRestartTest, and an update to TimerComponent that fixes this issue. The TimerComponent fix is to keep a list of all TimerEndpoints that have a reference to a Timer instance created by the TimerComponent. When TimerComponent.doStop is called, those TimerEndpoint references to the now canceled Timer instances are cleared.",,,,,,,,,,,,,,,,,,25/May/10 18:59;scranton;TimerComponentRestart.patch;https://issues.apache.org/jira/secure/attachment/12463266/TimerComponentRestart.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-05-26 02:21:25.81,,,no_permission,,,,,,,,,,,,,,76439,,,Sun Apr 24 10:00:43 UTC 2011,,,Patch Available,,,,0|i01qi7:,8063,,,,,,,,,"26/May/10 02:21;hadrian;Scott, thanks for the patch. I modified it a bit. One thing was to get rid of the tabs to make checkstyle happy. Another change was that instead of using and navigating the list in the TimerComponent, I thought it's easier to just have the TimerEndpoint implement Service and then reset the timer to null on stop().

Good catch. Thanks.","26/May/10 02:21;hadrian;Patch applied with thanks to Scott.
r948293",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.bean.BeanInfo not working properly with mocked Interfaces,CAMEL-2750,12487250,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgsoft,dgsoft,25/May/10 14:26,24/Apr/11 10:01,14/Mar/19 02:43,26/May/10 09:16,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"The BeanInfo-Class shows the same behaviour as ClassUtils-Class from Spring 3.0.x (see Spring Issue 7066, https://jira.springsource.org/browse/SPR-7066).
When working with mock objects created by mockito using an interface the getSuperclass()-Method returns java.lang.Object and the method to called on the mock can't be found. 

While looking around for a solution I found the path applied in Spring (see https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java?content-type=text/vnd.viewcvs-markup&r1=3227&r2=3228).

In method 
public static Class<?> getUserClass(Class<?> clazz) 

the code

return (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR) ?  clazz.getSuperclass() : clazz);

is replaced by 

if (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {
    Class<?> superClass = clazz.getSuperclass();
    if (superClass != null && !Object.class.equals(superClass)) {
         return superClass;
    }
}
return clazz;

While waiting for a fix in BeanInfo class a workaround is to mock the concrete class not the interface, but this makes the test code more complicated if several classes implement the same interface.

A Wor","Windows XP, JDK 1.6.0.17, Eclipse Ganymed, Maven 2.2.1, ActiveMQ 5.3.1, Apache Camel 2.2 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-26 09:16:03.637,,,no_permission,,,,,,,,,,,,,,76440,,,Sun Apr 24 10:01:40 UTC 2011,,,,,,,0|i01qhz:,8062,,,,,,,,,"26/May/10 09:16;davsclaus;trunk: 948371.

Thanks for reporting and providing the solution.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf feature doesn't include all cxf needs bundles,CAMEL-2748,12487274,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/May/10 07:06,24/Apr/11 10:01,14/Mar/19 02:43,24/May/10 07:12,2.2.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,"Current camel-cxf features doesn't include wss4j, saaj-imple, opensaml, fastinfoset bundle.
We need to add these bundle into camel-cxf features.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:39.702,,,no_permission,,,,,,,,,,,,,,76442,,,Sun Apr 24 10:01:39 UTC 2011,,,,,,,0|i01qhj:,8060,,,,,,,,,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExpressionDefinition toString  print the expression and expression value at the same time,CAMEL-2745,12487278,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,21/May/10 06:59,24/Apr/11 10:01,14/Mar/19 02:43,21/May/10 07:26,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"When I running the test which need to call the ExpressionDefinition toString method, I found the expression is
{code}
    simple{bodyAs(java.lang.String.class)bodyAs[java.lang.String]}
{code}
We need to avoid adding the expression when the ExpressionDefinition has the expression value.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:15.212,,,no_permission,,,,,,,,,,,,,,76443,,,Sun Apr 24 10:01:15 UTC 2011,,,,,,,0|i01qgv:,8057,,,,,,,,,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AggregationStrategy returning null causes NPE,CAMEL-2744,12487257,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gim,gim,20/May/10 16:37,24/Apr/11 10:00,14/Mar/19 02:43,21/May/10 05:58,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"When the AggregationStrategy's aggregate method returns null, the AggregateProcessor throws an NPE. While this is a result of user error, I think it would be easy to provide a more useful error indicating what the true problem is. This is the (not very helpful) error the user sees:
{noformat}
ERROR | Caused by: [org.apache.camel.RuntimeCamelException - java.lang.NullPointerException]
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1117)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:104)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.NullPointerException
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:227)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	... 9 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-21 05:58:32.088,,,no_permission,,,,,,,,,,,,,,76444,,,Sun Apr 24 10:00:36 UTC 2011,,,,,,,0|i01qgn:,8056,,,,,,,,,21/May/10 05:58;davsclaus;trunk: 946886,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProducer should not sending the Http headers with low case,CAMEL-2743,12487605,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/May/10 13:46,24/Apr/11 09:57,14/Mar/19 02:43,22/Sep/10 08:33,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,"Here is the mail thread which discusses about it.
http://old.nabble.com/camel-http-converts-headers-to-lower-case-tp28620717p28620717.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-21 13:29:39.15,,,no_permission,,,,,,,,,,,,,,76445,,,Sun Apr 24 09:57:10 UTC 2011,,,,,,,0|i01qgf:,8055,Regression,,,,,,,,20/May/10 14:22;njiang;submit a patch with a test into camel trunk.,"21/Sep/10 13:29;pino_otto;I am using Camel 2.4.0 and still having this problem.

The HTTP headers are all in lower case.

",21/Sep/10 13:30;pino_otto;This bug is present in Camel 2.4.0,"21/Sep/10 13:48;njiang;Hi giovanni

How did you get the header from the message?
Did you have an chance to check out the unit test[1] of the patch?

[1]http://svn.apache.org/viewvc/camel/trunk/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpHeaderTest.java?view=markup&pathrev=946640

Willem",21/Sep/10 14:25;davsclaus;I can reproduce it. Will work on it.,"21/Sep/10 14:48;davsclaus;trunk: 999444.

Its now fixed. And there is now a better unit test to catch and ensure headers returned is in the expected case.","21/Sep/10 17:06;pino_otto;That fix did not solve my problem.

Is it possible that a similar issue is present also on org.apache.camel.component.http.DefaultHttpBinding

 protected void popluateRequestParameters(HttpServletRequest request, HttpMessage message) {
        //we populate the http request parameters without checking the request method
-->  Map<String, Object> headers = message.getHeaders();  <<<------- here
        Enumeration names = request.getParameterNames();
        while (names.hasMoreElements()) {
            String name = (String)names.nextElement();
            Object value = request.getParameter(name);
            if (headerFilterStrategy != null
                && !headerFilterStrategy.applyFilterToExternalHeaders(name, value, message.getExchange())) {
                headers.put(name, value);
            }
        }

Also the method name could be refactored to ""populate..."" instead of ""popluate.....""

","21/Sep/10 18:02;davsclaus;Please try again and make sure you use the source code.

The code above is when Camel receives a HttpRequest.
It copies the headers from HttpRequest to Camel Message.

The bug is in the opposite. When Camel sends back the response by populating the HttpResponse.

Can you create a small zip file with a Camel project that demonstrates the problem you have.
And maybe use a network sniffer tool to check what data is send in the packages.

There are http proxy tools which can sniff the data.","22/Sep/10 08:32;pino_otto;Hi Claus, I apologize.

It was my mistake, because yesterday I applied the new source code which fixes the bug to the wrong class in the source code of Camel 2.4.

Today I realized the mistake and applied the bug fix to the correct class (DefaultHttpBinding) and it WORKS!

Thanks again and sorry for making confusion.

",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,
camel-jms - Sending to WebSphereMQ must use specific setBooleanProperty methods to set JMS properties,CAMEL-2742,12487276,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/May/10 12:52,24/Apr/11 10:01,14/Mar/19 02:43,21/May/10 14:19,2.2.0,2.3.0,,,,,,,,,,,2.3.0,,,,camel-jms,,,,0,,,,,,"This code in JMSBinding
{code}
                // must encode to safe JMS header name before setting property on jmsMessage
                String key = jmsKeyFormatStrategy.encodeKey(headerName);
                jmsMessage.setObjectProperty(key, value);
{code}

Should detect the value type and use the jmsMessage.setBooleanProperty() and so on. Otherwise IBM thrown an exception.

See nabble
http://old.nabble.com/jmsbinding-problem-ts28620489.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76446,,,Sun Apr 24 10:01:42 UTC 2011,,,,,,,0|i01qg7:,8054,,,,,,,,,21/May/10 14:19;davsclaus;trunk: 947018.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GZIP/ZIP marshal/unmarshal leaves input file open,CAMEL-2741,12487281,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,scrutinizer,scrutinizer,20/May/10 02:31,24/Apr/11 10:01,14/Mar/19 02:43,21/May/10 06:16,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"Gzip/zip marshal/unmarshal leaves input files open, relying on the garbage collector to close the file. The cause sporadic file deletion exceptions in the following route:
          from(""file:incoming?delete=true"")
            .marshal().gzip()
            .to(""file:outgoing?fileName=${file:name}.gz"");

",,,,,,,,,,,,,,,,,,20/May/10 02:32;scrutinizer;zipfix.patch;https://issues.apache.org/jira/secure/attachment/12463260/zipfix.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-05-21 05:30:17.219,,,no_permission,,,,,,,,,,,,,,76447,,,Sun Apr 24 10:01:45 UTC 2011,,,Patch Available,,,,0|i01qfz:,8053,,,,,,,,,21/May/10 05:30;davsclaus;There is a helper method to close the streams. I will polish the code a bit and move the close method to IOHelper where it belongs.,21/May/10 06:16;davsclaus;trunk: 946891.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with Spring NamespaceHandler class org.apache.camel.spring.handler.CamelNamespaceHandler ,CAMEL-2739,12487283,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tejash_p_shah,tejash_p_shah,19/May/10 13:05,24/Apr/11 10:01,14/Mar/19 02:43,21/May/10 07:13,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-spring,,,,0,,,,,,"I contributed spring Namespace Handler from my custom eclipse plug-in as follows:
<extension point=""org.springframework.ide.eclipse.beans.core.namespaces"">
		<namespace name=""Camel Spring Namespace Handler extension""
			namespaceHandler=""org.apache.camel.spring.handler.CamelNamespaceHandler""
			uri=""http://camel.apache.org/schema/spring"">
		</namespace>
</extension>

After this, I create spring.xml file using some camel elements and I validated using spring validator . Now whenever I edit the spring.xml file and save it I am getting following error message in error log.

org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [C:/workspace locations/New Folder (10)/config/spring.xml]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:420)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$2.loadBeanDefinitions(BeansConfig.java:326)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:358)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:1)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
at java.util.concurrent.FutureTask.run(FutureTask.java:123)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
at java.util.concurrent.FutureTask.run(FutureTask.java:123)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
at java.lang.Thread.run(Thread.java:595)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
at org.springframework.ide.eclipse.beans.core.DefaultBeanDefinitionRegistry.removeBeanDefinition(DefaultBeanDefinitionRegistry.java:189)
at org.apache.camel.spring.handler.CamelNamespaceHandler.autoRegisterBeanDefinition(CamelNamespaceHandler.java:411)
at org.apache.camel.spring.handler.CamelNamespaceHandler.registerTemplates(CamelNamespaceHandler.java:364)
at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:272)
at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:84)
at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:56)
at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)
at org.apache.camel.component.cxf.transport.spring.AbstractCamelContextBeanDefinitionParser.doParse(AbstractCamelContextBeanDefinitionParser.java:55)
at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:84)
at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:56)
at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)



There seems to problem with NamespaceHandler class. 
","Windows, JDK 1.5
Camel with Spring and CXF",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-19 13:35:17.333,,,no_permission,,,,,,,,,,,,,,76449,,,Sun Apr 24 10:01:45 UTC 2011,,,,,,,0|i01qfj:,8051,,,,,,,,,"19/May/10 13:35;njiang;I just check the code of CamelNamespaceHandler, current template can be defined out side of camelContext.
Can you try out the camel 2.2.0 or latest Camel 2.3-SNAPSHOT for it ?","20/May/10 07:35;tejash_p_shah;Thanks for quick response on this issue.

Let me give more clarification on this issue. I created spring.xml file with few spring <bean> elements and one <camel:camelContext> element with multiple <camel:route> definitions within it.
I did not define any bean with name 'template' in my spring.xml configuration file but still I am getting exception mentioned in the defect description. 

I also tested this with camel-2.2.0 still getting same error.

You mentioned about current template in your comment, which I had not created. Do I need to create it ? 

Additionally, I am able to deploy this spring.xml configuration successfully without any errors, I just get errors within eclipse IDE when I validate spring.xml file with spring validator.  ","21/May/10 06:02;davsclaus;This is a bug in Spring Tools and not in Camel.
You need to report this at Spring.

Looks like the Spring tools throws an exception on purpose staring {{Not Implemented}}.
{code}
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
{code}

Can uses the method {{isBeanNameInUse}} to determine if there is a bean registered in the Spring XML file with the id {{template}}.",21/May/10 06:03;davsclaus;If you report this at Spring you are welcome to post a comment with a link to the reported issue,21/May/10 06:10;davsclaus;Let me add a workaround in Camel to cater for that thrown exception. Then you should be able to continue editing Camel with the Spring tooling,21/May/10 06:13;davsclaus;Will add a workaround in Camel,"21/May/10 07:13;davsclaus;trunk: 946915.

Tejash can you try with latest source code or wait for Camel 2.3 to be released and try it.","21/May/10 07:51;tejash_p_shah;Thanks for adding workaround.
 I will try out with latest source build and once 2.3 gets release I will use that",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,
SMPP component should set the final status header for delivery notifications,CAMEL-2732,12487294,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jacovt,jacovt,18/May/10 15:12,24/Apr/11 10:01,14/Mar/19 02:43,19/May/10 01:02,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-smpp,,,,0,,,,,,"The camel-smpp comonent should set the final status that is provided by the delivery receipt from the SMSC.

Currently the status header is not set, but can easily be added by making a call to smscDeliveryReceipt.getFinalStatus() and setting the header CamelSmppStatus on the camel message (as documented on the site [http://camel.apache.org/smpp.html].

Patch provided. ",,,,,,,,,,,,,,,,,,18/May/10 15:13;jacovt;camel-smpp-delivery-notification-status-patch.diff;https://issues.apache.org/jira/secure/attachment/12463256/camel-smpp-delivery-notification-status-patch.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-05-19 01:02:55.434,,,no_permission,,,,,,,,,,,,,,76450,,,Sun Apr 24 10:01:10 UTC 2011,,,Patch Available,,,,0|i01qdz:,8044,,,,,,,,,18/May/10 15:13;jacovt;Patch for adding header for final status on delivery notifications.,19/May/10 01:02;njiang;Applied the patch with thanks to Jacov.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
String to Source type converter is not found in TypeConverterRegistry,CAMEL-2725,12487309,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/May/10 08:05,24/Apr/11 10:00,14/Mar/19 02:43,15/May/10 08:58,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"This causes a problem when you need to convert a {{String}} payload to a {{javax.xml.transformation.Source}} such as when using the XSTL component.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76451,,,Sun Apr 24 10:00:51 UTC 2011,,,,,,,0|i01qcf:,8037,,,,,,,,,15/May/10 08:58;davsclaus;trunk: 944597.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagedRoute should be unregister when the RouteDefinition is removed,CAMEL-2722,12487313,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/May/10 02:23,24/Apr/11 10:01,14/Mar/19 02:43,15/May/10 00:22,2.1.0,2.2.0,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"Here is the mailing thread which discusses about it.
http://old.nabble.com/Dynamically-removing-routes-tp28548051p28548051.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-15 08:57:04.52,,,no_permission,,,,,,,,,,,,,,76452,,,Sun Apr 24 10:01:40 UTC 2011,,,,,,,0|i01qbr:,8034,,,,,,,,,"15/May/10 00:21;njiang;Now the ManagedRoute will be unregistered when CamelContext shutdown the route.
And we don't unregister the ManagedRoute when route is stopped to let ManagedRoute start itself from JMX console.","15/May/10 08:57;davsclaus;Willem, good idea to use the shutdown to unregister the mbeans.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmlConverter omits XML declaration,CAMEL-2720,12487314,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dragisak,dragisak,13/May/10 19:23,24/Apr/11 10:01,14/Mar/19 02:43,14/May/10 07:00,,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"org.apache.camel.converter.jaxp.XmlConverter is hardcoded to omit XML declaration when converting DOM document to string. Character encoding information is lost that way.

Ideally there should be a way to override default output properties. 

See:
http://fisheye6.atlassian.com/browse/camel/trunk/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java?r=HEAD",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-14 02:18:14.077,,,no_permission,,,,,,,,,,,,,,76453,,,Sun Apr 24 10:01:30 UTC 2011,,,,,,,0|i01qbb:,8032,,,,,,,,,14/May/10 02:18;njiang;I can let XmlConverter check the camelContext property before it decide to omit XML declaration by default :),"14/May/10 06:45;njiang;Now you can override the default output properties by setting the CamelContext properties like this

Java DSL
{code}
 camelContext.getProperties().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.ENCODING, ""US_ASCII"");
 camelContext.getProperties().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.STANDALONE, ""yes"");
{code}

or  with Spring configuration

{code}
  <camelContext>
       <properties>
           <property key=""org.apache.camel.xmlconverter.output.encoding"" value=""US_ASCII""/>
           <property key=""org.apache.camel.xmlconverter.output.standalone"" value=""yes""/>
      </properties>
     ....
   </camelContext>
{code}",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incomplete cleanup of jmx mbeans after context stop,CAMEL-2716,12486121,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,12/May/10 19:14,24/Apr/11 09:58,14/Mar/19 02:43,08/Jul/10 15:22,2.2.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,"There is a fair amount of cleanup on context stop, but it is incomplete. Most of it has to do with JMX and if one creates and starts a new CamelContext she may end up with managed objects pointing nowhere or have duplicates or other minor side-effects. One of the nasty side effects is that we are pretty much forced to use ""<forkMode>pertest</forkMode>"" in our surefire plugin configuration, ensuring a clean slate for every test.

For long running apps in which you may have multiple CamelContext running at various times during the lifetime of the application we must properly cleanup when stopping the context. I have a series of patches fixing that which I hope to finish before 2.3. Once we're comfortable and tested with multiple jdk implementations and versions, I'd change the forkMode to ""once"". In my local copy this reduces the test time in core from 40+ mins to under 15 mins. Since interactions between tests is still possible and might lead us on a wild-goose we could add another profile that uses the safer yet time consuming ""pertest"" forkMode.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-28 08:06:54.687,,,no_permission,,,,,,,,,,,,,,76454,,,Sun Apr 24 09:58:09 UTC 2011,,,,,,,0|i01qaf:,8028,,,,,,,,,"12/May/10 19:35;hadrian;r943644 - first cut. 

Also added a way to reset the counters to have predictable ObjectNames during tests. DefaultNodeIdFactory.resetAllCounters() could lead to name conflicts if used without care, reason why I made it protected, so it cannot be invoked directly.","28/May/10 08:06;davsclaus;Hadrian I se no more bug in there, in the cleanup. I think your commit fixed that.

So I think we should resolve this ticket. And if you need a ticket for _speeding up unit tests_ then just create a new ticket.

","28/May/10 19:25;hadrian;@Claus, there is one more issue I am working on. This should stay open. My previous commit was done in time for 2.3.0, where things are already better, but still not fully fixed.","08/Jul/10 06:34;hadrian;With the last commit at r961588 camel-core is done. I changed the forkMode to ""once"" in the surefire plugin which saves me about 45 mins of testing just in camel-core.",24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultRestletBinding should not treat all the post request as a Web from,CAMEL-2711,12487323,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/May/10 01:54,24/Apr/11 10:01,14/Mar/19 02:43,12/May/10 02:14,,,,,,,,,,,,,2.3.0,,,,camel-restlet,,,,0,,,,,,"We got a user bug report from the [Fuse Forums|http://fusesource.com/forums/thread.jspa?threadID=1862&tstart=0].
After digging the code, I found the DefaultRestletBinding treat the all the request as a web form .  
It should check the request entity's MediaType to decide if the request entity is a web from.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:20.861,,,no_permission,,,,,,,,,,,,,,76455,,,Sun Apr 24 10:01:20 UTC 2011,,,,,,,0|i01q9b:,8023,,,,,,,,,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File name lost when it starts with the same characters as the relative directory on the endpoint,CAMEL-2708,12487322,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,11/May/10 05:55,24/Apr/11 10:01,14/Mar/19 02:43,11/May/10 09:17,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"When polling file from a directory using a relative file URI, the file name gets lost when it starts with the same characters as the directory name.

E.g. a directory 'orders' containing 'orders-1719.xml' and 'orders-1819.xml'

{code}
from(""file:orders"").process(new Processor() {
  public void process(Exchange exchange) {
    // there's no file name on the message here (exchange.getIn().getHeader(Exchange.FILE_NAME) returns null)
  }
});
{code}",,,,,,,,,,,,,,,,,,11/May/10 06:36;gertvanthienen;CAMEL-2708.diff;https://issues.apache.org/jira/secure/attachment/12463251/CAMEL-2708.diff,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-05-11 09:17:28.801,,,no_permission,,,,,,,,,,,,,,76456,,,Sun Apr 24 10:01:34 UTC 2011,,,,,,,0|i01q8n:,8020,,,,,,,,,11/May/10 06:36;gertvanthienen;Attaching the patch because svn down at the moment,"11/May/10 09:17;davsclaus;Thanks Gert for the patch.

trunk: 943060.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfbean component should ignore the wsdlLocation in the POJO,CAMEL-2700,12487336,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,06/May/10 13:29,24/Apr/11 10:01,14/Mar/19 02:43,06/May/10 13:47,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-cxf,,,,0,,,,,,"cxfbean component should ignore the wsdlLocation in the annotation in the POJO when starting the service. It should be using the JAXWS bean to create the service. Came across this bug when I (mistakenly) set the wsdlLocation to the http one published by the service, which of course wasn't up yet and I got the exception below. Fix for this coming soon.

For Googlers out there, this ticket *may* fix this error message you may be getting:
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://jaxwsBean due to: Failed to create service.
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437)
    at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
    at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154)
    at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109)
    at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115)
    at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63)
    at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57)
    at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87)
    at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286)
    at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114)
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640)
    ... 32 more
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
    at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:93)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:396)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:521)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:271)
    at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:177)
    at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
    at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:105)
    at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:104)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48)
    at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78)
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416)
    ... 42 more
Caused by: javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream
    at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:226)
    at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:179)
    at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:91)
    ... 54 more
Caused by: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream
    at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:983)
    at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:217)
    ... 56 more 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:10.834,,,no_permission,,,,,,,,,,,,,,76458,,,Sun Apr 24 10:01:10 UTC 2011,,,,,,,0|i01q6v:,8012,,,,,,,,,06/May/10 13:46;janstey;Fixed in rev http://svn.apache.org/viewvc?rev=941723&view=rev,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty - NettyProducer should detect write failures as its async operation,CAMEL-2698,12487333,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/May/10 09:07,24/Apr/11 10:00,14/Mar/19 02:43,06/May/10 09:18,2.3.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,"It should do as MinaHelper

See nabble
http://old.nabble.com/Recovery-From-Netty-Connection-Drop-ts28467631.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76459,,,Sun Apr 24 10:00:41 UTC 2011,,,,,,,0|i01q6f:,8010,,,,,,,,,06/May/10 09:18;davsclaus;trunk: 941620.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpEntityConverter should not create a InputStreamEntity by using the GZIPHelper.toGZIPInputStream(),CAMEL-2694,12487329,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/May/10 13:06,17/Jan/11 16:50,14/Mar/19 02:43,07/May/10 07:15,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,,,,1.6.3,2.3.0,,,,,,,0,,,,,,"GZIPHelper.toGZIPInputStream() is used for uncompress the zip date and not for compress the data.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-17 16:50:43.404,,,no_permission,,,,,,,,,,,,,,76460,,,Mon Jan 17 16:50:43 UTC 2011,,,,,,,0|i01q5j:,8006,,,,,,,,,17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multithreading bug: getBody sporadically returns null,CAMEL-2692,12487318,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,scrutinizer,scrutinizer,05/May/10 04:57,17/Jan/11 16:50,14/Mar/19 02:43,12/May/10 07:02,1.6.2,2.3.0,,,,,,,,,,,1.6.3,2.3.0,,,camel-core,,,,0,,,,,,"Note that the only workaround for this bug is to remove the parallelProcessing() call in the builder.

I have a simple route that processes a file by splitting on a tag and processing the DOM of each split message. The problem is that getBody is randomly returning null but ONLY when using the parallelProcessing feature of split. For some runs of the same XML file, the error does not occur at all (the file is about 2MB of data), others it will happen once or twice. I am currently using the latest 2.3-SNAPSHOT. 

Also note, that after detecting the null, I tried calling getBody(String.class) - this also may return null. Sometimes it does return the proper XML. 

Route configuration that reproduces the problem (my input XML is about 2MB with about 500 article tags): 

        public void configure() throws Exception { 
          from(""file:D:/inbox"") 
            .split(new XPathBuilder(""//article"")) 
              .parallelProcessing()                     // remove this line getBody below never returns null 
              .process(new Processor() { 
                public void process(Exchange exchange) throws Exception { 
                  Message inMessage = exchange.getIn(); 
                  org.w3c.dom.Document domDocument = inMessage.getBody(org.w3c.dom.Document.class); 
                  if (domDocument == null) { 
                    log(""Null body""); 
                  } else { 
                    // process DOM here 
                  } 
                } 
              }) 
            .end() 
        } 
      }); 
","Windows 7 64 bit, JDK 1.6.0_20",,,,,,,,,,,,,,,,,05/May/10 13:26;scrutinizer;news_20100502000001.zip;https://issues.apache.org/jira/secure/attachment/12463250/news_20100502000001.zip,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-05-05 05:01:08.421,,,no_permission,,,,,,,,,,,,,,76461,,,Mon Jan 17 16:50:42 UTC 2011,,,,,,,0|i01q53:,8004,,,,,,,,,05/May/10 05:01;davsclaus;Can you attach a sample XML file?,"05/May/10 05:01;davsclaus;And what OS are you using?
And can you report the JDK version number as well?","05/May/10 13:24;scrutinizer;Updated OS and exact JDK version
Claus, I can't attach the XML here, but I can email to you directly (please delete when finished with the file).","05/May/10 13:30;scrutinizer;Sample XML attached with JIRA user only visibility. If possible, remove this file once this issue is closed.",06/May/10 07:00;davsclaus;And you do not use any 3rd party XML parser? eg you use the parser which is included in the JDK core?,"06/May/10 07:19;davsclaus;I cannot reproduce the problem you may have
{code}
public class SplitXPathParallelBigFileIssueTest extends ContextTestSupport {

    public void testSplitXPathParallelBigFileIssue() throws Exception {
        getMockEndpoint(""mock:result"").expectedMessageCount(144);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""file:news/?noop=true"")
                        .split(new XPathBuilder(""//article""))
                            .parallelProcessing()
                            .process(new Processor() {
                                public void process(Exchange exchange) throws Exception {
                                    Document doc = exchange.getIn().getBody(Document.class);
                                    assertNotNull(doc);

                                    String id = doc.getFirstChild().getAttributes().getNamedItem(""id"").getTextContent();
                                    System.out.println(id);
                                    //String txt = exchange.getContext().getTypeConverter().convertTo(String.class, doc.getFirstChild());
                                }
                            }).to(""mock:result"")
                        .end();
            }
        };
    }

}
{code}

I can always read the 144 articles from the xml file.
{code}

2010-05-06 09:17:44,748 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is starting
2010-05-06 09:17:44,749 [main           ] INFO  DefaultCamelContext            - JMX is disabled. Using DefaultManagementStrategy.
2010-05-06 09:17:45,112 [main           ] INFO  FileEndpoint                   - Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
2010-05-06 09:17:45,113 [main           ] INFO  FileEndpoint                   - Using default memory based idempotent repository with cache max size: 1000
2010-05-06 09:17:45,116 [main           ] INFO  DefaultCamelContext            - Route: route1 started and consuming from: Endpoint[file://news/?noop=true]
2010-05-06 09:17:45,117 [main           ] INFO  DefaultCamelContext            - Started 1 routes
2010-05-06 09:17:45,118 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 371 millis
2010-05-06 09:17:45,121 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied
_2744977482
_2744977610
_2744977541
_2744977483
_2744977566
_2744977496
_2744977557
_2744977581
_2744977585
_2744977661
_2744977576
_2744977632
_2744977675
_2744977612
_2744977682
_2744977685
_2744977833
_2744977734
_2744977760
_2744977707
_2744977798
_2744977791
_2744977840
_2744977677
_2744977887
_2744977842
_2744977906
_2744977913
_2744977737
_2744977876
_2744977930
_2744977901
_2744977869
_2744977681
_2744977938
_2744977962
_2744977986
_2744977987
_2744977895
_2744977977
_2744977997
_2744978016
_2744978026
_2744978048
_2744978065
_2744978057
_2744978064
_2744978076
_2744978068
_2744978088
_2744978084
_2744978090
_2744978097
_2744978091
_2744978103
_2744978112
_2744978114
_2744978122
_2744978130
_2744978131
_2744978160
_2744978161
_2744978170
_2744978172
_2744978139
_2744978196
_2744978211
_2744978205
_2744978222
_2744978195
_2744978245
_2744978326
_2744978318
_2744978340
_2744978223
_2744978335
_2744978355
_2744978368
_2744978369
_2744978384
_2744978401
_2744978382
_2744978408
_2744978411
_2744978415
_2744978452
_2744978458
_2744978462
_2744978440
_2744978471
_2744978439
_2744978460
_2744978485
_2744978497
_2744978510
_2744978511
_2744978512
_2744978536
_2744978517
_2744978552
_2744978569
_2744978577
_2744978579
_2744978583
_2744978592
_2744978635
_2744978609
_2744978642
_2744978611
_2744978621
_2744978598
_2744978606
_2744978647
_2744978694
_2744978679
_2744978692
_2744978719
_2744978732
_2744978759
_2744978730
_2744978763
_2744978886
_2744978838
_2744978895
_2744978900
_2744978903
_2744978911
_2744978918
_2744978810
_2744978800
_2744978963
_2744978968
_2744978972
_2744978765
_2744978982
_2744978948
_2744978997
_2744978883
_2744978801
_2744978782
_2744978821
_2744978989
_2744978950
_2744978985
2010-05-06 09:17:47,316 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2010-05-06 09:17:47,317 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2010-05-06 09:17:47,320 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 suspended and shutdown deferred, was consuming from: Endpoint[file://news/?noop=true]
2010-05-06 09:17:47,320 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 shutdown complete.
2010-05-06 09:17:47,321 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 1 routes completed in 0 seconds
2010-05-06 09:17:47,321 [main           ] INFO  DefaultInflightRepository      - Shutting down with no inflight exchanges.
2010-05-06 09:17:47,322 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is shutdown in 6 millis
{code}
","06/May/10 08:42;davsclaus;Roland is it possible for you to create a anonym and public XML file we can use and add as an unit test to camel-core ?

Then we will have it tested throughly on CI servers which tests it on all kind of OS and JDK levels.","06/May/10 08:57;davsclaus;I have tested it on both Mac OS and Windows
{code}
C:\workspace\camel\camel-core>mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.6.0_18
Java home: C:\jdk1.6.0_18\jre
Default locale: en_GB, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1"" arch: ""x86"" Family: ""windows""
{code}

And I cannot reproduce it. I do not have a Windows 7 machine with 64bit JDK.","06/May/10 13:07;scrutinizer;Yes, I am using the stock JDK 6 XML parser.

Turning debugging on reveals the underlying problem. It appears that Camel is calling Document.importNode from multiple threads on the same Document causing an ArrayIndexOutOfBounds error. This occurs in the converter and results in a null value. The stack trace for this error is below:

Thread [Camel Thread 9 - Split] (Suspended (exception ArrayIndexOutOfBoundsException))	
	Vector<E>.elementAt(int) line: 427	
	DeferredDocumentImpl.getNodeValueString(int, boolean) line: 1167	
	DeferredDocumentImpl.getNodeValueString(int) line: 1120	
	DeferredTextImpl.synchronizeData() line: 93 [local variables unavailable]	
	DeferredTextImpl(CharacterDataImpl).getNodeValue() line: 88	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1629	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1742	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1742	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean) line: 1498	
	XmlConverter.toDOMDocument(Node) line: 572	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	ObjectHelper.invokeMethod(Method, Object, Object...) line: 772	
	InstanceMethodTypeConverter.convertTo(Class<T>, Exchange, Object) line: 69	
	DefaultTypeConverter.doConvertTo(Class, Exchange, Object) line: 165	
	DefaultTypeConverter.convertTo(Class<T>, Exchange, Object) line: 91	
	DefaultMessage(MessageSupport).getBody(Class<T>, Object) line: 74	
	DefaultMessage(MessageSupport).getBody(Class<T>) line: 48	
	MoreoverTest$1$1.process(Exchange) line: 25	
	InstrumentationProcessor.process(Exchange) line: 67	
	TraceInterceptor(DelegateProcessor).processNext(Exchange) line: 53	
	TraceInterceptor(DelegateProcessor).proceed(Exchange) line: 82	
	TraceInterceptor.process(Exchange) line: 97	
	InstrumentationProcessor.process(Exchange) line: 67	
	DefaultErrorHandler(RedeliveryErrorHandler).processExchange(Exchange) line: 177	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, RedeliveryErrorHandler$RedeliveryData) line: 143	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange) line: 88	
	DefaultErrorHandler.process(Exchange) line: 49	
	DefaultChannel.process(Exchange) line: 228	
	DefaultErrorHandler(RedeliveryErrorHandler).processExchange(Exchange) line: 177	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, RedeliveryErrorHandler$RedeliveryData) line: 143	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange) line: 88	
	DefaultErrorHandler.process(Exchange) line: 49	
	Splitter(MulticastProcessor).doProcess(Processor, Processor, Exchange) line: 278	
	MulticastProcessor.access$000(MulticastProcessor, Processor, Processor, Exchange) line: 62	
	MulticastProcessor$1.call() line: 199	
	MulticastProcessor$1.call() line: 193	
	FutureTask$Sync.innerRun() line: 303	
	SubmitOrderedCompletionService$SubmitOrderFutureTask(FutureTask<V>).run() line: 138	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 886	
	ThreadPoolExecutor$Worker.run() line: 908	
	Thread.run() line: 619	


Inspection of the JDK getNodeValueString shows that this error can only occur if this function is called in parallel from two threads:
                for (int i = chunkCount - 1; i >= 0; i--) {                                                               
                    fBufferStr.append((String)fStrChunks.elementAt(i));
                }
                
                value = fBufferStr.toString();
                fStrChunks.removeAllElements();

One thread is looping over fStrChunks, while the other thread clear it via removeAllElements.
","11/May/10 06:03;davsclaus;Thanks Roland. Yeah unfortunately the XML API in the JDK is pretty well terrible.

Let me look into what we can do in Camel",11/May/10 06:32;davsclaus;Got a fix ready which is being tested now,11/May/10 07:14;davsclaus;trunk: 943024.,11/May/10 08:07;davsclaus;1.x: 943033.,11/May/10 08:07;davsclaus;Roland feel free to test with latest code on your system,"11/May/10 22:42;scrutinizer;Claus, the synchronize you added didn't fix the problem. Seems that importNode requires the Document to be synchronized (yuck). Changing your fix in XmlConverter.toDOMDocument to:
                Document doc = createDocument();
                // import node must no occur concurrent on the same node
                // so we need to synchronize on it
                synchronized (node.getOwnerDocument()) {
                    doc.appendChild(doc.importNode(node, true));
                }
fixed the problem.

I agree about the JDK XML API. It is horrible. I wrote a converter for DOM4J and always convert the body to a DOM4J Document before any DOM manipulation.
","12/May/10 07:02;davsclaus;Hi Roland

Thanks for spotting this again.

trunk: 943394.
1.x: 943395.",17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,
exec component fails after receiving empty output,CAMEL-2687,12487331,12487337,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chuck,chuck,30/Apr/10 15:54,24/Apr/11 10:00,14/Mar/19 02:43,06/May/10 15:29,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"I have a simple route here:

{quote}
public void configure() {
    from(""timer://foo?period=5000"")
    .to(""C:/apps/putty/PLINK.EXE?args=cadams@labmachine  -i C:/apps/putty/priv/chuck.ppk \""ls /tmp/foo\"""")
    .to(""log:experiments.cameltest"");
}
{quote}

This just runs a dummy command on a remote machine every five seconds.  Normally it has no problems as long as /tmp/foo has contents.  For example, I create 'bar' and 'baz' files, and the log reflects this:

{quote}
[                          main] DefaultCamelContext            INFO  Apache Camel 2.3-SNAPSHOT (CamelContext: camelContext) started in 734 millis
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:bar
baz
blah
]
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@spamlab-bizintel-corpus01.eng.symantec.com, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@spamlab-bizintel-corpus01.eng.symantec.com, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:bar
baz
blah
]
{quote}



And so on....  But if I delete both files, this is what happens:


{quote}
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] ExecResultConverter            WARN  Received null stdout of the ExecResult for conversion!
[                           foo] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.exec.ExecResultConverter.convertToString(org.apache.camel.component.exec.ExecResult,org.apache.camel.Exchange) throws java.io.FileNotFoundException to: org.apache.camel.impl.converter.ToStringTypeConverter@1e3d24a
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:org.apache.camel.component.exec.ExecResult@d767dc]
{quote}


And from that point on, even if I add files to the directory again, I get nothing back, just the following log section over and over.  It seems that the behavior of suddenly switching the converter to ToStringTypeConverter had the effect of suppressing all output for good.  

{quote}
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:org.apache.camel.component.exec.ExecResult@3aacb4]
{quote}

This behavior is certainly unexpected and undesireable.  I've been working around this by making my remote script always produce some dummy output when they otherwise have nothing to return, but any workaround I could use on the Camel side pending a more permanent fix would be very much appreciated.
","windows XP, jdk 1.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-01 07:42:24.831,,,no_permission,,,,,,,,,,,,,,76462,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,0|i01q3z:,7999,,,,,,,,,"30/Apr/10 15:56;chuck;I see JIRA ate my source code.   Here's the relevant body of the .configure() method

{quote}
		from(""timer://foo?period=5000"")
		.to(""exec:C:/apps/putty/PLINK.EXE?args=cadams@labmachine -i C:/apps/putty/priv/chuck.ppk ""\""ls /tmp/foo\"""")
		.to(""log:bizint.cameltest"");
{quote}


","30/Apr/10 16:04;chuck;It's always the way with me that I only see my own error after reporting it as a bug... I can see now that the converter returned an ExecResult as the body instead of converting it to a string, and that I should therefore be expecting an ExecResult instead of a string.  

Still, the fact that it actually changes the converter for further messages doesn't strike me as entirely right: I would simply have expected empty output to yield an empty string instead of a null that magically changes the behavior of the component going forward.

","01/May/10 07:42;davsclaus;Yeah the problem is that type camel-exec type converter returns a null which eventually a ToString fallback type converter can convert as value.

I am improving camel-core to let only certain fallback type converters be able to kick in and be promoted.
This should fix your issue.",01/May/10 08:44;davsclaus;Chuck can you test it again on your system. I have commited a fix to trunk.,"05/May/10 17:16;chuck;That appears to have done the trick -- thanks for the quick turnaround.  I'm finding the exec component to be one of the handiest pieces of camel.  I'm able to replace shell scripts with Camel routes and add honest-to-goodness logging and testing to them now, making Camel useful for programming in the small, not just ""enterprisey"" integrations.  
","06/May/10 15:29;davsclaus;Thanks Chuck for reporting and testing.

Yeah the goal of Camel is being very flexible and useable in any kind of business. 
And the lovely is that the community is kicking ass and adding components to Camel.",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,
Removing entries from FileIdempotentRepository don't get persisted,CAMEL-2678,12487360,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fdehghani,fdehghani,27/Apr/10 09:36,24/Apr/11 10:01,14/Mar/19 02:43,28/Apr/10 09:08,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"Removing an entry (file name) programatically from a file idempotent repository has only effect on the cache and does not get persisted on the file repository. 
There are some situations in which one may need to rerun a file through a workflow and it makes neccessary to remove the file from the idempotent repository. A specific problem arises when upon a server restart, the file is not picked up by the workflow because the remove was not persisted/spooled on the disk.",JDK 1.5 & 1.6 / JBoss 4.2 / Camel 2.1.0 & 2.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-04-28 09:08:37.627,,,no_permission,,,,,,,,,,,,,,76464,,,Sun Apr 24 10:01:00 UTC 2011,,,,,,,0|i01q1z:,7990,,,,,,,,,28/Apr/10 09:08;davsclaus;trunk: 938828.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-guicy-jms GuiceTest failed,CAMEL-2675,12487371,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Apr/10 09:34,24/Apr/11 10:01,14/Mar/19 02:43,26/Apr/10 09:45,,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,"Here is the stack trace 
{code}
[//target/routeOutput?noop=true] GenericFileOnCompletion        ERROR Caused by: [org.apache.camel.CamelExecutionException - Exception occurred during execution on the exchange: Exchange[GenericFileMessage with file: GenericFile[message2.xml]]]
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[GenericFileMessage with file: GenericFile[message2.xml]]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1107)
	at org.apache.camel.builder.ExpressionBuilder$25.evaluate(ExpressionBuilder.java:625)
	at org.apache.camel.impl.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:264)
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:131)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:167)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:127)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:269)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:137)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:103)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:146)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:170)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
	at java.lang.Thread.run(Thread.java:613)
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: GenericFile[message2.xml] of type: org.apache.camel.component.file.GenericFile on: GenericFileMessage with file: GenericFile[message2.xml]. Caused by: No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]. Exchange[GenericFileMessage with file: GenericFile[message2.xml]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:103)
	at org.apache.camel.builder.ExpressionBuilder$25.evaluate(ExpressionBuilder.java:623)
	... 31 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:124)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:101)
	... 32 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:17.561,,,no_permission,,,,,,,,,,,,,,76465,,,Sun Apr 24 10:01:17 UTC 2011,,,,,,,0|i01q1b:,7987,,,,,,,,,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Policy should handle lifecycle of wrapped processor, otherwise it will not be automatic started on startup",CAMEL-2665,12487311,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,22/Apr/10 06:50,24/Apr/11 10:00,14/Mar/19 02:43,22/Apr/10 14:30,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"If you use policy to wrap a Processor, then the wrapped Processor is not automatic started/stopped as lifecycle cannot see this wrapped processor.

And to prevent end users from remembering to do this themselves we should let a WrapProcessor handle this for us.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76466,,,Sun Apr 24 10:00:52 UTC 2011,,,,,,,0|i01pz3:,7977,,,,,,,,,22/Apr/10 14:30;davsclaus;trunk: 936869.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPackageScanClassResolver can't read entries in an eclipse rcp app because it can't handle bundleresource - protocol,CAMEL-2663,12487328,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cdittberner,cdittberner,21/Apr/10 10:21,24/Apr/11 10:01,14/Mar/19 02:43,07/May/10 07:18,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"scenario:

I have an eclipse rcp based app and use the apache camel libs within my plugin, i.e. the libs are one classpath of the plugin. I use a route using camel-mail to process some mailqueues.

CamelContext context = new DefaultCamelContext();
context.addRoutes(new RouteBuilder() {
    public void configure()	{
        from(""imaps://mailserver?username=user&password=password&consumer.delay=5000&delete=false&unseen=true"")
            .to(""log: new mail"");
   }});
   context.start();

When I start my app all seems to be ok. But in my log I get a lot of error messages regarding the loading of converters. If I ask my context to find a converter f.i. to converty to byte[] form inputstream (as I did see in another mail example reagding attachments) I get null because the context can't find one.

I debugged  deeper into the camel code and it seems that the DefaultPackageScanClassResolver can't load from urls starting with bundleresource like ""bundleresource://109.fwk32380043:4/org/apache/camel/component/file/""

using camel-osgi didn't worked because all camel libs are loaded as inner libs of my single plugin and not as plugins. (loading as plugins didn't worked but thats another problem/bug)

 
LOG Messages:

2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.converter.DefaultTypeConverter loadTypeConverters - Loading type converters ...
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver findAnnotated - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter, org.apache.camel.component.mail, org.apache.camel.component.spring.integration.converter]
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getClassLoaders - The thread context class loader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff  is used to load the class
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Searching for: annotated with @Converter in package: org/apache/camel/component/file using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder
2010-04-21 11:15:39,954 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getResources - Getting resource URL for package: org/apache/camel/component/file with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff
2010-04-21 11:16:44,970 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - URL from classloader: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/
2010-04-21 11:17:01,642 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Decoded urlPath: /org/apache/camel/component/file/ with protocol: bundleresource
2010-04-21 11:23:59,814 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - isLocalFileSystem: false
2010-04-21 11:24:00,470 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Scanning for classes in [/org/apache/camel/component/file/] matching criteria: annotated with @Converter
2010-04-21 11:24:16,079 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Loading from jar using http/https: /org/apache/camel/component/file/
2010-04-21 11:24:26,626 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Cannot read entries in url: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/
java.net.MalformedURLException: no protocol: /org/apache/camel/component/file/
	at java.net.URL.<init>(URL.java:567)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:264)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:63)
	at org.apache.camel.impl.converter.DefaultTypeConverter.loadTypeConverters(DefaultTypeConverter.java:361)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:384)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:53)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1174)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:644)
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:691)
	at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:68)
","Windows, Eclipse 3.5.2",,,,,,,,,,,,,,,,,22/Apr/10 08:53;cdittberner;EclipsePackageScanClassResolver.java;https://issues.apache.org/jira/secure/attachment/12463237/EclipsePackageScanClassResolver.java,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-04-22 08:52:43.852,,,no_permission,,,,,,,,,,,,,,76467,,,Sun Apr 24 10:01:04 UTC 2011,,,,,,,0|i01pyn:,7975,,,,,,,,,"22/Apr/10 08:49;cdittberner;Finally I got it working :)

URLs starting with protocol ""bundleresource"" have to be converted into a real url using org.eclipse.core.runtime.FileLocator.resolve(url). 

So I made my own EclispePackageScanClassResolver adding the converter-call in find(PackageScanFilter test, String packageName, ClassLoader loader, Set<Class<?>> classes).

see attached file","22/Apr/10 08:52;davsclaus;Hi Christoph

That is great

See about pluggable class resolvers here
http://camel.apache.org/pluggable-class-resolvers.html

What we may can do is to add a new camel-eclipsercp component which provides this class resolver.
What .jar / jars do you need to use?

And I assume those jars has an open source license, such as Apache or Eclipse based?
If so we can have it included out of the box at Apache. If not (as in JBoss case) is has to be hosted elsewhere such as camel-extra
http://code.google.com/p/camel-extra/

Or at github etc.","22/Apr/10 08:53;cdittberner;Attach this on the DefaultcamelContext like

DefaultCamelContext camelContext = new DefaultCamelContext();
camelContext.setPackageScanClassResolver(new EclipsePackageScanClassResolver());

and apache-camel can be used within an eclipse-plugin.","22/Apr/10 09:03;davsclaus;Its based on EPL license, which is in B category
http://www.apache.org/legal/3party.html

However the source code where its being used will be minimal and with really very very low change some end user will derive this work without knowing the license implications by Eclipse.

And the jar is 
http://repo1.maven.org/maven2/org/eclipse/equinox/common/3.3.0-v20070426/common-3.3.0-v20070426.pom

Which is in central maven repo, so it may be doable.","22/Apr/10 09:04;cdittberner;A camel-eclipse package sounds very well.

My plugin depends on 
 org.eclipse.osgi,
 org.eclipse.equinox.app,

To use the FileLocator.convert-method I had to depend on  org.eclipse.equinox.common,

These are the libs I included in my plugin:
camel-core-2.2.0.jar
camel-spring-2.2.0.jar
camel-spring-integration-2.2.0.jar
commons-management-1.0.jar
camel-mail-2.2.0.jar
mail.jar
spring.jar

spring.jar is the complete spring-framework-2.5.6 package.

","22/Apr/10 09:08;davsclaus;We should just use the common jar. And have it defined as *provided* in the pom.xml.

As its expected the runtime have all the needed jars already. So all you add to is this camel-eclipse jar","22/Apr/10 09:11;davsclaus;And I think we may need to just add a little strategy method on the DefaultPackageScanClassResolver so you can reuse as much code from it.
As all you do is that if its that bundlelocator type then you use the FileLocator. All the rest looks like its 100% the same.

Otherwise we end up having to have them in sync, and that will never work. ","22/Apr/10 09:33;njiang;+1 as Claus said. 
We already have lots of PackageScanClassResolvers, it's time to clean up the duplicate codes :)
",07/May/10 07:18;njiang;Created a camel-eclipse component for this resolver.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,
ftp - exception thrown from begin should remove the file from in progress so the file can be polled on subsequent calls,CAMEL-2662,12487357,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Apr/10 05:11,24/Apr/11 10:01,14/Mar/19 02:43,21/Apr/10 06:09,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-ftp,,,,0,,,,,,"The SFTP component can throw an exception in its begin logic, which causes Camel to not remove the file from its internal in progress cache.

See nabble
http://old.nabble.com/SFTP-rename-problems-ts28254146.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-04-27 10:32:42.301,,,no_permission,,,,,,,,,,,,,,76468,,,Sun Apr 24 10:01:35 UTC 2011,,,,,,,0|i01pyf:,7974,,,,,,,,,21/Apr/10 06:09;davsclaus;trunk: 936165,"27/Apr/10 10:32;watcher;Problem fixed after upgrading to camel-2.3-SHAPSHOT

Thanks",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Route with only an endpoint defined causes app failure with only a vague stack trace,CAMEL-2653,12487950,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cott@internetstaff.com,cott@internetstaff.com,16/Apr/10 16:44,24/Apr/11 10:00,14/Mar/19 02:43,17/Apr/10 08:20,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"I recently upgraded an application from Camel 2.0 to Camel 2.2 and was greeted with this stack trace:

{code}
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:939)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:197)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 12 more
Caused by: java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:923)
	... 14 more
{code}

I attached a debugger and walked through DefaultCamelContext to locate the (admittedly useless) route that caused the problem, commented it out, and was on my way. However, it seems like this could be trapped and reported better to the user and save the next poor guy some time. 

I also noticed that there's no useful TRACE or DEBUG output in here that would have allowed anyone to easily debug it.

{code:title=Example}
<route>
    <from uri=""activemq:queue:somequeue"" />
</route>
{code}

I believe this issue is related to CAMEL-2635.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-04-17 08:20:29.242,,,no_permission,,,,,,,,,,,,,,76469,,,Sun Apr 24 10:00:43 UTC 2011,,,,,,,0|i01pwf:,7965,,,,,,,,,"17/Apr/10 08:20;davsclaus;Its fixed in 2.3 where you get a better error message on startup about this

{code}
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> From[direct://start] <<< in route: Route[[From[direct://start]] -> []] because of Route route1 has no output processors. You need to add outputs to the route such as to(""log:foo"").
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:725)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:140)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:638)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1296)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1198)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1128)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1003)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:134)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:90)
	at org.apache.camel.impl.RouteNoOutputTest.setUp(RouteNoOutputTest.java:31)
	at com.intellij.junit3.JUnit3IdeaTestRunner.doRun(JUnit3IdeaTestRunner.java:108)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:60)
Caused by: java.lang.IllegalArgumentException: Route route1 has no output processors. You need to add outputs to the route such as to(""log:foo"").
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:723)
	... 23 more
{code}","17/Apr/10 12:23;cott@internetstaff.com;Thanks, Claus.
",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
FactoryBeans for ProducerTemplate and ConsumerTemplate should be singleton to avoid,CAMEL-2649,12487405,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Apr/10 10:58,24/Apr/11 10:00,14/Mar/19 02:43,15/Apr/10 11:47,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-spring,,,,0,,,,,,"You want the {{ProducerTemplate}} with the assigned id to be a singleton scoped instance, so its shared.

Currently it creates a new instance which it should not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76470,,,Sun Apr 24 10:00:53 UTC 2011,,,,,,,0|i01pvj:,7961,,,,,,,,,15/Apr/10 11:18;davsclaus;Also only singleton beans should be added to the CamelContext servicesToClose when using @Produce / @Consume,"15/Apr/10 11:47;davsclaus;trunk: 934375, 934376.

This was not a problem in 1.x",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistency between IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty(),CAMEL-2642,12486758,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,muellerc,muellerc,14/Apr/10 09:26,24/Apr/11 10:01,14/Mar/19 02:43,07/Jun/10 11:39,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,"IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty() work in an inconsistency way:

{code}
ExampleBean bean = new ExampleBean();
Date date = new Date(0);
bean.setDate(date);

assertSame(date, IntrospectionSupport.getProperty(bean, ""date"")); // succeed

Map<String, Object> map = new HashMap<String, Object>();
IntrospectionSupport.getProperties(bean, map, null);
assertSame(date, map.get(""date"")); // fails
{code}",All,,,,,,,,,,,,,,,,,14/Apr/10 09:30;muellerc;ASF.LICENSE.NOT.GRANTED--camel-core-unit-test.patch;https://issues.apache.org/jira/secure/attachment/12463225/ASF.LICENSE.NOT.GRANTED--camel-core-unit-test.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-04-15 07:14:23.355,,,no_permission,,,,,,,,,,,,,,76471,,,Sun Apr 24 10:01:21 UTC 2011,,,,,,,0|i01ptz:,7954,,,,,,,,,14/Apr/10 09:30;muellerc;I attached the unit tests which shows the issue.,"15/Apr/10 07:14;davsclaus;Thats the initial code of IntrospectionSupport which requires the properties type to be convertable to String.
The code is > 3 years old.
","07/Jun/10 09:56;davsclaus;trunk: 952173.

Work in progress",07/Jun/10 11:39;davsclaus;trunk: 952190.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
file component - Fix recursive and noop not picking up files with similar name in sibling folders,CAMEL-2640,12487373,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/10 15:15,24/Apr/11 10:01,14/Mar/19 02:43,14/Apr/10 08:22,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"See nabble
http://old.nabble.com/File-consumer-with-noop%3Dtrue-recursive%3Dtrue-ts28229501.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76472,,,Sun Apr 24 10:01:42 UTC 2011,,,,,,,0|i01ptj:,7952,,,,,,,,,14/Apr/10 08:22;davsclaus;trunk: 933877.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some examples does not run with ANT,CAMEL-2639,12487348,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/10 06:21,24/Apr/11 10:01,14/Mar/19 02:43,29/Apr/10 11:55,2.2.0,,,,,,,,,,,,2.3.0,,,,examples,,,,0,,,,,,"See nabble
http://old.nabble.com/camel-example-etl-and-ant-won%27t-run-ts28213644.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76473,,,Sun Apr 24 10:01:06 UTC 2011,,,,,,,0|i01ptb:,7951,,,,,,,,,"26/Apr/10 14:02;davsclaus;I fixed some of the examples for Camel 2.3

trunk: 938051.",29/Apr/10 11:55;davsclaus;Most of them should run again.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet component is URL encoding the POST message body.  It should encode it based on content-type request header.,CAMEL-2638,12487386,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,richbolen,richbolen,12/Apr/10 19:26,24/Apr/11 10:01,14/Mar/19 02:43,21/Apr/10 01:53,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-restlet,,,,0,,,,,,"I attempted to POST a JSON document to couchdb via restlet.  The post fails with and ""Invalid JSON format"" error from couchdb.  This is because the POST data was being URL encoded which substitutes %XX sequences for all the curly braces.  I believe the encoding should be done based on the content-type header, or possibly not at all for POST requests.  ",Windows XP,,,216000,216000,,0%,216000,216000,,,,,,,,,20/Apr/10 19:25;richbolen;camel-restlet-CAMEL-2638.patch;https://issues.apache.org/jira/secure/attachment/12463234/camel-restlet-CAMEL-2638.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-04-21 01:53:06.4,,,no_permission,,,,,,,,,,,,,,76474,,,Sun Apr 24 10:01:41 UTC 2011,,,,,,,0|i01pt3:,7950,,,,,,,,,"21/Apr/10 01:53;wtam@iona.com;Patch applied with thanks to Rich Bolen.
Committed revision 936136.
",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ErrorHandler - errorHandlerRef should use mandatory lookup to fail if id is not found in Registry,CAMEL-2637,12486167,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/10 17:25,24/Apr/11 10:01,14/Mar/19 02:43,13/Apr/10 11:11,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-spring,,,,0,,,,,,To fail if end user have mistyped an id,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76475,,,Sun Apr 24 10:01:13 UTC 2011,,,,,,,0|i01psv:,7949,,,,,,,,,"13/Apr/10 06:30;davsclaus;trunk: 933490.

Also the new <errorHandler> has a flaw here as well I need to dig in before this ticket can be closed",13/Apr/10 11:11;davsclaus;trunk: 933551.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
IOException: Bad file descriptor and FileNotFoundException,CAMEL-2636,12487289,12486755,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rdomingo,rdomingo,12/Apr/10 15:17,24/Apr/11 10:01,14/Mar/19 02:43,21/May/10 06:30,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"When I try to stream BINARY (pdf) file using camel-http I get the java.io.IOException: Bad file descriptor
The pdf isn't recieved succesfully by reciever (0kb)

This seems to be caused by a bug in java (on linux systems), closing inputstream twice causes problems. It seemed to me this is exactly what is happening, see also link:
http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtml

I fixed this by (checking out apache camel-core and camel-http 2.2.0):
In FileInputStreamCache.java:
In method close() wrapped getInputStream().close() in if:
if (stream != null && stream instanceof FileInputStream && ((FileInputStream) stream).getChannel().isOpen()) {
getInputStream().close() ;
}

In method reset() also:
if (stream != null && stream instanceof FileInputStream && ((FileInputStream) stream).getChannel().isOpen()) {
getInputStream().close() ;
}


Second I needed to fix a filenotfoundexception, the tempfile created by camel was deleted to early.
I changed CachedOutputStream.java
- Reimplemented constructor:
public CachedOutputStream(Exchange exchange) {
        String hold = exchange.getContext().getProperties().get(THRESHOLD);
        String dir = exchange.getContext().getProperties().get(TEMP_DIR);
        if (hold != null) {
            this.threshold = exchange.getContext().getTypeConverter().convertTo(Long.class, hold);
        }
        if (dir != null) {
            this.outputDir = exchange.getContext().getTypeConverter().convertTo(File.class, dir);
        }

        // add on completion so we can cleanup after the exchange is done such
        // as deleting temporary files
        exchange.addOnCompletion(new SynchronizationAdapter() {
            @Override
            public void onDone(Exchange exchange) {
                try {
                    // close the stream and FileInputStreamCache
                    // close();
                    // for (FileInputStreamCache cache : fileInputStreamCaches)
                    // {
                    // cache.close();
                    // }
                    // cleanup temporary file
                    if (tempFile != null) {
                        System.err.println(""####################################################"");
                        System.err.println(""DISABLED tempFile.delete:89"");
                        System.err.println(""####################################################"");
                        // boolean deleted = tempFile.delete();
                        // if (!deleted) {
                        // LOG.warn(""Cannot delete temporary cache file: "" +
                        // tempFile);
                        // } else if (LOG.isTraceEnabled()) {
                        // LOG.trace(""Deleted temporary cache file: "" +
                        // tempFile);
                        // }
                        tempFile = null;
                    }
                } catch (Exception e) {
                    LOG.warn(""Error deleting temporary cache file: "" + tempFile, e);
                }
            }

            @Override
            public String toString() {
                return ""OnCompletion[CachedOutputStream]"";
            }
        });
    }

Reimplemented close():
public void close() throws IOException {
        System.err.println(""####################################################"");
        System.err.println(""outputStream.close:119 -> delete tempFile"");
        System.err.println(""####################################################"");
        new Exception().printStackTrace();
        currentStream.close();
        boolean deleted = tempFile.delete();
        if (!deleted) {
            LOG.warn(""Cannot delete temporary cache file: "" + tempFile);
        } else if (LOG.isTraceEnabled()) {
            LOG.trace(""Deleted temporary cache file: "" + tempFile);
        }
    }
","Related to topic, I will post possible solution to this problem:
http://old.nabble.com/bridging-binary-files-over-http-ts28178639.html

Other useful links:
http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtml

My environment:

apache 2.2.0

java version ""1.6.0_19""
Java(TM) SE Runtime Environment (build 1.6.0_19-b04)
Java HotSpot(TM) 64-Bit Server VM (build 16.2-b04, mixed mode)

no container, using:
mvn camel:run

java.io.IOException: Bad file descriptor
        at java.io.FileInputStream.available(Native Method)
        at org.apache.camel.converter.stream.FileInputStreamCache.available(FileInputStreamCache.java:70)
        at org.apache.camel.util.IOHelper.copy(IOHelper.java:85)
        at org.apache.camel.util.IOHelper.copy(IOHelper.java:81)
        at org.apache.camel.component.http.DefaultHttpBinding.doWriteDirectResponse(DefaultHttpBinding.java:183)
        at org.apache.camel.component.http.DefaultHttpBinding.doWriteResponse(DefaultHttpBinding.java:169)
        at org.apache.camel.component.http.DefaultHttpBinding.writeResponse(DefaultHttpBinding.java:116)
        at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:61)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:326)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) 

Config:
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans:beans xmlns:beans=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns=""http://camel.apache.org/schema/spring"" xmlns:cxf=""http://camel.apache.org/schema/cxf""
    xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
    <camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" autoStartup=""true"">
        <!-- clipboard download producer -->
        <route>
            <from uri=""jetty:http://0.0.0.0:8201/clipboard/download?chunked=true&amp;matchOnUriPrefix=true"" />
            <to uri=""http://0.0.0.0:9101?bridgeEndpoint=true"" async=""false"" />
        </route>
    </camelContext>
</beans:beans>


",,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-04-13 07:32:29.26,,,no_permission,,,,,,,,,,,,,,76476,,,Sun Apr 24 10:01:14 UTC 2011,,,,,,,0|i01psn:,7948,,,,,,,,,"13/Apr/10 07:32;davsclaus;Note in the future we should switch to use HawtDB for temporary file based cache as its much faster and better than java.io.File based.
","16/Apr/10 06:57;njiang;Hi Raymond 

I reviewed the change, and found your don't delete the file unless the CachedOutputStream is closed. 
If the CachedOutputStream is not closed after the exchange is processed, there could be lots of temp file. 
Can I see the route that you get the filenotfoundexception?","16/Apr/10 08:38;njiang;Hi Raymond, 

Now I can reproduce Bad file descriptor error with the route that you showed, and found the Exchange.done() is not helping us to clean up the temp file.
As CameServlet still need to access the InputStream from exchange after the process(exchange) is called.
I did some change and make sure the FileInputStream.close will help us to clean up the temp file and will commit the change after running the tests (it will take nearly 3 hours on my box).


","16/Apr/10 12:48;njiang;I committed the patch on base of Raymond's patch, and also added a unit test for it.
Now camel will delete the temp file when the CachedOutputStream is closed or the FileInputStream is closed.

@Raymond
Please check out the latest camel code or the snapshot release to verification it","19/Apr/10 14:55;raymond@domingo.nl;
   [[ Old comment, sent by email on Fri, 16 Apr 2010 15:03:20 +0200 ]]

I will check it first thing next week.

Did you also prevent the input stream from being closed twice ??
To prevent the bad file discriptor java bug ?




","19/Apr/10 14:55;raymond@domingo.nl;
   [[ Old comment, sent by email on Fri, 16 Apr 2010 11:43:10 +0200 ]]

Nice work !!!!

ps: It's my day off today. Next week I will look in to the details !





","20/Apr/10 07:51;raymond@domingo.nl;I couldn't verify it using 2.3.0 BETA... when using this version my camel 'bus connector' didn't seem to work anymore....
Should it already be stable ?? (I don't really have time to look in to details right now)

I copied your new files to 2.2.0 (I checked out from svn) and rebuilded camel-core, files:
- CachedOutputStream.java
- FileInputStreamCache.java

And all is working correct now !","20/Apr/10 12:11;njiang;Hi Raymond,

Thanks for your verification.
We are heading to Camel 2.3.0 release at end of this month, can you do some investigation on the ""bus connector"" issue when you have time?
Please feel free to log a JIRA for it.
","20/May/10 04:34;scrutinizer;Removing the output temp file causes subsequent calls to FileInputStreamCache.reset() to fail since the file no longer exists. This will happen with a simple route such as:
        from(...).process(...).to(..)
This route will fail if the ""process"" step simply converts the body to string (exchange.getIn().getBody(String.class)). The ""to"" step then fails with a file not found error in FileInputStreamCache.reset.

Can deletion of the temp file be easily deferred to the end of the route?

","20/May/10 05:29;njiang;Hi Roland,
We fix this issue of camel jetty and http component by not letting camel remove the temp file at the end of the route,
If you call the ""exchange.getIn().getBody(String.class)"" in your processor, the cached input stream will be closed, and temp file will be removed.
As you consumed the inputStream, you'd better reset the body with the String that your get.
",21/May/10 06:17;davsclaus;Willem did you fix this for the 2.3 release which is in vote now?,"21/May/10 06:29;njiang;yes, this issue has been fixed month ago.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,
Combining .delay() and .backOffMultiplier() in an errorhandler gives error that is ,CAMEL-2635,12487393,12487396,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tarjei@scanmine.com,tarjei@scanmine.com,12/Apr/10 09:11,24/Apr/11 10:00,14/Mar/19 02:43,17/Apr/10 16:21,,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,"
When doing the following in a route:

	.onException(HaltOperationsError.class)
	
			.maximumRedeliveries(10)
			.backOffMultiplier(10) // 1 s base	
			
			.handled(true)
			.delay(10)			
			.log(""Halting operations for some time"")
			//.process(new RouteStoppingProccesor(""PostProcessorRoute""))
			.end()

I get the following stacktrace:
ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1075)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:652)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)
	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136)
	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
	at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
	at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
	at org.mortbay.jetty.Server.doStart(Server.java:224)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
	at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
	at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1044)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 49 more
Caused by: java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1028)
	... 51 more


I think this is a minor error, but it would be nice to know if something could be done with it so that the errormessage is easier to understand.",version 2.3-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-04-13 07:34:01.718,,,no_permission,,,,,,,,,,,,,,76477,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,0|i01psf:,7947,,,,,,,,,"13/Apr/10 07:34;davsclaus;You should use {{redeliveryDelay}} instead of {{delay}}

But yeah we should maybe add some check in camel-core so end users avoid picking the wrong delay :)","13/Apr/10 08:09;tarjei@scanmine.com;Note also that for some reason Eclipse reports that redeliveryDelay is depreciated when I use Camel 2.3-SNAPSHOT. 

I'm reducing the priority, this is not a major issue :)

","17/Apr/10 08:15;davsclaus;There was a spelling mistake so there is
- {{redeliverDelay}} = @deprecated
- {{redeliveryDelay}} = added in 2.3 which is the fixed spelling","17/Apr/10 08:28;davsclaus;Well you actually have to end the delay as well.

Notice how I use 2 end to end both delay and onException

{code}
                from(""direct:start"")
                    .onException(Exception.class)
                        .maximumRedeliveries(2)
                        .backOffMultiplier(1.5)
                        .handled(true)
                        .delay(1000)
                            .log(""Halting for some time"")
                            .to(""mock:halt"")
                        .end()
                    .end()
                    .to(""mock:result"");
{code}","17/Apr/10 16:21;davsclaus;trunk: 935198.

Added better startup route error validation",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - Endpoint options should not change the http component configured options,CAMEL-2633,12487350,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/10 07:11,24/Apr/11 10:00,14/Mar/19 02:43,12/Apr/10 13:44,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-http,,,,0,,,,,,"If a http endpoint is using {{httpBindingRef}} option to use a special binding, then it would change the binding on the http component, which means than any new http endpoints created thereafter will use what binding that aforementioned endpoint was using.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76478,,,Sun Apr 24 10:00:40 UTC 2011,,,,,,,0|i01prz:,7945,,,,,,,,,12/Apr/10 13:44;davsclaus;trunk: 933235.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator - Completion by batch consumer should trigger completion for the batch group if multiple correlation keys was used,CAMEL-2629,12487347,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Apr/10 07:09,24/Apr/11 10:00,14/Mar/19 02:43,11/Apr/10 07:10,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"Yeah its really an odd use case if you use multiple correlation keys for the same batch consumer, but its still possible to do.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76479,,,Sun Apr 24 10:00:43 UTC 2011,,,,,,,0|i01pr3:,7941,,,,,,,,,11/Apr/10 07:10;davsclaus;trunk: 932842,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invocation of hasNext() on org.apache.camel.util.ObjectHelper.createIterator(...).new Iterator<Node>() {...} return different results,CAMEL-2622,12487130,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,anydoby,anydoby,07/Apr/10 09:45,24/Apr/11 10:01,14/Mar/19 02:43,07/Apr/10 10:40,2.2.0,2.3.0,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"{code}
                    public boolean hasNext() {
                        // empty string should not be regarded as having next
                        return ++idx == 0 && ObjectHelper.isNotEmpty(s);
                    }

                    public String next() {
                        return s;
                    }
{code}

This is incorrect. Should be:

{code}
                    public boolean hasNext() {
                        // empty string should not be regarded as having next
                        return idx+1 == 0 && ObjectHelper.isNotEmpty(s);
                    }

                    public String next() {
						idx++;
                        return s;
                    }
{code}
",,,,,,,,,,,,,,,,,,07/Apr/10 09:45;anydoby;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12463200/patchfile.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-04-07 10:40:57.872,,,no_permission,,,,,,,,,,,,,,76480,,,Sun Apr 24 10:01:16 UTC 2011,,,Patch Available,,,,0|i01ppj:,7934,,,,,,,,,07/Apr/10 09:45;anydoby;patch,"07/Apr/10 10:40;davsclaus;trunk: 931494.

Thanks for the patch.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - Polling from network share on Windows may regard files as not a file,CAMEL-2621,12487050,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Apr/10 08:45,24/Apr/11 10:01,14/Mar/19 02:43,07/Apr/10 08:47,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"{code}
file.isFile()
{code}

May return {{false}} on Windows if consuming from a network share etc. So we should just regard anything that is *not* a directory as a file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76481,,,Sun Apr 24 10:01:43 UTC 2011,,,,,,,0|i01ppb:,7933,,,,,,,,,07/Apr/10 08:47;davsclaus;trunk: 931466,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Karaf features.xml camel-juel can't work well within ServiceMix ,CAMEL-2615,12487182,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/Apr/10 04:00,24/Apr/11 10:01,14/Mar/19 02:43,06/Apr/10 04:43,2.2.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,"As servicemix install the Pax-web jsp support, which exports the javax.el package with the version 2.1.0, and camel-juel imports the javax.el with version [1.0,2), so the camel-juel feature can't be installed in ServiceMix 4.2.0.
Because javax.el is introduced with the jsp 2.1, so we need to update the camel-juel jaxax.el imports version at the same time.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:20.698,,,no_permission,,,,,,,,,,,,,,76482,,,Sun Apr 24 10:01:20 UTC 2011,,,,,,,0|i01pnz:,7927,,,,,,,,,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cxf can't handle multi part message in PAYLOAD mode,CAMEL-2614,12487332,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,05/Apr/10 21:16,24/Apr/11 10:01,14/Mar/19 02:43,06/May/10 18:12,,,,,,,,,,,,,2.3.0,,,,camel-cxf,,,,0,,,,,,"If I have a multi part (bare) message defined in WSDL (such as follow), camel-cxf component cannot parse the incoming message in PAYLOAD mode.

{code}
	<wsdl:message name=""MultiPartStringIntRequest"">
		<wsdl:part name=""StringDefaultInput"" element=""MultiPartStringInt:StringDefaultInputElem"" />
		<wsdl:part name=""IntParamIn"" element=""MultiPartStringInt:IntParamInElem"" />
	</wsdl:message>
{code}

I get a stack trace similar to this.

Mar 12, 2010 7:15:48 PM org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor createDOMMessage
INFO: AbstractMessageInInterceptor Converting Stax Stream to DOM
Mar 12, 2010 7:15:48 PM org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor handleMessage
INFO: AbstractRoutingMessageInInterceptor Infer BindingOperationInfo.
Mar 12, 2010 7:15:48 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not read request. Operation {urn:MultiPart/resources/wsdl/MultiPartStringInt/MultiPartStringInt/types}StringDefaultInputElem is unknown.
                at org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor.handleMessage(AbstractMessageInInterceptor.java:103)
                at org.apache.camel.component.cxf.interceptors.DOMInInterceptor.handleMessage(DOMInInterceptor.java:43)
                at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
                at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:109)
                at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:312)
                at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:276)
                at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
                at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
                at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
                at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
                at org.mortbay.jetty.Server.handle(Server.java:326)
                at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:536)
                at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:930)
                at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
                at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
                at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:405)
                at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
                at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)",,,,,,,,,,,,,,,,,CAMEL-2696,05/Apr/10 21:57;wtam;CAMEL-2614.patch;https://issues.apache.org/jira/secure/attachment/12463174/CAMEL-2614.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-04-06 13:43:25.267,,,no_permission,,,,,,,,,,,,,,76483,,,Sun Apr 24 10:01:36 UTC 2011,,,,,,,0|i01pnr:,7926,,,,,,,,,"05/Apr/10 21:55;wtam;Fix depends on: 
https://issues.apache.org/jira/browse/CXF-2732
https://issues.apache.org/jira/browse/CXF-2753
","06/Apr/10 13:43;davsclaus;Great work.

I wonder why you have commented out the last line in the patch
{code}
-                BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
+                //BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
{code}

Maybe if not needed, then delete all together.","06/Apr/10 14:02;wtam;@clause

The commented line should have been removed.   I'll clean it up.  (Thanks for pointing it out).   The retrieving of ""boi"" have been performed in the previous lines.   The idea is to make sure the ""boi"" is remained as wrapped in PAYLOAD mode, so that CXF will not put a wrapper element again when it marshals the request.  I'll add some comment in the code, too.


{code}
                 // create a Camel exchange
                 org.apache.camel.Exchange camelExchange = endpoint.createExchange();
+                DataFormat dataFormat = endpoint.getDataFormat();
+
+                BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();
+                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
+                    boi = boi.getWrappedOperation();
+                    cxfExchange.put(BindingOperationInfo.class, boi);
+                }
                 
-                BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
+                //BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
                 if (boi != null) {
                     camelExchange.setProperty(BindingOperationInfo.class.getName(), boi);
                     if (LOG.isTraceEnabled()) {
{code}
",06/May/10 09:51;njiang;Committed the patch into Camel trunk  in reversion 941623.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,
Asynchronous processing in DLC endpoint breaks message handling,CAMEL-2605,12487286,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,31/Mar/10 12:59,17/Jan/11 16:50,14/Mar/19 02:43,31/Mar/10 13:46,1.6.2,,,,,,,,,,,,1.6.3,,,,camel-core,,,,0,,,,,,"When using an asynchronous processor to handle the message in a deadletterchannel, the async message handling is broken (not all AsyncCallbacks get invoked correctly), causing the exchange never to be terminated correctly - e.g. the call to sendBody will never return.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-17 16:50:42.645,,,no_permission,,,,,,,,,,,,,,76484,,,Mon Jan 17 16:50:42 UTC 2011,,,,,,,0|i01plr:,7917,,,,,,,,,31/Mar/10 13:46;gertvanthienen;Fixed in http://svn.apache.org/viewvc?view=revision&revision=929537,17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stream documentation contains invalid sample,CAMEL-2601,12486987,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,grahamrb,grahamrb,30/Mar/10 04:58,24/Apr/11 10:01,14/Mar/19 02:43,30/Mar/10 06:49,2.2.0,,,,,,,,,,,,2.3.0,,,,documentation,,,,0,,,,,,"On the following page: http://camel.apache.org/stream.html

In last example relating to monitoring an open file (like tail) the line is incorrect...
from(""stream:file?fileName=/server/logs/server.log?scanStream=true&scanStreamDelay=1000"").to(""bean:logService?method=parseLogLine"");

should be
from(""stream:file?fileName=/server/logs/server.log&scanStream=true&scanStreamDelay=1000"").to(""bean:logService?method=parseLogLine"");

There is a question mark after the filename field whereas this should actually be an ampersand. Unfortunately I don't have edit rights on the page to update it myself.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-03-30 06:49:24.527,,,no_permission,,,,,,,,,,,,,,76485,,,Sun Apr 24 10:01:15 UTC 2011,,,,,,,0|i01pkv:,7913,,,,,,,,,"30/Mar/10 06:49;njiang;Hi Graham, 
Thanks for reporting this, I updated the wiki doc.
Please feel free to send a kara request to dev at camel.apache.org, I'm sure Claus will grant you the right shortly.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
doTry .. doCatch should disabled nested child error handlers,CAMEL-2577,12487252,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Mar/10 07:10,24/Apr/11 10:01,14/Mar/19 02:43,29/Mar/10 10:38,,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"Follow route use a default-error-handler for the route, and also defined  a
custom exception handle logic using try-catch-pattern.

But if the ""myProcessRaiseError"" raised exception the catch-clause cannot be
invoked; Why? Is it camel's bug?

{code:xml}

<route>
     <from uri=""ws:... ""/>
        <bean ...>
       <doTry>
        <filter>
               <simple>${body} == 'firstChoice'</simple>
                     <bean ref=""myProcess"" />
                     <bean ref=""myProcessRaiseError""/>
             </filter>
               <doCatch>
                       ..some error handler...
               </doCatch>
       </doTry>
    <process ...>
</route>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,,76487,,,Sun Apr 24 10:01:31 UTC 2011,,,,,,,0|i01pfj:,7889,,,,,,,,,29/Mar/10 10:38;davsclaus;trunk: 928696.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFRS Routing in 2.2.0 does not behave like in 2.0.0,CAMEL-2575,12486943,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jejmaster,jejmaster,26/Mar/10 03:00,24/Apr/11 10:01,14/Mar/19 02:43,29/Mar/10 03:00,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-cxf,,,,0,,,,,,"CXFRS Routing in Camel 2.0.0 works  well with these endPoints:

<cxf:rsServer id=""restRouter"" address=""/restRouter/""	
      serviceClass=""com.project.service.impl.ServiceManagerImpl""   />
      
     <cxf:rsClient id=""restEndpoint"" address=""http://localhost:8080/services/rest""
      serviceClass=""com.project.service.impl.ServiceManagerImpl"" />

In Camel 2.2.0, Routing fails with error causing the CXF Client to invoke a 404 not found Rest Service which is 'http://localhost:8080/services/rest/restRouter/Path'.

The address of cxf:rsClient is being appended by the cxf:rsServer's address",Spring,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-03-29 02:59:06.694,,,no_permission,,,,,,,,,,,,,,76488,,,Sun Apr 24 10:01:36 UTC 2011,,,,,,,0|i01pf3:,7887,,,,,,,,,26/Mar/10 03:36;jejmaster;Follow up. It uses CXF 2.2.6,29/Mar/10 02:59;njiang;Here is [the mail thread|http://old.nabble.com/CXFRS-Routing-in-2.2.0-does-not-behave-like-in-2.0.0-ts28038017.html] which is discussing about this issue. ,"29/Mar/10 03:00;njiang;I just committed a quick fix for this issue,  it relates to the message header of Exchange.HTTP_PATH.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http component should set Transfer-Encoding as chunked header for response message when checkChunked is true,CAMEL-2566,12487068,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ffang,ffang,22/Mar/10 08:58,24/Apr/11 10:00,14/Mar/19 02:43,22/Mar/10 12:22,2.2.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,"so that the client side which send request will know this is a chunked message.
It's important when the response http headers is more than 4096 and we want to use chunked response message
",,,,,,,,,,,,,,,,,,22/Mar/10 09:29;ffang;CAMEL-2566-with-testcase.patch;https://issues.apache.org/jira/secure/attachment/12463120/CAMEL-2566-with-testcase.patch,22/Mar/10 09:00;ffang;CAMEL-2566.patch;https://issues.apache.org/jira/secure/attachment/12463172/CAMEL-2566.patch,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-03-22 12:22:05.956,,,no_permission,,,,,,,,,,,,,,76490,,,Sun Apr 24 10:00:37 UTC 2011,,,,,,,0|i01pd3:,7878,,,,,,,,,22/Mar/10 09:29;ffang;attachment patch with testcase,"22/Mar/10 12:22;davsclaus;Thanks Freeman for the patch.

trunk: 926047.",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HttpComponent only checks the registry for an HttpClientConfigurer, setHttpClientConfigurer no longer works.",CAMEL-2559,12487072,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,slewis,slewis,18/Mar/10 15:04,24/Apr/11 10:01,14/Mar/19 02:43,21/Mar/10 12:29,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-http,,,,0,,,,,,"Basically you can't currently do this:

{code}
            public void configure() {

                ProxyHttpClientConfigurer configurer = new ProxyHttpClientConfigurer(
                        ""proxyhost"",
                        80,
                        ""user"",
                        ""password"",
                        null,
                        null);

                getContext().getComponent(""http"", HttpComponent.class).setHttpClientConfigurer(configurer);

                from(""direct:start"")
                    .to(""http://www.google.com/search"");
            }
{code}

HttpComponent only looks in the registry for an HttpClientConfigurer.",,,,,,,,,,,,,,,,,,21/Mar/10 08:07;davsclaus;CAMEL-2559.patch;https://issues.apache.org/jira/secure/attachment/12463161/CAMEL-2559.patch,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-20 15:59:21.035,,,no_permission,,,,,,,,,,,,,,76491,,,Sun Apr 24 10:01:31 UTC 2011,,,,,,,0|i01pbr:,7872,Regression,,,,,,,,"18/Mar/10 15:08;slewis;Sending        src/main/java/org/apache/camel/component/http/HttpComponent.java
Adding         src/test/java/org/apache/camel/component/http/HttpClientConfigurerTest.java
Transmitting file data ..
Committed revision 924849.
","20/Mar/10 15:59;davsclaus;This commit caused problems. 

The test {{JettyHttpBindingRefTest}} now fails","20/Mar/10 16:14;davsclaus;The problem is really HttpComponent allows endpoints to override the component configured options which is wrong.

In fact endpoints should
- use endpoint configured options over component configured
- not mess with the component configured

","20/Mar/10 17:38;davsclaus;I think I got it covered now, will do more testing.

But I have reworked camel-http and camel-jetty a little big to
- use endpoint configured options over component configured
- not mess with the component configured
- using a single shared {{clientConnectionManager}} as that is whats meant
- properly registering http/https with correct port number on SchemeRegistry on {{clientConnectionManager}}
",21/Mar/10 08:07;davsclaus;The patch which fixes the issues listed above,"21/Mar/10 12:29;davsclaus;trunk: 925759.

Committed patch. 100% test with entire Camel.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException occur in UnsafeUriCharactersEncoder.class,CAMEL-2554,12487069,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,16/Mar/10 15:58,17/Jan/11 16:50,14/Mar/19 02:43,19/Mar/10 03:11,1.3.0,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,1.6.3,2.3.0,,,,,,,0,,,,,,Here is the [mail thread|http://old.nabble.com/IndexOutOfBoundsException-occur-in-UnsafeUriCharactersEncoder.class-tp27919179p27919179.html] for the detail discussion.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-17 16:50:40.899,,,no_permission,,,,,,,,,,,,,,76492,,,Mon Jan 17 16:50:40 UTC 2011,,,,,,,0|i01pan:,7867,,,,,,,,,17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component does not correctly handle PipedInputStream in message body.,CAMEL-2551,12487124,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,anydoby,anydoby,15/Mar/10 11:17,24/Apr/11 10:01,14/Mar/19 02:43,16/Mar/10 12:06,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,"Streams that do not have their contents length at immediate disposal, like PipedInputStream, are not processed correctly by the file component.

\\

{code}
    private void writeFileByStream(InputStream in, File target) throws IOException {
        FileChannel out = null;
        try {
            out = prepareOutputFileChannel(target, out);

            if (LOG.isTraceEnabled()) {
                LOG.trace(""Using InputStream to transfer from: "" + in + "" to: "" + out);
            }
            int size = endpoint.getBufferSize();
            byte[] buffer = new byte[size];
            ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);
            while (true) {
                int count = in.read(buffer);
                if (count <= 0) {
                    break;
                } else if (count < size) {
                    byteBuffer = ByteBuffer.wrap(buffer, 0, count);
                    out.write(byteBuffer);
                    break;
                } else {
                    out.write(byteBuffer);
                    byteBuffer.clear();
                }
            }
        } finally {
            ObjectHelper.close(in, target.getName(), LOG);
            ObjectHelper.close(out, target.getName(), LOG);
        }
    }

{code}

The code 

{code}
                } else if (count < size) {
                    byteBuffer = ByteBuffer.wrap(buffer, 0, count);
                    out.write(byteBuffer);
                    break;
                } else {
{code}

does not take into account that bytes read can be less than the size of the buffer passed into the InputStream.read method and stream can still have more content. The only indication that EOF was reached is -1 returned from the read method according to Java API.",does not matter,,,,,,,,,,,,,,,,,15/Mar/10 11:18;anydoby;patch.txt;https://issues.apache.org/jira/secure/attachment/12463194/patch.txt,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-16 05:03:27.111,,,no_permission,,,,,,,,,,,,,,76493,,,Sun Apr 24 10:01:36 UTC 2011,,,Patch Available,,,,0|i01p9z:,7864,,,,,,,,,15/Mar/10 11:18;anydoby;This is the patch which works ok for our project.,"15/Mar/10 11:21;anydoby;Current workaround we have to use is the following:

\\

{code}

        InputStream is = ....

        final InputStream camelBugWorkaround = new InputStream()
        {

            @Override
            public int read(final byte[] b, int off, int len) throws IOException
            {
                final int expectedMaxBytes = len;
                int read = 0;
                int totalRead = 0;
                while ((read = is.read(b, off, len)) != -1)
                {
                    if (read < len)
                    {
                        off += read;
                        len -= read;
                    }
                    totalRead += read;
                    if (totalRead == expectedMaxBytes)
                    {
                        break;
                    }
                }
                return totalRead == 0 ? -1 : totalRead;
            }

            @Override
            public int read() throws IOException
            {
                return is.read();
            }

            @Override
            public void close() throws IOException
            {
                is.close();
            }

            @Override
            public int available() throws IOException
            {
                return is.available();
            }

            @Override
            public long skip(final long n) throws IOException
            {
                return is.skip(n);
            }

        };

        exchange.getOut().setBody(camelBugWorkaround);

{code}

Where _is_ is the PipedInputStream.","16/Mar/10 05:03;davsclaus;Sergey well spotted.

Btw which use case do you use a PipedInputStream with?","16/Mar/10 12:01;anydoby;Hi Claus

We use Camel for a downstream distribution product and one of the requirements is streaming of large amounts of data. The use case is bulk output of data - I put a db cursor into an Iterable, forward to a home made velocity component (out of the box velocity component writes to a String, which is not acceptable for us) - and it puts PipedInputStream as message body. A separate thread feeds the PipedOutputStream to velocity engine. Then when this stream is passed on to file component we get InputStream closed exception, because of the bug mentioned. For now I have to wrap PipedInputStream with a buffering stream, but if you include the fix, we will remove the workaround.","16/Mar/10 12:06;davsclaus;Sergey

Thanks for taking the time to explain the use case. I was just wondering where the PipedInputStream came into the picture.
But its nice with some many different use cases people use Camel with.

Willem have already committed your patch this morning:

http://svn.apache.org/viewvc?rev=923583&view=rev",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,
