Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Duplicate),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Entrylogger is not readding rolled logs back to the logChannelsToFlush list when exception happens while trying to flush rolled logs,BOOKKEEPER-1044,13066528,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,sijie@apache.org,reddycharan18@gmail.com,reddycharan18@gmail.com,25/Apr/17 00:08,26/Jul/17 13:52,13/Mar/19 22:15,25/Jul/17 09:04,,,4.5.0,,,,,0,,"SyncThread.checkpoint(Checkpoint checkpoint) (which is called periodically by SyncThread's executor for every flushInterval) ultimately calls EntryLogger.flushRotatedLogs.  

In EntryLogger.flushRotatedLogs, first we set 'logChannelsToFlush' to null and then we try to flush and close individual file. Now, if IOException happens while trying to flush/close the logchannel, then exception is thrown as it is and it get propagates back upto SyncThread.checkpoint. Here we catch that IOException, log it and return without calling the checkpointComplete. But by now we lost reference of 'logChannelsToFlush' (rolled logs which are yet to be closed), because it is set to null before we try to flush/close individually rolledlogs. The next execution of 'checkpoint' (after flushinterval) wouldn't be knowing about the rolledlogs it failed to flush/close the previous time and it would flush the newly rolledlogs. So the failure of flush/close of the previous rolledlogs goes unnoticed completely. 

in EntryLogger.java
        void flushRotatedLogs() throws IOException {
        List<BufferedLogChannel> channels = null;
        long flushedLogId = INVALID_LID;
        synchronized (this) {
            channels = logChannelsToFlush;
            logChannelsToFlush = null;               <--------- here we set 'logChannelsToFlush' to null before it tries to flush/close rolledlogs 
        }
        if (null == channels) {
            return;
        }
        for (BufferedLogChannel channel : channels) {
            channel.flush(true);                      <------------IOEXception can happen here or in the following closeFileChannel call             
            // since this channel is only used for writing, after flushing the channel,
            // we had to close the underlying file channel. Otherwise, we might end up
            // leaking fds which cause the disk spaces could not be reclaimed.
            closeFileChannel(channel);
            if (channel.getLogId() > flushedLogId) {
                flushedLogId = channel.getLogId();
            }
            LOG.info(""Synced entry logger {} to disk."", channel.getLogId());
        }
        // move the leastUnflushedLogId ptr
        leastUnflushedLogId = flushedLogId + 1;
    }

in SyncThread.java
    public void checkpoint(Checkpoint checkpoint) {
        try {
            checkpoint = ledgerStorage.checkpoint(checkpoint);
        } catch (NoWritableLedgerDirException e) {
            LOG.error(""No writeable ledger directories"", e);
            dirsListener.allDisksFull();
            return;
        } catch (IOException e) {
            LOG.error(""Exception flushing ledgers"", e); <-----that IOExc gets propagated to this method and here it is caught and not dealt appropriately    
            return;
        }

        try {
            checkpointSource.checkpointComplete(checkpoint, true);
        } catch (IOException e) {
            LOG.error(""Exception marking checkpoint as complete"", e);
            dirsListener.allDisksFull();
        }
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-25 04:58:59.968,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 26 13:52:37 UTC 2017,,,,,,0|i3e1hj:,9223372036854775807,,,,,,,,25/Apr/17 04:58;sijie@apache.org;thank you [~reddycharan18@gmail.com],17/Jul/17 23:53;sijie@apache.org;[~reddycharan18@gmail.com] do you have a patch for this?,25/Jul/17 00:48;sijie@apache.org;I attached a simple fix at https://github.com/apache/bookkeeper/pull/286,"25/Jul/17 09:04;eolivelli;Issue resolved by merging pull request 286
            [https://github.com/apache/bookkeeper/pull/286]

            {noformat}
            commit 24ac8ead6240aaaaa845afccb4e606fbe0da1602
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Tue Jul 25 11:04:36 2017 +0200
Commit:     Enrico Olivelli <eolivelli@apache.org>
CommitDate: Tue Jul 25 11:04:36 2017 +0200

    BOOKKEEPER-1044: Entrylogger is not readding rolled logs back to the logChannelsToFlush list when exception happens while trying to flush rolled logs
    
    Descriptions of the changes in this PR:
    
    This is a straightforward fix to add unflushed list of entry log files back to flushed list.
    
    Test is missing at this point because it is a bit complicated to test this without proper mocking. I would defer adding the test later and creating a github issue later on if it makes sense.
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Enrico Olivelli <eolivelli@apache.org>
    
    This closes #286 from sijie/BOOKKEEPER-1044

            {noformat}
            ","26/Jul/17 13:52;hudson;SUCCESS: Integrated in Jenkins build bookkeeper-master #1829 (See [https://builds.apache.org/job/bookkeeper-master/1829/])
BOOKKEEPER-1044: Entrylogger is not readding rolled logs back to the (eolivelli: [https://github.com/apache/bookkeeper/commit/24ac8ead6240aaaaa845afccb4e606fbe0da1602])
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieRecoveryTest is failing due to a Netty4 IllegalReferenceCountException,BOOKKEEPER-1071,13072993,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,mmerli,eolivelli,eolivelli,18/May/17 03:07,01/Jun/17 11:52,13/Mar/19 22:16,01/Jun/17 07:47,4.5.0,,4.5.0,,bookkeeper-server,,,0,,"this is the killer commit:
e44c7388399e5589cf44e38c58bb84c74da544af BOOKKEEPER-1069: If client uses V2 proto, set the connection to always decode V2 messages

this commit was working:
0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6 BOOKKEEPER-1048: Use ByteBuf in LedgerStorage interface

{code}
2017-05-18 04:50:39,691 - WARN  - [bookie-io-4:Slf4JLogger@151] - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handl
e the exception.
io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1
        at io.netty.buffer.AbstractReferenceCountedByteBuf.release0(AbstractReferenceCountedByteBuf.java:101)
        at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:89)
        at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:84)
        at io.netty.channel.DefaultChannelPipeline.onUnhandledInboundMessage(DefaultChannelPipeline.java:1169)
        at io.netty.channel.DefaultChannelPipeline$TailContext.channelRead(DefaultChannelPipeline.java:1221)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at org.apache.bookkeeper.proto.BookieRequestHandler.channelRead(BookieRequestHandler.java:77)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)
        at org.apache.bookkeeper.proto.AuthHandler$ServerSideHandler.channelRead(AuthHandler.java:90)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)
        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926)
        at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:1017)
        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:394)
        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:299)
        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-18 15:04:51.425,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 01 11:52:29 UTC 2017,,,,,,0|i3f5bj:,9223372036854775807,,,,,,,,"18/May/17 04:58;eolivelli;[~mmerli] My suspect is that RequestEnDeCoderPreV3 does not handle correctly new protocol units, like GET_BOOKIE_INFO and buffers are not refcounted correctly.

The test triggers the V2 protocol as it a compatibility test

I did some debug my I cannot find the right point to put a ""buffer.retain()"" 
I am not an expert of Netty4 and refcounts, can you pick up the issue ?

","18/May/17 15:04;mmerli;Sure, looking at it.","26/May/17 10:59;eolivelli;[~mmerli] did you have time to take a look ?

Currently it is difficult to validate and merge PRs with as we cannot rely on that broken tests

Thank you","01/Jun/17 04:31;mmerli;[~eolivelli] Sorry for delay on this one. 

The problem here is that after BOOKKEEPER-1069, the BookieHandler stays in V2 protocol mode forever, since there is only 1 single handler istance
across all connections. In this particular test failure, first the client is an older BK client, speaking V2 protocol with bookie, and then we connect a new BK client, speaking V3 proto, but the bookie still tries to decode V2.

I had not merged one commit from yahoo-4.3 branch (https://github.com/yahoo/bookkeeper/commit/23a8b596d317cad529fb4408be0e06423395ef46 ), that I thought was not strictly required, but apparently it is.

I am submit a PR right now.","01/Jun/17 04:32;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/170

    BOOKKEEPER-1071: Use per connection instances of request encoder/decoder

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-1071

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/170.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #170
    
----

----
","01/Jun/17 04:49;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/170
  
    There seems to be some problem in Jenkins since the build is immediately failing:
    
    ```
    ...
    Setting MAVEN_3_3_3_HOME=/home/jenkins/tools/maven/apache-maven-3.3.3
    [bookkeeper-master-git-pullrequest] $ /bin/bash /tmp/hudson6425132611346733334.sh
    /tmp/hudson6425132611346733334.sh: line 8: mvn: command not found
    Build step 'Execute shell' marked build as failure
    [FINDBUGS] Skipping publisher since build result is FAILURE
    
    ```
","01/Jun/17 05:54;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/170
  
    checking the jenkins build now
","01/Jun/17 06:10;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/170
  
    Hmm. I am not really sure about the error here.
    
    @eolivelli - did you change any settings on hudson? The error message seems to be related to hudson. 
","01/Jun/17 06:13;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/170
  
    No I only changed master job not the one for prs.
    I will check too asap
","01/Jun/17 06:36;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/170
  
    I created a new maven-based job (the old one is using customized shell script). It seems to be working, need to adjust some build commands. https://builds.apache.org/job/bookkeeper-precommit-pullrequest/1/console
","01/Jun/17 06:41;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/170
  
    https://builds.apache.org/job/bookkeeper-precommit-pullrequest/4/console seems to be working now. 
","01/Jun/17 07:42;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/170
  
    https://builds.apache.org/job/bookkeeper-precommit-pullrequest/4/console it passed. merging this change now.
","01/Jun/17 07:47;eolivelli;Issue resolved by merging pull request 170
            [https://github.com/apache/bookkeeper/pull/170]

            {noformat}
            commit da70648719679fd1db001c74ad873bf134f16198
Author:     Matteo Merli <mmerli@yahoo-inc.com>
AuthorDate: Thu Jun 1 09:47:28 2017 +0200
Commit:     Enrico Olivelli <eolivelli@apache.org>
CommitDate: Thu Jun 1 09:47:28 2017 +0200

    BOOKKEEPER-1071: Use per connection instances of request encoder/decoder
    
    Author: Matteo Merli <mmerli@yahoo-inc.com>
    
    Reviewers: Enrico Olivelli, Sijie Guo
    
    Closes #170 from merlimat/bk-1071

            {noformat}
            ","01/Jun/17 07:47;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/170
","01/Jun/17 11:52;hudson;UNSTABLE: Integrated in Jenkins build bookkeeper-master #1770 (See [https://builds.apache.org/job/bookkeeper-master/1770/])
BOOKKEEPER-1071: Use per connection instances of request encoder/decoder (eolivelli: rev da70648719679fd1db001c74ad873bf134f16198)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Explicit LAC tests on master,BOOKKEEPER-1020,13060866,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,eolivelli,eolivelli,eolivelli,01/Apr/17 07:35,04/Apr/17 13:38,13/Mar/19 22:16,03/Apr/17 16:58,4.5.0,,4.5.0,,,,,0,,"Tests in error: 
  BookKeeperTest.testReadHandleWithExplicitLAC:404 » TestTimedOut test timed out...
  BookKeeperTest.testReadHandleWithExplicitLAC:404 » TestTimedOut test timed out...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-03 14:48:27.461,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 04 13:38:26 UTC 2017,,,,,,0|i3d36f:,9223372036854775807,,,,,,,,"03/Apr/17 14:45;eolivelli;it is a regression introduced with this commit:

f20568eaa25e0efe6926ede9030a210382e3005b	
BOOKKEEPER-1007: Explicit LAC: make the interval configurable in ms
Author: eolivelli <eolivelli@gmail.com>
Reviewers: Robert (Bobby) Evans <None>, Venkateswararao Jujjuri (JV) <None>, Sijie Guo <sijie@apache.org>
","03/Apr/17 14:48;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/122

    BOOKKEEPER-1020 Fix Explicit LAC tests on master

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper BOOKKEEPER-1020-fix-explicitlac-test

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/122.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #122
    
----
commit ddc20c39368adf0fedfd6a2c2f0296922f07889c
Author: eolivelli <eolivelli@apache.org>
Date:   2017-04-03T14:47:22Z

    BOOKKEEPER-1020 Fix Explicit LAC tests on master

----
",03/Apr/17 14:49;eolivelli;In BOOKKEEPER-1007 we changed the explicit interval timeunit from 'seconds' to 'ms' but the Thread.sleep(xxx) call was not updated,"03/Apr/17 16:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/122
","03/Apr/17 16:58;sijie@apache.org;Issue resolved by merging pull request 122
            [https://github.com/apache/bookkeeper/pull/122]

            {noformat}
            commit 9836c87dc2c082c46692d60c60cf9e23c7b0b06c
Author:     eolivelli <eolivelli@apache.org>
AuthorDate: Mon Apr 3 09:57:40 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon Apr 3 09:57:40 2017 -0700

    BOOKKEEPER-1020: Fix Explicit LAC tests on master
    
    Author: eolivelli <eolivelli@apache.org>
    
    Reviewers: Sijie Guo <sijie@apache.org>, Robert (Bobby) Evans <evans@yahoo-inc.com>
    
    Closes #122 from eolivelli/BOOKKEEPER-1020-fix-explicitlac-test

            {noformat}
            ","04/Apr/17 13:38;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1708 (See [https://builds.apache.org/job/bookkeeper-master/1708/])
BOOKKEEPER-1020: Fix Explicit LAC tests on master (sijie: rev 9836c87dc2c082c46692d60c60cf9e23c7b0b06c)
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClientAuthProvider and BookieAuthProvider Public API used Protobuf Shaded classes,BOOKKEEPER-959,13013834,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,eolivelli,eolivelli,eolivelli,20/Oct/16 12:11,31/Jan/17 12:49,13/Mar/19 22:16,31/Jan/17 01:22,4.4.0,,4.5.0,,bookkeeper-client,bookkeeper-server,,0,,"With 4.4.0 we introduced the ability to implement custom authentication plugins.

The new interfaces ClientAuthProvider and BookieAuthProvider depend on ExtensionRegistry, which is a shaded dependency.

As a consequence it is not possibile to implement any custom auth provider in code outside the project, because shaded/relocated dependencies cannot be used.

We need to break the actual interface and introduce a new way to implement such plugins in a portable way",,,,,,,,,,,,BOOKKEEPER-588,BOOKKEEPER-391,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-20 14:22:34.547,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 31 12:49:49 UTC 2017,,,,,,0|i355br:,9223372036854775807,,,,,,,,"20/Oct/16 12:15;eolivelli;My idea is to introduce some standard message types to be used on the wire. 
Actually in order to implement an ""usual"" authentication protocol it is enough to exchange simple byte[] values. 
Usually I use SASL (for MD5 o GSSAPI/Kerberos....) and in order to use Java built-in SASL feature a byte[] is enough, then SASL encapsulated all the state.
A byte[] can be used to transport any kind of custom information, such as JSON/XML formatted data, I think it will be fine

I will work on a first patch and share some code","20/Oct/16 14:22;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/67

    BOOKKEEPER-959 ClientAuthProvider and BookieAuthProvider Public API used Protobuf Shaded classes

    This fix removes the explicit usage of protobuf from ClientAuthProvider and BookieAuthProvider API, since protobuf library is shaded and relocated on the distributed public version of BookKeeper

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper BOOKKEEPER-959

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/67.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #67
    
----
commit ef2ca0e23c03dff48d14d7c86c192a57644ad489
Author: eolivelli <eolivelli@gmail.com>
Date:   2016-10-20T14:18:34Z

    BOOKKEEPER-959 ClientAuthProvider and BookieAuthProvider Public API used Protobuf Shaded classes

----
","24/Oct/16 07:03;eolivelli;Some points:
- Maybe we can change the name of MessageAuthData class to a better 'AuthToken' class
- I used the 'extensions' facility in order to support some kind of compatibility with 4.4.0, I am not a protobuf expert...is it necessary ? 
","26/Oct/16 22:52;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    The change looks OK to me. It's much easier to get around compared to the Protobuf extension. I guess we (Yahoo) are the only current users of this framework but I prefer to break the compatibility right now and have a better solution. 
    
    The only point I'd like to make sure is how to transition a running cluster from no-auth to auth enabled and back. Eg. if a client is sending auth commands, will the bookie reply OK if auth is disabled?
","27/Oct/16 07:11;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    Thanks @merlimat for the review.
    Do you think we can remove the use of the ""extensions""  and use a field for the payload ?
    
    At least for the transition from no-auth to auth I can submit a fix on this PR or is it better to create a new JIRA ?
    
    my idea is to make the Bookie answer a standard message ""authentication-disabled"" to clients which is trying to make any kind of auth, so:
    - on the server side the connection goes to ""authenticated"" state
    - on the client side falls back to a ""authenticated"" state
    this standard message will be processed from BookKeeper client system code and not passed to the auth plugin
    
    we have to implement a ""require.authentication"" flag on the Bookie side, to let the admin set it to false, in order to deal with legacy clients (and Bookies) which do not perform authentication.
    On a rolling restart we upgrade Bookie to the new version with require.authentication=false, then upgrade all the clients to the new version and/or auth plugin, then we restart again each Bookie ith require.authentication=true
    
    this simple implementation will allow to switch from no-auth to auth, but not from auth-1-plugin to auth-2-plugin
    
    does it sound good  ?
","27/Oct/16 07:18;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    As a sequence to enable authentication I would say something like: 
     1. Upgrade to BK-4.5 in clients and bookies, auth disabled
     2. Enable auth in BK clients (bookies should let clients connect)
     3. Configure bookies to require auth
    

","28/Oct/16 08:00;eolivelli;[~merlimat] are you OK if I drop the 'extensions' from AuthMessage and add a fixed ""bytes"" field  ?
in the PR I have just added an extension, but with this new implementation it is not worth to have such extensions (we have to register the extension anywhere)

from

{code}
/**
 * Extendible message which auth mechanisms
 * can use to carry their payload.
 */
message AuthMessage {
    required string authPluginName = 1;
    extensions 1000 to max;
}
{code}

to

{code}
/**
 * Message which auth mechanisms
 * can use to carry their payload.
 */
message AuthMessage {
    required string authPluginName = 1;
    required bytes token = 2;
}
{code}
","03/Nov/16 16:29;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    @merlimat I'm going to update the PR this way:
    - remove the extension from AuthMessage, and make 'payload' a fixed, required, field
    - rename AuthMessageData to AuthToken
    - fix the auth required/auth disabled flow (I will update https://cwiki.apache.org/confluence/display/BOOKKEEPER/BP-3+-+Security+support with specs)
    
    is the change on protobuf OK for you, as we know you are the only user of such message ?
    is there any other way to deal with compatibility for you ?
","04/Nov/16 16:11;eolivelli;I have updated the PR with the following changes:
- rename AuthMessageData to AuthToken 
- fix the auth required/auth disabled flow

My proposal to support the switch from ""no-auth"" to any plugin is the following:
1) when no auth is configured on bookie-side the default auth plugin comes to play. I'm going to change its name from ""nullplugin"" to ""AuthDisabledPlugin""
2) when no  auth is configured on bookies the bookie goes to a permissive mode in which any client is allowed to connect and use bookie functions, any 'auth' message will be answered with an OK status code from the AuthDisabledPlugin
3) when no auth is configured on bookies each attempt of authentication by the client will receive the OK status code from the AuthDisabledPlugin, and so the client will understand that the bookie is not performing  authentication, and goes to the authenticated state

A rolling upgrade from AuthDisabledPlugin to any other plugin can be implemented by rebooting clients with the new plugin: this way bookies will authenticate clients with AuthDisabledPlugin and clients will go to authenticated state anyway.
Then you will restart bookies with the new plugin and clients will perform real authentication.
Beware that bookie-to-bookie comunications will follow the same scheme during the rolling upgrade, because each bookie can be a client for the other bookies and will authenticate thru the AuthDisabledPlugin flow or to the requested plugin flow.

[~rakeshr] [~merlimat] does this flow sound good to you?

Another issue will be to attach to the server-side view of the connection the user-id (principal) of the client which performed authentication, this will be the base for authorization.
A change to the AuthProvider interface will be needed.
I wonder if we have to add this feature now as we are breaking compatibility with 4.4

[~hustlmsp] do you think that the  discussion should continue on  https://cwiki.apache.org/confluence/display/BOOKKEEPER/BP-3+-+Security+support  ?
","11/Nov/16 19:59;hustlmsp;Since you are breaking the compatibility, we should add this feature now.

Also,

Can you create a jira about 'Security Support' and make it a master ticket and link other security related tickets to that master ticket?

For BP (bookkeeper proposoal), the discussions should happen in the email threads and jiras and the final design (the decisions made in the email threads, jiras and meetings) should be updated to the BP document. And it should finally land at the bookkeeper documentation when it is released.  ","12/Nov/16 02:33;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    Sounds good. 
    
    > is the change on protobuf OK for you, as we know you are the only user of such message ?
    
    Yes
    
    > is there any other way to deal with compatibility for you ?
    
    If the bookies with auth turned off will accept a client with auth turned on... then we can manage the transition (eg: turn temporarily off the auth and deploy the new code). But the same requirement is needed to enable auth on an existing cluster.

","18/Nov/16 07:48;eolivelli;I have updated the PR, this is the full list of changes:
- a breaking change to the Auth Plugin API (which used Protobuf shaded dependency and so it was not usable by develpers of third party plugins)
- a breaking change to the protocol (this change affects only users of auth plugin of 4.4.0)
- introduction of BookKeeperPrincipal, which represents the user bound to the connection
- introduction of ClientSideConnectionPeer and BookieSideConnectionPeer , which are handles to the connection, this classes allow AuthPlugins (and in the future new kind of plugins) to access principals bound to the connection, the remote address of the connected peer and also allow plugins to drop the connection
- introduction of ClientConfiguration#CLIENT_ROLE configuration property
- the move of ClientConfiguration#CLIENT_AUTH_PROVIDER_FACTORY_CLASS to AbstractConfiguration because it is to be configured on Bookie side to (for usage by the Auditor)
- introduction of a way to perform a rolling upgrade from authentication disabled to authentication enabled

The CLIENT_ROLE property is used internally to make the Auditor let the Client Side Auth plugin to known that the connection will be used by the 'system', valid values are:
- standard (standard clients)
- system (the auditor and autorecovery)
Is has been introduced to let the future SASL Kerberos Auth Plugin (BOOKKEEPER-391) to use different configuration for there two kind of usecases, it will be useful to any other plugin too

The xxxxPeer classes enhance the previous way of telling to the AuthPlugin about the origin of the connection (in 4.4.0 only the SocketAddress was given), during the discussion about SSL support (BOOKKEEPER-588) it seemed required to make the AuthPlugin:
- access other Principals bound to the connection (like SSL certificates, both from the server and the client side)
- a way to let the Plugin drop the connection in case of autorization expiration (like SSL client side expired certificate)","18/Nov/16 07:50;eolivelli;this PR is incomplete anyway, because during the work on SSL support BOOKKEEPER-588 I saw that the SSL AuthPlugin should starts a new background thread to perform periodic checks about client certificates expirations.
We have to add some ""close()"" method to every AuthPlugin class in order to let it release resources (in SSL case to stop the thread)","18/Nov/16 13:36;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    I have updated the PR with the close() method.
    I think it is aligned with the specs and the discussion
","22/Nov/16 08:03;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    Thanks @sijie for the review.
    I have applied your suggestions. 
","29/Nov/16 23:14;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    @eolivelli LGTM +1.
    
    @merlimat  can you take a look too?
","08/Dec/16 03:31;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    ping @merlimat 
","13/Dec/16 08:25;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    ping @merlimat 
","20/Dec/16 21:45;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    @merlimat do you mind taking a look one more time before I merge this one?
","22/Dec/16 14:20;eolivelli;I have found another odd issue, we were using BookkeeperInternalCallbacks for GenericCallback.
I'm going to update the patch with a new Callback interface in order not to make AuthPlugins depend on classes marked as ""Internal""","31/Jan/17 01:13;githubbot;Github user zzsongsg commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    +1 merging this pull request.
","31/Jan/17 01:14;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/67
","31/Jan/17 01:22;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/67
  
    merged this pull request in 13d668f. thank you @eolivelli 
","31/Jan/17 01:22;hustlmsp;Issue resolved by merging pull request 67
            [https://github.com/apache/bookkeeper/pull/67]

            {noformat}
            commit 13d668f2208bf472e4938cfdfd2de912eaa11275
Author:     eolivelli <eolivelli@gmail.com>
AuthorDate: Mon Jan 30 17:14:22 2017 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon Jan 30 17:14:22 2017 -0800

    BOOKKEEPER-959: ClientAuthProvider and BookieAuthProvider Public API used Protobuf Shaded classes
    
    This fix removes the explicit usage of protobuf from ClientAuthProvider and BookieAuthProvider API, since protobuf library is shaded and relocated on the distributed public version of BookKeeper
    
    Author: eolivelli <eolivelli@gmail.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #67 from eolivelli/BOOKKEEPER-959

            {noformat}
            ","31/Jan/17 12:49;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1644 (See [https://builds.apache.org/job/bookkeeper-master/1644/])
BOOKKEEPER-959: ClientAuthProvider and BookieAuthProvider Public API (sijie: rev 13d668f2208bf472e4938cfdfd2de912eaa11275)
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java
* (edit) bookkeeper-server/pom.xml
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBackwardCompatCMS42.java
* (add) bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuthAutoRecoveryTest.java
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ConnectionPeer.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthProviderFactoryFactory.java
* (edit) bookkeeper-server/src/main/proto/BookkeeperProtocol.proto
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ClientConnectionPeer.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/ClientAuthProvider.java
* (edit) bookkeeper-server/src/main/resources/findbugsExclude.xml
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieConnectionPeer.java
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthCallbacks.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookieAuthProvider.java
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthToken.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookKeeperPrincipal.java
* (delete) bookkeeper-server/src/test/proto/TestDataFormats.proto
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java
* (delete) bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDataFormats.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing license headers,BOOKKEEPER-988,13028977,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,18/Dec/16 16:21,21/Dec/16 13:12,13/Mar/19 22:16,20/Dec/16 21:43,,,4.5.0,,bookkeeper-server,,,0,,"The recent commit failed the apache-rat:check, due to two new files missing license headers.

{code}
commit 4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   Fri Dec 16 17:42:18 2016 -0800

    BOOKKEEPER-967: New testsuite for RackPlacement
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-18 16:22:48.149,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 21 13:12:05 UTC 2016,,,,,,0|i37qrj:,9223372036854775807,,,,,,,,"18/Dec/16 16:22;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/95

    BOOKKEEPER-988: Add missing license header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper sijie/fix_license_header

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/95.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #95
    
----
commit e0316e4ab4b9e87e26ab57524b8762866e4ae8ab
Author: Sijie Guo <sijie@apache.org>
Date:   2016-12-18T16:18:45Z

    Add missing license header

----
","20/Dec/16 21:43;hustlmsp;Issue resolved by merging pull request 95
            [https://github.com/apache/bookkeeper/pull/95]

            {noformat}
            commit 54863473365572f955a8e7a3e022614f5f5e4604
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Tue Dec 20 13:43:08 2016 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Dec 20 13:43:08 2016 -0800

    BOOKKEEPER-988: Add missing license header
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>
    
    Closes #95 from sijie/sijie/fix_license_header

            {noformat}
            ","21/Dec/16 13:12;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1603 (See [https://builds.apache.org/job/bookkeeper-master/1603/])
BOOKKEEPER-988: Add missing license header (sijie: rev 54863473365572f955a8e7a3e022614f5f5e4604)
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java
* (edit) bookkeeper-server/src/test/resources/networkmappingscript.sh
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper build is broken due to the shade plugin for commit ecbb053e6e,BOOKKEEPER-987,13028703,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,eolivelli,eolivelli,eolivelli,16/Dec/16 16:07,17/Dec/16 12:49,13/Mar/19 22:16,17/Dec/16 01:40,4.5.0,,4.5.0,,build,,,0,,"Step to reproduce:
- clone BookKeeper repository from GitHub
- checkout master (or at least commit ecbb053e6e873859507e247cae727f4bc8b9f7fa)
- mvn clean install -DskipTests -X

The fix is to upgrade the shade plugin to the latest version (2.4.3)

this is the error
{code}
[INFO] Excluding log4j:log4j:jar:1.2.15 from the shaded jar.
[INFO] Minimizing jar org.apache.bookkeeper:bookkeeper-server:jar:4.5.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] bookkeeper ......................................... SUCCESS [  0.428 s]
[INFO] compability dependencies ........................... SUCCESS [  0.016 s]
[INFO] bookkeeper-server-compat400 ........................ SUCCESS [  2.772 s]
[INFO] bookkeeper-server-compat410 ........................ SUCCESS [  1.159 s]
[INFO] bookkeeper-server-compat420 ........................ SUCCESS [  1.370 s]
[INFO] Stats API for bookkeeper ........................... SUCCESS [  0.422 s]
[INFO] bookkeeper-server .................................. FAILURE [  4.002 s]
[INFO] bookkeeper-benchmark ............................... SKIPPED
[INFO] Stats provider for twitter-stats package ........... SKIPPED
[INFO] Stats provider for twitter-ostrich package ......... SKIPPED
[INFO] Stats provider for codahale metrics ................ SKIPPED
[INFO] bookkeeper-stats-providers ......................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 10.328 s
[INFO] Finished at: 2016-12-16T17:06:08+01:00
[INFO] Final Memory: 46M/998M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-shade-plugin:2.1:shade (default) on project bookkeeper-server: Error creating shaded jar: 46848 -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-shade-plugin:2.1:shade (default) on project bookkeeper-server: Error creating shaded jar: 46848
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: Error creating shaded jar: 46848
	at org.apache.maven.plugins.shade.mojo.ShadeMojo.execute(ShadeMojo.java:528)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	... 20 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: 46848
	at org.objectweb.asm.ClassReader.readClass(Unknown Source)
	at org.objectweb.asm.ClassReader.accept(Unknown Source)
	at org.objectweb.asm.ClassReader.accept(Unknown Source)
	at org.vafer.jdependency.Clazzpath.addClazzpathUnit(Clazzpath.java:94)
	at org.apache.maven.plugins.shade.filter.MinijarFilter.<init>(MinijarFilter.java:77)
	at org.apache.maven.plugins.shade.mojo.ShadeMojo.getFilters(ShadeMojo.java:767)
	at org.apache.maven.plugins.shade.mojo.ShadeMojo.execute(ShadeMojo.java:445)
	... 22 more

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-16 16:10:16.574,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat Dec 17 12:49:42 UTC 2016,,,,,,0|i37p2n:,9223372036854775807,,,,,,,,"16/Dec/16 16:10;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/94

    BOOKKEEPER-987 BookKeeper build is broken due to the shade plugin

    This is simply an upgrade of the maven-shade-plugin to version 2.4.3

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper BOOKKEEPER-987

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/94.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #94
    
----
commit 7a614bad7d9764a324ccf48ab06bcd8c431a2054
Author: eolivelli <eolivelli@gmail.com>
Date:   2016-12-16T16:09:04Z

    BOOKKEEPER-987 BookKeeper build is broken due to the shade plugin for commit ecbb053e6e

----
","16/Dec/16 23:35;githubbot;Github user rithin-shetty commented on the issue:

    https://github.com/apache/bookkeeper/pull/94
  
    I've seen this error too. The fix LGTM +1.
","17/Dec/16 01:36;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/94
  
    the change looks good to me. +1
    
    I am going to merge the changes to bring the ci back.
","17/Dec/16 01:40;hustlmsp;Issue resolved by merging pull request 94
            [https://github.com/apache/bookkeeper/pull/94]

            {noformat}
            commit d2e82d4942be079cbfdb179e9a3fe3e574beff8d
Author:     eolivelli <eolivelli@gmail.com>
AuthorDate: Fri Dec 16 17:40:25 2016 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Fri Dec 16 17:40:25 2016 -0800

    BOOKKEEPER-987: BookKeeper build is broken due to the shade plugin
    
    This is simply an upgrade of the maven-shade-plugin to version 2.4.3
    
    Author: eolivelli <eolivelli@gmail.com>
    
    Reviewers: Rithin Shetty <rithin@gmail.com>, Sijie Guo <sijie@apache.org>
    
    Closes #94 from eolivelli/BOOKKEEPER-987

            {noformat}
            ","17/Dec/16 01:40;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/94
","17/Dec/16 12:49;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1599 (See [https://builds.apache.org/job/bookkeeper-master/1599/])
BOOKKEEPER-987: BookKeeper build is broken due to the shade plugin (sijie: rev d2e82d4942be079cbfdb179e9a3fe3e574beff8d)
* (edit) bookkeeper-server/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix findbugs warnings after bumping to java 8,BOOKKEEPER-940,12988551,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,eolivelli,hustlmsp,hustlmsp,12/Jul/16 06:54,14/Jul/16 23:23,13/Mar/19 22:16,14/Jul/16 21:03,4.5.0,,4.5.0,,,,,0,,"after bumping to java 8, the ci jobs fail with findbugs warnings. we'd need to fix all the findbugs warnings.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-13 08:42:50.721,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 14 23:23:53 UTC 2016,,,,,,0|i30u0v:,9223372036854775807,,,,,,,,"13/Jul/16 08:42;eolivelli;I can take a look, can I assign the issue to myself ?","13/Jul/16 15:57;mmerli;Thanks Enrico, I'm assigning this to you.","14/Jul/16 09:58;eolivelli;The fix is quite simple, but I have only one doubt, in BookKeeperAdmin:LedgerEntriesIterator
old code is
{code}
@Override
        public LedgerEntry next() {            
            ++nextEntryId;
            LedgerEntry entry = currentEntry;
            currentEntry = null;
            return entry;
        }
{code}

my proposal is

{code}
@Override
        public LedgerEntry next() {
            if (lastEntryId > -1 && nextEntryId > lastEntryId) {
                throw new NoSuchElementException();
            }
            ++nextEntryId;
            LedgerEntry entry = currentEntry;
            currentEntry = null;
            return entry;
        }
{code}

FindBugs complaints that a call to ""next()"" will never throw NoSuchElementException.
The logic of this iterator is not very clear to me in case of lastEntryId = -1

The proposed fix adds the throw statement for a sure NoSuchElementException case, but leaves uncovered the lastEntryId = -1 case.","14/Jul/16 10:41;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/55

    BOOKKEEPER-940 Fix findbugs warnings after bumping to java 8

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper BOOKKEEPER-940

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/55.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #55
    
----
commit 5780c542dad3295c1b107e97ba994df69c65429b
Author: eolivelli <eolivelli@gmail.com>
Date:   2016-07-14T10:40:01Z

    BOOKKEEPER-940 Fix findbugs warnings after bumping to java 8

----
","14/Jul/16 18:43;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/55
  
    👍  Looks good. There is one test failing, not sure whether it's spurious or related with this PR : 

","14/Jul/16 19:06;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/55
  
    LGTM +1
","14/Jul/16 21:03;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/55
","14/Jul/16 21:03;mmerli;Issue resolved by merging pull request 55
            [https://github.com/apache/bookkeeper/pull/55]

            {noformat}
            commit 2f71beb5e4b06691d4fd6c2601b78632236b3533
Author:     eolivelli <eolivelli@gmail.com>
AuthorDate: Thu Jul 14 14:02:33 2016 -0700
Commit:     Matteo Merli <mmerli@apache.org>
CommitDate: Thu Jul 14 14:02:33 2016 -0700

    BOOKKEEPER-940: Fix findbugs warnings after bumping to java 8
    
    Author: eolivelli <eolivelli@gmail.com>
    
    Reviewers: Matteo Merli <mmerli@apache.org>, Sijie Guo <sijie@apache.org>
    
    Closes #55 from eolivelli/BOOKKEEPER-940

            {noformat}
            ","14/Jul/16 21:27;hudson;SUCCESS: Integrated in bookkeeper-master #1442 (See [https://builds.apache.org/job/bookkeeper-master/1442/])
BOOKKEEPER-940: Fix findbugs warnings after bumping to java 8 (mmerli: rev 2f71beb5e4b06691d4fd6c2601b78632236b3533)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java
* bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java
* bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
",14/Jul/16 23:23;hustlmsp;[~eolivelli] good job! the build is back to normal now. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookkeeper script should fall back to java in path if JAVA_HOME is not set,BOOKKEEPER-765,12718191,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,03/Jun/14 16:23,10/Jun/14 10:46,13/Mar/19 22:16,10/Jun/14 10:04,,,4.2.3,4.3.0,bookkeeper-server,,,0,,"The current behaviour requires JAVA_HOME to be set, which isn't set by default on all machines. So machines on which bookkeeper ran fine, no longer work.

Solution is to fallback to java in path is JAVA_HOME not set.",,,,,,,,,,,,,,,,10/Jun/14 09:30;ikelly;0001-BOOKKEEPER-765-bookkeeper-script-should-fall-b.trunk.patch;https://issues.apache.org/jira/secure/attachment/12649556/0001-BOOKKEEPER-765-bookkeeper-script-should-fall-b.trunk.patch,04/Jun/14 12:36;ikelly;0001-BOOKKEEPER-765-bookkeeper-script-should-fall-b.trunk.patch;https://issues.apache.org/jira/secure/attachment/12648323/0001-BOOKKEEPER-765-bookkeeper-script-should-fall-b.trunk.patch,10/Jun/14 09:30;ikelly;0001-BOOKKEEPER-765-bookkeeper-script-should-fall-bac.b42.patch;https://issues.apache.org/jira/secure/attachment/12649555/0001-BOOKKEEPER-765-bookkeeper-script-should-fall-bac.b42.patch,03/Jun/14 16:37;ikelly;0001-BOOKKEEPER-765-bookkeeper-script-should-fall-back-to.patch;https://issues.apache.org/jira/secure/attachment/12648187/0001-BOOKKEEPER-765-bookkeeper-script-should-fall-back-to.patch,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2014-06-03 19:09:19.877,,,no_permission,,,,,,,,,,,,,396393,,,Tue Jun 10 10:46:25 UTC 2014,,,,,,0|i1w8u7:,396515,,,,,,,,"03/Jun/14 16:37;ikelly;Falls back to PATH if JAVA_HOME not set. I also moved the java check to after the sourcing of bkenv.sh so that JAVA_HOME can be set there if needed.

Did same for hedwig.","03/Jun/14 19:09;hadoopqa;Testing JIRA BOOKKEEPER-765


Patch [0001-BOOKKEEPER-765-bookkeeper-script-should-fall-back-to.patch|https://issues.apache.org/jira/secure/attachment/12648187/0001-BOOKKEEPER-765-bookkeeper-script-should-fall-back-to.patch] downloaded at Tue Jun  3 19:04:51 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","04/Jun/14 14:52;hadoopqa;Testing JIRA BOOKKEEPER-765


Patch [0001-BOOKKEEPER-765-bookkeeper-script-should-fall-b.trunk.patch|https://issues.apache.org/jira/secure/attachment/12648323/0001-BOOKKEEPER-765-bookkeeper-script-should-fall-b.trunk.patch] downloaded at Wed Jun  4 14:16:04 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 920
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/652/","05/Jun/14 11:09;fpj;I'm wondering if falling back to ""which java"" could cause any problem. In this machine at least, ""which java"" points to the java executable in /usr/bin but not the real java home. Just to confirm, is the java executable all we need?",05/Jun/14 11:50;ikelly;all we need is the java executable. That's all we were using until we made the previous change to allow JAVA_HOME. JAVA_HOME is only really useful if you have multiple java installs.,"06/Jun/14 13:23;rakeshr;bq.all we need is the java executable
JAVA_HOME checks added as part of BOOKKEEPER-712. I agree this fix will at least make my server run. But I've one doubt, assume user by mistake not set JAVA_HOME and starting with 'which version'. Will this creates problem like, my server started with older version and later point of time unfortunately when tries to execute few statements(which needs higher version) the process can crash or unresponsive ?. Previously user would get err messages during start up itself.",06/Jun/14 13:34;fpj;Until we reach agreement.,"10/Jun/14 08:59;ikelly;bq. Will this creates problem like, my server started with older version and later point of time unfortunately when tries to execute few statements(which needs higher version) the process can crash or unresponsive ?.

This won't happen. I assume you're talking about the bytecodes in the jvm version? We explicitly tell it to generate 1.6 version byte code. This will not run on anything below 1.6. Anything above will run it exactly the same.","10/Jun/14 09:16;rakeshr;OK cool.

Just one comment. Please include which java going to use in echo message.
{code}
echo ""JAVA_HOME not set, using java from PATH $JAVA""
{code}",10/Jun/14 09:30;ikelly;Added echo of java used when JAVA_HOME not set. [~rakeshr] this ready to go now?,"10/Jun/14 09:44;rakeshr;Thanks [~ivank@yahoo-inc.com]. 
Please modify ""hedwig-server/bin/hedwig"" for the above comment. Apart from this +1 from me","10/Jun/14 10:04;ikelly;Committed r1601592 to trunk.
Committed revision 1601593 to branch-4.2.

Thanks for the reviews guys.","10/Jun/14 10:46;hudson;SUCCESS: Integrated in bookkeeper-trunk #666 (See [https://builds.apache.org/job/bookkeeper-trunk/666/])
BOOKKEEPER-765 bookkeeper script should fall back to java in path if JAVA_HOME is not set (ivank) (ivank: rev 1601592)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bkenv.sh
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig
* /zookeeper/bookkeeper/trunk/hedwig-server/conf/hwenv.sh
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenLedgerNoRecovery should watch ensemble change.,BOOKKEEPER-710,12680862,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,23/Nov/13 06:22,11/Apr/14 23:35,13/Mar/19 22:16,11/Apr/14 23:35,,,4.2.3,4.3.0,bookkeeper-client,,,0,,"LedgerHandle opened by openLedgerNoRecovery should watch ensemble change. otherwise, readLastConfirmed & readEntries will stuck if there are ensemble changes in the ledger.",,,,,,,,,,,,,,,,02/Apr/14 13:34;ikelly;0001-BOOKKEEPER-710-OpenLedgerNoRecovery-should-watch-ens.patch;https://issues.apache.org/jira/secure/attachment/12638255/0001-BOOKKEEPER-710-OpenLedgerNoRecovery-should-watch-ens.patch,09/Dec/13 07:48;hustlmsp;BOOKKEEPER-710.diff;https://issues.apache.org/jira/secure/attachment/12617793/BOOKKEEPER-710.diff,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-12-02 16:43:07.835,,,no_permission,,,,,,,,,,,,,360127,,,Fri Apr 11 23:35:29 UTC 2014,,,,,,0|i1q2xj:,360426,,,,,,,,02/Dec/13 16:43;ikelly;Would I be correct in thinking that this fix is working in the direction of eventually having a efficient tailing mechanism for bookkeeper without polling?,"03/Dec/13 18:44;hustlmsp;this change is fixing the correctness issue for polling. and yes, we are working on several changes to improve polling, e.g. piggyback lac when reading entries, long-polling for reading lac.","09/Dec/13 08:58;hadoopqa;Testing JIRA BOOKKEEPER-710


Patch [BOOKKEEPER-710.diff|https://issues.apache.org/jira/secure/attachment/12617793/BOOKKEEPER-710.diff] downloaded at Mon Dec  9 08:29:51 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 886
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/550/","15/Jan/14 11:40;ikelly;How do you communicate the change in LAC to the client. The client will be still be polling by calling readLastAddConfirmed, no?","15/Jan/14 18:24;hustlmsp;[~ikelly] this jira is to fix the correctness of readLastAddConfirmed, not about the change in LAC.

in general, an application that uses OpenLedgerNoRecovery would do follow logic:

{code}
long readEntry = xx;
lh.readEntries(readEntry, readEntry);
++readEntry;
if (readEntry > lh.getLastAddConfirmed()) {
  lh.readLastAddConfirmed();
}
{code}

we have a change to piggyback LAC on read response (lh.readEntries), which would update the client's LAC, which reduce polling LAC. it is useful for a high volume ledger. but this change is unrelated to this jira, which is a performance improvement (requires moving wire protocol to protobuf first).","16/Jan/14 16:37;ikelly;I've been thinking about this very scenario lately, and really, I think readLastAddConfirmed is just a broken api. The correct thing to do here would be to do an openNoRecovery() in the loop. This will only involve metadata reads from ZK/metastore, and these should be very fast, given they're going to memory. Have you stats on how many watches zookeeper can sustain?","16/Jan/14 16:51;hustlmsp;{quote}
The correct thing to do here would be to do an openNoRecovery() in the loop. This will only involve metadata reads from ZK/metastore, and these should be very fast, given they're going to memory.
{quote}

you could implement this polling mechanism in ledger manager (for metastore that doesn't support watcher/notification) to satisfy the listener interface in the patch. that's ok.

but for metastore like zookeeper, they already provide watcher, which we could leverage to reduce polling traffic to zookeeper. since ensemble change only happens during bookie node failures, e.g rolling restart, which is a very rare in most of case. it is not good to introduce too much traffic to zookeeper.

{quote}
Have you stats on how many watches zookeeper can sustain?
{quote}

no. we don't have this number. I assumed that it depends on the memory of zookeeper. [~fpj] might have idea on how many watches zookeeper can sustain.
","17/Jan/14 17:16;ikelly;Committed r1559192.
I'd like to get rid of polling completely, but this would involve a separate daemon, like hedwig did, but without all the other features. I have the beginnings of a project on this here, will publish more when it's more concrete.","17/Jan/14 17:42;hudson;SUCCESS: Integrated in bookkeeper-trunk #512 (See [https://builds.apache.org/job/bookkeeper-trunk/512/])
BOOKKEEPER-710: OpenLedgerNoRecovery should watch ensemble change. (sijie via ivank) (ivank: rev 1559192)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java
","12/Mar/14 15:00;ikelly;[~hustlmsp] [~rakeshr] Did one of you mark this for 4.2.3? This is a new feature, so it doesn't really fit imo.",12/Mar/14 17:12;hustlmsp;[~ikelly] I marked this for 4.2.3 when I created the ticket. this is a bug fix not a new feature. we should get it in 4.2.3. but I have no idea why it is on reopened state.,"12/Mar/14 17:29;ikelly;I reopened, to mark it as non-resolved for 4.2.3. I think everything else in 4.2.3 has been put in the 4.2 branch
","12/Mar/14 17:37;rakeshr;[~hustlmsp] since its not merged into 4.2.3 branch, so its better to be in open state until we finish the changes and this will remind us. I also feel, it can go into 4.2.3 as well.",12/Mar/14 17:45;hustlmsp;[~rakeshr] I know that. I just say I don't who reopen it. ,02/Apr/14 13:34;ikelly;rebased onto branch-4.2,"02/Apr/14 13:42;hadoopqa;Testing JIRA BOOKKEEPER-710


Patch [0001-BOOKKEEPER-710-OpenLedgerNoRecovery-should-watch-ens.patch|https://issues.apache.org/jira/secure/attachment/12638255/0001-BOOKKEEPER-710-OpenLedgerNoRecovery-should-watch-ens.patch] downloaded at Wed Apr  2 13:41:14 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","02/Apr/14 13:51;ikelly;qa fails since the patch is on branch-4.2
","03/Apr/14 16:01;fpj;bq.  I think readLastAddConfirmed is just a broken api

I've just noticed some of the comments here, in particular this one. Is there a jira for this or this just a rant?

bq. might have idea on how many watches zookeeper can sustain.

It is mainly memory, but triggering many watches at a time also causes a burst of notifications. I can't think of anything else right now.

I was also wondering if there is a jira for these todos:

{noformat}
// TODO: should provide ledger metadata listener in metadata store.
{noformat}

Also, do we really have to wait 5 seconds in the test to make sure that the call doesn't get stuck?

{noformat}
TimeUnit.SECONDS.sleep(5);
{noformat}","04/Apr/14 17:06;ikelly;{quote}
bq. I think readLastAddConfirmed is just a broken api
I've just noticed some of the comments here, in particular this one. Is there a jira for this or this just a rant?
{quote}
Currently no jira, but we're looking at ways to remove the need to poll. Will create a jira when's it has solidified a bit.","11/Apr/14 08:35;fpj;About the question on watches, I knew I had looked into it, but I couldn't remember where the discussion. In Chapter 4 of the ZK book, there is a discussion about the scalability of watches. Each new watch consumes around 300 bytes on the server, so again watches induce memory utilization on the server and possibly bursts of traffic depending on the number of notifications triggered. One way to spread watches across servers is to use observers
","11/Apr/14 23:35;fpj;+1, Committed revision 1586799. (branch 4.2)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shade pom file missing apache license header,BOOKKEEPER-730,12693517,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,hustlmsp,hustlmsp,06/Feb/14 08:37,07/Mar/14 18:06,13/Mar/19 22:16,07/Mar/14 18:06,,,4.2.3,4.3.0,,,,0,build,Shade plugin doesn't generate pom file with apache license header.,,,,,,,,,,,,BOOKKEEPER-724,,,,06/Mar/14 12:18;ikelly;0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch;https://issues.apache.org/jira/secure/attachment/12633109/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch,21/Feb/14 10:29;ikelly;0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch;https://issues.apache.org/jira/secure/attachment/12630284/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch,20/Feb/14 17:57;ikelly;0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch;https://issues.apache.org/jira/secure/attachment/12630102/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch,17/Feb/14 18:54;ikelly;0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch;https://issues.apache.org/jira/secure/attachment/12629416/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2014-02-14 21:39:22.871,,,no_permission,,,,,,,,,,,,,372102,,,Fri Mar 07 18:06:24 UTC 2014,,,,,,0|i1s4m7:,372407,,,,,,,,"14/Feb/14 21:39;fpj;I have created this issue:

https://jira.codehaus.org/browse/MSHADE-164","17/Feb/14 18:54;ikelly;Patch adds license to pom after it's generated using license-maven-plugin. Annoyingly it converts \n to \r\n, but i can't find a way to change that. Doesn't affect the correctness of the file anyhow.","17/Feb/14 19:29;hadoopqa;Testing JIRA BOOKKEEPER-730


Patch [0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch|https://issues.apache.org/jira/secure/attachment/12629416/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch] downloaded at Mon Feb 17 19:01:14 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/589/",18/Feb/14 02:27;hustlmsp;lgtm. +1,"18/Feb/14 05:26;rakeshr;Nice idea and thanks for the patch [~ikelly]. 
Just few comments. Apart from these +1.
- wrong indent in pom.xml
{code}
+	  <roots><root>.</root></roots>
{code}
- Can we revert the changes done in BOOKKEEPER-724 ?","18/Feb/14 10:23;fpj;It works for me, I checked it locally and I don't have anything in addition to what [~rakeshr] has already pointed out.",20/Feb/14 17:57;ikelly;New patch addresses the indent issue.,20/Feb/14 17:57;ikelly;Also it reverts the rat exclude,"20/Feb/14 18:29;hadoopqa;Testing JIRA BOOKKEEPER-730


Patch [0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch|https://issues.apache.org/jira/secure/attachment/12630102/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch] downloaded at Thu Feb 20 18:01:30 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/590/","20/Feb/14 18:53;rakeshr;Hi Ivan,

I just looked at the console logs, it seems RAT analysis has done before adding the license ?
{code}
[ERROR] Failed to execute goal org.apache.rat:apache-rat-plugin:0.7:check (default-cli) on project bookkeeper-server: Too many unapproved licenses: 1 -> [Help 1]

[INFO] --- license-maven-plugin:1.6:update-file-header (update-pom-license) @ bookkeeper-server ---
[INFO] Will search files to update from root /home/jenkins/jenkins-slave/workspace/bookkeeper-trunk-precommit-build/bookkeeper-server/.
[INFO]  - adding license header on file /home/jenkins/jenkins-slave/workspace/bookkeeper-trunk-precommit-build/bookkeeper-server/./dependency-reduced-pom.xml
[INFO] Scan 1 file header done in 21.047ms.
{code}","21/Feb/14 10:17;ikelly;Hmm, it seems to be picking up a dependency-reduced-pom.xml from a previous build. Rat runs before any compilation, so it shouldn't actually even be there at that point. I'll attach a new patch to fix it.","21/Feb/14 10:29;ikelly;New patch cleans up the dep reduced pom on mvn clean. Now, this isn't going to work the first time it goes through jenkins, because the clean phase runs before the patch has been applied. It will work subsequent times though. Generating the pom without the license should be impossible now, as the shading and license writing happen in the same maven phase (package).","21/Feb/14 10:59;hadoopqa;Testing JIRA BOOKKEEPER-730


Patch [0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch|https://issues.apache.org/jira/secure/attachment/12630284/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch] downloaded at Fri Feb 21 10:31:33 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/591/","03/Mar/14 05:35;rakeshr;{code}
Applying patch

patching file bookkeeper-server/pom.xml
patching file pom.xml

Patch applied

Post patch
  Running test-patch task CLEAN
  Running test-patch task RAW_PATCH_ANALYSIS
  Running test-patch task RAT
{code}

Immediately after applying the patch, its performing the RAT analysis and is failing. I could see it is properly adding the license header to the file, but only during the compilation phase and is too late for us. Instead can we move the RAT analysis task after the compilation phase ?",06/Mar/14 12:18;ikelly;It seems the clean op for post patching wasn't actually cleaning. Added this now. All should run cleanly.,"06/Mar/14 13:45;hadoopqa;Testing JIRA BOOKKEEPER-730


Patch [0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch|https://issues.apache.org/jira/secure/attachment/12633109/0001-BOOKKEEPER-730-Shade-pom-file-missing-apache-license.patch] downloaded at Thu Mar  6 13:16:50 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 902
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAutoRecoverySessionLoss(org.apache.bookkeeper.replication.AutoRecoveryMainTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/595/","07/Mar/14 11:58;rakeshr;+1 lgtm. Thanks Ivan for the patch.

Test failure is not related to this, I have raised BOOKKEEPER-740 to see it separately.",07/Mar/14 12:34;ikelly;Committed r1575247. Thanks for the discussion guys. I'll generate a 4.2 patch later today.,"07/Mar/14 13:15;hudson;SUCCESS: Integrated in bookkeeper-trunk #574 (See [https://builds.apache.org/job/bookkeeper-trunk/574/])
BOOKKEEPER-730: Shade pom file missing apache license header (ivank) (ivank: rev 1575247)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bin/test-patch-00-clean
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/pom.xml
",07/Mar/14 18:06;ikelly;committed to branch-4.2 as r1575347,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Two bookies could start at the same time to access bookie data.,BOOKKEEPER-638,12655253,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,28/Jun/13 01:34,11/Oct/13 14:57,13/Mar/19 22:16,11/Oct/13 14:19,4.3.0,,4.3.0,,bookkeeper-server,,,0,,"this issue is introduced in providing netty server for bookie.

in BOOKKEEPER-294, we agreed on the start sequence of bookie:

1) bind bookie port first (to avoid two processes running at the same host).
2) start bookie (e.g initialize bookie storage and replaying journals)
3) start nio server to accept incoming requests.

but after refactoring for netty server, step 1) is combined to be executed in step 3), so two processes could have chance to run at the same time replaying journals. this is pretty bad.

we need to change the code to stick on the sequence described above.",,,,,,,,,,,,,,,,06/Jul/13 22:03;hustlmsp;BOOKKEEPER-638.diff;https://issues.apache.org/jira/secure/attachment/12591096/BOOKKEEPER-638.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-06 22:37:51.707,,,no_permission,,,,,,,,,,,,,335530,,,Fri Oct 11 14:57:58 UTC 2013,,,,,,0|i1lvl3:,335854,,,,,,,,06/Jul/13 22:03;hustlmsp;a patch following the sequence as described in Description section.,"06/Jul/13 22:37;hadoopqa;Testing JIRA BOOKKEEPER-638


Patch [BOOKKEEPER-638.diff|https://issues.apache.org/jira/secure/attachment/12591096/BOOKKEEPER-638.diff] downloaded at Sat Jul  6 22:11:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/411/","07/Aug/13 08:39;fpj;Good catch, Sijie, +1.","10/Oct/13 16:06;ikelly;With the new sequence, it's possible a bookie could register with zk, a client sees it, tries to use it, and hit the RejectedRequestHandler. Its seems a bit strange. Couldn't we set the listening socket as unreadable, and then set it as readable when start is called, like what happens in suspendProcessing and resumeProcessing().","10/Oct/13 17:35;hustlmsp;>  a bookie could register with zk, 

a bookie only register itself after bookie is started. so in general, no write requests would be sent during startup.

> a client sees it, tries to use it, and hit the RejectedRequestHandler. 

This is exactly what the patch tends to do. If a bookie is not ready (can't serving any request), we should fail any read/write request fast. A client can't be aware of a channel is turning to readable in server side, so it has to wait for timeout and retry other bookie, which introduce latency impact.","11/Oct/13 13:34;ikelly;Hmm, ok. The behaviour that would match 4.2 behaviour is to block until started, but I guess failing fast is better.

+1 on the patch. Pushing in.",11/Oct/13 14:19;ikelly;Committed r1531302. Thanks Sijie.,"11/Oct/13 14:57;hudson;SUCCESS: Integrated in bookkeeper-trunk #394 (See [https://builds.apache.org/job/bookkeeper-trunk/394/])
BOOKKEEPER-638: Two bookies could start at the same time to access bookie data. (sijie via ivank) (ivank: rev 1531302)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race in compaction algorithm from BOOKKEEPER-664,BOOKKEEPER-685,12668539,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,13/Sep/13 19:15,02/Oct/13 09:53,13/Mar/19 22:16,02/Oct/13 09:53,,,4.2.2,,,,,0,,"I discovered a race in the algorithm when I was forward porting to trunk.

1) Thread1: flushed.set(false)
2) Thread2: onRotateEntryLog() // flushed.set(true)
3) Thread1: entryLogger addEntry L123-E456
4) Thread1: offsets > max, waits for flushed, flushed is true(as set in 2), L123-E456 updated in ledger cache
5) T2: L123 flushed out of ledger cache
6) Crash

This will possible lose 1 entry. I've only reasoned this, not observed it, but it can happen.

The fix is pretty easy. EntryLoggerListener should notify with the point offset in the entry log it has synced as far as. 
      
",,,,,,,,,,,,,,,,26/Sep/13 17:44;ikelly;0001-BOOKKEEPER-685-Race-in-compaction-algorithm-from-BOO.patch;https://issues.apache.org/jira/secure/attachment/12605290/0001-BOOKKEEPER-685-Race-in-compaction-algorithm-from-BOO.patch,02/Oct/13 05:26;hustlmsp;BOOKKEEPER-685.patch;https://issues.apache.org/jira/secure/attachment/12606259/BOOKKEEPER-685.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-09-14 02:10:30.486,,,no_permission,,,,,,,,,,,,,348473,,,Wed Oct 02 09:53:02 UTC 2013,,,,,,0|i1o35r:,348770,,,,,,,,"14/Sep/13 02:10;hustlmsp;the problem here is you set flush to false ahead of adding entry to entry logger. the better way is to set flushed to false after you add something to entry logger, no?

I don't want to notify the offset until we really need it.","16/Sep/13 09:05;ikelly;{quote}the problem here is you set flush to false ahead of adding entry to entry logger. the better way is to set flushed to false after you add something to entry logger, no?{quote}
This should work, though there could be a problem if onRotateEntryLog runs between the add and the set flushed, and then nothing more is added to the bookie. The compaction would hang until something in added to the bookie. This is a minor problem though. If the load is so low that compaction is hanging, then compaction isn't really necessary.

Out of interest, why don't you want to notify the offset? I discovered this problem when I was looking at forward porting BOOKKEEPER-664 to trunk. As we don't flush before rotating in trunk, EntrylogListener needs a new call for onEntryLogFlush() so that we can ensure the entry has hit disk before updating the offset. I was thinking of perhaps using the offset as a parameter in #onEntryLogFlush() so that I can see how many offsets I can flush.","17/Sep/13 00:01;hustlmsp;{quote}
Out of interest, why don't you want to notify the offset? 
{quote}

notifying offset doesn't help. the core part of EntryLogListener#onRotateEntryLog is that bookie should not checkpoint/flush current entry log. notifying offset doesn't (and should not) change this behavior, so GC thread still needs to wait until entry logger rotated to next file then do flushing.

#onRotateEntryLog is not a good name for 4.2 branch. since in the 4.2 patch for BOOKKEEPER-664, onRotateEntryLog actually means entry logger file is flushed, so you don't need to call EntryLogger#flush in GCThread.

But in trunk, onRotateEntryLog just means that entry logger file is rotated, which doesn't mean that entry logger is flushed. so GCThread needs to call EntryLogger#checkpoint to flush the previous entry log files before flushing ledger cache. 

","17/Sep/13 09:26;ikelly;For 4.2 I was thinking of a solution like.
{code}
class EntryLogListener {
     void onRotateEntryLog();
     void onEntryLogFlush(int offset);
}
{code}

Then, when the scanner would implement only #onEntryLogFlush.

{code}
@Override
public void onEntryLogFlush(int flushedToOffset) {
    for (Offset o : offsets) {
        if (offset.getOffset() < offset) {
             toFlush.add(o);
        }
    }
    offsets.removeAll(toFlush);
    for (Offset o : toFlush) {
        ledgerCache.putEntryOffset(...);
    }
}
{code}
Or the work could be done in other thread after setting a shared flushedToOffset var. But in any case, this is how I was planning to use the offset. Trunk can just use #checkpoint as you said. This interface is as internals as they get in any case. It's not like we need to maintain any compatibility between branches on it.","17/Sep/13 17:36;hustlmsp;I can image how you use offset, but I still don't understand the benefits of using offset.

for example, suppose GCThread is compacting entry log file X, which adding N entries in entry log file Y and adding M entries in entry log file (Y+1). the only benefit is that you could flush N entries using offset when entry logger rotated from Y to Y+1. *but, you still could not flush M entries until entry logger rotated from Y+1 to Y+2, which means you also could not delete entry log file X at this point, right?* so if bookie crashed at this point, bookie will still need to compact entry log file X again, both N and M entries. the new flushed N entries don't help anything.

from the compaction perspective, I didn't see any difference between using offset and just setting flushed after adding entry. so why not keep the solution simpler and also keep solution consistent crossing 4.2.2 and 4.3.0? 

I don't have strong preferences. you could use offset in 4.2.2 if you want.  

","24/Sep/13 09:47;rakeshr;Thanks [~ikelly] for the finding. If I understood the problem statement, its the race between SyncThread flushing and the compaction logic.

bq.the problem here is you set flush to false ahead of adding entry to entry logger. the better way is to set flushed to false after you add something to entry logger, no?

[~hustlmsp], thanks for the simple proposal. In the approach, I could see one possible race condition, here #onRotateEntryLog can override 'flushed' to true, which was modified to false immediately after #addEntry. Could you please see the below execution sequence. If agree, just changing the flushed=false sequence would not really help us no?

Th1 : addEntry
Th2 : onRotateEntryLog
Th1 : setFlushed=false
Th2 : setFlushed=true
Th1: offsets > max, waits for flushed, as flushed is true, will update in ledger cache
Th2 : flushed out","24/Sep/13 20:10;hustlmsp;[~rakeshr] 

{quote}
#onRotateEntryLog is not a good name for 4.2 branch. since in the 4.2 patch for BOOKKEEPER-664, onRotateEntryLog actually means entry logger file is flushed,
{quote}

as my previous comment, your case will never happen. in 4.2 branch, if addEntry happened after #onRotateEntryLog, GCThread will setFlushed to false again; if addEntry happened before #onRotateEntryLog, this entry is already flushed.","25/Sep/13 08:54;rakeshr;I'm looking at the below code, where scannerFactory is also flushing the ledgerCache. In worst case, when the compaction thread finishes compaction and now if it sees flushed=true, then will flush out the ledgercache. Followed an immediate bookie crash can leads to trouble. Hope I'm not confusing you guys.
{code}
GarbageCollectorThread#doCompactEntryLogs(){
            //....
            compactEntryLog(scannerFactory, meta);
             //....

            // compaction finished, flush any outstanding offsets
            scannerFactory.flush();
             //...
}
{code}","25/Sep/13 19:11;hustlmsp;[~rakeshr] could you clarify it when you are saying it leads to trouble?

the only thing I could see is that it would flush index entries whose entries are not flushed to entry logger. but it doesn't matter, most of the time that journal would resecure them and even the corner case is handled by BOOKKEEPER-447.","25/Sep/13 20:19;rakeshr;Thanks Sijie for the reply.

bq.could you clarify it when you are saying it leads to trouble?
[~hustlmsp] as per my previous comments, I was thinking, just interchanging of #addEntry and flushed.set(false) sequence won't actually solve the issue. It can still enter into the execution flow of flush the ledger cache entries which are not yet flushed to the entry logger.

{quote}
the only thing I could see is that it would flush index entries whose entries are not flushed to entry logger. {quote}
BTW Ivan's problem statement is also saying about this case I guess. please correct me if am wrong:(
Is this already handled by BOOKKEEPER-447?

{quote}
but it doesn't matter, most of the time that journal would resecure them and even the corner case is handled by BOOKKEEPER-447.
{quote}
I didn't fully gone through the comments on BOOKKEEPER-447, as it has large discussion thread. By initial look at the patch, I'm seeing only it handles NoSuchEntryException and not recovering entries from Journal. I'll go through and try understanding the background.","26/Sep/13 01:56;hustlmsp;{quote}
as per my previous comments, I was thinking, just interchanging of #addEntry and flushed.set(false) sequence won't actually solve the issue. It can still enter into the execution flow of flush the ledger cache entries which are not yet flushed to the entry logger.
{quote}

I don't mean to discourage discussion. but when you are saying ""it leads trouble"", could you explain what kind of steps that would cause this issue and what is the effect? otherwise, it is unclear for people about what you are saying.

{quote}
BOOKKEEPER-447
{quote}

first of all, I shouldn't mention BOOKKEEPER-447 in this thread, since it is totally a different topic. but as you were raising an unclear question, I have to raise it as a background reference for all the corner cases I know.

in order to make it clear for anyone who wants to join this discussion, please make sure you understand the background first.

1) this jira is about the data loss during compaction, which is moving entries from one entry logger to the other entry logger. Those entries are not protected by journal, so GCThread needs to do compaction in following sequence to guarantee no data loss: a) adding entries to entry logger; b) add index entries to ledger cache; c) remove old entry log file only after the data added by a) & b) is flushed. And setFlushed after addEntry is to guarantee this sequence. (if you don't think it works, please provide the sequence to convince me.)

2) the normal add entries are already protected by journal, so there is no data loss in that pipeline. 

3) the case in BOOKKEEPER-447 is an irrelative issue to 1) & 2), which an index entry is flushed before its journal entry flushed. It is an issue of invalid adds not data loss, which happens in normal add flow (e.g. a ledger is evicting from ledger cache and forced to write back to disk).

","26/Sep/13 03:26;rakeshr;Thanks [~hustlmsp] for the detailed explanation.

bq.could you clarify it when you are saying it leads to trouble?

Could you please see the following execution sequence:

Th1 - compaction thread
Th2 - SyncThread

1) Th1: addEntry and sets flushed.set(false); // Consider that added entry is the 'last entry' of the last ledger participated in compaction. After this, compaction would move to flush.
2) Th2: onRotateEntryLog and sets flushed.set(true);
3) Th1: scannerFactory.flush(); // since it sees flushed==true, it will iterate over the offsets and flush out
4) Th1: removeEntryLog
5) server crashed

In the above sequence, I could see a possible loss of 'last entry' which is not flushed into the entry logger. Any thoughts?

CompactionScannerFactory.java
{code}
        try {
            // compaction finished, flush any outstanding offsets
            scannerFactory.flush();
        } catch (IOException ioe) {
            LOG.error(""Cannot flush compacted entries, skip removal"", ioe);
            return;
        }

        // offsets have been flushed, its now safe to remove the old entrylogs
        for (Long l : toRemove) {
            removeEntryLog(l);
        }
{code}","26/Sep/13 03:49;hustlmsp;{code}
Th1 - compaction thread
Th2 - SyncThread

1) Th1: addEntry and sets flushed.set(false); // Consider that added entry is the 'last entry' of the last ledger participated in compaction. After this, compaction would move to flush.
2) Th2: onRotateEntryLog and sets flushed.set(true);
3) Th1: scannerFactory.flush(); // since it sees flushed==true, it will iterate over the offsets and flush out
4) Th1: removeEntryLog
5) server crashed

In the above sequence, I could see a possible loss of 'last entry' which is not flushed into the entry logger. Any thoughts?
{code}

first to clarify, th2 could never be SyncThread.

in step2, when entry logger roate entry log, it already flushed previous entry log, which means the entry added by th1 is flushed. I don't see how it would loss the last entry. And again, I already explained your case in my previous comment (right after your first question).

{quote}
in 4.2 branch, if addEntry happened after #onRotateEntryLog, GCThread will setFlushed to false again; if addEntry happened before #onRotateEntryLog, this entry is already flushed.
{quote}","26/Sep/13 06:31;rakeshr;[~hustlmsp] thats great!. I think, I got the concept of 'onRotateEntryLog' in 4.2.2 branch. Thanks again for helping out and knowledge sharing.

+1 for your idea of 'set flushed to false after add something to entry logger'. Now I also feel its simple approach and would work in 4.2.2 branch.


","26/Sep/13 14:33;ikelly;[~rakeshr] The case you describe is pretty much the case in the JIRA description. 1 single entry can be lost in the scenario.

[~hustlmsp] set to false after flush will work. It will also create the possibility that the gc thread hangs it onRotateEntryLog sets flushed to true, between the addEntry and the setFalse, assuming no more entries are added. This is not a big problem, as there should be more entries added. There's a very very small case that the universe could conspire to make it so that we cannot add more entries to the entrylog without gc getting rid of a different entrylog, and if gc is waiting on a flush that never happens we have a deadlock.

{quote}
for example, suppose GCThread is compacting entry log file X, which adding N entries in entry log file Y and adding M entries in entry log file (Y+1). the only benefit is that you could flush N entries using offset when entry logger rotated from Y to Y+1. but, you still could not flush M entries until entry logger rotated from Y+1 to Y+2, which means you also could not delete entry log file X at this point, right? so if bookie crashed at this point, bookie will still need to compact entry log file X again, both N and M entries. the new flushed N entries don't help anything.{quote}
So, in 4.2.2, flushing is not tied to rotation to start with. Flushing occurs at a regular interval if there is data to be flushed. So if N+M entries have been added to the entrylog, the sync thread will eventually flush them. The case you describe wont happen, because if N+M entries have been added to logs Y & Y+1, the entrylog _will_ flush them. I think this will be clearer in code. I'll make a patch.",26/Sep/13 14:43;rakeshr;[~ikelly] its really a good catch and difficult to findout if it happens in production.,"26/Sep/13 17:18;hustlmsp;{quote}
we cannot add more entries to the entrylog without gc getting rid of a different entrylog, and if gc is waiting on a flush that never happens we have a deadlock.
{quote}

please clarify the sequence how it would introduce a deadlock. the normal add entries & flush flow will never wait for any gc activities. only gc is waiting for normal flush.","26/Sep/13 17:32;ikelly;Actually, it wouldn't deadlock now I think of it. The machine would go readonly. I was thinking of a scenario where the request handler thread would try to add while there's no disk space, and the gc thread could be trying to collect a log file, but stalled while waiting for something to be added to the entrylog so that flush would occur again. However, this would only cause the server to error the client request and go into readonly mode, which is fine.",26/Sep/13 17:45;ikelly;I realized the stall with the ordering change can easily be fixed just by checking isFlushRequired on EntryLogger. Attached patch to do same.,"26/Sep/13 17:54;hadoopqa;Testing JIRA BOOKKEEPER-685


Patch [0001-BOOKKEEPER-685-Race-in-compaction-algorithm-from-BOO.patch|https://issues.apache.org/jira/secure/attachment/12605290/0001-BOOKKEEPER-685-Race-in-compaction-algorithm-from-BOO.patch] downloaded at Thu Sep 26 17:51:27 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",27/Sep/13 01:29;hustlmsp;+1 for the patch.,"27/Sep/13 17:39;rakeshr;+1 patch looks fine. Just small suggestion, would be good to modify javadoc.
{code}
        /**
         * Rotate a new entry log to write.
         */
        public void onEntryLogFlushed();
{code}","02/Oct/13 05:26;hustlmsp;[~rakeshr] in general, this comment is good since this callback is only called when a new entry log is rotated. but as your suggestion, changed the comment, so we could move on 4.2.2 release.","02/Oct/13 05:50;hadoopqa;Testing JIRA BOOKKEEPER-685


Patch [BOOKKEEPER-685.patch|https://issues.apache.org/jira/secure/attachment/12606259/BOOKKEEPER-685.patch] downloaded at Wed Oct  2 05:48:38 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",02/Oct/13 09:53;ikelly;Committed revision 1528399.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled,BOOKKEEPER-667,12662046,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,vinayrpet,vinayrpet,06/Aug/13 06:29,13/Aug/13 13:11,13/Mar/19 22:16,13/Aug/13 13:02,4.2.1,,4.2.2,4.3.0,bookkeeper-auto-recovery,,,0,,"Scenario:
------------
1. Start cluster of enough bookies, say 4, with autorecovery
2. Create ledger and write some entries.
3. Restart one of the bookies
4. again, write some more entries
5. wait for some time.. till autorecovery completes replication of first segment
6. Now restart one of the bookie of latest ensemble
7. continue to write.

Here second ensemble change will fail, throwing BadMetadataVersion
",,,,,,,,,,,,BOOKKEEPER-112,,,,12/Aug/13 01:52;hustlmsp;BOOKKEEPER-667.diff;https://issues.apache.org/jira/secure/attachment/12597393/BOOKKEEPER-667.diff,07/Aug/13 06:26;hustlmsp;BOOKKEEPER-667.diff;https://issues.apache.org/jira/secure/attachment/12596516/BOOKKEEPER-667.diff,07/Aug/13 05:39;vinayrpet;BOOKKEEPER-667.patch;https://issues.apache.org/jira/secure/attachment/12596507/BOOKKEEPER-667.patch,07/Aug/13 03:55;vinayrpet;MetatadaConflictTest.patch;https://issues.apache.org/jira/secure/attachment/12596500/MetatadaConflictTest.patch,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-08-06 17:33:40.147,,,no_permission,,,,,,,,,,,,,342050,,,Tue Aug 13 13:11:50 UTC 2013,,,,,,0|i1mznr:,342355,,,,,,,,06/Aug/13 06:34;vinayrpet;Adding a test to reproduce the issue.,06/Aug/13 17:33;hustlmsp;looks like you were attaching a testcase.,07/Aug/13 03:55;vinayrpet;OOPS..Sorry..  Here is the test case,"07/Aug/13 05:15;hustlmsp;this issue is same as BOOKKEEPER-112. but after several changes, the fix in BOOKKEEPER-112 (removing newEnsemble before resolving new metadata) was removed and also things have changed a bit.

but I think the fix would be easy but need more test cases to cover it. it should be easy to reproduce with manually recover not replying on auto-replication.","07/Aug/13 05:39;vinayrpet;Attaching patch, with updated test.","07/Aug/13 06:22;hustlmsp;your patch doesn't fix correctly, you just hide the metadata version exceptions. and as I commented previously, a test case using manual recover should reproduce this issue which not reply on automatic recovery.","07/Aug/13 06:26;hustlmsp;attach a test to fix this issue: when new metadata has one less ensemble that current metadata (the case the recovery tool modified ledger metadata at the same time that ensemble change kicks in). and we should use the ensembles in new metadata when resolving conflicts since it contains recovered bookie info.

the patch is just a draft to show how to fix this issue correctly. I would improve it with more test cases (not just the test case that Vinay attached) later.","07/Aug/13 09:42;hadoopqa;Testing JIRA BOOKKEEPER-667


Patch [BOOKKEEPER-667.diff|https://issues.apache.org/jira/secure/attachment/12596516/BOOKKEEPER-667.diff] downloaded at Wed Aug  7 09:15:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 2 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:green}+1 TESTS{color}
.    Tests run: 863
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/453/","12/Aug/13 01:52;hustlmsp;new patch with test case. this test case reproduce the issue with manually bookie recovery, and verify whether the ledger is fully replicated after ensemble changed.","12/Aug/13 16:18;ikelly;There's a possibility of a NoSuchElementException is #isConflictWith(), where the ensembles are different sizes (when calling keyIter.next()).

I'm wondering if it would be worth creating a EnsembleChange object, which is basically a tuple of [EntryId, IndexOfBookieToReplace, NewBookie]. Then when we get a MetadataConflict, we could reread the metadata, replace the current metadata with the newly read metadata (after all, what's in zk is the true configuration), and then reapply the EnsembleChange. I think this would be cleaner and safer than the current set of heuristics we use in resolveMetadata. 

Alternatively, we could leave out the NewBookie from the tuple, and choose a new bookie each time it reruns (would avoid putting the same bookie in the ensemble twice.","12/Aug/13 17:31;hustlmsp;{quote}
There's a possibility of a NoSuchElementException is #isConflictWith(), where the ensembles are different sizes (when calling keyIter.next()).
{quote}

How this would happen? size is checked before iterating if you read the code.

{quote}
I'm wondering if it would be worth creating a EnsembleChange object, which is basically a tuple of [EntryId, IndexOfBookieToReplace, NewBookie]. Then when we get a MetadataConflict, we could reread the metadata, replace the current metadata with the newly read metadata (after all, what's in zk is the true configuration), and then reapply the EnsembleChange. I think this would be cleaner and safer than the current set of heuristics we use in resolveMetadata.

Alternatively, we could leave out the NewBookie from the tuple, and choose a new bookie each time it reruns (would avoid putting the same bookie in the ensemble twice.
{quote}

I didn't think carefully about your proposal. but in general, as this bug is marked for both 4.2.2 and 4.3.0, I would expect a simple bug fixing than refactoring. if you want to refactor this part, then do it in a separated jira only for 4.3.0.

","13/Aug/13 10:57;ikelly;{quote}
How this would happen? size is checked before iterating if you read the code.
{quote}
I did the calculation backwards in my head. Looking again, it seems safe.

{quote}
I didn't think carefully about your proposal. but in general, as this bug is marked for both 4.2.2 and 4.3.0, I would expect a simple bug fixing than refactoring. if you want to refactor this part, then do it in a separated jira only for 4.3.0.
{quote}
I'll create a jira for this for 4.3.0. In general this patch is ok. I worry about the fact that so many special cases have been added to ledgermetadata resolution though. There seems to be something fundamentally dodgy with it. For 4.3.0 we should try to resolve this.",13/Aug/13 12:33;ikelly;Committed r1513459 in trunk.,13/Aug/13 13:02;ikelly;Committed revision 1513467 in branch-4.2,"13/Aug/13 13:11;hudson;SUCCESS: Integrated in bookkeeper-trunk #322 (See [https://builds.apache.org/job/bookkeeper-trunk/322/])
BOOKKEEPER-667: Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled (sijie via ivank) (ivank: rev 1513459)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledgers are gc'ed by mistake in MSLedgerManagerFactory.,BOOKKEEPER-596,12639659,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,hustlmsp,hustlmsp,28/Mar/13 18:59,26/Jul/13 19:36,13/Mar/19 22:16,26/Jul/13 19:36,4.2.0,4.2.1,4.2.2,4.3.0,,,,0,,details: https://issues.apache.org/jira/browse/BOOKKEEPER-590?focusedCommentId=13616397&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13616397,,,,,,,,,,,,,,,,03/Apr/13 21:14;ikelly;0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch;https://issues.apache.org/jira/secure/attachment/12576851/0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch,03/Apr/13 14:37;ikelly;0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch;https://issues.apache.org/jira/secure/attachment/12576792/0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch,26/Jul/13 17:04;mmerli;BOOKKEEPER-596.diff;https://issues.apache.org/jira/secure/attachment/12594422/BOOKKEEPER-596.diff,03/Apr/13 06:10;lvfangmin;BOOKKEEPER-596.patch;https://issues.apache.org/jira/secure/attachment/12576727/BOOKKEEPER-596.patch,29/Mar/13 19:59;hustlmsp;BOOKKEEPER-596.patch;https://issues.apache.org/jira/secure/attachment/12576148/BOOKKEEPER-596.patch,28/Mar/13 21:07;hustlmsp;BOOKKEEPER-596.patch;https://issues.apache.org/jira/secure/attachment/12575950/BOOKKEEPER-596.patch,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2013-03-28 23:43:14.377,,,no_permission,,,,,,,,,,,,,320128,,,Fri Jul 26 19:36:10 UTC 2013,,,,,,0|i1j8hr:,320469,,,,,,,,"28/Mar/13 21:07;hustlmsp;attach a patch to address this problem.

    - fixed LedgerRangeIterator issue in MSLedgerManagerFactory
    - fix concurrent modification issue in InMemoryStore
    - enable MSLedgerManagerFactory for LedgerManagerTestCase","28/Mar/13 23:43;hadoopqa;Testing JIRA BOOKKEEPER-596


Patch [BOOKKEEPER-596.patch|https://issues.apache.org/jira/secure/attachment/12575950/BOOKKEEPER-596.patch] downloaded at Thu Mar 28 23:12:17 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 2 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 829
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/306/","29/Mar/13 05:46;jiannan;Thanks sijie for providing a fix. The patch looks good to me, but it fails when I run test in my dev env. I'm digging the problem.","29/Mar/13 06:05;jiannan;An fail example: 100 ledgers with ledger id 0~99 are created, if 99 are deleted, it has no chance to been gc'ed in the ""while(ledgerRangeIterator.hasNext()) {...}"" loop.","29/Mar/13 10:30;vinayrpet;Yes, You are right [~jiannan], If the {{bkActiveLedgersSnapshot}} contains ledgers which are > {{lRange.end()}}, then there is no chance of being gc'ed in the current gc call.

But if one more ledger is created, then on next gc call, all ledgers deleted ( which are having lesser ledgerId than latest created) will be gc'ed.

This may not be a problem. ",29/Mar/13 19:59;hustlmsp;a new patch addressed [~jiannan]'s comment. and also removed the trailing spaces.,"29/Mar/13 20:32;hadoopqa;Testing JIRA BOOKKEEPER-596


Patch [BOOKKEEPER-596.patch|https://issues.apache.org/jira/secure/attachment/12576148/BOOKKEEPER-596.patch] downloaded at Fri Mar 29 20:01:01 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 848
.    Tests failed: 18
.    Tests errors: 20

.    The patch failed the following testcases:

.      testSyncUnsubscribeWithoutSubscription[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithoutSubscription[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testCloseSubscription[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testStartDeliveryTwice[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testStopDelivery[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testConsumedMessagesInOrder[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testCreateSubscriptionFailure[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testCreateSubscriptionSuccess[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAttachToSubscriptionFailure[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/308/","30/Mar/13 01:37;hustlmsp;looks like the failure is irrelative, re-submit the patch.","30/Mar/13 06:51;jiannan;[~vinay] Yes, defer gc is not a big problem, but it result in gc test case failed, so we had better fix it.

The new patch looks good to me, and it pass the GcLedgersTest test case now, thanks Sijie.

TestHedwigHubRegular also failed in my dev box when I run it many times, if it's irrelative we can create new JIRA to track it.","02/Apr/13 16:54;ikelly;regarding the change to the ScanAndCompareGC, it feels like this addition is a bit of a hack. Really, a ledger range iterator should return a range set like

[(NOLIMIT, 10), (11, 20), (21, 30), (31, NOLIMIT)]

This would remove the necessity for special handling, and it would also cover the case where ledgers exist on the bookie which are lower than the lower bound of the ledger ranges. This patch only handles those which are above the upper bound.

Further to this, I think NOLIMIT should be replaced with MIN_LEDGER_ID and MAX_LEDGER_ID to make things clearer.","03/Apr/13 06:10;lvfangmin;I agree with Ivan's comment, how about this patch?","03/Apr/13 06:42;hadoopqa;Testing JIRA BOOKKEEPER-596


Patch [BOOKKEEPER-596.patch|https://issues.apache.org/jira/secure/attachment/12576727/BOOKKEEPER-596.patch] downloaded at Wed Apr  3 06:11:57 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 830
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/310/","03/Apr/13 07:47;jiannan;Thanks fangmin's new patch, here are two comments:
   * I would suggest add more documentation about the LedgerRange constructor.
   * The ""throw new NoSuchElementException()"" in next() method seems unnecessary since there will be a hasNext() call before invoking next() in general case. If you really want to consider this corner situation then the condition check ""if (!hasMoreElement) {"" should be ""if (!hasNext()) {"" since we need to wait for the openCursor callback or the cursor is null which causes a NPE.

Personally, I would prefer Sijie's change which removes the LedgerRange constructor implementation dependency.","03/Apr/13 10:39;ikelly;Actually, by accident the current implementation handles those below the lower bound also. I agree with Jiannan's comment about removing the dependency on LedgerRange construction. During LedgerRange construction, the entity creating the LedgerRange shouldn't have to know how it will be used. The NOLIMIT constant indicates that they do. It would be cleaner if LedgerRange only took the list of ledgers and it worked out the first and last from that. Then the gc should decide how to use the ranges by itself.","03/Apr/13 10:46;lvfangmin;@Jiannan @Ivan, Thanks for your comments.

Yes, that make sense, we should removing the dependency on LedgerRange construction, also I prefer jiannan's new implementation of Scan and compare gc algorithm which removed the 'ordered scan' limit.","03/Apr/13 10:58;ikelly;Im working on a patch now to remove the LedgerRange constructor dependence. I should have something in an hour or two.
","03/Apr/13 14:40;ikelly;New patch builds on Sijie's patch, but also cleans up how ranges are constructed. Now the start and end of the range is derived from the set of ledgers passed to the range. NOLIMIT has been removed. An iterator is an ordered set of non-overlapping ranges. There can be no empty ranges in the iterator. ScanAndCompareGC takes all this into accounts. And covers the entire possible ledger id range when doing gc.","03/Apr/13 15:45;jiannan;Thanks Ivan for providing a new patch and add corresponding test case. Things need to be taken very very careful for this fix. The patch looks good to me and passes test in my dev box.

However, I find another legacy potential problem when review code: if there is any error happen during gc we should throw exception to avoid incorrect gc, but MSLedgerManagerFactory#MSLedgerRangeIterator#hasNext() eats a InterruptedException and just return false.

Ivan, could you help to resolve the legacy problem?","03/Apr/13 19:33;hadoopqa;Testing JIRA BOOKKEEPER-596


Patch [0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch|https://issues.apache.org/jira/secure/attachment/12576792/0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch] downloaded at Wed Apr  3 19:02:43 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 846
.    Tests failed: 12
.    Tests errors: 14

.    The patch failed the following testcases:

.      testCreateSubscriptionFailure[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testCreateSubscriptionSuccess[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAttachToSubscriptionFailure[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/311/",03/Apr/13 21:14;ikelly;new patch addresses those legacy issues also.,"03/Apr/13 22:38;hadoopqa;Testing JIRA BOOKKEEPER-596


Patch [0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch|https://issues.apache.org/jira/secure/attachment/12576851/0001-BOOKKEEPER-596-Ledgers-are-gc-ed-by-mistake-in-MSLed.patch] downloaded at Wed Apr  3 22:07:04 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 833
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/312/","04/Apr/13 05:11;hustlmsp;+1 for the new patch, thanks Ivan, Fangmin, Jiannan.",04/Apr/13 05:57;jiannan;+1 for the new patch,04/Apr/13 09:21;ikelly;Committed r1464385. Thanks Sijie & Jiannan,"04/Apr/13 10:00;hudson;Integrated in bookkeeper-trunk #164 (See [https://builds.apache.org/job/bookkeeper-trunk/164/])
    BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie & ivank) (Revision 1464385)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java
",07/Jun/13 16:47;ikelly;Committed revision 1490718 on branch-4.2,"25/Jul/13 18:10;mmerli;It seems like the issue is not completely fixed by this patch, it looks probably worse. 

I've verified that after a garbage collection cleaning, some ledgers (whose metadata is untouched in ZK) were delete from the bookies. This eventually triggers error when either adding entries to these ledgers (infinite loop in the client.. ) or when reading (entries not found).

This was using the HiearchicalLedgerManager (not sure the issue applies to all ledgers managers).

I'm trying to isolate a simple way to reproduce the issue, for now I think it's more likely to happen when a big number of ledgers are deleted in a short time and hence collected in the same gc cycle.","26/Jul/13 01:31;hustlmsp;[~merlimat]

I guessed I found the root cause. it is a bug introduce in this patch, where Ivan refactored the LedgerRange.

int HierarchicalLedgerManager, the subSet is misused, which exclude the last ledger id. 
http://docs.oracle.com/javase/6/docs/api/java/util/SortedSet.html#subSet(E, E)
{code}
            return new LedgerRange(zkActiveLedgers.subSet(getStartLedgerIdByLevel(level1, level2),
                                                          getEndLedgerIdByLevel(level1, level2)));
{code}

so the last ledger in each level would be gc'ed. it is easy to reproduce this issue and fix it.","26/Jul/13 15:19;ikelly;Yikes. This is a big problem. Sorry guys :(. At least it was caught before a release.

We should really look at getting rid of LedgerRange in future. It adds too many edge cases (each range has 2 edges by definition).","26/Jul/13 15:19;ikelly;@Sijie, are you working on a fix?","26/Jul/13 16:19;mmerli;Looks like it's more than the set inclusive of the last ledger in the range. I think some range might me missing when doing the scan: 

I create 10001 ledgers (to span over 2 ranges : 00/0000 and 00/0001)

{code}
LedgerRangeIterator iterator = getLedgerManager().getLedgerRanges();
while (iterator.hasNext()) {
     LedgerRange ledgerRange = iterator.next();
     LOG.info(""Found range: {}"", ledgerRange.getLedgers());
}
{code}

but the iterator just gets the ledgers in the 00/0001 range
","26/Jul/13 16:41;mmerli;One issue is the list of l2 nodes is not sorted, and also the ledger ranges iterator is missing the last ledger range ","26/Jul/13 16:53;ikelly;Added this test in GcLedgersTest.java 
{code}
    @Test
    public void testManyLedgers() throws Exception {
        final SortedSet<Long> createdLedgers = Collections.synchronizedSortedSet(new TreeSet<Long>());
        createLedgers(30001, createdLedgers);

        LedgerManager.LedgerRangeIterator iterator = getLedgerManager().getLedgerRanges();
        while (iterator.hasNext()) {
            LedgerManager.LedgerRange ledgerRange = iterator.next();
            LOG.info(""Found range: {}"", ledgerRange.getLedgers());
        }
    }
{code}
This should give 4 ranges. it only gives one.",26/Jul/13 16:54;ikelly;disable everything but hierarchical in LedgerManagerTestCase for cleaner output.,26/Jul/13 17:04;mmerli;Fixing the ledger ranges iterations,"26/Jul/13 17:31;ikelly;Patch looks like it solves it. I think it should go into a new JIRA though. BOOKKEEPER-596 already has a patch, albeit a faulty one. It's much to late to roll it back, so we need a new patch (mark for 4.3.0 and 4.2.2).

In the patch, Collections2 is unused. Also, it would be better for the test to cross 2 ranges at least, so set numLedgers to 30001 or so.",26/Jul/13 19:36;mmerli;Moving the last patch to BOOKKEEPER-663,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Filtered Messages Require ACK from Client Causes User Being Throttled Incorrectly Forever,BOOKKEEPER-607,12643866,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,hustlmsp,jiannan,jiannan,22/Apr/13 03:50,22/Jul/13 17:30,13/Mar/19 22:16,22/Jul/13 17:30,4.2.0,4.2.1,4.2.2,4.3.0,hedwig-server,,,0,,"In current FIFODeliveryManager, once a message is filtered in ActiveSubscriberState#messageScanned(), it just call ActiveSubscriberState#sendingFinished() and wait client's acknowledgement. However, the message isn't being delivered to client side, and once the number of such filtered messages larger than the delivery window size, the user cannot receive messages anymore!",,,,,,,,,,,,,,,,06/Jul/13 22:01;hustlmsp;BOOKKEEPER-607.diff;https://issues.apache.org/jira/secure/attachment/12591095/BOOKKEEPER-607.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-26 00:20:53.597,,,no_permission,,,,,,,,,,,,,324233,,,Mon Jul 22 17:18:44 UTC 2013,,,,,,0|i1jxu7:,324578,,,,,,,,26/Apr/13 00:20;hustlmsp;the issue would also affect cross region delivery. we need to track the filtered msg id range and last consumed seq id to address the sequence id gap introduced by filter out messages.,"30/Apr/13 05:03;hustlmsp;please ignore my previous comment. this fix would be pretty straightforward, just one line: modify the consume seq id in ActiveSubscriberState when #sendingFinished for a filtered out message.",06/Jul/13 22:01;hustlmsp;attach a patch to fix throttle issue when messages are filtered.,"06/Jul/13 23:04;hadoopqa;Testing JIRA BOOKKEEPER-607


Patch [BOOKKEEPER-607.diff|https://issues.apache.org/jira/secure/attachment/12591095/BOOKKEEPER-607.diff] downloaded at Sat Jul  6 22:38:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 855
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/412/",22/Jul/13 15:53;ikelly;Change is good and makes sense. +1. Committing.,"22/Jul/13 17:18;ikelly;Committed revision 1505726 (trunk)
Committed revision 1505735 (branch 4.2)

Thanks Sijie.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created.,BOOKKEEPER-636,12654976,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,vinayrpet,vinayrpet,vinayrpet,26/Jun/13 17:47,04/Jul/13 15:19,13/Mar/19 22:16,04/Jul/13 15:19,4.2.1,4.3.0,4.2.2,4.3.0,bookkeeper-server,,,0,,"With the following scenario latest transaction log can be deleted.

1. more than {{journalMaxBackups}} txn logs are there in journal dir.
2. BK machine was up for long time and the latest txn log id is some what huge number
3. Now reboot the machine.
4. after reboot BK restarted.
5. Now, Immediately after startup, One entry is added, due to which Synthread rolled the lastMark in ledger dirs before the lastLogId updated by Journal thread. (this lastMark was having the old logId which was before reboot). 
6. Now after roll, old journal txn logs were gc'ed. *Now latest created the txn log was deleted.*
7. After this Journal thread updated the lastLogMark, also some more rolls happened.
8. Now BK restarted again. But BK was not able to start because it was not able to find the latest txn log file in journal directory.

{noformat}java.io.IOException: Recovery log 264564 is missing
        at org.apache.bookkeeper.bookie.Journal.replay(Journal.java:424)
        at org.apache.bookkeeper.bookie.Bookie.readJournal(Bookie.java:547)
        at org.apache.bookkeeper.bookie.Bookie.start(Bookie.java:603)
        at org.apache.bookkeeper.proto.BookieServer.start(BookieServer.java:111){noformat}",,,,,,,,,,,,,,,,02/Jul/13 17:05;ikelly;0001-BOOKKEEPER-636-Latest-txn-logs-might-be-deleted-in-a.patch;https://issues.apache.org/jira/secure/attachment/12590465/0001-BOOKKEEPER-636-Latest-txn-logs-might-be-deleted-in-a.patch,29/Jun/13 22:52;hustlmsp;BOOKKEEPER-636.diff;https://issues.apache.org/jira/secure/attachment/12590185/BOOKKEEPER-636.diff,27/Jun/13 01:20;hustlmsp;BOOKKEEPER-636.diff;https://issues.apache.org/jira/secure/attachment/12589821/BOOKKEEPER-636.diff,29/Jun/13 07:19;vinayrpet;BOOKKEEPER-636.patch;https://issues.apache.org/jira/secure/attachment/12590157/BOOKKEEPER-636.patch,26/Jun/13 17:55;vinayrpet;BOOKKEEPER-636.patch;https://issues.apache.org/jira/secure/attachment/12589777/BOOKKEEPER-636.patch,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2013-06-27 01:19:49.588,,,no_permission,,,,,,,,,,,,,335253,,,Thu Jul 04 15:19:46 UTC 2013,,,,,,0|i1ltvj:,335577,,,,,,,,"26/Jun/13 17:48;vinayrpet;Adding analysis to avoid very big description.


Analysis:
------------
1. EveryTime new journal txn log will be created with the nanoTime() as the id.
{code}          if (null == logFile) {
                    logId = MathUtils.now();
                    logFile = new JournalChannel(journalDirectory, logId);{code}

2. System.nanoTime() is the relative time with the system startup. It will start from 0 everytime system re-started. refer http://java.dzone.com/articles/how-arbitary-start


3. before reboot, last txn logId was very huge, but just after restart, latest txn id became *40974.txn*. 1c9d2f436.txn  was the last txn file.
 As part of first roll latest txn file was garbage collected.
{noformat}2013-06-25 14:38:14,730 - INFO  [SyncThread:Journal@341] - garbage collected journal 40974.txn{noformat}

4. After this one more restart gave the problem.


*Conclusion*:
We should not use {{System.nanoTime()}} for the storage and compare purposes.","26/Jun/13 17:55;vinayrpet;Attaching a draft patch.
Didn't get how can I write a test for this scenario.","27/Jun/13 01:19;hustlmsp;good catch, Vinay. but the patch make things complicated, you don't need to introduce another file, it is easy to get the max journal file id from journal directory, and you just need to guarantee next journal id is large than max journal file id in journal directory when startup.

And I think we don't need to add another method, we should use System.currentTimeMillis and add a comment about this case.

attach a patch to simplify things.","27/Jun/13 02:20;hadoopqa;Testing JIRA BOOKKEEPER-636


Patch [BOOKKEEPER-636.diff|https://issues.apache.org/jira/secure/attachment/12589821/BOOKKEEPER-636.diff] downloaded at Thu Jun 27 01:54:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 120 characters
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 852
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/395/",27/Jun/13 04:06;vinayrpet;Thanks Sijie.. Patch is Simple indeed. +1.,"27/Jun/13 04:12;rakeshr;[~hustlmsp]
Is it required to make journalid more random using the System.currentTimeInMillis(), can we make the journalid in sequence as follows.
I feel, it simplifies debugging.
{code}
     long newLogId = logId + 1;
{code}","28/Jun/13 03:58;hustlmsp;no preference, just tried to keep it consistent with before. I am OK to change it in sequence.",28/Jun/13 04:13;umamaheswararao;+1 for this idea to keep incrementing by '+1'. This should avoid even that timeofday changes as well. May be on startup of process we consider System.currentTimeInMillis() and from then we keep increment the logid.,"28/Jun/13 16:03;ikelly;+1 on the +1 thing. It will also stop concurrent bookie instances from starting if we enforce that to write to journal id X+1, this current process must have created the file for that journal (we should use File#createNewFile).",29/Jun/13 07:19;vinayrpet;Just updated the Sijie's patch to update the logId with +1.,"29/Jun/13 08:41;hadoopqa;Testing JIRA BOOKKEEPER-636


Patch [BOOKKEEPER-636.patch|https://issues.apache.org/jira/secure/attachment/12590157/BOOKKEEPER-636.patch] downloaded at Sat Jun 29 08:14:50 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/397/","29/Jun/13 09:25;umamaheswararao;Thanks Vinay for the patch. +1
If others also agree on it, I will go for commit.","29/Jun/13 09:27;umamaheswararao;@Ivan,
{quote}
 It will also stop concurrent bookie instances from starting if we enforce that to write to journal id X+1, this current process must have created the file for that journal (we should use File#createNewFile).
{quote}
I did not notice your comment above. Ar you expecting this ceateNewFIle change also in this patch? Right now we use RandomAccessFile I think and also we take position for seeking.",29/Jun/13 22:43;hustlmsp;we could assign the timestamp when instantiating the logId. we don't need to check the logId when incrementing it.,"29/Jun/13 23:27;hadoopqa;Testing JIRA BOOKKEEPER-636


Patch [BOOKKEEPER-636.diff|https://issues.apache.org/jira/secure/attachment/12590185/BOOKKEEPER-636.diff] downloaded at Sat Jun 29 23:01:30 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/399/","02/Jul/13 17:05;ikelly;The createNewFile change is very small, and ensures two processes don't make a mess of each others journals. I'm not sure two processes could even get this far, but it's better to be safe than sorry. (i've attached a patch with includes this change)","02/Jul/13 17:37;hadoopqa;Testing JIRA BOOKKEEPER-636


Patch [0001-BOOKKEEPER-636-Latest-txn-logs-might-be-deleted-in-a.patch|https://issues.apache.org/jira/secure/attachment/12590465/0001-BOOKKEEPER-636-Latest-txn-logs-might-be-deleted-in-a.patch] downloaded at Tue Jul  2 17:11:30 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/401/","04/Jul/13 10:03;vinayrpet;+1 for the new changes ivan. 
I think its ready to go in. :)",04/Jul/13 12:02;ikelly;Committed r1499731 to trunk. Thanks Vinay.,"04/Jul/13 13:15;hudson;Integrated in bookkeeper-trunk #271 (See [https://builds.apache.org/job/bookkeeper-trunk/271/])
    BOOKKEEPER-636: Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created. (vinay via ivank) (Revision 1499731)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java
",04/Jul/13 15:19;ikelly;Committed revision 1499776 to branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Critical performance bug in InterleavedLedgerStorage,BOOKKEEPER-569,12632238,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Blocker,Fixed,ikelly,ikelly,ikelly,13/Feb/13 17:00,16/Feb/13 15:44,13/Mar/19 22:16,16/Feb/13 15:04,,,4.2.1,4.3.0,,,,0,,"There's a synchronization on InterleavedLedgerStorage#flush(), which kills performance when you're writing to many ledgers on a single bookie. Both #flush and #addEntry are synchronized, which blocks any adds being serviced while the sync thread is running.

The sync on #addEntry has always been there, but on #flush it has only existed since BOOKKEEPER-293. The addition was obviously a mistake.

Fix is simply to remove it.",,,,,,,,,,,,,,,,13/Feb/13 17:02;ikelly;0001-BOOKKEEPER-569-Critical-performance-issue-in-Interle.patch;https://issues.apache.org/jira/secure/attachment/12569224/0001-BOOKKEEPER-569-Critical-performance-issue-in-Interle.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-13 17:34:34.969,,,no_permission,,,,,,,,,,,,,312734,,,Sat Feb 16 15:44:19 UTC 2013,,,,,,0|i1hyvz:,313080,,,,,,,,"13/Feb/13 17:34;fpj;I have a few questions here:

# Why is addEntry synchronized? Other than flush, it seems to be the only other synchronized method.
# Both addEntry and flush access ledgerCache. Are you sure that making flush unsynchronized will not cause any race?
# What exactly makes you think it is an obvious mistake, other than you being the author of the 293 patch?","13/Feb/13 17:47;ikelly;{quote}1. Why is addEntry synchronized? Other than flush, it seems to be the only other synchronized method.{quote}
It doesn't necessarily have to be, as EntryLogger#addEntry is synchronized and LedgerCacheImpl seems quite threadsafe. It has always been synchronized though, so I don't want to change it without good reason.

{quote}2. Both addEntry and flush access ledgerCache. Are you sure that making flush unsynchronized will not cause any race?{quote}
ledgerCache is threadsafe as far as I can see. Also, up until Jan 4, flush was no unsynchronized, as it didn't present a problem.

{quote}3. What exactly makes you think it is an obvious mistake, other than you being the author of the 293 patch? {quote}
Its completely unrelated to the patch. Usually, for a change like that, unrelated to the issue, I'd have noted why I did it in the jira or added a comment. I think I had been touching that code to make it accessible for the tests, and changed it back wrong. I need to check at home, as thats the repo the original changes were in. ","13/Feb/13 17:52;hadoopqa;Testing JIRA BOOKKEEPER-569


Patch [0001-BOOKKEEPER-569-Critical-performance-issue-in-Interle.patch|https://issues.apache.org/jira/secure/attachment/12569224/0001-BOOKKEEPER-569-Critical-performance-issue-in-Interle.patch] downloaded at Wed Feb 13 17:22:11 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 815
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/269/","15/Feb/13 04:27;hustlmsp;+1 for this change. [~fpj] how is your opinion on Ivan's replies? If there is +1 from you, the patch is ready to be in.","15/Feb/13 22:56;fpj;+1, looks good.","16/Feb/13 15:04;fpj;Trunk: Committed revision 1446902.
Branch 4.2: Committed revision 1446900.","16/Feb/13 15:44;hudson;Integrated in bookkeeper-trunk #106 (See [https://builds.apache.org/job/bookkeeper-trunk/106/])
    BOOKKEEPER-569: Critical performance bug in InterleavedLedgerStorage (ivank via fpj) (Revision 1446902)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RackAwarePolicy: Failure to map node into rack may result in failure to add other nodes.,BOOKKEEPER-1105,13093560,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,ayegorov,ayegorov,ayegorov,09/Aug/17 18:25,16/Aug/17 13:31,13/Mar/19 22:16,16/Aug/17 01:42,4.5.0,,4.5.1,4.6.0,bookkeeper-client,bookkeeper-server,,0,,"Ran into this issue:
due to some misconfiguration of new node and rack assignments we've ended up with nodes being assigned to default rack. We are not using region-aware, only rack-aware policy.
This generates the following sequence of events:
- default rack is /default-region/default-rack even though region-aware is not used.
- other nodes mapped to racks like /rack1, /rack2 etc.
- mixing /region/rack and /rack styles is not allowed, but exception on addition of such nodes is swallowed. All following nodes to add (if there were any) just skipped as result.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-16 01:42:23.104,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 16 13:31:54 UTC 2017,,,,,,0|i3ilvj:,9223372036854775807,,,,,,,,"16/Aug/17 01:42;sijie@apache.org;Issue resolved by merging pull request 425
            [https://github.com/apache/bookkeeper/pull/425]

            {noformat}
            commit f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20
Author:     Andrey Yegorov <ayegorov@salesforce.com>
AuthorDate: Tue Aug 15 18:41:49 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Aug 15 18:41:49 2017 -0700

    BOOKKEEPER-1105: RackAwarePolicy: Failure to map node into rack may result in failure to add other nodes.
    
    - RackAwarePolicy's no longer uses /default-region if rack mapping fails unless required (by RegionAwarePolicy)
    - it no longer fails to add rest of nodes after one node's failed addition,
    - added unit tests
    - added counters for successful/failed bookie adds/removal
    (PR description content here)...
    
    UpdateLedgerOpTest failed but it seems to be known/unrelated issue.
    
    Author: Andrey Yegorov <ayegorov@salesforce.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    This closes #425 from dlg99/fix/rackaware

            {noformat}
            ","16/Aug/17 13:31;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1854 (See [https://builds.apache.org/job/bookkeeper-master/1854/])
BOOKKEEPER-1105: RackAwarePolicy: Failure to map node into rack may (sijie: [https://github.com/apache/bookkeeper/commit/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20])
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopologyImpl.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java
* (edit) bookkeeper-server/src/test/resources/networkmappingscript.sh
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
shell lastMark throws NPE,BOOKKEEPER-1079,13075184,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,eolivelli,eolivelli,eolivelli,26/May/17 14:31,27/May/17 13:48,13/Mar/19 22:16,26/May/17 19:44,4.5.0,,4.5.0,,bookkeeper-server,,,0,,"
{code}
[enrico.olivelli@DNA101PC193 bookkeeper-server-4.5.0-SNAPSHOT]$ bin/bookkeeper shell lastmark
JMX enabled by default
Exception in thread ""main"" java.lang.NullPointerException
	at org.apache.bookkeeper.bookie.BookieShell.printLastLogMark(BookieShell.java:2304)
	at org.apache.bookkeeper.bookie.BookieShell$LastMarkCmd.runCmd(BookieShell.java:1064)
	at org.apache.bookkeeper.bookie.BookieShell$MyCommand.runCmd(BookieShell.java:175)
	at org.apache.bookkeeper.bookie.BookieShell.run(BookieShell.java:1915)
	at org.apache.bookkeeper.bookie.BookieShell.main(BookieShell.java:1992)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-26 14:34:25.347,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat May 27 13:48:58 UTC 2017,,,,,,0|i3fiuf:,9223372036854775807,,,,,,,,"26/May/17 14:34;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/167

    BOOKKEEPER-1079 shell lastMark throws NPE

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper BOOKKEEPER-1079

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/167.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #167
    
----
commit 14d05594bc98e0106a90dd67e1b5a1e20051992f
Author: Enrico Olivelli <eolivelli@apache.org>
Date:   2017-05-26T14:33:53Z

    BOOKKEEPER-1079 shell lastMark throws NPE

----
","26/May/17 19:44;eolivelli;Issue resolved by merging pull request 167
            [https://github.com/apache/bookkeeper/pull/167]

            {noformat}
            commit 9bade929dd87829a8903e402f6c3e3be366a854a
Author:     Enrico Olivelli <eolivelli@apache.org>
AuthorDate: Fri May 26 15:44:27 2017 -0400
Commit:     Enrico Olivelli <eolivelli@localhost.localdomain>
CommitDate: Fri May 26 15:44:27 2017 -0400

    BOOKKEEPER-1079: shell lastMark throws NPE
    
    Author: Enrico Olivelli <eolivelli@apache.org>
    
    Reviewers: Sijie Guo
    
    Closes #167 from eolivelli/BOOKKEEPER-1079

            {noformat}
            ","26/May/17 19:44;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/167
","27/May/17 13:48;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1762 (See [https://builds.apache.org/job/bookkeeper-master/1762/])
BOOKKEEPER-1079: shell lastMark throws NPE (eolivelli: rev 9bade929dd87829a8903e402f6c3e3be366a854a)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle Memtable flush failure,BOOKKEEPER-986,13027880,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,reddycharan18@gmail.com,reddycharan18@gmail.com,reddycharan18@gmail.com,13/Dec/16 19:21,21/Dec/16 13:12,13/Mar/19 22:16,21/Dec/16 00:49,,,4.5.0,,,,,0,,"Consider the following scenario
 - currently bookie is in writemode but it is close to the diskusagethreshold and also entrymemtable is close to skipListSizeLimit
 - it received a addentry call, and now the size of the entrymemtable is greater than skipListSizeLimit
 - so onSizeLimitReached of SortedLedgerStorage will be called and now lets assume that memtable flush has failed because of diskusagethreshold 
 - because of previous step, bookie would turn to readonly
 - now lets assume after certain rounds of compaction bookie reclaimed sufficient storage and went back to writemode
 - now bookie would be receiving addentry calls
 - because of outstanding snapshot from previous memtable flush failure, it will never retry to flush memtable 
 - now the memory start keep going up and up and the process memory gets bloated",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-13 21:03:14.087,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 21 13:12:03 UTC 2016,,,,,,0|i37jzr:,9223372036854775807,,,,,,,,"13/Dec/16 21:03;githubbot;GitHub user reddycharan opened a pull request:

    https://github.com/apache/bookkeeper/pull/92

    BOOKKEEPER-986: Handle memtable flush failure

    - If the memtable flush is failed previously then
    for the next addEntry call it will try to flush the
    existing snapshot

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/reddycharan/bookkeeper handlememtableflushfailure

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/92.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #92
    
----
commit bc77cedf56e9308bea1da280e16b855646479311
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   2016-09-13T18:44:33Z

    BOOKKEEPER-986: Handle memtable flush failure
    
    - If the memtable flush is failed previously then
    for the next addEntry call it will try to flush the
    existing snapshot

----
","20/Dec/16 21:48;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/92
  
    The change looks good to me. +1
","21/Dec/16 00:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/92
","21/Dec/16 00:49;jujjuri;Issue resolved by merging pull request 92
            [https://github.com/apache/bookkeeper/pull/92]

            {noformat}
            commit 6e738d0c02ebe6710a24aad505e2fd9386bb8821
Author:     Charan Reddy Guttapalem <cguttapalem@salesforce.com>
AuthorDate: Tue Dec 20 16:48:48 2016 -0800
Commit:     JV <vjujjuri@salesforce.com>
CommitDate: Tue Dec 20 16:48:48 2016 -0800

    BOOKKEEPER-986: Handle memtable flush failure
    
    - If the memtable flush is failed previously then
    for the next addEntry call it will try to flush the
    existing snapshot
    
    Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #92 from reddycharan/handlememtableflushfailure

            {noformat}
            ","21/Dec/16 13:12;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1603 (See [https://builds.apache.org/job/bookkeeper-master/1603/])
BOOKKEEPER-986: Handle memtable flush failure (vjujjuri: rev 6e738d0c02ebe6710a24aad505e2fd9386bb8821)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryMemTable.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
addEntry() is susceptible to spurious wakeups,BOOKKEEPER-924,12961723,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,eolivelli,jujjuri,jujjuri,22/Apr/16 16:40,16/Oct/16 15:09,13/Mar/19 22:16,13/Oct/16 07:27,4.3.2,,4.5.0,,,,27/May/16 00:00,0,,"LedgerHandle sync interface heavily depends on SyncCounter to convert async interfaces
into sync interfaces.

Usaylly

SyncCounter.inc()
asyncCall()
SyncCOunter.block(0)

The block code is.

   synchronized void block(int limit) throws InterruptedException {
        while (i > limit) {
            int prev = i;
            wait();
            if (i == prev) {
                break;
            }
        }
    }

Since 'i' is going to be same as 'prev' on spurious wakeup, and wait() can return on spurious wakeups. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-22 21:15:57.71,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sun Oct 16 15:09:37 UTC 2016,,,,,,0|i2wlpj:,9223372036854775807,,,,,,,,"22/Apr/16 21:15;githubbot;GitHub user jvrao opened a pull request:

    https://github.com/apache/bookkeeper/pull/38

    BOOKKEEPER-924  Handle Spurious wakeups

    SyncCounter doesn't handle Spurious wakeups.
    Make use of CountDownLatch latch instead of native counter
    
    Signed-off-by: Venkateswararao Jujjuri (JV) <vjujjuri@salesforce.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jvrao/bookkeeper bk_924

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/38.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #38
    
----
commit 74167b16aa9b2c87ee2c2001d5c6d5322036b6cd
Author: JV <vjujjuri@salesforce.com>
Date:   2016-04-22T18:00:22Z

    BOOKKEEPER-924  Handle Spurious wakeups
    
    SyncCounter doesn't handle Spurious wakeups.
    Make use of CountDownLatch latch instead of native counter
    
    Signed-off-by: Venkateswararao Jujjuri (JV) <vjujjuri@salesforce.com>

----
","22/Apr/16 21:18;jujjuri;Created pull request:
https://github.com/apache/bookkeeper/pull/38
",22/Apr/16 21:26;jujjuri;[~sijie@apache.org] [~merlimat] FYI.,"23/Apr/16 03:18;zhaijia;There seems an error contains the changed code in org.apache.bookkeeper.test.TestBackwardCompat.testCompat410.
https://builds.apache.org/job/bookkeeper-master-git-pullrequest/75/#showFailuresLink

org.junit.runners.model.TestTimedOutException: test timed out after 60000 milliseconds
	at sun.misc.Unsafe.park(Native Method)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:994)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1303)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:236)
	at org.apache.bookkeeper.client.SyncCounter.block(SyncCounter.java:44)
	at org.apache.bookkeeper.client.LedgerHandle.addEntry(LedgerHandle.java:518)
	at org.apache.bookkeeper.client.LedgerHandle.addEntry(LedgerHandle.java:479)
	at org.apache.bookkeeper.test.TestBackwardCompat$LedgerCurrent.write100(TestBackwardCompat.java:446)
	at org.apache.bookkeeper.test.TestBackwardCompat.testCompat410(TestBackwardCompat.java:634)",23/Apr/16 06:15;jujjuri;Strange will look into it. Just this test failed???,23/Apr/16 06:24;eolivelli;Should we address this issue for 4.5.0? 4.4.0 is going to be released soon and this is a big change,24/Apr/16 21:16;jujjuri;Are these flappers? BackwardCompat test passed multiple times on my box. ,24/Apr/16 23:49;hustlmsp;[~jujjuri] what is the impact of this issue? It is a bit unclear to me what is fixed and why changing it to countdownlatch. and shall this jira is marked to be 4.4.0.,"16/Jun/16 22:36;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/38
  
    Lets first bump the JAVA version to JAVA 8 and then we update pull request the CompleteFuture<Integer>.
","28/Jul/16 01:23;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/38
  
    @jvrao it is java 8 now. do you want to update the pull request?
","16/Aug/16 17:32;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/38
  
    @jvrao ping?
","25/Aug/16 14:19;eolivelli;I think I have just seen this issue in production, a call to LedgerHandle#readEntries returned a null value

Is there any other explanation ?


",25/Aug/16 20:32;hustlmsp;[~eolivelli] interesting. I do not see other explanations rather than spurious wakeup,28/Sep/16 16:13;jujjuri;Assigned to [~merlimat] as he is interested in addressing this issue.,"29/Sep/16 07:39;eolivelli;[~merlimat] [~jujjuri] I tried to replace SynchCounter with CompletableFuture and the change is quite easy.

Can I pick up this issue ?
For me is quite important as I have seen it in production","03/Oct/16 12:43;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/60

    BOOKKEEPER-924 addEntry() is susceptible to spurious wakeups

    Use Java8 CompletableFuture instead of SyncCounter

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper BOOKKEEPER-924

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/60.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #60
    
----

----
","03/Oct/16 12:45;eolivelli;I have submitted a PR with the switch to CompletableFuture.

I had to keep the SyncCounter class in order to make Compat test run","13/Oct/16 05:58;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/60
  
    @eolivelli the change looks good to me +1
","13/Oct/16 07:27;hustlmsp;Issue resolved by merging pull request 60
            [https://github.com/apache/bookkeeper/pull/60]

            {noformat}
            commit bf4a4d6a07f9d615752054c6743035cebd86716e
Author:     eolivelli <eolivelli@gmail.com>
AuthorDate: Thu Oct 13 00:27:18 2016 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Thu Oct 13 00:27:18 2016 -0700

    BOOKKEEPER-924: addEntry() is susceptible to spurious wakeups
    
    Use Java8 CompletableFuture instead of SyncCounter
    
    Author: eolivelli <eolivelli@gmail.com>
    
    Reviewers: sijie@apache.org <sijie@apache.org>
    
    Closes #60 from eolivelli/BOOKKEEPER-924 and squashes the following commits:
    
    61e6b1a [eolivelli] BOOKKEEPER-924 addEntry() is susceptible to spurious wakeups
    7d7eaf7 [eolivelli] BOOKKEEPER-924 addEntry() is susceptible to spurious wakeups
    f865610 [eolivelli] BOOKKEEPER-924 addEntry() is susceptible to spurious wakeups
    e75569a [eolivelli] BOOKKEEPER-924 addEntry() is susceptible to spurious wakeups
    cdd32c3 [eolivelli] BOOKKEEPER-924 addEntry() is susceptible to spurious wakeups

            {noformat}
            ","13/Oct/16 07:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/60
","13/Oct/16 07:29;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/38
  
    @jvrao I merged @eolivelli 's pull request. mind closing this PR?
","13/Oct/16 13:09;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1533 (See [https://builds.apache.org/job/bookkeeper-master/1533/])
BOOKKEEPER-924: addEntry() is susceptible to spurious wakeups (sijie: rev bf4a4d6a07f9d615752054c6743035cebd86716e)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/SynchCallbackUtils.java
","16/Oct/16 15:09;githubbot;Github user jvrao closed the pull request at:

    https://github.com/apache/bookkeeper/pull/38
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie should exit with non-zero if NIOServer crashes with Error,BOOKKEEPER-679,12666907,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,ikelly,ikelly,ikelly,04/Sep/13 15:49,09/Sep/13 10:29,13/Mar/19 22:16,09/Sep/13 10:29,,,4.2.2,,,,,0,,"Currently, if NIOServerFactory throws something like OutOfMemoryError, bookie process will exit with 0. This is bad, as monitoring tools will take it to mean a normal shutdown and not restart.",,,,,,,,,,,,,,,,04/Sep/13 16:36;ikelly;0001-BOOKKEEPER-679-Bookie-should-exit-with-non-zero-if-N.patch;https://issues.apache.org/jira/secure/attachment/12601401/0001-BOOKKEEPER-679-Bookie-should-exit-with-non-zero-if-N.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-04 17:04:49.768,,,no_permission,,,,,,,,,,,,,346844,,,Mon Sep 09 10:29:42 UTC 2013,,,,,,0|i1nt5b:,347144,,,,,,,,"04/Sep/13 17:04;hadoopqa;Testing JIRA BOOKKEEPER-679


Patch [0001-BOOKKEEPER-679-Bookie-should-exit-with-non-zero-if-N.patch|https://issues.apache.org/jira/secure/attachment/12601401/0001-BOOKKEEPER-679-Bookie-should-exit-with-non-zero-if-N.patch] downloaded at Wed Sep  4 17:02:59 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","05/Sep/13 23:01;fpj;+1, looks good.",09/Sep/13 10:29;ikelly;Committed 1521028 to branch-4.2. Thanks for reviewing Flavio.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Data loss when ledger metadata is overwritten,BOOKKEEPER-584,12636520,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,hustlmsp,hustlmsp,hustlmsp,12/Mar/13 06:05,07/Jun/13 19:44,13/Mar/19 22:16,26/Apr/13 16:39,4.2.0,,4.2.2,4.3.0,bookkeeper-client,,,0,,"this is an issue introduced when fixing BOOKKEEPER-337. the original #resolveConflicts logic was removed by just checking state and current ensemble, which tends to fixing multiple bookies changed in same ensemble.

the issue could be reproduce by a test case in following steps:

1. Ledger L writing several entries to ensemble A, B, C.
2. C succeed, B failed with slow responses and A failed with unrecoverable issue.
3. L would fail all the pending add ops and close the ledger with lastEntryId = -1. (since no add operations succeed).
4. The ownership of this Ledger is released and transferred to other machines (it is the normal use case for Hedwig).
5. the new owner tried to open Ledger L and recover the ensemble, suppose A, B is back to normal at this case. so L is closed with lastEntryId is not -1.
6. the old owner although closed the ledger, but doesn't blocking the responses for already failed pending add ops. so failures for B would kick in some ensemble changes and since the ledger metadata is already changed by new owner, so it needs to resolve the conflicts and update the ledger metadata with lastEntryId = -1 again. so we get different lastEntryId at different time, which cause inconsistency and data loss.

for details of this sequence, a test case could describe it more clearly.",,,,,,,,,,,,,,,,07/Jun/13 19:44;ikelly;BOOKKEEPER-584.branch4-2.diff;https://issues.apache.org/jira/secure/attachment/12586777/BOOKKEEPER-584.branch4-2.diff,26/Apr/13 03:57;hustlmsp;BOOKKEEPER-584.diff;https://issues.apache.org/jira/secure/attachment/12580657/BOOKKEEPER-584.diff,09/Apr/13 05:48;hustlmsp;BOOKKEEPER-584.diff;https://issues.apache.org/jira/secure/attachment/12577715/BOOKKEEPER-584.diff,12/Mar/13 06:11;hustlmsp;BOOKKEEPER-584.diff;https://issues.apache.org/jira/secure/attachment/12573269/BOOKKEEPER-584.diff,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-03-12 08:17:21.381,,,no_permission,,,,,,,,,,,,,317012,,,Fri Jun 07 19:44:06 UTC 2013,,,,,,0|i1ip9j:,317353,,,,,,,,"12/Mar/13 06:11;hustlmsp;attach a test to reproduce this issue. two places to fix this issue:

1) blocking handling slow response when a pending add op is already completed.

2) we should do strict #resolveConflicts using LedgerMetadata#resolveConflicts rather than just checking state in updating metadata. Since multiple clients would access the metadata at the same time.","12/Mar/13 08:17;hadoopqa;Testing JIRA BOOKKEEPER-584


Patch [BOOKKEEPER-584.diff|https://issues.apache.org/jira/secure/attachment/12573269/BOOKKEEPER-584.diff] downloaded at Tue Mar 12 07:46:08 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 818
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/287/","02/Apr/13 14:50;ikelly;Patch looks good. There's a failure in the tests though, and it looks like it could be related.

https://builds.apache.org/job/bookkeeper-trunk-precommit-build/287/testReport/junit/org.apache.bookkeeper.client/BookieWriteLedgerTest/testAsyncWritesWithMultipleFailuresInLastEnsemble_1_/

Also, it seems we're asserting in a callback, which should be fixed.",09/Apr/13 05:48;hustlmsp;addressed comments and fixed failed test case.,"09/Apr/13 08:54;hadoopqa;Testing JIRA BOOKKEEPER-584


Patch [BOOKKEEPER-584.diff|https://issues.apache.org/jira/secure/attachment/12577715/BOOKKEEPER-584.diff] downloaded at Tue Apr  9 08:23:11 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 834
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/322/","12/Apr/13 17:16;ikelly;The same test is still failing for me, pretty reliably (maybe 50% of the time). Its to do with the version of the metadata. It's trying to write a metadata version which is lower than the current metadata version. I didn't look deeply into how this can happen, but it's because it's trying to handle two failures at once. This would have got through in the past though, as LedgerMetadata#resolveConflict() wasn't called before.",16/Apr/13 05:04;hustlmsp;[~ikelly] are you trying the right patch? the new patch already put the #resolveConflict after checking ensemble.,"18/Apr/13 16:49;ikelly;No, it's the latest patch. It's a race condition, due to the fact that we modify LedgerHandle#metadata directly in the callbacks. One thread is writing new metadata (on v1), another is rereading, and the rereading one reads v1 before the writing one completes. When the writing thread completes, it sets LedgerHandle#metadata to v2. Then the reread resolve occurs. LedgerHandle#metadata has a higher version than what we read and resolve fails.

This can be handled two ways. A) we can put complex synchronization on failure handling or B) we make LedgerMetadata immutable and make resolveConflict return a merged LedgerMetadata rather than a boolean.","26/Apr/13 03:57;hustlmsp;a new patch addressed bad fix in previous patch, which introduced other kind of metadata overwritten and it would also addressed the test case fail issue.","26/Apr/13 04:32;hadoopqa;Testing JIRA BOOKKEEPER-584


Patch [BOOKKEEPER-584.diff|https://issues.apache.org/jira/secure/attachment/12580657/BOOKKEEPER-584.diff] downloaded at Fri Apr 26 04:01:31 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 834
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/326/",26/Apr/13 16:37;ikelly;Patch is good. +1. Committing.,26/Apr/13 16:39;ikelly;Committed as 1476283. Good work Sijie.,"26/Apr/13 17:16;hudson;Integrated in bookkeeper-trunk #188 (See [https://builds.apache.org/job/bookkeeper-trunk/188/])
    BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank) (Revision 1476283)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
",07/Jun/13 19:44;ikelly;Committed revision 1490797 in branch4.2. Some manual conflict resolution on original patch. Final patch attached.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledger recovery doesn't work correctly when recovery adds force changing ensembles.,BOOKKEEPER-581,12635427,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Critical,Fixed,hustlmsp,hustlmsp,hustlmsp,05/Mar/13 20:31,07/Jun/13 10:47,13/Mar/19 22:16,25/Mar/13 17:03,4.2.0,4.2.1,4.2.2,4.3.0,bookkeeper-client,,,0,,"currently read and write use same ledger metadata during ledger recovery, which is bad. since write will cause changing ensemble which modified ensembles map to introducing brand new bookies. those brand new bookies would mislead following recovery reads, cause recovery is proceeded in a wrong way.

E.g.

3 bookies, quorums size 2. A, B, C.

read 0 from A, B.
recovery add 0: A, B becomes slow. D, E are brought into the ensemble to replace A, B.
so following recovery read would be proceed in ensemble (D, E, C), then we would lost all the entries added in A and B.

this issue is similar as BOOKKEEPER-355.",,,,,,,,,,,,,,,,07/Jun/13 10:47;ikelly;BOOKKEEPER-581.branch4-2.diff;https://issues.apache.org/jira/secure/attachment/12586693/BOOKKEEPER-581.branch4-2.diff,05/Mar/13 20:41;hustlmsp;BOOKKEEPER-581.patch;https://issues.apache.org/jira/secure/attachment/12572162/BOOKKEEPER-581.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-03-05 21:29:18.726,,,no_permission,,,,,,,,,,,,,315920,,,Fri Jun 07 10:47:29 UTC 2013,,,,,,0|i1iijb:,316263,,,,,,,,05/Mar/13 20:41;hustlmsp;a test case reproduced the bug. a patch to keep a separated copy of ledger metadata for recovery read.,"05/Mar/13 21:29;hadoopqa;Testing JIRA BOOKKEEPER-581


Patch [BOOKKEEPER-581.patch|https://issues.apache.org/jira/secure/attachment/12572162/BOOKKEEPER-581.patch] downloaded at Tue Mar  5 20:59:16 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 819
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/283/","25/Mar/13 17:01;ikelly;Nice changes. It's good to get rid of that bit of code modifying lastAddConfirmed in PendingReadOp. I think eventually it would be good to make LedgerMetadata immutable, but this fix is good for now.

Committing +1.
",25/Mar/13 17:03;ikelly;Committed as r1460765. Thanks Sijie.,"25/Mar/13 17:53;hudson;Integrated in bookkeeper-trunk #154 (See [https://builds.apache.org/job/bookkeeper-trunk/154/])
    BOOKKEEPER-581: Ledger recovery doesn't work correctly when recovery adds force changing ensembles. (sijie via ivank) (Revision 1460765)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java
",07/Jun/13 10:47;ikelly;Committed to branch-4.2 as r1490578. Some changes to imports had to be manually merged. Final patch uploaded.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper bookies need to store ledger keys with ledger fragments,BOOKKEEPER-680,12421790,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,,breed,breed,01/Apr/09 15:59,09/Oct/17 11:47,13/Mar/19 22:16,09/Oct/17 11:47,,,,,,,,0,,"currently ledger keys are stored in memory; however, we need to restrict access even after reboots so it needs to be in nonvolatile storage. the most obvious solution would be to store the ledger keys with the ledger fragments on the bookie.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-06 08:45:50.81,,,no_permission,,,,,,,,,,,,,214105,,,Fri Sep 06 08:45:50 UTC 2013,,,,,,0|i0615j:,33118,,,,,,,,"06/Sep/13 08:45;fpj;We haven't migrated this jira, moving it to the right project.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Client requests get no response when exception is thrown inside socket loop of NIOServerFactory,BOOKKEEPER-24,12509086,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,,fpj,fpj,02/Jun/11 13:46,09/Oct/17 09:56,13/Mar/19 22:16,09/Oct/17 09:56,,,,,,,,0,,"In the run method of NIOServerFactory, if an exception is thrown, then we catch it and simply log. If this exception has been generated, for example, while processing an addEntry, then the client receives no response for that request.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,72264,,,2011-06-02 13:46:26.0,,,,,,0|i143af:,231995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookkeeper-server readme file is outdated,BOOKKEEPER-42,12518497,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,,fpj,fpj,10/Aug/11 18:40,09/Oct/17 09:56,13/Mar/19 22:16,09/Oct/17 09:56,,,,,,,,0,,The information in the file is outdated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,65544,,,2011-08-10 18:40:57.0,,,,,,0|i1439j:,231991,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
image folder under docs directory is missing from BookKeeper project,BOOKKEEPER-377,12604560,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,,kiran_bc,kiran_bc,23/Aug/12 04:29,09/Oct/17 09:48,13/Mar/19 22:16,09/Oct/17 09:48,4.2.0,,,,bookkeeper-server,,,0,,"Image folder has to be under docs directory for BookKeeper project.
When I was validating the links, I got the error as file missing.
When I went to the project and checked, the image was not displayed for BookKeeper Overview.
",,,,,,,,,,,,,,,,23/Aug/12 05:24;kiran_bc;bk-overview.jpg;https://issues.apache.org/jira/secure/attachment/12542088/bk-overview.jpg,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-23 12:53:26.936,,,no_permission,,,,,,,,,,,,,295930,,,Thu Aug 23 12:53:26 UTC 2012,,,,,,0|i1431z:,231957,,,,,,,,"23/Aug/12 05:24;kiran_bc;The attached screenshot shows that the image is missing from the page.
The expected folder structure is:
http://zookeeper.apache.org/bookkeeper/docs/r4.1.0/images/","23/Aug/12 12:53;ikelly;It looks like when we moved out from Zookeeper to being a full subproject, we didn't copy them images folder across. Have a look at the docs for zookeeper 3.3.1. bk-overview.jpg is in the image folder for that.

There's two parts to fix this. a) move the images folder back in to docs and commit to svn. b) manually add the images folder for the releases.

You can do a). b) can only be done by a committer at commit time. 

There's details on building the docs here: https://cwiki.apache.org/confluence/display/BOOKKEEPER/Building+documentation",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PerChannelBookieClient#channelDisconnected can error out other channel's requests,BOOKKEEPER-671,12663381,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,,ikelly,ikelly,13/Aug/13 09:47,09/Oct/17 09:39,13/Mar/19 22:16,09/Oct/17 09:39,4.2.1,,,,bookkeeper-client,,,0,,"Consider the following.

# Client calls connect() [state=CONNECTING]
# Client calls disconnect() before connect finishes [state=DISCONNECTED]
# Client calls connect() [state=CONNECTING]
# Connect completes, client writes request [state=CONNECTED]
# channelDisconnected() from previous disconnect() called

The #channelDisconnected() call will then error out the write request. This is due to the fact that the outstanding request map belongs to the PerChannelBookieClient, rather than to the channel, even though they should belong to the socket on which they were sent out on.

The solution would be to move the completions into the ChannelHandlerContext. At the same time, we can get rid of the separate read and add lists. This information can be in the keys. Perhaps this fix can be done as part of the transaction id changes.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-10 02:21:34.845,,,no_permission,,,,,,,,,,,,,343382,,,Mon Mar 10 02:21:34 UTC 2014,,,,,,0|i1n7uv:,343686,,,,,,,,"10/Mar/14 02:21;hustlmsp;moved it out of 4.3.0, which seems to do refactoring ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper website menus not working under https,BOOKKEEPER-1101,13088111,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,zhaijia,zhaijia,zhaijia,19/Jul/17 02:35,19/Jul/17 03:50,13/Mar/19 22:16,19/Jul/17 03:50,,,4.5.0,,Documentation,,,0,,"the 'Documentation', 'Get Involved' and 'Project Info' drop down menus
on https://bookkeeper.apache.org site are not working.

",,,,,,,,,,,,,,,,19/Jul/17 02:39;zhaijia;BOOKKEEPER-1101.patch;https://issues.apache.org/jira/secure/attachment/12877916/BOOKKEEPER-1101.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-07-19 03:00:45.016,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 19 03:50:20 UTC 2017,,,,,,0|i3hot3:,9223372036854775807,,,,,,,,"19/Jul/17 02:39;zhaijia;change
<script src=""http://code.jquery.com/jquery.js""></script>
into
<script src=""//code.jquery.com/jquery.js""></script>",19/Jul/17 03:00;sijie@apache.org;LGTM +1,"19/Jul/17 03:50;zhaijia;committed, and now tabs in https://bookkeeper.apache.org could work",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper Tools doesn't process the argument correctly,BOOKKEEPER-980,13024170,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sijie@apache.org,hustlmsp,hustlmsp,29/Nov/16 18:44,18/Jul/17 08:48,13/Mar/19 22:16,18/Jul/17 08:48,,,4.5.0,,,,,0,,"- IndexOutOfBoundException when not provide the dest bookie
- The tool ignored the dest bookie when provide the dest bookie",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-18 08:48:50.358,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 18 08:48:50 UTC 2017,,,,,,0|i36x3j:,9223372036854775807,,,,,,,,"18/Jul/17 08:48;zhaijia;Issue resolved by merging pull request 255
            [https://github.com/apache/bookkeeper/pull/255]

            {noformat}
            commit f47dd4272f54bb95fd38abdd6c492dbe199dd7a4
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Tue Jul 18 16:47:43 2017 +0800
Commit:     jiazhai <zhaijia@live.com>
CommitDate: Tue Jul 18 16:47:43 2017 +0800

    BOOKKEEPER-980: BookKeeper Tools doesn't process the argument correctly
    
    Descriptions of the changes in this PR:
    
    Fix the issue described in [BOOKKEEPER-980](https://issues.apache.org/jira/browse/BOOKKEEPER-980).
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Matteo Merli <None>, Venkateswararao Jujjuri (JV) <None>
    
    This closes #255 from sijie/BOOKKEEPER-980

            {noformat}
            ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable travis CI for bookkeeper git,BOOKKEEPER-989,13029576,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,20/Dec/16 22:00,02/Jun/17 16:42,13/Mar/19 22:16,01/Jun/17 21:00,,,4.5.0,,build,,,0,,Let's enable travis build for bookkeeper project.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-21 07:49:33.548,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 02 16:42:30 UTC 2017,,,,,,0|i37ugf:,9223372036854775807,,,,,,,,21/Dec/16 07:49;eolivelli;[~hustlmsp] Apache Jenkins CI is not enough ?,25/May/17 01:35;sijie@apache.org;[~eolivelli] it is easier for people to test their branches on travis. they can enable travis for their folks.,"25/May/17 16:04;eolivelli;Ok for me. 
I never used travis. I am curious to see
","26/May/17 17:05;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/168

    BOOKKEEPER-989: Enable Travis CI for Apache BookKeeper

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper enable_travis_ci

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/168.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #168
    
----
commit f40e16818f3a182cd9dd714f1cb4bee0cbdf5301
Author: Sijie Guo <sijie@apache.org>
Date:   2017-05-26T17:01:37Z

    BOOKKEEPER-989: Enable Travis CI for Apache BookKeeper

----
","26/May/17 17:54;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    It sounds really interesting! 
    
    One question, can you use linux as os? Instead of mac.
    Is there any reason for using mac?
","26/May/17 18:02;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    we can configure it to run on both linux and mac. 
","01/Jun/17 07:08;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    for the travis ci, I am holding this off until we addressed the failed tests in master.
","01/Jun/17 07:11;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    @sijie I am testing locally @merlimat patch for failed tests and I will merge as soon as the tests are OK on my laptop (within max 30 minutes)
","01/Jun/17 19:20;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    https://travis-ci.org/apache/bookkeeper/jobs/238455091 somehow the tests are taking much longer time than they are running on jenkins (or laptop).
    
    `
    Running org.apache.bookkeeper.client.BookieRecoveryTest
    Tests run: 120, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 348.205 sec - in org.apache.bookkeeper.client.BookieRecoveryTest
    Running org.apache.bookkeeper.client.BookieWriteLedgersWithDifferentDigestsTest
    Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 43.16 sec - in org.apache.bookkeeper.client.BookieWriteLedgersWithDifferentDigestsTest
    Running org.apache.bookkeeper.client.BookieWriteLedgerTest
    Tests run: 120, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 772.72 sec - in org.apache.bookkeeper.client.BookieWriteLedgerTest
    `
    
    so let's disable running tests on travis, just use travis for valiating rat and findbugs. we can improve our tests later to see how we can address that.
","01/Jun/17 20:35;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    @eolivelli @merlimat @jiazhai if there is no objections, I am going to merge this one.
","01/Jun/17 20:39;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    Ok
    
    Il gio 1 giu 2017, 22:35 Sijie Guo <notifications@github.com> ha scritto:
    
    > @eolivelli <https://github.com/eolivelli> @merlimat
    > <https://github.com/merlimat> @jiazhai <https://github.com/jiazhai> if
    > there is no objections, I am going to merge this one.
    >
    > —
    > You are receiving this because you were mentioned.
    >
    >
    > Reply to this email directly, view it on GitHub
    > <https://github.com/apache/bookkeeper/pull/168#issuecomment-305612528>,
    > or mute the thread
    > <https://github.com/notifications/unsubscribe-auth/AJB8tl9KK8s2Fb3rT36D_QNUiC-UL4Evks5r_yCJgaJpZM4Nn1z4>
    > .
    >
    -- 
    
    
    -- Enrico Olivelli

","01/Jun/17 20:40;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    Ok
","01/Jun/17 21:00;sijie@apache.org;Issue resolved by merging pull request 168
            [https://github.com/apache/bookkeeper/pull/168]

            {noformat}
            commit 55d1dc45c4761f150c59a34b94d21e39e69f872c
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Thu Jun 1 13:59:44 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Thu Jun 1 13:59:44 2017 -0700

    BOOKKEEPER-989: Enable Travis CI for Apache BookKeeper
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>, Jia Zhai <None>, Matteo Merli <mmerli@apache.org>
    
    Closes #168 from sijie/enable_travis_ci

            {noformat}
            ","01/Jun/17 21:00;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/168
","02/Jun/17 01:04;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    Is the plan to move to Travis from Jenkins?? Any reason to go with Travis instead of Circle?
","02/Jun/17 13:24;hudson;SUCCESS: Integrated in Jenkins build bookkeeper-master #1772 (See [https://builds.apache.org/job/bookkeeper-master/1772/])
BOOKKEEPER-989: Enable Travis CI for Apache BookKeeper (sijie: rev 55d1dc45c4761f150c59a34b94d21e39e69f872c)
* (add) dev/ticktoc.sh
* (add) .travis.yml
","02/Jun/17 16:42;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/168
  
    @jvrao I am open to move from travis to jenkins. but I think there is value for keep both. the reason I added travis: people can enable travis ci on their folks, so it can use travis ci to verify the build before sending a pull request.
    
    I haven't used Circle before. Any ideas on what are the differences? I am not sure if Apache INFRA support circle or not.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove JMX Bean ,BOOKKEEPER-1074,13074721,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,l4stewar,sijie@apache.org,sijie@apache.org,25/May/17 03:20,01/Jun/17 15:21,13/Mar/19 22:16,01/Jun/17 11:21,,,4.5.0,,bookkeeper-stats,,,0,,"JMX Bean was the old fashion used for exporting metrics. It was introduced before stats-provider introduced. Now stats-provider is there. Let's remove JMX Bean.

It is the change ported from Twitter branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-25 03:29:05.462,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 01 15:21:19 UTC 2017,,,,,,0|i3ffzj:,9223372036854775807,,,,,,,,"25/May/17 03:29;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/161

    BOOKKEEPER-1074: Remove JMX Bean

    This change is based on #160 , the change here is: gitsha [b3be81f](https://github.com/sijie/bookkeeper/commit/b3be81fadae50f2d4a2e938c2735fa35c6c31421)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper remove_jmx_beam

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/161.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #161
    
----
commit 88a0cc02789165f5220086244378007189f382d5
Author: Sijie Guo <sijie@apache.org>
Date:   2017-05-25T02:07:27Z

    Add twitter-finagle-provider

commit fba0e92f5b586aa5885dfce072df3913b1ef3e92
Author: Sijie Guo <sijie@apache.org>
Date:   2017-05-25T02:52:01Z

    Resolve the conflicts with merges

commit 085a2f59db9550b28c4bb9aa7035771f42875a1c
Author: Sijie Guo <sijie@apache.org>
Date:   2017-05-25T03:05:11Z

    Add missing license header

commit b3be81fadae50f2d4a2e938c2735fa35c6c31421
Author: Sijie Guo <sijieg@twitter.com>
Date:   2015-06-05T17:25:16Z

    Remove JMX from bookkeeper
    
    * for compatability with zk 3.5
    * as we use StatsProvider, we don't need JMX anymore.
    
    RB_ID=682432

----
","25/May/17 11:34;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    For me is +1
    I am using stats loggers to get JMX stats too
    
    @jvrao @merlimat @revans2 are you OK for dropping this ?
","25/May/17 16:09;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    This was an obsoleted sets of stats that was superseded by the stats loggers. All the info should be accessible from there already.
","26/May/17 10:41;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    ping @jvrao
","01/Jun/17 07:48;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    @sijie this PR needs rebase
","01/Jun/17 07:51;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    @eolivelli I will rebase and merge it.
","01/Jun/17 11:12;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    rebased.
","01/Jun/17 11:16;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    @sijie I will merge this
","01/Jun/17 11:20;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/161
","01/Jun/17 11:21;eolivelli;Issue resolved by merging pull request 161
            [https://github.com/apache/bookkeeper/pull/161]

            {noformat}
            commit dd08ce1a644de00967dd5fe34ce15caa9789d775
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Thu Jun 1 13:19:58 2017 +0200
Commit:     Enrico Olivelli <eolivelli@apache.org>
CommitDate: Thu Jun 1 13:19:58 2017 +0200

    BOOKKEEPER-1074: Remove JMX Bean
    
    This change is based on #160 , the change here is: gitsha [b3be81f](https://github.com/sijie/bookkeeper/commit/b3be81fadae50f2d4a2e938c2735fa35c6c31421)
    
    Author: Sijie Guo <sijie@apache.org>
    Author: Sijie Guo <sijieg@twitter.com>
    
    Reviewers: Enrico Olivelli, Matteo Merli
    
    Closes #161 from sijie/remove_jmx_beam

            {noformat}
            ","01/Jun/17 13:23;hudson;SUCCESS: Integrated in Jenkins build bookkeeper-master #1771 (See [https://builds.apache.org/job/bookkeeper-master/1771/])
BOOKKEEPER-1074: Remove JMX Bean (eolivelli: rev dd08ce1a644de00967dd5fe34ce15caa9789d775)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieBean.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheMXBean.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/jmx/BKMBeanInfo.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheBean.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/jmx/BKMBeanRegistry.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java
* (delete) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieMXBean.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java
","01/Jun/17 15:21;githubbot;Github user reddycharan commented on the issue:

    https://github.com/apache/bookkeeper/pull/161
  
    @jvrao @sijie we are using JMX not just for metrics (getters) but also for invoking actions, like forcecompact, forceflush,.. It is the easiest way to do out-of-band inter process communications for administrative/management purpose. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Several stats provider related changes.,BOOKKEEPER-1073,13074719,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,l4stewar,sijie@apache.org,sijie@apache.org,25/May/17 02:54,01/Jun/17 11:52,13/Mar/19 22:16,01/Jun/17 06:57,,,4.5.0,,bookkeeper-stats,,,0,,"Merge changes from twitter's branch:

- add finagle stats provider
- provide the ability to remove gauge and scopes
- update jetty versions for twitter-sciences stats provider",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-25 02:56:10.427,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 01 11:52:25 UTC 2017,,,,,,0|i3ffz3:,9223372036854775807,,,,,,,,"25/May/17 02:56;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/160

    BOOKKEEPER-1073: Several stats provider related changes.

    - add finagle stats provider
    - provide the ability to remove gauge and scopes
    - update jetty versions for twitter-sciences stats provider

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper add_channel_writer_timer

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/160.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #160
    
----
commit 88a0cc02789165f5220086244378007189f382d5
Author: Sijie Guo <sijie@apache.org>
Date:   2017-05-25T02:07:27Z

    Add twitter-finagle-provider

commit fba0e92f5b586aa5885dfce072df3913b1ef3e92
Author: Sijie Guo <sijie@apache.org>
Date:   2017-05-25T02:52:01Z

    Resolve the conflicts with merges

----
","25/May/17 02:58;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/160
  
    Changes were made from multiple folks at Twitter. I just ported these changes back to the community.
    
    @yzang @leighst 
","31/May/17 08:21;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/160
  
    @sijie can you rebase
","01/Jun/17 05:57;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/160
  
    +1 still great.
    I am going to merge, or @sijie are you merging?
","01/Jun/17 06:00;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/160
  
    @eolivelli feel free to merge.
","01/Jun/17 06:56;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/160
","01/Jun/17 06:57;eolivelli;Issue resolved by merging pull request 160
            [https://github.com/apache/bookkeeper/pull/160]

            {noformat}
            commit fc51f73cbc9cdaae9876bc08cafa3e7a80826207
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Thu Jun 1 08:55:45 2017 +0200
Commit:     Enrico Olivelli <eolivelli@apache.org>
CommitDate: Thu Jun 1 08:55:45 2017 +0200

    BOOKKEEPER-1073: Several stats provider related changes.
    
    - add finagle stats provider
    - provide the ability to remove gauge and scopes
    - update jetty versions for twitter-sciences stats provider
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Jia Zhai, Enrico Olivelli
    
    Closes #160 from sijie/add_channel_writer_timer

            {noformat}
            ","01/Jun/17 11:52;hudson;UNSTABLE: Integrated in Jenkins build bookkeeper-master #1770 (See [https://builds.apache.org/job/bookkeeper-master/1770/])
BOOKKEEPER-1073: Several stats provider related changes. (eolivelli: rev fc51f73cbc9cdaae9876bc08cafa3e7a80826207)
* (edit) bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java
* (add) bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/CounterImpl.java
* (edit) bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java
* (edit) pom.xml
* (add) bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsLoggerImpl.java
* (add) bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsProvider.java
* (edit) bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java
* (edit) bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java
* (edit) bookkeeper-stats-providers/twitter-science-provider/pom.xml
* (edit) bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java
* (add) bookkeeper-stats-providers/twitter-finagle-provider/pom.xml
* (edit) bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java
* (add) bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsProvider.java
* (edit) bookkeeper-stats-providers/pom.xml
* (add) bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/OpStatsLoggerImpl.java
* (add) bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsLogger.java
* (edit) bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java
* (edit) bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java
* (edit) bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve the merge script to handle github reviews api,BOOKKEEPER-1021,13061227,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sijie@apache.org,sijie@apache.org,sijie@apache.org,03/Apr/17 19:13,26/May/17 16:56,13/Mar/19 22:16,26/May/17 12:53,,,4.5.0,,build,,,0,,"Current script doesn't handle the new reviews API. 

We need to improve the merge script to handle the new review API.

https://developer.github.com/v3/pulls/reviews/

We can do similar thing like what DistributedLog is doing.

https://github.com/apache/incubator-distributedlog/blob/master/scripts/dev/dl-merge-pr.py",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-03 20:38:11.096,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Fri May 26 16:56:53 UTC 2017,,,,,,0|i3d5en:,9223372036854775807,,,,,,,,"03/Apr/17 20:38;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/123

    BOOKKEEPER-1021: Improve merge script to handle github reviews api

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper sijie/improve_merge_scripts

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/123.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #123
    
----
commit b710d500ff439cb02d117ffa7b59090cdc7c5bfd
Author: Sijie Guo <sijie@apache.org>
Date:   2017-03-22T23:47:26Z

    Improve merge script

commit e339aa8f1453627d12a2e31206593a96c235d675
Author: Sijie Guo <sijie@apache.org>
Date:   2017-03-23T03:47:59Z

    Fix Findbugs Errors

commit 8ab205f40164931d97e7032f6bdebe6423c022d0
Author: Sijie Guo <sijie@apache.org>
Date:   2017-04-03T19:22:01Z

    BOOKKEEPER-1021: Improve merge script to handle github reviews api

commit 13746a2aa7918610b115adf206a5f48d1820a739
Author: Sijie Guo <sijie@apache.org>
Date:   2017-04-03T19:22:43Z

    Merge branch 'master' into sijie/improve_merge_scripts

commit a66f26e30eae2a72945a0580bbb5fdb54d257f2e
Author: Sijie Guo <sijie@apache.org>
Date:   2017-04-03T19:24:11Z

    fix

commit 6029c8ef88527bfa601813189b91c5f2012651f3
Author: Sijie Guo <sijie@apache.org>
Date:   2017-04-03T19:29:29Z

    fix

commit 8cb62dc9f3120006f0180d6b3d39f5206b390c0f
Author: Sijie Guo <sijie@apache.org>
Date:   2017-04-03T20:36:40Z

    Merge remote-tracking branch 'origin/master' into sijie/improve_merge_scripts

----
","11/Apr/17 06:28;sijie@apache.org;Issue resolved by merging pull request 123
            [https://github.com/apache/bookkeeper/pull/123]

            {noformat}
            commit ab707d2c6b3251b2a9a30a6d14074704460b3da5
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Mon Apr 10 23:28:37 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon Apr 10 23:28:37 2017 -0700

    BOOKKEEPER-1021: Improve merge script to handle github reviews api
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Govind Menon <None>
    
    Closes #123 from sijie/sijie/improve_merge_scripts

            {noformat}
            ","11/Apr/17 06:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/123
","11/Apr/17 13:37;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1715 (See [https://builds.apache.org/job/bookkeeper-master/1715/])
BOOKKEEPER-1021: Improve merge script to handle github reviews api (sijie: rev ab707d2c6b3251b2a9a30a6d14074704460b3da5)
* (edit) dev/bk-merge-pr.py
","15/Apr/17 12:06;eolivelli;I am reopening the issue because I got this error while trying to merge a PR.
{code}
$$ python dev/bk-merge-pr.py
  File ""dev/bk-merge-pr.py"", line 415
    useremail = user['email'].strip() if user['email'] or None
                                                             ^
SyntaxError: invalid syntax
{code}

I'm running Python 2.7.13

In order to run the tool I have changed the file locally but I'm not an expert of Python so I will not submit a patch","25/May/17 01:36;sijie@apache.org;[~eolivelli] I think this is fixed, right?","26/May/17 12:53;eolivelli;Yes it is OK now.

I noticed that GitHub does not give access to user emails of other users anymore.

If I use my own Oauth token my email as ""reviewer"" is returned.

I wonder If we can drop the reviewer email from commit messages (actually I am often rewriting the message dropping the <None> strings)
",26/May/17 16:56;sijie@apache.org;I believe you need to make your email public.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper: Local Bookie Journal and ledger paths,BOOKKEEPER-1077,13074734,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sijie@apache.org,sijie@apache.org,sijie@apache.org,25/May/17 03:58,26/May/17 13:48,13/Mar/19 22:16,26/May/17 10:38,,,4.5.0,,bookkeeper-server,,,0,,"Use the journal directory and ledger paths specified in the configuration file passed in to local bookie. Before this change local bookie was always creating directories in the temp folder
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-26 10:38:54.454,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Fri May 26 13:48:52 UTC 2017,,,,,,0|i3fg2f:,9223372036854775807,,,,,,,,"26/May/17 10:38;eolivelli;Issue resolved by merging pull request 163
            [https://github.com/apache/bookkeeper/pull/163]

            {noformat}
            commit 6698912e4d35119a2e85a6ea3877c6771073489c
Author:     Sijie Guo <sijieg@twitter.com>
AuthorDate: Fri May 26 12:38:28 2017 +0200
Commit:     eolivelli <eolivelli@apache.org>
CommitDate: Fri May 26 12:38:28 2017 +0200

    BOOKKEEPER-1077: Allow configuration journal/ledger paths for local bookkeeper.
    
    Author: Sijie Guo <sijieg@twitter.com>
    Author: Robin Dhamankar <rdhamankar@twitter.com>
    
    Reviewers: Enrico Olivelli <eolivelli@apache.org>
    
    Closes #163 from sijie/to_string_mark

            {noformat}
            ","26/May/17 13:48;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1761 (See [https://builds.apache.org/job/bookkeeper-master/1761/])
BOOKKEEPER-1077: Allow configuration journal/ledger paths for local (eolivelli: rev 6698912e4d35119a2e85a6ea3877c6771073489c)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BK LedgerMetadata: more memory-efficient parsing of configs,BOOKKEEPER-1075,13074726,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,l4stewar,sijie@apache.org,sijie@apache.org,25/May/17 03:33,25/May/17 13:23,13/Mar/19 22:16,25/May/17 12:32,,,4.5.0,,bookkeeper-client,,,0,,"Looking at the most prevalent client-side memory allocations, I noticed that we allocate 4KB every time we open a ledger. This is caused by allocating a 4KB buffer (in TextFormat.toStringBuilder) to account for the maximum possible Protobufs message, which is unnecessary in our case: we know the exact size of the metadata ( << 500 B) and don't need to allocate more.
    TextFormat.merge(Readable, Message.Builder) is the current method we use. This changes to use TextFormat.merge(CharSequence, Message.Builder), which avoids the extra 4K allocation conversion + an extra StringBuilder.

It is the contribution from Alex Yarmula

{quote}
commit 9d9d7dd26235a9beda4421b7bed750fea1789076
Author: Alex Yarmula <ak@twitter.com>
Date:   Wed Sep 23 05:57:30 2015 -0700

    BK LedgerMetadata: more memory-efficient parsing of configs

    Looking at the most prevalent client-side memory allocations, I noticed that we allocate 4KB every time we open a ledger. This is caused by allocating a 4KB buffer (in TextFormat.toStringBuilder) to account for the maximum possible Protobufs message, which is unnecessary in our case: we know the exact size of the metadata ( << 500 B) and don't need to allocate more.
    TextFormat.merge(Readable, Message.Builder) is the current method we use. This changes to use TextFormat.merge(CharSequence, Message.Builder), which avoids the extra 4K allocation conversion + an extra StringBuilder.
    RB_ID=745700
{quote}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-25 03:42:38.709,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu May 25 13:23:07 UTC 2017,,,,,,0|i3fg0n:,9223372036854775807,,,,,,,,"25/May/17 03:42;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/162

    BOOKKEEPER-1075: BK LedgerMetadata: more memory-efficient parsing of configs

    It is the contribution from Alex Yarmula
    
    commit 9d9d7dd26235a9beda4421b7bed750fea1789076
    Author: Alex Yarmula <ak@twitter.com>
    Date: Wed Sep 23 05:57:30 2015 -0700
    
    BK LedgerMetadata: more memory-efficient parsing of configs
    Looking at the most prevalent client-side memory allocations, I noticed that we allocate 4KB every time we open a ledger. This is caused by allocating a 4KB buffer (in TextFormat.toStringBuilder) to account for the maximum possible Protobufs message, which is unnecessary in our case: we know the exact size of the metadata ( << 500 B) and don't need to allocate more.
    TextFormat.merge(Readable, Message.Builder) is the current method we use. This changes to use TextFormat.merge(CharSequence, Message.Builder), which avoids the extra 4K allocation conversion + an extra StringBuilder.
    
    RB_ID=745700

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper bk_ledger_metadata_efficiency

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/162.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #162
    
----

----
","25/May/17 12:28;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/162
  
    +1 LGTM
","25/May/17 12:32;eolivelli;Issue resolved by merging pull request 162
            [https://github.com/apache/bookkeeper/pull/162]

            {noformat}
            commit 64bedc2f92d5bb17783c6ea2a2db7ea29170f264
Author:     Alex Yarmula <ak@twitter.com>
AuthorDate: Thu May 25 14:31:57 2017 +0200
Commit:     eolivelli <eolivelli@apache.org>
CommitDate: Thu May 25 14:31:57 2017 +0200

    BOOKKEEPER-1075: BK LedgerMetadata: more memory-efficient parsing of configs
    
    It is the contribution from Alex Yarmula
    
    commit 9d9d7dd26235a9beda4421b7bed750fea1789076
    Author: Alex Yarmula <aktwitter.com>
    Date: Wed Sep 23 05:57:30 2015 -0700
    
    BK LedgerMetadata: more memory-efficient parsing of configs
    Looking at the most prevalent client-side memory allocations, I noticed that we allocate 4KB every time we open a ledger. This is caused by allocating a 4KB buffer (in TextFormat.toStringBuilder) to account for the maximum possible Protobufs message, which is unnecessary in our case: we know the exact size of the metadata ( << 500 B) and don't need to allocate more.
    TextFormat.merge(Readable, Message.Builder) is the current method we use. This changes to use TextFormat.merge(CharSequence, Message.Builder), which avoids the extra 4K allocation conversion + an extra StringBuilder.
    
    RB_ID=745700
    
    Author: Alex Yarmula <ak@twitter.com>
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Enrico Olivelli, Sijie Guo
    
    Closes #162 from sijie/bk_ledger_metadata_efficiency

            {noformat}
            ","25/May/17 12:32;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/162
","25/May/17 13:23;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1760 (See [https://builds.apache.org/job/bookkeeper-master/1760/])
BOOKKEEPER-1075: BK LedgerMetadata: more memory-efficient parsing of (eolivelli: rev 64bedc2f92d5bb17783c6ea2a2db7ea29170f264)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompactionTest is flaky when disks are almost full,BOOKKEEPER-1072,13074705,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sijie@apache.org,sijie@apache.org,sijie@apache.org,25/May/17 01:31,25/May/17 11:39,13/Mar/19 22:16,25/May/17 11:38,,,4.5.0,,bookkeeper-server,,,0,,"The tests will fail when the disks are almost full. Because it will trigger force compaction.

Set the threshold to 0.99 for tests to make it more reliable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-25 11:39:35.333,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu May 25 11:39:35 UTC 2017,,,,,,0|i3ffvz:,9223372036854775807,,,,,,,,"25/May/17 11:39;eolivelli;this was the PR https://github.com/apache/bookkeeper/pull/159
a typo in the title made the PR not linkable to the JIRA issue",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ignore already deleted ledger on replication audit,BOOKKEEPER-1058,13070900,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,mmerli,mmerli,10/May/17 18:18,16/May/17 13:36,13/Mar/19 22:16,15/May/17 17:32,,,4.5.0,,,,,0,,Replication auditor should skip ledgers that were deleted since the auditing was started.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-10 18:20:11.248,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 13:36:06 UTC 2017,,,,,,0|i3esfz:,9223372036854775807,,,,,,,,"10/May/17 18:20;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/146

    BOOKKEEPER-1058: Ignore already deleted ledger on replication audit

    Replication auditor should skip ledgers that were deleted since the auditing was started.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper ignore-deleted-ledgers-in-replication

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/146.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #146
    
----
commit 59f8f4edd2c1550087216a70c07b3bffe3e17a39
Author: rdhabalia <rdhabalia@yahoo-inc.com>
Date:   2017-02-07T20:00:58Z

    BOOKKEEPER-1058: Ignore already deleted ledger on replication audit

----
","11/May/17 05:53;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/146
  
    @athanatos did we do the same fix internally? 
","15/May/17 17:32;sijie@apache.org;Issue resolved by merging pull request 146
            [https://github.com/apache/bookkeeper/pull/146]

            {noformat}
            commit 811ece53a1c975c4e768422f3d622ac9de6b3e41
Author:     rdhabalia <rdhabalia@yahoo-inc.com>
AuthorDate: Mon May 15 10:32:26 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon May 15 10:32:26 2017 -0700

    BOOKKEEPER-1058: Ignore already deleted ledger on replication audit
    
    Replication auditor should skip ledgers that were deleted since the auditing was started.
    
    Author: rdhabalia <rdhabalia@yahoo-inc.com>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>
    
    Closes #146 from merlimat/ignore-deleted-ledgers-in-replication

            {noformat}
            ","15/May/17 17:32;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/146
","16/May/17 13:36;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1750 (See [https://builds.apache.org/job/bookkeeper-master/1750/])
BOOKKEEPER-1058: Ignore already deleted ledger on replication audit (sijie: rev 811ece53a1c975c4e768422f3d622ac9de6b3e41)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow client to select older V2 protocol (no protobuf),BOOKKEEPER-1018,13059492,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,govindmenon,govindmenon,govindmenon,27/Mar/17 19:13,15/Apr/17 12:58,13/Mar/19 22:16,03/Apr/17 19:34,,,4.5.0,,bookkeeper-server,,,0,,Oriignally done by Matteo Merli,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-29 00:06:11.193,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 15 12:58:10 UTC 2017,,,,,,0|i3cupb:,9223372036854775807,,,,,,,,"29/Mar/17 00:06;githubbot;GitHub user govind-menon opened a pull request:

    https://github.com/apache/bookkeeper/pull/120

    BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf)

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/govind-menon/bookkeeper BOOKKEEPER-1018

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/120.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #120
    
----
commit 3529ea9f3b7054180f0fa783c5a799e9948301fa
Author: Govind Menon <govindappumenon@gmail.com>
Date:   2017-03-29T00:04:41Z

    BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf)

----
","03/Apr/17 19:32;sijie@apache.org;Issue resolved by merging pull request 120
            [https://github.com/apache/bookkeeper/pull/120]

            {noformat}
            commit 9001e300ce0d5d2655d437e3eaa52f91487caed6
Author:     Govind Menon <govindappumenon@gmail.com>
AuthorDate: Mon Apr 3 12:31:47 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon Apr 3 12:31:47 2017 -0700

    BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf)
    
    Originally done by Matteo Merli (merlimat). Tagging sijie and eolivelli  for review.
    
    Author: Govind Menon <govindappumenon@gmail.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #120 from govind-menon/BOOKKEEPER-1018

            {noformat}
            ","03/Apr/17 19:32;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/120
","03/Apr/17 22:13;githubbot;GitHub user govind-menon opened a pull request:

    https://github.com/apache/bookkeeper/pull/124

    Revert ""BOOKKEEPER-1018: Allow client to select older V2 protocol (no…

    … protobuf)""
    
    This reverts commit 9001e300ce0d5d2655d437e3eaa52f91487caed6.
    
    I broke trunk - not exactly sure how - I will fix it and put up the PR again. For now I'm reverting the commit.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/govind-menon/bookkeeper BOOKKEEPER-1018-Revert

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/124.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #124
    
----
commit caa63cda006b34f4c879c4806e25fed226c94d91
Author: Govind Menon <govindappumenon@gmail.com>
Date:   2017-04-03T22:11:44Z

    Revert ""BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf)""
    
    This reverts commit 9001e300ce0d5d2655d437e3eaa52f91487caed6.

----
","03/Apr/17 22:13;githubbot;Github user govind-menon commented on the issue:

    https://github.com/apache/bookkeeper/pull/124
  
    Pinging @sijie @jvrao for review.
","04/Apr/17 01:22;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/124
","04/Apr/17 13:38;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1708 (See [https://builds.apache.org/job/bookkeeper-master/1708/])
BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf) (sijie: rev 9001e300ce0d5d2655d437e3eaa52f91487caed6)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
BOOKKEEPER-1018: Revert "": Allow client to select older V2 protocol (no… (sijie: rev f30f60889e0810a47797daf4107c0d9bc2ee998c)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
","04/Apr/17 22:02;githubbot;GitHub user govind-menon opened a pull request:

    https://github.com/apache/bookkeeper/pull/126

    BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf)

    Tested manually - running all tests locally. Will tag contributors. when ready for review (for now putting up to test via Screwdriver and manual review)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/govind-menon/bookkeeper BOOKKEEPER-1018

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/126.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #126
    
----
commit 9cb25cdfbe1c84f56078fb78ef91e7b0f35b781b
Author: Govind Menon <govindappumenon@gmail.com>
Date:   2017-04-04T15:40:18Z

    BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf)

----
","04/Apr/17 22:59;githubbot;Github user govind-menon commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    Tagging @sijie and @eolivelli  for review. Will amend test cases in a follow up.
","05/Apr/17 12:23;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @sijie  @govind-menon @merlimat 
    IMHO we should at least add a test case for the most simple cases (addEntry, readEntries, readLAC...) + basic auth
    
    So that in the future we will not forget about this ""legacy"" option, as actual is not ""legacy"" at all if Yahoo/Pulsar is using it in production
    I wonder if there is a way to automatically run the full suite with the legacy protocol and if this is really ""interesting"".
    
    Issue:
    should we implement all new features on the v2 protocol as well ? 
    I'm thinking for instance to STARTTLS and to Long Poll Reads which have not been merged yet

","05/Apr/17 13:29;githubbot;Github user revans2 commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @eolivelli I totally agree we do need some test cases for this.  The reason that we use the older API is because of the large amount of object allocation that happens with protocol buffers.  I have heard similar complains when HDFS moved to protocol buffers, but it was not fixed there either.
","05/Apr/17 14:18;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @revans2  I'm really OK with supporting the legacy protocol, let's find a way to guarantee the quality of that mode too.
    Maybe we could add  some system property to the set suite and configure a Jenkins Job to periodically run the whole suite with the V2 protocol
    @sijie  @fpj   do you think it will be possible ?
","05/Apr/17 14:56;githubbot;Github user govind-menon commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @eolivelli I can add a V2 test suite (there may be some duplication which I'll try to refactor out).
","05/Apr/17 15:19;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @govind-menon +1 for me maybe just cover the basic feature (addEntry, readEntries, readLAC...) + basic auth
    
    we will need to add new testcases for future protocol changes as well mabye we should discuss this in a separate email thread
    

","05/Apr/17 16:28;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @eolivelli 
    > So that in the future we will not forget about this ""legacy"" option, as actual is not ""legacy"" at all if Yahoo/Pulsar is using it in production
    
    I think that for long term we should converge to one single wire protocol that is both extensible and resource efficient. 
    
    BK v2 protocol has its own issues as well (which is why protobuf was introduced): 
     * Fixed binary protocol, cannot add new fields and have easy upgrade
     * Doesn't have a request id. For example if a client tries to read the same entry twice, it cannot distinguish the response for each request, thus needing additional logic in the client to keep track of it.
","06/Apr/17 22:35;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @merlimat @eolivelli - what is the deal for this pr? shall we add the tests now or doing it in a separated jira?
","06/Apr/17 22:38;githubbot;Github user govind-menon commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    I was thinking of doing it in a separate JIRA. @merlimat  Had suggested a way of running the existing test suite with the V2 protocol set.
","07/Apr/17 06:30;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    +1 for separate JIRA
    
    Overall LGTM
","07/Apr/17 07:12;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    I'm sorry I have missed some LOG.info lines
    Maybe can you @govind-menon  remove them or change to 'debug' level ?
","07/Apr/17 14:38;githubbot;Github user govind-menon commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @eolivelli @sijie Comments addressed.
","10/Apr/17 14:58;githubbot;Github user govind-menon commented on the issue:

    https://github.com/apache/bookkeeper/pull/126
  
    @sijie Good to merge? As we discussed in the meeting the test cases and other parts of the API will be a separate PR
","15/Apr/17 11:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/126
","15/Apr/17 12:58;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1719 (See [https://builds.apache.org/job/bookkeeper-master/1719/])
BOOKKEEPER-1018: Allow client to select older V2 protocol (no protobuf) (family: rev f74d07d6b96ba3e6f1270d053fa36676cf680304)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReplicationWorker.rereplicate fails to call close() on ReadOnlyLedgerHandle,BOOKKEEPER-1031,13062979,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sjust2,sjust2,sjust2,10/Apr/17 18:57,12/Apr/17 13:39,13/Mar/19 22:16,11/Apr/17 18:14,4.4.0,,4.5.0,,bookkeeper-auto-recovery,,,0,,This has the effect of permanently adding 1 listener per call into AbstractZkLedgerManager.listenerSet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-10 19:26:23.745,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 12 13:39:54 UTC 2017,,,,,,0|i3dg7r:,9223372036854775807,,,,,,,,10/Apr/17 19:14;sjust2;I've got a simple patch (can't figure out how to assign this to myself).,"10/Apr/17 19:26;githubbot;GitHub user athanatos opened a pull request:

    https://github.com/apache/bookkeeper/pull/130

    BOOKKEEPER-1031: close the ledger handle in ReplicationWorker.rerepli…

    …cate
    
    Otherwise, we build up an unbounded set of Listeners in the
    AbstractZkLedgerManager listenerSet structure which never go
    away.
    
    Signed-off-by: Samuel Just <sjust@salesforce.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/athanatos/bookkeeper forupstream/BOOKKEEPER-1031

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/130.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #130
    
----
commit f5f595b1aadbef6d36b29d2f93de7cb3bcdb67ca
Author: Samuel Just <sjust@salesforce.com>
Date:   2017-04-05T21:12:58Z

    BOOKKEEPER-1031: close the ledger handle in ReplicationWorker.rereplicate
    
    Otherwise, we build up an unbounded set of Listeners in the
    AbstractZkLedgerManager listenerSet structure which never go
    away.
    
    Signed-off-by: Samuel Just <sjust@salesforce.com>

----
",10/Apr/17 19:27;sjust2;https://github.com/apache/bookkeeper/pull/130,"10/Apr/17 19:29;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/130
  
    @sijie can you add Samuel to the contributors in JIRA so that the issue can be assigned to him?
","10/Apr/17 20:42;githubbot;Github user athanatos commented on the issue:

    https://github.com/apache/bookkeeper/pull/130
  
    Build's failing due to
    
    Tests in error:
      BookieRecoveryTest.ensurePasswordUsedForOldLedgers[4] » BKNoSuchLedgerExists
      BookieRecoveryTest.ensurePasswordUsedForOldLedgers[5] » BKNoSuchLedgerExists
    
    which seems to be broken in master.
    
    I did a bisect and found that
    
    https://github.com/apache/bookkeeper/commit/42e8f1294f206cbe51a6af669cf605833b78bf42 introduced both a hang in that test and that test failure.  https://github.com/apache/bookkeeper/commit/32ebf0ad68f85daffdec571e28206339a4d09443 fixed the hang uncovering the test failure.
",11/Apr/17 04:53;sijie@apache.org;I think it is already assigned to [~sjust2].,"11/Apr/17 04:55;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/130
  
    @athanatos I think those two are known failures. I think @eolivelli knew about it.
","11/Apr/17 17:52;githubbot;Github user athanatos commented on the issue:

    https://github.com/apache/bookkeeper/pull/130
  
    Cool, what's the next step?
","11/Apr/17 17:57;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/130
  
    We are going to merge as soon as possible. Thank you
","11/Apr/17 18:12;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/130
  
    merging now
","11/Apr/17 18:14;sijie@apache.org;Issue resolved by merging pull request 130
            [https://github.com/apache/bookkeeper/pull/130]

            {noformat}
            commit 48aa69dd0ba41f5ba7bb2b04f31172c919be4391
Author:     Samuel Just <sjust@salesforce.com>
AuthorDate: Tue Apr 11 11:14:19 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Apr 11 11:14:19 2017 -0700

    BOOKKEEPER-1031: close the ledger handle in ReplicationWorker.rereplicate
    
    …cate
    
    Otherwise, we build up an unbounded set of Listeners in the
    AbstractZkLedgerManager listenerSet structure which never go
    away.
    
    Signed-off-by: Samuel Just <sjustsalesforce.com>
    
    Author: Samuel Just <sjust@salesforce.com>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>
    
    Closes #130 from athanatos/forupstream/BOOKKEEPER-1031

            {noformat}
            ","11/Apr/17 18:14;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/130
","12/Apr/17 13:39;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1716 (See [https://builds.apache.org/job/bookkeeper-master/1716/])
BOOKKEEPER-1031: close the ledger handle in (sijie: rev 48aa69dd0ba41f5ba7bb2b04f31172c919be4391)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Release LedgerDescriptor and master-key objects when not used anymore,BOOKKEEPER-852,12820254,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,mmerli,mmerli,10/Apr/15 23:50,29/Mar/17 14:17,13/Mar/19 22:16,28/Mar/17 20:37,4.3.0,,4.5.0,,,,,0,,Maps with ledger descriptors and master-keys are not cleaned after a ledger gets deleted.,,,,,,,,,,,,,,,,11/Apr/15 00:04;mmerli;0001-BOOKKEEPER-852-Release-LedgerDescriptor-and-master-k.patch;https://issues.apache.org/jira/secure/attachment/12724705/0001-BOOKKEEPER-852-Release-LedgerDescriptor-and-master-k.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-11 00:53:11.691,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 29 14:17:25 UTC 2017,,,,,,0|i2d4s7:,9223372036854775807,,,,,,,,11/Apr/15 00:06;mmerli;Code review: https://reviews.apache.org/r/33098/,"11/Apr/15 00:53;hadoopqa;Testing JIRA BOOKKEEPER-852


Patch [0001-BOOKKEEPER-852-Release-LedgerDescriptor-and-master-k.patch|https://issues.apache.org/jira/secure/attachment/12724705/0001-BOOKKEEPER-852-Release-LedgerDescriptor-and-master-k.patch] downloaded at Sat Apr 11 00:15:43 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 949
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/922/",14/Apr/15 07:09;hustlmsp;commented at the review board.,"07/Jul/15 05:53;hustlmsp;I think a cleaner solution is to have a listener on ledger storage on ledger deletions. the ledger handle & bookie could register a listener on ledger storage, once the ledger is removed from ledger storage, release the ledger descriptor and the master key object.","08/Jul/15 13:42;mmerli;It sounds good, I'll work on a patch for it",28/Jul/15 11:39;fpj;Cancelling the patch until [~mmerli] provides one addressing the listener comment.,14/Mar/16 05:53;hustlmsp;[~merlimat] shall we include this jira for 4.4.0? since there was a patch out for review.,"15/Mar/16 00:30;mmerli;[~sijie@apache.org] I have a patch with the ""proper"" fix in the internal branch, but it depends on some other changes (namely some custom hashmap implementation). I'll try to get both submitted.","12/Nov/16 02:59;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/78

    BOOKKEEPER-852: Release LedgerDescriptor and master-key objects when not used anymore

    Maps with ledger descriptors and master-keys are not cleaned after a ledger gets deleted.
    
    For this PR, please only take a look at the last commit 18e3455. The other 2 commits are already in separate PRs. I'll rebase this PR once they'll get merged. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bk-ledger-descriptor

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/78.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #78
    
----
commit a3c0b464b9f8c49d73902518cb86faedd5785573
Author: Matteo Merli <mmerli@yahoo-inc.com>
Date:   2014-07-21T21:45:12Z

    Allow to use multiple journals in bookie

commit 95e4fe1bf7b9992529c520e22ab184c5795b3506
Author: Matteo Merli <mmerli@yahoo-inc.com>
Date:   2015-08-06T21:51:14Z

    Added Concurrent hash maps implemetations

commit 18e345572ac319c68f0f0b6ca858109450b46001
Author: Matteo Merli <mmerli@apache.org>
Date:   2015-03-07T16:57:11Z

    BOOKKEEPER-852: Release LedgerDescriptor and master-key objects when not used anymore

----
","08/Dec/16 03:33;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/78
  
    I guess this change depends on the other changes. I will try to get the other changes in today.
","23/Mar/17 09:08;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/78
  
    @revans2 @sijie  this PR is to be rebased
","23/Mar/17 12:09;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/78
  
    Great, I'll rebase this 
","23/Mar/17 18:02;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/78
  
    Rebased and added basic unit test
","28/Mar/17 20:37;sijie@apache.org;Issue resolved by merging pull request 78
            [https://github.com/apache/bookkeeper/pull/78]

            {noformat}
            commit bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6
Author:     Matteo Merli <mmerli@apache.org>
AuthorDate: Tue Mar 28 13:37:16 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Mar 28 13:37:16 2017 -0700

    BOOKKEEPER-852: Release LedgerDescriptor and master-key objects when not used anymore
    
    Maps with ledger descriptors and master-keys are not cleaned after a ledger gets deleted.
    
    For this PR, please only take a look at the last commit 18e3455. The other 2 commits are already in separate PRs. I'll rebase this PR once they'll get merged.
    
    Author: Matteo Merli <mmerli@apache.org>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #78 from merlimat/bk-ledger-descriptor

            {noformat}
            ","28/Mar/17 20:37;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/78
","29/Mar/17 03:57;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/78
  
    +1
","29/Mar/17 14:17;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1702 (See [https://builds.apache.org/job/bookkeeper-master/1702/])
BOOKKEEPER-852: Release LedgerDescriptor and master-key objects when not (sijie: rev bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java
* (add) bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageTest.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix findbugs errors on latest master,BOOKKEEPER-1013,13058450,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,sijie@apache.org,sijie@apache.org,sijie@apache.org,23/Mar/17 03:06,24/Mar/17 14:07,13/Mar/19 22:16,23/Mar/17 14:55,,,4.5.0,,bookkeeper-server,,,0,,"The multiple journal dirs change and explict-lac change introduced a few findbug errors.

{code}
[INFO] BugInstance size is 8
[INFO] Error size is 0
[INFO] Total bugs: 8
[INFO] org.apache.bookkeeper.bookie.CheckpointSourceList$CheckpointList defines compareTo(Object) and uses Object.equals() [org.apache.bookkeeper.bookie.CheckpointSourceList$CheckpointList] At CheckpointSourceList.java:[line 53] EQ_COMPARETO_USE_OBJECT_EQUALS
[INFO] Dead store to ledgerId in org.apache.bookkeeper.bookie.FileInfo.setExplicitLac(ByteBuffer) [org.apache.bookkeeper.bookie.FileInfo] At FileInfo.java:[line 140] DLS_DEAD_LOCAL_STORE
[INFO] Inconsistent synchronization of org.apache.bookkeeper.bookie.FileInfo.explicitLac; locked 85% of time [org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo, org.apache.bookkeeper.bookie.FileInfo] Unsynchronized access at FileInfo.java:[line 118]Unsynchronized access at FileInfo.java:[line 145]Synchronized access at FileInfo.java:[line 121]Synchronized access at FileInfo.java:[line 122]Synchronized access at FileInfo.java:[line 123]Synchronized access at FileInfo.java:[line 124]Synchronized access at FileInfo.java:[line 125]Synchronized access at FileInfo.java:[line 134]Synchronized access at FileInfo.java:[line 137]Synchronized access at FileInfo.java:[line 138]Synchronized access at FileInfo.java:[line 140]Synchronized access at FileInfo.java:[line 135]Synchronized access at FileInfo.java:[line 141]Synchronized access at FileInfo.java:[line 143] IS2_INCONSISTENT_SYNC
[INFO] Inconsistent synchronization of org.apache.bookkeeper.client.LedgerHandle.length; locked 90% of time [org.apache.bookkeeper.client.ReadOnlyLedgerHandle$MetadataUpdater, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerHandle, org.apache.bookkeeper.client.LedgerRecoveryOp, org.apache.bookkeeper.client.LedgerHandle$2] Unsynchronized access at ReadOnlyLedgerHandle.java:[line 59]Synchronized access at LedgerHandle.java:[line 259]Synchronized access at LedgerHandle.java:[line 777]Synchronized access at LedgerHandle.java:[line 777]Synchronized access at LedgerHandle.java:[line 1360]Synchronized access at LedgerHandle.java:[line 249]Synchronized access at LedgerHandle.java:[line 249]Synchronized access at LedgerHandle.java:[line 250]Synchronized access at LedgerHandle.java:[line 976]Synchronized access at LedgerRecoveryOp.java:[line 151]Synchronized access at LedgerHandle.java:[line 379] IS2_INCONSISTENT_SYNC
[INFO] Redundant nullcheck of journalDirNames, which is known to be non-null in org.apache.bookkeeper.conf.ServerConfiguration.getJournalDirs() [org.apache.bookkeeper.conf.ServerConfiguration] Redundant null check at ServerConfiguration.java:[line 631] RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE
[INFO] Argument of type String[] formatted in useless way in org.apache.bookkeeper.proto.BookieServer.main(String[]) [org.apache.bookkeeper.proto.BookieServer] At BookieServer.java:[line 420] VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY
[INFO] Dead store to entrySize in org.apache.bookkeeper.proto.PerChannelBookieClient.writeLac(long, byte[], long, ChannelBuffer, BookkeeperInternalCallbacks$WriteLacCallback, Object) [org.apache.bookkeeper.proto.PerChannelBookieClient] At PerChannelBookieClient.java:[line 390] DLS_DEAD_LOCAL_STORE
[INFO] Futile attempt to change max pool size of ScheduledThreadPoolExecutor in new org.apache.bookkeeper.util.OrderedSafeExecutor(String, int, ThreadFactory, StatsLogger, boolean, long) [org.apache.bookkeeper.util.OrderedSafeExecutor] At OrderedSafeExecutor.java:[line 186] DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR
[INFO]

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-23 03:52:57.181,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 24 14:07:06 UTC 2017,,,,,,0|i3co9z:,9223372036854775807,,,,,,,,"23/Mar/17 03:52;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/118

    BOOKKEEPER-1013 - Fix findbugs errors on latest master

    - 100% synchronization on _explicitLac_ on FileInfo
    - 100% synchronization on _length_ on LedgerHandle
    - fixed the print format issue on journal dir names array
    - fix checkpointsource list hashCode, equals()

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper sijie/bk_1013

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/118.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #118
    
----
commit e339aa8f1453627d12a2e31206593a96c235d675
Author: Sijie Guo <sijie@apache.org>
Date:   2017-03-23T03:47:59Z

    Fix Findbugs Errors

----
",23/Mar/17 03:53;sijie@apache.org;https://github.com/apache/bookkeeper/pull/118,"23/Mar/17 14:55;sijie@apache.org;Issue resolved by merging pull request 118
            [https://github.com/apache/bookkeeper/pull/118]

            {noformat}
            commit 3d3340be7d754af1738a117ee07e3bed04ec5547
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Thu Mar 23 10:55:12 2017 -0400
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Thu Mar 23 10:55:12 2017 -0400

    BOOKKEEPER-1013: Fix findbugs errors on latest master
    
    - 100% synchronization on _explicitLac_ on FileInfo
    - 100% synchronization on _length_ on LedgerHandle
    - fixed the print format issue on journal dir names array
    - fix checkpointsource list hashCode, equals()
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>
    
    Closes #118 from sijie/sijie/bk_1013

            {noformat}
            ","23/Mar/17 14:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/118
","24/Mar/17 13:19;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1696 (See [https://builds.apache.org/job/bookkeeper-master/1696/])
BOOKKEEPER-1013: Fix findbugs errors on latest master (sijie: rev 3d3340be7d754af1738a117ee07e3bed04ec5547)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSourceList.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
","24/Mar/17 14:07;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/118
  
    LGTM +1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper client can leak threads,BOOKKEEPER-999,13041402,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,revans2,revans2,revans2,08/Feb/17 14:44,23/Mar/17 13:18,13/Mar/19 22:16,22/Mar/17 23:52,4.4.0,,4.5.0,,bookkeeper-client,,,0,,"The client constructor

{{BookKeeper(ClientConfiguration conf, ZooKeeper zk)}}

in 4.4 and above will create a new NioClientSocketChannelFactory but does not set the ownership of that factory to true so threads are leaked.

This showed up as a failure in BookieRecoveryTest on MacOS where it has a hard coded limit of about 2000 threads in a single process, and this test was going beyond that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-08 14:46:49.524,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 23 13:18:44 UTC 2017,,,,,,0|i39snb:,9223372036854775807,,,,,,,,"08/Feb/17 14:46;githubbot;GitHub user revans2 opened a pull request:

    https://github.com/apache/bookkeeper/pull/105

    BOOKKEEPER-999: Stop leaking threads in BookKeeper client

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/revans2/bookkeeper BOOKKEEPER-999

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/105.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #105
    
----
commit b0e9a3679f76771e80cefbe67de7a1ed33fc42ad
Author: Robert (Bobby) Evans <evans@yahoo-inc.com>
Date:   2017-02-08T14:45:30Z

    BOOKKEEPER-999: Stop leaking threads in BookKeeper client

----
","08/Feb/17 15:24;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    +1 LGTM
","08/Feb/17 15:32;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    +1 this fix is good for me
    
    maybe we should consider deprecating that constructor (add a @Deprecated annocation), in favour of the official Builder for BookKeeper client
    
    @sijie  @jvrao  what do you think ?
","08/Feb/17 17:14;githubbot;Github user zzsongsg commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    +1 looks good to me.
","20/Mar/17 03:11;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    sorry for late response @eolivelli 
    
    +1 LGTM
","20/Mar/17 03:12;githubbot;Github user jiazhai commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    +1, LGTM. 
","20/Mar/17 15:04;githubbot;Github user revans2 commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    Sorry I took so long to respond.  This kind of fell off my radar for a bit.  
    
    @eolivelli  and @jiazhai 
    I am fine with deprecating that constructor but it is not going to be a simple change.  I don't like deprecating an API and continuing to use it internally.  This constructor is used in a lot of places, 28 by by my count, and some of them are not going to be simple to replace.
    
    There is no public replacement API, except  
    
    ```
    public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFactory channelFactory)
    ```
    
    which is not used at all, and looks like it too was intended to be an internal API that should be deprecated.  So if I do deprecate it I think I would rather do it on a separate JIRA/pull request.
","20/Mar/17 15:24;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    @revans2 
    I see your point. Let's create a separate JIRA.
    
    In general we need to clean up the ""public"" API, but I think this task will be for 4.6.0, now we need to finish 4.5.0.
","20/Mar/17 15:29;githubbot;Github user revans2 commented on the issue:

    https://github.com/apache/bookkeeper/pull/105
  
    I filed https://issues.apache.org/jira/browse/BOOKKEEPER-1011 for this.
","22/Mar/17 23:52;sijie@apache.org;Issue resolved by merging pull request 105
            [https://github.com/apache/bookkeeper/pull/105]

            {noformat}
            commit 32ebf0ad68f85daffdec571e28206339a4d09443
Author:     Robert (Bobby) Evans <evans@yahoo-inc.com>
AuthorDate: Wed Mar 22 16:51:48 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Wed Mar 22 16:51:48 2017 -0700

    BOOKKEEPER-999: Stop leaking threads in BookKeeper client
    
    Author: Robert (Bobby) Evans <evans@yahoo-inc.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>, Enrico Olivelli <eolivelli@gmail.com>, Jia Zhai <zhaijia03@gmail.com>, Kai S <None>, Venkateswararao Jujjuri (JV) <None>
    
    Closes #105 from revans2/BOOKKEEPER-999

            {noformat}
            ","22/Mar/17 23:52;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/105
","23/Mar/17 13:18;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1695 (See [https://builds.apache.org/job/bookkeeper-master/1695/])
BOOKKEEPER-999: Stop leaking threads in BookKeeper client (sijie: rev 32ebf0ad68f85daffdec571e28206339a4d09443)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 BookieClientTest.testWriteGaps tested,BOOKKEEPER-984,13027149,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,10/Dec/16 00:38,17/Dec/16 12:49,13/Mar/19 22:16,17/Dec/16 01:39,,,4.5.0,,bookkeeper-server,,,0,,This test is failed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-13 07:47:04.587,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat Dec 17 12:49:41 UTC 2016,,,,,,0|i37fhj:,9223372036854775807,,,,,,,,"13/Dec/16 07:47;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/91

    BOOKKEEPER-984: Fix BookieClientTest.testWriteGaps

    in commit 9359d682a1598e30364eca6021d976f911e055b2, the third field (last add confirmed) in the message. changed the test to include the lac in the test so the test logic can work as expected.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper sijie/BOOKKEEPER-984

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/91.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #91
    
----
commit b80194677e1c04b0711d557a8d5bd25e536c1fbe
Author: Sijie Guo <sijie@apache.org>
Date:   2016-12-13T07:43:31Z

    Fix BookieClientTest.testWriteGaps

----
","15/Dec/16 14:32;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/91
  
    LGTM +1
    The test is not failing anymore on my laptop
","17/Dec/16 01:39;hustlmsp;Issue resolved by merging pull request 91
            [https://github.com/apache/bookkeeper/pull/91]

            {noformat}
            commit 6d2737ca22533aed461ed71e94d2472a6664df3c
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Fri Dec 16 17:39:40 2016 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Fri Dec 16 17:39:40 2016 -0800

    BOOKKEEPER-984: Fix BookieClientTest.testWriteGaps
    
    in commit 9359d682a1598e30364eca6021d976f911e055b2, the third field (last add confirmed) in the message. changed the test to include the lac in the test so the test logic can work as expected.
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>
    
    Closes #91 from sijie/sijie/BOOKKEEPER-984

            {noformat}
            ","17/Dec/16 01:40;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/91
","17/Dec/16 12:49;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1599 (See [https://builds.apache.org/job/bookkeeper-master/1599/])
BOOKKEEPER-984: Fix BookieClientTest.testWriteGaps (sijie: rev 6d2737ca22533aed461ed71e94d2472a6664df3c)
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
issues in LedgerHandleAdv ,BOOKKEEPER-957,13013690,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,reddycharan18@gmail.com,reddycharan18@gmail.com,reddycharan18@gmail.com,19/Oct/16 22:31,09/Nov/16 13:12,13/Mar/19 22:16,09/Nov/16 07:48,,,,,,,,0,,"1)  In LedgerHandleAdv in doAsyncAddEntry method, addToLength(length) call is not synchronized

In LedgerHandleAdv in doAsyncAddEntry method, call to addToLength(length) is not synchronized.

addEntry method is supposed to be thread safe, so when addEntry method of LedgerHandleAdv is called concurrently from multiple threads, addToLength will be messed up because its call is not synchrnoized.

in LedgerHandle it is synchronized over 'this'.

2) In LedgerHandleAdv, in asyncAddEntry it is incorrect to add 'op' to 'pendingAddOps' before calling doAsyncAddEntry

 In LedgerHandleAdv, in asyncAddEntry, it is incorrect to add 'op' to 'pendingAddOps' before calling doAsyncAddEntry.

Consider the following example,

Lets say ""asyncAddEntry(final long entryId, final byte[] data, final int offset, final int length, final AddCallback cb, final Object ctx)"" is called with incorrect arguments, and following condition is failed ""(offset < 0 || length < 0 || (offset + length) > data.length)"". Then as expected we would get ArrayIndexOutOfBoundsException, but now if we try to call asyncAddEntry with correct arguments for that entry, then it will fail with ""DuplicateEntryIdException"", since the op is added already in the previous call, which shouldn't have happened.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-19 23:16:37.299,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 09 13:12:54 UTC 2016,,,,,,0|i354fr:,9223372036854775807,,,,,,,,"19/Oct/16 23:16;githubbot;GitHub user reddycharan opened a pull request:

    https://github.com/apache/bookkeeper/pull/65

    BOOKKEEPER-957: LedgerHandleAdv fixes

    - making addToLength call synchronized
    - adding op to pendingAddOps after doing sanity check

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/reddycharan/bookkeeper ledgerhandleadvfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/65.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #65
    
----
commit 375e532d42d0117d99c662732fe3e1e8ab85d1e0
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   2016-10-19T22:56:38Z

    BOOKKEEPER-957: LedgerHandleAdv fixes
    
    - making addToLength call synchronized
    - adding op to pendingAddOps after doing sanity check

----
","20/Oct/16 18:54;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/65
  
    LGTM +1
","09/Nov/16 07:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/65
",09/Nov/16 07:48;hustlmsp;Thanks [~reddycharan18@gmail.com] for the contribution.,"09/Nov/16 13:12;hudson;SUCCESS: Integrated in Jenkins build bookkeeper-master #1560 (See [https://builds.apache.org/job/bookkeeper-master/1560/])
BOOKKEEPER-957: LedgerHandleAdv fixes (sijie: rev 8f0bed9f8401001abd683c420757610996cf96d8)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HierarchicalLedgerManager doesn't work for ledgerid of length 9 and 10 because of order issue in HierarchicalLedgerRangeIterator,BOOKKEEPER-956,13013675,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,reddycharan18@gmail.com,reddycharan18@gmail.com,reddycharan18@gmail.com,19/Oct/16 21:57,09/Nov/16 13:12,13/Mar/19 22:16,09/Nov/16 02:09,,,4.5.0,,,,,0,,"Issue Description:-
HierarchicalLedgerManager is supposed to work for ledgerids upto length of 10 (its layout is 2-4-4). But because of order issue in HierarchicalLedgerRangeIterator it doesn't work correctly if we create Ledgers of ledgerid length 9 and 10.

Rootcause:- in HierarchicalLedgerRangeIterator, in 'preload' method after getting l1Nodes by calling ""zk.getChildren(ledgerRootPath, null)"",  they need to be sorted, just like l2nodes in 'nextL1Node' method

How it manifests:-
If we try to create Ledgers using LedgerCreateAdv api with ledgerids of lengths 9 and 10, write entries and read entries, it will fail with following exception messages

2015-11-30 13:57:31,209 - WARN  - [GarbageCollectorThread:ScanAndCompareGarbageCollector@103] - Exception when iterating over the metadata {}
java.lang.IllegalArgumentException: inconsistent range
    at java.util.concurrent.ConcurrentSkipListMap$SubMap.<init>(ConcurrentSkipListMap.java:2506)
    at java.util.concurrent.ConcurrentSkipListMap.subMap(ConcurrentSkipListMap.java:1984)
    at java.util.concurrent.ConcurrentSkipListMap.subMap(ConcurrentSkipListMap.java:93)
    at org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector.gc(ScanAndCompareGarbageCollector.java:86)
    at org.apache.bookkeeper.bookie.GarbageCollectorThread.doGcLedgers(GarbageCollectorThread.java:419)
    at org.apache.bookkeeper.bookie.GarbageCollectorThread.run(GarbageCollectorThread.java:377)

org.apache.bookkeeper.client.BKException$BKNotEnoughBookiesException
    at org.apache.bookkeeper.client.BKException.create(BKException.java:58)
    at org.apache.bookkeeper.client.LedgerHandleAdv.addEntry(LedgerHandleAdv.java:101)
    at org.apache.bookkeeper.client.LedgerHandleAdv.addEntry(LedgerHandleAdv.java:70)
    at org.apache.bookkeeper.client.BookieWriteLedgerTest.testLedgerCreateAdvWithLedgerId(BookieWriteLedgerTest.java:212)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
    at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
    at java.util.concurrent.FutureTask.run(FutureTask.java:262)
    at java.lang.Thread.run(Thread.java:745)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-19 22:10:47.207,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 09 13:12:47 UTC 2016,,,,,,0|i354cf:,9223372036854775807,,,,,,,,"19/Oct/16 22:10;githubbot;GitHub user reddycharan opened a pull request:

    https://github.com/apache/bookkeeper/pull/64

    BOOKKEEPER-956: Fix for HierarchicalLedgerRangeIterator

    Fix for HierarchicalLedgerRangeIterator, to make it work
    for LedgerIds of length 9 and 10

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/reddycharan/bookkeeper hierarchicalledgermanagerfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/64.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #64
    
----
commit 8fc4d4d5e5195aa2c29ce8afea0a2110b5fc8201
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   2016-10-19T22:04:09Z

    BOOKKEEPER-956: Fix for HierarchicalLedgerRangeIterator
    
    Fix for HierarchicalLedgerRangeIterator, to make it work
    for LedgerIds of length 9 and 10

----
","20/Oct/16 18:53;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/64
  
    LGTM +1
","09/Nov/16 02:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/64
","09/Nov/16 02:09;hustlmsp;Issue resolved by merging pull request 64
            [https://github.com/apache/bookkeeper/pull/64]

            {noformat}
            commit cc3d2701687ce1a4ff14502e2214a381b43aed5f
Author:     Charan Reddy Guttapalem <cguttapalem@salesforce.com>
AuthorDate: Tue Nov 8 18:08:44 2016 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Nov 8 18:08:44 2016 -0800

    BOOKKEEPER-956: Fix for HierarchicalLedgerRangeIterator
    
    Fix for HierarchicalLedgerRangeIterator, to make it work
    for LedgerIds of length 9 and 10
    
    Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
    
    Reviewers: sijie@apache.org <sijie@apache.org>
    
    Closes #64 from reddycharan/hierarchicalledgermanagerfix

            {noformat}
            ","09/Nov/16 13:12;hudson;SUCCESS: Integrated in Jenkins build bookkeeper-master #1560 (See [https://builds.apache.org/job/bookkeeper-master/1560/])
BOOKKEEPER-956: Fix for HierarchicalLedgerRangeIterator (sijie: rev cc3d2701687ce1a4ff14502e2214a381b43aed5f)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix RegionAwarePlacementPolicy,BOOKKEEPER-952,13012252,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,yzang,yzang,yzang,14/Oct/16 05:36,21/Oct/16 13:09,13/Mar/19 22:16,20/Oct/16 17:38,,,4.5.0,,bookkeeper-server,,,0,,"TestRegionAwareEnsemblePlacementPolicy#testNewEnsembleWithThreeRegions is failing because RegionAwareEnsemblePlacementPolicy is not working as expected.

The current allocation policy is not evenly across the regions. The write quorum size is also not calculated correctly.

We need  to fix the placement policy and then fix the the test case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-14 05:37:12.35,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 21 13:09:53 UTC 2016,,,,,,0|i34vof:,9223372036854775807,,,,,,,,"14/Oct/16 05:37;githubbot;GitHub user yzang opened a pull request:

    https://github.com/apache/bookkeeper/pull/61

    Fix RegionAwareEnsemblePlacementPolicy

    allocate bookies evenly as much as possible across all regions
    
    https://issues.apache.org/jira/browse/BOOKKEEPER-952
    
    RB_ID=880463

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yzang/bookkeeper apache_master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/61.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #61
    
----
commit d882c282bf2a6082722e078be56227789b7d0de8
Author: Yiming Zang <yzang@twitter.com>
Date:   2016-10-12T22:54:34Z

    fix RegionAwareEnsemblePlacementPolicy test case
    fix the algorithm for balanced placement across regions.
    
    RB_ID=880463

----
","20/Oct/16 17:37;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/61
  
    LGTM +1
","20/Oct/16 17:38;hustlmsp;Issue resolved by merging pull request 61
            [https://github.com/apache/bookkeeper/pull/61]

            {noformat}
            commit 4383b0b171d5fdfcdfa55c196998bbc6b7fdc260
Author:     Yiming Zang <yzang@twitter.com>
AuthorDate: Thu Oct 20 10:38:33 2016 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Thu Oct 20 10:38:33 2016 -0700

    BOOKKEEPER-952: Fix RegionAwareEnsemblePlacementPolicy
    
    allocate bookies evenly as much as possible across all regions
    
    https://issues.apache.org/jira/browse/BOOKKEEPER-952
    
    RB_ID=880463
    
    Author: Yiming Zang <yzang@twitter.com>
    
    Reviewers: sijie@apache.org <sijie@apache.org>
    
    Closes #61 from yzang/apache_master and squashes the following commits:
    
    a0a9979 [Yiming Zang] fix Inefficient use of keySet iterator instead of entrySet iterator
    d882c28 [Yiming Zang] fix RegionAwareEnsemblePlacementPolicy test case fix the algorithm for balanced placement across regions.

            {noformat}
            ","20/Oct/16 17:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/61
","21/Oct/16 13:09;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1541 (See [https://builds.apache.org/job/bookkeeper-master/1541/])
BOOKKEEPER-952: Fix RegionAwareEnsemblePlacementPolicy (sijie: rev 4383b0b171d5fdfcdfa55c196998bbc6b7fdc260)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClientConfiguration always inherits System properties,BOOKKEEPER-933,12980215,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,eolivelli,eolivelli,eolivelli,17/Jun/16 15:06,31/Jul/16 13:10,13/Mar/19 22:16,31/Jul/16 05:53,,,4.5.0,,bookkeeper-client,,,0,,"ClientConfiguration is always adding System.getProperties()

{code}
 protected AbstractConfiguration() {
        super();
        // add configuration for system properties
        addConfiguration(new SystemConfiguration());
    }
{code}

This is useful is some cases but sometimes it is very harmful because the user could modify the client behaviour inadvertently, for instance:: throttle, readTimeout....

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-18 03:21:12.55,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 31 13:10:28 UTC 2016,,,,,,0|i2zms7:,9223372036854775807,,,,,,,,18/Jun/16 03:21;hustlmsp;+1 for this change. we should remove SystemProperties from both ClientConfiguration and ServerConfiguration,"20/Jun/16 14:51;eolivelli;IMHO It would be usefull to add a system property to enable the previous behaviour. 
For instance in some production system we (Diennea) used this trick to hack client configuration to disable client side throttling without changing the code.

something like:
{code}
 private static final boolean APPLY_SYSTEM_PROPERTIES 
                      = Boolean.getBoolean(""org.apache.bookkeeper.readsystemproperties"");

 protected AbstractConfiguration() {
        super();
        if (APPLY_SYSTEM_PROPERTIES) {
           // add configuration for system properties       
           addConfiguration(new SystemConfiguration());
       }
    }
{code}","22/Jun/16 07:39;githubbot;GitHub user eolivelli opened a pull request:

    https://github.com/apache/bookkeeper/pull/50

    BOOKKEEPER-933 ClientConfiguration always inherits System properties

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eolivelli/bookkeeper BOOKKEEPER-933

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/50.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #50
    
----
commit beb68fb6a9f6fb0d730f149e1eddd995289d86cd
Author: eolivelli <eolivelli@gmail.com>
Date:   2016-06-22T07:37:44Z

    BOOKKEEPER-933 ClientConfiguration always inherits System properties

commit 0bcae1e6b783522ee3072166dc9ca7e2f0351f28
Author: eolivelli <eolivelli@gmail.com>
Date:   2016-06-22T07:38:11Z

    BOOKKEEPER-933 ClientConfiguration always inherits System properties

----
","31/Jul/16 05:51;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/50
  
    The change looks good to me +1. Thanks @eolivelli 
","31/Jul/16 05:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/50
","31/Jul/16 05:53;hustlmsp;Issue resolved by merging pull request 50
            [https://github.com/apache/bookkeeper/pull/50]

            {noformat}
            commit 8324632b2983beba1528ab53a999340756c7f563
Author:     eolivelli <eolivelli@gmail.com>
AuthorDate: Sat Jul 30 22:53:28 2016 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Sat Jul 30 22:53:28 2016 -0700

    BOOKKEEPER-933: ClientConfiguration always inherits System properties
    
    Author: eolivelli <eolivelli@gmail.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #50 from eolivelli/BOOKKEEPER-933 and squashes the following commits:
    
    0bcae1e [eolivelli] BOOKKEEPER-933 ClientConfiguration always inherits System properties
    beb68fb [eolivelli] BOOKKEEPER-933 ClientConfiguration always inherits System properties

            {noformat}
            ","31/Jul/16 13:10;hudson;SUCCESS: Integrated in bookkeeper-master #1459 (See [https://builds.apache.org/job/bookkeeper-master/1459/])
BOOKKEEPER-933: ClientConfiguration always inherits System properties (sijie: rev 8324632b2983beba1528ab53a999340756c7f563)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/NoSystemPropertiesConfigurationTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/SystemPropertiesConfigurationTest.java
* bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typo in bk-merge-pr.py,BOOKKEEPER-939,12988400,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,11/Jul/16 19:26,12/Jul/16 13:09,13/Mar/19 22:16,11/Jul/16 22:25,,,4.5.0,,,,,0,,The script doesn't work if there is no JIRA associated with the pull request.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-11 20:51:20.973,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 12 13:09:40 UTC 2016,,,,,,0|i30t4f:,9223372036854775807,,,,,,,,"11/Jul/16 20:51;githubbot;GitHub user sijie opened a pull request:

    https://github.com/apache/bookkeeper/pull/53

    BOOKKEEPER-939: Fix typo of bookkeeper merge pr script

    There is typo of bk-merge-pr.py script on merging pr without a jira id.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sijie/bookkeeper sijie/fix_merge_script

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/53.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #53
    
----
commit 17e3ac72be174d72427f486d06b6e4822e0a0884
Author: Sijie Guo <sijie@apache.org>
Date:   2016-07-11T19:26:45Z

    Fix typo of bookkeeper merge pr script

----
","11/Jul/16 22:18;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/53
  
    👍 
","11/Jul/16 22:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/53
","11/Jul/16 22:25;mmerli;Issue resolved by merging pull request 53
            [https://github.com/apache/bookkeeper/pull/53]

            {noformat}
            commit 2506c98f8cc474d538df84ca30d229fbe0470e29
Author:     Sijie Guo <sijie@apache.org>
AuthorDate: Mon Jul 11 15:19:33 2016 -0700
Commit:     Matteo Merli <mmerli@apache.org>
CommitDate: Mon Jul 11 15:19:33 2016 -0700

    BOOKKEEPER-939: Fix typo of bookkeeper merge pr script
    
    There is typo of bk-merge-pr.py script on merging pr without a jira id.
    
    Author: Sijie Guo <sijie@apache.org>
    
    Reviewers: Matteo Merli <mmerli@apache.org>
    
    Closes #53 from sijie/sijie/fix_merge_script

            {noformat}
            ","12/Jul/16 13:09;hudson;FAILURE: Integrated in bookkeeper-master #1439 (See [https://builds.apache.org/job/bookkeeper-master/1439/])
BOOKKEEPER-939: Fix typo of bookkeeper merge pr script (mmerli: rev 2506c98f8cc474d538df84ca30d229fbe0470e29)
* dev/bk-merge-pr.py
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please delete old releases from mirroring system,BOOKKEEPER-859,12839410,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,sebb@apache.org,sebb@apache.org,21/Jun/15 13:34,16/May/16 21:32,13/Mar/19 22:16,16/May/16 21:02,4.0.0,4.3.0,,,,,,0,,"To reduce the load on the ASF mirrors, projects are required to delete old releases [1]

Please can you remove all non-current releases?
i.e. 4.2.4, 4.3.0
Thanks!

[1] http://www.apache.org/dev/release.html#when-to-archive",https://dist.apache.org/repos/dist/release/bookkeeper/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-12-01 22:25:37.398,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon May 16 21:32:22 UTC 2016,,,,,,0|i2gba7:,9223372036854775807,,,,,,,,23/Oct/15 22:30;sebb@apache.org;PING,27/Nov/15 11:38;sebb@apache.org;PING,"01/Dec/15 20:44;sebb@apache.org;4.3.1 also now needs to be removed.

Please can you ensure that the PMC process documentation includes the necessary instructions to ensure that non-current releases are deleted from the mirrors?
Thanks.","01/Dec/15 22:25;mmerli;I've removed the old releases. 

I will update the release process documentation to include the deletion of older release. I've tried but had no permission on wiki page. Will resolve this jira when done.",02/Dec/15 00:18;sebb@apache.org;Thanks!,16/May/16 21:02;mmerli;Bookkeeper wiki page with instructions for releases has been updated,16/May/16 21:32;hustlmsp;Thank you so much! [~mmerli],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4.3.2 link points to 4.3.1 documentation,BOOKKEEPER-884,12929512,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,fpj,fpj,fpj,12/Jan/16 15:28,12/Jan/16 19:03,13/Mar/19 22:16,12/Jan/16 19:03,,,,,Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 12 19:03:38 UTC 2016,,,,,,0|i2r6sv:,9223372036854775807,,,,,,,,12/Jan/16 19:03;fpj;Fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resource leak with unclosed LedgerManager in HierarchicalLedgerManagerFactory#format(),BOOKKEEPER-872,12895181,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,yuzhihong@gmail.com,yuzhihong@gmail.com,yuzhihong@gmail.com,21/Sep/15 17:17,10/Oct/15 17:20,13/Mar/19 22:16,10/Oct/15 16:38,,,,,,,,0,,"{code}
    public void format(AbstractConfiguration conf, ZooKeeper zk)
            throws InterruptedException, KeeperException, IOException {
        HierarchicalLedgerManager ledgerManager = (HierarchicalLedgerManager) newLedgerManager();
{code}
ledgerManager is not closed upon exit from the method.",,,,,,,,,,,,,,,,07/Oct/15 01:41;yuzhihong@gmail.com;bookkeeper-872-v1.txt;https://issues.apache.org/jira/secure/attachment/12765312/bookkeeper-872-v1.txt,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-07 01:08:43.602,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 10 17:20:58 UTC 2015,,,,,,0|i2lctj:,9223372036854775807,,,,,,,,22/Sep/15 22:04;yuzhihong@gmail.com;Same pattern is observed in FlatLedgerManagerFactory#format(),07/Oct/15 01:08;hustlmsp;[~tedyu] do you like to contribute a patch?,"09/Oct/15 20:22;yuzhihong@gmail.com;[~hustlmsp]:
Can you take a look at the patch ?",10/Oct/15 16:35;hustlmsp;the patch looks good to me. +1.,"10/Oct/15 16:38;hustlmsp;committed as 9803ee8 in master.

Thanks [~tedyu]","10/Oct/15 17:20;hudson;FAILURE: Integrated in bookkeeper-master #1164 (See [https://builds.apache.org/job/bookkeeper-master/1164/])
BOOKKEEPER-872: Resource leak with unclosed LedgerManager in (sijie: rev 9803ee8e6293dcd0346b1ca3cb0f2666b5e12382)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java
* CHANGES.txt
* bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make important documentation available from front page,BOOKKEEPER-829,12762316,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,17/Dec/14 15:56,23/Aug/15 15:26,13/Mar/19 22:16,23/Aug/15 15:26,,,,,,,,0,,"We should make important stuff, like the api docs and basic client and admin guides available from the front page.

It really annoys me when I'm using a project and i have to dig deep to get to the api docs in particular.",,,,,,,,,,,,,,,,17/Dec/14 15:58;ikelly;0001-Make-core-docs-available-from-front-page.patch;https://issues.apache.org/jira/secure/attachment/12687747/0001-Make-core-docs-available-from-front-page.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-17 16:04:34.008,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 23 15:26:04 UTC 2015,,,,,,0|i23j53:,9223372036854775807,,,,,,,,"17/Dec/14 15:58;ikelly;Added apidocs, tutorial and admin guide to the documentation dropdown.

See http://bk.ivankelly.net for what it looks like.","17/Dec/14 16:04;hadoopqa;Testing JIRA BOOKKEEPER-829


Patch [0001-Make-core-docs-available-from-front-page.patch|https://issues.apache.org/jira/secure/attachment/12687747/0001-Make-core-docs-available-from-front-page.patch] downloaded at Wed Dec 17 16:00:30 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",12/Mar/15 07:42;hustlmsp;the patch looks good to me. +1.,18/Mar/15 06:25;hustlmsp;[~ikelly] which repo that this change needs to be checked in?,"18/Mar/15 22:34;fpj;These changes are for the main site, but I'm actually not sure where we are versioning the files. I can see them through cms, though, so I think these changes are to be applied directly to cms. 

+1, changes look good to me.","28/Jul/15 11:51;fpj;do you want to make the changes to the site, [~ikelly]?","29/Jul/15 09:07;ikelly;https://cwiki.apache.org/confluence/display/BOOKKEEPER/Building+the+website+and+documentation

It'd be good for someone else to do it, just to be sure that I'm not the only person with permissions on that repo.",23/Aug/15 15:26;ikelly;Commited r1697191 to bookkeeper/site.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException in LedgerFragmentReplicator::updateEnsembleInfo,BOOKKEEPER-847,12786455,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,zhaijia,zhaijia,zhaijia,28/Mar/15 15:36,21/Apr/15 08:33,13/Mar/19 22:16,21/Apr/15 07:36,,,,,,,,0,,"ArrayIndexOutOfBoundsException in LedgerFragmentReplicator::updateEnsembleInfo, because update ensemble info might happen after re-read ledger metadata, so the ensemble might already change. if ensemble is already changed, skip replacing the bookie doesn't exist.",,,,,,,,,,,,,,,,30/Mar/15 02:48;zhaijia;BOOKKEEPER-847-2.patch;https://issues.apache.org/jira/secure/attachment/12708076/BOOKKEEPER-847-2.patch,10/Apr/15 15:54;zhaijia;BOOKKEEPER-847-3.patch;https://issues.apache.org/jira/secure/attachment/12724583/BOOKKEEPER-847-3.patch,30/Mar/15 00:23;zhaijia;BOOKKEEPER-847.patch;https://issues.apache.org/jira/secure/attachment/12708064/BOOKKEEPER-847.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2015-03-28 17:48:10.484,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 21 08:33:38 UTC 2015,,,,,,0|i27htz:,9223372036854775807,,,,,,,,"28/Mar/15 17:48;rakeshr;Its interesting. I couldn't find the possibility of this Exception, as I remember the re-replication will happen on the closed fragment. Now, it won't hit the case of updating the ensemble while re-replication of that particular fragment is in progress, right?. Could you please give more details like, exception trace or point me to the code flow where it can occur this.","29/Mar/15 20:36;hustlmsp;[~rakeshr] I just took at the code

{code}
int deadBookieIndex = ensemble.indexOf(oldBookie);
        ensemble.remove(deadBookieIndex);
        ensemble.add(deadBookieIndex, newBookie);
{code}

this is definitely a bug. indexOf would return -1 ( http://docs.oracle.com/javase/7/docs/api/java/util/List.html#indexOf(java.lang.Object) )

",29/Mar/15 20:36;hustlmsp;[~zhaijia] could you attach a patch for this? I think the fix itself is straightforward.,"30/Mar/15 00:23;zhaijia;Thanks for Rakesh and Sijie's help and quick response during this weekend.

The patch is straightforward.","30/Mar/15 01:07;hadoopqa;Testing JIRA BOOKKEEPER-847


Patch [BOOKKEEPER-847.patch|https://issues.apache.org/jira/secure/attachment/12708064/BOOKKEEPER-847.patch] downloaded at Mon Mar 30 00:30:26 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 949
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testSimpleChat(org.apache.hedwig.jms.BasicJMSTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/910/","30/Mar/15 01:46;rakeshr;[~hustlmsp] since this is a straight fix and not harming any other flows, I agree with your point. Please go ahead to fix this case.

Thanks [~zhaijia] for catching this.

Just one comment. Should we complete the call back by calling {{ensembleUpdatedCb#processResult(Code.UnexpectedConditionException, null, null);}} if the condition falls in else block ?
{code}
+        else {
+            LOG.warn(""Bookie {} doesn't exist in ensemble {} anymore."", oldBookie, ensemble);
+        }
{code}
","30/Mar/15 02:19;zhaijia;Hi Rakesh R,
Thanks a lot for your comments.
Will update the patch soon.",30/Mar/15 02:50;zhaijia;Updated. Thanks a lot.,"30/Mar/15 03:27;hadoopqa;Testing JIRA BOOKKEEPER-847


Patch [BOOKKEEPER-847-2.patch|https://issues.apache.org/jira/secure/attachment/12708076/BOOKKEEPER-847-2.patch] downloaded at Mon Mar 30 02:50:13 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 949
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/911/",31/Mar/15 14:02;rakeshr;+1 latest patch looks good to me,"03/Apr/15 23:33;fpj;A quick sanity check, what prevents the same problem from happening after this check: 

{noformat}
if (deadBookieIndex >= 0) {
{noformat}

Is it possible to have a race there?","04/Apr/15 00:14;fpj;Another thing, please improve the text of the comment. Here is a suggestion:

{noformat}
*
* An update to the ensemble info might happen after re-reading ledger metadata.
* Such an update might reflect a change to the ensemble membership such that 
* it might not be necessary to replace the bookie.
*
{noformat}

Is this what you're trying to say and is it any better?",10/Apr/15 15:55;zhaijia;:). Thanks a lot for the suggestion. updated the patch.,"10/Apr/15 16:37;hadoopqa;Testing JIRA BOOKKEEPER-847


Patch [BOOKKEEPER-847-3.patch|https://issues.apache.org/jira/secure/attachment/12724583/BOOKKEEPER-847-3.patch] downloaded at Fri Apr 10 16:00:16 UTC 2015

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 949
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/917/","10/Apr/15 17:12;zhaijia;This patch try to fix the exception that we met when indexOf() return -1.

We may need more investigate and simulation for the race issue here, would like to open another jira ticket to trace this concern. ",21/Apr/15 07:30;hustlmsp;the patch looks good to me. +1,21/Apr/15 07:36;hustlmsp;committed as b24cd7f in master,"21/Apr/15 08:33;hudson;SUCCESS: Integrated in bookkeeper-master #1028 (See [https://builds.apache.org/job/bookkeeper-master/1028/])
BOOKKEEPER-847: ArrayIndexOutOfBoundsException in LedgerFragmentReplicator::updateEnsembleInfo (zhaijia via sijie) (sijie: rev b24cd7fd85bb3235036e660ff3a295dc939705e6)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java
* CHANGES.txt
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make website look more modern,BOOKKEEPER-798,12756421,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,19/Nov/14 15:07,02/Dec/14 10:11,13/Mar/19 22:16,02/Dec/14 10:11,,,,,,,,0,,The current website looks super old. This jira is to remedy the style. Changes to content will come later.,,,,,,,,,,,,,,,,19/Nov/14 15:09;ikelly;0001-Adding-bootstrap-resources-for-site-reboot.patch;https://issues.apache.org/jira/secure/attachment/12682425/0001-Adding-bootstrap-resources-for-site-reboot.patch,19/Nov/14 15:09;ikelly;0001-Make-site-use-bootstrap.patch;https://issues.apache.org/jira/secure/attachment/12682424/0001-Make-site-use-bootstrap.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-11-19 15:40:50.581,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 02 10:11:01 UTC 2014,,,,,,0|i22k6f:,9223372036854775807,,,,,,,,"19/Nov/14 15:09;ikelly;Adding two patches, as the bookkeeper site is spread over two places.

The new site uses bootstrap (a twitter library), and thus looks like a lot of other sites, but at least it looks new.

Have a gawk: http://bk.ivankelly.net/bookkeeper","19/Nov/14 15:40;hadoopqa;Testing JIRA BOOKKEEPER-798


Patch [0001-Adding-bootstrap-resources-for-site-reboot.patch|https://issues.apache.org/jira/secure/attachment/12682425/0001-Adding-bootstrap-resources-for-site-reboot.patch] downloaded at Wed Nov 19 15:37:08 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","19/Nov/14 17:24;hadoopqa;Testing JIRA BOOKKEEPER-798


Patch [0001-Adding-bootstrap-resources-for-site-reboot.patch|https://issues.apache.org/jira/secure/attachment/12682425/0001-Adding-bootstrap-resources-for-site-reboot.patch] downloaded at Wed Nov 19 17:20:22 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","20/Nov/14 12:24;hadoopqa;Testing JIRA BOOKKEEPER-798


Patch [0001-Adding-bootstrap-resources-for-site-reboot.patch|https://issues.apache.org/jira/secure/attachment/12682425/0001-Adding-bootstrap-resources-for-site-reboot.patch] downloaded at Thu Nov 20 12:20:24 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","22/Nov/14 23:34;hadoopqa;Testing JIRA BOOKKEEPER-798


Patch [0001-Adding-bootstrap-resources-for-site-reboot.patch|https://issues.apache.org/jira/secure/attachment/12682425/0001-Adding-bootstrap-resources-for-site-reboot.patch] downloaded at Sat Nov 22 23:30:26 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","26/Nov/14 02:55;hadoopqa;Testing JIRA BOOKKEEPER-798


Patch [0001-Adding-bootstrap-resources-for-site-reboot.patch|https://issues.apache.org/jira/secure/attachment/12682425/0001-Adding-bootstrap-resources-for-site-reboot.patch] downloaded at Wed Nov 26 02:51:02 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","01/Dec/14 16:22;fpj;+1, I like the new look.",02/Dec/14 07:48;hustlmsp;+1 for the new look,02/Dec/14 10:11;ikelly;New site is in staging now. Will publish once bylaws are ready.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Findbugs Error In Codahale Stats Provider,BOOKKEEPER-786,12742925,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,20/Sep/14 05:21,22/Sep/14 10:46,13/Mar/19 22:16,22/Sep/14 10:11,,,4.3.0,,bookkeeper-stats,,,0,,"{quote}
[INFO] BugInstance size is 1
[INFO] Error size is 0
[INFO] Total bugs: 1
[INFO] Inconsistent synchronization of org.apache.bookkeeper.stats.CodahaleMetricsProvider.metrics; locked 83% of time [""org.apache.bookkeeper.stats.CodahaleMetricsProvider""] At CodahaleMetricsProvider.java:[lines 49-145]
{quote}",,,,,,,,,,,,,,,,20/Sep/14 05:22;hustlmsp;BOOKKEEPER-786.patch;https://issues.apache.org/jira/secure/attachment/12670181/BOOKKEEPER-786.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-09-20 06:09:00.664,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 22 10:46:15 UTC 2014,,,,,,0|i20aef:,9223372036854775807,,,,,,,,"20/Sep/14 06:09;hadoopqa;Testing JIRA BOOKKEEPER-786


Patch [BOOKKEEPER-786.patch|https://issues.apache.org/jira/secure/attachment/12670181/BOOKKEEPER-786.patch] downloaded at Sat Sep 20 05:30:47 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 921
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/755/","20/Sep/14 07:36;hadoopqa;Testing JIRA BOOKKEEPER-786


Patch [BOOKKEEPER-786.patch|https://issues.apache.org/jira/secure/attachment/12670181/BOOKKEEPER-786.patch] downloaded at Sat Sep 20 07:00:44 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/756/","22/Sep/14 08:58;hadoopqa;Testing JIRA BOOKKEEPER-786


Patch [BOOKKEEPER-786.patch|https://issues.apache.org/jira/secure/attachment/12670181/BOOKKEEPER-786.patch] downloaded at Mon Sep 22 08:22:46 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/762/","22/Sep/14 10:11;fpj;+1, thanks sijie. Committed revision 1626721.","22/Sep/14 10:46;hudson;SUCCESS: Integrated in bookkeeper-trunk #789 (See [https://builds.apache.org/job/bookkeeper-trunk/789/])
BOOKKEEPER-786: Fix Findbugs Error In Codahale Stats Provider (sijie via fpj) (fpj: rev 1626721)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix javadoc warnings in trunk,BOOKKEEPER-785,12742159,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,17/Sep/14 14:34,18/Sep/14 05:30,13/Mar/19 22:16,18/Sep/14 04:47,,,4.3.0,,,,,0,,,,,,,,,,,,,,,,,,17/Sep/14 16:15;ikelly;0001-Fixes-for-javadoc-warnings.patch;https://issues.apache.org/jira/secure/attachment/12669433/0001-Fixes-for-javadoc-warnings.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-09-17 18:01:00.021,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 18 05:30:45 UTC 2014,,,,,,0|i205t3:,9223372036854775807,,,,,,,,"17/Sep/14 16:17;ikelly;I had to remove the @link annotations from some places in ServerConfiguration because they were referring to classes for which javadoc is not generated. We only generate the javadoc for client packages. We shouldn't even be generating for ServerConfiguration in the first place, but there's no way to exclude a single java file :/","17/Sep/14 18:01;hadoopqa;Testing JIRA BOOKKEEPER-785


Patch [0001-Fixes-for-javadoc-warnings.patch|https://issues.apache.org/jira/secure/attachment/12669433/0001-Fixes-for-javadoc-warnings.patch] downloaded at Wed Sep 17 17:24:39 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/742/","17/Sep/14 19:54;hadoopqa;Testing JIRA BOOKKEEPER-785


Patch [0001-Fixes-for-javadoc-warnings.patch|https://issues.apache.org/jira/secure/attachment/12669433/0001-Fixes-for-javadoc-warnings.patch] downloaded at Wed Sep 17 19:18:30 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/745/",18/Sep/14 04:40;hustlmsp;+1 . committing,18/Sep/14 04:47;hustlmsp;committed as r1625885. Thanks Ivan.,"18/Sep/14 05:06;hadoopqa;Testing JIRA BOOKKEEPER-785


Patch [0001-Fixes-for-javadoc-warnings.patch|https://issues.apache.org/jira/secure/attachment/12669433/0001-Fixes-for-javadoc-warnings.patch] downloaded at Thu Sep 18 04:30:45 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/746/","18/Sep/14 05:30;hudson;FAILURE: Integrated in bookkeeper-trunk #784 (See [https://builds.apache.org/job/bookkeeper-trunk/784/])
BOOKKEEPER-785: Fix javadoc warnings in trunk (ivank via sijie) (sijie: rev 1625885)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeperCloseTest#testLedgerCheck is failing intermittently,BOOKKEEPER-784,12741000,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,rakeshr,rakeshr,12/Sep/14 08:35,18/Sep/14 05:30,13/Mar/19 22:16,18/Sep/14 04:54,,,4.3.0,,,,,0,test,"*Stacktrace*
{code}
java.lang.AssertionError: Should have client closed exception expected:<0> but was:<-19>
	at org.junit.Assert.fail(Assert.java:91)
	at org.junit.Assert.failNotEquals(Assert.java:645)
	at org.junit.Assert.assertEquals(Assert.java:126)
	at org.junit.Assert.assertEquals(Assert.java:470)
	at org.apache.bookkeeper.client.BookKeeperCloseTest.testLedgerCheck(BookKeeperCloseTest.java:501)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
{code}

Link: https://builds.apache.org/job/bookkeeper-trunk-precommit-build/722/testReport/junit/org.apache.bookkeeper.client/BookKeeperCloseTest/testLedgerCheck/",,,,,,,,,,,,,,,,17/Sep/14 16:30;ikelly;0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch;https://issues.apache.org/jira/secure/attachment/12669437/0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch,17/Sep/14 10:16;ikelly;0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch;https://issues.apache.org/jira/secure/attachment/12669379/0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-09-16 10:43:17.285,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 18 05:30:43 UTC 2014,,,,,,0|i1zyqn:,9223372036854775807,,,,,,,,"12/Sep/14 10:23;rakeshr;I ran locally several times without any issues.

Any chances of spurious wakeup?. Since {{final AtomicInteger preRc = new AtomicInteger(BKException.Code.OK);}} has initialised with OK, couldn't differentiate the actual operation completion or any other env issues.","14/Sep/14 07:59;rakeshr;After analyzing the below exception, there is one common case to be addressed is - {{restartBookieSlow()}} can cause the bkclient reconnection. This can generate other exceptions like {{BookieHandleNotAvailableException}} et. So I think before going to verify the bkclient#close() behavior, it needs to ensure that the existing bkclient(s) has reconnected with the restarted slow bookie server.

[Build-729|https://builds.apache.org/job/bookkeeper-trunk-precommit-build/729/testReport/junit/org.apache.bookkeeper.client/BookKeeperCloseTest/testReadLastConfirmed/]
{code}
2014-09-13 12:45:28,563 - INFO  - [New I/O worker #1225:PerChannelBookieClient@631] - Disconnected from bookie channel [id: 0x50881721, /67.195.81.148:50307 :> /67.195.81.148:15021]
2014-09-13 12:45:28,563 - INFO  - [New I/O worker #1227:PerChannelBookieClient@631] - Disconnected from bookie channel [id: 0xc2daf545, /67.195.81.148:53456 :> /67.195.81.148:15019]
2014-09-13 12:45:28,564 - INFO  - [New I/O worker #1226:PerChannelBookieClient@631] - Disconnected from bookie channel [id: 0x37d0b22c, /67.195.81.148:55687 :> /67.195.81.148:15020]
2014-09-13 12:45:28,564 - ERROR - [BookKeeperClientWorker-3-0:ReadLastConfirmedOp@127] - While readLastConfirmed ledger: 3 did not hear success responses from all quorums
{code}","16/Sep/14 10:43;ikelly;I ran for hours, but no repro :/ it happened on build 732 also though (slightly differently), so it's a real problem.","16/Sep/14 10:55;ikelly;Having looked at the code, these tests are bad. They kick off an operation, then close the client and expect to get a ClientClosedException. This is very time sensitive. If the operation completes before the close call, then the return code will be OK [the slowing of the bookie should avoid this, but thats relying on timers]. If they get past the initial check, they will fail on some other call as the bk client closes resources. So there's nothing that we can reliably assert on here. ","16/Sep/14 12:38;rakeshr;bq.the slowing of the bookie should avoid this, but thats relying on timers
Yeah, its relaying on timers. One common failure pattern I could see is, immediately after restarting the bookie server its performing the next operation, now its hitting Disconnected event and is returning different return code. Do you think the following changes will help:  
# Presently it is delaying the server by 5secs, will increase to a bigger value(20 or 30secs). Also, we need to increase the read/add timeouts respectively.
# After restarting will perform another operation to ensure that the existing bkclient successfully reconnected with the restarted server(during this operation will reduce the server delay and after this op will set back the bigger value). After this pre-requisite step it can perform the actual testing. Is there any better way to see the client reconnection completed?","16/Sep/14 13:22;ikelly;This wouldn't change the fact that what we are asserting is non-deterministic. As I said, if the call gets past the check for whether the client is closed before the client is actually closed, and this is quite possible, then it will be a different error code returned. ",16/Sep/14 18:27;ikelly;[~hustlmsp] could you have a look at this. My opinion here is that we should remove the pre close parts of these tests as they are completely undeterministic.,17/Sep/14 06:34;hustlmsp;+1 on removing the pre close parts.,"17/Sep/14 06:35;rakeshr;bq.This wouldn't change the fact that what we are asserting is non-deterministic. As I said, if the call gets past the check for whether the client is closed before the client is actually closed, and this is quite possible, then it will be a different error code returned.
Its really tricky and would be tough to determine whether the call has reached PerChannelBookieClient's outstanding entry lists. If it reaches this list, during closure bkclient will error out PerChannelBookieClient#errorOutOutstandingEntries().","17/Sep/14 09:36;ikelly;It's almost impossible, and doing so even goes beyond the scope of unit testing IMO. I'll whip up a patch with the preclose stuff removed.","17/Sep/14 10:57;hadoopqa;Testing JIRA BOOKKEEPER-784


Patch [0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch|https://issues.apache.org/jira/secure/attachment/12669379/0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch] downloaded at Wed Sep 17 10:20:48 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 921
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/736/",17/Sep/14 13:09;rakeshr;{{testBookKeeperAdmin}} also has similar pre close parts. Please modify this too.,"17/Sep/14 15:54;hadoopqa;Testing JIRA BOOKKEEPER-784


Patch [0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch|https://issues.apache.org/jira/secure/attachment/12669379/0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch] downloaded at Wed Sep 17 15:17:24 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/739/",17/Sep/14 16:30;ikelly;New patch addresses comment.,"17/Sep/14 16:47;hadoopqa;Testing JIRA BOOKKEEPER-784


Patch [0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch|https://issues.apache.org/jira/secure/attachment/12669379/0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch] downloaded at Wed Sep 17 16:10:45 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/740/","17/Sep/14 18:37;hadoopqa;Testing JIRA BOOKKEEPER-784


Patch [0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch|https://issues.apache.org/jira/secure/attachment/12669437/0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch] downloaded at Wed Sep 17 18:01:30 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/743/","17/Sep/14 19:18;hadoopqa;Testing JIRA BOOKKEEPER-784


Patch [0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch|https://issues.apache.org/jira/secure/attachment/12669437/0001-BOOKKEEPER-784-BookKeeperCloseTest-testLedgerCheck-i.patch] downloaded at Wed Sep 17 18:41:43 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/744/","18/Sep/14 04:53;hustlmsp;the patch looks good to me. +1, committing.",18/Sep/14 04:54;hustlmsp;committed as r1625886.,"18/Sep/14 05:30;hudson;FAILURE: Integrated in bookkeeper-trunk #784 (See [https://builds.apache.org/job/bookkeeper-trunk/784/])
BOOKKEEPER-784: BookKeeperCloseTest#testLedgerCheck is failing intermittently (ivank via sijie) (sijie: rev 1625886)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid running out of fds in MutlipleThreadReadTest,BOOKKEEPER-783,12740954,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,12/Sep/14 05:02,17/Sep/14 15:16,13/Mar/19 22:16,17/Sep/14 14:34,,,4.3.0,,bookkeeper-server,,,0,test,"{code}
org.jboss.netty.channel.ChannelException: Failed to create a selector.
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.openSelector(AbstractNioSelector.java:343)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.<init>(AbstractNioSelector.java:100)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.<init>(AbstractNioWorker.java:52)
	at org.jboss.netty.channel.socket.nio.NioWorker.<init>(NioWorker.java:45)
	at org.jboss.netty.channel.socket.nio.NioWorkerPool.createWorker(NioWorkerPool.java:45)
	at org.jboss.netty.channel.socket.nio.NioWorkerPool.createWorker(NioWorkerPool.java:28)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool.newWorker(AbstractNioWorkerPool.java:143)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool.init(AbstractNioWorkerPool.java:81)
	at org.jboss.netty.channel.socket.nio.NioWorkerPool.<init>(NioWorkerPool.java:39)
	at org.jboss.netty.channel.socket.nio.NioWorkerPool.<init>(NioWorkerPool.java:33)
	at org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory.<init>(NioClientSocketChannelFactory.java:151)
	at org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory.<init>(NioClientSocketChannelFactory.java:116)
	at org.apache.bookkeeper.client.BookKeeper.<init>(BookKeeper.java:204)
	at org.apache.bookkeeper.client.BookKeeperTestClient.<init>(BookKeeperTestClient.java:50)
	at org.apache.bookkeeper.test.MultipleThreadReadTest.createClients(MultipleThreadReadTest.java:73)
	at org.apache.bookkeeper.test.MultipleThreadReadTest.multiLedgerMultiThreadRead(MultipleThreadReadTest.java:282)
	at org.apache.bookkeeper.test.MultipleThreadReadTest.test1Ledger50ThreadsRead(MultipleThreadReadTest.java:326)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
Caused by: java.io.IOException: Too many open files
	at sun.nio.ch.EPollArrayWrapper.epollCreate(Native Method)
	at sun.nio.ch.EPollArrayWrapper.<init>(EPollArrayWrapper.java:69)
	at sun.nio.ch.EPollSelectorImpl.<init>(EPollSelectorImpl.java:52)
	at sun.nio.ch.EPollSelectorProvider.openSelector(EPollSelectorProvider.java:18)
	at java.nio.channels.Selector.open(Selector.java:209)
	at org.jboss.netty.channel.socket.nio.SelectorUtil.open(SelectorUtil.java:63)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.openSelector(AbstractNioSelector.java:341)
{code}",,,,,,,,,,,,,,,,17/Sep/14 14:33;ikelly;0001-BOOKKEEPER-783-Avoid-running-out-of-fds-in-MutlipleT.patch;https://issues.apache.org/jira/secure/attachment/12669409/0001-BOOKKEEPER-783-Avoid-running-out-of-fds-in-MutlipleT.patch,12/Sep/14 05:10;hustlmsp;BOOKKEEPER-783.patch;https://issues.apache.org/jira/secure/attachment/12668267/BOOKKEEPER-783.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-09-12 05:47:46.708,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 17 15:16:10 UTC 2014,,,,,,0|i1zygf:,9223372036854775807,,,,,,,,"12/Sep/14 05:10;hustlmsp;test1Ledger50ThreadsRead will create 50 bookkeeper clients, which hence would create 50 zookeeper clients, and each bookkeeper client would connect to 6 bookies, which might be the reason that cause running out of fds.

attached a patch:

- use one single bookkeeper client for reads. which would reduce the number of connections spawn for this test case.
- reduce the number of entries writes/reads
- reduce the number of threads for test1Ledger50ThreadsRead","12/Sep/14 05:47;hadoopqa;Testing JIRA BOOKKEEPER-783


Patch [BOOKKEEPER-783.patch|https://issues.apache.org/jira/secure/attachment/12668267/BOOKKEEPER-783.patch] downloaded at Fri Sep 12 05:11:39 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/719/","12/Sep/14 06:24;hadoopqa;Testing JIRA BOOKKEEPER-783


Patch [BOOKKEEPER-783.patch|https://issues.apache.org/jira/secure/attachment/12668267/BOOKKEEPER-783.patch] downloaded at Fri Sep 12 05:48:18 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/720/","12/Sep/14 07:55;rakeshr;Could you rename the test method as now it has only 20 threads. Apart from this +1
{code}
test1Ledger50ThreadsRead
{code}

","12/Sep/14 11:08;hadoopqa;Testing JIRA BOOKKEEPER-783


Patch [BOOKKEEPER-783.patch|https://issues.apache.org/jira/secure/attachment/12668267/BOOKKEEPER-783.patch] downloaded at Fri Sep 12 10:31:42 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/723/","12/Sep/14 12:24;fpj;Declaring readBkc and removing clients sounds like a bit cheating. This test seems to simulating a number of concurrent clients performing operations over BK, and readBkc still enables multiple app threads, but over the same client. I wonder if it isn't a better approach to simply reduce the value of numThreads to no more than 20 instead. Would it do the work? Currently we use 20, 50, and 200.","12/Sep/14 17:38;hadoopqa;Testing JIRA BOOKKEEPER-783


Patch [BOOKKEEPER-783.patch|https://issues.apache.org/jira/secure/attachment/12668267/BOOKKEEPER-783.patch] downloaded at Fri Sep 12 17:01:45 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/725/","13/Sep/14 18:13;hadoopqa;Testing JIRA BOOKKEEPER-783


Patch [BOOKKEEPER-783.patch|https://issues.apache.org/jira/secure/attachment/12668267/BOOKKEEPER-783.patch] downloaded at Sat Sep 13 17:38:03 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 921
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/731/","15/Sep/14 19:29;hustlmsp;[~fpj] the test was to test multiple read/write threads in bookie server side. we don't actually need multiple clients to spawn multiple connections, since in bookie server side, individual read requests would be submitted to different read threads.",16/Sep/14 18:00;hustlmsp;ping [~fpj],16/Sep/14 18:26;ikelly;change looks good to me. +1,"17/Sep/14 12:29;ikelly;If there's no objection by 4:00 GMT today, I'm going to submit this.","17/Sep/14 12:50;fpj;[~hustlmsp], I see, it got in with BOOKKEEPER-429. No objection on my end.",17/Sep/14 13:55;rakeshr;There is one minor [comment|https://issues.apache.org/jira/browse/BOOKKEEPER-783?focusedCommentId=14131236&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14131236] which I added previously.,"17/Sep/14 13:59;ikelly;ok, committing. [~rakeshr] will renamed that while committing.",17/Sep/14 14:33;ikelly;Committed r1625611. thanks sijie. I'll attached the final patch with the rename.,"17/Sep/14 15:16;hudson;FAILURE: Integrated in bookkeeper-trunk #783 (See [https://builds.apache.org/job/bookkeeper-trunk/783/])
BOOKKEEPER-783: Avoid running out of fds in MutlipleThreadReadTest (sijie via ivank) (ivank: rev 1625611)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flake in TestTryReadLastConfirmed,BOOKKEEPER-778,12737463,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,28/Aug/14 14:42,09/Sep/14 04:57,13/Mar/19 22:16,09/Sep/14 03:57,,,4.3.0,,bookkeeper-client,,,0,tests,Logs attached.,,,,,,,,,,,,,,,,29/Aug/14 15:44;ikelly;0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch;https://issues.apache.org/jira/secure/attachment/12665357/0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch,28/Aug/14 14:42;ikelly;TEST-org.apache.bookkeeper.client.TestTryReadLastConfirmed.xml.fail1;https://issues.apache.org/jira/secure/attachment/12664982/TEST-org.apache.bookkeeper.client.TestTryReadLastConfirmed.xml.fail1,28/Aug/14 14:42;ikelly;TEST-org.apache.bookkeeper.client.TestTryReadLastConfirmed.xml.fail2;https://issues.apache.org/jira/secure/attachment/12664983/TEST-org.apache.bookkeeper.client.TestTryReadLastConfirmed.xml.fail2,28/Aug/14 14:42;ikelly;TEST-org.apache.bookkeeper.client.TestTryReadLastConfirmed.xml.fail3;https://issues.apache.org/jira/secure/attachment/12664984/TEST-org.apache.bookkeeper.client.TestTryReadLastConfirmed.xml.fail3,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2014-08-29 17:21:30.36,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 09 04:57:39 UTC 2014,,,,,,0|i1zfxj:,9223372036854775807,,,,,,,,"29/Aug/14 15:44;ikelly;Test was trying to read lac in a loop, but the first iteration of the loop closed the ledger, so readlac was pulling the lac from zookeeper rather than from the bookies. Fix is to move the closing of the ledgers to the end.","29/Aug/14 17:21;hadoopqa;Testing JIRA BOOKKEEPER-778


Patch [0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch|https://issues.apache.org/jira/secure/attachment/12665357/0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch] downloaded at Fri Aug 29 16:16:45 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 804
.    Tests failed: 8
.    Tests errors: 10

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/703/","29/Aug/14 18:47;hadoopqa;Testing JIRA BOOKKEEPER-778


Patch [0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch|https://issues.apache.org/jira/secure/attachment/12665357/0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch] downloaded at Fri Aug 29 17:43:50 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 804
.    Tests failed: 8
.    Tests errors: 10

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/704/","29/Aug/14 20:56;hadoopqa;Testing JIRA BOOKKEEPER-778


Patch [0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch|https://issues.apache.org/jira/secure/attachment/12665357/0001-BOOKKEEPER-778-Flake-in-TestTryReadLastConfirmed.patch] downloaded at Fri Aug 29 19:52:49 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 804
.    Tests failed: 8
.    Tests errors: 10

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/706/","03/Sep/14 13:37;fpj;The test modified in the patch seems a bit odd to me overall. For example, I don't understand why we are killing bookies in every iteration of the outer for loop. Perhaps the original intention was to open lh in each iteration? Also, looping numEntries times seems arbitrary because all this seems to be checking is that the callback result make sense for some arbitrary number of calls.","06/Sep/14 05:42;hustlmsp;the patch looks good to me. +1.

[~fpj]

in the test case, the ledger is created with writeQuorumSize = 1. so each loop is to test tryReadLastAddConfirmed when the bookie is down. the numEntries is to ensure it covers ensembleSize.","07/Sep/14 12:17;fpj;Ok, +1.

 ",09/Sep/14 03:57;hustlmsp;committed as r1623618.,"09/Sep/14 04:57;hudson;FAILURE: Integrated in bookkeeper-trunk #770 (See [https://builds.apache.org/job/bookkeeper-trunk/770/])
BOOKKEEPER-778: Flake in TestTryReadLastConfirmed (ivank via sijie) (sijie: rev 1623618)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jmx reporter for codahale metrics provider,BOOKKEEPER-779,12737467,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,28/Aug/14 14:53,06/Sep/14 07:08,13/Mar/19 22:16,06/Sep/14 05:27,,,4.3.0,,,,,0,,Allow access to metrics through jmx.,,,,,,,,,,,,,,,,28/Aug/14 14:54;ikelly;0001-Added-JMX-reporting-for-codahale.patch;https://issues.apache.org/jira/secure/attachment/12664987/0001-Added-JMX-reporting-for-codahale.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-28 17:34:39.964,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 06 07:08:22 UTC 2014,,,,,,0|i1zfyf:,9223372036854775807,,,,,,,,"28/Aug/14 17:34;hadoopqa;Testing JIRA BOOKKEEPER-779


Patch [0001-Added-JMX-reporting-for-codahale.patch|https://issues.apache.org/jira/secure/attachment/12664987/0001-Added-JMX-reporting-for-codahale.patch] downloaded at Thu Aug 28 16:31:21 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/691/","28/Aug/14 19:42;hadoopqa;Testing JIRA BOOKKEEPER-779


Patch [0001-Added-JMX-reporting-for-codahale.patch|https://issues.apache.org/jira/secure/attachment/12664987/0001-Added-JMX-reporting-for-codahale.patch] downloaded at Thu Aug 28 18:39:33 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 863
.    Tests failed: 16
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/693/","29/Aug/14 02:48;hadoopqa;Testing JIRA BOOKKEEPER-779


Patch [0001-Added-JMX-reporting-for-codahale.patch|https://issues.apache.org/jira/secure/attachment/12664987/0001-Added-JMX-reporting-for-codahale.patch] downloaded at Fri Aug 29 01:44:51 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 863
.    Tests failed: 16
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/700/",06/Sep/14 05:27;hustlmsp;+1 on the patch. committed as r1622828.,"06/Sep/14 07:08;hudson;FAILURE: Integrated in bookkeeper-trunk #766 (See [https://builds.apache.org/job/bookkeeper-trunk/766/])
BOOKKEEPER-779: jmx reporter for codahale metrics provider (ivank via sijie) (sijie: rev 1622828)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flake in LedgerCloseTest,BOOKKEEPER-777,12737457,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,28/Aug/14 14:29,06/Sep/14 06:12,13/Mar/19 22:16,06/Sep/14 05:14,,,4.3.0,,,,,0,,This test fails every so often. Logs attached.,,,,,,,,,,,,,,,,29/Aug/14 12:20;ikelly;0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch;https://issues.apache.org/jira/secure/attachment/12665325/0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch,28/Aug/14 14:30;ikelly;TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml;https://issues.apache.org/jira/secure/attachment/12664980/TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml,28/Aug/14 14:30;ikelly;TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml.fail1;https://issues.apache.org/jira/secure/attachment/12664978/TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml.fail1,28/Aug/14 14:30;ikelly;TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml.fail2;https://issues.apache.org/jira/secure/attachment/12664979/TEST-org.apache.bookkeeper.client.LedgerCloseTest.xml.fail2,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2014-08-29 13:25:39.904,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 06 06:12:33 UTC 2014,,,,,,0|i1zfw7:,9223372036854775807,,,,,,,,"29/Aug/14 12:20;ikelly;I don't know how this test ever passed. It writes a creates a ledger, shuts down all bookies then tries to open the same ledger. It was failing on recovery. Solution is to restart all bookies before trying to open the ledger.","29/Aug/14 13:25;hadoopqa;Testing JIRA BOOKKEEPER-777


Patch [0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch|https://issues.apache.org/jira/secure/attachment/12665325/0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch] downloaded at Fri Aug 29 12:21:54 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/701/","29/Aug/14 14:29;hadoopqa;Testing JIRA BOOKKEEPER-777


Patch [0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch|https://issues.apache.org/jira/secure/attachment/12665325/0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch] downloaded at Fri Aug 29 13:26:03 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 863
.    Tests failed: 16
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/702/","29/Aug/14 19:52;hadoopqa;Testing JIRA BOOKKEEPER-777


Patch [0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch|https://issues.apache.org/jira/secure/attachment/12665325/0001-BOOKKEEPER-777-Flake-in-LedgerCloseTest.patch] downloaded at Fri Aug 29 18:48:34 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 863
.    Tests failed: 17
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncWritesWithMultipleFailuresInLastEnsemble[1](org.apache.bookkeeper.client.BookieWriteLedgerTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/705/","03/Sep/14 12:52;fpj;+1, looks good.","06/Sep/14 05:14;hustlmsp;+1, committed as r1622827.","06/Sep/14 06:12;hudson;FAILURE: Integrated in bookkeeper-trunk #765 (See [https://builds.apache.org/job/bookkeeper-trunk/765/])
BOOKKEEPER-777: Flake in LedgerCloseTest (ivank via fpj) (sijie: rev 1622827)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Findbug issue in trunk,BOOKKEEPER-780,12737489,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,28/Aug/14 16:26,04/Sep/14 22:57,13/Mar/19 22:16,04/Sep/14 21:49,,,4.3.0,,bookkeeper-server,,,0,,"[INFO] --- findbugs-maven-plugin:2.5.2:check (default-cli) @ bookkeeper-server ---
[INFO] BugInstance size is 1
[INFO] Error size is 0
[INFO] Total bugs: 1
[INFO] Dead store to conn in org.apache.bookkeeper.proto.WriteEntryProcessorV3$1.writeComplete(int, long, long, BookieSocketAddress, Object) [""org.apache.bookkeeper.proto.WriteEntryProcessorV3$1""] At WriteEntryProcessorV3.java:[lines 68-98]",,,,,,,,,,,,,,,,28/Aug/14 16:27;ikelly;0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch;https://issues.apache.org/jira/secure/attachment/12665000/0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-28 18:39:06.473,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 04 22:57:10 UTC 2014,,,,,,0|i1zg2v:,9223372036854775807,,,,,,,,"28/Aug/14 18:39;hadoopqa;Testing JIRA BOOKKEEPER-780


Patch [0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch|https://issues.apache.org/jira/secure/attachment/12665000/0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch] downloaded at Thu Aug 28 17:35:19 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 804
.    Tests failed: 8
.    Tests errors: 10

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/692/","28/Aug/14 21:22;hadoopqa;Testing JIRA BOOKKEEPER-780


Patch [0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch|https://issues.apache.org/jira/secure/attachment/12665000/0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch] downloaded at Thu Aug 28 20:19:19 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 804
.    Tests failed: 8
.    Tests errors: 10

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/695/","29/Aug/14 01:08;hadoopqa;Testing JIRA BOOKKEEPER-780


Patch [0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch|https://issues.apache.org/jira/secure/attachment/12665000/0001-BOOKKEEPER-780-Findbug-issue-in-trunk.patch] downloaded at Fri Aug 29 00:05:03 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 863
.    Tests failed: 16
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/698/","04/Sep/14 21:49;fpj;+1, Committed revision 1622568.","04/Sep/14 22:57;hudson;FAILURE: Integrated in bookkeeper-trunk #763 (See [https://builds.apache.org/job/bookkeeper-trunk/763/])
BOOKKEEPER-780: Findbug issue in trunk (ivank via fpj) (fpj: rev 1622568)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky test org.apache.bookkeeper.test.ReadOnlyBookieTest.testBookieShouldTurnWritableFromReadOnly,BOOKKEEPER-774,12730017,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,26/Jul/14 07:34,14/Aug/14 09:08,13/Mar/19 22:16,14/Aug/14 06:16,,,4.3.0,,bookkeeper-server,,,0,test,"it failed at https://builds.apache.org/job/bookkeeper-trunk/716 .

It seems that an addEntry hit a ClosedChannelException on file io after the bookie turned to writable from readonly.

{code}
2014-07-26 07:03:14,584 - ERROR - [BookieWriteThread-15006-0:WriteEntryProcessorV3@103] - Error writing entry:0 to ledger:4
java.nio.channels.ClosedChannelException
	at sun.nio.ch.FileChannelImpl.ensureOpen(FileChannelImpl.java:88)
	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:184)
	at org.apache.bookkeeper.bookie.BufferedChannel.flushInternal(BufferedChannel.java:126)
	at org.apache.bookkeeper.bookie.BufferedChannel.flush(BufferedChannel.java:111)
	at org.apache.bookkeeper.bookie.EntryLogger.createNewLog(EntryLogger.java:371)
	at org.apache.bookkeeper.bookie.EntryLogger.addEntry(EntryLogger.java:623)
	at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.processEntry(InterleavedLedgerStorage.java:296)
	at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.processEntry(InterleavedLedgerStorage.java:283)
	at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.addEntry(InterleavedLedgerStorage.java:196)
	at org.apache.bookkeeper.bookie.LedgerDescriptorImpl.addEntry(LedgerDescriptorImpl.java:80)
	at org.apache.bookkeeper.bookie.Bookie.addEntryInternal(Bookie.java:1046)
	at org.apache.bookkeeper.bookie.Bookie.addEntry(Bookie.java:1085)
	at org.apache.bookkeeper.proto.WriteEntryProcessorV3.getAddResponse(WriteEntryProcessorV3.java:99)
	at org.apache.bookkeeper.proto.WriteEntryProcessorV3.run(WriteEntryProcessorV3.java:132)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:662)
{code}",,,,,,,,,,,,,,,,26/Jul/14 17:35;hustlmsp;BOOKKEEPER-774.diff;https://issues.apache.org/jira/secure/attachment/12658000/BOOKKEEPER-774.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-01 23:06:00.707,,,no_permission,,,,,,,,,,,,,408090,,,Thu Aug 14 09:08:08 UTC 2014,,,,,,0|i1y7yn:,408097,,,,,,,,"26/Jul/14 16:57;hustlmsp;The sequence that triggered the flakiness is described as below:

- in the directory, a directory is added as filled directory. 
- EntryLogger detected current dir is full. It set shouldCreateNewEntryLog to true.
{code}
            public void diskFull(File disk) {
                // If the current entry log disk is full, then create new entry
                // log.
                if (currentDir != null && currentDir.equals(disk)) {
                    shouldCreateNewEntryLog.set(true);
                }
            }
{code}
- addEntry came in and it found shouldCreateNewEntryLog is true. it means we need to stop writing to current entry log, and try to create a new entry log. the logic here is to add current log channel to a ToFlush list and then create a new log. but since all directories were marked as filled, so createNewLog will throw exception, which bring the entry logger into a state that *the log channel was added in ToFlush list and current log channel was still referencing to it*.
{code}
2014-07-26 07:03:14,559 - INFO  - [BookieWriteThread-15006-0:EntryLogger@373] - Flushing entry logger 0 back to filesystem, pending for syncing entry loggers : [org.apache.bookkeeper.bookie.EntryLogger$BufferedLogChannel@49f10a67].

if (null != logChannel) {
            if (null == logChannelsToFlush) {
                logChannelsToFlush = new LinkedList<BufferedLogChannel>();
            }
            // flush the internal buffer back to filesystem but not sync disk
            // so the readers could access the data from filesystem.
            logChannel.flush(false);
            logChannelsToFlush.add(logChannel);
            LOG.info(""Flushing entry logger {} back to filesystem, pending for syncing entry loggers : {}."",
                    logChannel.getLogId(), logChannelsToFlush);
            for (EntryLogListener listener : listeners) {
                listener.onRotateEntryLog();
            }
        }
        logChannel = entryLoggerAllocator.createNewLog();
{code}
- at some point, the ToFlush list was synced to disks and closed by SyncThread.
{code}
2014-07-26 07:03:14,576 - INFO  - [SyncThread-15006-0:EntryLogger@596] - Synced entry logger 0 to disk.
{code}
- the directory was added back to writable directories. so the bookie was transitioned from readonly to writable. when it tried to write entry to current *logChannel* and it found that the channel was closed. it was closed by the SyncThread.",26/Jul/14 17:36;hustlmsp;attached a patch to address this issue.,"01/Aug/14 23:06;hadoopqa;Testing JIRA BOOKKEEPER-774


Patch [BOOKKEEPER-774.diff|https://issues.apache.org/jira/secure/attachment/12658000/BOOKKEEPER-774.diff] downloaded at Fri Aug  1 22:02:27 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 859
.    Tests failed: 16
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/659/",07/Aug/14 06:00;rakeshr;Good catch. +1 lgtm,"12/Aug/14 18:42;hadoopqa;Testing JIRA BOOKKEEPER-774


Patch [BOOKKEEPER-774.diff|https://issues.apache.org/jira/secure/attachment/12658000/BOOKKEEPER-774.diff] downloaded at Tue Aug 12 17:38:57 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 859
.    Tests failed: 16
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/668/","13/Aug/14 20:58;hadoopqa;Testing JIRA BOOKKEEPER-774


Patch [BOOKKEEPER-774.diff|https://issues.apache.org/jira/secure/attachment/12658000/BOOKKEEPER-774.diff] downloaded at Wed Aug 13 19:55:26 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
.    {color:red}WARNING: the current HEAD has  Findbugs warning(s), they should be addressed ASAP{color}
{color:red}-1 TESTS{color}
.    Tests run: 859
.    Tests failed: 16
.    Tests errors: 20

.    The patch failed the following testcases:

.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubSSL)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/675/",14/Aug/14 06:16;hustlmsp;committed as r1617888. thanks Rakesh for reviewing it.,"14/Aug/14 09:08;hudson;FAILURE: Integrated in bookkeeper-trunk #738 (See [https://builds.apache.org/job/bookkeeper-trunk/738/])
BOOKKEEPER-774: Flaky test org.apache.bookkeeper.test.ReadOnlyBookieTest.testBookieShouldTurnWritableFromReadOnly (sijie) (sijie: rev 1617888)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test timeouts mostly ignored,BOOKKEEPER-739,12698677,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,ikelly,ikelly,04/Mar/14 17:48,24/Jul/14 00:52,13/Mar/19 22:16,23/Jul/14 23:41,,,4.3.0,,,,,0,,"A lot of our tests extend BookKeeperClusterTestCase which extends TestCase, which is the junit 3 way of doing tests. Annotations is the junit4 way to doing tests. If you're using a junit3 harness, annotations are ignored. Therefore, most of our timeout annotations are ignored. I propose we move everything to the junit4 style.

http://stackoverflow.com/questions/1151237/junit-expected-tag-not-working-as-expected",,,,,,,,,,,,,,,,23/Jul/14 07:06;hustlmsp;BOOKKEEPER-739.diff;https://issues.apache.org/jira/secure/attachment/12657304/BOOKKEEPER-739.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-10 02:25:16.8,,,no_permission,,,,,,,,,,,,,377035,,,Thu Jul 24 00:52:47 UTC 2014,,,,,,0|i1syx3:,377330,,,,,,,,10/Mar/14 02:25;hustlmsp;[~ikelly] +1 for moving to junit4 ,23/Jul/14 07:06;hustlmsp;a patch to change junit4 style test cases.,"23/Jul/14 23:41;fpj;+1, Committed revision 1612972.","24/Jul/14 00:52;hudson;FAILURE: Integrated in bookkeeper-trunk #712 (See [https://builds.apache.org/job/bookkeeper-trunk/712/])
BOOKKEEPER-739: Test timeouts mostly ignored (sijie via fpj) (fpj: rev 1612972)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/test/java/org/apache/hedwig/client/AppTest.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManagerBlackBox.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestLocalDBPersistenceManagerBlackBox.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheBlackBox.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow loopback in tests,BOOKKEEPER-767,12718342,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Jun/14 09:05,06/Jun/14 14:00,13/Mar/19 22:16,06/Jun/14 13:32,,,4.2.3,4.3.0,,,,0,,"It's not uncommon to have something like the following in /etc/hosts:
{quote}
127.0.1.1 <myhostname>
{quote}

This breaks the bookkeeper tests because getAllowLoopback() defaults to false. We should set allow loopback to true to allow tests to run out of the box on linux machines.",,,,,,,,,,,,,,,,04/Jun/14 12:36;ikelly;0002-BOOKKEEPER-767-Allow-loopback-in-tests.trunk.patch;https://issues.apache.org/jira/secure/attachment/12648322/0002-BOOKKEEPER-767-Allow-loopback-in-tests.trunk.patch,04/Jun/14 10:17;ikelly;0003-BOOKKEEPER-767-Allow-loopback-in-tests.branch42.patch;https://issues.apache.org/jira/secure/attachment/12648308/0003-BOOKKEEPER-767-Allow-loopback-in-tests.branch42.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-06-04 13:33:15.575,,,no_permission,,,,,,,,,,,,,396544,,,Fri Jun 06 14:00:46 UTC 2014,,,,,,0|i1w9rj:,396665,,,,,,,,"04/Jun/14 13:33;fpj;Patch looks good to me, but I couldn't reproduce the problem. I've added an 127.0.1.1 entry to my /etc/hosts but I couldn't get the tests to fail without the patch. ","04/Jun/14 13:45;ikelly;on a mac? It never happened me when I used a mac, seemed to automatically return the external ip. It did mean that moving networks while running tests caused failures though.

Also, the branch4.2 and trunk patches look very different, since trunk has BKTestConfiguration, which branch4.2 doesn't.","04/Jun/14 14:06;fpj;yes, I did try on a mac, let me try on ubuntu to see if I can reproduce it there.",04/Jun/14 14:09;ikelly;happens to me on fedora 19 and debian wheezy.,"04/Jun/14 15:29;hadoopqa;Testing JIRA BOOKKEEPER-767


Patch [0002-BOOKKEEPER-767-Allow-loopback-in-tests.trunk.patch|https://issues.apache.org/jira/secure/attachment/12648322/0002-BOOKKEEPER-767-Allow-loopback-in-tests.trunk.patch] downloaded at Wed Jun  4 14:52:57 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 8 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 920
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/653/","05/Jun/14 14:50;fpj;Ok, I was able to repro this one in an ubuntu vm. I'm not able to complete the test, though, it crashes due to oom. Has anyone tried to run this on a vm? In any case, it seems to be a separate issue, so I'm fine with the trunk patch. I still need to go through the 4.2 patch.","05/Jun/14 22:36;fpj;I have checked the 4.2 patch as well. +1, looks good.","06/Jun/14 13:32;fpj;Thanks, Ivan.

Trunk: Committed revision 1600881.
Branch 4.2: Committed revision 1600884.","06/Jun/14 14:00;hudson;SUCCESS: Integrated in bookkeeper-trunk #662 (See [https://builds.apache.org/job/bookkeeper-trunk/662/])
BOOKKEEPER-767: Allow loopback in tests (ivank via fpj) (fpj: rev 1600881)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update notice.txt files to include 2014,BOOKKEEPER-766,12718196,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,03/Jun/14 17:05,05/Jun/14 12:48,13/Mar/19 22:16,05/Jun/14 10:56,,,4.2.3,4.3.0,,,,0,,Copyright should include this year.,,,,,,,,,,,,,,,,03/Jun/14 17:06;ikelly;0002-Update-NOTICE.txt-files-to-include-2014.patch;https://issues.apache.org/jira/secure/attachment/12648189/0002-Update-NOTICE.txt-files-to-include-2014.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-06-03 18:58:20.151,,,no_permission,,,,,,,,,,,,,396398,,,Thu Jun 05 12:48:53 UTC 2014,,,,,,0|i1w8vb:,396520,,,,,,,,"03/Jun/14 18:58;hadoopqa;Testing JIRA BOOKKEEPER-766


Patch [0002-Update-NOTICE.txt-files-to-include-2014.patch|https://issues.apache.org/jira/secure/attachment/12648189/0002-Update-NOTICE.txt-files-to-include-2014.patch] downloaded at Tue Jun  3 18:21:58 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 920
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/650/","05/Jun/14 10:56;fpj;+1, thanks [~ikelly].

branch 4.2: Committed revision 1600592.
trunk: Committed revision 1600594.","05/Jun/14 12:48;hudson;SUCCESS: Integrated in bookkeeper-trunk #660 (See [https://builds.apache.org/job/bookkeeper-trunk/660/])
BOOKKEEPER-766: Update notice.txt files to include 2014 (ivank via fpj) (fpj: rev 1600594)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/NOTICE
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/resources/NOTICE.bin.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/resources/NOTICE.bin.txt
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually,BOOKKEEPER-750,12711304,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Apr/14 20:10,03/Jun/14 14:53,13/Mar/19 22:16,23/May/14 16:49,,,4.2.3,4.3.0,,,,0,,See https://builds.apache.org/job/bookkeeper-trunk-precommit-build/617/testReport/junit/org.apache.bookkeeper.replication/BookieAutoRecoveryTest/testEmptyLedgerLosesQuorumEventually/,,,,,,,,,,,,,,,,05/May/14 15:55;ikelly;0001-BOOKKEEPER-750-Flake-in-BookieAutoRecoveryTest.trunk.patch;https://issues.apache.org/jira/secure/attachment/12643376/0001-BOOKKEEPER-750-Flake-in-BookieAutoRecoveryTest.trunk.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-05 17:00:13.95,,,no_permission,,,,,,,,,,,,,389625,,,Tue Jun 03 14:53:36 UTC 2014,,,,,,0|i1v42n:,389867,,,,,,,,05/May/14 15:55;ikelly;silly problem. the test was trying to get the auditor object straight after killing a bookie. the object may not have existed (if the bookie killed had been auditor). Added code to wait if a new auditor hasnt been elected yet.,"05/May/14 17:00;hadoopqa;Testing JIRA BOOKKEEPER-750


Patch [0001-BOOKKEEPER-750-Flake-in-BookieAutoRecoveryTest.trunk.patch|https://issues.apache.org/jira/secure/attachment/12643376/0001-BOOKKEEPER-750-Flake-in-BookieAutoRecoveryTest.trunk.patch] downloaded at Mon May  5 16:31:56 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 903
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/620/","11/May/14 18:12;rakeshr;Small typo in log message, please use I'm
{code}
LOG.info(""Im starting as Auditor Bookie. ID: {}"", bookieIdentifier);
{code}

Apart from this +1 lgtm","23/May/14 16:49;fpj;+1. 

Committed revision 1597124.
Committed revision 1597125.

The second commit is to fix the typo rakesh mentioned.","23/May/14 20:21;hudson;SUCCESS: Integrated in bookkeeper-trunk #644 (See [https://builds.apache.org/job/bookkeeper-trunk/644/])
BOOKKEEPER-750. Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank via fpj) (fpj: rev 1597125)
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
BOOKKEEPER-750. Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank via fpj) (fpj: rev 1597124)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
",03/Jun/14 14:53;ikelly;Committed revision 1599591 to branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoRecoveryMain should exit with error code if deathwatcher finds dead thread,BOOKKEEPER-725,12693140,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Feb/14 16:43,03/Jun/14 13:51,13/Mar/19 22:16,06/Feb/14 08:31,,,4.2.3,4.3.0,,,,0,,"Currently exits with 0, which is bad, won't be restarted if daemontools is watching",,,,,,,,,,,,,,,,04/Feb/14 16:50;ikelly;0001-BOOKKEEPER-725-AutoRecoveryMain-should-exit-with-err.patch;https://issues.apache.org/jira/secure/attachment/12626899/0001-BOOKKEEPER-725-AutoRecoveryMain-should-exit-with-err.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-04 17:52:47.99,,,no_permission,,,,,,,,,,,,,371726,,,Tue Jun 03 13:51:24 UTC 2014,,,,,,0|i1s2av:,372026,,,,,,,,"04/Feb/14 17:52;hadoopqa;Testing JIRA BOOKKEEPER-725


Patch [0001-BOOKKEEPER-725-AutoRecoveryMain-should-exit-with-err.patch|https://issues.apache.org/jira/secure/attachment/12626899/0001-BOOKKEEPER-725-AutoRecoveryMain-should-exit-with-err.patch] downloaded at Tue Feb  4 17:24:35 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/578/",06/Feb/14 08:31;hustlmsp;committed as r1565112. thanks Ivan.,"06/Feb/14 08:58;hudson;SUCCESS: Integrated in bookkeeper-trunk #540 (See [https://builds.apache.org/job/bookkeeper-trunk/540/])
BOOKKEEPER-725: AutoRecoveryMain should exit with error code if deathwatcher finds dead thread (ivank via sijie) (sijie: rev 1565112)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java
","03/Jun/14 13:51;ikelly;Committed revision 1599546 to branch 4.2.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest",BOOKKEEPER-746,12706649,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Apr/14 15:29,03/Jun/14 11:56,13/Mar/19 22:16,03/Jun/14 11:56,,,4.2.3,4.3.0,,,,0,,"names are self explanatory. 
1. list all the ledgers in the cluster
2. print the metadata for a ledger
3. list underreplicated ledgers
4. show the address of the auditor
5. simple test: create ledger, write to ledger, close ledger",,,,,,,,,,,,,,,BOOKKEEPER-745,03/Jun/14 08:36;ikelly;0001-5-new-shell-commands.-List-ledgers-list-metadata-lis.patch;https://issues.apache.org/jira/secure/attachment/12648099/0001-5-new-shell-commands.-List-ledgers-list-metadata-lis.patch,02/Jun/14 15:57;ikelly;0001-5-new-shell-commands.-List-ledgers-list-metadata-lis.patch;https://issues.apache.org/jira/secure/attachment/12647919/0001-5-new-shell-commands.-List-ledgers-list-metadata-lis.patch,04/Apr/14 16:59;ikelly;0005-5-new-shell-commands.-List-ledgers-list-metada.trunk.patch;https://issues.apache.org/jira/secure/attachment/12638716/0005-5-new-shell-commands.-List-ledgers-list-metada.trunk.patch,04/Apr/14 16:59;ikelly;0007-5-new-shell-commands.-List-ledgers-list-me.branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12638717/0007-5-new-shell-commands.-List-ledgers-list-me.branch4.2.patch,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2014-04-04 18:04:28.165,,,no_permission,,,,,,,,,,,,,384972,,,Tue Jun 03 11:56:52 UTC 2014,,,,,,0|i1ubkf:,385239,,,,,,,,"04/Apr/14 18:04;hadoopqa;Testing JIRA BOOKKEEPER-746


Patch [0007-5-new-shell-commands.-List-ledgers-list-me.branch4.2.patch|https://issues.apache.org/jira/secure/attachment/12638717/0007-5-new-shell-commands.-List-ledgers-list-me.branch4.2.patch] downloaded at Fri Apr  4 18:02:49 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","29/Apr/14 14:59;rakeshr;Thanks [~ikelly] for the useful commands. I've few comments, please go through below:

# Javadoc is missing
{code}
Iterator<Long> listLedgersToRereplicate();
{code}
# Not required to check the children of 'urL'. Can we have like:
{code}
if (c.startsWith(""urL"")) {
    curBatch.add(getLedgerId(c));
} else {
    String child = parent + ""/"" + c;
    queue.add(child);
}
{code}
# For ""listledgers""
a) small typo in getUsage(): ""listsledger"" -> ""listledgers""
b) I've checked other commands, they are adding options to the usage, can we have like ?
{code}
+        String getUsage() {
+            return ""listledgers  [-meta]"";
+        }
{code}
# small typo: ""(this may take along time)"" -> (this may take a long time)
# ListLedgersCmd - I haven't executed, but when looking at md.serialize(), it doesn't have ledgerid. IMHO we can print ledgerid and its metadata. Otw it may mess up things no ?
{code}
System.out.println(new String(md.serialize(), UTF_8));
{code}
# Can we make the args optional for simpletest. Now its true
{code}
+            lOpts.addOption(""e"", ""ensemble"", true, ""Ensemble size (default 3)"");
+            lOpts.addOption(""w"", ""writeQuorum"", true, ""Write quorum size (default 2)"");
+            lOpts.addOption(""a"", ""ackQuorum"", true, ""Ack quorum size (default 2)"");
+            lOpts.addOption(""n"", ""numEntries"", true, ""Entries to write (default 1000)"");
{code}
# getUsage() of simpletest doesn't have options. It would be good to add options too.

-Rakesh","02/Jun/14 15:57;ikelly;All comments addressed. I refactored printShellUsage, to avoid having to duplicate text also.","02/Jun/14 15:58;ikelly;[~rakeshr] Could you take another look. This is the final jira for 4.2.3, so I should be able to start cutting a release after.","03/Jun/14 05:12;rakeshr;Thanks [~ikelly], latest patch looks fine . One last comment, previously I failed to add this.

In SimpleTestCmd:
Please print the created ledger details like - ledger id,  the total number of entries written et. It may be helpful to the users.","03/Jun/14 08:36;ikelly;Addressed comments. I also added a printout of entries written every 1 second, and removed some duplicate imports.",03/Jun/14 08:47;rakeshr;+1 looks fine!,"03/Jun/14 09:18;hadoopqa;Testing JIRA BOOKKEEPER-746


Patch [0001-5-new-shell-commands.-List-ledgers-list-metadata-lis.patch|https://issues.apache.org/jira/secure/attachment/12648099/0001-5-new-shell-commands.-List-ledgers-list-metadata-lis.patch] downloaded at Tue Jun  3 08:41:48 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 920
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/649/",03/Jun/14 10:36;ikelly;Committed r1599470 to trunk. Thanks for reviewing Rakesh.,"03/Jun/14 11:54;hudson;SUCCESS: Integrated in bookkeeper-trunk #657 (See [https://builds.apache.org/job/bookkeeper-trunk/657/])
BOOKKEEPER-746: 5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest (ivank) (ivank: rev 1599470)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java
",03/Jun/14 11:56;ikelly;Committed revision 1599492 to branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix for false reports of ledger unreplication during rolling restarts.,BOOKKEEPER-745,12706648,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Apr/14 15:27,02/Jun/14 15:55,13/Mar/19 22:16,02/Jun/14 15:55,,,4.2.3,4.3.0,bookkeeper-auto-recovery,,,0,,"The bug occurred because there was no check if rereplication was enabled or not when the auditor came online. When the auditor comes online it does a check of which bookies are up and marks the ledgers on missing bookies as underreplicated. In the false report case, the auditor was running after each bookie was bounced due to the way leader election for the auditor works. And since one bookie was down since you're bouncing the server, all ledgers on that bookie will get marked as underreplicated.",,,,,,,,,,,,,,,BOOKKEEPER-744,31/May/14 11:11;ikelly;0001-BOOKKEEPER-745-Fix-for-false-reports-of-ledger-unrep.patch;https://issues.apache.org/jira/secure/attachment/12647769/0001-BOOKKEEPER-745-Fix-for-false-reports-of-ledger-unrep.patch,02/Jun/14 15:54;ikelly;0001-BOOKKEEPER-745.patch;https://issues.apache.org/jira/secure/attachment/12647917/0001-BOOKKEEPER-745.patch,27/May/14 10:05;ikelly;0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch;https://issues.apache.org/jira/secure/attachment/12646884/0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch,06/May/14 13:19;ikelly;0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch;https://issues.apache.org/jira/secure/attachment/12643569/0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch,24/Apr/14 12:47;ikelly;0002-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch;https://issues.apache.org/jira/secure/attachment/12641709/0002-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch,04/Apr/14 16:58;ikelly;0004-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch;https://issues.apache.org/jira/secure/attachment/12638714/0004-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch,04/Apr/14 16:58;ikelly;0006-Fix-for-false-reports-of-ledger-unreplicat.branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12638715/0006-Fix-for-false-reports-of-ledger-unreplicat.branch4.2.patch,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2014-04-04 17:57:43.708,,,no_permission,,,,,,,,,,,,,384971,,,Mon Jun 02 15:55:14 UTC 2014,,,,,,0|i1ubk7:,385238,,,,,,,,"04/Apr/14 17:57;hadoopqa;Testing JIRA BOOKKEEPER-745


Patch [0006-Fix-for-false-reports-of-ledger-unreplicat.branch4.2.patch|https://issues.apache.org/jira/secure/attachment/12638715/0006-Fix-for-false-reports-of-ledger-unreplicat.branch4.2.patch] downloaded at Fri Apr  4 17:56:06 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",24/Apr/14 12:47;ikelly;rebased patch,"24/Apr/14 13:27;hadoopqa;Testing JIRA BOOKKEEPER-745


Patch [0002-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch|https://issues.apache.org/jira/secure/attachment/12641709/0002-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch] downloaded at Thu Apr 24 13:25:43 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","30/Apr/14 21:23;fpj;The patches here have gone stale, both trunk and 4.2.",02/May/14 10:41;ikelly;will rebase once the changes the depend on are in.,06/May/14 13:19;ikelly;rebased to trunk,"06/May/14 22:55;hadoopqa;Testing JIRA BOOKKEEPER-745


Patch [0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch|https://issues.apache.org/jira/secure/attachment/12643569/0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch] downloaded at Tue May  6 22:25:27 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 905
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/625/","11/May/14 17:29;rakeshr;Thanks [~ikelly], overall patch looks fine. I've few suggestions, please see it:
# Can we move waitIfLedgerReplicationDisabled(); above to generateBookie2LedgersIndex(). This would make bk2ledger indexing after replication enabled otw it may continue with the old index, also I feel later it would be helpful when doing IP to hostname meta changes.
# Could you replace 'children.get(0)' using constant AUDITOR_INDEX
# Please increase the tests timeout, already tests has 4secs sleep    @Test(timeout=5000)
# Few cleanups in tests:
- Please remove following used variables in AuditorRollingRestartTest.java:
{code}
    private final static Logger LOG = LoggerFactory
            .getLogger(AuditorPeriodicBookieCheckTest.class);

    private final static int CHECK_INTERVAL = 1; // run every second

    final int numLedgers = 1;
{code}
- Please remove unused imports

-Rakesh","27/May/14 10:10;ikelly;bq. Can we move waitIfLedgerReplicationDisabled(); above to generateBookie2LedgersIndex(). This would make bk2ledger indexing after replication enabled otw it may continue with the old index, also I feel later it would be helpful when doing IP to hostname meta changes.

The reason I put it after the generateBookie2LedgersIndex() is that this method can run for a long time. So it could be running when a rolling restart begins, and then the ledgers would be marked while autoreplication is disabled. Putting the wait after, and having the bk2ledger map a little stale is ok though, because we are only looking for the ledgers which are on the bookie that failed. There will be no new ledgers added to that bookie after that bookie has failed, so we still get the same list of ledgers. If another bookie fails, the bookie check will run again after autoreplication is reenabled.

I've addressed the rest of the comments.","27/May/14 10:44;hadoopqa;Testing JIRA BOOKKEEPER-745


Patch [0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch|https://issues.apache.org/jira/secure/attachment/12646884/0001-Fix-for-false-reports-of-ledger-unreplication-.trunk.patch] downloaded at Tue May 27 10:13:55 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 917
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/638/","27/May/14 10:50;ikelly;Failure seems to be in part of the code that this change doesn't touch, kicking off test again.","29/May/14 22:50;fpj;bq. Failure seems to be in part of the code that this change doesn't touch, kicking off test again.

The test that failed is org.apache.bookkeeper.client.BookieWriteLedgerTest.testWithMultipleBookieFailuresInLastEnsemble[4]. Do you know if there is a jira for this? We probably want to have a look at it before releasing 4.2.3, no?

",30/May/14 09:41;ikelly;Failure was against trunk. There's flake in the trunk tests that needs to be addressed before 4.3.0. 4.2.3 tests cleanly every time for me.,30/May/14 15:51;ikelly;[~rakeshr] Can you take another look at this.,"30/May/14 17:40;rakeshr;{quote}
The reason I put it after the generateBookie2LedgersIndex() is that this method can run for a long time. So it could be running when a rolling restart begins, and then the ledgers would be marked while autoreplication is disabled. Putting the wait after, and having the bk2ledger map a little stale is ok though, because we are only looking for the ledgers which are on the bookie that failed
{quote}
I was seeing the behaviour of this flow with IP_to_Hostname renaming tool BOOKKEEPER-639. In that case after enabling autoreplication, auditor will compare the old ledger bookie ids(ip as bookieId) with the new bookie available set(hostname as bookieId) and publish as lost bookies. Now auditor will publish these bookies and their ledgers. Now the RWs compete each other for urLock and will just do markLedgerUnderreplicated. In worst case if there are many ledgers in the system unnecessary re-replication cycle will happen for long time for all the ledgers. To avoid this, I think simple approach is just reverse these statements or we could find some other way ?

{code}
Auditor.java
        List<String> availableBookies = getAvailableBookies();
        // find lost bookies
        Set<String> knownBookies = ledgerDetails.keySet();
        Collection<String> lostBookies = CollectionUtils.subtract(knownBookies,
                availableBookies);
{code}","30/May/14 17:59;rakeshr;Adding one more point. In build test took more than 60secs, pls use bigger value 2 or 2.5mins.
{code}
AuditorRollingRestartTest	1 min 35 sec
{code}","31/May/14 10:16;ikelly;> To avoid this, I think simple approach is just reverse these statements or we could find some other way ?
Ah I see. This is a good point. But the other case also stands. How about if I reverse the statements, but then if ledger replication is disabled, abort the current invokation and schedule a new one?","31/May/14 10:17;ikelly;To clarify, if we discover it is disabled, after building the index, abort and reschedule.","31/May/14 10:19;ikelly;> Adding one more point. In build test took more than 60secs, pls use bigger value 2 or 2.5mins.
Sure. This highlights another issue we have. The test is defined as a junit1 test, so all these timeouts we have are useless. I'll up the timeout, but we need to fix this other issue also (though in trunk), for 4.2.3 it's not important. I'm not sure if we have a jira for it.","31/May/14 10:33;rakeshr;bq.To clarify, if we discover it is disabled, after building the index, abort and reschedule.
yup this looks fine.

bq.but we need to fix this other issue also (though in trunk), for 4.2.3 it's not important. I'm not sure if we have a jira for it.
I could see BOOKKEEPER-739
","31/May/14 11:11;ikelly;New patch addresses final comment, puts timeout at 10minutes also.","31/May/14 11:47;hadoopqa;Testing JIRA BOOKKEEPER-745


Patch [0001-BOOKKEEPER-745-Fix-for-false-reports-of-ledger-unrep.patch|https://issues.apache.org/jira/secure/attachment/12647769/0001-BOOKKEEPER-745-Fix-for-false-reports-of-ledger-unrep.patch] downloaded at Sat May 31 11:11:41 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 920
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/646/","31/May/14 21:07;fpj;The patch looks good to me. The latest patch does not apply to the 4.2 branch, but I noticed that there is an older patch for 4.2. Did you mean to update it?

I also don't quite understand the javadoc warning in the latest QA build. Do you know why it started showing up now?  ","01/Jun/14 10:10;ikelly;These aren't new javadoc warnings, it's just that they appear now because javadoc runs fully since BOOKKEEPER-763. I'll update the 4.2 patch when the trunk patch is in.",02/Jun/14 06:32;rakeshr;Thanks [~ikelly]. Latest patch looks nice +1,02/Jun/14 09:54;ikelly;Committed r1599145 to trunk. Thanks for the reviews guys. Will backport to 4.2 now.,"02/Jun/14 11:23;hudson;SUCCESS: Integrated in bookkeeper-trunk #655 (See [https://builds.apache.org/job/bookkeeper-trunk/655/])
BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank) (ivank: rev 1599145)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java
",02/Jun/14 15:55;ikelly;Committed revision 1599251 to branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure all the bookkeeper callbacks not run under ledger handle lock,BOOKKEEPER-751,12712780,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,07/May/14 07:50,30/May/14 15:50,13/Mar/19 22:16,30/May/14 15:42,,,4.2.3,4.3.0,bookkeeper-client,,,0,,"we are running bookkeeper callbacks under ledger handle lock, which would possibly introduce deadlock if application call bookkeeper functions in those callbacks.",,,,,,,,,,,,,,,,30/May/14 05:27;hustlmsp;BOOKKEEPER-751.diff;https://issues.apache.org/jira/secure/attachment/12647538/BOOKKEEPER-751.diff,07/May/14 07:51;hustlmsp;BOOKKEEPER-751.diff;https://issues.apache.org/jira/secure/attachment/12643715/BOOKKEEPER-751.diff,30/May/14 05:27;hustlmsp;BOOKKEEPER-751_758.diff;https://issues.apache.org/jira/secure/attachment/12647537/BOOKKEEPER-751_758.diff,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2014-05-07 08:35:35.096,,,no_permission,,,,,,,,,,,,,391096,,,Fri May 30 15:50:16 UTC 2014,,,,,,0|i1vcyf:,391318,,,,,,,,07/May/14 07:51;hustlmsp;moved callbacks out of ledger handle lock.,"07/May/14 08:35;hadoopqa;Testing JIRA BOOKKEEPER-751


Patch [BOOKKEEPER-751.diff|https://issues.apache.org/jira/secure/attachment/12643715/BOOKKEEPER-751.diff] downloaded at Wed May  7 08:07:15 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 904
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/627/","20/May/14 21:44;fpj;This test case failed for me, could it be related:

Failed tests:   test10Ledgers200ThreadsRead(org.apache.bookkeeper.test.MultipleThreadReadTest): Test failed because we couldn't read entries","21/May/14 02:57;hustlmsp; test10Ledgers200ThreadsRead is kind of a resource-sensitive test. it is observed failing by me too. we could improve this test case, but it isn't related to this change.","29/May/14 16:48;hadoopqa;Testing JIRA BOOKKEEPER-751


Patch [BOOKKEEPER-751.diff|https://issues.apache.org/jira/secure/attachment/12643715/BOOKKEEPER-751.diff] downloaded at Thu May 29 16:13:28 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 916
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/643/","29/May/14 18:04;ikelly;There's something strange with the change to errorOutPendingAdds. You left the call to that which was inside the synchronized section. Also, doing this outside of the lock is dangerous. What happens if you close the ledger with LAC and then before you error out the pending adds, an add with entryid > LAC completes and acknowledges to the client.

The rest of the patch looks good. All tests pass for me also.",30/May/14 05:27;hustlmsp;addressed [~ikelly]'s comments on the race condition. attached a patch based on BOOKKEEPER-758 and a patch based on trunk (including BOOKKEEPER-758) for jenkins job.,"30/May/14 06:14;hadoopqa;Testing JIRA BOOKKEEPER-751


Patch [BOOKKEEPER-751.diff|https://issues.apache.org/jira/secure/attachment/12647538/BOOKKEEPER-751.diff] downloaded at Fri May 30 05:39:49 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 919
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/645/","30/May/14 13:08;ikelly;The test that failed is unrelated (I've seen it in other runs also).

Committed r1598585.","30/May/14 14:26;hudson;SUCCESS: Integrated in bookkeeper-trunk #652 (See [https://builds.apache.org/job/bookkeeper-trunk/652/])
BOOKKEEPER-751: Ensure all the bookkeeper callbacks not run under ledger handle lock (sijie via ivank) (ivank: rev 1598585)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
","30/May/14 15:42;ikelly;Committed revision 1598644 to branch 4.2. There's a small error I noticed while doing the backport, I'll make another jira for it though.","30/May/14 15:50;ikelly;Actually, the small error was in my head. All is fine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledger length can be inaccurate in failure case,BOOKKEEPER-673,12664811,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,ikelly,ikelly,21/Aug/13 11:00,30/May/14 14:33,13/Mar/19 22:16,14/Oct/13 16:32,,,4.2.3,4.3.0,,,,0,,"Ledger length can be inconsistent if a ledger is closed by a writing client that encounters an error. For example, in a cluster with 3 bookies, and an ledger with a q3e3 configuration, if a bookie dies, the client will close the ledger when it fails to write an entry. However, it has already added the length of the failed entry to the local ledger length, and this is what is stored to zk.",,,,,,,,,,,,,,,,11/Sep/13 03:59;hustlmsp;BOOKKEEPER-673.patch;https://issues.apache.org/jira/secure/attachment/12602517/BOOKKEEPER-673.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-21 17:25:50.883,,,no_permission,,,,,,,,,,,,,344754,,,Fri May 30 14:33:15 UTC 2014,,,,,,0|i1nga7:,345054,,,,,,,,"21/Aug/13 17:25;hustlmsp;is there any application relying on this length field rather than the LAC field? if this length field is a critical part as LAC, should we also fix it in 4.2.2?

from technical perspective, it should be an easy and straightforward fix: since we keep pending add ops in a queue, we could decrement the length when error out pending add ops during closing.","22/Aug/13 05:50;vinayrpet;Good finding Ivan. This issue might be there from the long time I think.
bq. is there any application relying on this length field rather than the LAC field?
I don't think so, if yes, it would have been found long back. 
From inside BK client code, this field value doesn't harm as of now.","22/Aug/13 08:30;ikelly;{quote}is there any application relying on this length field rather than the LAC field?{quote}
As Vinay said, if they were, they would have seen this already. As they haven't, i'd push this out to 4.3.0 and a possible 4.2.3. I'd like to get 4.2.2 out this week, and as such, I'd like to avoid any scope creep.",11/Sep/13 03:59;hustlmsp;generated a straightforward patch to decrement entry length when error out entries.,"11/Sep/13 07:42;hadoopqa;Testing JIRA BOOKKEEPER-673


Patch [BOOKKEEPER-673.patch|https://issues.apache.org/jira/secure/attachment/12602517/BOOKKEEPER-673.patch] downloaded at Wed Sep 11 07:15:10 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 880
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/491/",14/Oct/13 16:32;ikelly;Committed r1531970. Thanks Sijie,"14/Oct/13 17:15;hudson;SUCCESS: Integrated in bookkeeper-trunk #401 (See [https://builds.apache.org/job/bookkeeper-trunk/401/])
BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank) (ivank: rev 1531970)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
",30/May/14 14:33;ikelly;Committed revision 1598614 to branch 4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
findbugs fails to run on jenkins,BOOKKEEPER-763,12717259,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/May/14 12:45,30/May/14 11:20,13/Mar/19 22:16,30/May/14 10:42,,,4.3.0,,,,,0,,"Search for [ERROR] in https://builds.apache.org/job/bookkeeper-trunk-precommit-build/641/consoleText

The problem is that maven isn't able to resolve the sibling modules if they are not installed in a repo it has access to.",,,,,,,,,,,,,,,,29/May/14 13:49;ikelly;0001-Make-the-compile-phase-install-packages.patch;https://issues.apache.org/jira/secure/attachment/12647364/0001-Make-the-compile-phase-install-packages.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-30 00:28:58.125,,,no_permission,,,,,,,,,,,,,395463,,,Fri May 30 11:20:21 UTC 2014,,,,,,0|i1w35j:,395591,,,,,,,,"29/May/14 13:49;ikelly;Patch makes the compile phase install the packages rather than just build them. I've tested locally, and it catches the findbugs issues in BOOKKEEPER-758. It also highlights some issues with javadoc, which weren't being surfaced for the same reason.",30/May/14 00:28;hustlmsp;+1 for the patch.,30/May/14 10:42;ikelly;Committed r1598541. Thanks for reviewing Sijie.,"30/May/14 11:20;hudson;SUCCESS: Integrated in bookkeeper-trunk #650 (See [https://builds.apache.org/job/bookkeeper-trunk/650/])
BOOKKEEPER-763: findbugs fails to run on jenkins (ivank) (ivank: rev 1598541)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bin/test-patch-10-compile
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock on NIOServer shutdown,BOOKKEEPER-752,12712781,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,07/May/14 07:57,27/May/14 10:53,13/Mar/19 22:16,27/May/14 10:53,4.2.2,,4.2.3,,bookkeeper-server,,,0,,"Not all places in NIOServerFactory acquire locks in order, which cause deadlock on shutdown. ",,,,,,,,,,,,,,,,07/May/14 07:58;hustlmsp;BOOKKEEPER-752.diff;https://issues.apache.org/jira/secure/attachment/12643716/BOOKKEEPER-752.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-07 08:02:01.777,,,no_permission,,,,,,,,,,,,,391097,,,Tue May 27 10:53:43 UTC 2014,,,,,,0|i1vcyn:,391319,,,,,,,,07/May/14 07:58;hustlmsp;fix to ensure locking order to avoid deadlock. it is hard to make a test case for this.,"07/May/14 08:02;hadoopqa;Testing JIRA BOOKKEEPER-752


Patch [BOOKKEEPER-752.diff|https://issues.apache.org/jira/secure/attachment/12643716/BOOKKEEPER-752.diff] downloaded at Wed May  7 08:00:19 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","08/May/14 18:37;ikelly;Patch looks good. Does the sensible thing. +1.

I can't see where the deadlock would be though. In #shutdown, #clear acquires the NIOServerFactory lock. I don't see it acquiring the lock on the Cnxn though.",27/May/14 10:53;ikelly;Committed 1597744 to branch-4.2. Thanks [~hustlmsp]. I'd still be interested in where you saw the actual deadlock if you can remember.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Run the auditor bookie check periodically,BOOKKEEPER-744,12706647,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Apr/14 15:26,06/May/14 22:01,13/Mar/19 22:16,06/May/14 13:14,,,4.2.3,4.3.0,bookkeeper-auto-recovery,,,0,,"Previous the bookie check only runs when a bookie fails. If for some reason this doesn't pick up a failure, the failure will go undetected until the next time a bookie fails, in which case quorum could have been lost. This fix makes the bookie check run periodically, by default once a day.",,,,,,,,,,,,,,,BOOKKEEPER-743,06/May/14 09:33;ikelly;0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch;https://issues.apache.org/jira/secure/attachment/12643521/0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch,02/May/14 11:05;ikelly;0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch;https://issues.apache.org/jira/secure/attachment/12643025/0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch,06/May/14 13:14;ikelly;0001-Run-the-bookie-check-periodically.branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12643568/0001-Run-the-bookie-check-periodically.branch4.2.patch,24/Apr/14 12:46;ikelly;0001-Run-the-bookie-check-periodically.trunk.patch;https://issues.apache.org/jira/secure/attachment/12641708/0001-Run-the-bookie-check-periodically.trunk.patch,04/Apr/14 16:56;ikelly;0003-Run-the-bookie-check-periodically.trunk.patch;https://issues.apache.org/jira/secure/attachment/12638710/0003-Run-the-bookie-check-periodically.trunk.patch,04/Apr/14 16:56;ikelly;0005-Run-the-bookie-check-periodically.branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12638711/0005-Run-the-bookie-check-periodically.branch4.2.patch,03/May/14 21:38;fpj;BOOKKEEPER-744-4.2.patch;https://issues.apache.org/jira/secure/attachment/12643233/BOOKKEEPER-744-4.2.patch,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2014-04-04 17:51:00.097,,,no_permission,,,,,,,,,,,,,384970,,,Tue May 06 22:01:23 UTC 2014,,,,,,0|i1ubjz:,385237,,,,,,,,"04/Apr/14 17:51;hadoopqa;Testing JIRA BOOKKEEPER-744


Patch [0005-Run-the-bookie-check-periodically.branch4.2.patch|https://issues.apache.org/jira/secure/attachment/12638711/0005-Run-the-bookie-check-periodically.branch4.2.patch] downloaded at Fri Apr  4 17:49:23 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",24/Apr/14 12:46;ikelly;rebased patch,"24/Apr/14 14:00;hadoopqa;Testing JIRA BOOKKEEPER-744


Patch [0001-Run-the-bookie-check-periodically.trunk.patch|https://issues.apache.org/jira/secure/attachment/12641708/0001-Run-the-bookie-check-periodically.trunk.patch] downloaded at Thu Apr 24 13:32:26 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 902
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/614/","29/Apr/14 18:37;rakeshr;Thanks [~ikelly] for the patch. I've few minor comments:

# Please add unit in the description.
The interval is set in seconds.
+#auditorPeriodicBookieCheckInterval=84600
# We could skip the current bookie checking cycle if the replication is disabled
{code}
if (!ledgerUnderreplicationManager.isLedgerReplicationEnabled()) {
    LOG.info(""Ledger replication disabled, skipping"");
    return;
}
{code}
# Improve logs:
a)
Now we have two periodic checks 'AuditorPeriodicCheckInterval and AuditorPeriodicBookieCheckInterval. It would be good to print the interval in the log messages to show the periods.
{code}
LOG.info(""Auditor periodic ledger checking enabled 'auditorPeriodicCheckInterval' {} seconds"", interval);
LOG.info(""Auditor periodic bookie checking enabled 'auditorPeriodicBookieCheckInterval' {} seconds"", interval);
{code}
b) Add disable log message too
{code}
LOG.info(""Periodic bookie checking disabled"");
{code}
# Test case took 4secs in my env. IMHO, good to increase timeout=5000 to slightly bigger value say 30000. In worst case if the h/w is slow we can handle that case and still give the test a chance to pass.

-Rakesh",02/May/14 11:06;ikelly;New patch addresses all comments except 2 which is dealt with in BOOKKEEPER-745,"02/May/14 11:27;hadoopqa;Testing JIRA BOOKKEEPER-744


Patch [0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch|https://issues.apache.org/jira/secure/attachment/12643025/0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch] downloaded at Fri May  2 11:12:17 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/618/","02/May/14 14:24;fpj;The patch looks good to me, but it isn't applying cleanly to trunk for me, I'm not sure what's happening. It complains about bk_server.conf and ServerConfiguration.java, and when I tried to make those changes manually, it doesn't compile. ","02/May/14 19:44;fpj;Actually, the patch works fine with trunk (tests pass for me too), but it fails to apply to 4.2.","03/May/14 21:38;fpj;AuditorPeriodicBookieCheckTest is missing BookieSocketAddress, so I've reverted it back to InetSocketAddress, since BOOKKEEPER-644 is not in the 4.2 branch.","04/May/14 20:04;hadoopqa;Testing JIRA BOOKKEEPER-744


Patch [BOOKKEEPER-744-4.2.patch|https://issues.apache.org/jira/secure/attachment/12643233/BOOKKEEPER-744-4.2.patch] downloaded at Sun May  4 20:02:31 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","05/May/14 15:51;ikelly;[~fpj] is that a +1 for the trunk patch? I have a 4.2 patch, but i didn't want to update it until all comments have been addressed on trunk.",06/May/14 05:10;rakeshr;+1 Overall changes looks fine for me. But the trunk patch not applying cleanly in my env. [~fpj]'s new 4.2 patch works for me.,"06/May/14 09:29;hadoopqa;Testing JIRA BOOKKEEPER-744


Patch [BOOKKEEPER-744-4.2.patch|https://issues.apache.org/jira/secure/attachment/12643233/BOOKKEEPER-744-4.2.patch] downloaded at Tue May  6 09:28:10 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","06/May/14 09:33;ikelly;reuploading trunk patch, because the 4.2 patch is stopping jenkins from picking it up","06/May/14 10:22;hadoopqa;Testing JIRA BOOKKEEPER-744


Patch [0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch|https://issues.apache.org/jira/secure/attachment/12643521/0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch] downloaded at Tue May  6 09:54:45 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 904
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/622/",06/May/14 10:29;ikelly;the patch applies fine to trunk. It must be something in your setup. Committing this patch to trunk.,06/May/14 10:32;ikelly;Committed r1592705 to trunk.,06/May/14 10:40;ikelly;Also committed r1592706. I forgot to add some files.,"06/May/14 11:49;hadoopqa;Testing JIRA BOOKKEEPER-744


Patch [0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch|https://issues.apache.org/jira/secure/attachment/12643521/0001-BOOKKEEPER-744-Run-the-bookie-check-periodical.trunk.patch] downloaded at Tue May  6 11:47:34 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",06/May/14 13:13;ikelly;Committed revision 1592739 to branch-4.2,"06/May/14 22:01;hudson;FAILURE: Integrated in bookkeeper-trunk #636 (See [https://builds.apache.org/job/bookkeeper-trunk/636/])
BOOKKEEPER-744: Run the auditor bookie check periodically (ivank) [missing files] (ivank: rev 1592706)
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java
BOOKKEEPER-744: Run the auditor bookie check periodically (ivank) (ivank: rev 1592705)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Periodic ledger check running too often as doc doesn't match implementation.,BOOKKEEPER-743,12706646,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Apr/14 15:24,24/Apr/14 13:33,13/Mar/19 22:16,24/Apr/14 12:45,,,4.2.3,4.3.0,bookkeeper-auto-recovery,,,0,,"The documentation says the configuration value for ""auditorPeriodicCheckInterval"" should be in seconds, but in fact the scheduler schedules it using milliseconds. This mean its running far too often.
    
",,,,,,,,,,,,,,,BOOKKEEPER-742,24/Apr/14 11:48;ikelly;0001-Periodic-ledger-check-running-too-often-as-doc.trunk.patch;https://issues.apache.org/jira/secure/attachment/12641702/0001-Periodic-ledger-check-running-too-often-as-doc.trunk.patch,04/Apr/14 16:57;ikelly;0002-Periodic-ledger-check-running-too-often-as-doc.trunk.patch;https://issues.apache.org/jira/secure/attachment/12638712/0002-Periodic-ledger-check-running-too-often-as-doc.trunk.patch,04/Apr/14 16:57;ikelly;0004-Periodic-ledger-check-running-too-often-as.branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12638713/0004-Periodic-ledger-check-running-too-often-as.branch4.2.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2014-04-04 17:44:17.628,,,no_permission,,,,,,,,,,,,,384969,,,Thu Apr 24 13:33:22 UTC 2014,,,,,,0|i1ubjr:,385236,,,,,,,,"04/Apr/14 17:44;hadoopqa;Testing JIRA BOOKKEEPER-743


Patch [0004-Periodic-ledger-check-running-too-often-as.branch4.2.patch|https://issues.apache.org/jira/secure/attachment/12638713/0004-Periodic-ledger-check-running-too-often-as.branch4.2.patch] downloaded at Fri Apr  4 17:42:38 UTC 2014

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","07/Apr/14 14:05;rakeshr;Good catch. +1 for the patch, I've just a minor comment.

small nit: kindly correct code formatting in tests.
{code}
Thread.sleep(CHECK_INTERVAL*1000);
{code}",24/Apr/14 11:48;ikelly;Changed formatting. Will commit once QA runs.,"24/Apr/14 12:30;hadoopqa;Testing JIRA BOOKKEEPER-743


Patch [0001-Periodic-ledger-check-running-too-often-as-doc.trunk.patch|https://issues.apache.org/jira/secure/attachment/12641702/0001-Periodic-ledger-check-running-too-often-as-doc.trunk.patch] downloaded at Thu Apr 24 12:01:56 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 901
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/611/","24/Apr/14 12:45;ikelly;Committed revision 1589695 to branch-4.2,
Committed r1589694 to trunk.

Thanks for reviewing rakesh","24/Apr/14 13:33;hudson;SUCCESS: Integrated in bookkeeper-trunk #626 (See [https://builds.apache.org/job/bookkeeper-trunk/626/])
BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank) (ivank: rev 1589694)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix for empty ledgers losing quorum.,BOOKKEEPER-742,12706645,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Apr/14 15:23,24/Apr/14 11:45,13/Mar/19 22:16,24/Apr/14 11:41,,,4.2.3,4.3.0,bookkeeper-auto-recovery,,,0,,"If a ledger is open and empty, when a bookie in the ensemble crashes no recovery will take place (because there's nothing to recover). This open empty unrepaired ledger can persist for a long time. If it loses another bookie, it can lose quorum. At this point it's impossible for the bookie to know that its an empty ledger, and the admin gets notified of missing data.",,,,,,,,,,,,,,,BOOKKEEPER-741,15/Apr/14 10:46;ikelly;0001-Fix-for-empty-ledgers-using-quorum.trunk.patch;https://issues.apache.org/jira/secure/attachment/12640250/0001-Fix-for-empty-ledgers-using-quorum.trunk.patch,04/Apr/14 16:55;ikelly;0001-Fix-for-empty-ledgers-using-quorum.trunk.patch;https://issues.apache.org/jira/secure/attachment/12638709/0001-Fix-for-empty-ledgers-using-quorum.trunk.patch,24/Apr/14 11:45;ikelly;0003-Fix-for-empty-ledgers-using-quorum.branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12641701/0003-Fix-for-empty-ledgers-using-quorum.branch4.2.patch,04/Apr/14 16:55;ikelly;0003-Fix-for-empty-ledgers-using-quorum.branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12638708/0003-Fix-for-empty-ledgers-using-quorum.branch4.2.patch,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2014-04-04 17:37:08.01,,,no_permission,,,,,,,,,,,,,384968,,,Thu Apr 24 11:45:21 UTC 2014,,,,,,0|i1ubjj:,385235,,,,,,,,"04/Apr/14 17:37;hadoopqa;Testing JIRA BOOKKEEPER-742


Patch [0001-Fix-for-empty-ledgers-using-quorum.trunk.patch|https://issues.apache.org/jira/secure/attachment/12638709/0001-Fix-for-empty-ledgers-using-quorum.trunk.patch] downloaded at Fri Apr  4 17:09:15 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 901
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/599/","05/Apr/14 15:54;fpj;I remember this discussion on the list, but I can't remember the conclusion. This is a comment in the patch:

{noformat}
     * For example, if in a E3Q2, only 1 entry is written and the last bookie
     * in the ensemble fails, nothing has been written to it, so nothing needs to be
     * recovered. But if the second to last bookie fails, we've now lost quorum for
     * the second entry, so it's impossible to see if the second has been written or
     * not.
{noformat}

The problem here is that you've lost too many bookies, so it is possible that you've lost data and consequently the ledger is bad. Say that entry has been successfully written and acknowledged. In this case, we can't recover 1 and the ledger is bad, but we can't distinguish the case you're describing from the one I just presented.

Also, for completeness, I just wanted to confirm that if 3 or more entries have been written, then we would be able to spot that the ledger is really bad because we would be able to see entry 2, but not 1. 

One small point about the patch. This method isFinalEnsembleOpenAndAvailable, which seems to be key to this patch, returns true in the case the ledger metadata says closed. Returning true in this case is a bit misleading, and perhaps we could rename the method to something like shouldCloseLedger and negate the return values.  
","07/Apr/14 08:43;ikelly;{quote}
The problem here is that you've lost too many bookies, so it is possible that you've lost data and consequently the ledger is bad. Say that entry has been successfully written and acknowledged. In this case, we can't recover 1 and the ledger is bad, but we can't distinguish the case you're describing from the one I just presented.
{quote}
It's the same case. But we have an autorecovery system that should stop us from ever getting to that state, because we should deal with the case where the loss of 1 more bookie would cause data to possibly be lost.

{quote}
Also, for completeness, I just wanted to confirm that if 3 or more entries have been written, then we would be able to spot that the ledger is really bad because we would be able to see entry 2, but not 1. 
{quote}
In this case, even if 2 entries have been written the current code would handle it because it was see that E2 exists on the second bookie, but not the third.

{quote}
One small point about the patch. This method isFinalEnsembleOpenAndAvailable, which seems to be key to this patch, returns true in the case the ledger metadata says closed. Returning true in this case is a bit misleading, and perhaps we could rename the method to something like shouldCloseLedger and negate the return values. 
{quote}
shouldCloseLedger is too generic, I want to make it clear in the code that this is a special case. I can rename, but it needs to be clear that the method is checking for something particular.","07/Apr/14 13:57;rakeshr;For future reference, I'm pasting the link to the mail discussions we had earlier : [Problem in rereplication algorithm|http://mail-archives.apache.org/mod_mbox/zookeeper-bookkeeper-dev/201403.mbox/%3c05e401cf38e0$7fa56810$7ef03830$@yahoo.com%3e]

\\
Thanks [~ikelly] for the patch, overall it looks fine. I've few clarifications:

*1)* bq.It's the same case. But we have an autorecovery system that should stop us from ever getting to that state, because we should deal with the case where the loss of 1 more bookie would cause data to possibly be lost.
So in an ideal cluster its not expected to see multiple failures at sametime. If multiple failure happens, again it would enter into the loop as opening ledger wouldn't get succeeded.

{code}
+                    if (!isFinalEnsembleOpenAndAvailable(lh)) {
+                        lh = admin.openLedger(ledgerId);
+                    }
{code}
\\
*2)* I failed to see reason why the following sync block is removed in the patch ?
{code}
void submitAuditTask() {
-        synchronized (this)
{code}

\\
Also, [~ikelly] it would be great if you can have a look at BOOKEEPER-733, this is another case where I noticed unnecessary cycles. During that time, I thought of putting together all these cases (also considering unknown cases if any in future) as a whole and think of a generic way of handling by having return codes. Now based on the return code it can build an idea of BACKOFF or skipping that ledger in further cycles.","07/Apr/14 14:21;ikelly;{quote}
So in an ideal cluster its not expected to see multiple failures at sametime. If multiple failure happens, again it would enter into the loop as opening ledger wouldn't get succeeded.
{quote}
The problem before this patch is that, after the first failure occurs, no corrective action is taken. Then when the second does occur we get into the bad situation. The two failures may have many weeks or months between them. In fact, these weren't even failures, but boxes being taken out of rotation. The whole process got stalled, because it looked like a ledger had been lost.

{quote}
 2) I failed to see reason why the following sync block is removed in the patch ?
{quote}
Because it serves no purpose. What resource is the sync block protecting (rather, the two sync blocks; the method is also synchronized)?

I'll take a look at BOOKKEEPER-733","07/Apr/14 23:31;fpj;bq. shouldCloseLedger is too generic

shouldCloseLedgerWhenLedgerOpenAndEnsembleAvailable ;-)

or

shouldCloseLedgerIfLedgerOpenAndEnsembleAvailable","08/Apr/14 08:02;rakeshr;bq.Because it serves no purpose. What resource is the sync block protecting (rather, the two sync blocks; the method is also synchronized)?
From the code I could see 'sync block' is to avoid submitting tasks while shutdown. Yeah two sync is not required (synchronized method and sync block). But in the patch both are removed.

bq. shouldCloseLedgerIfLedgerOpenAndEnsembleAvailable
Thanks Flavio, this is better one;)",08/Apr/14 15:45;ikelly;The method name for the test shouldn't tell the calling code what to do. How about isLastSegmentOpenAndMissingBookies(LedgerHandle)? i.e. inverting the return value.,"08/Apr/14 15:49;ikelly;re the sync, you're right, i missed the synchronized(Auditor.this), will add it back. ","08/Apr/14 16:26;fpj;bq. isLastSegmentOpenAndMissingBookies(LedgerHandle)

yes, this is good.","11/Apr/14 22:46;fpj;Could you make the changes so that I can check this in, please?",15/Apr/14 10:46;ikelly;Adds back sync on submitAuditTask. Renames checking method.,"15/Apr/14 12:15;hadoopqa;Testing JIRA BOOKKEEPER-742


Patch [0001-Fix-for-empty-ledgers-using-quorum.trunk.patch|https://issues.apache.org/jira/secure/attachment/12640250/0001-Fix-for-empty-ledgers-using-quorum.trunk.patch] downloaded at Tue Apr 15 11:47:16 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/604/","15/Apr/14 13:11;rakeshr;Thanks [~ikelly] Latest patch looks nice +1 frome me. I didn't get the reason for the failure, can we rerun to see QA report again ?","17/Apr/14 14:08;hadoopqa;Testing JIRA BOOKKEEPER-742


Patch [0001-Fix-for-empty-ledgers-using-quorum.trunk.patch|https://issues.apache.org/jira/secure/attachment/12640250/0001-Fix-for-empty-ledgers-using-quorum.trunk.patch] downloaded at Thu Apr 17 13:40:59 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 901
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/605/",23/Apr/14 14:39;rakeshr;Thanks Ivan. +1 latest patch looks nice.,24/Apr/14 08:45;ikelly;Committed r1589636 to trunk. Thanks for reviewing guys.,"24/Apr/14 09:14;hudson;SUCCESS: Integrated in bookkeeper-trunk #624 (See [https://builds.apache.org/job/bookkeeper-trunk/624/])
BOOKKEEPER-742: Fix for empty ledgers losing quorum. (ivank) (ivank: rev 1589636)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
",24/Apr/14 11:41;ikelly;Committed revision 1589675 for branch-4.2,24/Apr/14 11:45;ikelly;Final patch used for 4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoRecoveryMainTest#testAutoRecoverySessionLoss is failing,BOOKKEEPER-740,12699371,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,07/Mar/14 09:25,10/Mar/14 02:45,13/Mar/19 22:16,10/Mar/14 02:15,,,4.3.0,,bookkeeper-auto-recovery,,,0,,"It seems the test case is failiing due to the following exception at join and is skipping auditorElector.shutdown.

{code}
2014-03-06 13:27:18,603 - WARN  - [AutoRecoveryDeathWatcher-15007:AutoRecoveryMain@127] - Interrupted shutting down auto recovery
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Thread.join(Thread.java:1186)
	at java.lang.Thread.join(Thread.java:1239)
	at org.apache.bookkeeper.replication.AutoRecoveryMain.shutdown(AutoRecoveryMain.java:122)
{code}",,,,,,,,,,,,,,,,07/Mar/14 09:30;rakeshr;0001-BOOKKEEPER-740.patch;https://issues.apache.org/jira/secure/attachment/12633336/0001-BOOKKEEPER-740.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-10 02:13:39.71,,,no_permission,,,,,,,,,,,,,377718,,,Mon Mar 10 02:45:46 UTC 2014,,,,,,0|i1t33j:,378010,,,,,,,,"07/Mar/14 09:31;rakeshr;Moved the auditorElector#shutdown to separate try/catch block, so it will be shutdown cleanly.",10/Mar/14 02:13;hustlmsp;the patch looks good to me. +1,10/Mar/14 02:15;hustlmsp;committed as r1575795.,"10/Mar/14 02:45;hudson;SUCCESS: Integrated in bookkeeper-trunk #578 (See [https://builds.apache.org/job/bookkeeper-trunk/578/])
BOOKKEEPER-740: AutoRecoveryMainTest#testAutoRecoverySessionLoss is failing (Rakesh via sijie) (sijie: rev 1575795)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PerChannelBookieClient should print address that it failed to connect to when it fails to correct,BOOKKEEPER-726,12693142,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Feb/14 16:45,10/Mar/14 02:11,13/Mar/19 22:16,10/Mar/14 02:11,,,4.2.3,4.3.0,bookkeeper-client,,,0,,Currently we log the channel. But the channel doesn't contain the address if the connection failed.,,,,,,,,,,,,,,,,04/Feb/14 16:51;ikelly;0002-BOOKKEEPER-726-When-a-connection-fails-it-doesn-t-ha.patch;https://issues.apache.org/jira/secure/attachment/12626900/0002-BOOKKEEPER-726-When-a-connection-fails-it-doesn-t-ha.patch,10/Mar/14 02:10;hustlmsp;BOOKKEEPER-726_branch42.patch;https://issues.apache.org/jira/secure/attachment/12633621/BOOKKEEPER-726_branch42.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-02-04 17:19:23.612,,,no_permission,,,,,,,,,,,,,371728,,,Mon Mar 10 02:11:09 UTC 2014,,,,,,0|i1s2bb:,372028,,,,,,,,"04/Feb/14 17:19;hadoopqa;Testing JIRA BOOKKEEPER-726


Patch [0002-BOOKKEEPER-726-When-a-connection-fails-it-doesn-t-ha.patch|https://issues.apache.org/jira/secure/attachment/12626900/0002-BOOKKEEPER-726-When-a-connection-fails-it-doesn-t-ha.patch] downloaded at Tue Feb  4 16:51:32 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/577/",06/Feb/14 08:34;hustlmsp;committed as r1565115.,"06/Feb/14 10:04;hudson;SUCCESS: Integrated in bookkeeper-trunk #541 (See [https://builds.apache.org/job/bookkeeper-trunk/541/])
BOOKKEEPER-726: PerChannelBookieClient should print address that it failed to connect to when it fails to correct (ivank via sijie) (sijie: rev 1565115)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
","03/Mar/14 18:37;rakeshr;IMHO, it would be good to backport the changes to branch4.2 as well. Please feel free to close if anyone has different opinion. Thanks",10/Mar/14 02:11;hustlmsp;committed as r1575794 in branch 4.2.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logging channel exceptions in PerChannelBookieClient,BOOKKEEPER-714,12686821,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,31/Dec/13 07:06,10/Mar/14 02:07,13/Mar/19 22:16,10/Mar/14 02:07,,,4.2.3,4.3.0,bookkeeper-client,,,0,,Logging channel exceptions in PerChannelBookieClient to identify channel connect issue.,,,,,,,,,,,,,,,,31/Dec/13 07:30;hustlmsp;BOOKKEEPER-714.patch;https://issues.apache.org/jira/secure/attachment/12620910/BOOKKEEPER-714.patch,10/Mar/14 02:07;hustlmsp;BOOKKEEPER-714_branch42.patch;https://issues.apache.org/jira/secure/attachment/12633620/BOOKKEEPER-714_branch42.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-12-31 08:25:01.004,,,no_permission,,,,,,,,,,,,,365814,,,Mon Mar 10 02:07:41 UTC 2014,,,,,,0|i1r227:,366121,,,,,,,,"31/Dec/13 07:30;hustlmsp;attach a patch to log channel exceptions, which could help investigating the test case failure.","31/Dec/13 08:25;hadoopqa;Testing JIRA BOOKKEEPER-714


Patch [BOOKKEEPER-714.patch|https://issues.apache.org/jira/secure/attachment/12620910/BOOKKEEPER-714.patch] downloaded at Tue Dec 31 07:56:35 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 885
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/553/","01/Jan/14 16:12;rakeshr;+1 lgtm, this will help to know more on channel exceptions.",09/Jan/14 06:30;hustlmsp;committed as r1556732. thanks Rakesh for reviewing.,"09/Jan/14 06:58;hudson;SUCCESS: Integrated in bookkeeper-trunk #501 (See [https://builds.apache.org/job/bookkeeper-trunk/501/])
BOOKKEEPER-714: Logging channel exceptions in PerChannelBookieClient (sijie) (sijie: rev 1556732)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
","03/Mar/14 18:36;rakeshr;IMHO, it would be good to backport the changes to branch4.2 as well. Please feel free to close if anyone has different opinion. Thanks",10/Mar/14 02:07;hustlmsp;committed as r1575793 in branch 4.2.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
we should have request timeouts rather than channel timeout in PerChannelBookieClient,BOOKKEEPER-602,12641105,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,i0exception,hustlmsp,hustlmsp,05/Apr/13 19:03,10/Mar/14 02:00,13/Mar/19 22:16,10/Mar/14 02:00,4.2.0,4.2.1,4.2.3,4.3.0,bookkeeper-client,,,0,,"currently we only have readTimeout in netty channel, it timeouts only when there is no activities in that channel, but it can't track timeouts of individual requests. if a channel continues having read entry activities, it might shadow a slow add entry response, which is bad impacting add latency.",,,,,,,,,,,,,,,,28/Oct/13 20:56;ikelly;0001-BOOKKEEPER-602-we-should-have-request-timeouts-rathe.patch;https://issues.apache.org/jira/secure/attachment/12610664/0001-BOOKKEEPER-602-we-should-have-request-timeouts-rathe.patch,26/Jul/13 05:42;hustlmsp;BOOKKEEPER-602.diff;https://issues.apache.org/jira/secure/attachment/12594330/BOOKKEEPER-602.diff,07/Jul/13 00:59;hustlmsp;BOOKKEEPER-602.diff;https://issues.apache.org/jira/secure/attachment/12591098/BOOKKEEPER-602.diff,10/Mar/14 01:59;hustlmsp;BOOKKEEPER-602_branch42.diff;https://issues.apache.org/jira/secure/attachment/12633619/BOOKKEEPER-602_branch42.diff,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-04-05 19:15:02.53,,,no_permission,,,,,,,,,,,,,321521,,,Mon Mar 10 01:58:45 UTC 2014,,,,,,0|i1jh3r:,321866,,,,,,,,"05/Apr/13 19:15;ikelly;I think the original implementation did have a timer per request. The problem was this meant a thread per request. That said, this could easily be implemented with a scheduled executor instead of a timer.",05/Apr/13 19:18;hustlmsp;yes. would attach the patch later.,07/Jul/13 00:59;hustlmsp;attach a patch having request timeout rather than channel timeout.,"07/Jul/13 03:03;hadoopqa;Testing JIRA BOOKKEEPER-602


Patch [BOOKKEEPER-602.diff|https://issues.apache.org/jira/secure/attachment/12591098/BOOKKEEPER-602.diff] downloaded at Sun Jul  7 02:37:36 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 853
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testDeadlock(org.apache.hedwig.server.persistence.TestDeadlock)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/416/","19/Jul/13 17:05;ikelly;The patch looks mostly good. Setting the getAddEntryTimeout() to 1 is too low though, and a behavioural break. It should default to the value of getReadTimeout(), which should also be deprecated. The fact that you had to create a TestBKConfiguration shows that it breaks current behaviour. Also, the test failure needs to be fixed.","25/Jul/13 06:28;hustlmsp;The reason why we put getAddEntryTimeout to 1 is to put the best parameter for most of cases. so the user doesn't need to tune it too much. based on this consideration, we'd prefer putting the tuned value as default value and having TestBKConfiguration to handle low-throughput case (this TestBKConfiguration also exists in the journal improvements we made in BOOKKEEPER-657). if you feel strongly about it, I could change. let me know.

1 second is based on performance evaluation, 1) we don't want a slow add request to cause too much pending requests accumulated in client (which cause bad gc behavior) 2) for latency consideration.

the failure test is also related to the configuration setting. I forgot to bring the changes for hedwig when generating the patch. will add soon.",26/Jul/13 05:42;hustlmsp;add missing config in TestDeadLock to fix the failed test.,"26/Jul/13 07:35;hadoopqa;Testing JIRA BOOKKEEPER-602


Patch [BOOKKEEPER-602.diff|https://issues.apache.org/jira/secure/attachment/12594330/BOOKKEEPER-602.diff] downloaded at Fri Jul 26 07:06:53 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 860
.    Tests failed: 1
.    Tests errors: 1

.    The patch failed the following testcases:

.      testCloseSubscription[1](org.apache.hedwig.server.integration.TestHedwigHubProxy)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/441/","28/Oct/13 20:56;ikelly;I've rebased this patch to trunk. I made some small mods also. getReadTimeout() and setReadTimeout are now deprecated. The old timeout mechanism has been removed (the original patch still had it in). Lastly, i've made the default add timeout call getReadTimeout(). This is to maintain behavioural compatibility for now. I'm fine with changing it in the future, but I'd like to see some numbers first to be sure we're not hitting a lot of false positives. I'm guessing the experience you guys have is with your branch, which also has a lot of other performance improvements.","28/Oct/13 22:54;hadoopqa;Testing JIRA BOOKKEEPER-602


Patch [0001-BOOKKEEPER-602-we-should-have-request-timeouts-rathe.patch|https://issues.apache.org/jira/secure/attachment/12610664/0001-BOOKKEEPER-602-we-should-have-request-timeouts-rathe.patch] downloaded at Mon Oct 28 22:26:39 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 6 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 882
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/514/",29/Oct/13 04:08;hustlmsp;+1 commiting,29/Oct/13 04:15;hustlmsp;committed as r1536584. Thanks Aniruddha for the work. Thanks Ivan for reviewing and rebasing the patch.,"29/Oct/13 04:44;hudson;SUCCESS: Integrated in bookkeeper-trunk #418 (See [https://builds.apache.org/job/bookkeeper-trunk/418/])
BOOKKEEPER-602: we should have request timeouts rather than channel timeout in PerChannelBookieClient (Aniruddha, ivank via sijie) (sijie: rev 1536584)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java
","03/Mar/14 18:37;rakeshr;IMHO, it would be good to backport the changes to branch4.2 as well. Please feel free to close if anyone has different opinion. Thanks",10/Mar/14 01:58;hustlmsp;committed as r1575792 in branch 4.2.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-distributing topics among newly added hubs.,BOOKKEEPER-363,12603390,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,i0exception,i0exception,i0exception,14/Aug/12 07:00,07/Mar/14 18:15,13/Mar/19 22:16,07/Mar/14 17:42,4.2.0,,4.3.0,,hedwig-server,,,1,,"When a new hub is added to an already existing hedwig cluster, that hub should pick up some of the topics. Currently the mechanism hedwig provides is to configure the time for which a topic is retained. A better approach might be to run a re-balancer thread that periodically checks if topics are distributed evenly among hubs and if not, releases some topics to balance the load. 

https://reviews.apache.org/r/6700/
There is a race condition while updating load as mentioned in the comments and that is not handled in this review.",,,,,,,,,,,,,,,,21/Aug/12 00:18;i0exception;BK-363.patch;https://issues.apache.org/jira/secure/attachment/12541680/BK-363.patch,17/Sep/12 18:21;i0exception;BK-363.patch.v2;https://issues.apache.org/jira/secure/attachment/12545447/BK-363.patch.v2,06/Jul/13 21:22;hustlmsp;BOOKKEEPER-363.diff;https://issues.apache.org/jira/secure/attachment/12591092/BOOKKEEPER-363.diff,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-08-17 13:58:37.163,,,no_permission,,,,,,,,,,,,,295932,,,Fri Mar 07 18:15:28 UTC 2014,,,,,,0|i1432f:,231959,,,,,,,,"17/Aug/12 08:13;i0exception;Couple of issues I found while implementing this. 
1) Hedwig hubs only update the load while claiming topics. We should also update the load while releasing topics. 
2) HubLoad is not thread safe and faces race conditions while handling (1). Instead of providing a setNumTopics(), we should have incrementNumTopics() and decrementNumTopics() and update the load periodically (perhaps as a side effect of a successful rebalance) 

(1) also affects the case where a new hub joins a balanced cluster while new topic ownership requests are coming in parallel. Every hub will choose this new hub as the least loaded node and it will get ownership of a lot of topics and this would increase it's reported load to a large value and thus this node would never claim any more topics. Or perhaps I'm missing something. 

To give a high level overview of the implementation, we introduce a rebalanceCluster() function in the HubServerManager interface. This takes in a tolerance percentage and the maximum load to shed per call (to make sure you don't suddenly release a lot of topics) We also add a new class called TopicBasedLoadShedder that sheds load by releasing topics. It calculates the average load on the cluster from the reported zookeeper load data, calculates if the topics the current hub owns is more than average + average*tolerance percentage/100 and if so, releases enough topics to reach average. Any feedback would be highly appreciated.","17/Aug/12 13:58;hustlmsp;{quote}
1) Hedwig hubs only update the load while claiming topics. We should also update the load while releasing topics. 
{quote}

ah, ur right. it would make the requests really unbalance if some hubs release topics periodically.

{quote}
we introduce a rebalanceCluster() function in the HubServerManager interface.
{quote}

I am guessing who does the balance work. Each hub server runs independently? Or a hub server would be elected as a leader to do it? 

I am doubting if each hub server runs independently, hub servers might make a wrong decision to releasing topics, which cause lots of topics to be released.

","17/Aug/12 16:34;i0exception;Well, if you configure a lenient tolerance level, most hubs won't release topics unless absolutely necessary. IMO, it's okay to run this separately on every hub and over time, topics should balance out well. The maximum load to shed configuration option will help in stopping a hub from suddenly releasing too many topics. Currently this is not a percentage, but a number. What do you think? ",21/Aug/12 00:18;i0exception;I've attached a patch for this. Please feel free to point out any changes that might be required.,26/Sep/12 11:06;hustlmsp;canceled the patch until fixing Ivan's comments in review board.,"07/Dec/12 10:42;ikelly;Moving to 4.3.0, as this is a new feature and there hasn't been movement on it lately.",06/Jul/13 21:22;hustlmsp;rebased [~i0exception]'s patch to latest trunk.,"06/Jul/13 22:03;hadoopqa;Testing JIRA BOOKKEEPER-363


Patch [BOOKKEEPER-363.diff|https://issues.apache.org/jira/secure/attachment/12591092/BOOKKEEPER-363.diff] downloaded at Sat Jul  6 21:37:28 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 859
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/410/",07/Mar/14 17:42;ikelly;Committed r1575338. Thanks Aniruddha.,"07/Mar/14 18:15;hudson;SUCCESS: Integrated in bookkeeper-trunk #575 (See [https://builds.apache.org/job/bookkeeper-trunk/575/])
BOOKKEEPER-363: Re-distributing topics among newly added hubs. (aniruddha via ivank) (ivank: rev 1575338)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubLoad.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubServerManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicBasedLoadShedder.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestTopicBasedLoadShedder.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeperTest failure,BOOKKEEPER-689,12672383,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,fpj,fpj,04/Oct/13 18:16,07/Mar/14 18:15,13/Mar/19 22:16,07/Mar/14 18:15,,,,,,,,0,,"Tests run: 12, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 49.385 sec <<< FAILURE!
testCloseDuringOp[1](org.apache.bookkeeper.client.BookKeeperTest)  Time elapsed: 14.74 sec  <<< FAILURE!
junit.framework.AssertionFailedError: Close never completed
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.assertTrue(Assert.java:20)
        at org.apache.bookkeeper.client.BookKeeperTest.testCloseDuringOp(BookKeeperTest.java:217)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)",,,,,,,,,,,,,,,,06/Oct/13 21:32;hustlmsp;BOOKKEEPER-689.diff;https://issues.apache.org/jira/secure/attachment/12607107/BOOKKEEPER-689.diff,04/Oct/13 21:48;fpj;TEST-org.apache.bookkeeper.client.BookKeeperTest.xml;https://issues.apache.org/jira/secure/attachment/12606905/TEST-org.apache.bookkeeper.client.BookKeeperTest.xml,04/Oct/13 18:18;fpj;org.apache.bookkeeper.client.BookKeeperTest-output.txt;https://issues.apache.org/jira/secure/attachment/12606851/org.apache.bookkeeper.client.BookKeeperTest-output.txt,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2013-10-04 18:37:58.475,,,no_permission,,,,,,,,,,,,,352010,,,Fri Mar 07 18:15:22 UTC 2014,,,,,,0|i1oow7:,352298,,,,,,,,04/Oct/13 18:18;fpj;Uplodaing log file.,04/Oct/13 18:37;ikelly;Could you upload TEST-org.apache.bookkeeper.client.BookKeeperTest.xml. The log attached contains all tests together. The xml splits them out so we can see which logs are for #testCloseDuringOp[1]. Does this happen repeatedly and consistently?,04/Oct/13 21:48;fpj;As requested. I haven't tried another time because I wanted to keep the log files. I can try to run again to see if I get it failing consistently.,05/Oct/13 16:52;fpj;Are the 5 NPEs in the logs expected?,"05/Oct/13 19:13;rakeshr;[~fpj], could you please see BOOKKEEPER-688 fix for the following NPE.
{code}
2013-10-03 13:10:38,232 - WARN  - [New I/O client worker #87-2:PerChannelBookieClient@274] - Add entry operation failed
java.lang.NullPointerException
	at org.apache.bookkeeper.proto.PerChannelBookieClient.addEntry(PerChannelBookieClient.java:258)
	at org.apache.bookkeeper.proto.BookieClient$2.operationComplete(BookieClient.java:138)
{code}","06/Oct/13 08:56;fpj;Thanks, Rakesh, I can give it a try, but apparently the NPEs are there even when the test passes. Do you think it could be related?","06/Oct/13 10:34;rakeshr;[~fpj], I think NPE has no relation with test case failure mentioned in the issue. I have seen few NPE in the attached logs and my above comment was related to this. Anyway I'll also try to see the test case failure.

By seeing the following logs, the operation performed is:
1) Successfully connected to bookie
2) Tries to addEntry asynchronously.
3) At the sametime, closed the client. During channel closure, PerChannelBookieClient sets channel=null and causing NPE for the above addEntry 2)
{code}
2013-10-03 13:10:31,114 - INFO  - [New I/O client worker #11-1:PerChannelBookieClient$1@137] - Successfully connected to bookie: [id: 0x5a2470ee, /10.85.254.167:61606 => /10.85.254.167:15020]
2013-10-03 13:10:31,121 - WARN  - [New I/O client worker #11-2:PerChannelBookieClient@274] - Add entry operation failed
java.lang.NullPointerException
	at org.apache.bookkeeper.proto.PerChannelBookieClient.addEntry(PerChannelBookieClient.java:249)
2013-10-03 13:10:31,146 - INFO  - [Thread-15:PerChannelBookieClient@493] - Disconnected from bookie channel [id: 0x5a2470ee, /10.85.254.167:61606 :> /10.85.254.167:15020]
{code}","06/Oct/13 17:43;rakeshr;Hi All, hope the following observation/anlysis will help us to understand more on the issue:

From the logs, 'mainWorkerPool#shutdown()' is waiting for the termination and the timeout period is 10seconds, by this time the test case is also waiting 10seconds in latch. Since client#close is taking morethan 10seconds, the test case is failing.

step-1) at 13:10:55,508 made bookie shutdown
step-2) at 13:10:55,520 has created PerChannelBookieClient connections
step-3) after this it has invoked client#close(). But this call is not completed quickly and enters into timed waiting(10seconds) for the mainWorkerPool termination. Here I could see 'queued tasks = 1' in 'ThreadPoolExecutor@13ff0ab6' and I'm thinking this is the reason for spending more time in 'mainWorkerPool.awaitTermination'. But I couldn't make it out the reason for 'queued tasks = 1', I'd appreciate any help to finish the analysis.
step-4) At the same time our test case is also waiting in latch, here also waiting period is 10seconds. 
assertTrue(""Close never completed"", l.await(10, TimeUnit.SECONDS));

{code}
2013-10-03 13:10:55,508 - INFO  - [Thread-219:Bookie@952] - Shutting down Bookie-15233 with exitCode 0
2013-10-03 13:10:55,517 - INFO  - [New I/O client worker #211-2:PerChannelBookieClient$1@137] - Successfully connected to bookie: [id: 0x22ec7b20, /10.85.254.167:62636 =&gt; /10.85.254.167:15234]
2013-10-03 13:10:55,520 - INFO  - [New I/O client worker #211-3:PerChannelBookieClient$1@137] - Successfully connected to bookie: [id: 0x171995d6, /10.85.254.167:62637 =&gt; /10.85.254.167:15235]

2013-10-03 13:10:55,521 - ERROR - [New I/O client worker #211-2:PerChannelBookieClient@549] - Unexpected exception caught by bookie client channel handler
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@4dc3b693 rejected from java.util.concurrent.ThreadPoolExecutor@13ff0ab6[Shutting down, pool size = 0, active threads = 0, queued tasks = 1, completed tasks = 0]

2013-10-03 13:11:05,521 - WARN  - [Thread-219:BookKeeper@637] - The mainWorkerPool did not shutdown cleanly
{code}

{code}
BookKeeper#close()
        mainWorkerPool.shutdown();
        if (!mainWorkerPool.awaitTermination(10, TimeUnit.SECONDS)) {
            LOG.warn(""The mainWorkerPool did not shutdown cleanly"");
        }
{code}","06/Oct/13 21:28;hustlmsp;I don't think this is an issue in bookkeeper client.

[ pool size = 0, active threads = 0, queued tasks = 1, completed tasks = 0 ]. pool size & active threads are 0 means there is no worker thread in the executor. and completed tasks is 0 means there is no tasks is executed. it looks like a race condition in add & shutdown of executor, so the task is queued and but no work thread to execute.

since bookkeeper#close takes up to 10 seconds, the bookkeeper test should wait more than 10 seconds until bookkeeper#close finished.

{code}
    public String toString() {
        long ncompleted;
        int nworkers, nactive;
        final ReentrantLock mainLock = this.mainLock;
        mainLock.lock();
        try {
            ncompleted = completedTaskCount;
            nactive = 0;
            nworkers = workers.size();
            for (Worker w : workers) {
                ncompleted += w.completedTasks;
                if (w.isLocked())
                    ++nactive;
            }
        } finally {
            mainLock.unlock();
        }
        int c = ctl.get();
        String rs = (runStateLessThan(c, SHUTDOWN) ? ""Running"" :
                     (runStateAtLeast(c, TERMINATED) ? ""Terminated"" :
                      ""Shutting down""));
        return super.toString() +
            ""["" + rs +
            "", pool size = "" + nworkers +
            "", active threads = "" + nactive +
            "", queued tasks = "" + workQueue.size() +
            "", completed tasks = "" + ncompleted +
            ""]"";
    }
{code}","06/Oct/13 21:32;hustlmsp;increased the test wait time from 10 seconds to 12 seconds, since the BookKeeper#close might take up to 10 seconds.","06/Oct/13 22:03;hadoopqa;Testing JIRA BOOKKEEPER-689


Patch [BOOKKEEPER-689.diff|https://issues.apache.org/jira/secure/attachment/12607107/BOOKKEEPER-689.diff] downloaded at Sun Oct  6 21:35:54 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 880
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/506/","07/Oct/13 03:52;rakeshr;[~hustlmsp] in your patch timeout is increased to 12seconds, again there could be chance of intermittent failures due to 'scheduler' timeout, what do you say?
{code}
BookKeeper#close(){
    if (!scheduler.awaitTermination(10, TimeUnit.SECONDS))
    if (!mainWorkerPool.awaitTermination(10, TimeUnit.SECONDS))
}
{code}","07/Oct/13 04:03;hustlmsp;this is a test case timeout, in this test case, scheduler will not be used.","07/Oct/13 08:50;fpj;There are two issues here that would be good to converge on: 

# Is this a blocker for the release? I need to understand it because if it isn't, then I'd like to +1 it.
# The close call indeed waits for 10 seconds, but if the close executes cleanly, then there is no reason to wait for the whole 10 seconds. Is there a valid reason for the close not to complete cleanly?","07/Oct/13 09:35;ikelly;Has anyone been able to repro this? I've had this test running in a loop all since friday and it has yet to hit a failure. [~fpj] by any chance did you change networks (i.e. disconnect eth) or similar while the tests were running?
","07/Oct/13 10:34;fpj;yeah, this is annoying. I have tried to reproduce it but I also couldn't. There was no change of network when I ran it, so there is nothing trivial I can think of to associate it to. 

I have one question about the test case, though. I would expect the test to fail if the close can't complete cleanly, but we are really not propagating up any error in the case some component doesn't shutdown cleanly. Do we care at all if it doesn't shut down cleanly?","07/Oct/13 16:01;ikelly;If which doesn't shutdown cleanly?

I've run this for a couple of hours in a loop and another machine and a mac now, still no repro.","07/Oct/13 17:38;rakeshr;bq.this is a test case timeout, in this test case, scheduler will not be used.
Yeah I agree.

[~ikelly] I also tried several times but couldn't see a failure. In our codebase, if not properly shutdown, close is simply giving a WARN and continue. Does this induce any leaks or how long the shutdown will wait?

Shutdown ExecutorService, javadoc says 'shutdownNow', when normal shutdown returns false:
{code}
     pool.shutdown(); // Disable new tasks from being submitted
     // Wait a while for existing tasks to terminate
     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
           pool.shutdownNow(); // Cancel currently executing tasks
           // Wait a while for tasks to respond to being cancelled
           if (!pool.awaitTermination(60, TimeUnit.SECONDS))
                    System.err.println(""Pool did not terminate"");
     }
{code}

Any thoughts?","08/Oct/13 05:37;hustlmsp;[~fpj] 

> Is this a blocker for the release?
I don't think it is the blocker of 4.2.0 release. 

>  Is there a valid reason for the close not to complete cleanly?
from the executor state, there is still an item in the queue but no thread in pool to execute the item. so the awaitTerminate has to wait 10 seconds until timeout. but it is clear that bookkeeper uses SafeRunnable, which means it should not BookKeeper causing no thread in the pool. I am doubting this is somehow a race in executor itself.


[~rakeshr]
> Does this induce any leaks or how long the shutdown will wait?

I don't think there is any leaks, since there is no thread in the pool. And there is no referencing into the queuing item, so eventually all the items would be gc'd after bookkeeper client instance is gc'd.

","08/Oct/13 09:54;ikelly;{quote}
I don't think it is the blocker of 4.2.0 release.
{quote}
I agree. For a number of reasons
a) Noone has repros. I have rerun that test tens of thousands of times. Nothing.
b) The executor gets into a invalid state. It shouldn't be able to offer anything to the queue when shutdown. We can't check the code as it's the oracle JDK, not openjdk :/
c) It's in the close path, so even if we have a bug, it only gets a chance to be triggered in rare scenarios anyhow
","07/Mar/14 18:15;ikelly;We don't have a solid repro, so knocking back to ""Open"" until we have something to test this fix against.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shade protobuf library to avoid incompatible versions,BOOKKEEPER-708,12678476,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,hustlmsp,hustlmsp,10/Nov/13 22:02,07/Mar/14 17:56,13/Mar/19 22:16,02/Feb/14 05:34,,,4.2.3,4.3.0,bookkeeper-server,,,0,,"as offline discussion, we need to shade protobuf library for BKJM as hadoop uses protobuf 2.5.

this is planned on version 4.2.3 and 4.3.0.",,,,,,,,,,,,HDFS-4265,HADOOP-9991,BOOKKEEPER-724,,24/Jan/14 14:23;ikelly;0001-BOOKKEEPER-708-Shade-libraries-to-avoid-incompatible.patch;https://issues.apache.org/jira/secure/attachment/12625050/0001-BOOKKEEPER-708-Shade-libraries-to-avoid-incompatible.patch,15/Jan/14 13:50;ikelly;0001-BOOKKEEPER-708-Shade-protobuf-library-to-avoid-incom.patch;https://issues.apache.org/jira/secure/attachment/12623139/0001-BOOKKEEPER-708-Shade-protobuf-library-to-avoid-incom.patch,11/Nov/13 08:59;rakeshr;0001-BOOKKEEPER-708.patch;https://issues.apache.org/jira/secure/attachment/12613112/0001-BOOKKEEPER-708.patch,27/Jan/14 12:02;rakeshr;0002-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch;https://issues.apache.org/jira/secure/attachment/12625351/0002-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch,14/Nov/13 13:26;rakeshr;0002-BOOKKEEPER-708.patch;https://issues.apache.org/jira/secure/attachment/12613827/0002-BOOKKEEPER-708.patch,28/Jan/14 06:08;rakeshr;0003-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch;https://issues.apache.org/jira/secure/attachment/12625528/0003-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2013-11-11 09:09:38.936,,,no_permission,,,,,,,,,,,,,357851,,,Fri Mar 07 17:56:37 UTC 2014,,,,,,0|i1potz:,358141,,,,,,,,"11/Nov/13 09:09;rakeshr;Hi, 
While regression testing, have seen HDFS is using older version of guava(11.0.2) and this also included in shade.
Attached patch which shaded protobuf, guava. Also, I have considered only for the bookkeeper-server. 
","11/Nov/13 09:19;rakeshr;For safer side, I've shaded guava also. Since we are using higher guava version, it shoudn't break HDFS becuase of our feature inclusion.","11/Nov/13 18:05;hustlmsp;[~rakeshr] could you try not shade guava? if there is a BC issue, point them out.","12/Nov/13 02:15;rakeshr;[~hustlmsp] I haven't observed any compatibility issues across the versions. But I'm doubting, HDFS community will upgrade the version from 11.0.2 to 13.0.1 for a pluggable module. Whats your opinion?

BTW Bookkeeper requires guava 13.0.1 version as we are using new features like 'com.google.common.util.concurrent.RateLimiter' which doesn't exists in older version. ","12/Nov/13 05:02;hustlmsp; when you bump bookkeeper version in BKJM, why can't you bump HDFS's guava version ? it is a more straightforward thing, as BKJM is dependent on bookkeeper, not bookkeeper dependent on BKJM. avoiding unnecessary shade will produce a clean namespace in bookkeeper, which is easy for maintenance.",14/Nov/13 09:39;stevel@apache.org;I you can provide a patch to update HDFS and link it to HADOOP-9991 I'll give it a look. Shading hides a problem that can still surface later -and we don't have an particular reason to stick to guava 11.0.2 that I'm aware of,"14/Nov/13 13:52;rakeshr;Thanks a lot [~stevel@apache.org] for the interest. Also, nice to hear the upgradation of guava version. Guava's latest release is 15.0 version, first will try running HDFS with guava 15.0 version and will udpdate the patch in HADOOP-9991.","14/Nov/13 14:47;hadoopqa;Testing JIRA BOOKKEEPER-708


Patch [0002-BOOKKEEPER-708.patch|https://issues.apache.org/jira/secure/attachment/12613827/0002-BOOKKEEPER-708.patch] downloaded at Thu Nov 14 14:18:49 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 883
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/539/","14/Nov/13 15:06;rakeshr;Thanks [~hustlmsp] for your comments. Attached latest patch, here I just shaded only the protobufs.","15/Nov/13 14:27;ikelly;As HDFS-5518 points out, simply mandating that people use a newer guava is not without risks. I still think we should shade guava, but do so with the reduced jar option to avoid polluting the namespace as [~hustlmsp] says.","05/Dec/13 06:58;hustlmsp;+1 looks good. 

[~ikelly] let's shade guava when we really need do that. if you are ok with that, I will commit that.","16/Dec/13 06:04;vinayrpet;all other pom.xml, maven shade plugin used is of version 1.5. 
Do upgrade to 2.2 needed in all places..?","02/Jan/14 05:51;hustlmsp;I think we need to set 'createDependencyReducedPom' to true. Otherwise, it would still pull the protobuf version in, as the pom file will not be changed.

BTW, Vinay's suggestion is good. we might need to keep shade plugins use same version.","02/Jan/14 05:55;vinayrpet;One more thing is, once we shade the protobuf jar, then we can exclude the same jar in binary distribution package.","02/Jan/14 06:14;hustlmsp;it doesn't really matter whether the jar is in the distributed package or not, as it is already a binary package. but it matters in pom file as it is the source of dependencies.","15/Jan/14 13:53;ikelly;I've set createDependencyReducedPom to true in a new patch. Regarding the jar in the dist bin package, I don't think it's easy to exclude it without hacking around it, any having it there does no harm. Shading the deps is only important for the client. The dist bin package is the server.","15/Jan/14 14:29;hadoopqa;Testing JIRA BOOKKEEPER-708


Patch [0001-BOOKKEEPER-708-Shade-protobuf-library-to-avoid-incom.patch|https://issues.apache.org/jira/secure/attachment/12623139/0001-BOOKKEEPER-708-Shade-protobuf-library-to-avoid-incom.patch] downloaded at Wed Jan 15 14:00:48 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 885
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/556/","16/Jan/14 16:12;fpj;What [~ikelly] says about client vs. server seems right to me, although someone running a client will most likely be running a server as well. I don't see a reason for that being a problem, but can anyone think of a problem in the case the client and server are running different versions of netty? is there a concern of any form if that's the case? ","16/Jan/14 16:37;hustlmsp;[~fpj] I think protobuf handles format compatibility between versions. so it might be OK. but that's a valid point, we should double-check on this, to see if it works correctly when a client use protobuf 2.4 reading metadata written by higher protobuf.","16/Jan/14 17:06;rakeshr;Hi Flavio/Sijie, 
I couldn't see any version mismatch with respect to this patch/fix, we are still continuing with 2.4.1 version. Anything am missing?","17/Jan/14 16:46;ikelly;I don't see any need to upgrade. Upgrading would involve installing 2.5.0 on my machine, and it's a pain to have multiple installs of protoc. Re: protobuf wireformat BC, once we shade we shouldn't even have to worry until we upgrade protobuf version.","20/Jan/14 07:43;rakeshr;Thanks Ivan for the clarification. If everyone agrees, can we push this in?","21/Jan/14 03:22;hustlmsp;+1 from the latest patch. If I got +1 from [~fpj], will push it later.","23/Jan/14 16:15;fpj;Just so that I understand, we are introducing the ability of producing a reduced jar vs. an uber jar for bookkeeper-server. How do we actually control it? Is it by changing the pom.xml:

{noformat}
<createDependencyReducedPom>true</createDependencyReducedPom>
{noformat}

I actually tried it and it didn't seem to make much difference.","24/Jan/14 14:23;ikelly;New patch. Shades guava, protobuf and netty, as these are likely to be present in other applications. jar size is 2.5M.",24/Jan/14 14:24;ikelly;minimizeJar is the option to make the jar smaller by only pulling in whats used.,"24/Jan/14 15:54;fpj;good for me, +1.","24/Jan/14 18:29;hustlmsp;-1 for shading netty, since ClientSocketChannelFactory is used as constructor for BookKeeper. If we shade netty, we can't share same ClientSocketChannelFactory with bookkeeper client. 

as I said before, don't shade libraries that used in public method. and if you want to shade netty, please clarify what's the issue before shading.","24/Jan/14 18:35;hustlmsp;BTW, wrong indent on bookkeeper-server/pom.xml

{code}
+                <artifactSet>
+                  <includes>
+                    <include>com.google.protobuf:protobuf-java</include>
+                   <include>com.google.guava:guava</include>
+                   <include>org.jboss.netty:netty</include>
+                  </includes>
+                </artifactSet>
{code}","25/Jan/14 05:56;hadoopqa;Testing JIRA BOOKKEEPER-708


Patch [0001-BOOKKEEPER-708-Shade-libraries-to-avoid-incompatible.patch|https://issues.apache.org/jira/secure/attachment/12625050/0001-BOOKKEEPER-708-Shade-libraries-to-avoid-incompatible.patch] downloaded at Sat Jan 25 05:42:16 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/565/","27/Jan/14 12:05;rakeshr;Thanks Ivan for the minimize jar option. Attached patch addressing Sijie's comment, where I have shaded 'guava' and 'protobuf' only in the bkserver side and hedwig components are still continuing with non-shaded items.","27/Jan/14 12:39;hadoopqa;Testing JIRA BOOKKEEPER-708


Patch [0002-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch|https://issues.apache.org/jira/secure/attachment/12625351/0002-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch] downloaded at Mon Jan 27 12:11:37 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/567/",27/Jan/14 13:50;ikelly;New patch looks good to me. +1,"27/Jan/14 20:05;hustlmsp;wrong indent in the pom file. and I don't think you are putting the guava dependency for hedwig in right place, since 'hedwig-protocol' doesn't depend on guava. it should be 'hedwig-client'.",28/Jan/14 07:28;rakeshr;Updated latest patch which addresses the comments.,"28/Jan/14 11:14;hadoopqa;Testing JIRA BOOKKEEPER-708


Patch [0003-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch|https://issues.apache.org/jira/secure/attachment/12625528/0003-BOOKKEEPER-708-trunk-shade-protobuf-guava-with-minjar.patch] downloaded at Tue Jan 28 10:46:40 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/568/","31/Jan/14 17:32;fpj;lgtm, +1. [~hustlmsp]?","02/Feb/14 05:34;hustlmsp;+1 for the latest patch.

resolved as r1563566.","02/Feb/14 06:15;hudson;SUCCESS: Integrated in bookkeeper-trunk #533 (See [https://builds.apache.org/job/bookkeeper-trunk/533/])
BOOKKEEPER-708: Shade protobuf library to avoid incompatible versions (rakesh, ivank via sijie) (sijie: rev 1563566)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-client/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-protocol/pom.xml
* /zookeeper/bookkeeper/trunk/pom.xml
","06/Feb/14 13:11;rakeshr;Adding a note: 
This is not merged to 4.2.3 branch but in fix version its mentioned as 4.2.3. Since we raised a separate blocker BOOKKEEPER-730 to discuss the licensing issue, I feel we can merge this to 4.2.3 branch as well.",06/Feb/14 17:26;hustlmsp;I would like we resolve BOOKKEEPER-730 before merging this to 4.2.3. [~rakeshr],"06/Feb/14 18:48;rakeshr;ok fine, I just added a note as a reminder.",07/Mar/14 17:56;ikelly;Committed r1575343 to branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE exception in PerChannelBookieClient,BOOKKEEPER-688,12672296,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,rakeshr,rakeshr,04/Oct/13 07:09,04/Mar/14 08:21,13/Mar/19 22:16,04/Mar/14 08:21,4.2.0,,4.2.3,4.3.0,,,,0,,"NPE exception in PerChannelBookieClient:

{code}
2013-10-04 11:56:34,526 - INFO  - [NIOServerFactory-15099:NIOServerFactory$Cnxn@246] - Peer closed connection. rc=-1 java.nio.channels.SocketChannel[connected local=/10.18.170.130:15099 remote=/10.18.170.130:53945]
2013-10-04 11:56:34,526 - INFO  - [Thread-93:PerChannelBookieClient@493] - Disconnected from bookie channel [id: 0x006287d3, /10.18.170.130:53945 :> /10.18.170.130:15099]
2013-10-04 11:56:34,526 - INFO  - [New I/O client worker #90-3:PerChannelBookieClient$1@137] - Successfully connected to bookie: [id: 0x01964fe8, /10.18.170.130:53951 => /10.18.170.130:15100]
2013-10-04 11:56:34,542 - INFO  - [NIOServerFactory-15100:NIOServerFactory$Cnxn@246] - Peer closed connection. rc=-1 java.nio.channels.SocketChannel[connected local=/10.18.170.130:15100 remote=/10.18.170.130:53951]
2013-10-04 11:56:34,542 - INFO  - [Thread-93:PerChannelBookieClient@493] - Disconnected from bookie channel [id: 0x01964fe8, /10.18.170.130:53951 :> /10.18.170.130:15100]
2013-10-04 11:56:34,542 - WARN  - [New I/O client worker #90-3:PerChannelBookieClient@274] - Add entry operation failed
java.lang.NullPointerException
	at org.apache.bookkeeper.proto.PerChannelBookieClient.addEntry(PerChannelBookieClient.java:258)
	at org.apache.bookkeeper.proto.BookieClient$2.operationComplete(BookieClient.java:138)
	at org.apache.bookkeeper.proto.BookieClient$2.operationComplete(BookieClient.java:1)
	at org.apache.bookkeeper.proto.PerChannelBookieClient$1.operationComplete(PerChannelBookieClient.java:173)
	at org.jboss.netty.channel.DefaultChannelFuture.notifyListener(DefaultChannelFuture.java:381)
	at org.jboss.netty.channel.DefaultChannelFuture.notifyListeners(DefaultChannelFuture.java:372)
	at org.jboss.netty.channel.DefaultChannelFuture.setSuccess(DefaultChannelFuture.java:316)
	at org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask.run(NioWorker.java:767)
	at org.jboss.netty.channel.socket.nio.NioWorker.processRegisterTaskQueue(NioWorker.java:256)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:198)
	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:44)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
4 Oct, 2013 11:56:34 AM org.jboss.netty.channel.DefaultChannelFuture
WARNING: An exception was thrown by ChannelFutureListener.
{code}

Here the operation which is performed is
step-1 addEntry asynchronously
step-2 Immediately after adding the entry, close the bookie client",,,,,,,,,,,,,,,,04/Oct/13 17:44;ikelly;0001-BOOKKEEPER-688-NPE-exception-in-PerChannelBookieClie.patch;https://issues.apache.org/jira/secure/attachment/12606844/0001-BOOKKEEPER-688-NPE-exception-in-PerChannelBookieClie.patch,04/Mar/14 08:21;hustlmsp;BOOKKEEPER-688_branch42.patch;https://issues.apache.org/jira/secure/attachment/12632468/BOOKKEEPER-688_branch42.patch,04/Oct/13 10:40;rakeshr;BOOKKEEPER-688_branch_4_2.patch;https://issues.apache.org/jira/secure/attachment/12606771/BOOKKEEPER-688_branch_4_2.patch,04/Oct/13 10:42;rakeshr;BOOKKEEPER-688_trunk.patch;https://issues.apache.org/jira/secure/attachment/12606772/BOOKKEEPER-688_trunk.patch,04/Oct/13 10:00;rakeshr;PerChannelBookieClient-ConnectionState-diagram.png;https://issues.apache.org/jira/secure/attachment/12606769/PerChannelBookieClient-ConnectionState-diagram.png,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2013-10-04 11:19:54.582,,,no_permission,,,,,,,,,,,,,351922,,,Tue Mar 04 08:21:00 UTC 2014,,,,,,0|i1ood3:,352210,,,,,,,,"04/Oct/13 10:00;rakeshr;
IMO, will try to avoid nullifying the channel. I feel it would be more readable if we could utilize ConnectionStates. As an initial step, I just tried to draw state transition diagram and  attaching the same, please feel free to correct.

When seeing the code, I got one doubt - is there any case where channelfuture.isSuccess() and future.getChannel() is returning a null reference ?
Otw I feel 'state' is sufficient to control the channel logic.

{code}
PerChannelBookieClient.java:

                    if (future.isSuccess() && state == ConnectionState.CONNECTING) {
                        LOG.info(""Successfully connected to bookie: {}"", future.getChannel());
                        rc = BKException.Code.OK;
                        channel = future.getChannel();
                        state = ConnectionState.CONNECTED;
{code}

Also, if any operations comes to the channel after its closure, it would throw 'java.nio.channels.ClosedChannelException'. I think this is fine.",04/Oct/13 10:44;rakeshr;Attached patch which tries to use ConnectionState.,"04/Oct/13 11:19;hadoopqa;Testing JIRA BOOKKEEPER-688


Patch [BOOKKEEPER-688_trunk.patch|https://issues.apache.org/jira/secure/attachment/12606772/BOOKKEEPER-688_trunk.patch] downloaded at Fri Oct  4 10:52:01 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 880
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testDisconnectRace(org.apache.bookkeeper.proto.TestPerChannelBookieClient)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/503/","04/Oct/13 17:26;ikelly;The test fails because it's possible for state == DISCONNECTED, when the channel itself is not yet. See PerChannelBookieClient#closeInternal.

I've wrote a test for the NPE. The npe itself isn't dangerous. exceptionCaught catches it and errors the ops, which is expected behaviour. Of course, NPE is ugly. There's a simple fix though. I'll attach a patch.","04/Oct/13 17:37;hustlmsp;what is the issue here? NPE is already handled and the addEntry is error'd out (as the channel is already closed). 
And setting channel to null could avoid ending up setting state to DISCONNECTED in channelDisconnected event. 

{code}
        synchronized (this) {
            if (this.channel == c
                && state != ConnectionState.CLOSED) {
                state = ConnectionState.DISCONNECTED;
            }
        }
{code}
","04/Oct/13 17:39;hustlmsp;BTW, as it is actually not an issue, we should not mark 4.2.2 as the fix version.","04/Oct/13 17:45;ikelly;Hmm, actually there's no way to test this, without ripping up PerChannelBookieClient. It already catches the exception. I've attached a patch to reduce log noise. [~hustlmsp] I agree, not for 4.2.2 in any case.","04/Oct/13 20:07;hadoopqa;Testing JIRA BOOKKEEPER-688


Patch [0001-BOOKKEEPER-688-NPE-exception-in-PerChannelBookieClie.patch|https://issues.apache.org/jira/secure/attachment/12606844/0001-BOOKKEEPER-688-NPE-exception-in-PerChannelBookieClie.patch] downloaded at Fri Oct  4 19:39:41 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 880
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/504/","05/Oct/13 18:57;rakeshr;Adding null check is fine. Firstly I also had same fix in mind, while looking at the code I got interested in state transitions and just tried an idea:). But with my approach, channel closure breaks the atomicity as its not setting to null. I've seen the existing testcase is skipping the disconnected/closed channel since the channel is null.

By looking at the log pattern, the test case failure with my patch is due to :
1) Successfully establish channel and now the state becomes CONNECTED
2) Say disconnects, here first sets state to DISCONNECTED and closing the channel outside synchronized block. Actually it may take few moments to close the channel.
3) At the same time CheckThread enters into the synchronized block and seen DISCONNECTED state and channel.isConnected() true.This causes the failure.

{code}
2013-10-04 11:04:40,408 - INFO  - [New I/O client worker #6-3:PerChannelBookieClient$1@128] - Successfully connected to bookie: [id: 0x00a19cc5, /67.195.138.28:55764 => asf004.sp2.ygridcore.net/67.195.138.28:15003]
2013-10-04 11:04:40,409 - ERROR - [Thread-6:TestPerChannelBookieClient$6@200] - State(DISCONNECTED) and channel(true) inconsistent [id: 0x00a19cc5, /67.195.138.28:55764 => asf004.sp2.ygridcore.net/67.195.138.28:15003]
2013-10-04 11:04:40,409 - INFO  - [Thread-5:PerChannelBookieClient@456] - Disconnected from bookie channel [id: 0x00a19cc5, /67.195.138.28:55764 :> asf004.sp2.ygridcore.net/67.195.138.28:15003]
{code}","05/Oct/13 19:04;rakeshr;Attached one more patch(used null check). Includes following.
- removed unused imports
- modified channelDisconnected logic, here first sets state and then closing the channel. Whether need to raise separate JIRA for this small change?","05/Oct/13 19:40;hadoopqa;Testing JIRA BOOKKEEPER-688


Patch [0002-BOOKKEEPER-688-NPE-exception-in-PerChannelBookieClie.patch|https://issues.apache.org/jira/secure/attachment/12607011/0002-BOOKKEEPER-688-NPE-exception-in-PerChannelBookieClie.patch] downloaded at Sat Oct  5 19:12:01 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 880
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/505/",06/Oct/13 08:57;fpj;It would be nice to have the connection state diagram as part of the documentation.,"06/Oct/13 18:19;hustlmsp;[~rakeshr] 

what do you really want to fix in your new patch? please clarify. is it just the test case problem or is it a real issue in PerChannelBookieClient? If not a real issue in PerChannelBookieClient, why you want to change the implementation for a problematic test case? 

I don't see there is any issue in the steps in #channelDisconnected.

1) closeChannel first, so the following requests sent to the closedChannel will be error out.
2) errorOutStandingEntries is to error out all those already outstanding entries sent to that close channel.
3) state set to DISCONNECTED, so following requests will do reconnect.

putting 3) after 1) & 3) which will reduce the possibility of error out the entries that sent to new connected channel by mistake. if do the reverse as your patch, it increase the possibility of such mistake. ","07/Oct/13 03:24;rakeshr;bq. putting 3) after 1) & 3) which will reduce the possibility of error out the entries that sent to new connected channel by mistake. if do the reverse as your patch, it increase the possibility of such mistake. 
Yeah its true, I'll cancel the patch.","08/Oct/13 05:30;hustlmsp;[~fpj] Created BOOKKEEPER-690 for the work to add state diagram in document as you suggested.

[~ikelly] +1 for your patch.",22/Oct/13 05:36;hustlmsp;committed as r1534498. thanks [~ikelly],"22/Oct/13 06:13;hudson;SUCCESS: Integrated in bookkeeper-trunk #409 (See [https://builds.apache.org/job/bookkeeper-trunk/409/])
BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie) (sijie: rev 1534498)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
","03/Mar/14 18:35;rakeshr;IMHO, it would be good to backport the changes to branch4.2 as well. Please feel free to close if anyone has different opinion. Thanks",04/Mar/14 08:21;hustlmsp;merged to branch 4.2 as r1573930.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Bookkeeper client operations are allowed even after its closure, bk#close()",BOOKKEEPER-654,12658945,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,rakeshr,rakeshr,21/Jul/13 09:05,21/Feb/14 18:42,13/Mar/19 22:16,21/Feb/14 18:01,4.2.0,,4.3.0,,bookkeeper-client,,,0,,"User can perform below operations with the closed bookkeeper client, which was instantiated with external zkclient.
- open a closed ledger 
- create a new ledger 

Also, ledgerhandle operations like fencing/add/write are infinitely hanging.",,,,,,,,,,,,BOOKKEEPER-723,,,,23/Aug/13 16:14;ikelly;0001-BOOKKEEPER-654-Bookkeeper-client-operations-are-allo.patch;https://issues.apache.org/jira/secure/attachment/12599649/0001-BOOKKEEPER-654-Bookkeeper-client-operations-are-allo.patch,21/Jul/13 09:11;rakeshr;0001-BOOKKEEPER-654-testcase-to-understand-more.patch;https://issues.apache.org/jira/secure/attachment/12593396/0001-BOOKKEEPER-654-testcase-to-understand-more.patch,22/Jul/13 16:23;rakeshr;0002-BOOKKEEPER-654.patch;https://issues.apache.org/jira/secure/attachment/12593540/0002-BOOKKEEPER-654.patch,24/Jul/13 19:05;rakeshr;0003-BOOKKEEPER-654.patch;https://issues.apache.org/jira/secure/attachment/12594000/0003-BOOKKEEPER-654.patch,05/Aug/13 18:57;rakeshr;0004-BOOKKEEPER-654.patch;https://issues.apache.org/jira/secure/attachment/12596186/0004-BOOKKEEPER-654.patch,15/Aug/13 07:55;rakeshr;0005-BOOKKEEPER-654.patch;https://issues.apache.org/jira/secure/attachment/12598168/0005-BOOKKEEPER-654.patch,28/Aug/13 03:41;rakeshr;0006-BOOKKEEPER-654-handled-inprogress-and-newrequests.patch;https://issues.apache.org/jira/secure/attachment/12600324/0006-BOOKKEEPER-654-handled-inprogress-and-newrequests.patch,10/Feb/14 06:23;hustlmsp;BOOKKEEPER-654.diff;https://issues.apache.org/jira/secure/attachment/12627929/BOOKKEEPER-654.diff,04/Feb/14 09:08;hustlmsp;BOOKKEEPER-654.diff;https://issues.apache.org/jira/secure/attachment/12626850/BOOKKEEPER-654.diff,02/Feb/14 06:35;hustlmsp;BOOKKEEPER-654.diff;https://issues.apache.org/jira/secure/attachment/12626512/BOOKKEEPER-654.diff,24/Jan/14 09:27;hustlmsp;BOOKKEEPER-654.diff;https://issues.apache.org/jira/secure/attachment/12625018/BOOKKEEPER-654.diff,24/Jan/14 08:22;hustlmsp;BOOKKEEPER-654.diff;https://issues.apache.org/jira/secure/attachment/12625010/BOOKKEEPER-654.diff,10/Nov/13 20:48;hustlmsp;BOOKKEEPER-654.diff;https://issues.apache.org/jira/secure/attachment/12613062/BOOKKEEPER-654.diff,,13.0,,,,,,,,,,,,,,,,,,,2013-07-22 17:08:36.533,,,no_permission,,,,,,,,,,,,,339138,,,Fri Feb 21 18:42:39 UTC 2014,,,,,,0|i1mhsv:,339458,,,,,,,,21/Jul/13 09:11;rakeshr;Attached patch which contains few test cases to understand the issue...,"22/Jul/13 16:32;rakeshr;Attached patch, here I've added bkclient#isClosed checks to the exposed apis in Bookkeeper and LedgerHandle. If yes, just returns Code.BkClientClosedException. Please review the changes. Thanks.

I've just added checks to BookieClient also, considering user can access through bk.getBookieClient().","22/Jul/13 17:08;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [0002-BOOKKEEPER-654.patch|https://issues.apache.org/jira/secure/attachment/12593540/0002-BOOKKEEPER-654.patch] downloaded at Mon Jul 22 16:41:52 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 901
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/426/","22/Jul/13 18:02;hustlmsp;We should find why the operations are hanging and fix them, rather than just adding checking. As my knowledge, all the following bookie request should fail if bookie client is closed since it would mark bookie client as closed, so no connection would be established again and all existing channel also are closed and supposed to fail requests. (check following code)

{code}
    public void close() {
        closeLock.writeLock().lock();
        try {
            closed = true;
            for (PerChannelBookieClient channel: channels.values()) {
                channel.close();
            }
        } finally {
            closeLock.writeLock().unlock();
        }
    }
{code}","22/Jul/13 18:46;rakeshr;bq.We should find why the operations are hanging and fix them, rather than just adding checking

During bk#close(), it would shutdown the 'mainWorkerPool.shutdown();'. Now when user tries to open a non-closed ledger with this bkclient, it would go for recovery and mark ledgerInrecovery in zk metadata, then on zk callback its submitting operations to the mainWorkerPool. Since the mainWorkerPool has already closed, its throwing the following exception. In the otherside, bookkeeper client call is infinitely waiting for the result, due to the exception its not sending any results back.

{code}
2013-07-22 23:47:43,390 - ERROR - [main-EventThread:ClientCnxn$EventThread@623] - Caught unexpected throwable
java.util.concurrent.RejectedExecutionException
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1774)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:768)
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:656)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:78)
	at java.util.concurrent.Executors$DelegatedExecutorService.submit(Executors.java:599)
	at org.apache.bookkeeper.util.OrderedSafeExecutor.submitOrdered(OrderedSafeExecutor.java:92)
	at org.apache.bookkeeper.util.OrderedSafeExecutor$OrderedSafeGenericCallback.operationComplete(OrderedSafeExecutor.java:130)
	at org.apache.bookkeeper.meta.AbstractZkLedgerManager$3.processResult(AbstractZkLedgerManager.java:186)
	at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:545)
	at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
{code}

Here one observation is, bookkeeper client is not properly conveying the message to the user saying 'BkClient is Closed and no operation permits', secondly the user calls are allowed to change the ledger metadata through the closed bookkeeper client.
","22/Jul/13 18:52;rakeshr;bq.As my knowledge, all the following bookie request should fail if bookie client is closed since it would mark bookie client as closed, so no connection would be established again and all existing channel also are closed and supposed to fail requests. (check following code)

Since 'mainWorkerPool' is down in bk#close, the call stack is not reached to the PerChannelBookieClient...

Bookkeeper.java
{code}
    public void close() throws InterruptedException, BKException {
        ....
        ....
        mainWorkerPool.shutdown();
        if (!mainWorkerPool.awaitTermination(10, TimeUnit.SECONDS)) {
            LOG.warn(""The mainWorkerPool did not shutdown cleanly"");
        }
        bookieClient.close();
        ....
        ....
    }
{code}","23/Jul/13 05:16;hustlmsp;{code}
        @Override
        public final void operationComplete(final int rc, final T result) {
            executor.submitOrdered(orderingKey, new SafeRunnable() {
                    @Override
                    public void safeRun() {
                        safeOperationComplete(rc, result);
                    }
                });
        }
{code}

looks like you find the root cause, you should catch the exception and fix the callback directly in OrderedSafeGenericCallback.

the only concern is that we should put such checking in a central place rather then spreading it over through the code base.","24/Jul/13 19:12;rakeshr;Thanks [~hustlmsp]. Reworked and updated the latest patch based on trunk version. 
In this, I have covered the public apis in Bookkeeper & LedgerHandle.","24/Jul/13 19:38;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [0003-BOOKKEEPER-654.patch|https://issues.apache.org/jira/secure/attachment/12594000/0003-BOOKKEEPER-654.patch] downloaded at Wed Jul 24 19:11:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 902
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/434/","25/Jul/13 05:54;hustlmsp;thanks for updating. 

1. in OrderedSafeExecutor, why not just catch the rejected exception rather than adding an extra boolean flag. since this flag doesn't avoid throwing rejected exception. 

2. in LedgerOpenOp, why we need #readComplete here? an unscheduled speculative task doesn't affect any logic. 

{code}
+            try {
+                speculativeTask = scheduler.scheduleWithFixedDelay(
+                        speculativeReadRunnable, speculativeReadTimeout,
+                        speculativeReadTimeout, TimeUnit.MILLISECONDS);
+            } catch (RuntimeException e) {
+                if (lh.bk.bookieClient.isClosed()) {
+                    cb.readComplete(BKException.Code.BkClientClosedException,
+                            lh, PendingReadOp.this, PendingReadOp.this.ctx);
+                    return;
+                }
+            }
{code}","26/Jul/13 04:50;rakeshr;Thanks [~hustlmsp] for the comments. Few clarifications:
bq.1. in OrderedSafeExecutor, why not just catch the rejected exception rather than adding an extra boolean flag. since this flag doesn't avoid throwing rejected exception.

From ThreadPoolExecutor JavaDoc, it says, will be rejected when the Executor has been shut down, and also when the Executor uses finite bounds for both maximum threads and work queue capacity, and is saturated.

ThreadPoolExecutor.java
{code}
public void execute(Runnable command) {
    //....
    //....
    reject(command); // is shutdown or saturated
{code}

I've added the flag to convey to the user about the actual cause(either due to bk.close() or some other reason). Otherwise we need to iterate over the 'executor.threads[i]' and see whether its shutdown like below. Any other better way to handle this?
OrderedSafeExecutor.java
{code}
            for (int i = 0; i < executor.threads.length; i++) {
                if(executor.threads[i].isShutdown()){
                      safeOperationComplete(BKException.Code.BkClientClosedException,
                        result);
                      return;
                }
            }
{code}

bq.2. in LedgerOpenOp, why we need #readComplete here? an unscheduled speculative task doesn't affect any logic. 
If we throws exception back to the caller, (callers are: LedgerRecovery#doRecoveryRead() and LedgerHandle.asyncReadEntries()) callers need to duplicate the logic of handling the exception and return the BkClientClosedException. Whats your opinion?

Also, I need to remove 'if(bk.bookieClient.isClosed())' check added at LedgerHandle.asyncReadEntries(), its not required.

","26/Jul/13 05:08;hustlmsp;> From ThreadPoolExecutor JavaDoc, it says, will be rejected when the Executor has been shut down, and also when the Executor uses finite bounds for both maximum threads and work queue capacity, and is saturated.

but you still need to catch the exception as I commented. a shutdown flag can't avoid submitting tasks to a shutdown scheduler. that's the point.


> If we throws exception back to the caller, (callers are: LedgerRecovery#doRecoveryRead() and LedgerHandle.asyncReadEntries()) callers need to duplicate the logic of handling the exception and return the BkClientClosedException. Whats your opinion?

my point is a failure speculative task doesn't affect anything. since the original read request would fail due to bookie client is closed.

isClosed checking is also not necessary. the errors already be propagated from either worker pool callback or bookie client.  ","26/Jul/13 12:59;rakeshr;Thanks for the reply:)
bq.but you still need to catch the exception as I commented. a shutdown flag can't avoid submitting tasks to a shutdown scheduler. that's the point.
In my latest submitted patch, if the executor.isShutdown, its calling the safeOperationComplete and ""return;"" back without submitting the request to the executor. In that way we are returning back to the bookkeeper client, saying 'BkClientClosedException' and not submitting any tasks to the executor. Is that ok?
OrderedSafeExecutor.java
{code}
         public final void operationComplete(final int rc, final T result) {
+            if (executor.isShutdown) {
+                safeOperationComplete(BKException.Code.BkClientClosedException,
+                        result);
+                return;
+            }
             executor.submitOrdered(orderingKey, new SafeRunnable() {
                     @Override
{code}

{quote} 
my point is a failure speculative task doesn't affect anything. since the original read request would fail due to bookie client is closed.
{quote}
Its true and agree with you

bq.isClosed checking is also not necessary. the errors already be propagated from either worker pool callback or bookie client
I've added this check to properly conveying user about the 'BkClientClosedException' returncode.","26/Jul/13 17:36;hustlmsp;{quote}
In my latest submitted patch, if the executor.isShutdown, its calling the safeOperationComplete and ""return;"" back without submitting the request to the executor. In that way we are returning back to the bookkeeper client, saying 'BkClientClosedException' and not submitting any tasks to the executor. Is that ok
{quote}

shutdown flag no problem. but as my previous comments, a shutdown flag can't avoid submitting a task to shutdown scheduler. so you still need to catch exceptions.","27/Jul/13 06:04;rakeshr;bq.so you still need to catch exceptions.
I'm misunderstood about the exception handling in your comments. It would be good if you can give some more clarity.
Are you pointing me to have exception handling of OrderedSafeExecutor#submit OrderedSafeExecutor#submitOrdered like:
{code}
public void submit(SafeRunnable r) throws BKException{
    try{
        chooseThread().submit(r);
    catch(Exception e){
       if(isShutdown){
           throw BKClientClosedException(""Bookkeeper client is CLOSED!"");
       }
       throw e;
    }
}
public void submitOrdered(Object orderingKey, SafeRunnable r) throws BKException{
    try{
        chooseThread(orderingKey).submit(r);
    catch(Exception e){
       if(isShutdown){
           throw BKClientClosedException(""Bookkeeper client is CLOSED!"");
       }
       throw e;
    }
}
{code}","04/Aug/13 20:52;hustlmsp;no. you should not change the behavior of submit & submitOrdered since it is a generic class, which might be used in hedwig not just bookkeeper. 

my comment was in OrderedSafeGenericCallback. I said that a shutdown flag can't prevent submitOrdered after shutdown. so you need to catch exceptions of submitOrdered in #operationComplete of  OrderedSafeGenericCallback.

BTW, 'closed' is better than 'isShutdown' for a flag.

{quote}
         public final void operationComplete(final int rc, final T result) {
+            if (executor.isShutdown) {
+                safeOperationComplete(BKException.Code.BkClientClosedException,
+                        result);
+                return;
+            }
             executor.submitOrdered(orderingKey, new SafeRunnable() {
                     @Override
{quote}",05/Aug/13 19:03;rakeshr;Thanks [~hustlmsp]. Updated latest patch addresses Sijie's comment.,"05/Aug/13 19:46;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [0004-BOOKKEEPER-654.patch|https://issues.apache.org/jira/secure/attachment/12596186/0004-BOOKKEEPER-654.patch] downloaded at Mon Aug  5 19:19:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 905
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/450/","12/Aug/13 02:40;hustlmsp;as I commented before, we could catch the runtime exception when scheduling speculative read in PendingReadOp. but we don't need to callback when it is closed otherwise it would callback twice, returning different return codes.

I don't think you need to add test cases in BookieReadWriteTest. As this test case needs to run MultiLedgerManager and MultiDigest. but it doesn't need to since it just tests the behavior when client is closed. you could put them in a separated test case just to test these behaviors.","14/Aug/13 19:40;rakeshr;[~hustlmsp]
{quote}
as I commented before, we could catch the runtime exception when scheduling speculative read in PendingReadOp. but we don't need to callback when it is closed otherwise it would callback twice, returning different return codes.
{quote}
Actually I was trying to address a case where bookkeeper is closed and after this, when tries to do bk#asyncReadEntries, one should get clear Code.BkClientClosedException. How we could handle this case in PendingReadOP?, as bk.scheduler has shutdown and would throw exception.

bq.I don't think you need to add test cases in BookieReadWriteTest.
Yeah, I will move it to a separate test.","15/Aug/13 02:32;hustlmsp;{quote}
Actually I was trying to address a case where bookkeeper is closed and after this, when tries to do bk#asyncReadEntries, one should get clear Code.BkClientClosedException. How we could handle this case in PendingReadOP?, as bk.scheduler has shutdown and would throw exception.
{quote}

I don't understand as the speculative read doesn't change the read path. PendingReadOp would fail with BkClientClosedException after BookieClient is closed, no matter there is speculative read or not, isn't it? think about if user disables speculative read by setting speculativeReadTimeout to 0, the speculative read code will never be touched.

my comment was that we could catch exceptions (we don't even need to throw the exceptions as failed to schedule speculative read would not affect anything) but we don't need to callback with BKCloseException when catching exception on scheduling speculative reads. As I don't want to spread the callback over places, otherwise it is hard to debug and maintain.","15/Aug/13 07:57;rakeshr;[~hustlmsp] Thanks for your time and detailed explanation.

Attached reworked patch. Please have a look at it.","15/Aug/13 08:31;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [0005-BOOKKEEPER-654.patch|https://issues.apache.org/jira/secure/attachment/12598168/0005-BOOKKEEPER-654.patch] downloaded at Thu Aug 15 08:04:26 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 877
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/465/","20/Aug/13 16:35;ikelly;Couldn't this functionality be wrapped up in SafeRunnable? I.e.
{code}
public abstract class SafeRunnable implements Runnable {
    public void run() {
        try {
             safeRun();
        } catch (Throwable t) {
             LOG...
             error(InternalError);
        }
    }

    public abstract void safeRun();
    public abstract void error(int errorCode);
}
{code}
Then SafeOrderedExecutor could error any runnables submitted after shutdown has been called.","22/Aug/13 13:09;ikelly;Actually, don't do this. There's too much possibility for loops of callbacks, better to just have OrderedSafeExecutor#submit throw an exception if closed. Not a runtime exception though.","22/Aug/13 13:47;ikelly;Actually, the real problem here is that we don't keep track of the operations on a handle/client, and therefore cannot cancel them. Once we close a bookkeeper client or handle, all outstanding user requests should be cancelled immediately and all subsequent requests denied.",23/Aug/13 04:16;hustlmsp;+1 for the patch. thanks [~rakeshr],"23/Aug/13 09:21;ikelly;-1 on the current patch. It doesn't handle the case where a client starts an async op and closes the bookkeeper client. In this case, the async op, when completed may try to add something to the executor and get a runtime exception. The cb will never be completed.","23/Aug/13 16:14;ikelly;New patch ensures that all callbacks will be completed if the bookkeeper client is closed. Also extended this to BookKeeperAdmin and LedgerChecker which depend on a BookKeeper instance. The tests are based on the tests from the previous patch, but also test the case where async requests are made and then the client closed.

I've snuck in one small other fix in BookKeeperAdmin. Previously it was blindly close the BookKeeper instance, even if it was passed in. This is wrong, as passing it in doesn't transfer ownership.","23/Aug/13 16:48;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [0001-BOOKKEEPER-654-Bookkeeper-client-operations-are-allo.patch|https://issues.apache.org/jira/secure/attachment/12599649/0001-BOOKKEEPER-654-Bookkeeper-client-operations-are-allo.patch] downloaded at Fri Aug 23 16:21:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 886
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/472/","23/Aug/13 17:50;hustlmsp;{quote}
-1 on the current patch. It doesn't handle the case where a client starts an async op and closes the bookkeeper client. In this case, the async op, when completed may try to add something to the executor and get a runtime exception. The cb will never be completed.
{quote}

this patch that Rakesh attached is trying to resolve this, which catch the exception and callback. I don't understand you meant.

for cancellable callback that you did, I am not sure that we really need it, since it would introduce an extra referencing on callbacks. if we didn't clean the callbacks in right way or in time (backing up due to slow requests), we might have gc issue.","23/Aug/13 18:23;ikelly;Rakesh's patch only resolves the case where the OrderedSafeExecutor has been stopped before the request has been submitted. If the OrderedSafeExecutor is stopped after the request has submitted, but the request also submits to the executor, then the request callback will never get completed.

For example, if you have an add request. The request is submitted to the executor fine, but then the executor is killed. The request goes to the server. Once if comes back, PerChannelBookieClient#messageReceived will get a RejectExecution when it tries to handle it, and your request is hung. I tried to build on Rakesh's patch originally, but there's a hell of a lot of cases of this, so I considered it cleaner to have a single point to cancelling callbacks.

I'm not particularly comfortable with this change either, with 4.2.2 so close. I do mean to do some performance tests next week before the release anyhow, so I will be keeping an eye on the memory usage of this patch at that stage (if it's in).
","27/Aug/13 04:54;rakeshr;bq.Actually, the real problem here is that we don't keep track of the operations on a handle/client, and therefore cannot cancel them
I could see PerChanelBookieClient is holding the outstanding requests and I'm just thinking to re-use to do cancelling?
{code}
    ConcurrentHashMap<CompletionKey, AddCompletion> addCompletions = new ConcurrentHashMap<CompletionKey, AddCompletion>();
    ConcurrentHashMap<CompletionKey, ReadCompletion> readCompletions = new ConcurrentHashMap<CompletionKey, ReadCompletion>();
{code}


bq.Rakesh's patch only resolves the case where the OrderedSafeExecutor has been stopped before the request has been submitted. If the OrderedSafeExecutor is stopped after the request has submitted, but the request also submits to the executor, then the request callback will never get completed.
Good catch. I had missed this case.

bq.For example, if you have an add request. The request is submitted to the executor fine, but then the executor is killed. The request goes to the server. Once if comes back, PerChannelBookieClient#messageReceived will get a RejectExecution when it tries to handle it, and your request is hung. I tried to build on Rakesh's patch originally, but there's a hell of a lot of cases of this, so I considered it cleaner to have a single point to cancelling callbacks.

I understood the idea of centralizing the callbacks using the wrappers. It would be good if we could avoid the increase of callback chains(Sijie's comment - 'extra referencing on callbacks'). I'll try today with the other idea of cancel by using the PerChannelBookieClient's datastructures and wouldn't mind choosing the better one. What are your thoughts on this idea?

","27/Aug/13 17:10;ikelly;{quote}I could see PerChanelBookieClient is holding the outstanding requests and I'm just thinking to re-use to do cancelling?{quote}
These will not catch the case of a asyncClose request or a createLedger. Add completions and read completions are done for requests to an individual bookie. They are conceptually quite far from the actual client callbacks. Completion of these callbacks invoke code inside the bookkeeper client. Code that may have access to the OrderedSafeExecutor. So special handling needs to be put there to avoid this, so that it doesn't try to add to the executor to cancel the callback.

{quote}
It would be good if we could avoid the increase of callback chains
{quote}
Of course, it would be better if you can do this without the extra objects. I'm not sure it can be done cleanly though. Really we should never be passing the client callback past the client class (BookKeeper/LedgerHandle) at all. We should have a callback thread in the client, that all client callbacks run in, and the client internals should submit to this thread when the calls are finished. This is an even bigger change though, and there's no chance we're doing that before 4.2.2.","27/Aug/13 17:22;hustlmsp;I would suggest moving this ticket to 4.3.0 as it is not a trivial change as your comments.

BTW, stepping back, do we really need to all the callbacks to be cancelled when bookkeeper client closed down? is there any user cases really need this? if not, I don't see any value to provide this to make things complicated. ","27/Aug/13 19:56;fpj;I haven't looked at the patch, but I would say that we should error out outstanding requests and in fact I thought we were doing it. As for being able to execute other ledger operations, like opening another ledger or even creating a new one, I can go either way, although currently a bookkeeper object is not bound to any given ledger. I'd rather not change the API to bind a bookkeeper object to a ledger, I don't see a strong reason to do it.","28/Aug/13 03:03;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [0006-BOOKKEEPER-654.patch|https://issues.apache.org/jira/secure/attachment/12600320/0006-BOOKKEEPER-654.patch] downloaded at Wed Aug 28 03:01:17 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","28/Aug/13 03:23;rakeshr;[~ikelly]
bq.So special handling needs to be put there to avoid this, so that it doesn't try to add to the executor to cancel the callback.
Yeah, either should handle the RejectedException or provide 'public abstract void error(int errorCode)' in SafeRunnable to error out the ClientClosedException.

I've uploaded latest patch to see the feasibility of this approach. Here I tried handling RejectedExceptions and cancelling the in_progress requests in PerChannelBookieClient.
","28/Aug/13 04:19;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [0006-BOOKKEEPER-654-handled-inprogress-and-newrequests.patch|https://issues.apache.org/jira/secure/attachment/12600324/0006-BOOKKEEPER-654-handled-inprogress-and-newrequests.patch] downloaded at Wed Aug 28 03:51:38 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 5 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:red}-1 TESTS{color}
.    Tests run: 886
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAsyncBK2[0](org.apache.bookkeeper.test.BookieFailureTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/478/","28/Aug/13 10:08;ikelly;{quote}
I would suggest moving this ticket to 4.3.0 as it is not a trivial change as your comments.
{quote}
I would agree. This is a fairly hefty change even in it's simplest form. Also, it's a change to catch bad user code. By deferring to 4.3.0, we won't break any current user code, it will merely continue to misbehave as it always has. [~rakeshr] what's you're feeling on this, since you raised the issue.

{quote}
BTW, stepping back, do we really need to all the callbacks to be cancelled when bookkeeper client closed down? is there any user cases really need this? if not, I don't see any value to provide this to make things complicated.
{quote}
I think it's a good thing to notify the user when they've done something stupid. Currently the code can just hang in this situation, so to a user it is unclear whether the bug is in their code or our code.

{quote}
I haven't looked at the patch, but I would say that we should error out outstanding requests and in fact I thought we were doing it. As for being able to execute other ledger operations, like opening another ledger or even creating a new one, I can go either way, although currently a bookkeeper object is not bound to any given ledger. I'd rather not change the API to bind a bookkeeper object to a ledger, I don't see a strong reason to do it.
{quote}
We do error outstanding requests on a ledger handle in some cases, specifically when the add or read is in the completion key maps in PerChannelBookieClient. There's other cases, such as when there's an outstanding request to zk where this doesn't happen though.

When a BookKeeper object is close, it should absolutely not be able create or open ledgers. I don't understand what you mean by an API change here. I haven't seen any API change proposed.","28/Aug/13 10:28;ikelly;My main issue with this is the pattern being used. The pattern is to try to call in executor, if fail, run in current thread context. Makes me very uncomfortable. What if the current context is the ZK callback, and the callback makes a synchronous zk call? Whats more, it's not just our code which has to be clean of such patterns. It's conceivable that a client could have a callback like 
{code}
class AddCallback {
    void addComplete(int rc, ...) {
        if (rc != BKException.Code.OK) {
            zk.setData(/* update some state about WAL */);
        } else {
            ...
        }
    }
}
{code}
If the client in question has passed in a zk to the bookkeeper client, they now have a hung thread. Given that this JIRA is to try and protect users from themselves, we should be as comprehensive as we can. And since being comprehensive probably means big changes, I think it's better to do it in 4.3, and skip for 4.2.2. 

Minor comments:
- RunTimeException too broad
- ClientClosedException should be used instead of BkClientClosedException everywhere.
","28/Aug/13 12:29;rakeshr;+1 moving to next version, as its not a blocking flow and would get some more time to give best way of handling the case. 

Basically the idea is to comply api contract, say if user would have written piece of code after closing the bkclient could cause confusions. J
ust wants to avoid such wrong usage patterns and gives clear notifications.","28/Aug/13 12:50;fpj;bq. When a BookKeeper object is close, it should absolutely not be able create or open ledgers. 

Agreed 

bq. I don't understand what you mean by an API change here. I haven't seen any API change proposed.

My understanding of this proposal was that you wanted to invalidate the bookkeeper object once the ledger the object initially worked on closes. I realize now that this jira talks about BookKeeper#close and not LedgerHandler#close. If we close a ledger through LedgerHandle#close, then we are still able to perform ledger operations assuming a patch for this issue gets in, yes?","28/Aug/13 13:28;ikelly;[~fpj] LedgerHandle#close only closes the ledger itself, in metadata. It doesn't really free any resources. BookKeeper#close closes all channels and shuts down the executor. Once the executor is dead, the client shouldn't be able to do anything.","29/Aug/13 05:08;hustlmsp;{quote}
I've uploaded latest patch to see the feasibility of this approach. Here I tried handling RejectedExceptions and cancelling the in_progress requests in PerChannelBookieClient.
{quote}

for the new patch, it would be better to provide a wrapper of the concurrent map used to maintain pending requests, which fails following adds after it is closed, instead of adding channel==null checking everywhere. Also, channel==null doesn't mean client is closed. 

you could refer https://github.com/apache/bookkeeper/blob/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java as the example for the wrapper.","29/Aug/13 05:41;hustlmsp;{quote}
I think it's a good thing to notify the user when they've done something stupid. Currently the code can just hang in this situation, so to a user it is unclear whether the bug is in their code or our code.
{quote}


if we want to avoid something weird, we should also catch all exceptions thrown when submitting tasks to a closed scheduler. otherwise, any uncaught runtime exception would fail the process, except the application registered uncaught exception handler. I don't see a clean way to do that, even you have a mapping to maintain all the callback things.

so here is the thing: 

if the application uses async methods, does it matter if it doesn't receive a specific callback when it closed the bookkeeper handle? since the async way would not block anything.

if the application uses sync methods, a clean change is to change SyncCounter to use time wait, when timeout, it checked if the client is closed, if it is closed, fail the sync call, if it is not closed, then wait.

since this is not a critical part, I would prefer a simple way to handle it rather than involving too much code changes.

Besides, I would like to see how zookeeper handle this kind of situation before we moved on, as we are kind of relying on zookeeper callbacks. [~fpj] do you know how zookeeper handles the async & sync methods when zookeeper client is closed?





","29/Aug/13 07:44;rakeshr;bq.Besides, I would like to see how zookeeper handle this kind of situation before we moved on, as we are kind of relying on zookeeper callbacks. Flavio Junqueira do you know how zookeeper handles the async & sync methods when zookeeper client is closed?

In Zk, as per my knowledge, this case is handled at the ClientCnx level. When the ClientCnxn closes, after the successful closure, it would see client exceptions and iterates over all the 'outgoingQueue' and 'pendingQueue', then notifies the clients about the zookeeper client connection closure.
",02/Oct/13 04:58;hustlmsp;cancel the patch until we reached an agreement on the solution.,"15/Oct/13 14:39;rakeshr;I couldn't see another approach now, to handle the outstanding requests presents in PerChannelBookieClient when closing the client. In this case with my approach, client misses callback notification and would hangs forever. IMO, like [~ikelly] suggested, client should have a callback repository at the top layer.","10/Nov/13 20:55;hustlmsp;I think the root cause of this close sequence of bookkeeper:

the correct close sequence should be:

1) close the bookie client to error out all pending bookie requests, and after bookie client is close, all following request would be rejected.
2) close the ledger manager which erred out all pending all metadata requests, and after ledger manager is close, all metadata request would be rejected.
3) close scheduler.

attach a patch following this sequence.","10/Nov/13 21:39;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [BOOKKEEPER-654.diff|https://issues.apache.org/jira/secure/attachment/12613062/BOOKKEEPER-654.diff] downloaded at Sun Nov 10 21:10:53 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 892
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/538/","23/Jan/14 22:50;fpj;In ZK, once the session is closed, pending operations get a session expired. [~hustlmsp], in your close sequence, do pending operations get notified? I'm checking the patch in any case.  ","23/Jan/14 22:55;fpj;Latest patch from Nov 2013 is stale, btw. :-(","24/Jan/14 08:22;hustlmsp;[~fpj] rebased the change to latest trunk. And yes, the change here is to make pending operations get notified when client is closed.",24/Jan/14 09:27;hustlmsp;attach a new patch with missing license header.,"24/Jan/14 15:53;fpj;the patch looks good overal. there are two main things I can spot here:

# creating a ClientClosedException so that we can error out operations once the client is closed
# adding CleanupLedgerManager to reject new metadata operations once the client is closed

other than that, there a number of smaller changes to make it work. I was wondering if you'd mind posting the patch to the review board so that I could make specific comments more easily. so far I haven't spotted any major issue.","25/Jan/14 07:37;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [BOOKKEEPER-654.diff|https://issues.apache.org/jira/secure/attachment/12625018/BOOKKEEPER-654.diff] downloaded at Sat Jan 25 07:10:12 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 902
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/566/","25/Jan/14 08:01;hustlmsp;[~fpj] yes, the patch is as you described. created review: https://reviews.apache.org/r/17352/","31/Jan/14 01:04;fpj;Canceling the patch until we reach agreement, see comments in the review board. [~ikelly], it would be great if you could say more concretely how you'd like to see this handled so that we can make progress.",02/Feb/14 06:35;hustlmsp;attach latest patch to catching RejectedExecutionException instead of catching RuntimeException.,02/Feb/14 06:36;hustlmsp;[~fpj] add a separate ticket for your requirement,"02/Feb/14 07:23;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [BOOKKEEPER-654.diff|https://issues.apache.org/jira/secure/attachment/12626512/BOOKKEEPER-654.diff] downloaded at Sun Feb  2 06:54:50 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 902
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/571/","04/Feb/14 11:42;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [BOOKKEEPER-654.diff|https://issues.apache.org/jira/secure/attachment/12626850/BOOKKEEPER-654.diff] downloaded at Tue Feb  4 11:13:59 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 902
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/576/","04/Feb/14 17:25;ikelly;I have one comment on the latest patch (duplicate functionallity in PCBC), but otherwise this can go in. ","04/Feb/14 18:06;ikelly;comment is in reviewboard btw
",10/Feb/14 06:23;hustlmsp;attach a patch to remove closed flag as Ivan's comment.,"10/Feb/14 07:01;hadoopqa;Testing JIRA BOOKKEEPER-654


Patch [BOOKKEEPER-654.diff|https://issues.apache.org/jira/secure/attachment/12627929/BOOKKEEPER-654.diff] downloaded at Mon Feb 10 06:33:43 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 902
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/586/",21/Feb/14 18:01;ikelly;Committed r1570647. Thanks Sijie.,"21/Feb/14 18:42;hudson;FAILURE: Integrated in bookkeeper-trunk #559 (See [https://builds.apache.org/job/bookkeeper-trunk/559/])
BOOKKEEPER-654: Bookkeeper client operations are allowed even after its closure, bk#close() (sijie via ivank) (ivank: rev 1570647)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java
"
Shade introduces RAT error,BOOKKEEPER-724,12692701,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,02/Feb/14 08:51,06/Feb/14 12:13,13/Mar/19 22:16,06/Feb/14 11:34,,,4.3.0,,,,,0,,"Shading library in BOOKKEEPER-708 introduces an unlicensed pom file for bookkeeper-server module. we should address this, otherwise we could not publish the new jar per apache release procedure.",,,,,,,,,,,,,,,,06/Feb/14 08:47;hustlmsp;BOOKKEEPER-724.diff;https://issues.apache.org/jira/secure/attachment/12627318/BOOKKEEPER-724.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-04 13:38:37.289,,,no_permission,,,,,,,,,,,,,371296,,,Thu Feb 06 12:13:49 UTC 2014,,,,,,0|i1rznz:,371599,,,,,,,,"04/Feb/14 13:38;rakeshr;RAT is showing error because the autogenerated 'dependency-reduced-pom.xml' doesn't have the apache license.

{code}
 !????? /home/jenkins/jenkins-slave/workspace/bookkeeper-trunk-precommit-build/bookkeeper-server/dependency-reduced-pom.xml
{code}

I think excluding auto generated 'dependency-reduced-pom.xml' like below will resolve this issue. What others opinion?
{code}
      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
        <version>0.7</version>
        <configuration>
          <excludes>
            <!-- exclude generated file //-->
            <exclude>**/DataFormats.java</exclude>
           <exclude>**/dependency-reduced-pom.xml</exclude>
          </excludes>
        </configuration>
      </plugin>
{code}",04/Feb/14 18:18;ikelly;I think excluding should be fine.,04/Feb/14 18:51;hustlmsp;I am not sure excluding it is the good idea. since the dependency-reduced-pom.xml is the one that would be published as the pom file when we make a release. I don't think we can release a package with pom.xml that doesn't have any apache license. but I might be wrong. ,"05/Feb/14 07:47;rakeshr;AFAIK maven is not supporting the generated dependency file with apache license.

Ref: https://jira.codehaus.org/i#browse/MSHADE-48 is still open","05/Feb/14 09:33;fpj;Just so that I understand. The sources release doesn't have to contain the reduced pom because it can be generated from the main pom file. If we need to release with it, I assume that it would be for the binary artifacts. Is this right? For the binary artifacts, could we introduce it manually? Not idea and error prone, but seems doable.

We need to exclude at least to have QA passing when we submit patches.",05/Feb/14 09:53;hustlmsp;I am just wondering how other apache projects handling this ? [~fpj] [~ikelly] ,"06/Feb/14 08:39;hustlmsp;Created BOOKKEEPER-730 as blocking ticket for 4.3.0, to fix apache license header issue. Fixed the RAT error by excluding the file in this ticket to get pre-commit job back.",06/Feb/14 08:47;hustlmsp;attach a patch to exclude generated pom file.,06/Feb/14 09:05;rakeshr;+lgtm. I also feel this is the better way to handle the case now and will alows to get clean QA report.,"06/Feb/14 09:32;hadoopqa;Testing JIRA BOOKKEEPER-724


Patch [BOOKKEEPER-724.diff|https://issues.apache.org/jira/secure/attachment/12627318/BOOKKEEPER-724.diff] downloaded at Thu Feb  6 09:03:52 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/582/","06/Feb/14 11:34;fpj;+1, Committed revision 1565180.

Btw, I have asked about it on the zookeeper pmc list, but I got no answer so far. It sounds good to have a blocker for 4.3.0, we should be able to sort it out by then.","06/Feb/14 12:13;hudson;SUCCESS: Integrated in bookkeeper-trunk #542 (See [https://builds.apache.org/job/bookkeeper-trunk/542/])
BOOKKEEPER-724: Shade introduces RAT error (sijie via fpj) (fpj: rev 1565180)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Bookkeeper#Builder is not public, so can't be used outside of client package",BOOKKEEPER-728,12693145,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Feb/14 16:47,06/Feb/14 08:58,13/Mar/19 22:16,06/Feb/14 08:21,,,4.3.0,,,,,0,,Should be public,,,,,,,,,,,,,,,,04/Feb/14 16:52;ikelly;0004-BOOKKEEPER-728-Make-builder-for-bookkeeper-public.patch;https://issues.apache.org/jira/secure/attachment/12626903/0004-BOOKKEEPER-728-Make-builder-for-bookkeeper-public.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-04 18:59:08.725,,,no_permission,,,,,,,,,,,,,371731,,,Thu Feb 06 08:58:45 UTC 2014,,,,,,0|i1s2bz:,372031,,,,,,,,"04/Feb/14 18:59;hadoopqa;Testing JIRA BOOKKEEPER-728


Patch [0004-BOOKKEEPER-728-Make-builder-for-bookkeeper-public.patch|https://issues.apache.org/jira/secure/attachment/12626903/0004-BOOKKEEPER-728-Make-builder-for-bookkeeper-public.patch] downloaded at Tue Feb  4 18:31:13 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/580/",06/Feb/14 08:21;hustlmsp;+1 for the patch. committed as r1565105.,"06/Feb/14 08:58;hudson;SUCCESS: Integrated in bookkeeper-trunk #540 (See [https://builds.apache.org/job/bookkeeper-trunk/540/])
BOOKKEEPER-728: Bookkeeper#Builder is not public, so can't be used outside of client package (ivank via fpj) (sijie: rev 1565105)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Bookie shouldn't exit with 0, if exiting from deathwatcher and thread death was caused by OOM",BOOKKEEPER-729,12693146,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Feb/14 16:49,06/Feb/14 08:58,13/Mar/19 22:16,06/Feb/14 08:26,,,4.3.0,,,,,0,,"I've seen the deathwatcher reset the exit code to 0, even after it was set correct. We should make setting the exitcode a one way operation. ",,,,,,,,,,,,,,,,04/Feb/14 16:53;ikelly;0005-BOOKKEEPER-729-When-bookie-exits-with-an-error-and-c.patch;https://issues.apache.org/jira/secure/attachment/12626904/0005-BOOKKEEPER-729-When-bookie-exits-with-an-error-and-c.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-04 18:26:01.896,,,no_permission,,,,,,,,,,,,,371732,,,Thu Feb 06 08:58:44 UTC 2014,,,,,,0|i1s2c7:,372032,,,,,,,,"04/Feb/14 18:26;hadoopqa;Testing JIRA BOOKKEEPER-729


Patch [0005-BOOKKEEPER-729-When-bookie-exits-with-an-error-and-c.patch|https://issues.apache.org/jira/secure/attachment/12626904/0005-BOOKKEEPER-729-When-bookie-exits-with-an-error-and-c.patch] downloaded at Tue Feb  4 17:57:59 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/579/",06/Feb/14 08:26;hustlmsp;lgtm +1 committed as r1565109. thanks [~ikelly],"06/Feb/14 08:58;hudson;SUCCESS: Integrated in bookkeeper-trunk #540 (See [https://builds.apache.org/job/bookkeeper-trunk/540/])
BOOKKEEPER-729: Bookie shouldn't exit with 0, if exiting from deathwatcher and thread death was caused by OOM (ivank via fpj) (sijie: rev 1565109)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Names of bookie write/read threads are backwards,BOOKKEEPER-727,12693143,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,04/Feb/14 16:46,05/Feb/14 22:46,13/Mar/19 22:16,05/Feb/14 21:52,,,4.3.0,,,,,0,,Summary says it all. Thread factories are backwards.,,,,,,,,,,,,,,,,04/Feb/14 16:51;ikelly;0003-BOOKKEEPER-727-Names-of-bookie-threads-are-wrong.patch;https://issues.apache.org/jira/secure/attachment/12626902/0003-BOOKKEEPER-727-Names-of-bookie-threads-are-wrong.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-04 19:32:26.555,,,no_permission,,,,,,,,,,,,,371729,,,Wed Feb 05 22:46:27 UTC 2014,,,,,,0|i1s2bj:,372029,,,,,,,,"04/Feb/14 19:32;hadoopqa;Testing JIRA BOOKKEEPER-727


Patch [0003-BOOKKEEPER-727-Names-of-bookie-threads-are-wrong.patch|https://issues.apache.org/jira/secure/attachment/12626902/0003-BOOKKEEPER-727-Names-of-bookie-threads-are-wrong.patch] downloaded at Tue Feb  4 19:04:24 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/581/","05/Feb/14 21:52;fpj;+1, simple patch, looks good. Committed revision 1564949.","05/Feb/14 22:46;hudson;SUCCESS: Integrated in bookkeeper-trunk #539 (See [https://builds.apache.org/job/bookkeeper-trunk/539/])
BOOKKEEPER-727: Names of bookie write/read threads are backwards (ivank via fpj) (fpj: rev 1564949)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CheckpointSource.MIN#compareTo does exactly the opposite of what it should,BOOKKEEPER-720,12690001,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,21/Jan/14 11:19,22/Jan/14 07:14,13/Mar/19 22:16,22/Jan/14 06:38,,,4.3.0,,,,,0,,"CheckpointSource.MIN#compareTo returns 1 which means that ""this"" is greater than the passed argument (see java.util.Comparable javadoc). It should return -1. 

This hasn't been a problem, because MIN isn't currently used anywhere.",,,,,,,,,,,,,,,,21/Jan/14 11:21;ikelly;0001-BOOKKEEPER-720-CheckpointSource.MIN-compareTo-does-e.patch;https://issues.apache.org/jira/secure/attachment/12624107/0001-BOOKKEEPER-720-CheckpointSource.MIN-compareTo-does-e.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-21 11:58:28.906,,,no_permission,,,,,,,,,,,,,368958,,,Wed Jan 22 07:14:50 UTC 2014,,,,,,0|i1rldb:,369262,,,,,,,,21/Jan/14 11:21;ikelly;Fix is trivial.,"21/Jan/14 11:58;hadoopqa;Testing JIRA BOOKKEEPER-720


Patch [0001-BOOKKEEPER-720-CheckpointSource.MIN-compareTo-does-e.patch|https://issues.apache.org/jira/secure/attachment/12624107/0001-BOOKKEEPER-720-CheckpointSource.MIN-compareTo-does-e.patch] downloaded at Tue Jan 21 11:30:55 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 891
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/564/","22/Jan/14 06:38;hustlmsp;the patch lgtm. +1.

committed as r1560263. thanks Ivan.","22/Jan/14 07:14;hudson;SUCCESS: Integrated in bookkeeper-trunk #521 (See [https://builds.apache.org/job/bookkeeper-trunk/521/])
BOOKKEEPER-720: CheckpointSource.MIN#compareTo does exactly the opposite of what it should (ivank via sijie) (sijie: rev 1560263)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSource.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent synchronization of org.apache.bookkeeper.stats.CodahaleMetricsProvider.metrics,BOOKKEEPER-719,12689953,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,21/Jan/14 05:38,21/Jan/14 16:12,13/Mar/19 22:16,21/Jan/14 15:42,,,4.3.0,,bookkeeper-stats,,,0,," Inconsistent synchronization of org.apache.bookkeeper.stats.CodahaleMetricsProvider.metrics; locked 50% of time [""org.apache.bookkeeper.stats.CodahaleMetricsProvider""] At CodahaleMetricsProvider.java:[lines 48-125]",,,,,,,,,,,,,,,,21/Jan/14 05:52;hustlmsp;BOOKKEEPER-719.patch;https://issues.apache.org/jira/secure/attachment/12624078/BOOKKEEPER-719.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-21 07:10:30.39,,,no_permission,,,,,,,,,,,,,368919,,,Tue Jan 21 16:12:57 UTC 2014,,,,,,0|i1rl4n:,369223,,,,,,,,21/Jan/14 05:52;hustlmsp;attach a patch to fix findbugs issue.,"21/Jan/14 07:10;hadoopqa;Testing JIRA BOOKKEEPER-719


Patch [BOOKKEEPER-719.patch|https://issues.apache.org/jira/secure/attachment/12624078/BOOKKEEPER-719.patch] downloaded at Tue Jan 21 06:43:03 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 891
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/561/",21/Jan/14 15:42;ikelly;Committed r1560045. Thanks Sijie.,"21/Jan/14 16:12;hudson;SUCCESS: Integrated in bookkeeper-trunk #519 (See [https://builds.apache.org/job/bookkeeper-trunk/519/])
BOOKKEEPER-719: Inconsistent synchronization of org.apache.bookkeeper.stats.CodahaleMetricsProvider.metrics (sijie via ivank) (ivank: rev 1560045)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SlowBookieTest#testSlowBookie fails intermittently,BOOKKEEPER-709,12680857,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,23/Nov/13 03:39,03/Jan/14 17:44,13/Mar/19 22:16,03/Jan/14 17:12,,,4.3.0,,bookkeeper-server,,,0,tests,"SlowBookieTest#testSlowBookie fails intermittently when verifying the result of addEntry. 

{code}
junit.framework.AssertionFailedError: expected:<0> but was:<-559038737>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:283)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:195)
	at junit.framework.Assert.assertEquals(Assert.java:201)
	at org.apache.bookkeeper.client.SlowBookieTest.testSlowBookie(SlowBookieTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
{code}",,,,,,,,,,,,,,,,23/Nov/13 04:23;rakeshr;0001-BOOKKEEPER-709.patch;https://issues.apache.org/jira/secure/attachment/12615445/0001-BOOKKEEPER-709.patch,23/Nov/13 10:42;rakeshr;0002-BOOKKEEPER-709.patch;https://issues.apache.org/jira/secure/attachment/12615456/0002-BOOKKEEPER-709.patch,05/Dec/13 17:53;rakeshr;0003-BOOKKEEPER-709.patch;https://issues.apache.org/jira/secure/attachment/12617202/0003-BOOKKEEPER-709.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2013-11-23 04:59:49.107,,,no_permission,,,,,,,,,,,,,360122,,,Fri Jan 03 17:44:58 UTC 2014,,,,,,0|i1q2wf:,360421,,,,,,,,"23/Nov/13 04:29;rakeshr;*Cause:* Since bookie.suspendProcessing(); is inside another thread and is not guaranteed to be suspended before adding an entry by main thread. I've reproduced by putting some sleep before suspending.

 Attached patch which does bookie.suspendProcessing(); in the main thread, also have done few improvements
- added debug logs
- modified assertion parameters
- replaced thread.sleep with latch

Please review the changes. Thanks
","23/Nov/13 04:33;rakeshr;Hi All, 
Also one suggestion, can we add one more in 'JIRA Component/s:' list like 'tests', this will be helpful for filtering test issues. What others feel ?","23/Nov/13 04:59;hadoopqa;Testing JIRA BOOKKEEPER-709


Patch [0001-BOOKKEEPER-709.patch|https://issues.apache.org/jira/secure/attachment/12615445/0001-BOOKKEEPER-709.patch] downloaded at Sat Nov 23 04:31:45 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 884
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/540/","23/Nov/13 06:05;hustlmsp;[~rakeshr] I don't think it is good to add a 'tests' component, as it is too generic. why not just add label for it? and it is easy to filter jiras by label.","23/Nov/13 06:18;hustlmsp;{code}
Thread.sleep(3000); // sleep a second to allow time to complete
{code}

if you change 1000 to 3000, please change corresponding comment.

BTW, I don't think it is a good idea to change method signature to throw UnknownHostException just for a debug message. otherwise, the callers have to catch an exception just for a debug statement, which makes the code a bit messy.","23/Nov/13 11:03;rakeshr;Thank you Sijie for the review. Attached latest patch addressing comments, here I replaced bkaddress with bookieport.","23/Nov/13 11:20;hadoopqa;Testing JIRA BOOKKEEPER-709


Patch [0002-BOOKKEEPER-709.patch|https://issues.apache.org/jira/secure/attachment/12615456/0002-BOOKKEEPER-709.patch] downloaded at Sat Nov 23 10:51:45 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 884
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/541/","02/Dec/13 18:03;ikelly;this looks ready to go.
+1 from me. Will commit tomorrow if no objections.","02/Dec/13 22:32;fpj;A couple of quick questions:

# Is it still necessary to increase the sleep timeout to 3000? 
# What's the rationale for getting the id but not using it?

{noformat}
+        lh.getId();
{noformat}","03/Dec/13 04:29;rakeshr;Thank you Ivan, Flavio for the review.
bq.1.Is it still necessary to increase the sleep timeout to 3000?
I've increased the timeout, to give some more window period for the asyncAddEntry operation. I felt, 1sec is small period. I'd like to avoid hard coding, but couldn't see any parameter which can be used to relate this period.

bq.2.What's the rationale for getting the id but not using it?
Yeah correct, its not required and is unused. I will remove it.","05/Dec/13 17:57;rakeshr;Attached latest patch, here I removed the unused call 'lh.getId();'. Also, could you please see my previous comments, if agrees please push this in. Thanks","05/Dec/13 18:33;hadoopqa;Testing JIRA BOOKKEEPER-709


Patch [0003-BOOKKEEPER-709.patch|https://issues.apache.org/jira/secure/attachment/12617202/0003-BOOKKEEPER-709.patch] downloaded at Thu Dec  5 18:05:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 884
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/545/","05/Dec/13 19:07;hadoopqa;Testing JIRA BOOKKEEPER-709


Patch [0003-BOOKKEEPER-709.patch|https://issues.apache.org/jira/secure/attachment/12617202/0003-BOOKKEEPER-709.patch] downloaded at Thu Dec  5 18:38:53 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 884
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/546/","02/Jan/14 05:14;hustlmsp;[~fpj] how is your opinion on Rakesh's change on your comments? If u are ok, I am going to commit this tomorrow.","02/Jan/14 23:53;fpj;+1, thanks [~rakeshr]. Just to confirm, this patch is really just for trunk, right?",03/Jan/14 04:49;hustlmsp;[~fpj] yes. ,"03/Jan/14 06:14;rakeshr;Yeah [~fpj], the patch is for trunk.",03/Jan/14 17:12;fpj;Committed revision 1555158.,"03/Jan/14 17:44;hudson;SUCCESS: Integrated in bookkeeper-trunk #495 (See [https://builds.apache.org/job/bookkeeper-trunk/495/])
BOOKKEEPER-709: SlowBookieTest#testSlowBookie fails intermittently (Rakesh R via fpj) (fpj: rev 1555158)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookkeeper script should use 'java' from JAVA_HOME,BOOKKEEPER-712,12682823,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,05/Dec/13 03:14,05/Dec/13 07:13,13/Mar/19 22:16,05/Dec/13 06:36,4.2.1,,4.2.3,4.3.0,,,,0,,"Currently bookkeeper script is running using the default 'java' from the PATH.

But it should check JAVA_HOME and use JAVA_HOME/bin/java",,,,,,,,,,,,,,,,05/Dec/13 03:16;vinayrpet;BOOKKEEPER-712.patch;https://issues.apache.org/jira/secure/attachment/12617107/BOOKKEEPER-712.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-05 04:04:48.616,,,no_permission,,,,,,,,,,,,,362080,,,Thu Dec 05 07:13:13 UTC 2013,,,,,,0|i1qex3:,362375,,,,,,,,05/Dec/13 03:16;vinayrpet;Attaching a patch for checking the JAVA_HOME,"05/Dec/13 04:04;hadoopqa;Testing JIRA BOOKKEEPER-712


Patch [BOOKKEEPER-712.patch|https://issues.apache.org/jira/secure/attachment/12617107/BOOKKEEPER-712.patch] downloaded at Thu Dec  5 03:36:26 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 884
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/543/",05/Dec/13 06:36;hustlmsp;committed as r1548024. thanks vinay.,05/Dec/13 06:37;vinayrpet;thanks Sijie,05/Dec/13 06:43;hustlmsp;committed as r1548026 in branch 4.2.,"05/Dec/13 07:13;hudson;SUCCESS: Integrated in bookkeeper-trunk #462 (See [https://builds.apache.org/job/bookkeeper-trunk/462/])
BOOKKEEPER-712: bookkeeper script should use java from JAVA_HOME (vinay via sijie) (sijie: rev 1548024)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bookkeeper-daemon.sh will not remove the pid file on successful stop,BOOKKEEPER-711,12682336,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,03/Dec/13 09:08,05/Dec/13 07:13,13/Mar/19 22:16,05/Dec/13 06:34,4.2.2,,4.2.3,4.3.0,,,,0,,"bookkeeper-daemon.sh will not remove the pid file one successfull stop.

This may result in startup failure, if the same PID is used by some other process at that time.

",,,,,,,,,,,,,,,,03/Dec/13 09:12;vinayrpet;BOOKKEEPER-711.patch;https://issues.apache.org/jira/secure/attachment/12616722/BOOKKEEPER-711.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-03 10:27:29.627,,,no_permission,,,,,,,,,,,,,361593,,,Thu Dec 05 07:13:12 UTC 2013,,,,,,0|i1qby7:,361891,,,,,,,,03/Dec/13 09:12;vinayrpet;Attaching a simple patch,"03/Dec/13 10:27;hadoopqa;Testing JIRA BOOKKEEPER-711


Patch [BOOKKEEPER-711.patch|https://issues.apache.org/jira/secure/attachment/12616722/BOOKKEEPER-711.patch] downloaded at Tue Dec  3 09:59:18 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 884
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/542/",04/Dec/13 02:25;rakeshr;Good catch vinay. +1 for the patch.,05/Dec/13 06:34;hustlmsp;committed as r1548023. thanks vinay.,05/Dec/13 06:36;vinayrpet;thanks Sijie,05/Dec/13 06:42;hustlmsp;committed as r1548025 in branch 4.2.,"05/Dec/13 07:13;hudson;SUCCESS: Integrated in bookkeeper-trunk #462 (See [https://builds.apache.org/job/bookkeeper-trunk/462/])
BOOKKEEPER-711: bookkeeper-daemon.sh will not remove the pid file one successful stop (vinay via sijie) (sijie: rev 1548023)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper-daemon.sh
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieServer shutdown hangs indefinitely at NioServerSocketChannelFactory.releaseExternalResources,BOOKKEEPER-678,12666486,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,01/Sep/13 09:18,22/Nov/13 09:58,13/Mar/19 22:16,22/Nov/13 09:41,,,4.3.0,,bookkeeper-server,,,0,,"BookieFailureTest testcase hangs randomly in my environment(Windows 7), when I checked the threaddump, its waiting at NIO's releaseExternalResources. Please have a look at the following threaddump.

{code}
""Thread-6"" prio=6 tid=0x0000000007676800 nid=0x19ac waiting on condition [0x000000000b1ae000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000c3278068> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	at java.util.concurrent.ThreadPoolExecutor.awaitTermination(ThreadPoolExecutor.java:1261)
	at org.jboss.netty.util.internal.ExecutorUtil.terminate(ExecutorUtil.java:107)
	at org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory.releaseExternalResources(NioServerSocketChannelFactory.java:146)
	at org.apache.bookkeeper.proto.BookieNettyServer.shutdown(BookieNettyServer.java:149)
	at org.apache.bookkeeper.proto.BookieServer.shutdown(BookieServer.java:138)
	- locked <0x00000000c3277ca8> (a org.apache.bookkeeper.proto.BookieServer)
	at org.apache.bookkeeper.test.BookieFailureTest.auxTestReadWriteAsyncSingleClient(BookieFailureTest.java:177)
	at org.apache.bookkeeper.test.BookieFailureTest.testAsyncBK3(BookieFailureTest.java:114)
{code}

Also, full threaddump is attached to this JIRA.",,,,,,,,,,,,,,,,01/Sep/13 09:21;rakeshr;0001-BOOKKEEPER-678-ThreadDump-bkServer-hangs-at-release-external-resources.th;https://issues.apache.org/jira/secure/attachment/12600972/0001-BOOKKEEPER-678-ThreadDump-bkServer-hangs-at-release-external-resources.th,01/Sep/13 10:10;rakeshr;0001-BOOKKEEPER-678-upgraded-netty-version.patch;https://issues.apache.org/jira/secure/attachment/12600975/0001-BOOKKEEPER-678-upgraded-netty-version.patch,20/Nov/13 14:57;rakeshr;0002-BOOKKEEPER-678.patch;https://issues.apache.org/jira/secure/attachment/12614898/0002-BOOKKEEPER-678.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2013-09-01 10:59:39.305,,,no_permission,,,,,,,,,,,,,346425,,,Fri Nov 22 09:58:24 UTC 2013,,,,,,0|i1nqkn:,346726,,,,,,,,"01/Sep/13 10:09;rakeshr;From the netty documentation, releaseExternalResources would hang when there's an open channel which is managed by the channel factory. But I couldn't see any channel leaking from our BookieNettyServer logic and seen allChannels are properly adding it to the ChannelGroup and closing it before calling releaseExternalResources.


Considering possible bug fixes in the netty project, I had tried by upgrading netty to '3.2.9.Final' version and now bkserver is not hanging. Any thoughts?","01/Sep/13 10:59;hadoopqa;Testing JIRA BOOKKEEPER-678


Patch [0001-BOOKKEEPER-678-upgraded-netty-version.patch|https://issues.apache.org/jira/secure/attachment/12600975/0001-BOOKKEEPER-678-upgraded-netty-version.patch] downloaded at Sun Sep  1 10:32:11 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 877
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/479/","11/Sep/13 05:44;hustlmsp;is it easy to reproduce this case? it is easy to bump the version, but how could you ensure this issue doesn't exist after bumping the version. I would like to know the root cause before bumping the version.","11/Sep/13 06:17;rakeshr;When I ran BookieFailureTest.testAsyncBK3, randomly this test case is hanging. I couldn't find the cause, when I took threadump it shows the bk#shutdown is indefinitely waiting.
Anyway I'll try reading NIO documentation about the possible causes and will see our logic once.",09/Nov/13 18:13;hustlmsp;cancelled until we find the root cause.,"18/Nov/13 14:14;rakeshr;In my laptop(Windows-7, 64bit machine) BookieFailureTest.testAsyncBK3 test case is failing. From netty, releaseExternalResources would hang when there's an open channel exist. I could see bug fix https://issues.jboss.org/browse/NETTY-417 which talks about the possibilities of open channels after closure. Also, when seen netty release notes there are other potential bug fixes happened after 3.2.4 (I didn't gone through much on their internals about these fixes).",18/Nov/13 17:35;ikelly;How reliably does it repro without the fix?,"18/Nov/13 18:09;rakeshr;I've observed few times, the test is failing(hanging) randomly and threaddump shows indefinite waiting.","19/Nov/13 15:50;ikelly;Have you tried running the test in a loop on your machine? Not sure how to do this in windows, but it should be possible.","20/Nov/13 15:03;rakeshr;Thanks for the hint. I've attached test case, where I'm restarting bookie 100 times and is always hanging with netty3.2.4-Final. When I test with 3.2.9-Final, its working fine. Please have a look at the testcase.","22/Nov/13 09:41;ikelly;Committed r1544452. Thanks Rakesh.

I couldn't get it to repro, but I don't have a windows machine to hand, and that specific fix seems to be for windows.","22/Nov/13 09:58;hudson;FAILURE: Integrated in bookkeeper-trunk #447 (See [https://builds.apache.org/job/bookkeeper-trunk/447/])
BOOKKEEPER-678: BookieServer shutdown hangs indefinitely at NioServerSocketChannelFactory.releaseExternalResources (rakeshr via ivank) (ivank: rev 1544452)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GarbageCollectorThread exsiting with ArrayIndexOutOfBoundsException,BOOKKEEPER-700,12676579,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,30/Oct/13 09:17,01/Nov/13 07:06,13/Mar/19 22:16,30/Oct/13 15:28,,,4.3.0,,bookkeeper-server,,,0,,"After completing compaction, GarbageCollectorThread will do flush any outstanding offsets. When there is no offset present, its throwing following exception and exiting.

{code}
2013-10-30 11:37:20,944 - ERROR - [GarbageCollectorThread:NIOServerCnxnFactory$1@49] - Thread Thread[GarbageCollectorThread,5,main] died
java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.get(ArrayList.java:324)
	at org.apache.bookkeeper.bookie.GarbageCollectorThread$CompactionScannerFactory.waitEntrylogFlushed(GarbageCollectorThread.java:151)
	at org.apache.bookkeeper.bookie.GarbageCollectorThread$CompactionScannerFactory.flush(GarbageCollectorThread.java:175)
	at org.apache.bookkeeper.bookie.GarbageCollectorThread.doCompactEntryLogs(GarbageCollectorThread.java:400)
	at org.apache.bookkeeper.bookie.GarbageCollectorThread.run(GarbageCollectorThread.java:309)
{code}",,,,,,,,,,,,,,,,30/Oct/13 09:21;rakeshr;0001-BOOKKEEPER-700.patch;https://issues.apache.org/jira/secure/attachment/12611014/0001-BOOKKEEPER-700.patch,30/Oct/13 14:32;rakeshr;0002-BOOKKEEPER-700.patch;https://issues.apache.org/jira/secure/attachment/12611073/0002-BOOKKEEPER-700.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-30 09:50:09.565,,,no_permission,,,,,,,,,,,,,356011,,,Fri Nov 01 07:06:11 UTC 2013,,,,,,0|i1pdhz:,356299,,,,,,,,"30/Oct/13 09:49;rakeshr;Here to fix this, I just made simple size check. Could you please review the changes. Thanks.

While seeing this issue, I just noticed one case. If a thread is a critical thread(for ex: GarbageCollectorThread) and assume any unexpected exceptions occured, it may exit without any logs and makes debugging difficult.

*Proposal:*
If we have ThreadGroup exception handler to all the threads and will define setUncaughtExceptionHandler to caught all exceptions thrown by Thread run methods.
IMHO, one way to address this would be to create a common 'BookieThread' that all the threads must extend and every thread can define following properties:
# threadName, 
# isUnhandledExceptionFatal - if yes log as fatal error and call System.exit(errcode), otw just log with priority level error and continue running server.

Shall I raise a separate JIRA for this thought and work for the same. Whats your opinion?","30/Oct/13 09:50;hadoopqa;Testing JIRA BOOKKEEPER-700


Patch [0001-BOOKKEEPER-700.patch|https://issues.apache.org/jira/secure/attachment/12611014/0001-BOOKKEEPER-700.patch] downloaded at Wed Oct 30 09:22:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 882
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/521/","30/Oct/13 11:26;ikelly;Hmm, I guess this happens when nothing has been deleted. Good catch. Could you add a test for this also. I checked 4.2.0 and this doesn't exist there.","30/Oct/13 14:38;rakeshr;Thanks Ivan for the reviews. Attached latest patch with tests, please have a look at it.",30/Oct/13 14:50;ikelly;new patch looks good. running tests now.,"30/Oct/13 15:09;hadoopqa;Testing JIRA BOOKKEEPER-700


Patch [0002-BOOKKEEPER-700.patch|https://issues.apache.org/jira/secure/attachment/12611073/0002-BOOKKEEPER-700.patch] downloaded at Wed Oct 30 14:40:59 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 883
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/525/",30/Oct/13 15:28;ikelly;Committed r1537130. Good work Rakesh.,"30/Oct/13 16:00;hudson;SUCCESS: Integrated in bookkeeper-trunk #424 (See [https://builds.apache.org/job/bookkeeper-trunk/424/])
BOOKKEEPER-700: GarbageCollectorThread exsiting with ArrayIndexOutOfBoundsException (rakeshr via ivank) (ivank: rev 1537130)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
","30/Oct/13 17:47;hustlmsp;{quote}
IMHO, one way to address this would be to create a common 'BookieThread' that all the threads must extend and every thread can define following properties:
{quote}

there is already a BookieThread doing this. you don't need to create a new class. But I don't think GarbageCollectorThread is critical enough to do this, as the garbage collector thread quits doesn't affect anything.","31/Oct/13 04:30;rakeshr;yeah class exists. Does it a good idea to make all the threads by extending this BookieThread and behave like:
# if its critical log as fatal and exit
# otherwise simply log warn and continue running. Here we will get the advantage of seeing the failure cause.
I could see one disadvantage: by making this, we are restricting the extensibility of threads which are Runnable.

Will modify the BookieThread constructor as follows:
{code}
public BookieThread (String name, boolean exitOnUnhandledException)
{code}",31/Oct/13 05:57;hustlmsp;no. I don't think we need to do that as exitOnUnhandledException make things a bit dirty. Only critical threads like JournalThread needs to use BookieThread and they already there.,"31/Oct/13 15:19;ikelly;maybe a setCritical() call could be added to BookieThread to give the same effect, which could be set only by the threads which need to Journal, flush threads, etc.

GC isn't really critical though. We should log a loud error when it dies though.","01/Nov/13 07:06;rakeshr;Thanks Sijie, Ivan for the reply. I've raised an improvement JIRA BOOKKEEPER-701, to revisit all our threads and discuss more on this topic.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie client closure is not considering timeoutExecutor,BOOKKEEPER-698,12676291,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,29/Oct/13 08:37,30/Oct/13 05:29,13/Mar/19 22:16,30/Oct/13 05:00,,,4.3.0,,bookkeeper-client,,,0,,"'timeoutExecutor' is leaking for every bookie client, it should be closed during bookie client closure. I've seen in tests, scheduler is running and periodically executing the TimeoutTask even after bk client closure.

Also, timeoutExecutor is missing thread name. IMHO, no need to raise another issue, just including the small change with this JIRA.",,,,,,,,,,,,,,,,29/Oct/13 08:41;rakeshr;0001-BOOKKEEPER-698.patch;https://issues.apache.org/jira/secure/attachment/12610785/0001-BOOKKEEPER-698.patch,29/Oct/13 18:05;rakeshr;0002-BOOKKEEPER-698.patch;https://issues.apache.org/jira/secure/attachment/12610885/0002-BOOKKEEPER-698.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-29 09:19:54.637,,,no_permission,,,,,,,,,,,,,355788,,,Wed Oct 30 05:29:25 UTC 2013,,,,,,0|i1pc4f:,356076,,,,,,,,"29/Oct/13 09:19;hadoopqa;Testing JIRA BOOKKEEPER-698


Patch [0001-BOOKKEEPER-698.patch|https://issues.apache.org/jira/secure/attachment/12610785/0001-BOOKKEEPER-698.patch] downloaded at Tue Oct 29 08:51:59 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 882
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/518/","29/Oct/13 17:36;hustlmsp;hmm. sounds like I missed this when merging BOOKKEEPER-602. thanks for catching this.

two comments

- move shutdown outside writeLock.
- why you use ""+"" in log message? it seems unnecessary.
",29/Oct/13 18:07;rakeshr;Attached latest patch addressing Sijie's review comments.,"29/Oct/13 19:25;hadoopqa;Testing JIRA BOOKKEEPER-698


Patch [0002-BOOKKEEPER-698.patch|https://issues.apache.org/jira/secure/attachment/12610885/0002-BOOKKEEPER-698.patch] downloaded at Tue Oct 29 18:57:25 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 882
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/519/",30/Oct/13 05:00;hustlmsp;committed as r1536965. Thanks Rakesh catching this.,"30/Oct/13 05:29;hudson;SUCCESS: Integrated in bookkeeper-trunk #422 (See [https://builds.apache.org/job/bookkeeper-trunk/422/])
BOOKKEEPER-698: Bookie client closure is not considering timeoutExecutor (rakesh via sijie) (sijie: rev 1536965)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compaction increases latency on journal writes,BOOKKEEPER-664,12660378,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,29/Jul/13 12:35,22/Oct/13 06:13,13/Mar/19 22:16,22/Oct/13 05:44,4.2.1,,4.2.2,4.3.0,bookkeeper-server,,,0,,"Compaction writes to the journal to avoid data loss (see BOOKKEEPER-530). BOOKKEEPER-530 correctly identified that this may affect latency on the journal but we have observed this since in production. It is possible to avoid the journal completely, as twitter do in their github branch. Basically, we need to write to the entrylogger first, flush the entry log and then add to the index.",,,,,,,,,,,,,,,,21/Aug/13 15:42;ikelly;0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12599209/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ-branch-4.2.patch,14/Oct/13 14:36;ikelly;0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch;https://issues.apache.org/jira/secure/attachment/12608282/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch,14/Oct/13 13:55;ikelly;0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch;https://issues.apache.org/jira/secure/attachment/12608280/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch,21/Aug/13 15:42;ikelly;0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch;https://issues.apache.org/jira/secure/attachment/12599210/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch,22/Aug/13 09:45;ikelly;0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ_branch4.2.patch;https://issues.apache.org/jira/secure/attachment/12599404/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ_branch4.2.patch,22/Aug/13 09:45;ikelly;0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ_trunk.patch;https://issues.apache.org/jira/secure/attachment/12599405/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ_trunk.patch,06/Sep/13 18:16;ikelly;0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch;https://issues.apache.org/jira/secure/attachment/12601870/0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch,05/Sep/13 14:30;ikelly;0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch;https://issues.apache.org/jira/secure/attachment/12601613/0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch,03/Sep/13 10:38;ikelly;0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch;https://issues.apache.org/jira/secure/attachment/12601137/0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch,03/Sep/13 10:38;ikelly;0002-BOOKKEEPER-664-trunk-Compaction-increases-latency-on.patch;https://issues.apache.org/jira/secure/attachment/12601138/0002-BOOKKEEPER-664-trunk-Compaction-increases-latency-on.patch,05/Sep/13 05:08;hustlmsp;BOOKKEEPER-664.patch;https://issues.apache.org/jira/secure/attachment/12601560/BOOKKEEPER-664.patch,04/Sep/13 11:02;ikelly;bench.png;https://issues.apache.org/jira/secure/attachment/12601362/bench.png,,,12.0,,,,,,,,,,,,,,,,,,,2013-08-21 16:18:19.435,,,no_permission,,,,,,,,,,,,,340570,,,Tue Oct 22 06:13:39 UTC 2013,,,,,,0|i1mqlr:,340888,,,,,,,,"29/Jul/13 12:43;ikelly;Hmm, I can't find the changes on Twitter's branch now :/. I'll reimplement as it's a simple fix anyhow.",21/Aug/13 15:42;ikelly;Fix attached. Max batch size set at 100000 now. This will need to be revisited when BOOKKEEPER-432 goes in.,"21/Aug/13 16:18;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch|https://issues.apache.org/jira/secure/attachment/12599210/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch] downloaded at Wed Aug 21 15:51:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 877
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/468/","21/Aug/13 16:34;ikelly;this is a performance issue, so it's very difficult to add a test for it. Preexisting tests check that the change doesn't break existing functionality.",21/Aug/13 17:08;hustlmsp;considering make the parameter configurable...,"22/Aug/13 09:46;ikelly;I've made it configurable. I've intentionally left it out of bk_server.conf though, as we don't actually want people to change the default.","22/Aug/13 10:18;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ_trunk.patch|https://issues.apache.org/jira/secure/attachment/12599405/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ_trunk.patch] downloaded at Thu Aug 22 09:51:30 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 877
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/469/","23/Aug/13 16:36;ikelly;Again, -1 is for tests. Performance issues are very hard to test in CI.","01/Sep/13 17:23;rakeshr;@Ivan, the patch looks good. Just adding few points:

- 'compactionsMaxOutstandingRequests' - please remove 's' can we just say 'compactionMaxOutstandingRequests'.
Also, would be good to have long datatype for this configuration.

- CompactionScannerFactory#process() while entryLogger.addEntry(ledgerId, entry); doesn't handling the diskfull cases(its a suggestion, feel free to ignore) Considering normal addEntry flows, would act upon and do the transitions.","02/Sep/13 05:35;rakeshr;Adding few more to my previous comment
{quote}CompactionScannerFactory#process() while entryLogger.addEntry(ledgerId, entry); doesn't handling the diskfull cases(its a suggestion, feel free to ignore) Considering normal addEntry flows, would act upon and do the transitions.
{quote}
I feel, GarbageCollectorThread can catch NoWritableLedgerDirException and break from the 'logsToCompact' iteration. This would avoid unnecessary error exceptions, like:

{code}
      for (EntryLogMetadata meta : logsToCompact) {
            //.....
            try {
                compactEntryLog(scannerFactory, meta);
                toRemove.add(meta.entryLogId);
            } catch (IOException ioe) {
                //.....
            }catch (NoWritableLedgerDirException nwlde){
                //log and break
                break;
             }
{code}",03/Sep/13 10:38;ikelly;Updated patch to address comments.,"03/Sep/13 11:08;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [0002-BOOKKEEPER-664-trunk-Compaction-increases-latency-on.patch|https://issues.apache.org/jira/secure/attachment/12601138/0002-BOOKKEEPER-664-trunk-Compaction-increases-latency-on.patch] downloaded at Tue Sep  3 10:41:38 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 877
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/480/","03/Sep/13 15:23;rakeshr;bq.would be good to have long datatype for 'compactionMaxOutstandingRequests' configuration
When you get a chance to rebase, please see this comment also. Anyway its a suggestion and not a blocker.

Thanks [~ikelly], +1 latest patch looks fine.","03/Sep/13 15:42;ikelly;Cool, im going to run some benches to verify it, and if it checks out fine, ill commit","03/Sep/13 15:45;ikelly;also, compactionMaxOutstandingRequests should almost certainly not be long. 2^31 outstanding requests is much more than a reasonable max. Each request is 8bytes*3, so it would take 12GB to store 2^31 outstanding requests, not taking into account the overhead for the data structure to hold it which would probably bring it to 16GB. This is far far far too much memory to be using for compaction.","04/Sep/13 02:44;rakeshr;Good point, makes sense to me.","04/Sep/13 11:02;ikelly;Benching shows this doesn't quite work :/ I've attached the graph. The segments to pay attention to are 4:40-5:00 & 5:20-end. The rest is loading data in, so the throttle is high. I loaded 50 ledgers with enough data to roll into a new logfile. Then I ran a load on 1 ledger, at throttle 1000. After a couple of minutes I deleted enough ledgers to trigger compaction. 4:40 is without the patch, 5:20 is with.

Since we dont write to the journal, we add pressure on the ledger disk, as the offsets are updated in the index. The ledger disk is in the critical path (see BOOKKEEPER-572) so increasing the load on it increases the time it will take to respond to the client. I don't have stats for it, but I suspect that flushing the index it causing the index page being written to by the non-compaction run, to be swapped out regularly during compaction. I'm going to run again with a profiler to see more.","04/Sep/13 11:13;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [bench.png|https://issues.apache.org/jira/secure/attachment/12601362/bench.png] downloaded at Wed Sep  4 11:11:37 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","04/Sep/13 13:13;ikelly;Ah, the problem appears to be EntryLogger#flush() and EntryLogger#addEntry() being synced. [~hustlmsp], I remember you've mentioned this in the past, is there a self contained fix, or would it require all of BOOKKEEPER-432?","04/Sep/13 17:49;hustlmsp;{quote}
EntryLogger#flush() and EntryLogger#addEntry() being synced.
{quote}

the checkpoint mechanism in BOOKKEEPER-564 is trying to resolving this synchronization by avoiding flushing current entry log.

so similar idea could be applied here, we don't need to flush the entry logger after compaction. we could wait until it rolls to write new entry logger file and flushes the previous entry logger files. it is easy to do that using the EntryLogListener callback.

BTW, I don't think you use max outstanding requests in the right way. you should not flush entry log when reaching max outstanding requests. you could just add the entry back to ledger storage and let it go through the original ledger storage add flow (since we already optimize the flush/checkpoint flow). the only thing that Compaction Scanner could do is to use max_outstanding_requests as a rate limiter in compaction scanner to limit the rate of compaction adds (e.g. 10% of bandwidth used for compaction).

","05/Sep/13 05:08;hustlmsp;attach a patch per my previous comment. this patch is just a quick draft to show the idea, need to refine.","05/Sep/13 06:44;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [BOOKKEEPER-664.patch|https://issues.apache.org/jira/secure/attachment/12601560/BOOKKEEPER-664.patch] downloaded at Thu Sep  5 06:16:44 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 877
.    Tests failed: 3
.    Tests errors: 0

.    The patch failed the following testcases:

.      testMinorCompaction(org.apache.bookkeeper.bookie.CompactionTest)
.      testMajorCompaction(org.apache.bookkeeper.bookie.CompactionTest)
.      testCompactionSmallEntryLogs(org.apache.bookkeeper.bookie.CompactionTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/483/","05/Sep/13 09:26;ikelly;The attached patch falls to the same issue that caused us to go through the journal in the first place. We need to defer the add to the index, otherwise the index could be flushed before entrylog, and a crash would cause entry loss.

I remembered the solution to the sync problem after I went home. You guys added double buffering of a sort, that entrylogger was only flushed after being rotated, thereby taking it out of the critical path. That's too big of a change for 4.2.2 though. Throttling should give a similar affect though.

I think the solution is a combination of both patches. I'll have a go.","05/Sep/13 09:31;ikelly;I just realised that the flush on rotate stuff is already in trunk, so maybe throttling isnt even needed there. Working on 4.2.2 patch though.","05/Sep/13 14:30;ikelly;Merge throttling and listener into previous patch. Latency spike no longer appears during compaction, though compaction does take longer.","05/Sep/13 15:08;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch|https://issues.apache.org/jira/secure/attachment/12601613/0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch] downloaded at Thu Sep  5 15:06:20 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","05/Sep/13 19:13;hustlmsp;{quote}
The attached patch falls to the same issue that caused us to go through the journal in the first place. We need to defer the add to the index, otherwise the index could be flushed before entrylog, and a crash would cause entry loss.
{quote}

yes. the attached patch is just a quick draft to show the idea I described previous comment.

thanks for merging the throttling and listener into the patch.

several comments on your latest patch:

1) it would be better to add a test case to cover the case you described in the comment to ensure future changes would not break it.
2) rotate listener defers the flushing, which would break some test cases in compaction test if I remembered correctly. so you might need to change those test cases.
3) add compactionMaxOutstandingRequests and compactionRate to document & config file
4) use {} rather than ""+"" in log statements.
5) you might need to notify flushLock when shutting down similar as what I do in the patch. since entry logger might not rotate during shutting down.

","06/Sep/13 18:15;ikelly;{quote}
1) it would be better to add a test case to cover the case you described in the comment to ensure future changes would not break it.
{quote}
test attached.

{quote}
2) rotate listener defers the flushing, which would break some test cases in compaction test if I remembered correctly. so you might need to change those test cases.
{quote}
Moving somethingWritten into EntryLogger fixes this problem.

{quote}
3) add compactionMaxOutstandingRequests and compactionRate to document & config file
{quote}
Ive added to the config. I dont want to add to the doc yet. We havent played with the parameters ourselves yet. I'd prefer if users didnt either without asking us.

{quote}
4) use {} rather than ""+"" in log statements.
{quote}
fixed

{quote}5) you might need to notify flushLock when shutting down similar as what I do in the patch. since entry logger might not rotate during shutting down.{quote}
Fixed by checking 'running' in the wait loop","06/Sep/13 18:28;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch|https://issues.apache.org/jira/secure/attachment/12601870/0001-BOOKKEEPER-664-branch-4.2-Compaction-increases-laten.patch] downloaded at Fri Sep  6 18:26:58 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",09/Sep/13 02:50;hustlmsp;+1 for the patch for branch 4.2.,09/Sep/13 09:54;ikelly;Committed r1521021 to branch-4.2. Thanks for the code and reviews Sijie.,17/Sep/13 14:57;fpj;I think you forgot to resolve this one.,17/Sep/13 14:59;ikelly;No patch has been submitted to trunk.,17/Sep/13 16:23;fpj;ok.,14/Oct/13 13:55;ikelly;New patch applies to trunk.,"14/Oct/13 14:04;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch|https://issues.apache.org/jira/secure/attachment/12608280/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch] downloaded at Mon Oct 14 14:02:00 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",14/Oct/13 14:36;ikelly;Forgot to pull trunk before creating patch. Now based on latest trunk.,"14/Oct/13 15:10;hadoopqa;Testing JIRA BOOKKEEPER-664


Patch [0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch|https://issues.apache.org/jira/secure/attachment/12608282/0001-BOOKKEEPER-664-Compaction-increases-latency-on-journ.patch] downloaded at Mon Oct 14 14:42:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 881
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/512/",22/Oct/13 05:42;hustlmsp;+1 for the patch. committing.,22/Oct/13 05:44;hustlmsp;committed as r1534503. thanks [~ikelly],"22/Oct/13 06:13;hudson;SUCCESS: Integrated in bookkeeper-trunk #409 (See [https://builds.apache.org/job/bookkeeper-trunk/409/])
BOOKKEEPER-664: Compaction increases latency on journal writes (ivank via sijie) (sijie: rev 1534503)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make add asynchrounous in ledger recovery,BOOKKEEPER-676,12665175,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,i0exception,hustlmsp,hustlmsp,23/Aug/13 04:26,14/Oct/13 16:15,13/Mar/19 22:16,14/Oct/13 15:39,,,4.3.0,,,,,0,,"currently, recovery read needs to wait until add finished. it would take a long time for ledger recovery if there are lots of entries needs to recover. read next and add current could be sent in parallel.

this ticket is for merging change: https://github.com/twitter/bookkeeper/commit/e7ff599869a35c24ebd255a20fa6c70c32b559f5",,,,,,,,,,,,,,,,11/Sep/13 03:56;hustlmsp;BOOKKEEPER-676.patch;https://issues.apache.org/jira/secure/attachment/12602516/BOOKKEEPER-676.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-11 08:09:56.591,,,no_permission,,,,,,,,,,,,,345116,,,Mon Oct 14 16:15:06 UTC 2013,,,,,,0|i1niin:,345417,,,,,,,,11/Sep/13 03:56;hustlmsp;generated the patch to make reads asynchronous in ledger recovery procedure.,"11/Sep/13 08:09;hadoopqa;Testing JIRA BOOKKEEPER-676


Patch [BOOKKEEPER-676.patch|https://issues.apache.org/jira/secure/attachment/12602516/BOOKKEEPER-676.patch] downloaded at Wed Sep 11 07:42:37 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 879
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/492/",14/Oct/13 15:39;ikelly;Committed r1531944. Thanks Aniruddha,"14/Oct/13 16:15;hudson;SUCCESS: Integrated in bookkeeper-trunk #400 (See [https://builds.apache.org/job/bookkeeper-trunk/400/])
BOOKKEEPER-676: Make add asynchrounous in ledger recovery (aniruddha via ivank) (ivank: rev 1531944)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie startup will fail if one of the configured ledgerDir is full and the same is used for replaying the journal,BOOKKEEPER-686,12671252,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,29/Sep/13 08:06,02/Oct/13 05:50,13/Mar/19 22:16,02/Oct/13 05:02,4.2.0,,4.3.0,,bookkeeper-server,,,0,,"When bookie startup, entry logger is randomly picking one of the configured ledger directory and creates a new log to write. Now journal will be replaying the entries and add to the entry logger.

Unfortunately, if the randomly selected ledger directory is full, then it will immediately fail the bookie startup. Here Bookie is not efficiently filtering the writable ledger directories and utilizing all the available ledger directories.",,,,,,,,,,,,,,,,29/Sep/13 08:10;rakeshr;00001-BOOKKEEPER-686-trunk.patch;https://issues.apache.org/jira/secure/attachment/12605776/00001-BOOKKEEPER-686-trunk.patch,29/Sep/13 15:54;rakeshr;00002-BOOKKEEPER-686-trunk.patch;https://issues.apache.org/jira/secure/attachment/12605800/00002-BOOKKEEPER-686-trunk.patch,01/Oct/13 13:24;rakeshr;0003-BOOKKEEPER-686.patch;https://issues.apache.org/jira/secure/attachment/12606097/0003-BOOKKEEPER-686.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2013-09-29 08:48:14.082,,,no_permission,,,,,,,,,,,,,350958,,,Wed Oct 02 05:50:49 UTC 2013,,,,,,0|i1oifr:,351249,,,,,,,,"29/Sep/13 08:48;hadoopqa;Testing JIRA BOOKKEEPER-686


Patch [00001-BOOKKEEPER-686-trunk.patch|https://issues.apache.org/jira/secure/attachment/12605776/00001-BOOKKEEPER-686-trunk.patch] downloaded at Sun Sep 29 08:20:57 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 878
.    Tests failed: 0
.    Tests errors: 4

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/498/","29/Sep/13 16:28;hadoopqa;Testing JIRA BOOKKEEPER-686


Patch [00002-BOOKKEEPER-686-trunk.patch|https://issues.apache.org/jira/secure/attachment/12605800/00002-BOOKKEEPER-686-trunk.patch] downloaded at Sun Sep 29 16:00:57 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 880
.    Tests failed: 0
.    Tests errors: 4

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/499/","01/Oct/13 14:44;hadoopqa;Testing JIRA BOOKKEEPER-686


Patch [0003-BOOKKEEPER-686.patch|https://issues.apache.org/jira/secure/attachment/12606097/0003-BOOKKEEPER-686.patch] downloaded at Tue Oct  1 14:17:01 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 880
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/500/",02/Oct/13 05:02;hustlmsp;the patch lgtm. +1.  thanks Rakesh. committing.,02/Oct/13 05:02;hustlmsp;committed as r1528307.,"02/Oct/13 05:50;hudson;SUCCESS: Integrated in bookkeeper-trunk #382 (See [https://builds.apache.org/job/bookkeeper-trunk/382/])
BOOKKEEPER-686: Bookie startup will fail if one of the configured ledgerDir is full and the same is used for replaying the journal (Rakesh via sijie) (sijie: rev 1528307)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestSubAfterCloseSub fails on 4.2,BOOKKEEPER-683,12668348,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,jiannan,fpj,fpj,12/Sep/13 20:27,27/Sep/13 10:12,13/Mar/19 22:16,27/Sep/13 09:38,,,4.2.2,4.3.0,,,,0,,Test failure when checking the release candidate.,,,,,,,,,,,,,,,,16/Sep/13 03:21;jiannan;BOOKKEEPER-683.patch;https://issues.apache.org/jira/secure/attachment/12603268/BOOKKEEPER-683.patch,13/Sep/13 17:07;jiannan;BOOKKEEPER-683.patch;https://issues.apache.org/jira/secure/attachment/12603046/BOOKKEEPER-683.patch,12/Sep/13 20:28;fpj;org.apache.hedwig.client.TestSubAfterCloseSub-output.txt;https://issues.apache.org/jira/secure/attachment/12602871/org.apache.hedwig.client.TestSubAfterCloseSub-output.txt,12/Sep/13 20:28;fpj;org.apache.hedwig.client.TestSubAfterCloseSub.txt;https://issues.apache.org/jira/secure/attachment/12602872/org.apache.hedwig.client.TestSubAfterCloseSub.txt,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-09-13 17:08:34.68,,,no_permission,,,,,,,,,,,,,348282,,,Fri Sep 27 10:12:16 UTC 2013,,,,,,0|i1o1zj:,348578,,,,,,,,"13/Sep/13 17:08;jiannan;The sequence flow of test case TestSubAfterCloseSub#runSubAfterCloseSubTest(false) is as follow:
# subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);
# subscriber.asyncCloseSubscription(topic, subid, …)
# subscriber.asyncSubscribe(topic, subid, CreateOrAttach.ATTACH, …)

However, these two logs show that request (3) is handled before request (2) since it's sent in new channel:
{noformat}
2013-09-12 21:23:03,452 - INFO  - [DeliveryManagerThread:SubscribeHandler$1$1@206] - Subscribe request (1) for (topic:TestSubAfterCloseSub-false, subscriber:mysub) from channel /127.0.0.1:62996 succeed - its subscription data is State : { consumeSeqId: local:0 };Preferences : { System Preferences : [] };
2013-09-12 21:23:05,463 - INFO  - [DeliveryManagerThread:SubscribeHandler$1$1@206] - Subscribe request (2) for (topic:TestSubAfterCloseSub-false, subscriber:mysub) from channel /127.0.0.1:62997 succeed - its subscription data is State : { consumeSeqId: local:0 };Preferences : { System Preferences : [] };
{noformat}

As a result, the subscription is in closed state when message is published which cause test failure. With above description, it's reasonable that Non-MultiplexClient fail on this case.

@hustlmsp, the comment of the test case show that it's created for BOOKKEEPER-507. However, BOOKKEEPER-507 aims to fix race condition issue for multiplexed client. So my fix is just remove it, please notify me if a new case is required.","13/Sep/13 17:20;jiannan;Thinking more about the fix, maybe we need more work, or else we would better to warn user the fact that simplex client doesn't guarantee the order of asynchronized call in somewhere.","13/Sep/13 17:39;hadoopqa;Testing JIRA BOOKKEEPER-683


Patch [BOOKKEEPER-683.patch|https://issues.apache.org/jira/secure/attachment/12603046/BOOKKEEPER-683.patch] downloaded at Fri Sep 13 17:11:14 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 878
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/493/","13/Sep/13 19:11;ikelly;The ordering thing is a known issue. BOOKKEEPER-37. I think the test failure can be handled in this patch, and then we can fix BOOKKEEPER-37 later. The fix for it would be far too large for 4.2.2 in any case. Thanks for taking a look at this.","14/Sep/13 02:05;jiannan;Ok, then comment the test case instead of removing it would be better. After we fix BOOKKEEPER-37, uncomment it to add the case back. [~hustlmsp], what's your opinion?","16/Sep/13 02:41;hustlmsp;I am OK with your solution, let's not block 4.2 release right now and seek a solution for BOOKKEEPER-37 later.","16/Sep/13 03:21;jiannan;Comment the test case instead of removing it, so that we can add it back after BOOKKEEPER-37 is fixed.","16/Sep/13 03:58;hadoopqa;Testing JIRA BOOKKEEPER-683


Patch [BOOKKEEPER-683.patch|https://issues.apache.org/jira/secure/attachment/12603268/BOOKKEEPER-683.patch] downloaded at Mon Sep 16 03:30:58 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 878
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/495/","27/Sep/13 09:38;ikelly;Committed r1526841 to trunk
Committed r1526839 to branch-4.2","27/Sep/13 10:12;hudson;SUCCESS: Integrated in bookkeeper-trunk #374 (See [https://builds.apache.org/job/bookkeeper-trunk/374/])
BOOKKEEPER-683: TestSubAfterCloseSub fails on 4.2 (jiannan via ivank) (ivank: rev 1526841)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookKeeper.createLedger(..) should not mask the error with ZKException,BOOKKEEPER-446,12613860,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,vinayrpet,vinayrpet,29/Oct/12 08:32,10/Sep/13 13:43,13/Mar/19 22:16,10/Sep/13 13:15,4.2.0,,4.2.2,4.3.0,bookkeeper-server,,,0,,"in {{BookKeeper.createLedger()}} following code is masking the error with ZKException. Should throw the original exception to client.

{code}        if (counter.getLh() == null) {
            LOG.error(""ZooKeeper error: "" + counter.getrc());
            throw BKException.create(Code.ZKException);
        }{code}

",,,,,,,,,,,,,,,,09/Sep/13 19:02;rakeshr;0001-BOOKKEEPER-446-create-ledger-exceptions.patch;https://issues.apache.org/jira/secure/attachment/12602188/0001-BOOKKEEPER-446-create-ledger-exceptions.patch,10/Sep/13 01:43;hustlmsp;BOOKKEEPER-446.patch;https://issues.apache.org/jira/secure/attachment/12602257/BOOKKEEPER-446.patch,10/Sep/13 01:38;hustlmsp;BOOKKEEPER-446.patch;https://issues.apache.org/jira/secure/attachment/12602256/BOOKKEEPER-446.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-10-29 09:52:15.943,,,no_permission,,,,,,,,,,,,,252674,,,Tue Sep 10 13:43:08 UTC 2013,,,,,,0|i0d21b:,74106,,,,,,,,"29/Oct/12 09:52;umamaheswararao;Yep, we can see this.

{code}
 try {
            lh = new LedgerHandle(bk, ledgerId, metadata, digestType, passwd);
        } catch (GeneralSecurityException e) {
            LOG.error(""Security exception while creating ledger: "" + ledgerId, e);
            cb.createComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);
            return;
        } catch (NumberFormatException e) {
            LOG.error(""Incorrectly entered parameter throttle: "" + bk.getConf().getThrottleValue(), e);
            cb.createComplete(BKException.Code.IncorrectParameterException, null, this.ctx);
            return;
        }

and 

} catch (BKNotEnoughBookiesException e) {
            LOG.error(""Not enough bookies to create ledger"");
            cb.createComplete(e.getCode(), null, this.ctx);
            return;
        }

{code}

Here the actual exception was masked due to the check above mentioned. 

How about using the original rc while creating BKException.","29/Oct/12 10:19;hustlmsp;yes, we need to use the original rc. 1) which is the right exception, 2) make sync interface and async interface consistent to use same exception.",14/Nov/12 17:27;ikelly;+1,"09/Sep/13 19:11;rakeshr;Updated patch. Please have a look at it. I'm keeping ' if (counter.getrc() == BKException.Code.OK)' condition to consider any exceptional case. 

Actually wants to remove this, Shall I go ahead?

I think, this fix can go with 4.2.2. Feel free to change version if not applicable.","09/Sep/13 20:20;hadoopqa;Testing JIRA BOOKKEEPER-446


Patch [0001-BOOKKEEPER-446-create-ledger-exceptions.patch|https://issues.apache.org/jira/secure/attachment/12602188/0001-BOOKKEEPER-446-create-ledger-exceptions.patch] downloaded at Mon Sep  9 20:17:42 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",10/Sep/13 00:28;hustlmsp;+ 4.3.0 release. I don't think that we should put one change only in 4.2.2 without merging back to trunk.,"10/Sep/13 01:38;hustlmsp;I think we also need to clean up the return codes used in client package:

- in general, bookkeeper/ledger handle should not directly return *ZKException*, since we allow non-zookeeper metadata managers. so they should use the return codes returned by *Op*.

- there are still places returning zookeeper return code as bookkeeper return code. we should also clean them up.

- attached a new patch to clean up the bookkeeper client return codes. 
- add ReplicationException code for replication pipeline, rather than using ZKException
- add UnexpectedConditionException code for unexpected conditions. e.g. ledgerCreateOp return OK with a null ledger handle, rather than using ZKException.


Besides that, provide two simple test cases in LedgerCreateDeleteTest rather than in ReadWriteTest.","10/Sep/13 04:37;hadoopqa;Testing JIRA BOOKKEEPER-446


Patch [BOOKKEEPER-446.patch|https://issues.apache.org/jira/secure/attachment/12602257/BOOKKEEPER-446.patch] downloaded at Tue Sep 10 04:10:18 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 879
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/488/","10/Sep/13 13:15;ikelly;Committed as r1521471 to branch-4.2
Committed r1521474 to trunk.

Thanks guys.","10/Sep/13 13:43;hudson;SUCCESS: Integrated in bookkeeper-trunk #356 (See [https://builds.apache.org/job/bookkeeper-trunk/356/])
BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank) (ivank: rev 1521474)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in ledger deletion and eviction from cache,BOOKKEEPER-669,12662526,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,mmerli,mmerli,08/Aug/13 00:59,09/Sep/13 16:01,13/Mar/19 22:16,09/Sep/13 16:01,,,4.2.2,,bookkeeper-server,,,0,,"There is a race condition between when a ledger is delete and an eviction from
LedgerCache occur.

The resulting exception is:

{code}
14:06:24.754 [SyncThread] ERROR org.apache.bookkeeper.bookie.Bookie  -
Exception in SyncThread
java.lang.NullPointerException: null
        at
org.apache.bookkeeper.bookie.LedgerCacheImpl.evictFileInfoIfNecessary(LedgerCacheImpl.java:809)
~[bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at
org.apache.bookkeeper.bookie.LedgerCacheImpl.getFileInfo(LedgerCacheImpl.java:267)
~[bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at
org.apache.bookkeeper.bookie.LedgerCacheImpl.flushLedger(LedgerCacheImpl.java:425)
~[bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at
org.apache.bookkeeper.bookie.LedgerCacheImpl.flushLedger(LedgerCacheImpl.java:382)
~[bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at
org.apache.bookkeeper.bookie.InterleavedLedgerStorage.flush(InterleavedLedgerStorage.java:167)
~[bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
        at org.apache.bookkeeper.bookie.Bookie$SyncThread.run(Bookie.java:330)
~[bookkeeper-server-4.2.1.15.jar:4.2.2-SNAPSHOT]
14:06:24.755 [SyncThread] INFO  org.apache.bookkeeper.bookie.Bookie  -
Triggering shutdown of Bookie-3181 with exitCode 5
14:06:24.768 [BookieShutdownTrigger] INFO  org.apache.bookkeeper.bookie.Bookie 
- Shutting down Bookie-3181 with exitCode 5
14:06:24.769 [BookieJournal-3181] WARN  org.apache.bookkeeper.bookie.Journal -
Journal exits when shutting down
{code}

The problem is that the openLedger list is a normal LinkedList and sometimes is
modified while synchronizing on fileInfoCache, other times on openLedgers, and
in other places it is accessed without synchronizing.",,,,,,,,,,,,,,,,09/Sep/13 14:46;rakeshr;0001-BOOKKEEPER-669-race-between-evict-and-delete-ledger.patch;https://issues.apache.org/jira/secure/attachment/12602150/0001-BOOKKEEPER-669-race-between-evict-and-delete-ledger.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-08 02:01:41.778,,,no_permission,,,,,,,,,,,,,342529,,,Mon Sep 09 16:01:33 UTC 2013,,,,,,0|i1n2lz:,342834,,,,,,,,"08/Aug/13 02:01;hustlmsp;this would be addressed on part of BOOKKEEPER-659, which we are using concurrent structures. if this jira is marked to resolve in 4.2.2, you might need to generate a simple fix for it. ","09/Sep/13 14:51;rakeshr;Hi All, I also met this case. IMHO throwing NPE is not fair and would be good to do a simple fix in 4.2.2 version. Please see the attached patch. Thanks

I agree with [~hustlmsp], will do a clean fix as part of BOOKKEEPER-659. What others opinion?","09/Sep/13 15:06;ikelly;+1 for the patch, committing","09/Sep/13 15:29;hadoopqa;Testing JIRA BOOKKEEPER-669


Patch [0001-BOOKKEEPER-669-race-between-evict-and-delete-ledger.patch|https://issues.apache.org/jira/secure/attachment/12602150/0001-BOOKKEEPER-669-race-between-evict-and-delete-ledger.patch] downloaded at Mon Sep  9 15:01:20 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 878
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/486/",09/Sep/13 16:01;ikelly;Committed to branch-4.2 as r1521170. Thanks Rakesh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
improve close logic,BOOKKEEPER-580,12634361,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,27/Feb/13 05:59,23/Aug/13 17:26,13/Mar/19 22:16,23/Aug/13 17:20,,,4.2.2,4.3.0,bookkeeper-client,,,0,,"currently, bookkeeper client still write ledger metadata to metadata storage even the metadata is already closed or undergoing closing. which would cause lots of bad version metadata update encountering unrecoverable errors in ledger handle. e.g. NotEnoughtBookiesException.",,,,,,,,,,,,,,,,22/Aug/13 10:34;ikelly;0001-BOOKKEEPER-580-improve-close-logic.patch;https://issues.apache.org/jira/secure/attachment/12599409/0001-BOOKKEEPER-580-improve-close-logic.patch,03/Jul/13 14:14;ikelly;0001-BOOKKEEPER-580-improve-close-logic.patch;https://issues.apache.org/jira/secure/attachment/12590634/0001-BOOKKEEPER-580-improve-close-logic.patch,05/Mar/13 21:17;hustlmsp;BOOKKEEPER-580.diff;https://issues.apache.org/jira/secure/attachment/12572167/BOOKKEEPER-580.diff,27/Feb/13 08:05;hustlmsp;BOOKKEEPER-580.diff;https://issues.apache.org/jira/secure/attachment/12571159/BOOKKEEPER-580.diff,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-02-27 08:40:57.811,,,no_permission,,,,,,,,,,,,,314854,,,Fri Aug 23 17:26:36 UTC 2013,,,,,,0|i1ibyv:,315198,,,,,,,,27/Feb/13 08:05;hustlmsp;attach a patch for it,"27/Feb/13 08:40;hadoopqa;Testing JIRA BOOKKEEPER-580


Patch [BOOKKEEPER-580.diff|https://issues.apache.org/jira/secure/attachment/12571159/BOOKKEEPER-580.diff] downloaded at Wed Feb 27 08:10:46 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/282/","05/Mar/13 17:57;rakeshr;bq.bookkeeper client still write ledger metadata to metadata storage even the metadata is already closed or undergoing closing. which would cause lots of bad version metadata update encountering unrecoverable errors in ledger handle. e.g. NotEnoughtBookiesException

[~hustlmsp] If you could attach the log details, it would be helpful. I'm interested to know how NotEnoughtBookiesException occuring due to close/closing. Our existing #close() call is idempotent in nature, isn't it.
Am I missing anything?","05/Mar/13 18:19;hustlmsp;[~rakeshr] I said bad version updates after encountering NotEnoughBookies, not NotEnoughBookies during closing.

please read the logic: Lost of PendingAdds failed at same time => Lots of LedgerHandle#handleUnrecoverableErrors (in parallel) => Lots of LedgerHandle#closeInternal (in parallel) => Lots of metadata updates (in parallel) => metadata version conflictions.","05/Mar/13 19:51;rakeshr;Yeah [~hustlmsp]. got it.

Thanks for the patch, just few thoughts:

- Could you please remove following java comments from #asyncCloseInternal() api, as now introducing meta.isClosed() check.
{code}
// Close operation is idempotent, so no need to check if we are
// already closed
{code}

- There is an unncessary import in LedgerHandle.java. Anyway we are touching the file, it would be good to remove the unnecessary import also:)
      import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;

- In the patch, I've seen #isClosed() checks in two places: first before submitting, also another one inside the SafeRunnable thread. I agree, there is no functional issue. Do we need double check?, I feel we can have only one which is inside the SafeRunnable.
{code}
+        synchronized(this) {
+            if (metadata.isClosed()) {
+                cb.closeComplete(BKException.Code.LedgerClosedException, this, ctx);
+                return;
+            }
+        }
{code}","05/Mar/13 21:08;hustlmsp;[~rakeshr] 

> There is an unncessary import in LedgerHandle.java.

I could not be noticed since I used vim rather than an IDE. I think we should integrate checkstyle rather than ask someone to remove unnecessary imports by comments.

> Do we need double check?, I feel we can have only one which is inside the SafeRunnable. 

I don't want to let lots of runnables propagated during failures, it might cause memory issue during a high throughput case. ","05/Mar/13 21:17;hustlmsp;remove mismatch comments in #asyncCloseInternal, remove unnecessary imports. ","05/Mar/13 21:59;hadoopqa;Testing JIRA BOOKKEEPER-580


Patch [BOOKKEEPER-580.diff|https://issues.apache.org/jira/secure/attachment/12572167/BOOKKEEPER-580.diff] downloaded at Tue Mar  5 21:29:29 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/284/","05/Mar/13 23:06;fpj;bq. I think we should integrate checkstyle 

+1, sounds like a good idea to use checkstyle.","06/Mar/13 04:33;rakeshr;Its nice to bring checkstyle.

bq.I don't want to let lots of runnables propagated during failures, it might cause memory issue during a high throughput case.
Fine, make sense to me.

Thanks [~hustlmsp] for the fix. +1 for the latest patch.","11/Mar/13 09:20;fpj;Hi Sijie, I agree with the goal of not executing close operations unnecessarily, but I wonder why not return OK rather than LedgerClosedException. 

I'm not sure why you have removed the call to close in BookieRecoveryTest.

About changing the exception caught in the following: 

{noformat}
-        } catch (BKException.BKMetadataVersionException e) {
+        } catch (BKException.BKLedgerClosedException e) {
{noformat} 

We can still get metadata version exceptions in the case of concurrent attempts to close a ledger with different clients (distinct ledger handlers). In fact, I thought this was the case with TestFencing, so I'm wondering why it is correct to replace the exception like that.

One other suggestion is to add comments describing why we need to check if the ledger is closed in those two places. These checks are there mostly for performance reasons, and for correctness I believe we don't need them, so it would be good to have some reminders there for us.

","12/Mar/13 05:22;hustlmsp;> but I wonder why not return OK rather than LedgerClosedException. 

I just want to make the return code clearly to tell what happened.

> I'm not sure why you have removed the call to close in BookieRecoveryTest.

since the ledger handle is already closed. we don't need to close it again.

> In fact, I thought this was the case with TestFencing, so I'm wondering why it is correct to replace the exception like that.

since closeLedgers is closed before recovering, so the ledger handles are already closed. closing them again is supposed to return LedgerClosedException. we don't get metadata version exception anymore. It is based on the new behavior to change that exception.

> One other suggestion is to add comments describing why we need to check if the ledger is closed in those two places.

I could do it if the above comments make sense for you.","02/Apr/13 14:41;ikelly;Why are we throwing an exception if a ledger is closed already? Closing a ledger should be an idempotent operation, so closing an already closed ledger shouldn't violate any of the assumptions the client has about the ledger handle.","03/Jul/13 14:14;ikelly;Rebased to trunk (just had to fiddle with some import changes). [~hustlmsp] [~fpj] Could we agree on what we do for a double invocation of close()? My opinion is that if we try to close an already closed handle, it should proceed with ok, as it doesn't change any assumptions on the state of the ledger.

I'd like to get this into 4.2.2 ","03/Jul/13 17:06;hustlmsp;I would make a change to not let sync version not throw exception on LedgerClosedException, but still expose the LedgerClosedException to callback version, so the user who want to identify the reason, it knows what happened. Is it OK for you guys?","04/Jul/13 15:29;ikelly;We should only inform the user of the exception if the user can take useful action as a result, (i.e. do something different with regard to that ledger).

The user should only do something different it's view of the ledger is different after the close call, to what it was before the close call, specifically that the LAC is different. I _think_ that fencing prevents this, but I need to think about it some more. If I can find a case that this is not true, then definitely we should have an exception (or maybe a read to check the last add confirmed of the closed metadata matches what the local handle has).

I think the async and sync behaviour should be consistent though. Feels wrong to have the same api return a different result depending on how you call it.","04/Jul/13 16:07;ikelly;I had another look at the patch. The check is only protecting against 2 local calls of close(), fencing doesn't even come into it. The fencing case is handled in LedgerMetadata#resolveConflict(). The only justification for changing this for 2+ local calls would be to flag an error to the user. I don't think this is strong enough of a justification for a compatibility break though.","21/Aug/13 15:43;ikelly;[~hustlmsp], could we get a conclusion on this? This is the last JIRA without a clear solution for 4.2.2","21/Aug/13 17:15;hustlmsp;[~ikelly] it would be better to have a place to tell the client what happened to a ledger handle. the only thing I could image is through the rc code in call back. for sync version, we keep it not throw exception when a ledger is already closed. 

but I don't feel strong about this part. if you think we don't need to tell the client about ledger already closed, I am OK with that.","22/Aug/13 10:41;ikelly;I've changed the patch to complete with OK if the metadata is already closed. Its better to be backwards compatible in this case, and consistent between the async and sync versions. I did have to update one test, TestFencing, to not expect an exception any more, when another client has closed the ledger. This is fine though, as the LAC will be the same in the opening client and the closing client. No assumption has changed for the user. They will be notified of the fencing by the failure of the #addEntry call. If there is an incompatibility in the metadata (client has a lower LAC to what was closed with), LedgerMetadata#isConflictWith will catch it on the reread.","22/Aug/13 11:08;hadoopqa;Testing JIRA BOOKKEEPER-580


Patch [0001-BOOKKEEPER-580-improve-close-logic.patch|https://issues.apache.org/jira/secure/attachment/12599409/0001-BOOKKEEPER-580-improve-close-logic.patch] downloaded at Thu Aug 22 10:41:17 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 885
.    Tests failed: 7
.    Tests errors: 9

.    The patch failed the following testcases:

.      testSyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubSubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testSyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testAsyncHubUnsubscribeWithInvalidSubscriberId[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)
.      testPublishWithBookKeeperError[1](org.apache.hedwig.server.integration.TestHedwigHubRegular)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/470/","22/Aug/13 12:10;ikelly;Rekicking build, as the failures seem to be something unrelated. Hedwig losing connection to ZK. Could be an tcp port conflict.","22/Aug/13 12:37;hadoopqa;Testing JIRA BOOKKEEPER-580


Patch [0001-BOOKKEEPER-580-improve-close-logic.patch|https://issues.apache.org/jira/secure/attachment/12599409/0001-BOOKKEEPER-580-improve-close-logic.patch] downloaded at Thu Aug 22 12:10:06 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 877
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/471/",23/Aug/13 04:17;hustlmsp;+1 for the patch. thanks [~ikelly],23/Aug/13 16:49;ikelly;Committed r1516929 to trunk.,23/Aug/13 17:20;ikelly;Committed revision 1516938 to branch-4.2,"23/Aug/13 17:26;hudson;SUCCESS: Integrated in bookkeeper-trunk #337 (See [https://builds.apache.org/job/bookkeeper-trunk/337/])
BOOKKEEPER-580: improve close logic (sijie & ivank via ivank) (ivank: rev 1516929)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoRecovery should consider read only bookies,BOOKKEEPER-632,12653903,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,20/Jun/13 10:02,21/Aug/13 17:07,13/Mar/19 22:16,21/Aug/13 13:55,4.2.1,4.3.0,4.2.2,4.3.0,bookkeeper-auto-recovery,bookkeeper-server,,0,,"Autorecovery Auditor should consider the readonly bookies as Available Bookies  while publishing the under-replicated ledgers.

Also AutoRecoveryDaemon should shutdown if the local bookie is readonly",,,,,,,,,,,,,,,,21/Aug/13 13:55;ikelly;0001-BOOKKEEPER-632-42.patch;https://issues.apache.org/jira/secure/attachment/12599193/0001-BOOKKEEPER-632-42.patch,20/Aug/13 16:44;ikelly;0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch;https://issues.apache.org/jira/secure/attachment/12598978/0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch,13/Aug/13 14:55;ikelly;0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch;https://issues.apache.org/jira/secure/attachment/12597733/0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch,13/Aug/13 14:54;ikelly;0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch;https://issues.apache.org/jira/secure/attachment/12597732/0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch,13/Aug/13 05:14;vinayrpet;BOOKKEEPER-632-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12597656/BOOKKEEPER-632-branch-4.2.patch,07/Aug/13 06:35;vinayrpet;BOOKKEEPER-632-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12596521/BOOKKEEPER-632-branch-4.2.patch,13/Aug/13 15:17;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12597736/BOOKKEEPER-632.patch,13/Aug/13 05:03;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12597655/BOOKKEEPER-632.patch,25/Jul/13 06:58;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12594120/BOOKKEEPER-632.patch,25/Jul/13 06:24;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12594112/BOOKKEEPER-632.patch,24/Jul/13 15:49;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12593968/BOOKKEEPER-632.patch,24/Jul/13 13:54;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12593939/BOOKKEEPER-632.patch,25/Jun/13 11:04;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12589587/BOOKKEEPER-632.patch,25/Jun/13 10:11;vinayrpet;BOOKKEEPER-632.patch;https://issues.apache.org/jira/secure/attachment/12589577/BOOKKEEPER-632.patch,14.0,,,,,,,,,,,,,,,,,,,2013-06-25 10:37:58.567,,,no_permission,,,,,,,,,,,,,334180,,,Wed Aug 21 17:07:14 UTC 2013,,,,,,0|i1lnb3:,334506,,,,,,,,"25/Jun/13 10:06;vinayrpet;Attached the patch for the same.
Please review.","25/Jun/13 10:37;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632.patch|https://issues.apache.org/jira/secure/attachment/12589577/BOOKKEEPER-632.patch] downloaded at Tue Jun 25 10:11:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 120 characters
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 856
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/382/","25/Jun/13 13:37;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632.patch|https://issues.apache.org/jira/secure/attachment/12589587/BOOKKEEPER-632.patch] downloaded at Tue Jun 25 13:11:16 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 856
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/384/","25/Jun/13 13:44;vinayrpet; bq. -1 the patch contains 1 line(s) with trailing spaces

Patch is having one line with trailing spaces, which is added to remove from the code.
","02/Jul/13 17:21;ikelly;The whitespace is actually in the comment for BookKeeperAdmin#getReadOnlyBookie. I've actually added a tool to find this, BOOKKEEPER-635. It should make this easier to find in future.

The patch adds a new public api to read the readonly bookies, then manually reads them in Auditor#getAvailableBookies(). It would be much better if this method read the bookies through BookKeeperAdmin's apis, so that if we change the format in future, we have less places to update.",03/Jul/13 14:55;ikelly;Cancelling until issue addressed.,"24/Jul/13 13:54;vinayrpet;Attaching the patch for trail space removal.
","24/Jul/13 13:59;ikelly;This doesn't address the other issue though. Auditor should use the public api to read the readonly bookies, rather than reading from zk directly.","24/Jul/13 14:39;vinayrpet;{quote}he patch adds a new public api to read the readonly bookies, then manually reads them in Auditor#getAvailableBookies(). It would be much better if this method read the bookies through BookKeeperAdmin's apis, so that if we change the format in future, we have less places to update.{quote}

I agree with your point Ivan, But the ways bookie addresses handled in Auditor and ReplicationWorker are different. In Auditor, bookie address is treated as just string, where as in RW its InetSocketAddress. BookKeeperAdmin#getReadOnlyBookie() will return collection of InetSocketAdress. So changes for this will be more and IMO that is out of scope of this Jira. 

Any thoughts..?","24/Jul/13 14:50;ikelly;InetSocketAddress can easily be converted to String with o.a.bookkeeper.util.StringUtils#addrToString. Reading directly from ZK is bad, because it's putting duplicate code in a number of places, which need to be updated if there's a change to the /ledgers/available format. For example, when /ledgers/available/readonly was added, this broke some bits of code that expected every znode under /ledgers/available to be a bookie. In fact, the code that this is fixing was guilty of this. Moving the handling of ZK to a central place prevents this situation occurring again in the future.","24/Jul/13 15:08;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632.patch|https://issues.apache.org/jira/secure/attachment/12593939/BOOKKEEPER-632.patch] downloaded at Wed Jul 24 14:41:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 865
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/431/","24/Jul/13 15:33;vinayrpet;Thanks Ivan, I will have a try anyway. ","24/Jul/13 15:35;vinayrpet;One more doubt, In Auditor#checkAllLedgers(), zookeeper, Bookkeeper clients are created and closed there itself. Is there any specific reason to create local to that method and close..? ","24/Jul/13 15:49;vinayrpet;Attached the updated patch.
Used the BookKeeperAdmin apis","24/Jul/13 16:25;ikelly;Regarding, #checkAllLedgers(), I don't know. In any case, its out of scope for this. The new patch looks good. I'll run the tests over it, and submit.","24/Jul/13 16:48;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632.patch|https://issues.apache.org/jira/secure/attachment/12593968/BOOKKEEPER-632.patch] downloaded at Wed Jul 24 16:09:50 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 866
.    Tests failed: 9
.    Tests errors: 11

.    The patch failed the following testcases:

.      testSimpleLedger[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testRestartBookie[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testToggleLedgerReplication[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testSimpleLedger[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testRestartBookie[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testToggleLedgerReplication[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testSimpleLedger[2](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testRestartBookie[2](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testToggleLedgerReplication[2](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/432/","25/Jul/13 06:24;vinayrpet;Fixed test failures.

Previously I had missed watching available bookies.",25/Jul/13 06:36;hustlmsp;please add timeout option. I guessed we need to modify precommit hook to check '@Test' to ensure there is a timeout provided.,25/Jul/13 06:58;vinayrpet;Added timeout,"25/Jul/13 09:44;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632.patch|https://issues.apache.org/jira/secure/attachment/12594120/BOOKKEEPER-632.patch] downloaded at Thu Jul 25 09:17:47 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 866
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/438/","30/Jul/13 17:13;vinayrpet;Hi Ivan and Sijie, Please review the updated patch, all comments have been addressed.",07/Aug/13 06:35;vinayrpet;Patch for branch-4.2,"07/Aug/13 09:15;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632-branch-4.2.patch|https://issues.apache.org/jira/secure/attachment/12596521/BOOKKEEPER-632-branch-4.2.patch] downloaded at Wed Aug  7 09:13:23 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","12/Aug/13 02:11;hustlmsp;timeout lgtm. [~ikelly] could you take a look at this, as you are involved in this thread.","12/Aug/13 16:52;ikelly;hey Vinay, really sorry about taking so long to get to this. Had a trip to the US last week, and previous weeks were eaten up preparing for it.

Regarding the patch, we don't want to expose zookeeper apis in our public apis, and BookKeeperAdmin#getAvailableBookies() is a public api. It would be better to add a new API, 
{code}
BookieWatcher#notifyBookiesChanged(BookiesListener listener);

interface BookiesListener {
    void availableBookiesChanged();
}
{code}

This way, BookKeeperAdmin isn't exposing anything new except for the #getReadOnlyBookies() api.",13/Aug/13 04:59;vinayrpet;Attaching the patch with changes as per Ivan's comments,13/Aug/13 05:14;vinayrpet;patch for branch 4.2 as well,"13/Aug/13 05:41;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632.patch|https://issues.apache.org/jira/secure/attachment/12597655/BOOKKEEPER-632.patch] downloaded at Tue Aug 13 05:14:25 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 870
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/458/","13/Aug/13 05:43;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632-branch-4.2.patch|https://issues.apache.org/jira/secure/attachment/12597656/BOOKKEEPER-632-branch-4.2.patch] downloaded at Tue Aug 13 05:41:45 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","13/Aug/13 15:00;ikelly;The api is clearer if waiting for notification is separated from the reading. I've attached a patch that does this.

Also, auditor shouldn't call #register on a passed in ZK object. This overwrites the previous watcher, which could lead to unpredictable behaviour. In any case, Auditor shouldn't watch for expired. It's already watched for by the watcher created in AutoRecoveryMain.
","13/Aug/13 15:11;vinayrpet;patch looks good.
Only one doubt. why we need {{bkc.bookieWatcher.readBookiesBlocking();}} as this would have been called in BookKeeper constructor. 

",13/Aug/13 15:13;vinayrpet;one more.. Patch misses BookiesListener,"13/Aug/13 15:17;vinayrpet;Posting the updated patch, on top of [~ikelly] Patch","13/Aug/13 15:25;ikelly;because the bookkeeper client is reused, and the readonly bookies may have changed, but the watcher may not have been triggered yet. It's really just to ensure we have the freshest list.","13/Aug/13 15:41;vinayrpet;Since we are registering for the changes, {{bkc.bookieWatcher.readBookiesBlocking()}} may not be required.","13/Aug/13 15:50;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [BOOKKEEPER-632.patch|https://issues.apache.org/jira/secure/attachment/12597736/BOOKKEEPER-632.patch] downloaded at Tue Aug 13 15:22:56 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 876
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testAuditorZKSessionLoss(org.apache.bookkeeper.replication.AuditorBookieTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/461/","14/Aug/13 06:57;vinayrpet; {noformat}testAuditorZKSessionLoss(org.apache.bookkeeper.replication.AuditorBookieTest){noformat}
Seems This failure is unrelated",20/Aug/13 15:43;ikelly;Failure repros for me. There's something broken.,20/Aug/13 16:44;ikelly;Fixed the problem. The ZK expire test was in the wrong place after the change.,"20/Aug/13 22:26;hadoopqa;Testing JIRA BOOKKEEPER-632


Patch [0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch|https://issues.apache.org/jira/secure/attachment/12598978/0001-BOOKKEEPER-632-AutoRecovery-should-consider-read-onl.patch] downloaded at Tue Aug 20 21:59:40 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 5 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 877
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/466/","21/Aug/13 04:07;vinayrpet;Patch looks good Ivan, +1.",21/Aug/13 11:19;ikelly;Committed r1516139 to trunk.,"21/Aug/13 11:57;hudson;SUCCESS: Integrated in bookkeeper-trunk #332 (See [https://builds.apache.org/job/bookkeeper-trunk/332/])
BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank) (ivank: rev 1516139)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
",21/Aug/13 13:55;ikelly;Committed 1516162 to branch-4.2. Some manual merging required. Final patch attached. Thanks for working on this Vinay.,21/Aug/13 17:07;vinayrpet;Thanks Ivan.,,,,,,,,,,,,,,,,,,,,,,,,
Race between PerChannelBookieClient#channelDisconnected() and disconnect() calls can make clients hang while add/reading entries in case of multiple bookie failures,BOOKKEEPER-668,12662079,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,vinayrpet,vinayrpet,06/Aug/13 09:52,20/Aug/13 11:27,13/Mar/19 22:16,20/Aug/13 10:52,4.2.1,4.3.0,4.2.2,4.3.0,bookkeeper-client,,,0,,"1. Ledger was created with ensemble 2 and quorum as 2 and entries were written.
2. While reading entries, 2 BKs out of 3 in cluster were killed and restarted.
3. Client was hung at read call waiting for sync counter notification.

As though I was not able to reproduce this in some tries, but
By looking at the logs and code, following seems to be problem

1. BookieWatcher got the notification first for changes in available bookies.
2. PerChannelBookieClient#disconnect() called from BookieWatcher for failed bookies. This has set the 'this.channel=null;'
3. PerChannelBookieClient#channelDisconnected() call came now, and it proceeded silently without notifying errors to read ops.

So client is hung waiting for result.

",,,,,,,,,,,,BOOKKEEPER-671,,,,13/Aug/13 15:02;ikelly;0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch;https://issues.apache.org/jira/secure/attachment/12597735/0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch,13/Aug/13 09:39;ikelly;0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch;https://issues.apache.org/jira/secure/attachment/12597685/0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch,12/Aug/13 15:42;ikelly;BOOKKEEPER-668-test.diff;https://issues.apache.org/jira/secure/attachment/12597496/BOOKKEEPER-668-test.diff,06/Aug/13 17:25;hustlmsp;BOOKKEEPER-668.diff;https://issues.apache.org/jira/secure/attachment/12596373/BOOKKEEPER-668.diff,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-08-06 17:25:30.806,,,no_permission,,,,,,,,,,,,,342083,,,Tue Aug 20 11:27:15 UTC 2013,,,,,,0|i1mzv3:,342388,,,,,,,,06/Aug/13 17:25;hustlmsp;this issue would be easy to remove the conditional check when errorOutOutstandingEntries. since channelDisconnect would be triggered in either case: 1) client manually close channel; 2) netty close it due to channel is broken. we can't guarantee when #channelDisconnect would be triggered. so the safe way is to error out when received #channelDisconnect like what we did here: https://github.com/twitter/bookkeeper/blob/master/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java#L627,"06/Aug/13 18:16;hadoopqa;Testing JIRA BOOKKEEPER-668


Patch [BOOKKEEPER-668.diff|https://issues.apache.org/jira/secure/attachment/12596373/BOOKKEEPER-668.diff] downloaded at Tue Aug  6 17:49:50 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 863
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/451/","07/Aug/13 04:01;vinayrpet;Yes, same solution I was thinking. But i didn't know the reason behind addition of check. 
Patch looks good to me +1.","12/Aug/13 15:53;ikelly;I added a test for this. I don't think the fix is right. Consider the following case.

# Client calls connect() [state=CONNECTING]
# Client calls disconnect() before connect finishes [state=DISCONNECTED]
# Client calls connect() [state=CONNECTING]
# Connect completes, client writes request [state=CONNECTED]
# channelDisconnected() from previous disconnect() called

This will cause a request to be wrongly failed with the attached patch. This isn't as bad as the current situation, but I wouldn't call it good. What would be better would be to have requests owned by the channel which they have been sent out on. This is a pretty big refactor though :/","12/Aug/13 16:18;hadoopqa;Testing JIRA BOOKKEEPER-668


Patch [BOOKKEEPER-668-test.diff|https://issues.apache.org/jira/secure/attachment/12597496/BOOKKEEPER-668-test.diff] downloaded at Mon Aug 12 15:51:47 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 864
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testRequestCompletesAfterDisconnectRace(org.apache.bookkeeper.proto.TestPerChannelBookieClient)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/457/","12/Aug/13 17:43;hustlmsp;{quote}
This will cause a request to be wrongly failed with the attached patch. This isn't as bad as the current situation, but I wouldn't call it good. 
{quote}

yes as my previous comment. it would be an eventual behavior that the requests would be failed and retried and finally sent to right bookie, as it is difficult to when channelDisconnect would be called. for this fix, I would expect a simple fix for both 4.2.2 and 4.3.0 rather than refactoring.

","13/Aug/13 09:02;ikelly;Ok, for 4.2.2 this is fine. For 4.3.0 probably also, though I think this should be fixed in the future. I'll create a 4.3.0 jira for this. We can bump it to the next release when we start reviewing 4.3.0's scope. I'll generate a patch with the fix and the test.
",13/Aug/13 09:39;ikelly;New patch merges fix and test. Also fixes an NPE issue in errorOut* which the main fix surfaced.,"13/Aug/13 10:02;vinayrpet;One small nit.
Please remove unused import in Test
{code}import java.util.concurrent.atomic.AtomicInteger;{code}

lgtm otherwise.. +1. ","13/Aug/13 10:08;hadoopqa;Testing JIRA BOOKKEEPER-668


Patch [0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch|https://issues.apache.org/jira/secure/attachment/12597685/0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch] downloaded at Tue Aug 13 09:41:52 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 865
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/460/",13/Aug/13 15:02;ikelly;New patch removes unnecessary import.,"13/Aug/13 16:17;hadoopqa;Testing JIRA BOOKKEEPER-668


Patch [0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch|https://issues.apache.org/jira/secure/attachment/12597735/0001-BOOKKEEPER-668-Race-between-PerChannelBookieClient-c.patch] downloaded at Tue Aug 13 15:50:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 871
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/462/","14/Aug/13 14:39;vinayrpet;lgtm, +1.","20/Aug/13 10:52;ikelly;Committed revision 1515768 to branch-4.2
Committed revision 1515769 to trunk.","20/Aug/13 11:27;hudson;SUCCESS: Integrated in bookkeeper-trunk #329 (See [https://builds.apache.org/job/bookkeeper-trunk/329/])
BOOKKEEPER-668: Race between PerChannelBookieClient#channelDisconnected() and disconnect() calls can make clients hang while add/reading entries in case of multiple bookie failures (sijie & ivank via ivank) (ivank: rev 1515769)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ledger storage can log an exception if GC happens concurrently.,BOOKKEEPER-604,12641399,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,ikelly,ikelly,08/Apr/13 16:56,12/Aug/13 17:26,13/Mar/19 22:16,12/Aug/13 17:01,,,4.2.2,4.3.0,,,,0,,"If a ledger is flushing, and part way through,GC kicks in, it can delete the index file before we try and flush it.",,,,,,,,,,,BOOKKEEPER-655,,,,,24/Jul/13 10:02;ikelly;0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch;https://issues.apache.org/jira/secure/attachment/12593912/0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch,23/Jul/13 14:33;ikelly;0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch;https://issues.apache.org/jira/secure/attachment/12593704/0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch,22/Jul/13 15:01;ikelly;0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch;https://issues.apache.org/jira/secure/attachment/12593526/0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch,04/Jul/13 17:50;ikelly;0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch;https://issues.apache.org/jira/secure/attachment/12590918/0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch,25/Jul/13 05:57;hustlmsp;BOOKKEEPER-604.diff;https://issues.apache.org/jira/secure/attachment/12594107/BOOKKEEPER-604.diff,28/Jun/13 21:08;mmerli;BOOKKEEPER-604.diff;https://issues.apache.org/jira/secure/attachment/12590088/BOOKKEEPER-604.diff,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2013-06-28 21:08:53.921,,,no_permission,,,,,,,,,,,,,321815,,,Mon Aug 12 17:26:59 UTC 2013,,,,,,0|i1jix3:,322160,,,,,,,,28/Jun/13 21:08;mmerli;Catching the NoLedgerException and printing a log message when the race condition occours,"29/Jun/13 01:31;hustlmsp;I don't think the fix is right. the case would not happen at that place that the patch tried to fix, since it is protected under a synchronized block.

the race could only happen after it got the firstEntryList and started to flush and deleteLedger kicked in. I think a simple fix is we should call getFileInfo once and use this fileInfo acrossing the flush period and release it only after flushing is done.

",04/Jul/13 17:51;ikelly;New patch moves the call to getFileInfo so there's only one. We do need to check for NoLedgerException though.,"04/Jul/13 18:27;hadoopqa;Testing JIRA BOOKKEEPER-604


Patch [0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch|https://issues.apache.org/jira/secure/attachment/12590918/0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch] downloaded at Thu Jul  4 18:01:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 854
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/407/",20/Jul/13 18:22;hustlmsp;this change doesn't seem right. #release should be in final block otherwise it would cause leaking.,22/Jul/13 15:01;ikelly;You're right. Updated patch.,"22/Jul/13 15:38;hadoopqa;Testing JIRA BOOKKEEPER-604


Patch [0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch|https://issues.apache.org/jira/secure/attachment/12593526/0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch] downloaded at Mon Jul 22 15:11:55 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 858
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/425/","23/Jul/13 03:09;rakeshr;(timeout=60000) option is missing in tests, please add.
{code}
+    @Test
+    public void testFlushDeleteRace() throws Exception {
{code}",23/Jul/13 14:33;ikelly;added timeout to test.,"23/Jul/13 15:14;hadoopqa;Testing JIRA BOOKKEEPER-604


Patch [0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch|https://issues.apache.org/jira/secure/attachment/12593704/0001-BOOKKEEPER-604-Ledger-storage-can-log-an-exception-i.patch] downloaded at Tue Jul 23 14:47:54 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 860
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/427/",24/Jul/13 05:05;vinayrpet;Patch looks good to me. +1,"24/Jul/13 06:02;umamaheswararao;Nits:
{code}
    try {
                            ledgerCache.putEntryOffset((long)id, 1, 0);
                            } catch (Bookie.NoLedgerException nle) {
                                //ignore
                            }
{code}
format is off here.
I think AtomicLong unused here. remove import.
",24/Jul/13 10:02;ikelly;Fixed formatting and redundant import.,"25/Jul/13 05:28;hustlmsp;this change is still buggy. still leaking on following code block.

{code}
        if (firstEntryList.size() == 0) {
            LOG.debug(""Nothing to flush for ledger {}."", l);
            // nothing to do
            return;
        }
{code}","25/Jul/13 05:57;hustlmsp;attach a patch as what I commented here : https://issues.apache.org/jira/browse/BOOKKEEPER-604?focusedCommentId=13696005&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13696005

- obtain fileinfo before flushing
- pass fileinfo to flush
- finally release fileinfo after flush

","25/Jul/13 10:11;hadoopqa;Testing JIRA BOOKKEEPER-604


Patch [BOOKKEEPER-604.diff|https://issues.apache.org/jira/secure/attachment/12594107/BOOKKEEPER-604.diff] downloaded at Thu Jul 25 09:44:58 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 861
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/439/",12/Aug/13 17:01;ikelly;Committed r1513198 to trunk. Thanks Sijie.,"12/Aug/13 17:26;hudson;SUCCESS: Integrated in bookkeeper-trunk #320 (See [https://builds.apache.org/job/bookkeeper-trunk/320/])
BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank) (ivank: rev 1513198)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
",12/Aug/13 17:26;ikelly;Committed revision 1513206 for branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PerChannelBookieClient race during channel disconnect,BOOKKEEPER-620,12651610,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,07/Jun/13 00:58,06/Aug/13 17:25,13/Mar/19 22:16,28/Jun/13 16:00,,,4.2.2,4.3.0,bookkeeper-client,,,0,,channel & state are not synchronized in PerChannelBookieClient#closeInternal. so it might cause state is set to CONNECTED but the netty channel is closed by mistake in closeInternal.,,,,,,,,,,,,,,BOOKKEEPER-668,,26/Jun/13 15:49;ikelly;0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch;https://issues.apache.org/jira/secure/attachment/12589765/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch,25/Jun/13 12:49;ikelly;0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch;https://issues.apache.org/jira/secure/attachment/12589600/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch,18/Jun/13 10:20;ikelly;0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch;https://issues.apache.org/jira/secure/attachment/12588322/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch,17/Jun/13 12:18;ikelly;0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch;https://issues.apache.org/jira/secure/attachment/12588132/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch,14/Jun/13 17:32;ikelly;0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch;https://issues.apache.org/jira/secure/attachment/12587843/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch,10/Jun/13 13:17;ikelly;0002-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch;https://issues.apache.org/jira/secure/attachment/12587059/0002-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch,07/Jun/13 09:06;ikelly;BOOKKEEPER-620.diff;https://issues.apache.org/jira/secure/attachment/12586684/BOOKKEEPER-620.diff,,,,,,,,7.0,,,,,,,,,,,,,,,,,,,2013-06-10 13:17:18.572,,,no_permission,,,,,,,,,,,,,331936,,,Fri Jun 28 16:00:01 UTC 2013,,,,,,0|i1l9i7:,332265,,,,,,,,"10/Jun/13 13:17;ikelly;The race is worse than the description describes. If connect, close and connect are called in the wrong order, it can cause a NPE on the readTimeoutTimer. It can also leak a Channel, as if state is set to CONNECTING, then DISCONNECTED, another connect can start and two channels are created. The attached patch fixes this, and adds a test which should trigger this.","10/Jun/13 14:37;hadoopqa;Testing JIRA BOOKKEEPER-620


Patch [0002-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch|https://issues.apache.org/jira/secure/attachment/12587059/0002-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch] downloaded at Mon Jun 10 14:02:05 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/354/","11/Jun/13 00:39;hustlmsp;yes. the description is simple. we are trying to generate the patch. but you already eager to generate a patch, that's fine. several comments as below:

1. remove the LOG.info(""Already connected with another channel"" or change it to DEBUG. it might generate lots of useless statements.
2. in channelDisconnected, we'd better to check whether the current channel in PCBC client is the right channel disconnected in (ChannelEvent) before setting state to DISCONNECTED state. And it is better to close channel in ChannelEvent not channel in PCBC. otherwise, it would enter a dead loop: new estabilished channels are closed by previous channelDisconnected events.
3. it would be better to check ChannelClosedException when writing request failure and set the channel to DISCONNECTED.

","12/Jun/13 15:01;ikelly;Ah sorry, I didn't know you guys were working on a patch. I wanted to get this into 4.2.2 so I just dived right in. As it is, I think my patch needs some more work, especially around the channelDisconnected part, as I'm not confident there still aren't races there. Do you guys have a different solution?",12/Jun/13 17:45;hustlmsp;[~ikelly] your patch already addressed most of part. you possibly need to address my previous comments. I would point you to our changes if it is pushed to our branch.,"14/Jun/13 17:34;ikelly;New patch addresses comments except for 3. If there's an I/O error in a netty socket, the channelDisconnected callback is called, so setting the channel to disconnected on write request failures is unnecessary. Also, I'd like to minimise the number of the place we modify state to make things simpler.","14/Jun/13 18:37;hadoopqa;Testing JIRA BOOKKEEPER-620


Patch [0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch|https://issues.apache.org/jira/secure/attachment/12587843/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch] downloaded at Fri Jun 14 18:11:40 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/361/","14/Jun/13 21:47;hadoopqa;Testing JIRA BOOKKEEPER-620


Patch [0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch|https://issues.apache.org/jira/secure/attachment/12587843/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch] downloaded at Fri Jun 14 21:21:38 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/363/","15/Jun/13 14:15;fpj;Patch looks good to me. A couple of comments:

- have you really meant to say BOOKKEEPER-5 in the test case in the patch?
- I think you could have fixed a number of iterations and coordinated with CountDownLatch objs instead of relying on a 5s sleep.
",17/Jun/13 12:18;ikelly;New patch addresses flavio's comments.,"17/Jun/13 12:38;fpj;Thanks, Ivan. I was actually thinking that connectIfNeededAndDoOp() and disconnect() should be executed in lockstep, otherwise we could have a number of calls for one while having just a single call for the other unnecessarily. 

The patch looks good, I just would like to understand if what I'm proposing is incorrect. ","17/Jun/13 12:47;hadoopqa;Testing JIRA BOOKKEEPER-620


Patch [0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch|https://issues.apache.org/jira/secure/attachment/12588132/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch] downloaded at Mon Jun 17 12:21:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/372/","17/Jun/13 13:27;ikelly;Putting them in lockstep would mean they're not interleaved. There's enough iterations to ensure they overlap. Also, I don't start running the connects until the disconnect thread has started.","18/Jun/13 00:12;hustlmsp;> LOG.info(""Successfully connected to bookie: {}"", addr);

add channel in this statement, and move this line down after the channel is assigned.

> LOG.warn(""Closed before connection completed, clean up: {}, current state {}"",
+                                  addr, state);

log channel object instead of addr, which channel give more information than addr for debugging.

> LOG.debug(""Already connected with another channel, so close the new channel "");

log existed channel and new connected channel, otherwise this log statement didn't give any useful information

> LOG.error(""Could not connect to bookie: {}, current state {}"", addr, state);

same thing, log channel rather than addr.


{code}
     private void closeInternal(boolean permanent) {
+        ChannelFuture closeFuture = null;
         synchronized (this) {
             if (permanent) {
                 state = ConnectionState.CLOSED;
             } else if (state != ConnectionState.CLOSED) {
                 state = ConnectionState.DISCONNECTED;
             }
+            if (channel != null) {
+                closeFuture = closeChannel(channel);
+                channel = null;
+            }
         }
-        if (channel != null) {
-            channel.close().awaitUninterruptibly();
+        if (closeFuture != null) {
+            closeFuture.awaitUninterruptibly();
         }
-        if (readTimeoutTimer != null) {
-            readTimeoutTimer.stop();
-            readTimeoutTimer = null;
+    }
{code}

I would suggest moving close out side of synchronization, just assigned the channel to a local variable and close this local variable out side of the synchronization block, we observed a deadlock on netty channel buffer.

{code}
     public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
         LOG.info(""Disconnected from bookie: "" + addr);
-        errorOutOutstandingEntries();
-        Channel c = this.channel;
+        Channel c = ctx.getChannel();
         if (c != null) {
-            c.close();
+            closeChannel(c);
         }
+
+        Set<CompletionKey> addsToError = Collections.emptySet();
+        Set<CompletionKey> readsToError = Collections.emptySet();
         synchronized (this) {
-            if (state != ConnectionState.CLOSED) {
+            if (this.channel == c
+                && state != ConnectionState.CLOSED) {
                 state = ConnectionState.DISCONNECTED;
             }
+            if (state == ConnectionState.CLOSED
+                || state == ConnectionState.DISCONNECTED) {
+                addsToError = addCompletions.keySet();
+                readsToError = readCompletions.keySet();
+            }
+        }
+        for (CompletionKey key : addsToError) {
+            errorOutAddKey(key);
+        }
+        for (CompletionKey key : readsToError) {
+            errorOutReadKey(key);
         }
{code}
1) in general, it would be better to keep comments when you moved around the code.
2) it would be better to error out entries before set state back to DISCONNECTED. since after the channel is set to DISCONNECTED, the client would begin sending requests to connecting. you might error ongoing requests.

so you could do conditional check first, call errorOutOutstandingEntries based on conditional checking and set the state back DISCONNECTED after error out entries.

",18/Jun/13 00:12;hustlmsp;cancel the patch until comments addressed.,"18/Jun/13 10:27;ikelly;New patch addresses all comments except the channelDisconnected one.

{quote}
1) in general, it would be better to keep comments when you moved around the code.
{quote}
Both comment blocks on #errorOutOutstandingEntries() are redundant after the move. The method doc talks about classes that were removed from the codebase before I started working on it.

{quote}
2) it would be better to error out entries before set state back to DISCONNECTED. since after the channel is set to DISCONNECTED, the client would begin sending requests to connecting. you might error ongoing requests.
{quote}
If we error out outstanding requests before setting state to DISCONNECTED, there is a time period between the erroring and the synchronization block where more requests could be added. These would not be errored. We can't error out inside the synchronization block because it could lead to a deadlock if the request was retried. As it is now, it won't touch ongoing requests, as we only take the set of requests to error at the same time as setting the state to disconnected.","18/Jun/13 10:47;hadoopqa;Testing JIRA BOOKKEEPER-620


Patch [0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch|https://issues.apache.org/jira/secure/attachment/12588322/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch] downloaded at Tue Jun 18 10:21:30 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/374/","20/Jun/13 03:08;hustlmsp;{quote}
If we error out outstanding requests before setting state to DISCONNECTED, there is a time period between the erroring and the synchronization block where more requests could be added. 
{quote}

that's not true. new requests would be failed directly since the channel is closed, writing a request to a closed request would error out the request directly. error outing a request would trigger replacing a new bookie. that is not a big deal.

but if you set the channel to DISCONNECTED first, you would error out outgoing requests. that is my concern.

{quote}
Both comment blocks on #errorOutOutstandingEntries() are redundant after the move. The method doc talks about classes that were removed from the codebase before I started working on it
{quote}

{quote}
-        // DO NOT rewrite these using Map.Entry iterations. We want to iterate
-        // on keys and see if we are successfully able to remove the key from
-        // the map. Because the add and the read methods also do the same thing
-        // in case they get a write failure on the socket. The one who
-        // successfully removes the key from the map is the one responsible for
-        // calling the application callback.
{quote}

you just moved around the code, which doesn't change the behavior how we iterate the keys. the comment is about iterating keys. so I don't think it is redundant as you said.","21/Jun/13 17:39;ikelly;{quote}that's not true. new requests would be failed directly since the channel is closed, writing a request to a closed request would error out the request directly. error outing a request would trigger replacing a new bookie. that is not a big deal.{quote}
I this, is true, I hadn't thought of that.

{quote}
but if you set the channel to DISCONNECTED first, you would error out outgoing requests. that is my concern.
{quote}
Do you mean requests which were made after state was set to DISCONNECTED but before I error out the keys? This cannot happen, as I only error out the keys which are in the completions sets when set the state to DISCONNECTED. Anything added afterwards, once the synchronize block is exited, is fine. This also relates to the comment. Since I'm selecting the keys in the synchronization block before erroring them out outside the block, it's not possible to do it using a foreach style loop, which is what the comment is warning against.","25/Jun/13 02:00;hustlmsp;{quote}
Do you mean requests which were made after state was set to DISCONNECTED but before I error out the keys?
{quote}

yes. this is the case I mentioned.

{quote}
This cannot happen, as I only error out the keys which are in the completions sets when set the state to DISCONNECTED. Anything added afterwards, once the synchronize block is exited, is fine. 
{quote}

I don't understand why you say this couldn't happen. Map#keySet just returned a view of the keys, which is backed by the underlying map, the changes to underlying map would affect the set view and vice-versa.

http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentHashMap.html#keySet%28%29","25/Jun/13 12:58;ikelly;{quote}I don't understand why you say this couldn't happen. Map#keySet just returned a view of the keys, which is backed by the underlying map, the changes to underlying map would affect the set view and vice-versa{quote}
You're right. I assumed wrongly that keySet() constructed a new set. I've updated the patch to use guava's ImmutableSet to store the keys to be errored out. ","25/Jun/13 14:47;hadoopqa;Testing JIRA BOOKKEEPER-620


Patch [0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch|https://issues.apache.org/jira/secure/attachment/12589600/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch] downloaded at Tue Jun 25 14:21:40 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 851
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/386/","25/Jun/13 20:25;hustlmsp;{code}
You're right. I assumed wrongly that keySet() constructed a new set. I've updated the patch to use guava's ImmutableSet to store the keys to be errored out. 
{code}

where the QPS is high, there will be lots of pending requests, copying keys would introduce more memory. as my comments before, there is no issue in original sequence (error out entries first and set DISCONNECTED later), why change it?","26/Jun/13 15:54;ikelly;the original sequence is harder to reason about, because you have to rely on actions taking place elsewhere in the code for correct behaviour. I thought the way I changed it made the correctness easier to verify by just looking at the channelDisconnect(). The selection of the ops to error out occurs inside the synchronization block, so you know that you are only errorring those that were pending when the state change occurred.

I'm not that hung up on it, though. I've reverted that part of the patch to the original code (adding a this.channel == ctx.getChannel() check though).","26/Jun/13 16:17;hadoopqa;Testing JIRA BOOKKEEPER-620


Patch [0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch|https://issues.apache.org/jira/secure/attachment/12589765/0001-BOOKKEEPER-620-PerChannelBookieClient-race-during-ch.patch] downloaded at Wed Jun 26 15:51:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/391/","27/Jun/13 01:35;hustlmsp;I just don't want to be surprised by other problem (e.g gc issues) about the sequence. anyway, +1 for latest patch.","28/Jun/13 15:56;hudson;Integrated in bookkeeper-trunk #263 (See [https://builds.apache.org/job/bookkeeper-trunk/263/])
    BOOKKEEPER-620: PerChannelBookieClient race during channel disconnect (ivank) (Revision 1497814)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java
","28/Jun/13 16:00;ikelly;Committed r1497814 to trunk.
Committed revision 1497824 to branch-4.2.

Thanks for the reviews and discussion guys.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range,BOOKKEEPER-663,12660121,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,mmerli,mmerli,mmerli,26/Jul/13 19:31,29/Jul/13 12:23,13/Mar/19 22:16,29/Jul/13 12:23,,,4.2.2,4.3.0,,,,0,,"The HierarchicalLedgerManager is missing some ledger ranges when iterating over 2nd level ranges. 
Also, within these ranges, the last ledger (*9999) it's not included in the iteration.",,,,,,,,,,,,,,,,26/Jul/13 21:49;mmerli;BOOKKEEPER-663.patch;https://issues.apache.org/jira/secure/attachment/12594454/BOOKKEEPER-663.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-26 23:16:58.963,,,no_permission,,,,,,,,,,,,,340313,,,Mon Jul 29 12:23:19 UTC 2013,,,,,,0|i1mp13:,340631,,,,,,,,"26/Jul/13 23:16;hadoopqa;Testing JIRA BOOKKEEPER-663


Patch [BOOKKEEPER-663.patch|https://issues.apache.org/jira/secure/attachment/12594454/BOOKKEEPER-663.patch] downloaded at Fri Jul 26 22:50:10 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 863
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/442/","29/Jul/13 12:23;ikelly;Committed r1507997 to trunk.
Committed revision 1508005 to branch-4.2.

Thanks Matteo.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
On OutOfMemoryError in NIOServerFactory thread bookie should shutdown,BOOKKEEPER-625,12652803,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,14/Jun/13 04:45,24/Jul/13 12:16,13/Mar/19 22:16,24/Jul/13 12:16,4.2.1,,4.2.2,,bookkeeper-server,,,0,,"Observed OutOfMemoryError in NIOServerFactory, but it didnt bring down the bookie and it continued to run without serving. 

On OOME in any thread, bookie should shutdown.",,,,,,,,,,,,,,,,24/Jul/13 11:00;vinayrpet;BOOKKEEPER-625-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12593921/BOOKKEEPER-625-branch-4.2.patch,24/Jul/13 05:03;vinayrpet;BOOKKEEPER-625-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12593854/BOOKKEEPER-625-branch-4.2.patch,19/Jun/13 11:49;vinayrpet;BOOKKEEPER-625-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12588581/BOOKKEEPER-625-branch-4.2.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2013-06-14 05:27:37.366,,,no_permission,,,,,,,,,,,,,333126,,,Wed Jul 24 12:16:30 UTC 2013,,,,,,0|i1lgtb:,333454,,,,,,,,"14/Jun/13 05:27;umamaheswararao;This can happen in any thread. Handling OOM in all threads and shutting down may not be a correct option I guess.
one option is : -XX:OnOutOfMemoryError=""kill -9 %p"" which will shutdown the process automatically on getting OOME. But this is not graceful as we pass 'kill -9'
We can discuss more if we think we must go gracefully only. or using UncaughtExceptionHandler can do gracefully? (but I did not use UncaughtExceptionHandler in my past experience)

Thoughts?","14/Jun/13 08:10;fpj;Do you know why it happened? It doesn't sound right to add code to deal with out of memory exceptions because it is really an anomalous situation. If we have a bug that is causing the bookie to run out of memory, then we need to track the bug. Is it something that has happened multiple times or just once? If it is reproducible, then we can try to fix what caused it.","14/Jun/13 09:19;vinayrpet;Yeah Agree to both of you.. we cannot handle the OOME for all threads..

The Actual intention I rised the Jira is, 
Since the NIOServerFactory is the basic thread which should be running to keep the BookieServer process running, we should avoid situations where this thread is not present and BookieServer process is still running.
Currently all exceptions are catched inside {{NIOServerFactory.run()}}, but still thread can exit due to errors such as OOME.

In one of our cluster, OOME came in NIOServerFactory thread and that thread exited. But user didnt know the problem because process was still running.

bq. It doesn't sound right to add code to deal with out of memory exceptions because it is really an anomalous situation.
Yes I agree. But one simple call to check the thread availability inside {{NIOServerFactory.isRunning()}} will solve the problem. As follows
{code:java}    public boolean isRunning() {
        return !ss.socket().isClosed() && isAlive();
    }{code}

Similar check we can add for other critical threads, without which keeping the process alive is useless.

","14/Jun/13 09:28;fpj;For 4.3.0 at least we will be using netty instead, right? BOOKKEEPER-555","19/Jun/13 11:49;vinayrpet;Attached the patch for branch-4.2

Not able to write the test because there was no way we can stop NIO thread without closing socket in tests. Also OOM is not possible in Tests.","19/Jun/13 12:35;hadoopqa;Testing JIRA BOOKKEEPER-625


Patch [BOOKKEEPER-625-branch-4.2.patch|https://issues.apache.org/jira/secure/attachment/12588581/BOOKKEEPER-625-branch-4.2.patch] downloaded at Wed Jun 19 12:33:56 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","20/Jun/13 06:43;hustlmsp;I am interested on why OOM happened. it would be good if you had information why this happened. otherwise, the patch looks good to me.",20/Jun/13 08:40;vinayrpet;In one of our cluster -XX:MaxDirectMemorySize=64M was set for testing GC OPTS. So due to increase in the number of ledgers directbuffer memory usage got increased and got OOME.,"20/Jun/13 23:16;fpj;I think jira should be more about how to deal with exception in NIOServerFactory, no? In b4.2, we just issue a warn message upon an exception and perhaps this is ok as long as the socket is still open. In the case of an error, I'm wondering if we should consider shutting down. Is that overkill?","02/Jul/13 17:15;ikelly;With this patch the process will just exit silently, no?

Couldn't we also change the catch on line 158 to take a Throwable rather than an Exception. This way, it will at least attempt to inform the user of the problem.","20/Jul/13 06:30;vinayrpet;Sorry for the late reply.
{quote}With this patch the process will just exit silently, no?
Couldn't we also change the catch on line 158 to take a Throwable rather than an Exception. This way, it will at least attempt to inform the user of the problem.{quote}

[~aivanise] Yes, process will exit silently. But anyway console logs will have the OutOfMemory information. 
If we catch Throwable instead of Exception, then it will just avoid the thread exit, but It may not reduce the memory used and we may get OOME for every call.","23/Jul/13 16:14;ikelly;I wasn't suggesting that we catch and log and stop there. We should catch, log and then break out of the loop. That way there will be something in the server log and not just the console.","24/Jul/13 05:03;vinayrpet;hi Ivan, 
i have updated the patch with your comments. Please have a look, Thanks.","24/Jul/13 05:13;hadoopqa;Testing JIRA BOOKKEEPER-625


Patch [BOOKKEEPER-625-branch-4.2.patch|https://issues.apache.org/jira/secure/attachment/12593854/BOOKKEEPER-625-branch-4.2.patch] downloaded at Wed Jul 24 05:12:05 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","24/Jul/13 10:51;ikelly;One small nit. The logging should be a LOG.error instead of a LOG.warn. If you agree, I can make the change as I commit it changes.",24/Jul/13 11:00;vinayrpet;Oops... Thanks Ivan for pointing it out. Here is the updated patch.,24/Jul/13 12:13;ikelly;Great. Patch is good. +1. Committing.,24/Jul/13 12:16;ikelly;Committed revision 1506513. Thanks Vinay.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieShell readjournal command is throwing BufferUnderflowException,BOOKKEEPER-646,12656558,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,rakeshr,rakeshr,rakeshr,08/Jul/13 06:11,20/Jul/13 18:28,13/Mar/19 22:16,20/Jul/13 18:28,4.2.1,,4.2.2,4.3.0,,,,0,,"Following is the exception:
{code}
--------- Lid=3, Eid=99, ByteOffset=5992, EntrySize=56 ---------
Type:           DATA
LastConfirmed:  98

--------- Lid=3, Eid=-8192, ByteOffset=6052, EntrySize=16 ---------
Exception in thread ""main"" java.nio.BufferUnderflowException
	at java.nio.Buffer.nextGetIndex(Buffer.java:480)
	at java.nio.HeapByteBuffer.getLong(HeapByteBuffer.java:387)
	at org.apache.bookkeeper.bookie.BookieShell.formatEntry(BookieShell.java:899)
	at org.apache.bookkeeper.bookie.BookieShell.access$1(BookieShell.java:882)
	at org.apache.bookkeeper.bookie.BookieShell$2.process(BookieShell.java:857)
	at org.apache.bookkeeper.bookie.Journal.scanJournal(Journal.java:395)
	at org.apache.bookkeeper.bookie.BookieShell.scanJournal(BookieShell.java:738)
	at org.apache.bookkeeper.bookie.BookieShell.scanJournal(BookieShell.java:849)
	at org.apache.bookkeeper.bookie.BookieShell$ReadJournalCmd.runCmd(BookieShell.java:440)
	at org.apache.bookkeeper.bookie.BookieShell$MyCommand.runCmd(BookieShell.java:111)
	at org.apache.bookkeeper.bookie.BookieShell.run(BookieShell.java:630)
	at org.apache.bookkeeper.bookie.BookieShell.main(BookieShell.java:656)
{code}


+Cause:+ When reading entries from a fenced ledger, BookieShell#formatEntry meeting Bookie.METAENTRY_ID_FENCE_KEY as an entry, but it doesn't have any data.",,,,,,,,,,,,,,,,08/Jul/13 07:22;rakeshr;0001-BOOKKEEPER-646.patch;https://issues.apache.org/jira/secure/attachment/12591184/0001-BOOKKEEPER-646.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-08 07:57:38.717,,,no_permission,,,,,,,,,,,,,336781,,,Sat Jul 20 18:27:56 UTC 2013,,,,,,0|i1m3af:,337104,,,,,,,,"08/Jul/13 07:22;rakeshr;Attached patch, added extra checks 'entryId == Bookie.METAENTRY_ID_FENCE_KEY' ","08/Jul/13 07:57;hadoopqa;Testing JIRA BOOKKEEPER-646


Patch [0001-BOOKKEEPER-646.patch|https://issues.apache.org/jira/secure/attachment/12591184/0001-BOOKKEEPER-646.patch] downloaded at Mon Jul  8 07:31:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/418/","20/Jul/13 18:25;hustlmsp;+1 for the change. thanks Rakesh.

committed as r1505181.",20/Jul/13 18:27;hustlmsp;committed as r1505183 in 4.2 branch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jenkins build should highlight which lines of the patch cause raw analysis errors,BOOKKEEPER-635,12654934,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,26/Jun/13 14:14,20/Jul/13 18:19,13/Mar/19 22:16,20/Jul/13 18:17,,,4.2.2,4.3.0,,,,0,,Currently it doesn't and this makes it hard to track the errors down.,,,,,,,,,,,,,,,,26/Jun/13 14:32;ikelly;0001-BOOKKEEPER-635-jenkins-build-should-highlight-which-.patch;https://issues.apache.org/jira/secure/attachment/12589755/0001-BOOKKEEPER-635-jenkins-build-should-highlight-which-.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-26 15:07:34.138,,,no_permission,,,,,,,,,,,,,335211,,,Sat Jul 20 18:19:33 UTC 2013,,,,,,0|i1ltm7:,335535,,,,,,,,26/Jun/13 14:32;ikelly;Patch adds the line numbers of the offending lines in the patch to the report. You can also run the checks against a patch before submitting now with bin/raw-check-patch,"26/Jun/13 15:07;hadoopqa;Testing JIRA BOOKKEEPER-635


Patch [0001-BOOKKEEPER-635-jenkins-build-should-highlight-which-.patch|https://issues.apache.org/jira/secure/attachment/12589755/0001-BOOKKEEPER-635-jenkins-build-should-highlight-which-.patch] downloaded at Wed Jun 26 14:41:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 852
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/390/","20/Jul/13 18:17;hustlmsp;+1 for the patch.

committed as r1505179. thanks Ivan.",20/Jul/13 18:19;hustlmsp;committed as r1505180 in 4.2 branch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in FileInfo.moveToNewLocation,BOOKKEEPER-621,12651649,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,07/Jun/13 09:15,20/Jul/13 18:13,13/Mar/19 22:16,20/Jul/13 18:13,4.2.1,,4.2.2,,,,,0,,"See attached test failure. This was fixed in BOOKKEEPER-564, but we can't pull back that whole patch. The fix is self contained though.",,,,,,,,,,,,,,,,03/Jul/13 10:46;ikelly;BOOKKEEPER-621.diff;https://issues.apache.org/jira/secure/attachment/12590617/BOOKKEEPER-621.diff,07/Jun/13 09:15;ikelly;TEST-org.apache.bookkeeper.test.ReadOnlyBookieTest.xml;https://issues.apache.org/jira/secure/attachment/12586686/TEST-org.apache.bookkeeper.test.ReadOnlyBookieTest.xml,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-07-03 11:00:16.965,,,no_permission,,,,,,,,,,,,,331975,,,Sat Jul 20 18:13:39 UTC 2013,,,,,,0|i1l9qv:,332304,,,,,,,,03/Jul/13 10:47;ikelly;Patch is simply the changes from FileInfo.java from BOOKKEEPER-564,"03/Jul/13 11:00;hadoopqa;Testing JIRA BOOKKEEPER-621


Patch [BOOKKEEPER-621.diff|https://issues.apache.org/jira/secure/attachment/12590617/BOOKKEEPER-621.diff] downloaded at Wed Jul  3 10:58:24 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","20/Jul/13 18:13;hustlmsp;+1 for the patch.

committed as r1505176 in 4.2 branch. thanks Ivan.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make SyncThread use an executor,BOOKKEEPER-610,12646991,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,10/May/13 09:45,20/Jul/13 18:06,13/Mar/19 22:16,20/Jul/13 18:06,,,4.3.0,,,,,0,,"Currently we have a bunch of boolean variables to control the lifecycle of the SyncThread. We're effectively replicating what an Executor does, so we should just use an executor.",,,,,,,,,,,,,,,,24/May/13 17:37;ikelly;0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch;https://issues.apache.org/jira/secure/attachment/12584726/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch,17/May/13 11:00;ikelly;0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch;https://issues.apache.org/jira/secure/attachment/12583642/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch,16/May/13 14:18;ikelly;0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch;https://issues.apache.org/jira/secure/attachment/12583486/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch,14/May/13 09:04;ikelly;0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch;https://issues.apache.org/jira/secure/attachment/12583102/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch,13/May/13 09:08;ikelly;0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch;https://issues.apache.org/jira/secure/attachment/12582903/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch,10/May/13 09:49;ikelly;0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch;https://issues.apache.org/jira/secure/attachment/12582597/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2013-05-10 10:21:45.225,,,no_permission,,,,,,,,,,,,,327348,,,Sat Jul 20 18:06:54 UTC 2013,,,,,,0|i1khb3:,327692,,,,,,,,10/May/13 09:49;ikelly;Added a bunch of tests for the syncthread also.,"10/May/13 10:21;hadoopqa;Testing JIRA BOOKKEEPER-610


Patch [0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch|https://issues.apache.org/jira/secure/attachment/12582597/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch] downloaded at Fri May 10 09:51:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 840
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/337/","12/May/13 19:06;rakeshr;Thanks [~ivank@yahoo-inc.com] for the patch and nice improvement work. 
Please see the following comments.

- Please correct the 'getLogger(BookieJournalTest.class)'
{code}
+public class TestSyncThread {
+    static Logger LOG = LoggerFactory.getLogger(BookieJournalTest.class);
{code}

- Please add timeout to the below testcases.
{code}
+    @Test
+    public void testSyncThreadDisksFull() throws Exception {

+    @Test
+    public void testSyncThreadShutdownOnError() throws Exception {
{code}

- Pass exception object to the logger, would be useful when debugging.
{code}
LOG.error(""No writeable ledger directories"", e);
{code}

- Please remove unused variable 'flushFailed'
{code}
    public void checkpoint(Checkpoint checkpoint) {
        boolean flushFailed = false;
{code}

- Just a suggestion :
flush() is getting called on shutdown(). I could see zk is already closed before this call and here if enters to 'dirsListener.allDisksFull();' 
will always throws unnecessary zk exceptions. IMO, flush() doesn't required to handle any exceptions, just throw back to the callee. Whats do you say?
{code}
    private void flush() {
        try {
            .....
        } catch (NoWritableLedgerDirException e) {
            LOG.error(""No writeable ledger directories"");
            dirsListener.allDisksFull();
        } catch (IOException e) {
            LOG.error(""Exception flushing ledgers"", e);
        }
    }
{code}

-Rakesh","13/May/13 09:09;ikelly;New patch addresses all comments but the last. I don't quite understand what you're suggesting with this. allDisksFull never throws exceptions, so even if zk has gone away, it won't affect the execution path.","13/May/13 09:41;hadoopqa;Testing JIRA BOOKKEEPER-610


Patch [0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch|https://issues.apache.org/jira/secure/attachment/12582903/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch] downloaded at Mon May 13 09:11:07 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 846
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/338/","13/May/13 17:46;rakeshr;bq. allDisksFull never throws exceptions, so even if zk has gone away, it won't affect the execution path.

Its trying to mark the bookie as r-o mode using zk. Since zk is already closed, will throw connection exception.
{code}
public void allDisksFull() {
    // Transition to readOnly mode on all disks full
    transitionToReadOnlyMode();
}
{code}","13/May/13 17:47;hustlmsp;I don't see any strong benefits using an executor. One downside that I could see is that using an executor, you could not actually stop scheduling the checkpointing tasks when a bookie encountered critical exceptions, you silenced the exceptions.

I prefer the original implementation, since it makes the flow clearer than using an executor.

{code}
+        executor.scheduleAtFixedRate(new Runnable() {
+                public void run() {
+                    try {
+                        synchronized (suspensionLock) {
+                            while (suspended) {
+                                try {
+                                    suspensionLock.wait();
+                                } catch (InterruptedException e) {
+                                    Thread.currentThread().interrupt();
+                                    continue;
+                                }
+                            }
+                        }
+                        checkpoint(checkpointSource.newCheckpoint());
+                    } catch (Throwable t) {
+                        LOG.error(""Exception in SyncThread"", t);
+                        dirsListener.fatalError();
+                    }
+                }
+            }, flushInterval, flushInterval, TimeUnit.MILLISECONDS);
{code}

Another problem in your exception handling is a bit difference from the original implementation and these exceptions handling are also hidden from the ledger dirs listener. it was a bit difficult to find an issue, especially for the cases, e.g. shutting down.

{code}
+        } catch (IOException e) {
+            LOG.error(""Exception flushing ledgers"", e);
{code}

why you just log exceptions when caught IOException.

","14/May/13 08:55;ikelly;{quote}
Its trying to mark the bookie as r-o mode using zk. Since zk is already closed, will throw connection exception.
{quote}
[~rakeshr] Unless the exception is a runtime exception, it's not getting past allDisksFull() as allDisksFull throws nothing.

{quote}
One downside that I could see is that using an executor, you could not actually stop scheduling the checkpointing tasks when a bookie encountered critical exceptions, you silenced the exceptions{quote}
When a fatal exception occurs, the bookie calls shutdown on the sync thread, which calls shutdown on the executor. This stops any new checkpoint tasks being scheduled.

{quote}
I prefer the original implementation, since it makes the flow clearer 
{quote}
Of course this is fully subjective, but I completely disagree. The original code has a bunch of boolean flags which control the flow through the #checkpoint() and #run() methods, 'running', 'flushFailed', 'flushing'. If you get a stacktrace from that code, you can't see that the values of these flags are, and therefore it's hard to see what path has lead up to the current stacktrace.

{quote}
Another problem in your exception handling is a bit difference from the original implementation and these exceptions handling are also hidden from the ledger dirs listener. it was a bit difficult to find an issue, especially for the cases, e.g. shutting down. {quote}
Ah, there is a change in the exception handling i missed. Will fix.","14/May/13 11:41;hadoopqa;Testing JIRA BOOKKEEPER-610


Patch [0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch|https://issues.apache.org/jira/secure/attachment/12583102/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch] downloaded at Tue May 14 11:10:04 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 846
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/339/","14/May/13 16:55;ikelly;In fact, the current SyncThread implementation doesn't necessarily run flush on shutdown. Most likely it will not be called. The only time flush can be called is if shutdown() is called between the flushing.compareAndSet and the call to checkpoint. Otherwise it will break out of the thread.","15/May/13 01:36;hustlmsp;{code}
When a fatal exception occurs, the bookie calls shutdown on the sync thread, which calls shutdown on the executor. This stops any new checkpoint tasks being scheduled.
{code}

this would be a deadlock when shutting down, a executor task is running to shutdown bookie and the shutdown process needs to shutdown executor itself, which needs to wait until task is finished. There was a bug before related to this issue.

in original implementation, it is easy to figure out what happened when you got the stacktrace, even it used boolean flag, since the stacktrace would show different branches of the code that it executed. it is not bad as you said.

I don't feel strongly about this part. If the comment could be addressed and other people has +1 on it, I am OK with that.","16/May/13 03:18;rakeshr;[~ikelly] oh, seems that I don't explain clearly at my previous comment.

Assume bookie is shutting down and invoked syncThread.shutdown(). Say ledgerStorage.flush(); throws NoWritableLedgerDirException, now this would
call dirsListener.allDisksFull();. Here it would do zk calls to Bookie#transitionToReadOnlyMode(), since zk is closed previosly, would get the following KeeperException. On KeeperException, we have logic to Bookie#triggerBookieshutdown() and this would again call Bookie.this.shutdown() on a new Thread and enters to deadlock situation.


{code}
org.apache.zookeeper.KeeperException$SessionExpiredException: KeeperErrorCode = Session expired for 
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:127)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
	at org.apache.zookeeper.ZooKeeper.exists(ZooKeeper.java:1021)
	at org.apache.zookeeper.ZooKeeper.exists(ZooKeeper.java:1049)
{code}

Bookie#transitionToReadOnlyMode() exception handling.
{code}
       } catch (KeeperException e) {
            LOG.error(""Error in transition to ReadOnly Mode.""
                    + "" Shutting down"", e);
            triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);
            return;
        } 
{code}

{code}
    void triggerBookieShutdown(final int exitCode) {
        Thread shutdownThread = new Thread() {
            public void run() {
                Bookie.this.shutdown(exitCode);
            }
        };
        shutdownThread.start();
        try {
            shutdownThread.join();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            LOG.debug(""InterruptedException while waiting for shutdown. Not a problem!!"");
        }
    }
{code}","16/May/13 14:23;ikelly;The new patch addresses the shutdown deadlock. Shutdown is on the SyncThread is only ever called from the bookie. If it is called from a bookie callback (such as in the listener) it goes through triggerBookieShutdown(), which spawns a separate thread to do it. I've changed triggerBookieShutdown to start the thread, but not to join it. joining the new thread makes no sense. You are effectively calling shutdown() directly if you join the thread. The thread will clean up after itself once run is finished.

I also changed the order of cleanup in shutdown to match the dependencies between the components. I don't close zk until everything that uses it is also shutdown. Finally, i've put a check in transitionToReadOnlyMode to only do so if the bookie is not shutting down.","16/May/13 15:09;hadoopqa;Testing JIRA BOOKKEEPER-610


Patch [0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch|https://issues.apache.org/jira/secure/attachment/12583486/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch] downloaded at Thu May 16 14:21:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/342/",17/May/13 11:00;ikelly;Last patch had some synchronization issues. Fixed.,"17/May/13 11:31;hadoopqa;Testing JIRA BOOKKEEPER-610


Patch [0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch|https://issues.apache.org/jira/secure/attachment/12583642/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch] downloaded at Fri May 17 11:01:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 846
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/343/","20/May/13 18:16;rakeshr;Thanks Ivan. 
Latest patch looks fine, +1 from me.",23/May/13 07:51;ikelly;I'll submit this friday(23rd) if there are no objections.,"23/May/13 17:36;hustlmsp;you removed #join, which might cause spawning lots of threads to shutdown bookies at a higher add throughput encountering NoWritableLedgerDir. I don't know what is the side effects. since this is a minor change not blocking other tasks, I would suggest holding pushing it. ",24/May/13 17:37;ikelly;Added a check so that triggerShutdown can only be called once.,"24/May/13 19:40;hadoopqa;Testing JIRA BOOKKEEPER-610


Patch [0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch|https://issues.apache.org/jira/secure/attachment/12584726/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch] downloaded at Fri May 24 19:09:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 846
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/346/","15/Jun/13 00:31;hadoopqa;Testing JIRA BOOKKEEPER-610


Patch [0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch|https://issues.apache.org/jira/secure/attachment/12584726/0001-BOOKKEEPER-610-Make-SyncThread-use-an-executor.patch] downloaded at Sat Jun 15 00:04:32 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 852
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/371/",20/Jul/13 18:04;hustlmsp;+1 for the patch. committing ,20/Jul/13 18:06;hustlmsp;committed as r1505175. thanks Ivan.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
shouldClaim flag isn't cleared for hedwig multiplex java client,BOOKKEEPER-600,12641093,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,05/Apr/13 18:37,14/Jul/13 23:25,13/Mar/19 22:16,14/Jul/13 22:56,4.2.0,4.2.1,4.2.2,4.3.0,hedwig-client,,,0,,"shouldClaim flag isn't cleared when resubscribing in multiplex java client. so it would continue claiming topic ownership in one hub, which is bad for load balancing.",,,,,,,,,,,,,,,,07/Jul/13 01:03;hustlmsp;BOOKKEEPER-600.diff;https://issues.apache.org/jira/secure/attachment/12591099/BOOKKEEPER-600.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-07 02:37:28.021,,,no_permission,,,,,,,,,,,,,321509,,,Sun Jul 14 23:25:53 UTC 2013,,,,,,0|i1jh13:,321854,,,,,,,,07/Jul/13 01:03;hustlmsp;clear shouldClaim flag when resubscribing.,"07/Jul/13 02:37;hadoopqa;Testing JIRA BOOKKEEPER-600


Patch [BOOKKEEPER-600.diff|https://issues.apache.org/jira/secure/attachment/12591099/BOOKKEEPER-600.diff] downloaded at Sun Jul  7 02:10:45 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/415/","12/Jul/13 23:17;fpj;+1, looks good to me.",14/Jul/13 22:56;fpj;Trunk committed revision 1503075.,14/Jul/13 23:03;fpj;Branch 4.2 committed revision 1503077.,"14/Jul/13 23:25;hudson;SUCCESS: Integrated in bookkeeper-trunk #283 (See [https://builds.apache.org/job/bookkeeper-trunk/283/])
BOOKKEEPER-600: shouldClaim flag isn't cleared for hedwig multiplex java client (sijie via fpj) (fpj: rev 1503075)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
readahead cache size isn't updated correctly ,BOOKKEEPER-601,12641095,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,05/Apr/13 18:39,13/Jul/13 15:55,13/Mar/19 22:16,13/Jul/13 15:24,4.2.0,4.2.1,4.2.2,4.3.0,hedwig-server,,,0,,we should update cache size only when first time adding message to a cache stub.,,,,,,,,,,,,,,,,07/Jul/13 01:09;hustlmsp;BOOKKEEPER-601.diff;https://issues.apache.org/jira/secure/attachment/12591100/BOOKKEEPER-601.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-07 02:10:36.081,,,no_permission,,,,,,,,,,,,,321511,,,Sat Jul 13 15:55:40 UTC 2013,,,,,,0|i1jh1j:,321856,,,,,,,,"07/Jul/13 02:10;hadoopqa;Testing JIRA BOOKKEEPER-601


Patch [BOOKKEEPER-601.diff|https://issues.apache.org/jira/secure/attachment/12591100/BOOKKEEPER-601.diff] downloaded at Sun Jul  7 01:43:51 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/414/","13/Jul/13 15:24;fpj;+1, thanks sijie. Trunk committed revision 1502803.",13/Jul/13 15:52;fpj;Branch 4.2 committed revision 1502806.,"13/Jul/13 15:55;hudson;SUCCESS: Integrated in bookkeeper-trunk #281 (See [https://builds.apache.org/job/bookkeeper-trunk/281/])
BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj) (fpj: rev 1502803)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in RackawareEnsemblePlacementPolicy when a bookie is removed from available list,BOOKKEEPER-633,12654694,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,25/Jun/13 09:42,26/Jun/13 02:20,13/Mar/19 22:16,26/Jun/13 01:35,4.3.0,,4.3.0,,bookkeeper-client,,,0,,"Got below exception while running one of the tests from TestReplicationWorker

{noformat}2013-06-25 15:09:28,546 - ERROR - [main-EventThread:ClientCnxn$EventThread@623] - Caught unexpected throwable
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at com.google.common.collect.Iterators$8.computeNext(Iterators.java:735)
	at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143)
	at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138)
	at org.apache.bookkeeper.client.RackawareEnsemblePlacementPolicy.onClusterChanged(RackawareEnsemblePlacementPolicy.java:380)
	at org.apache.bookkeeper.client.BookieWatcher.processResult(BookieWatcher.java:135)
	at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:591)
	at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497){noformat}",,,,,,,,,,,,,,,,25/Jun/13 13:32;vinayrpet;BOOKKEEPER-633.patch;https://issues.apache.org/jira/secure/attachment/12589603/BOOKKEEPER-633.patch,25/Jun/13 10:34;vinayrpet;BOOKKEEPER-633.patch;https://issues.apache.org/jira/secure/attachment/12589583/BOOKKEEPER-633.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-06-25 11:37:29.9,,,no_permission,,,,,,,,,,,,,334971,,,Wed Jun 26 02:20:19 UTC 2013,,,,,,0|i1ls53:,335295,,,,,,,,25/Jun/13 10:34;vinayrpet;Attaching a simple patch with test,"25/Jun/13 11:37;hadoopqa;Testing JIRA BOOKKEEPER-633


Patch [BOOKKEEPER-633.patch|https://issues.apache.org/jira/secure/attachment/12589583/BOOKKEEPER-633.patch] downloaded at Tue Jun 25 11:11:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 851
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/383/","25/Jun/13 13:23;ikelly;+1 for the patch as is. It would be cleaner to use the immutableCopy() method of SetView though, to make it explicit that these sets won't be modified.

{code}
ImmutableSet<InetSocketAddress> leftBookies = Sets.difference(oldBookieSet, writableBookies).immutableCopy();
{code}",25/Jun/13 13:27;vinayrpet;Thanks Ivan for {{immutableCopy()}}. I will try that only. :),25/Jun/13 13:32;vinayrpet;Here is the updated patch,"25/Jun/13 13:37;ikelly;Great, thanks. I'll wait for jenkins to run, then push it in.","25/Jun/13 14:21;hadoopqa;Testing JIRA BOOKKEEPER-633


Patch [BOOKKEEPER-633.patch|https://issues.apache.org/jira/secure/attachment/12589603/BOOKKEEPER-633.patch] downloaded at Tue Jun 25 13:55:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 851
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/385/","26/Jun/13 01:35;hustlmsp;committed as r1496706.

thanks Vinay, thank Ivan for reviewing.","26/Jun/13 02:20;hudson;Integrated in bookkeeper-trunk #259 (See [https://builds.apache.org/job/bookkeeper-trunk/259/])
    BOOKKEEPER-633: ConcurrentModificationException in RackawareEnsemblePlacementPolicy when a bookie is removed from available list (vinay via sijie) (Revision 1496706)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry.,BOOKKEEPER-623,12652319,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,12/Jun/13 04:45,26/Jun/13 01:55,13/Mar/19 22:16,26/Jun/13 01:27,4.2.1,4.3.0,4.2.2,4.3.0,bookkeeper-server,,,0,,"With the almost same testcase mentioned in the BOOKKEEPER-584, Ledger metadata is getting added with extra segment during failure handling of bookies along with fencing. 

Only difference in the testcase is .
1. Before bookie failures some entries were already written
2. And after bookies failed ( First bookie will throw LedgerFenced/Unauthorized exception, and second bookie is slow/dead bookie ), Number of entries written asynchrounously is n*ensembleSize+1

Note that, Unauthorized/FencedException callback comes first, then other bookie failure callback comes.

I will attach a TestCase along with patch for this shortly. Testcase is modified version of attached testcase in BOOKKEEPER-584
",,,,,,,,,,,,,,,,20/Jun/13 12:56;vinayrpet;BOOKKEEPER-623.patch;https://issues.apache.org/jira/secure/attachment/12588840/BOOKKEEPER-623.patch,20/Jun/13 10:22;vinayrpet;BOOKKEEPER-623.patch;https://issues.apache.org/jira/secure/attachment/12588815/BOOKKEEPER-623.patch,19/Jun/13 12:31;vinayrpet;BOOKKEEPER-623.patch;https://issues.apache.org/jira/secure/attachment/12588585/BOOKKEEPER-623.patch,19/Jun/13 11:03;vinayrpet;BOOKKEEPER-623.patch;https://issues.apache.org/jira/secure/attachment/12588571/BOOKKEEPER-623.patch,12/Jun/13 06:39;vinayrpet;BOOKKEEPER-623.patch;https://issues.apache.org/jira/secure/attachment/12587385/BOOKKEEPER-623.patch,12/Jun/13 05:12;vinayrpet;BOOKKEEPER-623.patch;https://issues.apache.org/jira/secure/attachment/12587370/BOOKKEEPER-623.patch,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2013-06-12 05:34:34.172,,,no_permission,,,,,,,,,,,,,332643,,,Wed Jun 26 01:55:47 UTC 2013,,,,,,0|i1ldu7:,332972,,,,,,,,"12/Jun/13 04:48;vinayrpet;Corrupted metadata will look like this

{noformat}BookieMetadataFormatVersion	2
quorumSize: 3
ensembleSize: 3
length: 56
lastEntryId: 9
state: CLOSED
segment {
  ensembleMember: ""xx.xx.xx.154:15002""
  ensembleMember: ""xx.xx.xx.154:15004""
  ensembleMember: ""xx.xx.xx.154:15001""
  firstEntryId: 0
}
segment {
  ensembleMember: ""xx.xx.xx.154:15002""
  ensembleMember: ""xx.xx.xx.154:15005""
  ensembleMember: ""xx.xx.xx.154:15001""
  firstEntryId: 10
}
digestType: CRC32
password: """"
ackQuorumSize: 3{noformat}

here ledger closed with lastEntryId 9, but still one more segment is present with firstEntryId 10. And during autorecovery, bookie will try to read this entry and fails.",12/Jun/13 05:12;vinayrpet;Patch for Trunk,"12/Jun/13 05:34;umamaheswararao;I am back now :-)

Looks like good catch Vinay.
Just a note about customer impact because of this issue: Due to this many logs getting genrated and keep auto-recovery failing",12/Jun/13 05:45;hustlmsp;BOOKKEEPER-580 should fix this.,"12/Jun/13 05:49;umamaheswararao;I think Yes, Sijie already handled this case in BOOKKEEPER-580.
Vinay, do you mind verifying with that patch once?",12/Jun/13 05:49;umamaheswararao;Thanks Sijie for pointing that issue.,"12/Jun/13 06:22;vinayrpet;BOOKKEEPER-580 will not solve the current issue.
It will just avoid changes inside the {{handleUnrecoverableErrorDuringAdd(..)}} proposed in the patch.
","12/Jun/13 06:30;umamaheswararao;From Vinay Analysis: When we get failure response from one BK, we are changing the ensemble unconditionally, whther that is already closed or not. He is adding closed check in BK failure call back also.
I think locks should be consistent as current close check is under metadata lock and where asyncCloseInternal works under LedgerHandle lock.","12/Jun/13 06:38;vinayrpet;Attaching the latest patch.. 
Made locks consistent. Using LedgerHandle lock while updating metadata also.","12/Jun/13 06:54;hustlmsp;first of all, I don't think the fix addresses your issue described. in this case, if entry 10 has auth failure and the ledger closed in entry 9. so when the ledger is opened to read, we just could access entries until 9. the semantic is correct and consistent. the extra segment doesn't affect the semantic of a closed ledger. so it is a auto-recovery issue not an error handling issue here.

second, the segment is added when changing ensemble before closing. so how the close checking avoid adding extra segment? third, I don't think you need to add metadata.isClosed checking, since any zookeeper update is conditional and LedgerMetadata#resolveConflict already check if the metadata is Closed or not. so I am doubting how your test case reproduce your comment. Could you make it clear?

","12/Jun/13 06:58;hadoopqa;Testing JIRA BOOKKEEPER-623


Patch [BOOKKEEPER-623.patch|https://issues.apache.org/jira/secure/attachment/12587370/BOOKKEEPER-623.patch] downloaded at Wed Jun 12 06:32:52 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 843
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/355/","12/Jun/13 07:07;vinayrpet;bq. the extra segment doesn't affect the semantic of a closed ledger. so it is a auto-recovery issue not an error handling issue here.
Agree.

bq. second, the segment is added when changing ensemble before closing.
  Here change of ensemble is happening after the ledger is closed. because Fenced/Unauthorized callback comes first and makes the ledger closed. Then BookieFailure callback comes and try to add the ensemble.

bq. third, I don't think you need to add metadata.isClosed checking, since any zookeeper update is conditional and LedgerMetadata#resolveConflict already check if the metadata is Closed or not.
Resolve conflict might have come while handling the callbacks for LegerFenced/Unauthorized exceptions. But it will be resolved and metadata will be updated at that time. Later when handling bookie failures in {{LedgerHandle#handleBookieFailure(..)}} no conflicts will come, because all the later updates (ensemble change) will happen on the same instance of metadata which is already resolved the conflict, so it will have the latest zookeeper version and state. So obviously no check will happen before adding extra ensemble.","12/Jun/13 08:59;hadoopqa;Testing JIRA BOOKKEEPER-623


Patch [BOOKKEEPER-623.patch|https://issues.apache.org/jira/secure/attachment/12587385/BOOKKEEPER-623.patch] downloaded at Wed Jun 12 08:33:08 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 843
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/357/","12/Jun/13 18:18;hustlmsp;vinay, thanks for explanation. but you still can't avoid adding extra segment if handling failure response came before auth failure. and also, another case, an ensemble change happened first and bring an unauthed bookie in, the extra segment would still be added to the ledger metadata.

so a bunch of cases would introduce extra segment in closed state, which could not be avoided. so I don't see the value to avoid adding extra segments in a closed ledger, since lastEntryId already defined the boundary. we definitely should fix auto-recovery issue rather than this.","14/Jun/13 22:42;hadoopqa;Testing JIRA BOOKKEEPER-623


Patch [BOOKKEEPER-623.patch|https://issues.apache.org/jira/secure/attachment/12587385/BOOKKEEPER-623.patch] downloaded at Fri Jun 14 22:41:02 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",18/Jun/13 00:36;hustlmsp;cancel the patch since the patch doesn't address the issue as it described.,19/Jun/13 11:03;vinayrpet;Attaching the patch with the fix in LedgerChecker,"19/Jun/13 12:07;hadoopqa;Testing JIRA BOOKKEEPER-623


Patch [BOOKKEEPER-623.patch|https://issues.apache.org/jira/secure/attachment/12588571/BOOKKEEPER-623.patch] downloaded at Wed Jun 19 11:41:22 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/375/","19/Jun/13 13:09;hadoopqa;Testing JIRA BOOKKEEPER-623


Patch [BOOKKEEPER-623.patch|https://issues.apache.org/jira/secure/attachment/12588585/BOOKKEEPER-623.patch] downloaded at Wed Jun 19 12:42:56 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/378/","20/Jun/13 03:32;hustlmsp;the check could be simple

curEntryId != null && !(lh.getLedgerMetadata().isClosed() && lh.getLastAddConfirmed() < curEntryId)

right?","20/Jun/13 10:22;vinayrpet;Yes! You are right [~hustlmsp]. 

Uploading the latest patch with the change","20/Jun/13 10:57;hadoopqa;Testing JIRA BOOKKEEPER-623


Patch [BOOKKEEPER-623.patch|https://issues.apache.org/jira/secure/attachment/12588815/BOOKKEEPER-623.patch] downloaded at Thu Jun 20 10:31:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 1 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/379/",20/Jun/13 12:56;vinayrpet;Removed the trailing space,"20/Jun/13 13:27;hadoopqa;Testing JIRA BOOKKEEPER-623


Patch [BOOKKEEPER-623.patch|https://issues.apache.org/jira/secure/attachment/12588840/BOOKKEEPER-623.patch] downloaded at Thu Jun 20 13:01:21 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/380/","26/Jun/13 01:27;hustlmsp;+1 for the patch.

committed as r1496705. thanks Vinay.",26/Jun/13 01:46;hustlmsp;committed as r1496708 in branch 4.2.,"26/Jun/13 01:55;hudson;Integrated in bookkeeper-trunk #258 (See [https://builds.apache.org/job/bookkeeper-trunk/258/])
    BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie) (Revision 1496705)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper shutdown call from Bookie thread is not shutting down server,BOOKKEEPER-313,12595672,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,23/Jun/12 07:37,24/Jun/13 04:03,13/Mar/19 22:16,21/Jun/13 17:34,4.2.1,,4.2.2,4.3.0,bookkeeper-server,,,0,,"shutdown(..) call from inside Bookie#run() is not shutting down the server.

Bookie thread is waiting to join itself.

Shutdown called from here
{code} if (!shuttingdown) {
            // some error found in journal thread and it quits
            // following add operations to it would hang unit client timeout
            // so we should let bookie server exists
            LOG.error(""Journal manager quits unexpectedly."");
            shutdown(ExitCode.BOOKIE_EXCEPTION);
        }{code}


bookie thread is waiting at *this.join()* in below code
{code}// Shutdown the ZK client
                if(zk != null) zk.close();
                // Shutdown journal
                journal.shutdown();
                this.join();
                syncThread.shutdown();

                // close Ledger Manager{code}",,,,,,,,,,,,,,,,19/Jun/13 11:33;vinayrpet;BOOKKEEPER-313-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12588580/BOOKKEEPER-313-branch-4.2.patch,14/Jun/13 04:43;vinayrpet;BOOKKEEPER-313-branch-4.2.patch;https://issues.apache.org/jira/secure/attachment/12587773/BOOKKEEPER-313-branch-4.2.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-06-07 04:21:54.432,,,no_permission,,,,,,,,,,,,,295937,,,Mon Jun 24 04:03:51 UTC 2013,,,,,,0|i1433j:,231964,,,,,,,,23/Jun/12 09:49;vinayrpet;This is induced in the fix:,23/Jun/12 09:50;vinayrpet;This is induced in the fix BOOKKEEPER-218,"07/Jun/13 04:14;vinayrpet;This issue is very important to fix.
If Journal Thread exits due to some exception, then Bookie will not be shutdown. 
In the latest code, Bookie thread will wait at following location...
{code:java}        shutdownThread.start();
        try {
            shutdownThread.join();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            LOG.debug(""InterruptedException while waiting for shutdown. Not a problem!!"");
        }{code}

There are two alternatives for this issue,, wither we can interrupt and join() Bookie thread, or remove join() call itself in {{Bookie#shutdown()}}. 
Any thoughts?",07/Jun/13 04:21;hustlmsp;BOOKKEEPER-610 has similar fix.,"07/Jun/13 08:53;ikelly;BOOKKEEPER-610 fixes for trunk. For 4.2, we can pull this particular part from BOOKKEEPER-610. I don't want to pull the whole patch though.",07/Jun/13 08:54;ikelly;[~vinayrpet] Do you remember why you closed this jira the first time?,"07/Jun/13 10:26;vinayrpet;Hi Ivan, I didnt close the issue. [~hustlmsp] marked this is as 'Wont Fix', I also didnt observe at that time.
",14/Jun/13 04:43;vinayrpet;Attached the patch extracted from BOOKKEEPER-610 for branch-4.2,"14/Jun/13 05:45;hadoopqa;Testing JIRA BOOKKEEPER-313


Patch [BOOKKEEPER-313-branch-4.2.patch|https://issues.apache.org/jira/secure/attachment/12587773/BOOKKEEPER-313-branch-4.2.patch] downloaded at Fri Jun 14 05:19:02 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 848
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/359/","14/Jun/13 11:53;ikelly;We need a testcase for this. It shouldn't be very difficult, we just need something in the bookie thread to call triggerBookieShutdown","14/Jun/13 22:40;hadoopqa;Testing JIRA BOOKKEEPER-313


Patch [BOOKKEEPER-313-branch-4.2.patch|https://issues.apache.org/jira/secure/attachment/12587773/BOOKKEEPER-313-branch-4.2.patch] downloaded at Fri Jun 14 22:14:44 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 848
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/365/",17/Jun/13 13:29;ikelly;Cancelling until we have a test.,19/Jun/13 11:33;vinayrpet;Attaching the patch with Test,"19/Jun/13 12:33;hadoopqa;Testing JIRA BOOKKEEPER-313


Patch [BOOKKEEPER-313-branch-4.2.patch|https://issues.apache.org/jira/secure/attachment/12588580/BOOKKEEPER-313-branch-4.2.patch] downloaded at Wed Jun 19 12:07:38 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/376/","21/Jun/13 17:34;ikelly;Committed r1495513 to trunk.
Committed r1495514 to branch-4.2.

It turns out since 610 isn't in, this patch applies fine to trunk, so we may as well push it there also.",21/Jun/13 17:35;ikelly;Thanks for the change Vinay.,"21/Jun/13 17:55;hudson;Integrated in bookkeeper-trunk #253 (See [https://builds.apache.org/job/bookkeeper-trunk/253/])
    BOOKKEEPER-313: Bookkeeper shutdown call from Bookie thread is not shutting down server (vinay via ivank) (Revision 1495513)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java
","24/Jun/13 04:03;vinayrpet;Thanks Ivan,",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookie should not create local cookie files if zookeeper is uninitialized,BOOKKEEPER-619,12651377,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,06/Jun/13 16:34,21/Jun/13 17:25,13/Mar/19 22:16,21/Jun/13 16:55,4.2.1,,4.2.2,4.3.0,,,,0,,"If you download a distribution of bookkeeper-4.2.1 and try to start the bookie before initializing zookeeper, then the bookie will fail to start, but write the local cookie files with a null instance id. If you then initialize zookeeper with the ""bin/bookkeeper shell metaformat"", you will not be able to start the bookie as instance id of in zk will not match the null instance id in the bookie files.",,,,,,,,,,,,,,,,06/Jun/13 16:54;ikelly;0001-BOOKKEEPER-619-Bookie-should-not-create-local-cookie.patch;https://issues.apache.org/jira/secure/attachment/12586527/0001-BOOKKEEPER-619-Bookie-should-not-create-local-cookie.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-06 17:26:58.304,,,no_permission,,,,,,,,,,,,,331703,,,Fri Jun 21 17:25:58 UTC 2013,,,,,,0|i1l82v:,332034,,,,,,,,"06/Jun/13 17:26;hadoopqa;Testing JIRA BOOKKEEPER-619


Patch [0001-BOOKKEEPER-619-Bookie-should-not-create-local-cookie.patch|https://issues.apache.org/jira/secure/attachment/12586527/0001-BOOKKEEPER-619-Bookie-should-not-create-local-cookie.patch] downloaded at Thu Jun  6 17:01:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 843
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/353/","14/Jun/13 23:09;hadoopqa;Testing JIRA BOOKKEEPER-619


Patch [0001-BOOKKEEPER-619-Bookie-should-not-create-local-cookie.patch|https://issues.apache.org/jira/secure/attachment/12586527/0001-BOOKKEEPER-619-Bookie-should-not-create-local-cookie.patch] downloaded at Fri Jun 14 22:43:03 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 849
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/367/","18/Jun/13 00:47;hustlmsp;I don't think this would be an issue. when you formatted the metadata, shouldn't you format the local bookie? it is supposed to the logic for a clear consistence instance setup.

for example, if the /ledgers exists before, but the admin didn't run metadata format, so there is no instance id in cookies file. but the bookie failed to start due to other issues, the admin run metadata format again. the bookie would still fail to start since the local bookie files are not consistent with metadata format.

A consistent instance setup you should run local bookie format after metadata format. This is what the format tools give you.","18/Jun/13 09:36;ikelly;It's mostly a usability thing. I've been caught out by this a couple of times and I've seen others caught by it as well. The problem is that you extract the tarball on a server, try to run a bookie without running the format command. This is a mistake, so you run the metaformat. Then you run the bookieformat, and it warns you that you're about to destroy data (i.e. the cookie that was created in the previous run). This is confusing, and awkward. In fact, the only reason you need to run the bookieformat is because the previous run created the cookies. If, on a clean cluster you run metaformat and then just start the bookie, you have the same effect.

The purpose this this patch is to avoid this confusing situation. If you run a bookie against a nonformatted metadata, it doesn't put up any new barriers to running it again once metadata is formatted.","20/Jun/13 03:45;hustlmsp;in general, it is good to have the checking. I agreed.

but the existence of ledgerRootPath doesn't mean the metadata is formatted. for example, in a shared zookeeper environment, the ledgerRootPath might be provided before bookkeeper initialized its instance. that's why I don't think the patch is necessary, since the best guideline is when you format the metadata instance, you'd better to format the bookies, no matter the bookie is non-formatted, formatted from previous instance, or partial-formatted due to incorrect steps.

anyway +1 for this patch.","21/Jun/13 16:32;ikelly;{quote}but the existence of ledgerRootPath doesn't mean the metadata is formatted{quote}
It may do. If you initialized your cluster with a bookkeeper version before we added metaformat, then ledgerRootPath existence effectively meant that metadata was formatted. If we weren't maintaining this behaviour then we could refuse to write anything on the bookie if instanceid was null. We are maintaining it though :/

I'll push in the patch. Thanks for reviewing.","21/Jun/13 16:55;ikelly;Committed r1495508 to trunk.
Committed r1495510 to branch-4.2.","21/Jun/13 17:25;hudson;Integrated in bookkeeper-trunk #252 (See [https://builds.apache.org/job/bookkeeper-trunk/252/])
    BOOKKEEPER-619: Bookie should not create local cookie files if zookeeper is uninitialized (ivank) (Revision 1495508)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BOOKIE_EXTRA_OPTS are added twice,BOOKKEEPER-626,12652808,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,14/Jun/13 05:40,17/Jun/13 03:53,13/Mar/19 22:16,15/Jun/13 14:58,4.2.1,4.3.0,4.2.2,4.3.0,,,,0,,"BOOKIE_EXTRA_OPTS are added twice to JVM Opts.

It will not create problem for usual options like -Xmx, -Xms, etc.

But for Debug options (-Xdebug) we can specify only once. In this case it will create problems.",,,,,,,,,,,,,,,,14/Jun/13 05:47;vinayrpet;BOOKKEEPER-626.patch;https://issues.apache.org/jira/secure/attachment/12587776/BOOKKEEPER-626.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-14 16:32:27.802,,,no_permission,,,,,,,,,,,,,333131,,,Sat Jun 15 15:25:38 UTC 2013,,,,,,0|i1lguf:,333459,,,,,,,,14/Jun/13 05:49;vinayrpet;Submitting the simple patch.,"14/Jun/13 16:32;hadoopqa;Testing JIRA BOOKKEEPER-626


Patch [BOOKKEEPER-626.patch|https://issues.apache.org/jira/secure/attachment/12587776/BOOKKEEPER-626.patch] downloaded at Fri Jun 14 16:06:18 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 848
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/360/","14/Jun/13 22:14;hadoopqa;Testing JIRA BOOKKEEPER-626


Patch [BOOKKEEPER-626.patch|https://issues.apache.org/jira/secure/attachment/12587776/BOOKKEEPER-626.patch] downloaded at Fri Jun 14 21:48:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 848
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/364/","15/Jun/13 14:58;fpj;+1, thanks, Vinay.

Trunk: Committed revision 1493373.
4.2 branch: Committed revision 1493375.","15/Jun/13 15:25;hudson;Integrated in bookkeeper-trunk #243 (See [https://builds.apache.org/job/bookkeeper-trunk/243/])
    BOOKKEEPER-626: BOOKIE_EXTRA_OPTS are added twice (vinay via fpj) (Revision 1493373)

     Result = SUCCESS
fpj : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieFailureTest uses sync/wait()/notify() incorrectly,BOOKKEEPER-577,12634164,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,26/Feb/13 14:36,10/Jun/13 08:30,13/Mar/19 22:16,07/May/13 19:49,,,4.2.2,4.3.0,,,,0,,"This makes it susceptible to spurious wakeup issues, which seem to hit very regularly on my laptop.",,,,,,,,,,,,,,,,06/May/13 13:14;ikelly;0001-BOOKKEEPER-577-BookieFailureTest-uses-sync-wait-noti.patch;https://issues.apache.org/jira/secure/attachment/12581882/0001-BOOKKEEPER-577-BookieFailureTest-uses-sync-wait-noti.patch,26/Feb/13 14:49;ikelly;0001-BOOKKEEPER-577-BookieFailureTest-uses-sync-wait-noti.patch;https://issues.apache.org/jira/secure/attachment/12570984/0001-BOOKKEEPER-577-BookieFailureTest-uses-sync-wait-noti.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-03-08 18:24:18.35,,,no_permission,,,,,,,,,,,,,314657,,,Mon Jun 10 08:30:23 UTC 2013,,,,,,0|i1iar3:,315001,,,,,,,,"08/Mar/13 18:24;fpj;I think it is there because we expected sync.value to be true after a second. But, I agree with you that it is a little shaky because the while loop around it is there to keep trying. However, if you move the assertion in the way you're proposing, the assertion will trivially hold. The while loop will only exit if sync.value is true.","02/Apr/13 14:30;ikelly;The assertion will should always hold. Otherwise the failureOccurred assertion will trigger. The while loop will exit in one way or another if the callback has been triggered. The movement of the assertion, while redundant is the correct way to check this. We shouldn't have assertions dependent on an action completing within a small time window in tests which have nothing to do with timeouts.","04/May/13 20:52;fpj;I'm sorry for taking some time to respond, I missed that you have added a comment here. 

I'm not sure I get your point. This assertion:

{noformat}
assertTrue(""Haven't received entries"", sync.value);
{noformat}

will always hold after the while loop, otherwise it will keep looping. What's the point of having the assertion after the loop then? I'm thinking that we should perhaps just remove that assertion altogether instead of moving it.","06/May/13 13:14;ikelly;Actually, a better solution is to get rid of the loop. If we haven't received a response in 10 seconds we can assume we have failed.","06/May/13 13:19;fpj;Sure, this is good for me, +1.","07/May/13 08:13;hadoopqa;Testing JIRA BOOKKEEPER-577


Patch [0001-BOOKKEEPER-577-BookieFailureTest-uses-sync-wait-noti.patch|https://issues.apache.org/jira/secure/attachment/12581882/0001-BOOKKEEPER-577-BookieFailureTest-uses-sync-wait-noti.patch] downloaded at Tue May  7 07:43:18 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 836
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/333/","07/May/13 19:49;fpj;Committed revision 1480051. Thanks, Ivan.","07/May/13 20:29;hudson;Integrated in bookkeeper-trunk #197 (See [https://builds.apache.org/job/bookkeeper-trunk/197/])
    BOOKkEEPER-577: BookieFailureTest uses sync/wait()/notify() incorrectly (ivank via fpj) (Revision 1480051)

     Result = SUCCESS",10/Jun/13 08:30;ikelly;Committed revision 1491372 in branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support Boost 1.53 for Hedwig Cpp Client,BOOKKEEPER-603,12641289,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,jiannan,jiannan,jiannan,08/Apr/13 02:39,07/Jun/13 17:00,13/Mar/19 22:16,03/Jun/13 11:04,4.2.0,4.2.1,4.2.2,4.3.0,hedwig-client,,,0,,"The latest boost version 1.53 does not compatible with current hedwig-client cpp code for ""shared_dynamic_cast"" function is moved out of shared_ptr.hpp at this release. Boost 1.52 and before version is ok.

FYI: https://bitbucket.org/osrf/gazebo/issue/581/boost-shared_-_cast-are-deprecated-removed",,,,,,,,,,,,,,,,02/Jun/13 07:42;jiannan;BOOKKEEPER-603.patch;https://issues.apache.org/jira/secure/attachment/12585749/BOOKKEEPER-603.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-02 08:27:02.056,,,no_permission,,,,,,,,,,,,,321705,,,Fri Jun 07 17:00:42 UTC 2013,,,,,,0|i1ji8n:,322050,,,,,,,,"02/Jun/13 07:57;jiannan;You can also review code in github: https://github.com/WangJiannan/bookkeeper/compare/trunk...BOOKKEEPER-603

Changes:
* Support Boost 1.53
* Fix mistake in log4cxx.conf
* DailyRollingFileAppender doesn't have MaxFileSize option","02/Jun/13 08:00;jiannan;When I'm running test, ""PubSubTest.testRandomDelivery"" might cause failure on other test cases. Will fix it in separate JIRA.","02/Jun/13 08:27;hadoopqa;Testing JIRA BOOKKEEPER-603


Patch [BOOKKEEPER-603.patch|https://issues.apache.org/jira/secure/attachment/12585749/BOOKKEEPER-603.patch] downloaded at Sun Jun  2 08:01:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 842
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/350/","03/Jun/13 11:04;ikelly;Committed r1488954. Thanks Sijie.

(The -1 for tests didn't apply to this case as it was a compilation issue)","03/Jun/13 11:04;ikelly;Oops, sorry, I meant to say thanks Jiannan.
","03/Jun/13 11:40;hudson;Integrated in bookkeeper-trunk #227 (See [https://builds.apache.org/job/bookkeeper-trunk/227/])
    BOOKKEEPER-603: Support Boost 1.53 for Hedwig Cpp Client (jiannan via ivank) (Revision 1488954)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/channel.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/data.cpp
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/scripts/log4cxx.conf
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/scripts/server-control.sh
",07/Jun/13 17:00;ikelly;Committed revision 1490727 to branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fails to compile - RESUBSCRIBE_EXCEPTION conflict,BOOKKEEPER-598,12640805,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,farrellee,farrellee,farrellee,04/Apr/13 16:48,07/Jun/13 16:58,13/Mar/19 22:16,07/Apr/13 18:11,4.2.1,,4.2.2,4.3.0,hedwig-client,,,0,,"0. cd hedwig-client/src/main/cpp
1. autoreconf -fi
2. ./configure
3. make

(3) fails with subscriberimpl.cpp:150:48: error: no match for 'operator==' in '(Hedwig::StatusCode)407u == *(const std::type_info*)(*(exception.std::exception::_vptr.exception + -8u))'

The static const RESUBSCRIBE_EXCEPTION is conflicting with an enum from hedwig-client/src/main/cpp/inc/hedwig/protocol.h (line 153 RESUBSCRIBE_EXCEPTION = 407).",Fedora 17 w/ gcc version 4.7.2 20120921,,,,,,,,,,,,,,,04/Apr/13 16:50;farrellee;BOOKKEEPER-598.patch;https://issues.apache.org/jira/secure/attachment/12577006/BOOKKEEPER-598.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-05 12:00:40.185,,,no_permission,,,,,,,,,,,,,321264,,,Fri Jun 07 16:58:08 UTC 2013,,,,,,0|i1jfj3:,321609,,,,,,,,04/Apr/13 16:50;farrellee;Patch to avoid complication issue w/ RESUBSCRIBE_EXCEPTION,"05/Apr/13 12:00;jiannan;I have a try on my new laptop and find the same problem, Matthew's patch works for me. My environment is ""gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)"" with protobuf 2.4.1.

However, it seems I have to explicitly add -lboost_thread somewhere to make the link process happy.

By the way, the newest boost release 1.53 does not compatible with our code since at this release the shared_dynamic_cast is moved out of shared_ptr.hpp. boost-1.52 and before version is ok.","05/Apr/13 17:59;hustlmsp;yes. I think this issue is introduced when fixing BOOKKEEPER-55. the fix is only made in java client, not in cpp client. after that issue, we don't have any fixes on cpp client, so it is difficult to find this issue. I am thinking we need to build cpp client and run its tests on precommit build, otherwise we could not guarantee the quality of cpp client.","05/Apr/13 18:01;hustlmsp;BTW, [~ikelly] [~fpj] could any one of you add [~farrellee] in the contributors list?","05/Apr/13 18:04;hustlmsp;ah, forget my previous comment. looks like I could add him :) ","05/Apr/13 18:41;hadoopqa;Testing JIRA BOOKKEEPER-598


Patch [BOOKKEEPER-598.patch|https://issues.apache.org/jira/secure/attachment/12577006/BOOKKEEPER-598.patch] downloaded at Fri Apr  5 18:10:58 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 833
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/318/","07/Apr/13 18:09;hustlmsp;[~jiannan]

{quote}
By the way, the newest boost release 1.53 does not compatible with our code since at this release the shared_dynamic_cast is moved out of shared_ptr.hpp. boost-1.52 and before version is ok.
{quote}

Could you create a jira to track this? I am going to commit this one.",07/Apr/13 18:11;hustlmsp;committed as r1465438. thanks Matthew Farrellee and Jiannan.,"07/Apr/13 18:46;hudson;Integrated in bookkeeper-trunk #168 (See [https://builds.apache.org/job/bookkeeper-trunk/168/])
    BOOKKEEPER-598: Fails to compile - RESUBSCRIBE_EXCEPTION conflict (Matthew Farrellee via sijie) (Revision 1465438)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp
",08/Apr/13 02:40;jiannan;[~hustlmsp] I've created JIRA BOOKKEEPER-603 for the issue.,08/Apr/13 19:35;hustlmsp;thanks [~jiannan],07/Jun/13 16:58;ikelly;Committed revision 1490725 in branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in PerChannelBookieClient,BOOKKEEPER-599,12640923,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,jiannan,jiannan,jiannan,05/Apr/13 04:25,07/Jun/13 16:51,13/Mar/19 22:16,07/Apr/13 18:07,4.2.0,4.2.1,4.3.0,,bookkeeper-client,,,0,,"When log level is DEBUG, a failure read will cause NPE in PerChannelBookieClient (rr.getData() is null):
{code:java}
void handleReadResponse(BookieProtocol.ReadResponse rr) {
    if (LOG.isDebugEnabled()) {
        LOG.debug(""Got response for read request {} entry length: {}"",
                  rr, rr.getData().readableBytes());
    }
    ...
}
{code}",,,,,,,,,,,,,,,,06/Apr/13 03:56;jiannan;BOOKKEEPER-599.patch;https://issues.apache.org/jira/secure/attachment/12577353/BOOKKEEPER-599.patch,05/Apr/13 04:27;jiannan;BOOKKEEPER-599.patch;https://issues.apache.org/jira/secure/attachment/12577148/BOOKKEEPER-599.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-04-05 05:10:30.374,,,no_permission,,,,,,,,,,,,,321382,,,Sun Apr 07 18:46:27 UTC 2013,,,,,,0|i1jg9b:,321727,,,,,,,,05/Apr/13 04:27;jiannan;Attach a simple fix,"05/Apr/13 05:10;hadoopqa;Testing JIRA BOOKKEEPER-599


Patch [BOOKKEEPER-599.patch|https://issues.apache.org/jira/secure/attachment/12577148/BOOKKEEPER-599.patch] downloaded at Fri Apr  5 04:39:39 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 833
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/314/","05/Apr/13 17:51;hustlmsp;looks good. but since handleResponse is in critical path, could we still put the debug statement under if statement? although {} does magic things, it still evaluates the parameters.  ",06/Apr/13 03:56;jiannan;Update patch follow Sijie's comment.,"06/Apr/13 04:31;hadoopqa;Testing JIRA BOOKKEEPER-599


Patch [BOOKKEEPER-599.patch|https://issues.apache.org/jira/secure/attachment/12577353/BOOKKEEPER-599.patch] downloaded at Sat Apr  6 04:00:57 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 833
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/319/",07/Apr/13 18:07;hustlmsp;thanks Jiannan. committed as r1465437.,"07/Apr/13 18:46;hudson;Integrated in bookkeeper-trunk #168 (See [https://builds.apache.org/job/bookkeeper-trunk/168/])
    BOOKKEEPER-599: NPE in PerChannelBookieClient (jiannan via sijie) (Revision 1465437)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove recursive call in delivery manager,BOOKKEEPER-586,12637903,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,20/Mar/13 06:35,07/Jun/13 09:51,13/Mar/19 22:16,25/Mar/13 15:10,,,4.3.0,,hedwig-server,,,0,,there is a recursive call in fifo delivery manager.,,,,,,,,,,,,,,,,20/Mar/13 06:35;hustlmsp;BOOKKEEPER-586.patch;https://issues.apache.org/jira/secure/attachment/12574496/BOOKKEEPER-586.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-20 08:16:27.261,,,no_permission,,,,,,,,,,,,,318383,,,Mon Mar 25 15:44:06 UTC 2013,,,,,,0|i1ixpz:,318724,,,,,,,,20/Mar/13 06:35;hustlmsp;removed the recursive call in fifo delivery manager.,"20/Mar/13 08:16;hadoopqa;Testing JIRA BOOKKEEPER-586


Patch [BOOKKEEPER-586.patch|https://issues.apache.org/jira/secure/attachment/12574496/BOOKKEEPER-586.patch] downloaded at Wed Mar 20 07:46:19 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 818
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/290/","25/Mar/13 14:32;ikelly;lgtm +1, committing ",25/Mar/13 15:10;ikelly;Committed as r1460709. Thanks Sijie.,"25/Mar/13 15:44;hudson;Integrated in bookkeeper-trunk #152 (See [https://builds.apache.org/job/bookkeeper-trunk/152/])
    BOOKKEEPER-586: Remove recursive call in delivery manager (sijie via ivank) (Revision 1460709)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestSubAfterCloseSub was put in a wrong package,BOOKKEEPER-579,12634359,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,27/Feb/13 05:52,07/Jun/13 08:56,13/Mar/19 22:16,08/Mar/13 23:43,,,4.2.2,4.3.0,hedwig-client,,,0,,TestSubAfterCloseSub is put in wrong package.,,,,,,,,,,,,,,,,27/Feb/13 05:53;hustlmsp;BOOKKEEPER-579.diff;https://issues.apache.org/jira/secure/attachment/12571142/BOOKKEEPER-579.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-27 06:30:56.048,,,no_permission,,,,,,,,,,,,,314852,,,Fri Jun 07 08:56:16 UTC 2013,,,,,,0|i1ibyf:,315196,,,,,,,,27/Feb/13 05:53;hustlmsp;Attach a patch to change it to right package and make a cleanup of the imports.,"27/Feb/13 06:30;hadoopqa;Testing JIRA BOOKKEEPER-579


Patch [BOOKKEEPER-579.diff|https://issues.apache.org/jira/secure/attachment/12571142/BOOKKEEPER-579.diff] downloaded at Wed Feb 27 06:00:45 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/281/",08/Mar/13 23:43;ikelly;Committed r1454625.,"09/Mar/13 00:14;hudson;Integrated in bookkeeper-trunk #131 (See [https://builds.apache.org/job/bookkeeper-trunk/131/])
    BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank) (Revision 1454625)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
",07/Jun/13 08:56;ikelly;Committed as r1490548 in branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix occasional failure in AuditorBookieTest,BOOKKEEPER-559,12629489,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,umamaheswararao,umamaheswararao,28/Jan/13 08:30,07/Jun/13 08:49,13/Mar/19 22:16,05/Mar/13 17:47,4.2.0,,4.2.2,4.3.0,bookkeeper-auto-recovery,,,0,,"Ivan reported this:
I've seen failure in AuditorBookieTest on jenkins, and I think I've
> > also seen it once locally.
> >
> > https://builds.apache.org/job/bookkeeper-trunk/lastCompletedBuild/testReport/

Current, build does not have that failure and so, we can not see from logs as of now. I will check the test code closely and by that time if Jenkins also reports that will help in checking from the trace.",,,,,,,,,,,,,,,,26/Feb/13 17:39;ikelly;0001-BOOKKEEPER-559-Fix-occasional-failure-in-AuditorBook.patch;https://issues.apache.org/jira/secure/attachment/12571008/0001-BOOKKEEPER-559-Fix-occasional-failure-in-AuditorBook.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-31 17:16:23.809,,,no_permission,,,,,,,,,,,,,309985,,,Fri Jun 07 08:49:15 UTC 2013,,,,,,0|i1hhxj:,310330,,,,,,,,"31/Jan/13 12:45;umamaheswararao;I am trying to reproduce this(ran 50 times), but not able to reproduce.
Ivan, by any chance did you remember the failed test case name?

My bad, I forgot to copy the failure traces when you reported that.
I checked the code, even though they are bit time sensible but they mostly look like reasonable. Let me did into it again.",31/Jan/13 17:16;ikelly;The trace is available at https://builds.apache.org/job/bookkeeper-trunk/71/,"26/Feb/13 17:47;ikelly;This started to repro reliably for me today, so found the root cause. Basically, if the watcher triggered after shutdown, which often happens in the test, as the cluster is being shutdown, it will vote and possibly become auditor.","26/Feb/13 18:20;hadoopqa;Testing JIRA BOOKKEEPER-559


Patch [0001-BOOKKEEPER-559-Fix-occasional-failure-in-AuditorBook.patch|https://issues.apache.org/jira/secure/attachment/12571008/0001-BOOKKEEPER-559-Fix-occasional-failure-in-AuditorBook.patch] downloaded at Tue Feb 26 17:50:29 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/280/",05/Mar/13 17:45;umamaheswararao;Nicely figured out. Thanks Ivan. lgtm +1 on patch,05/Mar/13 17:46;umamaheswararao;I have just committed this to trunk.,"05/Mar/13 18:29;hudson;Integrated in bookkeeper-trunk #127 (See [https://builds.apache.org/job/bookkeeper-trunk/127/])
    BOOKKEEPER-559: Fix occasional failure in AuditorBookieTest. Contributed by Ivan Kelly. (Revision 1452915)

     Result = SUCCESS
umamahesh : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java
",07/Jun/13 08:49;ikelly;Committed to 4.2 branch as r1490544,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieServerMXBean#getServerState makes no sense,BOOKKEEPER-556,12629098,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,24/Jan/13 16:52,06/Jun/13 17:43,13/Mar/19 22:16,09/Feb/13 08:00,,,4.2.2,4.3.0,,,,0,,This got carried over from zookeeper during a copy paste. In ZooKeeper it's used to specify whether a server is standalone or not. This isn't relevant for BookKeeper.,,,,,,,,,,,,,,,,24/Jan/13 18:49;ikelly;0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch;https://issues.apache.org/jira/secure/attachment/12566344/0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch,24/Jan/13 17:18;ikelly;0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch;https://issues.apache.org/jira/secure/attachment/12566329/0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-24 17:50:08.997,,,no_permission,,,,,,,,,,,,,308873,,,Thu Jun 06 17:43:24 UTC 2013,,,,,,0|i1dmj3:,287747,,,,,,,,24/Jan/13 17:18;ikelly;Removed getServerState and more unused junk from the class.,"24/Jan/13 17:50;hadoopqa;Testing JIRA BOOKKEEPER-556


Patch [0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch|https://issues.apache.org/jira/secure/attachment/12566329/0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch] downloaded at Thu Jan 24 17:20:42 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 FINDBUGS{color}
.    {color:red}-1{color} the patch seems to introduce 1 new Findbugs warning(s) in module(s) [bookkeeper-server]
{color:green}+1 TESTS{color}
.    Tests run: 790
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/252/",24/Jan/13 18:49;ikelly;Fix findbug. There was one variable that was unused after the cleanup.,"24/Jan/13 19:42;hadoopqa;Testing JIRA BOOKKEEPER-556


Patch [0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch|https://issues.apache.org/jira/secure/attachment/12566344/0001-BOOKKEEPER-556-BookieServerMXBean-getServerState-mak.patch] downloaded at Thu Jan 24 19:12:57 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 790
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/254/",09/Feb/13 07:58;hustlmsp;lgtm +1.,09/Feb/13 08:00;hustlmsp;committed as r1444340. thanks Ivan.,"09/Feb/13 08:30;hudson;Integrated in bookkeeper-trunk #94 (See [https://builds.apache.org/job/bookkeeper-trunk/94/])
    BOOKKEEPER-556: BookieServerMXBean#getServerState makes no sense (ivank via sijie) (Revision 1444340)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java
","06/Jun/13 17:43;ikelly;Committed revision 1490376, to 4.2 branch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Read from a ReadOnlyBookie fails if index fileinfo is not in ledger cache,BOOKKEEPER-583,12635736,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,vinayrpet,vinayrpet,vinayrpet,07/Mar/13 06:33,06/Jun/13 17:06,13/Mar/19 22:16,25/Mar/13 05:48,4.2.1,,4.2.2,4.3.0,bookkeeper-server,,,0,,"Read from a ReadOnlyBookie fails is the Bookie is restarted after writing a ledger.

i.e. fileInfo for the ledger to be read is not present in the fileInfoCache",,,,,,,,,,,,,,,,21/Mar/13 05:51;vinayrpet;BOOKKEEPER-583.patch;https://issues.apache.org/jira/secure/attachment/12574736/BOOKKEEPER-583.patch,07/Mar/13 06:42;vinayrpet;BOOKKEEPER-583.patch;https://issues.apache.org/jira/secure/attachment/12572492/BOOKKEEPER-583.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-03-07 07:04:01.535,,,no_permission,,,,,,,,,,,,,316228,,,Mon Mar 25 06:29:25 UTC 2013,,,,,,0|i1ikfr:,316571,,,,,,,,07/Mar/13 06:43;vinayrpet;Here is the proposed patch. Please review,"07/Mar/13 07:04;hustlmsp;good catch, thanks Vinay. 

one question, why we need to moveLedgerIndexFile in both getFileInfo and flushLedger? I think we only need to moveLedgerIndexFile when flushLedger. I can't remembered why we need to do it in getFileInfo. so could we simply remove moveLedgerIndexFile calls in getFileInfo?","07/Mar/13 07:20;hadoopqa;Testing JIRA BOOKKEEPER-583


Patch [BOOKKEEPER-583.patch|https://issues.apache.org/jira/secure/attachment/12572492/BOOKKEEPER-583.patch] downloaded at Thu Mar  7 06:50:44 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 3 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 818
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/285/",17/Mar/13 23:35;hustlmsp;cancelled the patch until comments addressed and fixing trailing spaces.,"21/Mar/13 04:30;vinayrpet;Sorry for the late response. 
bq. one question, why we need to moveLedgerIndexFile in both getFileInfo and flushLedger? I think we only need to moveLedgerIndexFile when flushLedger
You are right Sijie, Its needed only in flushledger. A patch for the change will follow soon..",21/Mar/13 05:51;vinayrpet;Attaching the patch,"21/Mar/13 06:22;hadoopqa;Testing JIRA BOOKKEEPER-583


Patch [BOOKKEEPER-583.patch|https://issues.apache.org/jira/secure/attachment/12574736/BOOKKEEPER-583.patch] downloaded at Thu Mar 21 05:52:43 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 819
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/294/",25/Mar/13 05:48;hustlmsp;lgtm +1. ,25/Mar/13 05:48;hustlmsp;committed as r1460524. thanks Vinay,25/Mar/13 06:06;hustlmsp;committed as r1460527 in branch 4.2.,"25/Mar/13 06:29;hudson;Integrated in bookkeeper-trunk #150 (See [https://builds.apache.org/job/bookkeeper-trunk/150/])
    BOOKKEEPER-583: Read from a ReadOnlyBookie fails if index fileinfo is not in ledger cache (vinay via sijie) (Revision 1460524)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BOOKKEEPER-544 breaks hedwig-server/bin/hedwig script,BOOKKEEPER-617,12650616,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,03/Jun/13 11:02,06/Jun/13 17:03,13/Mar/19 22:16,05/Jun/13 09:49,,,4.3.0,,,,,0,,"BOOKKEEPER-544 made hedwig generate a tests jar in hedwig-server/target. When hedwig-server/bin/hedwig tries to find the hedwig-server jar in target, it will find the test jar rather than the main jar.",,,,,,,,,,,,,,,,03/Jun/13 11:03;ikelly;0001-BOOKKEEPER-617-BOOKKEEPER-544-breaks-hedwig-server-b.patch;https://issues.apache.org/jira/secure/attachment/12585834/0001-BOOKKEEPER-617-BOOKKEEPER-544-breaks-hedwig-server-b.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-03 11:37:02.347,,,no_permission,,,,,,,,,,,,,330943,,,Wed Jun 05 10:25:36 UTC 2013,,,,,,0|i1l3en:,331276,,,,,,,,"03/Jun/13 11:37;hadoopqa;Testing JIRA BOOKKEEPER-617


Patch [0001-BOOKKEEPER-617-BOOKKEEPER-544-breaks-hedwig-server-b.patch|https://issues.apache.org/jira/secure/attachment/12585834/0001-BOOKKEEPER-617-BOOKKEEPER-544-breaks-hedwig-server-b.patch] downloaded at Mon Jun  3 11:11:01 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 842
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/351/",05/Jun/13 04:56;hustlmsp;+1.,05/Jun/13 09:49;ikelly;Committed as r1489775. Thanks for the review Sijie.,"05/Jun/13 10:25;hudson;Integrated in bookkeeper-trunk #230 (See [https://builds.apache.org/job/bookkeeper-trunk/230/])
    BOOKKEEPER-617: BOOKKEEPER-544 breaks hedwig-server/bin/hedwig script (ivank) (Revision 1489775)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add flag to output test logs to stdout,BOOKKEEPER-597,12640281,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,02/Apr/13 12:04,02/Apr/13 14:46,13/Mar/19 22:16,02/Apr/13 14:15,,,4.3.0,,,,,0,,"Logs are currently piped to a file. However, if a test is hanging, its useful to get the logs sent to stdout in as they happen, to see where the test is hanging. We should enable this with a mvn profile, instead of requiring the person to edit out the <redirectOutputToFile> flag.",,,,,,,,,,,,,,,,02/Apr/13 12:05;ikelly;0001-BOOKKEEPER-597-Add-flag-to-output-test-logs-to-stdou.patch;https://issues.apache.org/jira/secure/attachment/12576550/0001-BOOKKEEPER-597-Add-flag-to-output-test-logs-to-stdou.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-02 12:57:24.668,,,no_permission,,,,,,,,,,,,,320744,,,Tue Apr 02 14:46:35 UTC 2013,,,,,,0|i1jcan:,321085,,,,,,,,"02/Apr/13 12:06;ikelly;With the attached patch, test output can be sent to stdout by adding -PconsoleTestOutput to the maven command.","02/Apr/13 12:57;jiannan;Patch looks good to me, and test is ok in my dev box.","02/Apr/13 13:25;hadoopqa;Testing JIRA BOOKKEEPER-597


Patch [0001-BOOKKEEPER-597-Add-flag-to-output-test-logs-to-stdou.patch|https://issues.apache.org/jira/secure/attachment/12576550/0001-BOOKKEEPER-597-Add-flag-to-output-test-logs-to-stdou.patch] downloaded at Tue Apr  2 12:54:11 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 827
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/309/","02/Apr/13 14:15;ikelly;Committed r1463555. Thanks for taking a look, Jiannan
","02/Apr/13 14:46;hudson;Integrated in bookkeeper-trunk #162 (See [https://builds.apache.org/job/bookkeeper-trunk/162/])
    BOOKKEEPER-597: Add flag to output test logs to stdout (ivank) (Revision 1463555)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler error showing up badly with jdk 7,BOOKKEEPER-557,12629101,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,24/Jan/13 17:16,25/Mar/13 06:14,13/Mar/19 22:16,25/Mar/13 05:27,,,4.3.0,,,,,0,,"JDK 7 changed the error format, and the version of the maven compiler plugin we use doesn't like it. The fix is to update the maven compiler plugin.",,,,,,,,,,,,,,,,22/Mar/13 18:35;ikelly;0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch;https://issues.apache.org/jira/secure/attachment/12575063/0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch,12/Feb/13 11:30;ikelly;0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch;https://issues.apache.org/jira/secure/attachment/12568964/0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch,24/Jan/13 17:18;ikelly;0003-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch;https://issues.apache.org/jira/secure/attachment/12566328/0003-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2013-01-24 18:19:47.153,,,no_permission,,,,,,,,,,,,,308876,,,Mon Mar 25 06:14:18 UTC 2013,,,,,,0|i1dncf:,287879,,,,,,,,24/Jan/13 17:18;ikelly;one line change.,"24/Jan/13 18:19;hadoopqa;Testing JIRA BOOKKEEPER-557


Patch [0003-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch|https://issues.apache.org/jira/secure/attachment/12566328/0003-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch] downloaded at Thu Jan 24 17:50:19 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:red}-1{color} the patch seems to introduce 16 new javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 790
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/253/","24/Jan/13 18:45;ikelly;The patch is surfacing issues that were already there. I'll fix them next week, as im off tomorrow.",12/Feb/13 11:30;ikelly;Warnings are now errors.,"12/Feb/13 12:01;hadoopqa;Testing JIRA BOOKKEEPER-557


Patch [0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch|https://issues.apache.org/jira/secure/attachment/12568964/0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch] downloaded at Tue Feb 12 11:31:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 19 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 815
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/267/","22/Mar/13 19:11;hadoopqa;Testing JIRA BOOKKEEPER-557


Patch [0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch|https://issues.apache.org/jira/secure/attachment/12575063/0001-BOOKKEEPER-557-Compiler-error-showing-up-badly-with-.patch] downloaded at Fri Mar 22 18:40:43 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 19 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 818
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/300/","25/Mar/13 03:54;hustlmsp;@Ivan you changed getManagerType to getManagerFactoryClass, it would break reading old version factory metadata. could you comment why you changed it?","25/Mar/13 03:57;hustlmsp;ah, I misunderstood it. please ignore my previous comment.

+1 for this patch.",25/Mar/13 05:27;hustlmsp;committed as r1460523. thanks Ivan.,"25/Mar/13 05:59;hudson;Integrated in bookkeeper-trunk #149 (See [https://builds.apache.org/job/bookkeeper-trunk/149/])
    BOOKKEEPER-557: Compiler error showing up badly with jdk 7 (ivank via sijie) (Revision 1460523)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java
* /zookeeper/bookkeeper/trunk/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java
* /zookeeper/bookkeeper/trunk/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java
* /zookeeper/bookkeeper/trunk/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/HChannelHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java
* /zookeeper/bookkeeper/trunk/pom.xml
","25/Mar/13 06:01;jiannan;It's a great job, +1 for this patch. Just one comment: since there are many ""SubscriptionOptions.newBuilder().setCreateOrAttach(CreateOrAttach.XXX).build()"", should we build static instance in somewhere and share them instead of creating new one every time?

By the way, I'm still downloading JDK 7 to verify this patch. Is there any convenient command to check it? I think for further changes on bookkeeper we need to check whether the patch works under JDK 7, so a script to do this job would be very helpful.","25/Mar/13 06:14;hustlmsp;> SubscriptionOptions.newBuilder().setCreateOrAttach(CreateOrAttach.XXX).build()

I don't think we need to build static instance for them. since SubscriptionOptions not only just CreateOrAttach, there are some other options, so how to construct SubscriptionOtpions is up to applications. And most of the changes is for test cases.

> By the way, I'm still downloading JDK 7 to verify this patch. Is there any convenient command to check it?

I think the checking depends on your jdk environment. If the jekins job runs with JDK7, it should check whether the patch works or not. But I am not very sure whether Ivan changed from JDK6 to JDK7, [~ikelly] ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReadOnlyBookieTest hangs on shutdown,BOOKKEEPER-567,12631576,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,09/Feb/13 08:57,19/Feb/13 16:29,13/Mar/19 22:16,19/Feb/13 15:55,,,4.2.1,4.3.0,,,,0,,ReadOnlyBookieTest hangs on shutdown. It occurs when I run bookie tests.,,,,,,,,,,,,,,,,09/Feb/13 08:58;hustlmsp;27376.txt;https://issues.apache.org/jira/secure/attachment/12568696/27376.txt,09/Feb/13 09:32;hustlmsp;BOOKKEEPER-567.patch;https://issues.apache.org/jira/secure/attachment/12568698/BOOKKEEPER-567.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-02-09 10:11:32.251,,,no_permission,,,,,,,,,,,,,312072,,,Tue Feb 19 16:29:07 UTC 2013,,,,,,0|i1husv:,312418,,,,,,,,09/Feb/13 08:58;hustlmsp;attach the jstack.,"09/Feb/13 09:23;hustlmsp;this race condition is triggered when SyncThread tried to shutdown bookie encountering NoWritableLedgerDirException. the sequence is:

1) SyncThread -> transitionToReadOnlyMode -> triggerShutDown
2) triggerShutdown starts a new thread to shutdown bookie. SyncThread joins to wait shutdown thread finished.
3) Shutdown thread tried to call bookie#shutdown -> SyncThread#shutdown.
4) SyncThread#shutdown checked flushing flag and found it was in flushing procedure. it doesn't interrupt SyncThread and just wait.",09/Feb/13 09:32;hustlmsp;attach a patch to clear flushing flag before trigger shutdown.,"09/Feb/13 10:11;hadoopqa;Testing JIRA BOOKKEEPER-567


Patch [BOOKKEEPER-567.patch|https://issues.apache.org/jira/secure/attachment/12568698/BOOKKEEPER-567.patch] downloaded at Sat Feb  9 09:41:13 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 816
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/262/","19/Feb/13 15:50;ikelly;+1

Fix looks good to me. I just ran into this on the 4.2.1 branch also, so committing to both.","19/Feb/13 15:55;ikelly;Committed as r1447772(trunk), r1447774(branch-4.2)","19/Feb/13 16:29;hudson;Integrated in bookkeeper-trunk #111 (See [https://builds.apache.org/job/bookkeeper-trunk/111/])
    BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank) (Revision 1447772)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fd leaking when move ledger index file,BOOKKEEPER-554,12628448,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,hustlmsp,hustlmsp,hustlmsp,20/Jan/13 07:32,13/Feb/13 17:37,13/Mar/19 22:16,12/Feb/13 05:00,4.2.0,,4.2.1,4.3.0,bookkeeper-server,,,0,,"a file info is get when moving ledger index, but it doesn't release after use. so the reference counting for file info stays more than zero, the file channel would never be closed even the file is evicted from ledger cache.",,,,,,,,,,,,,,,,11/Feb/13 13:47;ikelly;0001-BOOKKEEPER-554.patch;https://issues.apache.org/jira/secure/attachment/12568821/0001-BOOKKEEPER-554.patch,20/Jan/13 07:34;hustlmsp;BOOKKEEPER-554.diff;https://issues.apache.org/jira/secure/attachment/12565671/BOOKKEEPER-554.diff,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-20 08:11:09.308,,,no_permission,,,,,,,,,,,,,305602,,,Wed Feb 13 17:37:49 UTC 2013,,,,,,0|i18flb:,257328,,,,,,,,20/Jan/13 07:34;hustlmsp;straightforward patch and add reference counting assert in ledger cache test case.,"20/Jan/13 08:11;hadoopqa;Testing JIRA BOOKKEEPER-554


Patch [BOOKKEEPER-554.diff|https://issues.apache.org/jira/secure/attachment/12565671/BOOKKEEPER-554.diff] downloaded at Sun Jan 20 07:41:38 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 790
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/251/","20/Jan/13 17:06;umamaheswararao;Good catch Sijie!, thanks a lot for noticing it.
+1","06/Feb/13 14:39;ikelly;Fix looks good. Two style comments though. 

# getUseCount should be annotated with @VisibleForTesting
# getFileInfo never returns null, so we don't need to check null != fi in the finally (findbugs 2.5.2 will show this as an error)","08/Feb/13 05:09;hustlmsp;> getFileInfo never returns null,

getFileInfo would throw exception. so we had to check null in finally block.","11/Feb/13 13:47;ikelly;Added @VisibleForTesting annotation. Once latest patch gets +1, ill push it in.","11/Feb/13 14:26;hadoopqa;Testing JIRA BOOKKEEPER-554


Patch [0001-BOOKKEEPER-554.patch|https://issues.apache.org/jira/secure/attachment/12568821/0001-BOOKKEEPER-554.patch] downloaded at Mon Feb 11 13:55:54 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 816
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/265/",12/Feb/13 04:57;hustlmsp;+1 for the new patch. thanks Ivan. will commit it.,12/Feb/13 05:00;hustlmsp;committed as r1445033.,"12/Feb/13 05:30;hudson;Integrated in bookkeeper-trunk #98 (See [https://builds.apache.org/job/bookkeeper-trunk/98/])
    BOOKKEEPER-554: fd leaking when move ledger index file (sijie, ivank via sijie) (Revision 1445033)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java
",13/Feb/13 17:37;ikelly;Committed to 4.2 branch as 1445763,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Findbugs reports errors with openjdk,BOOKKEEPER-561,12630916,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,ikelly,ikelly,05/Feb/13 17:53,08/Feb/13 18:45,13/Mar/19 22:16,08/Feb/13 18:09,,,4.3.0,,,,,0,,"Findbugs reports a lot of error about a null pointer dereference for System.out

http://sourceforge.net/p/findbugs/bugs/918/?page=0

The solution is to upgrade to a newer findbugs, but this is a bit stricter, so there's some fixes needed. This jira is for the upgrade and those fixes, and also to fix/exclude the errors introduced by BOOKKEEPER-312.",,,,,,,,,,,,,,,,06/Feb/13 14:33;ikelly;0001-BOOKKEEPER-561-Fixed-all-findbugs.patch;https://issues.apache.org/jira/secure/attachment/12568227/0001-BOOKKEEPER-561-Fixed-all-findbugs.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-06 15:11:24.742,,,no_permission,,,,,,,,,,,,,311412,,,Fri Feb 08 18:45:15 UTC 2013,,,,,,0|i1hqqf:,311758,,,,,,,,"06/Feb/13 14:33;ikelly;Patch upgrades findbugs to 2.5.2 and fixes issues. Almost all bugs are due to:
# Charset not being specified when converting between String and byte[]
# missing default: in switch

I've also added a findbugsExclude for the bugs in hedwig-client-jms which cannot be fixed (such as those in generated code, and those required to match JMS spec).","06/Feb/13 15:11;hadoopqa;Testing JIRA BOOKKEEPER-561


Patch [0001-BOOKKEEPER-561-Fixed-all-findbugs.patch|https://issues.apache.org/jira/secure/attachment/12568227/0001-BOOKKEEPER-561-Fixed-all-findbugs.patch] downloaded at Wed Feb  6 14:41:12 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 816
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/261/","08/Feb/13 18:04;umamaheswararao;Patch looks straight forward to me. +1
I will be committing this momentarily. Thanks a lot, Ivan for fixing them.",08/Feb/13 18:09;umamaheswararao;Committed revision as 1444174.,"08/Feb/13 18:45;hudson;Integrated in bookkeeper-trunk #93 (See [https://builds.apache.org/job/bookkeeper-trunk/93/])
    BOOKKEEPER-561 Findbugs report errors with openjdk. Contributed by Ivan Kelly. (Revision 1444174)

     Result = SUCCESS
umamahesh : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java
* /zookeeper/bookkeeper/trunk/hedwig-client-jms/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java
* /zookeeper/bookkeeper/trunk/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java
* /zookeeper/bookkeeper/trunk/hedwig-client-jms/src/main/resources/findbugsExclude.xml
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/FactoryLayout.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MsMetadataManagerFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java
* /zookeeper/bookkeeper/trunk/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bookkeeper doesn't search all ledger directories for index files.,BOOKKEEPER-374,12603975,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,,i0exception,i0exception,19/Aug/12 08:35,20/Aug/12 16:20,13/Mar/19 22:16,20/Aug/12 16:20,4.2.0,,,,bookkeeper-server,,,0,,"We observed the following behavior when some of the bookkeeper jobs were abruptly restarted a few times.

When the bookies and hedwig hubs were restarted, the hubs tried to query the entries for a particular topic, but an exception was always returned and the reads never completed successfully. 

Eventually, we found that the ledger from which entries couldn't be read actually had 2 index files on disk. We use multiple ledger directories. The first file was in ledger directory number 2 and had a size of 0. The other file which actually contained all the data was in directory 4. 

It doesn't seem right that one ledger has 2 index files. Also, the findIndexFile() function returns the first found ledger index file. Should this be patched to 
1) Throw an exception if more than one file exists (if that's the expected behavior)
2) Do something else?

Any thoughts?

Edit: 
For another ledger, there were 2 files again, created within a minute of each other, on separate directories and with the same size. 

I ran bin/bookie shell ledger -m <ledger_number>. For the most recent file, all entries were N/A, but the other file had all the actual entries. 

So, returning the most recent file might not be the best approach? Should we perhaps check all files?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-20 13:32:11.458,,,no_permission,,,,,,,,,,,,,293547,,,Mon Aug 20 16:20:16 UTC 2012,,,,,,0|i0tbw7:,169236,,,,,,,,"20/Aug/12 13:32;hustlmsp;I am just thinking why there are two index files generated for a same ledger. since the fileInfoCache is protected in synchronized blocks to avoid two FileInfo are put in different directories for same ledger, if there is only one bookie daemon thread, this is case should not happen.

If there are two processes running at the same time, said one process is shutting down, which tries to flush the index to generate an index file; the other process is starting up, which replays journal files, it would find that there is no index file, and generate a new index file in different dir. but this case would only happend before BOOKKEEPER-294, which replays journal files before setting up NIOServer.

@Aniruddha, which version of bookkeeper are you using?

","20/Aug/12 16:20;i0exception;Yes, that makes sense. We did have two processes running simultaneously. The version we were running was prior to BK-294. I guess upgrading should cause this problem to go away. Thanks. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieFailureTest#testBookieRecovery  failing,BOOKKEEPER-233,12553272,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,umamaheswararao,umamaheswararao,umamaheswararao,29/Apr/12 10:26,26/Jul/12 14:47,13/Mar/19 22:16,26/Jul/12 06:26,,,,,bookkeeper-server,,,0,,"Even tough i corrected the problem of BOOKKEEPER-232, still this tests failing with the similar problem.
But the cause would be different. Let me dig into it.",windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,237383,,,Thu Jul 26 06:26:21 UTC 2012,,,,,,0|i0tb47:,169110,,,,,,,,"26/Jul/12 06:26;umamaheswararao;oh, BK-349 solved this problem as well. Now this test is passing after BOOKKEEPER-349.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Parsing last log id is wrong, which may make entry log files overwritten",BOOKKEEPER-142,12534795,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,ikelly,hustlmsp,hustlmsp,12/Dec/11 14:53,16/Dec/11 12:16,13/Mar/19 22:16,16/Dec/11 11:44,4.0.0,,4.1.0,,bookkeeper-server,,,0,,"Currently we use hex string to format log id.
But we don't parse log id correctly.",,,,,,,,,,,,,,,,12/Dec/11 15:12;hustlmsp;BOOKKEEPER-142.patch;https://issues.apache.org/jira/secure/attachment/12507008/BOOKKEEPER-142.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-16 11:44:02.521,,,no_permission,,,,,,,,,,,,,220479,,,Fri Dec 16 12:16:44 UTC 2011,,,,,,0|i0tb1z:,169100,,,,,,,,"16/Dec/11 11:44;ikelly;Committed as r1215098, thanks Sijie.","16/Dec/11 12:16;hudson;Integrated in bookkeeper-trunk #281 (See [https://builds.apache.org/job/bookkeeper-trunk/281/])
    BOOKKEEPER-142: Parsing last log id is wrong, which may make entry log files overwritten (Sijie Gou via ivank)

ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
need to move the bookkeeper doc over from zookeeper,BOOKKEEPER-21,12508854,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Major,Fixed,,breed,breed,31/May/11 17:32,30/Nov/11 11:41,13/Mar/19 22:16,28/Jun/11 04:27,,,,,,,,0,,the bookkeeper doc is currently in the zookeeper documentation. we need to move it over.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,69751,,,Tue Jun 28 04:27:33 UTC 2011,,,,,,0|i0tbk7:,169182,,,,,,,,28/Jun/11 04:27;breed;moved,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.bookkeeper.client.BookKeeperDiskSpaceWeightedLedgerPlacementTest.testDiskSpaceWeightedBookieSelectionWithBookiesBeingAdded is unreliable,BOOKKEEPER-1102,13089196,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,sjust2,sjust2,sjust2,22/Jul/17 00:47,01/Aug/17 13:56,13/Mar/19 22:16,01/Aug/17 06:40,4.5.0,,4.5.0,,bookkeeper-client,,,0,,"org.apache.bookkeeper.client.BookKeeperDiskSpaceWeightedLedgerPlacementTest.testDiskSpaceWeightedBookieSelectionWithBookiesBeingAdded can intermittently fail depending on the timing of the client receiving the info back from the bookies.

Additionally, the synchronization in BookieInfoReader is more complicated than necessary and not entirely correct.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-01 06:40:46.694,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 01 13:56:11 UTC 2017,,,,,,0|i3hvhr:,9223372036854775807,,,,,,,,"01/Aug/17 06:40;sijie@apache.org;Issue resolved by merging pull request 275
            [https://github.com/apache/bookkeeper/pull/275]

            {noformat}
            commit a5f8580f53464065243a9af038935f5893434166
Author:     Samuel Just <sjust@salesforce.com>
AuthorDate: Mon Jul 31 23:34:07 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon Jul 31 23:34:07 2017 -0700

    BOOKKEEPER-1102: Clarify BookieInfoReader and fix associated test flappers
    
    BookieInfoReader:
    
    The previous syncronization logic wasn't really correct, and the logic
    at the top of the method was far more complicated than it needed to be.
    Restrict bookies to be non-null.  Restructure the code to simply use
    the BookieInfoReader instance as a single lock.
    
    One significant behavioral change is that we scan every bookie not in
    the map, and we clear from the map bookies which returned an error.
    
    Also, explicitely cache the most recent bookie set reported by the
    BookieWatcher.  This eliminates the need to call into BookieWatcher
    from getReadWriteBookieInfo and the corresponding error path.  The
    periodic scan continues to explicitely check.
    
    Another departure is the addition of an explicit retry-on-error param to
    trigger retry if any of the requests failed
    (getBookieInfoRetryIntervalSeconds).  We'll only retry the ones that
    actually failed (along with any new additions since the last run).  This
    is useful because bookie startup triggers the addition of the bookie
    node to zk before the bookie actually becomes available for the bookie
    info request, so there can be rare races in the unit tests between
    BookieInfoReader requesting the info and the bookie actually being up.
    
    Also, add a method to allow tests to wait for updates to be reflected.
    
    PerChannelBookieClient: fix error handling for BookieInfo keys
    
    Passing a key corresponding to a GET_BOOKIE_INFO operation to
    errorOutReadKey results in a casting exception, clean up the invalid
    calls.
    
    BookKeeperClusterTestCase: add killBookieAndWaitForZK
    
    Should reduce the need for tests to wait for an arbitrary period to let
    the cluster ""settle"".
    
    BookKeeperDiskSpaceWeightedLedgerPlacementTest:
    
    This test was heavily time dependent, and the Thread.sleep values did
    not work universally.  Instead, eliminate the arbitrary Thread.sleep
    values and instead verify the free space changes on each change.
    
    Also, switch the delay on
    testDiskSpaceWeightedBookieSelectionWithPeriodicBookieInfoUpdate
    to simply use an atomic boolean to signal the value switch.
    
    Signed-off-by: Samuel Just <sjustsalesforce.com>
    
    Author: Samuel Just <sjust@salesforce.com>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>
    
    This patch had conflicts when merged, resolved by
    Committer: Sijie Guo <sijie@apache.org>
    
    This closes #275 from athanatos/forupstream/BOOKKEEPER-1102

            {noformat}
            ","01/Aug/17 13:56;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1836 (See [https://builds.apache.org/job/bookkeeper-master/1836/])
BOOKKEEPER-1102: Clarify BookieInfoReader and fix associated test (sijie: [https://github.com/apache/bookkeeper/commit/a5f8580f53464065243a9af038935f5893434166])
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperDiskSpaceWeightedLedgerPlacementTest.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieInfoReader.java
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerMetadataCreateTest bug in ledger id generation causes intermittent hang,BOOKKEEPER-1103,13090345,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,sjust2,sjust2,sjust2,26/Jul/17 21:39,29/Jul/17 14:01,13/Mar/19 22:16,28/Jul/17 20:35,4.5.0,,4.5.0,,bookkeeper-server,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-28 20:35:16.537,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Sat Jul 29 14:01:01 UTC 2017,,,,,,0|i3i26v:,9223372036854775807,,,,,,,,"28/Jul/17 20:35;sijie@apache.org;Issue resolved by merging pull request 303
            [https://github.com/apache/bookkeeper/pull/303]

            {noformat}
            commit 3908d9ce6a5530ae2ae8526b9988b983423c026c
Author:     Samuel Just <sjust@salesforce.com>
AuthorDate: Fri Jul 28 13:34:58 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Fri Jul 28 13:34:58 2017 -0700

    BOOKKEEPER-1103: Fix LedgerMetadataCreateTest random id loop
    
    The previous version would loop indefinitely upon collision.
    
    Signed-off-by: Samuel Just <sjustsalesforce.com>
    
    Author: Samuel Just <sjust@salesforce.com>
    
    Reviewers: Enrico Olivelli <eolivelli@gmail.com>, Matteo Merli <mmerli@apache.org>
    
    This closes #303 from athanatos/forupstream/BOOKKEEPER-1103

            {noformat}
            ","29/Jul/17 14:01;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1832 (See [https://builds.apache.org/job/bookkeeper-master/1832/])
BOOKKEEPER-1103: Fix LedgerMetadataCreateTest random id loop (sijie: [https://github.com/apache/bookkeeper/commit/3908d9ce6a5530ae2ae8526b9988b983423c026c])
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerMetadataCreationTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieInitializationTest.testWithDiskFullAndAbilityToCreateNewIndexFile testcase is unreliable,BOOKKEEPER-1104,13090630,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,sjust2,sjust2,sjust2,27/Jul/17 21:53,28/Jul/17 13:52,13/Mar/19 22:16,28/Jul/17 04:39,,,4.5.0,,,,,0,,"The bug is that the test sets the full threshhold really close the actual usage (though just below), and if the disk is otherwise in use, the usage can fall below that threshhold during the test.  Instead, just set it to .001 since that's not what we're testing here anyway.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-28 04:39:45.039,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 28 13:52:49 UTC 2017,,,,,,0|i3i3xr:,9223372036854775807,,,,,,,,"28/Jul/17 04:39;zhaijia;Issue resolved by merging pull request 310
            [https://github.com/apache/bookkeeper/pull/310]

            {noformat}
            commit 0ccbc0e9c3e6a82d5e44b8347cc6567e043f253f
Author:     Samuel Just <sjust@salesforce.com>
AuthorDate: Fri Jul 28 12:39:03 2017 +0800
Commit:     jiazhai <zhaijia@live.com>
CommitDate: Fri Jul 28 12:39:03 2017 +0800

    BOOKKEEPER-1104: Fix testWithDiskFullAndAbilityToCreateNewIndexFile
    
    The usage threshhold was chosen to be very close to the actual disk
    usage at test time.  This made the test unnecessarily fragile in the
    case that there other things concurrently using the disk.  Since we
    aren't really testing that here, simply set the threshhold to be really
    low.
    
    Signed-off-by: Samuel Just <sjustsalesforce.com>
    
    Author: Samuel Just <sjust@salesforce.com>
    
    Reviewers: Jia Zhai <None>, Matteo Merli <None>
    
    This closes #310 from athanatos/forupstream/BOOKKEEPER-1104

            {noformat}
            ","28/Jul/17 13:52;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1831 (See [https://builds.apache.org/job/bookkeeper-master/1831/])
BOOKKEEPER-1104: Fix testWithDiskFullAndAbilityToCreateNewIndexFile (jiazhai: [https://github.com/apache/bookkeeper/commit/0ccbc0e9c3e6a82d5e44b8347cc6567e043f253f])
* (edit) bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZkUnderreplicationManager can build up an unbounded number of watchers,BOOKKEEPER-1098,13079900,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,sjust2,sjust2,sjust2,14/Jun/17 22:26,28/Jun/17 21:36,13/Mar/19 22:16,28/Jun/17 21:30,,,4.5.0,,bookkeeper-auto-recovery,,,0,,"getLedgerToReplicate leaves watches each time it traverses the
tree until it finds a suitable replication target.  Since we don't have
a way of canceling watches, these watches tend to get abandoned,
particularly on interior nodes, which aren't changed much.  Thus,
over time, some nodes would build up a very large number of watches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-28 21:31:17.446,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 21:36:15 UTC 2017,,,,,,0|i3gab3:,9223372036854775807,,,,,,,,"28/Jun/17 21:31;githubbot;Github user athanatos commented on the issue:

    https://github.com/apache/bookkeeper/pull/193
  
    @sijie Oops, I just noticed the comments.  I guess you just changed the title?
","28/Jun/17 21:36;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/193
  
    @athanatos yeah, I just changed the title for the correct jira number. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend BOOKKEEPER-886 to LedgerHandleAdv too (BOOKKEEPER-886: Allow to disable ledgers operation throttling),BOOKKEEPER-927,12969870,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,jujjuri,jujjuri,jujjuri,15/May/16 22:39,24/May/17 07:00,13/Mar/19 22:16,24/May/17 07:00,4.3.2,,4.5.0,,bookkeeper-client,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-17 01:56:24.653,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 26 13:08:51 UTC 2016,,,,,,0|i2xzrr:,9223372036854775807,,,,,,,,"17/May/16 01:56;githubbot;GitHub user jvrao opened a pull request:

    https://github.com/apache/bookkeeper/pull/45

    BOOKKEEPER-927: LedgerHandleAdv to handle disabled ledgers operation …

    …throttling
    
    BOOKKEEPER-886 missed taking care of LedgerHandleAdv.
    This takes care of that issue.
    
    Signed-off-by: Venkateswararao Jujjuri (JV) <vjujjuri@salesforce.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jvrao/bookkeeper bookkeeper-927

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/45.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #45
    
----
commit 88990f3a613cfc1b9b5cb0aedec627659ba4b4e9
Author: JV <vjujjuri@salesforce.com>
Date:   2016-05-16T17:05:39Z

    BOOKKEEPER-927: LedgerHandleAdv to handle disabled ledgers operation throttling
    
    BOOKKEEPER-886 missed taking care of LedgerHandleAdv.
    This takes care of that issue.
    
    Signed-off-by: Venkateswararao Jujjuri (JV) <vjujjuri@salesforce.com>

----
","17/May/16 02:08;githubbot;Github user jvrao commented on the pull request:

    https://github.com/apache/bookkeeper/pull/45#issuecomment-219601183
  
    This looks like a Jenkins issue.
    
    /tmp/hudson2501778598612024074.sh: line 8: mvn: command not found
","17/May/16 03:22;githubbot;Github user merlimat commented on the pull request:

    https://github.com/apache/bookkeeper/pull/45#issuecomment-219609947
  
    👍 
","16/Jun/16 22:44;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/45
  
    +1
","17/Jun/16 06:35;githubbot;Github user eolivelli commented on the issue:

    https://github.com/apache/bookkeeper/pull/45
  
    Do we have a test case which covers this case? If not can we add it?
","11/Jul/16 20:55;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/45
  
    @eolivelli I don't think we have a test case for it. 
","25/Jul/16 22:23;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/45
","26/Jul/16 13:08;hudson;FAILURE: Integrated in bookkeeper-master #1454 (See [https://builds.apache.org/job/bookkeeper-master/1454/])
BOOKKEEPER-927: LedgerHandleAdv to handle disabled ledgers operation â¦ (vjujjuri: rev 1f7e47005588eedd879d0b9d163b4f125c6a0d59)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BookieWatcher should not do ZK blocking operations from ZK async callback thread,BOOKKEEPER-1061,13070947,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,10/May/17 20:50,16/May/17 13:36,13/Mar/19 22:16,15/May/17 19:35,,,4.5.0,,,,,0,,"In some cases, the BookieWatcher can get the ZK event thread stuck. This happens when a ZK blocking request is issued from a ZK callback thread. 

We should decouple the blocking requests in a separate executor to avoid deadlocking ZK client.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-10 20:53:50.341,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 13:36:18 UTC 2017,,,,,,0|i3esqf:,9223372036854775807,,,,,,,,"10/May/17 20:53;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/149

    BOOKKEEPER-1061: BookieWatcher should not do ZK blocking operations from ZK async callback thread

    In some cases, the BookieWatcher can get the ZK event thread stuck. This happens when a ZK blocking request is issued from a ZK callback thread.
    
    We should decouple the blocking requests in a separate executor to avoid deadlocking ZK client.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper bookie-watcher-thread

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/149.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #149
    
----
commit a2f4b2956605020673725814574353fc3f88217a
Author: Matteo Merli <mmerli@apache.org>
Date:   2016-09-27T00:12:01Z

    BOOKKEEPER-1061: BookieWatcher should not do ZK blocking operations from ZK async callback thread

----
","11/May/17 05:48;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/149
  
    @athanatos FYI
","15/May/17 19:35;sijie@apache.org;Issue resolved by merging pull request 149
            [https://github.com/apache/bookkeeper/pull/149]

            {noformat}
            commit 5d43260e84c6121df72c0ee4c844651bfb726638
Author:     Matteo Merli <mmerli@apache.org>
AuthorDate: Mon May 15 12:35:26 2017 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon May 15 12:35:26 2017 -0700

    BOOKKEEPER-1061: BookieWatcher should not do ZK blocking operations from ZK async callback thread
    
    In some cases, the BookieWatcher can get the ZK event thread stuck. This happens when a ZK blocking request is issued from a ZK callback thread.
    
    We should decouple the blocking requests in a separate executor to avoid deadlocking ZK client.
    
    Author: Matteo Merli <mmerli@apache.org>
    
    Reviewers: Jia Zhai <None>, Sijie Guo <sijie@apache.org>
    
    Closes #149 from merlimat/bookie-watcher-thread

            {noformat}
            ","15/May/17 19:35;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/149
","16/May/17 13:36;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1750 (See [https://builds.apache.org/job/bookkeeper-master/1750/])
BOOKKEEPER-1061: BookieWatcher should not do ZK blocking operations from (sijie: rev 5d43260e84c6121df72c0ee4c844651bfb726638)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"for ReadLedgerEntriesCmd, EntryFormatter should be configurable and HexDumpEntryFormatter should be one of them",BOOKKEEPER-907,12951034,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,reddycharan18@gmail.com,reddycharan18@gmail.com,reddycharan18@gmail.com,16/Mar/16 23:20,31/Jan/17 12:49,13/Mar/19 22:16,30/Jan/17 20:31,,,4.5.0,,,,,0,,"In ReadLedgerEntriesCmd for printing the contents of the Entry, HexDumpFormat is used by default here, but whereas in ReadJournalCmd/ReadLogCmd StringEntryFormatter is used and it is configurable. We should add HexDumpEntryFormatter just like StringEntryFormatter and use the configured formatter for printing the entry.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-28 23:22:51.352,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 31 12:49:51 UTC 2017,,,,,,0|i2usr3:,9223372036854775807,,,,,,,,"28/Dec/16 23:22;githubbot;GitHub user reddycharan opened a pull request:

    https://github.com/apache/bookkeeper/pull/101

    BOOKKEEPER-907: EntryFormatter should be configur.

    for ReadLedgerEntriesCmd, EntryFormatter should
    be configurable and HexDumpEntryFormatter should
    be one of them.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/reddycharan/bookkeeper entryformatter

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/101.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #101
    
----
commit 5a4ee88ed416d23dec50fa5a680c599caa47d717
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   2016-12-28T23:05:04Z

    BOOKKEEPER-907: EntryFormatter should be configur.
    
    for ReadLedgerEntriesCmd, EntryFormatter should
    be configurable and HexDumpEntryFormatter should
    be one of them.

----
","30/Jan/17 20:29;githubbot;Github user zzsongsg commented on the issue:

    https://github.com/apache/bookkeeper/pull/101
  
    +1 LGTM
","30/Jan/17 20:31;hustlmsp;Issue resolved by merging pull request 101
            [https://github.com/apache/bookkeeper/pull/101]

            {noformat}
            commit ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a
Author:     Charan Reddy Guttapalem <cguttapalem@salesforce.com>
AuthorDate: Mon Jan 30 12:31:01 2017 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon Jan 30 12:31:01 2017 -0800

    BOOKKEEPER-907: EntryFormatter should be configured
    
    for ReadLedgerEntriesCmd, EntryFormatter should
    be configurable and HexDumpEntryFormatter should
    be one of them.
    
    Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #101 from reddycharan/entryformatter

            {noformat}
            ","30/Jan/17 20:31;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/101
","31/Jan/17 01:20;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/101
  
    +1 merged in master as ca7e5fd
","31/Jan/17 12:49;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1644 (See [https://builds.apache.org/job/bookkeeper-master/1644/])
BOOKKEEPER-907: EntryFormatter should be configured (sijie: rev ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a)
* (add) bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HexDumpEntryFormatter.java
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
in BookKeeperAdmin listLedgers method currentRange variable is not getting updated to next iterator when it has run out of elements,BOOKKEEPER-955,13013669,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,reddycharan18@gmail.com,reddycharan18@gmail.com,reddycharan18@gmail.com,19/Oct/16 21:33,30/Nov/16 13:13,13/Mar/19 22:16,29/Nov/16 23:07,,,4.5.0,,,,,0,,in BookKeeperAdmin listLedgers method currentRange variable is not getting updated to next iterator when it has run out of elements,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-19 21:47:11.518,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 30 13:13:11 UTC 2016,,,,,,0|i354b3:,9223372036854775807,,,,,,,,"19/Oct/16 21:47;githubbot;GitHub user reddycharan opened a pull request:

    https://github.com/apache/bookkeeper/pull/63

    BOOKKEEPER-955: in listLedgers method currentRange variable has to be…

    … updated to the next iterator
    
    in BookKeeperAdmin listLedgers method currentRange variable is not getting updated to next iterator
    when it has run out of elements

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/reddycharan/bookkeeper listledgersfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/63.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #63
    
----
commit ab24b4e791f903ce8f04bd04b533c0f6ef7d651f
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   2016-10-19T21:39:24Z

    BOOKKEEPER-955: in listLedgers method currentRange variable has to be updated to the next iterator
    
    in BookKeeperAdmin listLedgers method currentRange variable is not getting updated to next iterator
    when it has run out of elements

----
","20/Oct/16 17:41;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/63
  
    The failure test case was due to #61 (not related to this change)
","20/Oct/16 18:21;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/63
  
    +1 change looks good.
","20/Oct/16 18:52;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/63
  
    LGTM +1
","29/Nov/16 23:07;hustlmsp;Issue resolved by merging pull request 63
            [https://github.com/apache/bookkeeper/pull/63]

            {noformat}
            commit 4cf097871d28b70a53f8c6bffaf1c2022e9953b2
Author:     Charan Reddy Guttapalem <cguttapalem@salesforce.com>
AuthorDate: Tue Nov 29 15:07:42 2016 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Nov 29 15:07:42 2016 -0800

    BOOKKEEPER-955: in listLedgers method currentRange variable has to be…
    
    … updated to the next iterator
    
    in BookKeeperAdmin listLedgers method currentRange variable is not getting updated to next iterator
    when it has run out of elements
    
    Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
    
    Reviewers: Venkateswararao Jujjuri <vjujjuri@salesforce.com>
    
    Closes #63 from reddycharan/listledgersfix

            {noformat}
            ","29/Nov/16 23:08;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/63
","30/Nov/16 13:13;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1582 (See [https://builds.apache.org/job/bookkeeper-master/1582/])
BOOKKEEPER-955: in listLedgers method currentRange variable has to be… (sijie: rev 4cf097871d28b70a53f8c6bffaf1c2022e9953b2)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MetaFormat BookieShell Command is not deleting UnderReplicatedLedgers list from the ZooKeeper,BOOKKEEPER-903,12948520,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,reddycharan18@gmail.com,reddycharan18@gmail.com,reddycharan18@gmail.com,09/Mar/16 20:18,09/Nov/16 13:12,13/Mar/19 22:16,09/Nov/16 02:07,,,4.5.0,,bookkeeper-server,,,0,,MetaFormat BookieShell Command: On executing 'metaformat' BookieShell command it is observed that it does everything as expected but it doesn't deletes UnderReplicatedLedgers list from the ZooKeeper.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-10 05:29:01.98,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 09 13:12:57 UTC 2016,,,,,,0|i2uf6v:,9223372036854775807,,,,,,,,"10/Mar/16 02:12;reddycharan18@gmail.com;I'm unable to assign this bug to myself, please help.",10/Mar/16 05:29;mmerli;I cannot assign you this issue neither. It looks like you don't have a username for jira.,"10/Mar/16 08:47;hustlmsp;I assigned the ticket to you now. [~reddycharan18@gmail.com]

[~mmerli] You need go to the administration page and add him to the ""contributor"" role. so he would show up as a contributor for this project and then you could assign the jira to him.",10/Mar/16 18:02;reddycharan18@gmail.com;Thanks [~sijie@apache.org]ie and [~merlimat]!,"19/Oct/16 18:30;githubbot;GitHub user reddycharan opened a pull request:

    https://github.com/apache/bookkeeper/pull/62

    BOOKKEEPER-903: metaformat command fix

    metaformat command should delete underreplicated ledger
    znodes and lock nodes

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/reddycharan/bookkeeper metaformatfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/62.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #62
    
----
commit 5ab4cedbdc310efa3f4e578853d31587b1660329
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   2016-10-19T18:24:25Z

    BOOKKEEPER-903: metaformat command fix
    
    metaformat command should delete underreplicated ledger
    znodes and lock nodes

----
","20/Oct/16 17:40;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/62
  
    The jenkins failure was due to the issue at #61 (not related to this change)
","20/Oct/16 17:41;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/62
  
    LGTM +1
","09/Nov/16 02:06;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/62
","09/Nov/16 02:07;hustlmsp;Issue resolved by merging pull request 62
            [https://github.com/apache/bookkeeper/pull/62]

            {noformat}
            commit 309cbba65c8532ef84c70efe181b3162e3078333
Author:     Charan Reddy Guttapalem <cguttapalem@salesforce.com>
AuthorDate: Tue Nov 8 18:05:57 2016 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Nov 8 18:05:57 2016 -0800

    BOOKKEEPER-903: metaformat command fix
    
    metaformat command should delete underreplicated ledger
    znodes and lock nodes
    
    Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
    
    Reviewers: sijie@apache.org <sijie@apache.org>
    
    Closes #62 from reddycharan/metaformatfix

            {noformat}
            ","09/Nov/16 13:12;hudson;SUCCESS: Integrated in Jenkins build bookkeeper-master #1560 (See [https://builds.apache.org/job/bookkeeper-master/1560/])
BOOKKEEPER-903: metaformat command fix (sijie: rev 309cbba65c8532ef84c70efe181b3162e3078333)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LedgerOpenOp should use digestType from metadata,BOOKKEEPER-938,12987909,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ayegorov,ayegorov,ayegorov,08/Jul/16 20:25,01/Aug/16 13:10,13/Mar/19 22:16,01/Aug/16 06:04,4.5.0,,4.5.0,,bookkeeper-client,,,0,,"Currently digestType verification in LedgerOpenOp seems to be treated as part of security logic. Since it is checked after password and error explicitly states that digestType mismatched, all that evil hacker has to do is to change digest type to another one. There are only two of them after all.

here is the scenario significantly affected by current behavior:

1. user rolls out clients with digestType set to MAC and creates lots of ledgers.
2. user notices that MAC is slower than CRC32 and decides to change digestType.
3. more ledgers created with CRC32.
4. user tries to read old and new ledgers
-> now old ledgers cannot be read because of the digest type mismatch.

I'll send pull request for review.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-08 23:09:53.376,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 01 13:10:52 UTC 2016,,,,,,0|i30q3j:,9223372036854775807,,,,,,,,"08/Jul/16 23:09;githubbot;GitHub user dlg99 opened a pull request:

    https://github.com/apache/bookkeeper/pull/52

    BOOKKEEPER-938 ledger digestType autodetection on open

    Currently digestType verification in LedgerOpenOp seems to be treated as part of security logic. 
    Since it is checked after password and error explicitly states that digestType mismatched, 
    all that evil hacker has to do is to change digest type to another one. There are only two of them after all.
    
    here is the scenario significantly affected by current behavior:
    
    1. user rolls out clients with digestType set to MAC and creates lots of ledgers.
    2. user notices that MAC is slower than CRC32 and decides to change digestType.
    3. more ledgers created with CRC32.
    4. user tries to read old and new ledgers
    -> now old ledgers cannot be read because of the digest type mismatch.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dlg99/bookkeeper fix/BOOKKEEPER-938-digest-autodetect

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/52.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #52
    
----
commit af67370775e688e65919f1294fb96f0c1be108d9
Author: Andrey Yegorov <ayegorov@salesforce.com>
Date:   2016-07-08T23:00:18Z

    BOOKKEEPER-938 ledger digestType autodetection on open (via configurable parameter)

commit b6ebba39fd2ec1a5d6cd0ad1184a7d6db62b9c44
Author: Andrey Yegorov <ayegorov@salesforce.com>
Date:   2016-07-08T23:07:36Z

    BOOKKEEPER-938 autoformat managed to sneak tabs instead of spaces

----
","09/Jul/16 08:06;eolivelli;This improvement sounds interesting. It eases the switch to a different digest type without modification to readers code.
","11/Jul/16 12:39;eolivelli;As you told the DigestType parameter it is not a very useful ""security"" feature. 

IMHO There is no need to add a new ClientConfiguration option, and let the DigestType be autodiscovered if the user passes a null value to the asyncOpenLedger/asyncOpenLedgerNoRecovery functions.

Maybe it would be useful to add  a new configuration option to tell BookKeeper to use the DigestType written on metadata and ignore the hint provided by the user. This option will ease the switch to a different digest type for legacy code.","11/Jul/16 17:02;ayegorov;[~eolivelli] Thank you for the code review. 

I thought about passing null or something similar, but it still requires change in the LedgerOpenOp + making sure null won't cause problems on the way (logging? default config params?) + client side configuration that enables this behavior (digestType config currently used for both create and open ledger). So I figured this way touches fewer things and does the same thing.

Regarding bookkeeper - can it really create a ledger with different digest types for different entries in it? If this is the case I'd consider this a bug, different from this one, though logically related.","18/Jul/16 21:12;githubbot;Github user jvrao commented on the issue:

    https://github.com/apache/bookkeeper/pull/52
  
    +1 form me with minor comment changes.
","21/Jul/16 22:41;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/52
  
    LGTM +1
","31/Jul/16 07:51;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/52
  
    @dlg99 I am having trouble to merge your pull requests. because your github profile doesn't have 'username' and 'email'. so the merge script will fail. Can you please update your github profile, so that the merge script can use that to fill the commit message.
","31/Jul/16 19:12;githubbot;Github user dlg99 commented on the issue:

    https://github.com/apache/bookkeeper/pull/52
  
    @sijie I changed GH profile: set my email to public and added username. Hope this fixes the problem. 
","01/Aug/16 06:04;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/52
","01/Aug/16 06:04;hustlmsp;Issue resolved by merging pull request 52
            [https://github.com/apache/bookkeeper/pull/52]

            {noformat}
            commit 64f596f4563436b3e4cfe0f57714fc3012778b4c
Author:     Andrey Yegorov <ayegorov@salesforce.com>
AuthorDate: Sun Jul 31 23:04:09 2016 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Sun Jul 31 23:04:09 2016 -0700

    BOOKKEEPER-938 ledger digestType autodetection on open
    
    Currently digestType verification in LedgerOpenOp seems to be treated as part of security logic.
    Since it is checked after password and error explicitly states that digestType mismatched,
    all that evil hacker has to do is to change digest type to another one. There are only two of them after all.
    
    here is the scenario significantly affected by current behavior:
    
    1. user rolls out clients with digestType set to MAC and creates lots of ledgers.
    2. user notices that MAC is slower than CRC32 and decides to change digestType.
    3. more ledgers created with CRC32.
    4. user tries to read old and new ledgers
    -> now old ledgers cannot be read because of the digest type mismatch.
    
    Author: Andrey Yegorov <ayegorov@salesforce.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #52 from dlg99/fix/BOOKKEEPER-938-digest-autodetect

            {noformat}
            ","01/Aug/16 06:05;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/52
  
    @dlg99 thank you so much! 
","01/Aug/16 13:10;hudson;SUCCESS: Integrated in bookkeeper-master #1460 (See [https://builds.apache.org/job/bookkeeper-master/1460/])
BOOKKEEPER-938 ledger digestType autodetection on open (sijie: rev 64f596f4563436b3e4cfe0f57714fc3012778b4c)
* bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgersWithDifferentDigestsTest.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java
* bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Case to handle BKLedgerExistException,BOOKKEEPER-908,12954350,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,jujjuri,jujjuri,jujjuri,29/Mar/16 17:07,11/Jul/16 22:39,13/Mar/19 22:16,11/Jul/16 20:53,4.3.2,,4.5.0,,bookkeeper-client,,,0,patch,"--- a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java
+++ b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java
@@ -100,6 +102,8 @@ public abstract class BKException extends Exception {
             return new BKDuplicateEntryIdException();
         case Code.TimeoutException:
             return new BKTimeoutException();
+        case Code.LedgerExistException:
+            return new BKLedgerExistException();
         default:
             return new BKUnexpectedConditionException();
         }
",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-30 12:07:38.937,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 11 22:39:30 UTC 2016,,,,,,0|i2vcqn:,9223372036854775807,,,,,,,,30/Mar/16 12:07;rakeshr;Thanks [~jujjuri] for reporting this. Could you please tell me the background of this issue and update the description to understand more about the problem.,"16/May/16 17:13;jujjuri;As I explained in the defect,simply a case statement for Code.LedgerExistException is missing in the crearte() function of this class. I noticed it when I decided to take advantage of this error. Patch follows.",16/May/16 17:27;jujjuri;https://github.com/apache/bookkeeper/pull/44,"16/Jun/16 22:40;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/44
  
    LGTM +1
","16/Jun/16 22:41;githubbot;Github user merlimat commented on the issue:

    https://github.com/apache/bookkeeper/pull/44
  
    👍 
","11/Jul/16 20:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/44
","11/Jul/16 20:53;hustlmsp;Issue resolved by merging pull request 44
            [https://github.com/apache/bookkeeper/pull/44]

            {noformat}
            commit e5f3afa5ef84dbc466562664f1f8b0cd60779c02
Author:     JV <vjujjuri@salesforce.com>
AuthorDate: Mon Jul 11 13:53:23 2016 -0700
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Mon Jul 11 13:53:23 2016 -0700

    BOOKKEEPER-908: BKLedgerExistException creation is missing
    
    Add missing case statement for Code.LedgerExistException
    in the crearte() function of BKException class
    
    Signed-off-by: Venkateswararao Jujjuri (JV) <vjujjurisalesforce.com>
    
    Author: JV <vjujjuri@salesforce.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #44 from jvrao/bookkeeper-908

            {noformat}
            ","11/Jul/16 22:39;hudson;FAILURE: Integrated in bookkeeper-master #1438 (See [https://builds.apache.org/job/bookkeeper-master/1438/])
BOOKKEEPER-908: BKLedgerExistException creation is missing (sijie: rev e5f3afa5ef84dbc466562664f1f8b0cd60779c02)
* bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect number of seconds specified in a day,BOOKKEEPER-755,12713184,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,josephredfern,josephredfern,josephredfern,08/May/14 20:46,15/May/14 21:11,13/Mar/19 22:16,14/May/14 22:44,,,4.2.3,4.3.0,bookkeeper-server,,,0,,"Pretty minor bug, but: https://github.com/apache/bookkeeper/blob/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java#L1182

specifies that there are 84600 seconds in a day, when there are in fact 86400. The default should be changed to to the correct value. ",,,,,,,,,,,,,,,,13/May/14 20:21;josephredfern;BOOKKEEPER-755.patch;https://issues.apache.org/jira/secure/attachment/12644691/BOOKKEEPER-755.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-09 05:33:32.64,,,no_permission,,,,,,,,,,,,,391500,,,Thu May 15 21:11:06 UTC 2014,,,,,,0|i1vfdz:,391713,,,,,,,,09/May/14 05:33;rakeshr;Good catch:) Would you mind creating a patch for this ? Thanks!,"09/May/14 05:35;rakeshr;Please correct the same in ""bk_server.conf"" also.

#The interval is specified in seconds.
#auditorPeriodicBookieCheckInterval=84600","13/May/14 07:25;josephredfern;OK - Will do (after reading your ""How to Contribute"" guide, of course!). ",13/May/14 20:21;josephredfern;Patch to fix issue BOOKKEEPER-755. ,"13/May/14 21:13;fpj;+1, looks good.","14/May/14 22:44;fpj;Trunk: Committed revision 1594744.
Branch 4.2: Committed revision 1594745.","15/May/14 21:11;hudson;SUCCESS: Integrated in bookkeeper-trunk #642 (See [https://builds.apache.org/job/bookkeeper-trunk/642/])
BOOKKEEPER-755: Incorrect number of seconds specified in a day (Joseph Redfern via fpj) (fpj: rev 1594744)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing BOOKIE_PID_DIR and BOOKIE_STOP_TIMEOUT in env variables list,BOOKKEEPER-731,12693543,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,rakeshr,rakeshr,rakeshr,06/Feb/14 12:27,10/Feb/14 06:28,13/Mar/19 22:16,10/Feb/14 05:54,,,4.3.0,,,,,0,,,,,,,,,,,,,,,,,,06/Feb/14 12:29;rakeshr;0001-BOOKKEEPER-731.patch;https://issues.apache.org/jira/secure/attachment/12627331/0001-BOOKKEEPER-731.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-06 12:59:32.16,,,no_permission,,,,,,,,,,,,,372128,,,Mon Feb 10 06:28:38 UTC 2014,,,,,,0|i1s4rz:,372433,,,,,,,,"06/Feb/14 12:59;hadoopqa;Testing JIRA BOOKKEEPER-731


Patch [0001-BOOKKEEPER-731.patch|https://issues.apache.org/jira/secure/attachment/12627331/0001-BOOKKEEPER-731.patch] downloaded at Thu Feb  6 12:31:32 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 893
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/583/",10/Feb/14 05:54;hustlmsp;committed as r1566512.,"10/Feb/14 06:28;hudson;SUCCESS: Integrated in bookkeeper-trunk #547 (See [https://builds.apache.org/job/bookkeeper-trunk/547/])
BOOKKEEPER-731: Missing BOOKIE_PID_DIR and BOOKIE_STOP_TIMEOUT in env variables list (rakesh via sijie) (sijie: rev 1566512)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/bin/bookkeeper
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logs too noisy on NIOServerFactory when client drops a connection,BOOKKEEPER-660,12659572,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,ikelly,ikelly,24/Jul/13 13:57,20/Aug/13 12:29,13/Mar/19 22:16,20/Aug/13 12:27,4.2.0,,4.2.2,,,,,0,,"When a client drops a connection, the server throws an exception. It should only log at info level and close the socket.

{code}
    if (k.isReadable()) {
        int rc = sock.read(incomingBuffer);
        if (rc < 0) {
            throw new IOException(""Read error"");
        }
        if (incomingBuffer.remaining() == 0) {
{code}
",,,,,,,,,,,,,,,,24/Jul/13 18:14;mmerli;BOOKKEEPER-660.diff;https://issues.apache.org/jira/secure/attachment/12593991/BOOKKEEPER-660.diff,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-24 18:22:53.094,,,no_permission,,,,,,,,,,,,,339765,,,Tue Aug 20 12:29:04 UTC 2013,,,,,,0|i1mlnr:,340084,,,,,,,,"24/Jul/13 18:22;hadoopqa;Testing JIRA BOOKKEEPER-660


Patch [BOOKKEEPER-660.diff|https://issues.apache.org/jira/secure/attachment/12593991/BOOKKEEPER-660.diff] downloaded at Wed Jul 24 18:21:00 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------","06/Aug/13 14:39;fpj;The patch looks good to me, the only small comment I have is that the severity level should be perhaps warn. But, if you feel strongly about being info, I won't insist.

","20/Aug/13 12:27;ikelly;Committed revision 1515791 to branch-4.2

Thanks Matteo.

","20/Aug/13 12:29;ikelly;Btw, info is the correct log level. A client going away without cleanly closing the connection is a pretty regular occurrence, and not something that should draw the attention of the admin, as a warn log would.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reduce logs generated by ReplicationWorker,BOOKKEEPER-624,12652329,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,vinayrpet,vinayrpet,vinayrpet,12/Jun/13 06:49,20/Aug/13 11:52,13/Mar/19 22:16,20/Aug/13 11:03,4.2.1,,4.2.2,4.3.0,bookkeeper-auto-recovery,,,0,,"Reduce the amount of logs generated by the ReplicationWorker. 
Move the unnecessary logs to DEBUG.",,,,,,,,,,,,,,,,07/Aug/13 06:04;vinayrpet;BOOKKEEPER-624.patch;https://issues.apache.org/jira/secure/attachment/12596510/BOOKKEEPER-624.patch,30/Jul/13 15:50;vinayrpet;BOOKKEEPER-624.patch;https://issues.apache.org/jira/secure/attachment/12594974/BOOKKEEPER-624.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-07-30 09:05:52.262,,,no_permission,,,,,,,,,,,,,332653,,,Tue Aug 20 11:52:37 UTC 2013,,,,,,0|i1ldwf:,332982,,,,,,,,30/Jul/13 09:05;ikelly;Any progress on this? This is the last jira for 4.2.2 that doesn't have a clear path forward.,"30/Jul/13 15:50;vinayrpet;I have just changed the priority of 3 log messages, which will reduce many log messages.
So not attached any tests.","30/Jul/13 16:37;hadoopqa;Testing JIRA BOOKKEEPER-624


Patch [BOOKKEEPER-624.patch|https://issues.apache.org/jira/secure/attachment/12594974/BOOKKEEPER-624.patch] downloaded at Tue Jul 30 16:11:00 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 863
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/447/","06/Aug/13 14:43;fpj;Should we replace ""+"" with ""{}"" placeholders here? 

http://www.slf4j.org/manual.html",07/Aug/13 06:04;vinayrpet;Attaching the updated patch as per comments,"07/Aug/13 10:09;hadoopqa;Testing JIRA BOOKKEEPER-624


Patch [BOOKKEEPER-624.patch|https://issues.apache.org/jira/secure/attachment/12596510/BOOKKEEPER-624.patch] downloaded at Wed Aug  7 09:42:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 863
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/454/","12/Aug/13 02:01;hustlmsp;[~fpj] could you review this, as you are involved in this before?","14/Aug/13 14:43;vinayrpet;Hi Ivan, could you review this, as you too involved in this before. Thanks",14/Aug/13 15:40;ikelly;lgtm +1.,"20/Aug/13 11:03;ikelly;Committed revision 1515773 to branch 4.2
Committed revision 1515774 to trunk.

Thanks Vinay.","20/Aug/13 11:52;hudson;SUCCESS: Integrated in bookkeeper-trunk #330 (See [https://builds.apache.org/job/bookkeeper-trunk/330/])
BOOKKEEPER-624: Reduce logs generated by ReplicationWorker (vinay via ivank) (ivank: rev 1515774)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Bookie returns incorrect exitcode, ExitCode.ZK_REG_FAIL is getting overridden",BOOKKEEPER-642,12656402,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,rakeshr,rakeshr,rakeshr,05/Jul/13 17:15,24/Jul/13 14:56,13/Mar/19 22:16,24/Jul/13 14:56,,,4.2.2,4.3.0,bookkeeper-server,,,0,,"When bookie registration fails due to zookeeper exception, its not exiting with ExitCode.ZK_REG_FAIL.

Bookie.java
{code}
       try {
            registerBookie(conf);
        } catch (IOException e) {
            LOG.error(""Couldn't register bookie with zookeeper, shutting down"", e);
            shutdown(ExitCode.ZK_REG_FAIL);
        }
{code}",,,,,,,,,,,,,,,,05/Jul/13 17:43;rakeshr;0001-BOOKKEEPER-642.patch;https://issues.apache.org/jira/secure/attachment/12591027/0001-BOOKKEEPER-642.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-05 18:17:35.308,,,no_permission,,,,,,,,,,,,,336625,,,Wed Jul 24 14:56:31 UTC 2013,,,,,,0|i1m2br:,336948,,,,,,,,"05/Jul/13 18:17;hadoopqa;Testing JIRA BOOKKEEPER-642


Patch [0001-BOOKKEEPER-642.patch|https://issues.apache.org/jira/secure/attachment/12591027/0001-BOOKKEEPER-642.patch] downloaded at Fri Jul  5 17:51:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 854
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/408/",19/Jul/13 16:51;ikelly;What code is it exiting with? Shouldn't it get the correct code when it calls Bookie#shutdown()?,"20/Jul/13 08:17;rakeshr;Its exiting with 'ExitCode.OK' and is masking the actual 'ExitCode.ZK_REG_FAIL', which then added during Bookie#registerBookie fails. 
Could you please execute the test case in the attached patch, it will help us to understand more.","24/Jul/13 14:22;ikelly;Ah, as the bookie hasn't started at this point, it won't actually call shutdown() to get the error code. I think this applies to 4.2.2 also.","24/Jul/13 14:56;ikelly;Committed r1506582 to trunk.
Committed revision 1506584 to branch-4.2.

Thanks Rakesh.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeathWatcher thread is unnecessarily running even after bookie shutdown,BOOKKEEPER-641,12655826,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,rakeshr,rakeshr,rakeshr,02/Jul/13 19:53,03/Jul/13 16:31,13/Mar/19 22:16,03/Jul/13 15:39,4.2.1,,4.3.0,,bookkeeper-server,,,0,,"I've seen in our testcases, DeathWatcher threads are continue running even after bkServer#shutdown.",,,,,,,,,,,,,,,,02/Jul/13 19:56;rakeshr;001-BOOKKEEPER-641.patch;https://issues.apache.org/jira/secure/attachment/12590489/001-BOOKKEEPER-641.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-02 21:03:26.084,,,no_permission,,,,,,,,,,,,,336101,,,Wed Jul 03 16:31:01 UTC 2013,,,,,,0|i1lz3r:,336425,,,,,,,,"02/Jul/13 21:03;hadoopqa;Testing JIRA BOOKKEEPER-641


Patch [001-BOOKKEEPER-641.patch|https://issues.apache.org/jira/secure/attachment/12590489/001-BOOKKEEPER-641.patch] downloaded at Tue Jul  2 20:37:03 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/403/",03/Jul/13 00:39;hustlmsp;go catch. +1 for the patch. and marked it for 4.2.2 too.,"03/Jul/13 15:03;ikelly;Strangely the bug doesn't exist in 4.2 branch. The problem came in with BOOKKEEPER-595, but when I create the 4.2 patch for that, the bug was left out. +1 for the patch. Committing.",03/Jul/13 15:39;ikelly;Committed r1499445 to trunk. Thanks Rakesh,"03/Jul/13 16:31;hudson;Integrated in bookkeeper-trunk #270 (See [https://builds.apache.org/job/bookkeeper-trunk/270/])
    BOOKKEEPER-641: DeathWatcher thread is unnecessarily running even after bookie shutdown (rakeshr via ivank) (Revision 1499445)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Auditor logs noisily when a ledger has been deleted,BOOKKEEPER-585,12637076,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,ikelly,ikelly,14/Mar/13 19:04,07/Jun/13 09:46,13/Mar/19 22:16,17/Mar/13 23:34,,,4.2.2,4.3.0,,,,0,,"The auditor logs very noisily when it tries to check a ledger which has been deleted. Ledgers being deleted is very normal, so this shouldn't log noisily.",,,,,,,,,,,,,,,,14/Mar/13 19:08;ikelly;0001-BOOKKEEPER-585-Auditor-logs-noisily-when-a-ledger-ha.patch;https://issues.apache.org/jira/secure/attachment/12573751/0001-BOOKKEEPER-585-Auditor-logs-noisily-when-a-ledger-ha.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-14 20:33:52.726,,,no_permission,,,,,,,,,,,,,317568,,,Fri Jun 07 09:46:40 UTC 2013,,,,,,0|i1isov:,317909,,,,,,,,"14/Mar/13 20:33;hadoopqa;Testing JIRA BOOKKEEPER-585


Patch [0001-BOOKKEEPER-585-Auditor-logs-noisily-when-a-ledger-ha.patch|https://issues.apache.org/jira/secure/attachment/12573751/0001-BOOKKEEPER-585-Auditor-logs-noisily-when-a-ledger-ha.patch] downloaded at Thu Mar 14 20:03:44 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 818
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/288/","17/Mar/13 23:33;hustlmsp;+1, thanks Ivan.",17/Mar/13 23:34;hustlmsp;committed as r1457596. thanks Ivan.,"18/Mar/13 00:14;hudson;Integrated in bookkeeper-trunk #141 (See [https://builds.apache.org/job/bookkeeper-trunk/141/])
    BOOKKEEPER-585: Auditor logs noisily when a ledger has been deleted (ivank via sijie) (Revision 1457596)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java
",07/Jun/13 09:46;ikelly;Committed as r1490557 to branch-4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Modify hedwig server tests to allow client testcases to start/stop them as part of their tests,BOOKKEEPER-544,12627160,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mridulm80,mridulm80,mridulm80,11/Jan/13 11:36,06/Jun/13 17:04,13/Mar/19 22:16,06/Jun/13 17:04,,,4.3.0,,hedwig-server,,,0,,Allow client testcases to start/stop hedwig server as part of their setup/teardown.,,,,,,,,,,BOOKKEEPER-312,,,,,,12/Jan/13 15:50;mridulm80;server_test.patch.2;https://issues.apache.org/jira/secure/attachment/12564574/server_test.patch.2,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-11 12:43:04.614,,,no_permission,,,,,,,,,,,,,303929,,,Wed Jun 05 10:25:36 UTC 2013,,,,,,0|i17gxz:,251714,,,,,,,,"11/Jan/13 12:02;mridulm80;Modifies the server test code to allow client testcases to leverage the ability to bring up/shutdown a hedwig server to runs tests against (without needing one to be already up).

This is required by the jms testcases.","11/Jan/13 12:08;mridulm80;
Modifies the server test code to allow client testcases to leverage the ability to bring up/shutdown a hedwig server to runs tests against (without needing one to be already up).

This is required by the jms testcases.",11/Jan/13 12:08;mridulm80;had accidentally uploaded the wrong patch earlier.,"11/Jan/13 12:14;mridulm80;setUp and tearDown methods are expected to be protected by convention - changing them to public breaks downstream classes which depend on this method signature (specifically, activemq tests we have) : updating the method signatures to be inline with junit conventions.",11/Jan/13 12:32;mridulm80;There are more issues to be resolved - the trunk has moved a bit significantly since I last modified these files.,"11/Jan/13 12:43;hadoopqa;Testing JIRA BOOKKEEPER-544


Patch [server_test.patch|https://issues.apache.org/jira/secure/attachment/12564400/server_test.patch] downloaded at Fri Jan 11 12:11:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 787
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/238/",11/Jan/13 22:06;mridulm80;Verified to work against jms client ported to trunk.,"11/Jan/13 22:53;hadoopqa;Testing JIRA BOOKKEEPER-544


Patch [server_test.patch.2|https://issues.apache.org/jira/secure/attachment/12564506/server_test.patch.2] downloaded at Fri Jan 11 22:22:57 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:red}-1{color} the patch seems to introduce 8 new javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 786
.    Tests failed: 0
.    Tests errors: 2

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/240/",11/Jan/13 23:00;mridulm80;compile errors ? unexpected - retrying ...,"11/Jan/13 23:32;hadoopqa;Testing JIRA BOOKKEEPER-544


Patch [server_test.patch.2|https://issues.apache.org/jira/secure/attachment/12564512/server_test.patch.2] downloaded at Fri Jan 11 23:29:36 UTC 2013

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------",12/Jan/13 07:50;mridulm80;All @RunWith tests need to have public setUp and tearDown methods (weirdness in junit) - ensure that all test classes in hedwig-server conform to this.,"12/Jan/13 08:22;hadoopqa;Testing JIRA BOOKKEEPER-544


Patch [server_test.patch.2|https://issues.apache.org/jira/secure/attachment/12564562/server_test.patch.2] downloaded at Sat Jan 12 07:51:40 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:red}-1{color} the patch seems to introduce 8 new javac warning(s)
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 787
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/245/",12/Jan/13 15:50;mridulm80;Try to workaround the warnings generated,"12/Jan/13 16:22;hadoopqa;Testing JIRA BOOKKEEPER-544


Patch [server_test.patch.2|https://issues.apache.org/jira/secure/attachment/12564574/server_test.patch.2] downloaded at Sat Jan 12 15:51:38 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 787
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/246/",24/Jan/13 18:36;ikelly;Committed as r1438120. Thanks Mridul,"24/Jan/13 19:12;hudson;Integrated in bookkeeper-trunk #73 (See [https://builds.apache.org/job/bookkeeper-trunk/73/])
    BOOKKEEPER-544: Modify hedwig server tests to allow client testcases to start/stop them as part of their tests (mridul via ivank) (Revision 1438120)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/pom.xml
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java
","05/Jun/13 10:25;hudson;Integrated in bookkeeper-trunk #230 (See [https://builds.apache.org/job/bookkeeper-trunk/230/])
    BOOKKEEPER-617: BOOKKEEPER-544 breaks hedwig-server/bin/hedwig script (ivank) (Revision 1489775)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-server/bin/hedwig
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation missed for readOnlyMode support,BOOKKEEPER-549,12627801,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,umamaheswararao,umamaheswararao,16/Jan/13 10:12,19/Feb/13 16:46,13/Mar/19 22:16,19/Feb/13 15:20,,,4.2.1,4.3.0,bookkeeper-server,,,0,,"Need documentation for below items
{code}
    //ReadOnly mode support on all disk full
    protected final static String READ_ONLY_MODE_ENABLED = ""readOnlyModeEnabled"";
    //Disk utilization
    protected final static String DISK_USAGE_THRESHOLD = ""diskUsageThreshold"";
    protected final static String DISK_CHECK_INTERVAL = ""diskCheckInterval"";
{code}",,,,,,,,,,,,,,,,18/Feb/13 15:59;ikelly;0002-BOOKKEEPER-549-Read-only-bookie-documentation.patch;https://issues.apache.org/jira/secure/attachment/12569822/0002-BOOKKEEPER-549-Read-only-bookie-documentation.patch,18/Feb/13 15:52;ikelly;0002-BOOKKEEPER-549-Read-only-bookie-documentation.patch;https://issues.apache.org/jira/secure/attachment/12569819/0002-BOOKKEEPER-549-Read-only-bookie-documentation.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-02-18 16:51:00.547,,,no_permission,,,,,,,,,,,,,304589,,,Tue Feb 19 16:46:11 UTC 2013,,,,,,0|i17njr:,252784,,,,,,,,"16/Jan/13 10:13;umamaheswararao;@Vinay, do you want to take a stab on it?","18/Feb/13 16:51;hadoopqa;Testing JIRA BOOKKEEPER-549


Patch [0002-BOOKKEEPER-549-Read-only-bookie-documentation.patch|https://issues.apache.org/jira/secure/attachment/12569822/0002-BOOKKEEPER-549-Read-only-bookie-documentation.patch] downloaded at Mon Feb 18 16:21:04 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/272/","19/Feb/13 06:03;umamaheswararao;+1, patch looks great to me Ivan. I will commit this patch today in some time. 

Thanks.","19/Feb/13 15:20;ikelly;Committed r1447759(trunk), r1447760(branch-4.2).

Thanks for the review Uma.","19/Feb/13 15:59;hudson;Integrated in bookkeeper-trunk #110 (See [https://builds.apache.org/job/bookkeeper-trunk/110/])
    BOOKKEEPER-549: Documentation missed for readOnlyMode support (ivank) (Revision 1447759)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
","19/Feb/13 16:46;umamaheswararao;Thanks Ivan, for commit. I just reached home and logged in to commit this patches :-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document about periodic ledger checker configuration,BOOKKEEPER-548,12627800,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,ikelly,umamaheswararao,umamaheswararao,16/Jan/13 09:59,19/Feb/13 15:59,13/Mar/19 22:16,19/Feb/13 15:17,,,4.2.1,4.3.0,bookkeeper-auto-recovery,,,0,,regarding 'auditorPeriodicCheckInterval',,,,,,,,,,,,,,,,18/Feb/13 15:22;ikelly;0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch;https://issues.apache.org/jira/secure/attachment/12569814/0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch,18/Feb/13 15:14;ikelly;0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch;https://issues.apache.org/jira/secure/attachment/12569813/0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-02-18 15:22:32.114,,,no_permission,,,,,,,,,,,,,304588,,,Tue Feb 19 15:59:10 UTC 2013,,,,,,0|i17njj:,252783,,,,,,,,18/Feb/13 15:22;ikelly;I also set the default to once a week rather than once a day.,"18/Feb/13 15:50;hadoopqa;Testing JIRA BOOKKEEPER-548


Patch [0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch|https://issues.apache.org/jira/secure/attachment/12569813/0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch] downloaded at Mon Feb 18 15:20:32 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/270/","18/Feb/13 16:20;hadoopqa;Testing JIRA BOOKKEEPER-548


Patch [0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch|https://issues.apache.org/jira/secure/attachment/12569814/0001-BOOKKEEPER-548-Added-documentation-for-periodic-chec.patch] downloaded at Mon Feb 18 15:50:48 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/271/","19/Feb/13 06:13;umamaheswararao;Thanks a lot, Ivan for creating patch for this change. 
+1, lgtm. I will commit this patch in some time today. But we may have to regenrate that which will be committed last from 548,549. I will do that while committing if necessary.","19/Feb/13 09:28;ikelly;I forgot to say which should go first. This should go before BOOKKEEPER-549, as BOOKKEEPER-549 is based on this.",19/Feb/13 15:13;ikelly;I'm going to push this in now.,"19/Feb/13 15:17;ikelly;Committed as r1447756 (trunk), r1447757 (branch-4.2).

Thanks for reviewing Uma.","19/Feb/13 15:59;hudson;Integrated in bookkeeper-trunk #110 (See [https://builds.apache.org/job/bookkeeper-trunk/110/])
    BOOKKEEPER-548: Document about periodic ledger checker configuration (ivank) (Revision 1447756)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/conf/bk_server.conf
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java
* /zookeeper/bookkeeper/trunk/doc/bookkeeperConfig.textile
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE during GC with HierarchicalLedgerManager,BOOKKEEPER-568,12631833,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Minor,Fixed,mmerli,mmerli,mmerli,11/Feb/13 22:33,15/Feb/13 05:15,13/Mar/19 22:16,15/Feb/13 04:32,4.2.0,,4.2.1,4.3.0,bookkeeper-server,,,0,,"{noformat}
2013-02-11 14:06:28,904 - WARN  - [GarbageCollectorThread:ScanAndCompareGarbageCollector@103] - Exception when iterating over the metadata {}
java.io.IOException: Error when check more elements
	at org.apache.bookkeeper.meta.HierarchicalLedgerManager$HierarchicalLedgerRangeIterator.hasNext(HierarchicalLedgerManager.java:423)
	at org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector.gc(ScanAndCompareGarbageCollector.java:75)
	at org.apache.bookkeeper.bookie.GarbageCollectorThread.doGcLedgers(GarbageCollectorThread.java:302)
	at org.apache.bookkeeper.bookie.GarbageCollectorThread.run(GarbageCollectorThread.java:271)
Caused by: java.lang.NullPointerException
	at org.apache.bookkeeper.meta.HierarchicalLedgerManager$HierarchicalLedgerRangeIterator.hasNext(HierarchicalLedgerManager.java:419)
	... 3 more
{noformat}

In the code below, l2NodesIter appears to be null.

{code}
public boolean hasNext() throws IOException {
   try {
      if (l1NodesIter == null) {
          l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();
          hasMoreElement = nextL1Node();
      } else if (!l2NodesIter.hasNext()) {
          hasMoreElement = nextL1Node();
      }
   } catch (Exception e) {
      throw new IOException(""Error when check more elements"", e);
   }
   return hasMoreElement;
}
{code}",,,,,,,,,,,,,,,,13/Feb/13 16:42;mmerli;0001-BOOKKEEPER-568-NPE-during-GC-with-HierarchicalLedger.patch;https://issues.apache.org/jira/secure/attachment/12569214/0001-BOOKKEEPER-568-NPE-during-GC-with-HierarchicalLedger.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-12 04:55:25.958,,,no_permission,,,,,,,,,,,,,312329,,,Fri Feb 15 05:15:31 UTC 2013,,,,,,0|i1hwdz:,312675,,,,,,,,"11/Feb/13 22:42;mmerli;I'm not sure if doing 
{code}
l2NodesIter == null || !l2NodesIter.hasNext()
{code}

 would be the correct check.","12/Feb/13 04:55;hustlmsp;ah, it seems that this code doesn't handle calling hasNext twice. so second time call hasNext would fail with null pointer. the case would happened when there is no ledgers existed in bookkeeper.

[~merlimat] it is OK to fix as your suggestion. could you generate a patch for it? thanks.",13/Feb/13 16:42;mmerli;Here's the patch with a very simple test case that would throw exception without the fix,"13/Feb/13 17:21;hadoopqa;Testing JIRA BOOKKEEPER-568


Patch [0001-BOOKKEEPER-568-NPE-during-GC-with-HierarchicalLedger.patch|https://issues.apache.org/jira/secure/attachment/12569214/0001-BOOKKEEPER-568-NPE-during-GC-with-HierarchicalLedger.patch] downloaded at Wed Feb 13 16:51:16 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 817
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/268/","15/Feb/13 04:28;hustlmsp;the patch looks good to me. +1, will commit it.",15/Feb/13 04:32;hustlmsp;committed as r1446444. thanks Matteo for fixing this issue.,15/Feb/13 04:34;hustlmsp;committed as r1446445 in branch 4.2.1.,"15/Feb/13 05:15;hudson;Integrated in bookkeeper-trunk #103 (See [https://builds.apache.org/job/bookkeeper-trunk/103/])
    BOOKKEEPER-568: NPE during GC with HierarchicalLedgerManager (Matteo via sijie) (Revision 1446444)

     Result = SUCCESS
sijie : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing error code in ZK setData return path,BOOKKEEPER-1047,13069215,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,mmerli,mmerli,mmerli,04/May/17 17:21,15/May/17 21:21,13/Mar/19 22:16,15/May/17 21:21,,,4.5.0,,,,,0,,The log warning is not printing the error code returned by ZooKeeper,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-04 17:23:19.121,,,no_permission,,,,,Patch,,,,,,,,9223372036854775807,,,Fri May 05 13:46:14 UTC 2017,,,,,,0|i3ei2n:,9223372036854775807,,,,,,,,"04/May/17 17:23;githubbot;GitHub user merlimat opened a pull request:

    https://github.com/apache/bookkeeper/pull/137

    BOOKKEEPER-1047: Add missing error code in ZK setData return path

    The log warning is not printing the error code returned by ZooKeeper


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merlimat/bookkeeper missing-error-msg

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/137.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #137
    
----
commit cc03765862f791fe29364ec43529a53839c3ca7a
Author: Matteo Merli <mmerli@apache.org>
Date:   2017-05-04T17:20:01Z

    BOOKKEEPER-1047: Add missing error code in ZK setData return path

----
","04/May/17 18:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/137
","05/May/17 13:46;hudson;FAILURE: Integrated in Jenkins build bookkeeper-master #1738 (See [https://builds.apache.org/job/bookkeeper-master/1738/])
BOOKKEEPER-1047: Add missing error code in ZK setData return path (eolivelli: rev d5af77c05256d5942c19aff2654c5d8f5ac1eb79)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZeroBuffer readOnlyBuffer returns ByteBuffer with 0 remaining bytes for length > 64k,BOOKKEEPER-958,13013709,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,reddycharan18@gmail.com,reddycharan18@gmail.com,reddycharan18@gmail.com,19/Oct/16 23:23,09/Nov/16 13:13,13/Mar/19 22:16,09/Nov/16 07:49,,,4.5.0,,,,,0,,"in ZeroBuffer
here, if the length is > zeroBytes.length (64K), then it is returning zero ByteBuffer but its position is set to limit and hence its remaining will be 0, which is not expected, but if it is < 64k then its position is set to 0 and the remaining will be length.

Looking at the call hierearchy, it seems there are no callers for this function, but since this is utility class it needs to be corrected.

    public static ByteBuffer readOnlyBuffer(int length) {
        ByteBuffer buffer;
        if (length <= zeroBytes.length) {
            buffer = ByteBuffer.wrap(zeroBytes, 0, length);
        }
        else {
            buffer = ByteBuffer.allocate(length);
            put(buffer);
        }
        return buffer.asReadOnlyBuffer();
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-19 23:55:41.358,,,no_permission,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 09 13:13:00 UTC 2016,,,,,,0|i354jz:,9223372036854775807,,,,,,,,"19/Oct/16 23:55;githubbot;GitHub user reddycharan opened a pull request:

    https://github.com/apache/bookkeeper/pull/66

    BOOKKEEPER-958: Fix for ZeroBuffer Bug

    Fix for readOnlyBuffer of ZeroBuffer bug

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/reddycharan/bookkeeper zerobufferfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/bookkeeper/pull/66.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #66
    
----
commit 8e2c8bf62832989d7d689100900b6c5beeef0a7e
Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
Date:   2016-10-19T23:44:03Z

    BOOKKEEPER-958: Fix for ZeroBuffer Bug
    
    Fix for readOnlyBuffer of ZeroBuffer bug

----
","20/Oct/16 18:56;githubbot;Github user sijie commented on the issue:

    https://github.com/apache/bookkeeper/pull/66
  
    LGTM +1
","09/Nov/16 07:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/bookkeeper/pull/66
","09/Nov/16 07:49;sijie@apache.org;Issue resolved by merging pull request 66
            [https://github.com/apache/bookkeeper/pull/66]

            {noformat}
            commit 026ef10e1e9706ead4f1bc6763ded2e28c91480d
Author:     Charan Reddy Guttapalem <cguttapalem@salesforce.com>
AuthorDate: Tue Nov 8 23:49:20 2016 -0800
Commit:     Sijie Guo <sijie@apache.org>
CommitDate: Tue Nov 8 23:49:20 2016 -0800

    BOOKKEEPER-958: Fix for ZeroBuffer Bug
    
    Fix for readOnlyBuffer of ZeroBuffer bug
    
    Author: Charan Reddy Guttapalem <cguttapalem@salesforce.com>
    
    Reviewers: Sijie Guo <sijie@apache.org>
    
    Closes #66 from reddycharan/zerobufferfix

            {noformat}
            ","09/Nov/16 13:13;hudson;SUCCESS: Integrated in Jenkins build bookkeeper-master #1560 (See [https://builds.apache.org/job/bookkeeper-master/1560/])
BOOKKEEPER-958: Fix for ZeroBuffer Bug (sijie: rev 026ef10e1e9706ead4f1bc6763ded2e28c91480d)
* (edit) bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZeroBuffer.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix typo 'seconds' to milliseconds in benchmark output,BOOKKEEPER-768,12721740,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,jaln,jaln,jaln,17/Jun/14 17:32,15/Jul/14 08:00,13/Mar/19 22:16,15/Jul/14 07:09,4.2.2,,4.3.0,,bookkeeper-benchmark,,,0,,fix typo 'seconds' to 'milliseconds' in benchmark output,,3600,3600,,0%,3600,3600,,,,,,,,,17/Jun/14 17:34;jaln;benchmark-seconds-typo.patch;https://issues.apache.org/jira/secure/attachment/12650843/benchmark-seconds-typo.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-06-17 17:38:03.542,,,no_permission,,,,,,,,,,,,,399936,,,Tue Jul 15 08:00:22 UTC 2014,,,,,,0|i1wujj:,400044,,,,,,,,17/Jun/14 17:34;jaln;the patch is for the trunk,"17/Jun/14 17:38;ikelly;Changed fix version to 4.3.0. It can't be fixed for 4.2.2 because it's already released. For 4.2.3, there's a release candidate already out for vote, and I don't want to generate a new set of artifacts for something as small as this. However, if there has to be another RC for 4.2.3, we can put this in.","17/Jun/14 17:40;jaln;Got it, Thanks Ivan, This is my first try to work on an open-source project. ","17/Jun/14 17:52;ikelly;ah, this reminds me.

To contribute code, you need to sign http://www.apache.org/licenses/icla.txt. It's a hassle, but it guarantees that the project doesn't end up with legal issues. 
Alternatively, if you contribute as part of you job, http://www.apache.org/licenses/cla-corporate.txt is the form.","17/Jun/14 18:54;hadoopqa;Testing JIRA BOOKKEEPER-768


Patch [benchmark-seconds-typo.patch|https://issues.apache.org/jira/secure/attachment/12650843/benchmark-seconds-typo.patch] downloaded at Tue Jun 17 18:17:35 UTC 2014

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 23 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 920
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}.   There is at least one warning, please check{color}

The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/655/","19/Jun/14 06:16;hustlmsp;[~ikelly] I don't think for contributors, you need to sign icla. they are only for committers, no?",19/Jun/14 06:19;hustlmsp;assigned to [~jaln]. the patch looks good for me +1.,"19/Jun/14 09:48;ikelly;[~hustlmsp] I think you are right, though the language is a little unclear. [1] says ""The ASF desires that all contributors of ideas, code, or documentation to the Apache projects complete, sign, and submit (via postal mail, fax or email) an Individual Contributor License Agreement (1) (CLA)"". Desires is pretty weak. It then says ""A signed CLA is required to be on file before an individual is given commit rights to an ASF project."", so I understand that to mean that it's only committers as you say.

[1] http://www.apache.org/licenses/","20/Jun/14 17:20;fpj;It is only mandatory for committers. It is better if contributors sign an ICLA, but it is not strictly required. Committers need to make sure that there are no IP issues. The fact that a patch has been uploaded to jira is already an indication that the contributor wishes to grant it to ASF. That's how I understand it at least. ",15/Jul/14 07:09;hustlmsp;committed as r1610596. thanks [~jaln],"15/Jul/14 08:00;hudson;FAILURE: Integrated in bookkeeper-trunk #702 (See [https://builds.apache.org/job/bookkeeper-trunk/702/])
BOOKKEEPER-768: fix typo seconds to milliseconds in benchmark output (jialin via sijie) (sijie: rev 1610596)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ZK logging is oververbose, can cause oom in tests",BOOKKEEPER-684,12668447,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,ikelly,ikelly,ikelly,13/Sep/13 09:47,19/Sep/13 21:18,13/Mar/19 22:16,19/Sep/13 21:18,,,4.2.2,,,,,0,,"Some tests, GcLedgerTests for example, create a lot of ledgers (30k) which causes a lot of zk writes. This causes a lot of zk logging, which can fill the log buffer and cause an oom when you're running with very little memory.

Fix is trivial. zk should be set to only log at error level in log4j.properties.",,,,,,,,,,,,,,,,16/Sep/13 18:29;ikelly;0001-BOOKKEEPER-684-ZK-logging-is-oververbose-can-cause-o.patch;https://issues.apache.org/jira/secure/attachment/12603386/0001-BOOKKEEPER-684-ZK-logging-is-oververbose-can-cause-o.patch,14/Sep/13 08:48;jiannan;BOOKKEEPER-684.patch;https://issues.apache.org/jira/secure/attachment/12603187/BOOKKEEPER-684.patch,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-09-14 08:48:14.165,,,no_permission,,,,,,,,,,,,,348381,,,Thu Sep 19 21:18:02 UTC 2013,,,,,,0|i1o2lb:,348678,,,,,,,,14/Sep/13 08:48;jiannan;Attach a simple fix,"14/Sep/13 08:51;jiannan;With this change, the log file size of GcLedgersTest reduces from 19M to 49K.","14/Sep/13 09:18;hadoopqa;Testing JIRA BOOKKEEPER-684


Patch [BOOKKEEPER-684.patch|https://issues.apache.org/jira/secure/attachment/12603187/BOOKKEEPER-684.patch] downloaded at Sat Sep 14 08:51:02 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 879
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/494/","16/Sep/13 18:29;ikelly;I think it's better to set all zk logs to ERROR, and for all the tested components. Patch to that effect attached.","16/Sep/13 19:18;hadoopqa;Testing JIRA BOOKKEEPER-684


Patch [0001-BOOKKEEPER-684-ZK-logging-is-oververbose-can-cause-o.patch|https://issues.apache.org/jira/secure/attachment/12603386/0001-BOOKKEEPER-684-ZK-logging-is-oververbose-can-cause-o.patch] downloaded at Mon Sep 16 18:50:58 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 879
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/496/","16/Sep/13 21:36;fpj;+1 for changing for all tested components. I think it is sufficient to make it WARN, though, but if you feel strongly about making it ERROR, fine with me.","17/Sep/13 05:22;jiannan;I just think disabling all zk INFO log is excessive. Since only few zk log is annoying while some other zk INFO logs are helpful for debugging. If we encounter issue that is hard to be reproduced, such zk logging would be meaningful.","17/Sep/13 09:11;fpj;I can go with your solution too, [~jiannan], although for organization purposes I'd rather make it more uniform across the project. Also, I tend to agree that having more logging is better when tests fail, but ZooKeeper is a dependency, not our core goal, so I don't see it as a big issue to reduce the level of logging for it. 

Again, I don't have a strong preference, I just don't want to have a release with GcLedgersTest failing.","17/Sep/13 09:13;ikelly;how about changing to ERROR for org.apache.zookeeper.server, and leaving as it is for the rest?","17/Sep/13 09:55;jiannan;Thanks Flavio's comment, that makes sense.
+1 for Ivan's suggestion.","19/Sep/13 21:18;fpj;+1, Committed revision 1524846.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in sync ZKUtils.createFullPathOptimistic(),BOOKKEEPER-649,12658068,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,ikelly,mmerli,mmerli,16/Jul/13 18:03,22/Aug/13 15:15,13/Mar/19 22:16,22/Aug/13 15:15,,,4.2.2,4.3.0,,,,0,,"If multiple threads are calling createFullPathOptimistic() there will be race conditions on creating the intermediate nodes. If the intermediate nodes have been created since we last check, we can just ignore the exception and continue creating the child nodes.",,,,,,,,,,,,,,,,20/Aug/13 15:27;ikelly;0001-BOOKKEEPER-649-Race-condition-in-sync-ZKUtils.create.patch;https://issues.apache.org/jira/secure/attachment/12598966/0001-BOOKKEEPER-649-Race-condition-in-sync-ZKUtils.create.patch,16/Jul/13 18:08;mmerli;0001-BOOKKEEPER-649-Race-condition-in-sync-ZKUtils.create.patch;https://issues.apache.org/jira/secure/attachment/12592583/0001-BOOKKEEPER-649-Race-condition-in-sync-ZKUtils.create.patch,19/Jul/13 12:50;rakeshr;0002-BOOKKEEPER-649.patch;https://issues.apache.org/jira/secure/attachment/12593185/0002-BOOKKEEPER-649.patch,19/Jul/13 04:13;rakeshr;0002-BOOKKEEPER-649.patch;https://issues.apache.org/jira/secure/attachment/12593124/0002-BOOKKEEPER-649.patch,20/Aug/13 13:05;ikelly;TEST-org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager.xml;https://issues.apache.org/jira/secure/attachment/12598943/TEST-org.apache.bookkeeper.replication.TestLedgerUnderreplicationManager.xml,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2013-07-16 18:48:39.787,,,no_permission,,,,,,,,,,,,,338262,,,Thu Aug 22 15:15:47 UTC 2013,,,,,,0|i1mcef:,338582,,,,,,,,"16/Jul/13 18:48;hadoopqa;Testing JIRA BOOKKEEPER-649


Patch [0001-BOOKKEEPER-649-Race-condition-in-sync-ZKUtils.create.patch|https://issues.apache.org/jira/secure/attachment/12592583/0001-BOOKKEEPER-649-Race-condition-in-sync-ZKUtils.create.patch] downloaded at Tue Jul 16 18:22:25 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/419/","19/Jul/13 04:18;rakeshr;Nice improvement [~mmerli]. 
I've just modified the exception block added in your patch to handle some more race conditions.
Please have a look at the latest patch.","19/Jul/13 04:48;hadoopqa;Testing JIRA BOOKKEEPER-649


Patch [0002-BOOKKEEPER-649.patch|https://issues.apache.org/jira/secure/attachment/12593124/0002-BOOKKEEPER-649.patch] downloaded at Fri Jul 19 04:22:01 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 853
.    Tests failed: 3
.    Tests errors: 1

.    The patch failed the following testcases:

.      testDuplicateEnDisableAutoRecovery[0](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testDuplicateEnDisableAutoRecovery[1](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)
.      testDuplicateEnDisableAutoRecovery[2](org.apache.bookkeeper.replication.AuditorLedgerCheckerTest)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/420/","19/Jul/13 13:18;hadoopqa;Testing JIRA BOOKKEEPER-649


Patch [0002-BOOKKEEPER-649.patch|https://issues.apache.org/jira/secure/attachment/12593185/0002-BOOKKEEPER-649.patch] downloaded at Fri Jul 19 12:51:53 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color}
.    Tests run: 853
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/421/","19/Jul/13 16:40;rakeshr;Hi, 
There is a logic in ZkLedgerUnderreplicationManager.java, where #markLedgerUnderreplicated() is handling KeeperException.NodeExistsException. Once received KeeperException.NodeExistsException, its having special logic to mark the 'missingReplica' details in the ledger node path. The test case failure is due to this and could not fully suppress the NodeExistsException.","19/Jul/13 23:03;mmerli;[~rakeshr] In your patch you cathing the NodeExistsException in the zk.create(), but that would hide the error of creating the leaf node when it already exists.
I think we should only catch the NodeExistsException in the recursive call because at that point we are creating empty nodes.","20/Jul/13 17:42;rakeshr;yeah [~merlimat] its correct, throws exception back to the caller when the leaf node exists(LedgerUnderreplicationManager#markLedgerUnderreplicated has special handling when this occurs). 

Also, would be helpful if you can update the '@throws KeeperException.NodeExistsException' in createFullPathOptimistic() api doc. 
","07/Aug/13 07:45;fpj;[~rakeshr], is it a +1 for you? I can add the javadoc tag when committing if this is the only change pending.","20/Aug/13 13:04;ikelly;Latest patch causes consistent failure in TestLedgerUnderreplicationManager on trunk. Log attached, though it doesn't show anything obvious.","20/Aug/13 15:27;ikelly;While looking to see what was causing the failure, I saw we have 2 versions of createFullPathOptimistic. The sync version, which this patch aims to fix is very buggy (for example, it reuses the createMode for the parent, which is plain wrong). The async version looks correct. I've replaced the sync version, with a version that just calls the async version and waits.","22/Aug/13 11:53;fpj;I like the idea of implementing the sync version with the async version + a latch. 

The patch you provide replaces calls to the sync version with calls to the async version. This changes the semantics of the call, right? It is not blocking anymore.

If we don't need the sync version any longer, since the patch replaces sync calls with async calls, is there any reason why you want to keep it?","22/Aug/13 12:07;ikelly;{quote}
The patch you provide replaces calls to the sync version with calls to the async version
{quote}
Nope, it renames the async version, so that it's obvious that it is async. The places it looks like i've replaced sync with async were already async. Functionalitywise, the only change is in ZKUtils.","22/Aug/13 12:16;fpj;ah! got it, thanks for the clarification, lgtm.",22/Aug/13 14:42;ikelly;Committed r1516465 to trunk.,"22/Aug/13 15:12;hudson;SUCCESS: Integrated in bookkeeper-trunk #335 (See [https://builds.apache.org/job/bookkeeper-trunk/335/])
BOOKKEEPER-649: Race condition in sync ZKUtils.createFullPathOptimistic() (ivank) (ivank: rev 1516465)
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java
","22/Aug/13 15:15;ikelly;Committed r1516482 to branch-4.2.

Thanks guys.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logger class name is wrong in LedgerCacheImpl.java,BOOKKEEPER-652,12658878,Bug,Resolved,BOOKKEEPER,Bookkeeper,software,hustlmsp,"<p style=""text-align:center"">We have migrated to github for issue tracking. 
<a href=""https://github.com/apache/bookkeeper/issues"">https://github.com/apache/bookkeeper/issues</a></p>
<p style=""text-align:center;background-color:yellow"">- This Jira is now read only -</p>",http://bookkeeper.apache.org/,Trivial,Fixed,rakeshr,rakeshr,rakeshr,20/Jul/13 08:43,20/Jul/13 18:32,13/Mar/19 22:16,20/Jul/13 18:31,,,4.2.2,4.3.0,bookkeeper-server,,,0,,"In LedgerCacheImpl.java logger class name is given as 'LedgerDescriptor.class'
{code}
public class LedgerCacheImpl implements LedgerCache {
    private final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);
{code}",,,,,,,,,,,,,,,,20/Jul/13 08:48;rakeshr;0001-BOOKKEEPER-652.patch;https://issues.apache.org/jira/secure/attachment/12593330/0001-BOOKKEEPER-652.patch,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-20 09:18:03.628,,,no_permission,,,,,,,,,,,,,339071,,,Sat Jul 20 18:31:45 UTC 2013,,,,,,0|i1mhdz:,339391,,,,,,,,"20/Jul/13 09:18;hadoopqa;Testing JIRA BOOKKEEPER-652


Patch [0001-BOOKKEEPER-652.patch|https://issues.apache.org/jira/secure/attachment/12593330/0001-BOOKKEEPER-652.patch] downloaded at Sat Jul 20 08:51:52 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 853
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/422/","20/Jul/13 18:30;hustlmsp;+1 for the patch. thanks Rakesh.

committed as r1505185.",20/Jul/13 18:31;hustlmsp;committed as r1505188 in 4.2 branch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
