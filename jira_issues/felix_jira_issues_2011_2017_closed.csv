Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Cloners),Outward issue link (Duplicate),Outward issue link (Incorporates),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (Required),Outward issue link (Supercedes),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
maven-bundle-plugin: Make sure Closeable resources are closed,FELIX-5582,13048934,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,sseifert@pro-vision.de,sseifert@pro-vision.de,sseifert@pro-vision.de,07/Mar/17 16:51,13/Mar/17 08:27,14/Mar/19 02:48,07/Mar/17 16:51,maven-bundle-plugin-3.2.0,,,,,,maven-bundle-plugin-3.3.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"some resources that implement the Closeable interface are not closed properly in maven-bundle-plugin.
this affects bnd Analyzer and Verifier objects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 07 16:51:46 UTC 2017,,,,,,0|i3b29j:,9223372036854775807,,,,,,,,"07/Mar/17 16:51;sseifert@pro-vision.de;Completed: At revision: 1785859  
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundle Plugin uses insecure maven-archiver 2.5,FELIX-5579,13048294,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sseifert@pro-vision.de,marks,marks,04/Mar/17 14:16,13/Mar/17 08:27,14/Mar/19 02:48,07/Mar/17 10:28,maven-bundle-plugin-3.2.0,,,,,,maven-bundle-plugin-3.3.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"maven-bundle-plugin includes {{org.apache.maven:maven-archiver}} 2.5 as a compile dependency.

This version of maven-archiver uses {{org.codehaus.plexus:plexus-archiver}}  v2.1. which has level 5 threat [CVE-2012-2098|https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-2098].

The CVE mentions ""sorting algorithms in bzip2 compressing stream"" in context of Apache Commons Compress,  but here is [one defect reference|https://bugzilla.redhat.com/show_bug.cgi?id=951522] that confirms that the threat applies to plexus-archiver versions prior to 2.3.1

Thus, upgrade Bundle Plugin usage of maven-archiver to 2.6 (which uses plexus-archiver 2.8.1) or later in order to mitigate the threat,

Current release of maven-archiver is 3.1.1

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-07 10:28:15.441,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 07 17:00:44 UTC 2017,,,,,,0|i3ayin:,9223372036854775807,,,,,,,,"07/Mar/17 10:28;sseifert@pro-vision.de;Completed: At revision: 1785822  

thanks for reporting - i've updated to maven-archiver 2.6","07/Mar/17 12:12;marks;Thank you for resolving the issue so speedily.

Is there a scheduled release date for  maven-bundle-plugin-3.3.0?

When the release is made then I'll be able to create pull requests in a couple of other projects (such as swagger-codegen) in order to update their version of maven-bundle-plugin.","07/Mar/17 17:00;sseifert@pro-vision.de;i think we can start the release process this week, so you should have it next week.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reference target filter fails when using field strategy for multiple cardinality reference with multiple component instances,FELIX-5572,13046972,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,karelhaeck,karelhaeck,28/Feb/17 13:45,28/Apr/17 08:39,14/Mar/19 02:48,20/Mar/17 08:37,scr-2.0.8,,,,,,scr-2.0.10,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In this case the injected list seems additive, that is it contains all the references matched for previous component instances,
as well as the one matched by the current component. As such the list contains references that do not match the target filter.

A typical example is a Route component referencing Destinations (where Route and Destination are both DS components).
Using configuration admin each instance of the route has its own destinations.target filter, but the injected list does not match the filter.
When using method strategy, the target filter works as expected. Note also that the DS introspection API reports the correct
references, but the actual injected list does not match the introspection API.

See https://github.com/Amplifino/snippets for a bndtools workspace example. ( branch workaround contains the method strategy workaround).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-02 16:49:33.872,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 20 08:37:08 UTC 2017,,,,,,0|i3aqdb:,9223372036854775807,,,,,,,,"02/Mar/17 15:36;karelhaeck;Traced this down to method getReplaceCollection() in class org.apache.felix.scr.impl.inject.FieldHandler. 
Fixing this will probably require some refactoring as the FieldHandler instance is  per component, while its boundValues TreeMap shoud be distinct for each component instance.","02/Mar/17 16:49;cziegeler;Good catch, thanks for reporting and the analysis. Yes FieldHandler should not hold per component state and we have to move that state into the per instance objects.",16/Mar/17 15:05;cziegeler;[~karelhaeck] I've committed a potential fix to the 2.1.0 branch (in osgi-r7/scr) (rev 1787202). Would it be possible for you to try this out?,20/Mar/17 08:16;karelhaeck;Fix works for my test case. ( Unrelated test note: In order to test on osgi r6 I changed occurrences of config.getProcessedProperties(ref) to config.getProperties() in org.apache.felix.scr.impl.manager.RegionConfigurationSupport).,20/Mar/17 08:37;cziegeler;Thanks for the confirmation,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR contains compact3 profile code,FELIX-5568,13046280,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,mailings@hupie.com,mailings@hupie.com,25/Feb/17 08:41,28/Apr/17 08:39,14/Mar/19 02:48,31/Mar/17 12:05,scr-2.0.8,,,,,,scr-2.0.10,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"{quote}
$ jdeps -P *.jar |grep compact3
org.apache.felix.scr-2.0.8.jar -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-1.b14.fc25.x86_64/jre/lib/rt.jar (compact3)
      -> java.lang.management                               compact3
{quote}

Maybe split off the compact3 part as an optional extension/fragment?",Fedora 25 x64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-28 16:46:37.601,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 31 14:16:52 UTC 2017,,,,,,0|i3amhr:,9223372036854775807,,,,,,,,"25/Feb/17 08:59;mailings@hupie.com;on master (git-svn-id: http://svn.apache.org/repos/asf/felix/trunk@1784269 13f79535-47bb-0310-9956-ffa450edef68):

{quote}
$ grep -nri import *|grep java.lang.management
impl/manager/ThreadDump.java:21:import java.lang.management.ManagementFactory;
impl/manager/ThreadDump.java:22:import java.lang.management.ThreadInfo;
impl/manager/ThreadDump.java:23:import java.lang.management.ThreadMXBean;
{quote}
","28/Feb/17 13:53;mailings@hupie.com;It does run under compact1.
However, trying to connect with jconsole to it (obviously) crashes it since jconsole uses JMX (compact3)","28/Feb/17 16:46;djencks;Do you have any idea why trying to connect jconsole would have any effect?  AFAIK the JMX related code has nothing to do with actual JMX usage, it is the only way I could figure out to log a thread dump.  It should only get called in case of lock timeout in a deadlock situation.  Do you have any stack trace information or other logging output?","28/Feb/17 17:00;mailings@hupie.com;Quick-and-Dirty:

{quote}
    final ThreadGroup currentGroup = Thread.currentThread().getThreadGroup();
    final int noThreads = currentGroup.activeCount();
    final Thread[] lstThreads = new Thread[noThreads];
    currentGroup.enumerate(lstThreads);
    for (int i = 0; i < noThreads; i++) {
      System.out.println();
      System.out.println(""Thread No:"" + i + "" = "" + lstThreads[i].getName());
      final StackTraceElement[] st = lstThreads[i].getStackTrace();
      for (final StackTraceElement element : st) {
        System.out.println(""  "" + element);
      }
    }
{quote}
","28/Feb/17 17:01;mailings@hupie.com;Well, we tried connecting with jconsole to our app and it blew up.
Might also be EventAdmin, might be SCR, we didn't actually look that deep into it.",17/Mar/17 06:07;cziegeler;[~djencks] Does anything speak against replacing the JMX code with something similar to what Ferry posted above?,17/Mar/17 15:47;djencks;I foresee no problems replacing the code with something like Ferry's proposal.,20/Mar/17 06:42;cziegeler;[~mailings@hupie.com] The current code using JMX also prints lock info about a thread which I believe is not available through any other means,"20/Mar/17 17:03;djencks;I think we should keep the current code then: I've found the lock info essential when diagnosing problems.  I certainly tried to make the current code fail gracefully when the jmx classes aren't available, is there any evidence that there is an actual problem in this case (other than not getting the thread dump)?","20/Mar/17 17:12;mailings@hupie.com;Like before:

> Maybe split off the compact3 part as an optional extension/fragment?

For our embedded product we would _very_ much like to run on profile1, which we now could theoretically do but there is zero guarantee that it will work since it uses profile3 classes.

I have no testcase to test it, also because I (obviously) don't know the internals of SCR.
I can only see an import of profile3 classes and therefore _have_ to conclude that it will not work on profile1 (or even profile2).

Splitting off that part so that SCR only imports profile1 classes ensures me it will all work.

I am not interested in a thread dump so having it in SCR actually bothers me, having it in an extension/fragment allows me to not deploy that part.","20/Mar/17 18:49;djencks;I've never worked with the profiles and don't have a setup where I can plausibly experiment. The jmx class use is very confined and AFAICT (from code inspection) if the classes are missing nothing bad happens. Is java.util.concurrent.Callable a proflle1 class?

What actually happens when you run current felix SCR in your profile1 environment?

Since no one expects to run into a deadlock, and they are generally difficult to reproduce, I don't think that requiring a fragment to be installed to get the data needed to diagnose the problem is a good idea.","21/Mar/17 06:38;cziegeler;I agree, putting this into an extension makes it really difficult to use; and I agree the lock info is really valuable.
As David points out, the code should even run in profile1 when those jmx classes are not available.
So the only thing I see we could do is marking the import as optional","21/Mar/17 07:15;djencks;I'm confused.  The ThreadDump class uses java import statements for the java.lang.management classes needed but since these are java. packages there are no osgi  imports involved.  What could we possibly mark optional?

The only problem I can see is if java.util.concurrent.Callable is not a profile1 class, in which case we could more or less copy it.

I still want to know what actual problem Ferry is having.","21/Mar/17 07:20;gnt;Fwiw, I think there's a way out.
IIUC, the goal is to make sure SCR can run on compact1 profile, but there is this JMX access which requires compact3 profile.
I've had a similar use case for JLine and I solved it using a multi-step compilation.
See  https://github.com/jline/jline3/blob/master/builtins/pom.xml#L46-L86

The idea is to build all but the compact3 dependent classes first with a compact1 profile, and on the second run, build only the compact3 classes.  This has proved to work in my case.","21/Mar/17 07:34;cziegeler;[~djencks] Sorry for the confusion, I thought it was javax. - no need for optional in this case of course","21/Mar/17 21:53;githubbot;GitHub user fhuberts opened a pull request:

    https://github.com/apache/felix/pull/99

    FELIX-5568: mark java.lang.management as an optional import

    The import is used by the thread dump code, but the SCR can handle
    the import not being there (which is the case when run on profile1 or
    profile2).
    
    Signed-off-by: Ferry Huberts <ferry.huberts@pelagic.nl>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fhuberts/felix FELIX-5568

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/99.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #99
    
----
commit 20a9d5a09d0fd378baacb04677776c18c14ba658
Author: Ferry Huberts <ferry.huberts@pelagic.nl>
Date:   2017-03-21T21:52:35Z

    FELIX-5568: mark java.lang.management as an optional import
    
    The import is used by the thread dump code, but the SCR can handle
    the import not being there (which is the case when run on profile1 or
    profile2).
    
    Signed-off-by: Ferry Huberts <ferry.huberts@pelagic.nl>

----
","21/Mar/17 21:54;githubbot;Github user fhuberts closed the pull request at:

    https://github.com/apache/felix/pull/99
","22/Mar/17 02:51;djencks;Could someone please explain to me why marking a java. package that has no  osgi import in the manifest as resolution optional has any effect? (cf Ferry's commit)

I'd still like to know what the actual problem Ferry is seeing is, we've seen a lot of complaining but no evidence there is a problem.

","22/Mar/17 06:48;mailings@hupie.com;The _actual_ problem is that scr uses profile3 packages but there is no way for me - the end user - to know that this is optional.
I didn't know it is optional when I filed the issue. Now I know but it is not clear at all, nor documented anywhere.
A simple jdeps tells me I can't use SCR on profile1 or profile2.
If it was made clear somewhere that SCR is explicitly compatible with profile1 then I would not have filed the issue :-)

Doesn't seem to me like a lot of complaining, just a lot of confusion","22/Mar/17 07:26;cziegeler;Ok, so we agree that SCR will run with profile1 or profile2 with the current code. So the only problem seems to be documenting this fact.
Using an optional import for a a java.lang package does not look like the best solution.
We could just add a documentation header with that info, not sure how that one could look like though","22/Mar/17 12:56;gnt;Imho, I don't think the problem is about documentation, it's about making sure the code can run on compact1 profile, which is what the change I suggested above does.  There are tools to check which profile a jar requires, but in this case, it will report compact3 because of the JMX access.  The pom change at least ensures that all the remaining code is compact1 compliant and gives the user some confidence.","22/Mar/17 14:01;cziegeler;Well, I think we all inspected the code now and are confident that it runs with profile1 and doing this in a pom/build time does not help anyone downloading the final jar. The final jar still tries to use the profile3 code.
I'm not arguing against doing such a check at build time in general, but I think it does not really help for end users.",27/Mar/17 07:23;cziegeler;It's unclear to me how we can solve this in a useful way,"27/Mar/17 08:01;mailings@hupie.com;What?
How can that be unclear?
The _very_ least is to document it that SCR is profile1 compatible since the profile3 import is actually optional.
Better is to split off that code, but it appears that you're now willing to do that.","27/Mar/17 08:05;cziegeler;Well, no one could come up with a clear good way of documenting this so far. Again, it's not unclear ""what"" to do but ""how""!
As explained, splitting of the code does not make sense at all","27/Mar/17 08:10;mailings@hupie.com;> Well, no one could come up with a clear good way of documenting this so far. Again, it's not unclear ""what"" to do but ""how""!

Well, you could add a pseudo manifest header, something like:

Bundle-Profile-Compatibility: profile1

> As explained, splitting of the code does not make sense at all

Not to you, it does to me ;-)
","28/Mar/17 20:17;tjwatson;Why not document it in the requirement for osgi.ee?

Require-Capability: osgi.ee; filter:=""(| (&(osgi.ee=JavaSE)(version=1.6)) (&(osgi.ee=JavaSE/compact1)(version=1.8)) )""","28/Mar/17 20:25;mailings@hupie.com;Even better!

Thanks Thomas",28/Mar/17 20:26;mailings@hupie.com;BTW I have filed 'the same' issue on EventAdmin: https://issues.apache.org/jira/browse/FELIX-5567,"31/Mar/17 12:05;cziegeler;I used Tom's suggestion, applied in 1789663","31/Mar/17 13:58;mailings@hupie.com;Upon better inspection of the requirement it seems wrong.
It appears to exclude Java 1.7.

should probably be:

Require-Capability: osgi.ee; filter:=""(| (&(osgi.ee=JavaSE)(version=1.6)) (&(osgi.ee=JavaSE)(version=1.7)) (&(osgi.ee=JavaSE/compact1)(version=1.8)) )""

But what to do with Java 1.9 (and up) ?","31/Mar/17 14:11;tjwatson;As a bundle you do not explicitly list each and every version of an execution environment you support.  Instead the framework is supposed to provide an osgi.ee capability that has a version list containing all the versions supported for a specific osgi.ee name.  For example, on Java 7 the framework capability should look something like this for the JavaSE name:

osgi.ee; osgi.ee=""JavaSE""; version:List<Version>=""1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7""

That should match the (&(osgi.ee=JavaSE)(version=1.6)) filter.  On Java 9 things are a bit more complicated given Java 9 modules.  But I suspect the capability JavaSE to look like this on Java 9 since they changed the version scheme to remove the 1.x Major version.

osgi.ee; osgi.ee=""JavaSE""; version:List<Version>=""1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 9.0""

Also note that a framework running on Java 8 must provide the following JavaSE related osgi.ee named capabilities:

 osgi.ee; osgi.ee=""JavaSE""; version:List<Version>=""1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8""
 osgi.ee; osgi.ee=""JavaSE/compact1""; version:List<Version>=""1.8""
 osgi.ee; osgi.ee=""JavaSE/compact2""; version:List<Version>=""1.8""
 osgi.ee; osgi.ee=""JavaSE/compact3""; version:List<Version>=""1.8""

A bundle that needs Java 8 and supports compact1 should only have to list the filter ""(&(osgi.ee=JavaSE/compact1)(version=1.8))"".  It should not have to also OR a separate filter for JavaSE-1.8 version ""(&(osgi.ee=JavaSE)(version=1.8))""","31/Mar/17 14:16;mailings@hupie.com;Ah yes, thanks for reminding me.
I did know that, but it didn't pop up when replying :-)",,,,,,,,,
EventAdmin contains compact3 profile code,FELIX-5567,13046277,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,mailings@hupie.com,mailings@hupie.com,25/Feb/17 08:29,01/Sep/17 06:49,14/Mar/19 02:48,31/Mar/17 14:12,eventadmin-1.4.8,,,,,,eventadmin-1.4.10,,,,,,,Event Admin,,,,,,0,,,,,,"{quote}
$ jdeps -P *.jar |grep compact
org.apache.felix.eventadmin-1.4.8.jar -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-1.b14.fc25.x86_64/jre/lib/rt.jar (compact3)
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.security                                      compact1
      -> java.util                                          compact1
      -> java.lang                                          compact1
      -> java.util                                          compact1
      -> java.lang                                          compact1
      -> java.security                                      compact1
      -> java.util                                          compact1
      -> java.util.concurrent                               compact1
      -> java.lang                                          compact1
      -> java.security                                      compact1
      -> java.lang                                          compact1
      -> java.lang.management                               compact3
      -> java.util                                          compact1
      -> java.util.concurrent                               compact1
      -> java.util.concurrent.atomic                        compact1
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.util                                          compact1
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.security                                      compact1
      -> java.util                                          compact1
      -> java.lang                                          compact1
      -> java.lang.reflect                                  compact1
      -> java.util                                          compact1
{quote}

Maybe try to split of the compact3 part as an optional extension?",Fedora 25 x64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-31 12:16:09.028,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 31 13:58:47 UTC 2017,,,,,,0|i3amh3:,9223372036854775807,,,,,,,,"25/Feb/17 09:01;mailings@hupie.com;on master (git-svn-id: http://svn.apache.org/repos/asf/felix/trunk@1784269 13f79535-47bb-0310-9956-ffa450edef68):

{quote}
$ grep -nri import *|grep java.lang.management
impl/src/main/java/org/apache/felix/eventadmin/impl/tasks/HandlerTask.java:21:import java.lang.management.ManagementFactory;
impl/src/main/java/org/apache/felix/eventadmin/impl/tasks/HandlerTask.java:22:import java.lang.management.ThreadMXBean;
{quote}","28/Feb/17 13:53;mailings@hupie.com;It does run under compact1.
However, trying to connect with jconsole to it (obviously) crashes it since jconsole uses JMX (compact3)","31/Mar/17 12:16;cziegeler;[~mailings@hupie.com] Thanks for reporting, I've removed the use of jmx in rev 1789669, I think with that change we should run with compact1","31/Mar/17 13:53;mailings@hupie.com;Could you then also add the corresponding requirement to its manifest please, like with SCR?","31/Mar/17 13:55;cziegeler;[~mailings@hupie.com] Hmm, is this needed? Unlike with SCR we're not using compact3 classes anymore. Otherwise we should add this to each and every bundle, not just event admin","31/Mar/17 13:58;mailings@hupie.com;ah yes, completely right. ignore my remark :-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot load native libraries in Windows Server 2016 with the name win32,FELIX-5553,13044461,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,nroduit,nroduit,20/Feb/17 06:45,28/Apr/17 05:29,14/Mar/19 02:48,27/Apr/17 19:29,framework-5.6.1,,,,,,framework-5.6.4,,,,,,,Framework,,,,,,0,,,,,,"With a bundle config:
<Bundle-NativeCode>lib.dll; processor=x86-64; osname=win32</Bundle-NativeCode>
The dll won't be loaded on Windows Server 2016.

PR: https://github.com/apache/felix/pull/93",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-20 18:29:54.52,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Apr 28 05:29:21 UTC 2017,,,,,,0|i3abav:,9223372036854775807,,,,,,,,"20/Feb/17 18:29;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/93
",20/Feb/17 18:29;karlpauls;I committed support for this in r1783787. Please close if it works for you.,27/Apr/17 13:05;karlpauls;I added the alias to the normalizeOsName as well in r1792878.,28/Apr/17 05:29;nroduit;Thanks for this commit. It should prevent a future issue with the system version. This is very useful for us as we use Felix as client deployed in many OS.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle MemoryPoolMXBean.getUsed returning -1,FELIX-5552,13043990,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,17/Feb/17 13:29,28/Feb/18 16:56,14/Mar/19 02:48,17/Feb/17 13:33,webconsole-memoryusage-plugin-1.0.6,,,,,,webconsole-memoryusage-plugin-1.0.8,,,,,,,Web Console,,,,,,0,,,,,,MemoryPoolMXBean.getUsed might return -1 which in turn makes the percentage calculate in the plugin return negative values,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 17 13:33:50 UTC 2017,,,,,,0|i3a8lz:,9223372036854775807,,,,,,,,17/Feb/17 13:33;cziegeler;Fixed in rev 1783403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component property types must implement java.lang.annotation.Annotation methods properly,FELIX-5543,13042889,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,14/Feb/17 10:09,30/Apr/18 08:13,14/Mar/19 02:48,17/Mar/17 06:50,scr-2.1.0,,,,,,scr-2.1.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Currently component property types only implement one getter method for each element. The methods {{toString()}}, {{equals()}}, {{hashCode()}} and {{annotationType}} are not implemented properly (i.e. all return just {{null}}). This violates JLS 9.6 (https://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.6).
bq. The direct superinterface of an annotation type is always java.lang.annotation.Annotation.  

The component property type needs to implement {{java.lang.annotation.Annotation}} and all its methods properly. The current implementation is clearly violating the contract of the {{java.lang.annotation.Annotation}}.
For that the {{Annotations#toObject(...)}} needs to be adjusted in https://github.com/apache/felix/blob/trunk/scr/src/main/java/org/apache/felix/scr/impl/inject/Annotations.java#L41.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-17 03:53:22.986,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 17 06:50:51 UTC 2017,,,,,,0|i3a1tb:,9223372036854775807,,,,,,,,"14/Feb/17 10:15;kwin;Right now the component property type object returns {{null}} for all methods, which are not given in the {{HashMap}} in https://github.com/apache/felix/blob/trunk/scr/src/main/java/org/apache/felix/scr/impl/inject/Annotations.java#L246. 
Instead of the simple {{Handler}} class one must implement something similar to {{sun.reflect.annotation.AnnotationInvocationHandler}}. There is such a code in bytebuddy (Apache License 2.0) (https://github.com/raphw/byte-buddy/blob/master/byte-buddy-dep/src/main/java/net/bytebuddy/description/annotation/AnnotationDescription.java) one could maybe just embed.","17/Mar/17 03:53;cziegeler;[~kwin] Thanks for reporting. I've committed an updated version of the Handler class implementing these methods in rev 1787280 to the 2.1.0 branch. Please have a look at this.
Now, this obviously blows up the code for creating the proxy and the committed code does not implement these methods 100% according to what is mentioned in the Annotations javadoc. Even the more complicated code mentioned above does not do it 100% correct. So i'm a little bit reluctant to make it even more complicated as I'm not quiet sure what the benefits are. It would be great to also hear about the use cases for using these methods.","17/Mar/17 06:37;kwin;Thanks for the fix in SCR 2.1. My main use case was debugging in an IDE where it was confusing that the property type object was exposed as {{null}} due to the missing toString() implementation. Not too sure about the other methods. Probably they are not really useful in this context. However, I think the fix is good enough for now. If someone really relies on certain semantics of these methods which are not fulfilled by the new implementation, that should be raised in an additional ticket together with a use case.","17/Mar/17 06:50;cziegeler;Thanks [~kwin], yes debugging (toString) was the only use case I could see for this as well",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundle plugin Embed-Dependency complains about class files in META-INF,FELIX-5527,13041025,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,nbartlett,io7m,io7m,07/Feb/17 16:26,18/Dec/17 16:30,14/Mar/19 02:48,14/Dec/17 16:15,maven-bundle-plugin-3.2.0,,,,,,maven-bundle-plugin-3.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,maven,,,,,"As of Java 9, it's no longer a mistake to have included class files in the META-INF directory of a bundle. However, if the Embed-Dependency instruction is used to pack the contents of a jar file into a bundle, and the original jar file happened to have class files in META-INF, the execution fails with an error.

A repro case is included in the following repository:

https://github.com/io7m/maven-bundle-plugin-bug-20170207

Just ""mvn clean package"".","Linux copperhead 4.8.13-1-ARCH #1 SMP PREEMPT Fri Dec 9 07:24:34 CET 2016 x86_64 GNU/Linux

openjdk version ""1.8.0_121""
OpenJDK Runtime Environment (build 1.8.0_121-b13)
OpenJDK 64-Bit Server VM (build 25.121-b13, mixed mode)

Apache Maven 3.3.9 (NON-CANONICAL_2015-11-23T13:17:27+03:00_root; 2015-11-23T10:17:27+00:00)
Maven home: /opt/maven
Java version: 1.8.0_121, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-openjdk/jre
Default locale: en_GB, platform encoding: UTF-8
OS name: ""linux"", version: ""4.8.13-1-arch"", arch: ""amd64"", family: ""unix""
",,,,,,,,,,,,,FELIX-5592,FELIX-5760,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-06 22:56:21.997,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 14 16:59:03 UTC 2017,,,,,,0|i39qbj:,9223372036854775807,,,,,,,,"10/Feb/17 08:47;io7m;In a comment to the bndtools-users list, Neil Bartlett noted that this is a current limitation of bndtools:

""Bnd does not yet support java 9.""

https://groups.google.com/forum/#!topic/bndtools-users/OrTIEE4zHv8","06/Dec/17 22:56;nbartlett;Although Embed-Dependency is not a bnd feature (it is implemented in maven-bundle-plugin), the underlying cause of the error is still bnd. See https://github.com/bndtools/bnd/issues/2227","07/Dec/17 00:04;nbartlett;The exemplar project can be made to work by adding the following configuration for the maven-bundle-plugin:

{noformat}
        <plugin>
          <groupId>org.apache.felix</groupId>
          <artifactId>maven-bundle-plugin</artifactId>
          <version>3.5.0</version>
          <configuration>
            <instructions>
              <_fixupmessages>""Classes found in the wrong directory"";is:=warning</_fixupmessages>
            </instructions>
          </configuration>
        </plugin>
{noformat}

Note that the classes under META-INF/versions will not be seen or used by OSGi. There needs to be enhanced runtime support for this because the version-specific classes could have their own dependencies (e.g. imports), and OSGi does not support dependencies that are conditional upon the Java runtime version. The above snippet simply converts the error to a warning allowing you to still build a bundle.
","14/Dec/17 16:15;karlpauls;I tested the project in question with the upcomming maven-bundle-plugin 3.4.0-SNAPSHOT and it works - hence, I'm resolving this issue.",14/Dec/17 16:59;io7m;Sounds good to me. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationAdmin might not be visible to SCR implementation,FELIX-5507,13036564,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,20/Jan/17 13:43,30/Apr/18 08:13,14/Mar/19 02:48,17/Feb/17 08:04,scr-2.0.8,,,,,,scr-2.1.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We have one case where the extended bundles do not see the configuration admin service. Interestingly the same application runs fine everywhere else, but just on a special environment (windows, ibm java inside Websphere) we have this problem reproducibly.
Using the system bundle context instead of the bundle context of the extended bundle in ConfigAdminTracker solves the problem.
Interestingly only the bundles started last (2 out of probably 80) see the configuration admin.
It could also be that a faulty service hook is involved, although I'm not yet aware of such a hook

Update: after some discussion, some issues in the framework have been identified, but also the SCR implementation is not 100% correct: as it is using the bundle context of the extended bundle, it might get a configuration admin which interface is not visible to SCR. Therefore it should revert to reflection to access the configuration admin.",,,,,,,,,,,,,,FELIX-5546,FELIX-5545,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-01-20 18:41:03.088,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 17 08:04:50 UTC 2017,,,,,,0|i38zrb:,9223372036854775807,,,,,,,,"20/Jan/17 18:41;djencks;what?  Why can the system bundle context find any config admins at all?  The purpose of the ConfigAdminTracker is to find the particular config admin implementation visible to the extended bundle; for instance in IBM Websphere Liberty the ""main"" config admin instance is not visible to subsystems, so an isolated subsystem will have to include it's own config admin implementation in order to have configuration.  If you are using non-Liberty Websphere you may be running into the non-spec composite bundle way of doing isolation.","21/Jan/17 08:40;cziegeler;Afaik we're not doing any isolation at all and we're using non-Liberty Websphere. But the framework is running within a webapp and should be completely isolated from the container. So we have a single bundle space with a single config admin service. As said in all other scenarios this is working fine, just this single setup does not work.
And interestingly restarting the config admin bundle resolves the problem and the service gets visible.
I'm not entirely sure whether this is really a DS problem and switching to the system bundle as a workaround indicates to me that this has something to do with service hooks, but so far I couldn't find any.",21/Jan/17 09:03;djencks;what class loader does the ca interface come from?,21/Jan/17 09:14;cziegeler;from the Felix CA bundle,"25/Jan/17 19:45;cziegeler;I did some further investigation, the CA api package is only exported by the Apache Felix implementation, only a single CA service is registered.
The extended bundle have no import of the CA api package as they are not using it directly.
As mentioned above, using the system bundle solves the problem, using the SCR bundle to track the configuration admin solves the problem as well.

I'm not sure if the current handling RegionConfigurationSupport is really the way to go. It assumes, that there is a single SCR implementation, but different CA services per region. However it is also assumed that the CA api package is shared across the regions. Wouldn't it be easier to remove this stuff and assume that there is a local SCR service, next to the local CM service?
So it's either both are global or both are distributed across regions, but not a mixture which might fail due to the above problems anyway.","25/Jan/17 20:03;djencks;As of Sept 2016 IBM Websphere Liberty was using the single SCR/mutliple CA support, so removing it might result in some pushback.  As of that time I wasn't aware of any problems with it.

You can run with local SCR services by setting the global extender property to false.

I couldn't figure out any way to have isolated CA API.  It doesn't appear to be a problem (judging by Liberty) to share the API and not share the service implementation.

Do you understand why your setup doesn't work?  I don't.  I suspect a bug outside SCR.
","26/Jan/17 01:46;cziegeler;Unfortunately I have no clue what the problem is. I think it's definitely not CA because on that side everything looks fine. And now I tend to agree that it is not SCR either. At the moment I suspect something wired going on in the framework. Unfortunately I can't use a debugger in that environment, so it takes some time to get more info.

Anyways, I would like to have a switch, like with the global extender, that if enabled switches to use the SCR bundle context to get configuration admin. It would be off by default","26/Jan/17 05:50;djencks;I'd really prefer to find and fix the actual problem rather than introducing what is basically a bug into SCR. (in the situation where the RegionConfigurationSupport is needed, using the SCR bundle context will give the wrong result).

I suspect with a little research and imagination you could find places to log in detail what is going on that will narrow down the problem quickly.","26/Jan/17 08:47;fmeschbe;I tend to agree with [~djencks] here. IIRC the reason for using the extended bundle's context is to make sure the Configuration Admin service applies the correct permissions for the consuming bundle ! Using the system bundle completely breaks this assumption and I would even go as far as saying this is non-compliant behaviour.

It really is important to find the real cause for the problem in this context.","26/Jan/17 14:18;tjwatson;I also agree with David and Felix.  The system bundle context is going to find all Config Admin services that are registered in the system.  If you are running on a system that isolates applications, like I suspect is happening on WebSphere then that may get you a CA instance that does not apply to your application.","26/Jan/17 15:22;cziegeler;I didn't say to use the system bundle, I wanted to use the SCR bundle to get the configuration admin.
Where in the spec is defined that the extended bundle must have permissions to use config admin if it is using DS and configurations? Is this really required?
So every extended bundle needs to have service permission to get CA and permission to read configuration? Do we check this?

If you think about sub systems or any other isolation, we really have a strange setup now. SCR is using the system bundle to find all bundles to be extended. These could be in subsystems and it is then assuming that all of these bundles, regardless of where they are have visibility to the same CA api. It might be the most sensible setup, but it is definitely not the only one. For example, if I have a subsystem with some app bundles, no bundle in there might need CA directly, so my subsystem is not importing the CA api. Which means SCR will fail to extend these bundles. Is this what we want to do?

And as said I'm going to hunt the real cause - but that is independent of this discussion",26/Jan/17 15:57;tjwatson;But the SCR bundle context has the similar issue.  It may get access to a different CA than what is in the isolated region of the extendee bundle.  The reason the system bundle context works for tracking bundles to extend is because everything that the extendee consumes is being consumed from the POV (the bundle context) of the extendee bundle.  That should include consuming configurations from CA in my opinion.,"26/Jan/17 16:26;cziegeler;[~tjwatson] Yes, correct, the SCR bundle might have a similar issue - which proofs that we can't simply think that one solution fits all use cases.
I tend to agree that it makes sense to use a CA from the POV of the extendee bundle. however the simplest use case an app subsystem with a simple bundle and a simple DS service that is not importing the CA package will simply not work. I guess it would be fine to say, if that app wants to use configurations it requires an import of CA, however just looking at the bundle does not tell you that this import is required.
Or you have two app subsystems, each with their own configuration admin supporting and containing different CA versions, then the current SCR impl will break as well.
Looking at this, i guess my suggestion of the switch does not really make sense. It's maybe rather that the current code of using the extendee bundle context to get the CA is correct but it should then use reflection or any other trick as in fact that extendee bundle might be wired to a different CA package than SCR. Or at least we should catch the ClassCastException and provide a meaningful log message.","26/Jan/17 20:58;tjwatson;I agree, if the CM implementation visible to the extended bundle is not wired to the same cm service package as SCR then problems will happen if reflection is not being used.","30/Jan/17 11:15;fmeschbe;[~cziegeler] I am not sure it is explicitly stated that the CA seen by the extended bundle is to be used. But according to the principle of least surprise, that CA must be used. For example the configuration's bundle-location property is matched to the bundle location of the CA-calling bundle. If this is *not* the extended bundle, this check might fail.

[~tjwatson] I think it is counter-intuitive to expected an extended bundle to import Configuration Admin. After all DS is specified to provide the configuration as part of the activate method's parameters (either directly or in the ComponentContext). The DS spec says these properties must be extended with Configuration Admin configuration if available implying in my reading that the extended bundle does not need to import and directly access Configuration Admin.

Last but not least, I agree with [~tjwatson] that the most transparent solution indeed is to (a) use the extend bundle to retrieve the Configuration Admin service using {{BundleContext.getAllServiceReferences}} and then reflection for {{listConfiguration}}.","30/Jan/17 13:13;cziegeler;I think we should get clarification into the spec if possible - we have it in other specs, too, that it's explicetly stated that the extendee bundle is used to get a service. I agree that it makes sense to do so, but without that being stated in the spec, implementations can behave differently. Of course if there is only a single bundle space with a single configuration admin, it doesn't make a difference anyways.
Reflection for using listConfiguration is not that difficult, but SCR also registers a configuration listener, and creating that might be a little bit more tricky - but doable I guess. I personally would not go that far and make it work in all these cases but rather catch the situation and log","30/Jan/17 14:52;cziegeler;Reading the spec resovled the first question, section 112.7 : ""SCR must obtain the Configuration objects from the Configuration Admin service using the Bundle
Context of the bundle containing the component.""
So we don't need a clarification on this one, just need to figure out how far we go in our implementation","31/Jan/17 07:22;cziegeler;
I could debug it down into the framework behaving differently. The method ServiceReferenceImpl#isAssignableTo is running into case 1, usually returns ""true"" from there. But in the case where it's not working it's returning false. Continue investigation and moving issue to a framework issue","31/Jan/17 08:59;cziegeler;Case 1 means: Neither the requester, nor provider have wires for the package.
If it works, the code 
{noformat}
Class requestClass =
                            ((BundleWiringImpl) requesterRevision.getWiring())
                            .getClassByDelegation(className);
{noformat}
throws an Exception and the access is allowed.
Running in WebSphere, the first time, that above code succeeds and gets into getRegistration().isClassAccessible(requestClass).
This runs through until the end of the method were it compares Util.loadClassUsingClass with the class loaded earlier on.
The result from Util.loadClassUsingClass is correct, it returns the class loaded by the configadmin bundle, however the class loader of the previously loaded class is ""org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@3c746762[org.eclipse.osgi.services:3.3.100.v20130513-1956(id=306)]""
And then obviously we're talking about a different class

Still, the interesting part is, that refreshing the configadmin bundle solves the problem and the code mentioned at the top of this comment throws an exception

","31/Jan/17 14:17;cziegeler;The problem seems to be the implicit bootdelegation code which in some cases is able to load the ConfigurationAdmin class from outside the webapp.
Now, setting
felix.bootdelegation.implicit=false
does the trick.

I'm really wondering if that shouldn't be the default for the framework?
Atm, I don't see how to improve the code to make this happen with setting it to true.

[~rickhall] Do you have any ideas?","31/Jan/17 15:33;rickhall;I wouldn't think that setting felix.bootdelegation.implicit to false by default would be a good solution. That setting was there because we were running into to problems fairly easily without it because the JRE was making assumptions in quite a few places that it could get from any class via any class loader, which is not the case in OSGi. So, unless the JRE has removed such assumptions over time, then it isn't a good idea to change this.

As difficult as it may be, the better choice is to try to figure how to detect the current situation so that the implicit boot delegation code can be improved. Believe me, I understand that that code is ugly.

Equinox does something similar, but I doubt the two implementations agree on the details here, but it could be worthwhile to understand what it is doing.","01/Feb/17 06:11;cziegeler;[~rickhall] Thanks, ok I see. So how can we solve this?
I'm wondering if the current behaviour is in accordence with the spec. The boot delegation property is not listing the org.osgi.service.cm package, but still it is loaded from there. We also set ""org.osgi.framework.bundle.parent"" to ""framework"".
I'm not quiet sure, but I'm a little bit confused by the implementation of ServiceReferenceImpl#isAssignableTo. For Case 1 where both requester and provider have no wire, it tries to load the class using delegation anyway - at the moment I don't understand why this is done. Wouldn't it be enought to grant access and assume the class of the registration is used?","13/Feb/17 22:09;karlpauls;Ok, I looked at this issue a little bit more in depth and I think I can see what is going on.

When we did the implicit bootdelegation we really had one specific corner case in mind namely, something outside the framework (and more specifically, classes inside the jdk) assumes it can just use the class loader of the class of an object provided to it to get access to stuff it sees. That used to be the case for example in certain scenarios with swing. In order to remedy the somewhat awkward situation that people new to OSGi constantly had problems with this kind of thing we introduced our “magic hack” that would try to detect this situation as a last resort and bootdelegate automagically.

After looking at that code again I do think it could be improved but overall it still seems to be sound in regard to its original purpose (and it was always the case that in more complicated scenarios, especially around embedding, we knew it needed to be turned off - hence, the possibility to disable it). However, what happens here is that we sort of ignored the fact that it is going to happen on all classloads when we did the tests for service assignability later on (iirc, this is still code form the beginning of R4 - at least in its origins). As a consequence, we have a problem in the service lookup path when,

1) the class that instigates the lookup is coming from the outside
2) and the service class can actually be loaded from the outside but isn’t assignable to the class of the service
3) and both, the requirer and the provider, don’t have a wire to the package of the service class.

It is this specific case that is happening here and it goes like this:

The scr looks for ConfigAdmin via the bundle context of an extended bundle. That makes it so that the extended bundle doesn’t have a wire to the ConfigAdmin package (as it doesn’t use it itself) and the ConfigAdmin bundle provides the package - hence, doesn’t have a wire either (3). Next,  scr uses a ServiceTracker to track the ConfigAdmin and is importing the org.osgi.util.tracker package from the system bundle - in other words, the ServiceTracker class instigates the lookup and is coming from the outside (1). Finally, it just so happens that there is a ConfigAdmin class  outside as well that comes with equinox in websphere (2).

As a result, when the lookup happens the ConfigAdmin isn’t returned because due to the triggered boot delegation we think it might not be assignable. Now, in the second case, when the ConfigAdmin bundle gets restarted later what happens is that the tracker isn’t instigating the lookup. In that case, it gets the service via a service event which _does not_ trigger the magic and in turn makes it so that the service is delivered (thats why it works after a restart of the ConfigAdmin bundle but _not_ after a restart of the scr bundle).

TL;DR For now, the workaround with the current framework is to turn of implicit bootdelegation. For the future, we need to stop trying to implicitly bootdelegate in the service lookup.

If nobody complains, I will go ahead and create a new issue for making it so that we don’t implicitly bootdelegate when we lookup the class for checking assignability of services and link it to this issue. I’ll try to get to addressing it soon as I want to get this into a new framework release this week.","14/Feb/17 09:43;bosschaert;Hi [~karlpauls], thanks for the analysis and explaining. I still have the feeling though that the implicit bootdelegation is too wide. You say that it was designed for certain JDK/Swing scenarios. If we cannot switch it off by default (which I think would be a better default) - can we then at least limit it to certain packages?","14/Feb/17 10:51;karlpauls;I tentatively agree with you - at least in so far as that as I said, I think the detection could be (and probably should be) improved and that it probably should be off by default. However, as regards this specific issue I do think it is irrelevant as no matter what, it should not be involved in the assignability check to begin with. Consequently, let me recoin my statement about further actions as follows:

If nobody complains, I will go ahead and create 3 new issues namely,

1) Set default for implicit bootdelegation to false
2) Improve implicit boot delegation detection
3) Don't take implicit boot delegation into account on service assignability check

I'll try to get to address 3) asap and get it out with a new Felix release hopefully this week. This should address this issue at least as far as the framework is concerned. However, I agree with [~cziegeler] and [~tjwatson] comments above that there still is an SCR issue as it should (or better must) use reflection for using the service. 

In regard to 1) and 2), I can see 1) being part of a bigger release (Major bump) sometime later - possible with a release in which we claim compliance with R7 and we can work on 2) separately and get it out when it is ready.  ",14/Feb/17 15:42;cziegeler;[~kpauls] +1 for the three issues,14/Feb/17 16:20;karlpauls;I create the issues and already committed a fix for 3) in r1782982 as part of FELIX-5544.,"14/Feb/17 17:26;cziegeler;Thanks, I've repurposed this issue to work in the SCR improvement",15/Feb/17 02:24;djencks;We still have to fetch the config admin service using the bundle context of the extended bundle.  I think that unless the spec explicitly requires handling the case of inconsistent config admin classes or someone complains it is not worth the extra code complexity to use reflection to communicate with config admin.  Is there any actual useful functionality provided by implementing this?,"15/Feb/17 06:25;cziegeler;Well you assume that you have a shared config admin API across the whole system - which is a false assumption and can't be guaranteed at all. It's really wrong to assume that the config admin class you get using the extended bundle is the same as SCR sees. It might not be that common, but it's still possible.
As I've mentioned earlier on, we should at least catch the class cast exception and provide a meaningful log entry. Atm I'm not very keen on using reflection all over the place either","15/Feb/17 12:54;karlpauls;Granted, I don't know too much about how the code looks but it sounds like it shouldn't be too hard to Proxy the Configadmin with a dynamic proxy. Basically, you'd have to wrap the service lookup with something that does an instanceof and if that fails wrap the result in a dynamic proxy that just delegates all calls and wraps all results of type Configuration in yet another dynamic proxy that does delegation only. That way you at least wouldn't have to introduce reflection any place else...","15/Feb/17 22:25;djencks;I certainly agree with improving error messages.
It is obviously possible to set up a non-working subsystem by not importing the system-wide config admin api.  However, it's also obviously possible to set up a non-working subsystem by writing ds components using e.g. ComponentServiceObjects, including the ds api in the subsystem, and not importing it. In both these cases, ca and ds apis, I think the appropriate choices are:
1. import the global apis
2. run (another) ds in the subsystem and turn off global extender.

Are there any plausible use cases that one of these options doesn't cover?  Is there anything useful that you can't do with one of these choices?

IMO if you are using subsystems you have probably already made a fundamental design mistake and need to accept that you may have to go to some considerable effort to configure working subsystems. I don't think adding infinite complexity to try to eliminate every possible way of shooting yourself in the foot is a reasonable goal.","16/Feb/17 06:18;cziegeler;You are subscribing a solution because you don't want to handle it in the implementation. And this is really not infinite complexity - as Karl said, it's a simple check: do I need to proxy, if no, fine, if yes, create the proxy and done
Why can't I have a config admin including API in a subsystem and a global DS? We nowhere say something about how you should do it. Users are free to shoot themselves in the foot in any way they like
","16/Feb/17 08:32;djencks;If I thought it was a good idea I'd be happy to implement it, but I really think it's useless and a bad idea. Be sure to check that the CA package version is high enough to work with ds -- at a minimum you need the configuration version method.

I'd hope config admin implementations include the api, so my suggestion is to pull in the external ca api to the subsystem, just as you are likely to have to pull in the ds apis.","16/Feb/17 14:16;tjwatson;You will also have to proxy a configuration listener which can get registered and found by the CM implementation.  I doubt you can use the SCR bundle context to do such a thing because the CM implementation likely will not see the listener and besides the framework should disallow it because the listener type is not going to be the correct type according to the SCR impl.  I'm not sure what context SCR is using for the listener today, but it will likely have to be using the component bundle's context or some other bundle that the CM implementation can see and is wired to no CM package or the correct one.

If you decide to do this please have it disabled by default and have an option to enable it.  I fear this complication will be full of bugs for a few releases until all the kinks worked out.  I would not want to have such a corner case impact the vast majority of users today.","16/Feb/17 17:08;karlpauls;Again, I'm not sure I understand all the implications but it sounds to me like you want to have your cake and eat it too. 

Either SCR uses its own bundle context (whichever that is in the case of a ""subsystem"" - maybe the system bundle context) to look up the CM and register listeners with or it uses the bundle context of the extended bundle. 

In the former case, SCR has no problems with class loading and it just so happens that a bundle extended by SCR will get the configurations from the CM visible to the SCR. 

In the latter case, the bundle will get the configurations from the CM visible to the bundle but the SCR must deal with the possibility that the bundle might not be wired to the same CM the SCR can see. 

To basically say we want the CM visible to the bundle but we just assume it is the one the SCR can see as well sounds like an unnecessary complication to me. If that is the assumption anyways you might as well just make that explicit and use the SCR bundle context to begin with no? 

Again, feel free to ignore me as I likely just don't have all the info.","16/Feb/17 22:47;djencks;Philosophically I think that if OSGI has to resort to reflection to access an osgi spec interface we've failed.

On the other hand there might be a potential use case for this:
Commercial server based on OSGI that is not updated all that often (say stuck at R7 for the next 10 years)
subsystem in it that wants to use an R8 config admin (assuming R8 updates the config admin spec).  This can't be wired to the R7 config admin api from the server.  Is this a realistic scenario or will the R8 config admin also require R8 framework so not run in the R7 server anyway?

Assuming my reservations about doing this are overruled:
Finding the bundle for the ca is already  done in RegionConfigurationSupport, so that can be used to load the SynchronousConfigurationListener and ManagedService (for configuration plugin support) interfaces in order to create dynamic proxies.

Contrary to some other suggestions, I think that there should only be one code path using proxies for objects we create and reflection on stuff we get from config admin, and no separate path for compatible config admin apis.  No one is ever going to use this support, so if we want it to work we have to use the code path all the time to find the bugs.

I will reiterate again:
- requiring a subsystem to import the config admin api as well as the ds api is not a large burden.
- I think waiting until someone requests this feature because they actually want to use it would be wise.

Karl:

""In the latter case, the bundle will get the configurations from the CM visible to the bundle but the SCR must deal with the possibility that the bundle might not be wired to the same CM the SCR can see.""
This is not quite right.  We want to look for the CM service visible to the extended bundle, but the extended bundle doesn't necessarily have any wires to the CM api.  Currently we deal with the case where the CM api is not the same as the CM api visible to DS by not using it and emitting an error message (to be improved).  I think  that's fine.","17/Feb/17 06:40;cziegeler;In rev 1783333 I've added a little bit of code to catch the situation and log an error. If we can agree at least on this change, I think we can close this issue","17/Feb/17 07:43;djencks;rev 1783333 looks great to me, thanks!",17/Feb/17 08:04;cziegeler;Thanks [~djencks]. ,,
OSGi's @Component parameter configurationPid is handled incorrectly,FELIX-5506,13036540,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,islandsvinur,islandsvinur,20/Jan/17 12:30,11/Sep/17 20:02,14/Mar/19 02:48,08/Sep/17 08:41,scr ds annotations 1.2.8,,,,,,scr ds annotations 1.2.10,,,,,,,SCR Tooling,,,,,,1,,,,,,"Given the following class:

{code:java}
package xxx;

import org.osgi.service.component.annotations.Component;

@Component(configurationPid = ""GeneratorComponentPid"")
public class GeneratorComponent {
}
{code}

When running it through the SCR Generator, it produces the following XML:

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?><components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.2.0"">
    <scr:component name=""xxx.GeneratorComponent"" configuration-pid=""[Ljava.lang.String;@76954a33"">
        <implementation class=""xxx.GeneratorComponent""/>
    </scr:component>
</components>
{code}

I expected it to produce:

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?><components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.2.0"">
    <scr:component name=""xxx.GeneratorComponent"" configuration-pid=""GeneratorComponentPid"">
        <implementation class=""xxx.GeneratorComponent""/>
    </scr:component>
</components>
{code}

{{org.osgi.service.component.annotations.Component}} and {{org.apache.felix.scr.annotations.Component}} have different definitions for {{configurationPid}}, which might explain this behavior.",,,,,,,,,,,,,,,,,,,,17/Jul/17 13:32;mbechler;maven-scr-plugin-ds-annot-1.3.patch;https://issues.apache.org/jira/secure/attachment/12877585/maven-scr-plugin-ds-annot-1.3.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-07-17 13:35:26.051,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 08 08:41:18 UTC 2017,,,,,,0|i38zlz:,9223372036854775807,,,,,,,,"17/Jul/17 13:35;mbechler;Actually, this is caused by upstream changes in the OSGI DS annotations

{code}
// Method descriptor #33 ()Ljava/lang/String;
public abstract java.lang.String configurationPid() default """";
{code}
--> 1.3:
{code}
// Method descriptor #42 ()[Ljava/lang/String;
public abstract java.lang.String[] configurationPid() default {""$""};
{code}


Attached patch should work for both (except when there actually are multiple configurationPids defined, but the other 1.3 features are not yet supported anyhow).",07/Sep/17 09:04;henningtreu;Is there a plan to apply this patch and release a new version of org.apache.felix.scr.ds-annotations? We now need to provide our own AnnotationProcessor to proceed with DS Annotations 1.3.,"08/Sep/17 08:18;kkreuzer;FTR, if anybody stumbles across this and requires a fixed version: I have published a fixed binary at JCenter here: https://jcenter.bintray.com/org/openhab/org.apache.felix.scr.ds-annotations/1.2.9-AG1/

Looking forward to seeing an official release of it, though!","08/Sep/17 08:41;cziegeler;Thanks [~mbechler] for your patch. It's applied

I'll start the release process",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigSpiOSGi may miss out on registering some LoginModuleFactory due to race condition,FELIX-5505,13036483,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,chetanm,chetanm,chetanm,20/Jan/17 09:15,10/Feb/17 18:40,14/Mar/19 02:48,20/Jan/17 10:37,,,,,,,jaas-1.0.0,,,,,,,JAAS,,,,,,0,,,,,,"{{ConfigSpiOsgi}} currently looks for {{LoginModuleFactory}} and upon registration of any factory it recreates its {{Realm}} state. 

This logic has a race condition where concurrent addition of {{LoginModuleFactory}} may lead to some of them getting missed from getting registered in the Realm",,,,,,,,,,,,,,,,,,,,20/Jan/17 10:01;chetanm;FELIX-5505-v1.patch;https://issues.apache.org/jira/secure/attachment/12848504/FELIX-5505-v1.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-01-20 10:26:51.988,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 20 10:37:49 UTC 2017,,,,,,0|i38z9b:,9223372036854775807,,,,,,,,20/Jan/17 09:39;chetanm;Added ignored test with 1779592,"20/Jan/17 10:01;chetanm;[patch|^FELIX-5505-v1.patch] for the same

[~cziegeler] [~bosschaert] Would be helpful if you can review the patch","20/Jan/17 10:26;cziegeler;[~chetanm] Patch looks good to - it seems ConfigSpiOSGi is never unregistered, not sure if that should be added (but it was never unregistered before this patch either)","20/Jan/17 10:37;chetanm;Thanks Carsten for the review

Took care of unregistering the spi in close

Applied the patch in 1779601",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Startup logs from ConfigSpiOsgi may get dropped due to race condition,FELIX-5502,13036436,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,chetanm,chetanm,chetanm,20/Jan/17 05:31,30/Jan/17 06:46,14/Mar/19 02:48,20/Jan/17 09:38,,,,,,,jaas-1.0.0,,,,,,,JAAS,,,,,,0,,,,,,"Felix JAAS bundle Activator [1] starts the Logger tracker *after* creating {{ConfigSpiOsgi}} instance. Due to this some log statements may get missed out if config admin invokes managed service update before logger tracker is opened which would cause the logger to drop those messages

[1] https://github.com/apache/felix/blob/trunk/jaas/src/main/java/org/apache/felix/jaas/internal/Activator.java#L49",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 20 09:38:49 UTC 2017,,,,,,0|i38yyv:,9223372036854775807,,,,,,,,20/Jan/17 09:38;chetanm;Fixed with 1779591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URL handling not correct if component has no configuration,FELIX-5494,13035311,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,16/Jan/17 19:35,24/Jan/17 12:30,14/Mar/19 02:48,24/Jan/17 12:30,webconsole-ds-plugin-2.0.2,webconsole-ds-plugin-2.0.4,,,,,webconsole-ds-plugin-2.0.6,,,,,,,Web Console,,,,,,0,,,,,,"If a component description has no component configurations, no ""id"" is available and in this case name and pid are used. This handling is broken in the web console plugin and also in the js script",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 16 19:39:02 UTC 2017,,,,,,0|i38s0v:,9223372036854775807,,,,,,,,16/Jan/17 19:39;cziegeler;Fixed the url handling in rev 1779088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component descriptions requiring a policy are not displayed if config is missing,FELIX-5493,13035310,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,16/Jan/17 19:33,24/Jan/17 12:31,14/Mar/19 02:48,16/Jan/17 19:39,webconsole-ds-plugin-2.0.2,webconsole-ds-plugin-2.0.4,,,,,webconsole-ds-plugin-2.0.6,,,,,,,Web Console,,,,,,0,,,,,,"If a component requires a configuration but config admin has no configuration for this pid, the component description is not displayed at all",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 16 19:39:20 UTC 2017,,,,,,0|i38s0n:,9223372036854775807,,,,,,,,16/Jan/17 19:39;cziegeler;Added output for this case to plugin and configuration printer in rev 1779088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DS Plugin should use PID from ComponentDescriptionDTO,FELIX-5488,13034534,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,13/Jan/17 08:41,16/Jan/17 14:11,14/Mar/19 02:48,13/Jan/17 08:44,webconsole-ds-plugin-2.0.2,,,,,,webconsole-ds-plugin-2.0.4,,,,,,,Web Console,,,,,,0,,,,,,"The DS webconsole plugin is currently using the PID service property to decide whether a link to config admin should be rendered.
However, this property is only set if the component configuration is using such a configuration.
As the ComponentDescriptionDTO contains the info about the PID anyway, we can directly use that",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2017-01-13 08:41:59.0,,,,,,0|i38n7r:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Utils code requires Java 6 - should be Java 5,FELIX-5487,13034080,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,12/Jan/17 06:02,16/Jan/17 14:10,14/Mar/19 02:48,16/Jan/17 14:09,utils-1.8.4,,,,,,utils-1.8.6,,,,,,,,,,,,,0,,,,,,"Although the pom is configured to compile for target 1.5, the source is using 1.6 api",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2017-01-12 06:02:41.0,,,,,,0|i38lgv:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.felix.scr.bnd: Adding Target Source URL may lead to NPE,FELIX-5466,13030696,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,sseifert@pro-vision.de,sseifert@pro-vision.de,sseifert@pro-vision.de,27/Dec/16 13:03,02/Jan/17 10:14,14/Mar/19 02:48,27/Dec/16 13:04,scr bnd plugin 1.7.0,,,,,,scr bnd plugin 1.7.2,,,,,,,SCR Tooling,,,,,,0,,,,,,"the fix with adding the target source URL introduced in FELIX-5419 may lead to NPE when the target source returns null.
in my tests this may affect a lot of projects using maven-bundle-plugin together with org.apache.felix.scr.bnd.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 27 13:04:55 UTC 2016,,,,,,0|i381db:,9223372036854775807,,,,,,,,"27/Dec/16 13:04;sseifert@pro-vision.de;Completed: At revision: 1776116  

added additional null checks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.NullPointerException at org.apache.felix.scrplugin.helper.ClassScanner.processClass(ClassScanner.java:207),FELIX-5464,13030053,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,anoehrer,anoehrer,22/Dec/16 09:19,15/Jan/18 05:54,14/Mar/19 02:48,08/Nov/17 15:29,scr generator 1.15.0,,,,,,maven-scr-plugin-1.26.0,scr ant task 1.18.0,scr bnd plugin 1.9.0,scr generator 1.18.0,,,,SCR Tooling,,,,,,1,,,,,,"I am encountering this problem on and off again only within our Jenkins build environment, I cannot reproduce it locally with the same java and maven version. Also after some code changes not related to SCR annotated classes it works again then it doesn't.

Unfortunately I also was not able to produce a minimum example to reproduce this.

Basically I guess what would already help, is to check against 'null' and log the 'pathToClassFile' that caused the input to be 'null'.

By the way I wanted to do this myself just to get more information what is wrong in my environment, however the http://felix.apache.org/downloads.cgi links for the generator sources return 404...

Here the output on Jenkins:

[ERROR] Failed to execute goal org.apache.felix:maven-scr-plugin:1.23.0:scr (generate-scr-scrdescriptor) on project XXX: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.23.0:scr failed. NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.23.0:scr (generate-scr-scrdescriptor) on project inew-commons-rest-exporter-rest: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.23.0:scr failed.
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.jvnet.hudson.maven3.launcher.Maven33Launcher.main(Maven33Launcher.java:129)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchStandard(Launcher.java:330)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:238)
	at jenkins.maven3.agent.Maven33Main.launch(Maven33Main.java:176)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at hudson.maven.Maven3Builder.call(Maven3Builder.java:133)
	at hudson.maven.Maven3Builder.call(Maven3Builder.java:68)
	at hudson.remoting.UserRequest.perform(UserRequest.java:153)
	at hudson.remoting.UserRequest.perform(UserRequest.java:50)
	at hudson.remoting.Request$2.run(Request.java:336)
	at hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:68)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.23.0:scr failed.
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	... 31 more
Caused by: java.lang.NullPointerException
	at org.apache.felix.scrplugin.helper.ClassScanner.processClass(ClassScanner.java:207)
	at org.apache.felix.scrplugin.helper.ClassScanner.getDescription(ClassScanner.java:433)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.createComponent(SCRDescriptorGenerator.java:398)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:161)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:238)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	... 32 more","Jenkins 2.36
Maven 3.3.9
Java 1.7.0_79",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-30 01:28:51.76,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 08 15:29:11 UTC 2017,,,,,,0|i37xef:,9223372036854775807,,,,,,,,"30/Oct/17 01:28;githubbot;GitHub user sjhiggs opened a pull request:

    https://github.com/apache/felix/pull/126

    FELIX-5464: NPE in org.apache.felix.scrplugin.helper.ClassScanner

    Couldn't make this happen by invoking public method in a unit test, but checked for null InputStream before closing, logged debug message otherwise.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sjhiggs/felix FELIX-5464

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/126.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #126
    
----
commit fb55f8043dd06501803aa1028102d7affea2f186
Author: Stephen Higgs <shiggs@redhat.com>
Date:   2017-10-30T01:12:17Z

    FELIX-5464: NPE in org.apache.felix.scrplugin.helper.ClassScanner

----
",08/Nov/17 15:29;cziegeler;Thanks for the patch [~anoehrer]. I've applied just the null check in 1814590,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR bnd plugin fails when embedding jars with optional/excluded dependencies,FELIX-5452,13028836,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,sseifert@pro-vision.de,sseifert@pro-vision.de,17/Dec/16 00:14,24/Dec/16 14:59,14/Mar/19 02:48,19/Dec/16 16:02,scr bnd plugin 1.6.0,scr generator 1.15.0,,,,,maven-scr-plugin-1.24.0,scr ant task 1.17.0,scr bnd plugin 1.7.0,scr generator 1.16.0,,,,SCR Tooling,,,,,,0,,,,,,"when the maven-bundle-plugin is used to embedded JAR dependencies, and those dependencies contain optional or excluded further dependencies which classes are somewhere references in the dependency itself SCR generation via maven-bundle-plugin and the SCR bnd plugin fails.

it does *not* fail when using the maven-scr-plugin.

the reason for the difference is that the maven-scr-plugin analyzes only the classes compiled in the target folder, not the classes of embedded dependencies. the bnd plugin cannot differentiate if the classes in the bundle jar where embedded or compiled and always scans all of them.",,,,,,,,,,,,,,,,,,,,17/Dec/16 00:23;sseifert@pro-vision.de;FELIX-5452.patch;https://issues.apache.org/jira/secure/attachment/12843674/FELIX-5452.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-12-19 15:49:18.963,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Dec 19 16:02:30 UTC 2016,,,,,,0|i37pw7:,9223372036854775807,,,,,,,,"17/Dec/16 00:18;sseifert@pro-vision.de;example - with this project using maven-scr-plugin it works:
https://github.com/stefanseifert/FELIX-5452-testproject/tree/master/maven-scr-plugin

with the project using scr bnd plugin it fails:
https://github.com/stefanseifert/FELIX-5452-testproject/tree/master/bnd-scr-plugin

with this error:
{noformat}
[ERROR] Bundle sample:sample.handlebars:bundle:1.0.0-SNAPSHOT : Got unexpected exception while analyzing:org.apache.felix.scrplugin.SCRDescriptorException: Unable to load compiled class: com.github.jknack.handlebars.internal.js.RhinoHandlebars
        at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:152)
        at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:146)
        at org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin.analyzeJar(SCRDescriptorBndPlugin.java:178)
        at aQute.bnd.osgi.Analyzer.doPlugins(Analyzer.java:656)
        at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:209)
        at aQute.bnd.osgi.Builder.analyze(Builder.java:385)
        at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:687)
        at aQute.bnd.osgi.Builder.build(Builder.java:105)
        at org.apache.felix.bundleplugin.BundlePlugin.buildOSGiBundle(BundlePlugin.java:972)
        at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:470)
        at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:387)
        at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:378)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: java.lang.NoClassDefFoundError: org/mozilla/javascript/NativeObject
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)
        at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:368)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:362)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:361)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at java.lang.Class.getDeclaredClasses0(Native Method)
        at java.lang.Class.getDeclaredClasses(Class.java:1867)
        at org.apache.felix.scrplugin.helper.ClassScanner.process(ClassScanner.java:186)
        at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:146)
        ... 33 more
Caused by: java.lang.ClassNotFoundException: org.mozilla.javascript.NativeObject
        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        ... 48 more
{noformat}","17/Dec/16 00:23;sseifert@pro-vision.de;patch proposal: [^FELIX-5452.patch]

this logs a WARN message when classes not found during analyzing instead of breaking the build.","19/Dec/16 15:49;cziegeler;[~sseifert@pro-vision.de] Thanks for the issue. This patch changes the scr generator, which is used by both maven scr plugin and the bnd plugin. So it changes the behaviour for both (not throwing an exception). I assume this is ok, but just want to cross check before applying","19/Dec/16 15:52;sseifert@pro-vision.de;yes, i think this is ok. in the maven-scr-plugin it should be quite impossible that class not found exceptions occur, because the generator gets only the class files that where compiled immediately before in the maven build.","19/Dec/16 16:02;cziegeler;Thanks for your patch, it's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Input/Output streams not properly closed in org.apache.felix.scr.generator,FELIX-5451,13028826,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,sseifert@pro-vision.de,sseifert@pro-vision.de,16/Dec/16 23:37,24/Dec/16 14:59,14/Mar/19 02:48,19/Dec/16 15:45,scr generator 1.15.0,,,,,,maven-scr-plugin-1.24.0,scr ant task 1.17.0,scr bnd plugin 1.7.0,scr generator 1.16.0,,,,SCR Tooling,,,,,,0,,,,,,"in various places intput streams and output streams are not closed properly for org.apache.felix.scr.generator. this may lead to locked files.

on a windows machine even the unit test did fail because of this.",,,,,,,,,,,,,,,,,,,,16/Dec/16 23:38;sseifert@pro-vision.de;FELIX-5451.patch;https://issues.apache.org/jira/secure/attachment/12843669/FELIX-5451.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-12-19 15:45:13.722,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Dec 19 15:45:13 UTC 2016,,,,,,0|i37ptz:,9223372036854775807,,,,,,,,16/Dec/16 23:38;sseifert@pro-vision.de;patch attached: [^FELIX-5451.patch],19/Dec/16 15:45;cziegeler;Thanks for the patch [~sseifert@pro-vision.de]. It's applied,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Http Service ignores Whiteboard Servlet API Listeners,FELIX-5446,13027411,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,fmeschbe,fmeschbe,12/Dec/16 09:54,06/Jan/17 12:01,14/Mar/19 02:48,21/Dec/16 10:56,http.base-3.0.16,http.bridge-3.0.16,http.jetty-3.4.0,,,,http.base-3.0.18,http.bridge-3.0.18,http.jetty-3.4.2,,,,,HTTP Service,,,,,,0,,,,,,"Situation:

# A ServletRequestListener registered with the Http Whiteboard Service (standard OSGi Http Whiteboard) with property {{osgi.http.whiteboard.listener==true}}.
# A Servlet registered with the traditional OSGi HttpService

Problem: The ServletRequestListener is not called for requests for requests to said servlet.

Investigation: It looks like the ServletRequestListenerManager used to handle ServletRequestListener services for traditionally registered Servlets explicitly ignores listeners registered with the {{osgi.http.whiteboard.listener}} property set. See this code in [ServletRequestListenerManager|https://github.com/apache/felix/blob/trunk/http/base/src/main/java/org/apache/felix/http/base/internal/service/listener/ServletRequestListenerManager.java#L45].

For one thing, the listener should at best ignore services registered with the property set to true. If the property is set to anything else, it will explicitly be ignored by the OSGi Whiteboard Http Service and thus should probably be accepted by the legacy Felix Http Service implementation.

On the other hand: Why ignore at all ? Originally the legacy Felix Http Service accepted all Servlet API listeners regardless of such property set. So if there is a listener used and the Jetty bundle is updated and the service updated to make sure it is called for new OSGi Whiteboard services it will not be called any more for the legacy registered services

I think the legacy Felix Http Service should just accept all listeners like it always did.",,,,,,,,,,,,,,SLING-6378,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-12 12:19:40.872,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 21 10:55:39 UTC 2016,,,,,,0|i37h3r:,9223372036854775807,,,,,,,,"12/Dec/16 11:37;fmeschbe;I have looked again, and it looks like the Http Service Web Console plugin indeed *lists* the listener for the servlet context ""'org.osgi.service.http"" where the HttpService registered services are listed. But the listener is not called.","12/Dec/16 12:19;cziegeler;The web console uses the DTOs.

There are two context implementations, one for the context of the http service and the other one for the whiteboard contexts. I assume that the context implementation for the http service is not considering the listeners registered through the official whiteboard but just calling the listeners registered through the old felix whiteboard.
I think the problematic part is the ServletContextManager class which is not considering listeners from the official whiteboard","14/Dec/16 14:04;cziegeler;As a first step, I added a test case in rev 1774247, the test is partially disabled for now","21/Dec/16 10:55;cziegeler;Fixed the implementation in rev 1775388
With this change I could remove a lot of duplicate code that was used to handle the listeners registered through the proprietary Felix whiteboard. Now the same code as for the http whiteboard is used, making everything easier.
Updated tests to verify the behaviour",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Frequent Changes cause UpdateThread to ConcurrentModificationException,FELIX-5443,13026083,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,fabianlange,fabianlange,06/Dec/16 18:50,02/Feb/17 10:07,14/Mar/19 02:48,29/Dec/16 07:10,configadmin-1.8.8,,,,,,configadmin-1.8.14,,,,,,,Configuration Admin,,,,,,0,,,,,,2016-11-30T10:20:15.614+0000 | ERROR | 836-1bc8-4066-963b-9b9cbccbd9d0) | configadmin | org.apache.felix.configadmin - 1.8.8 | Unexpected problem executing task java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextNode(HashMap.java:1437)[:1.8.0_101] at java.util.HashMap$KeyIterator.next(HashMap.java:1461)[:1.8.0_101] at java.util.AbstractCollection.toArray(AbstractCollection.java:196)[:1.8.0_101] at org.apache.felix.cm.impl.Factory.store(Factory.java:126)[4:org.apache.felix.configadmin:1.8.8] at org.apache.felix.cm.impl.ConfigurationManager$DeleteConfiguration.run(ConfigurationManager.java:1851)[4:org.apache.felix.configadmin:1.8.8] at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:143)[4:org.apache.felix.configadmin:1.8.8] at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:110)[4:org.apache.felix.configadmin:1.8.8] at java.lang.Thread.run(Thread.java:745)[:1.8.0_101],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-07 10:13:16.702,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 29 14:16:45 UTC 2016,,,,,,0|i378wn:,9223372036854775807,,,,,,,,"06/Dec/16 18:58;fabianlange;The root cause here seems to be that multiple threads in parallel modify the same Factory (org.apache.felix.cm.impl.Factory) (in my case probably a concurrent create and delete of a config)
The Factory uses a non Threadsafe datastructure (hashSet)

A probably good fix is to make that HashSet a concurrent data structure.","06/Dec/16 19:18;fabianlange;However not 100% sure, probably the access needs to be guarded on a higher level, but using Collections.newSetFromMap(new ConcurrentHashMap()); should reduce the chance of problems. more problems only could occur if the store calls get reordered, so an earlier store is called later.","07/Dec/16 10:13;githubbot;GitHub user CodingFabian opened a pull request:

    https://github.com/apache/felix/pull/78

    [FELIX-5443] Synchronize access to factory when updating and storing associated pids.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/CodingFabian/felix config-concurrent-modification

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/78.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #78
    
----
commit 8fde2e86086c437dcf52f0e6a9f4ed340cc37b74
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   2016-12-07T08:02:59Z

    [FELIX-5443] Synchronize access to factory when updating and storing associated pids.

----
","07/Dec/16 12:06;fmeschbe;Good catch. Current uses do not seem to trigger this much concurrency in this context ...

How about replacing the internal set with an immutable variant:

{code}
Index: Factory.java
===================================================================
--- Factory.java	(Revision 1773058)
+++ Factory.java	(Arbeitskopie)
@@ -20,6 +20,7 @@
 
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.Dictionary;
 import java.util.HashSet;
 import java.util.Hashtable;
@@ -41,7 +42,7 @@
     public static final String FACTORY_PID_LIST = ""factory.pidList"";
 
     // the set of configuration PIDs belonging to this factory
-    private final Set pids = new HashSet();;
+    private Set pids;
 
 
     static boolean exists( PersistenceManager persistenceManager, String factoryPid )
@@ -67,6 +68,7 @@
     Factory( ConfigurationManager configurationManager, PersistenceManager persistenceManager, String factoryPid )
     {
         super( configurationManager, persistenceManager, factoryPid );
+        this.pids = Collections.unmodifiableSet( Collections.emptySet() );
     }
 
 
@@ -77,6 +79,7 @@
 
         // set pids
         String[] pidList = ( String[] ) props.get( FACTORY_PID_LIST );
+        HashSet pids = new HashSet();
         if ( pidList != null )
         {
             for ( int i = 0; i < pidList.length; i++ )
@@ -84,6 +87,7 @@
                 pids.add( pidList[i] );
             }
         }
+        this.pids = Collections.unmodifiableSet( pids );
     }
 
 
@@ -101,19 +105,25 @@
 
     Set getPIDs()
     {
-        return new HashSet( pids );
+        return this.pids;
     }
 
 
     boolean addPID( String pid )
     {
-        return pids.add( pid );
+        HashSet pids = new HashSet();
+        boolean added = pids.add( pid );
+        this.pids = Collections.unmodifiableSet( pids );
+        return added;
     }
 
 
     boolean removePID( String pid )
     {
-        return pids.remove( pid );
+        HashSet pids = new HashSet();
+        boolean removed = pids.remove( pid );
+        this.pids = Collections.unmodifiableSet( pids );
+        return removed;
     }
 
 
@@ -120,6 +130,7 @@
     void store() throws IOException
     {
         Hashtable props = new Hashtable();
+        Set pids = this.pids;
 
         if ( !pids.isEmpty() )
         {
{code}

This allows us to optimize the {{getPids()}} method which is presumably called more often than {{addPid}} and {{removePid}} which become more expensive.","07/Dec/16 16:53;fabianlange;yes I considered that, the problem is that you could get out of order stores:

addPid()
store()
removePid()
store()
addPid()
store()

could be reordered to:

addPid()
store()
removePid()
addPid()
store()
store()

which might be invalid intermediate state.","21/Dec/16 13:28;cziegeler;[~fmeschbe], [~fabianlange] What about adding a locking based on the PID? We could lock on create,update,delete ensuring that only one task modifies a single configuration. Different configs can be modified in parallel","21/Dec/16 14:23;fabianlange;That would work [~cziegeler], but would also increase the complexity.
ideally the factory would only perform safe atomic operations, so its users do not care about that, but as long as users call add()+store() or remove()+store() there can be update races, which my PR prevents.
Making the Map not throw a concurrent modification exception would only solve half of the problem.
therefor i still support my PR :)","22/Dec/16 05:52;cziegeler;:) I'm not sure if locking all PID is really increasing complexity. Looking at your patch, you do a locking on the factory (pid) which is basically the same as I suggest. The difference being that your patch does it only for factory configurations",29/Dec/16 07:10;cziegeler;Thanks for your patch [~fabianlange]. I applied it,"29/Dec/16 14:16;githubbot;Github user CodingFabian closed the pull request at:

    https://github.com/apache/felix/pull/78
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot load native libraries in Windows Server 2012 with the name win32,FELIX-5439,13025444,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,nroduit,nroduit,04/Dec/16 21:37,19/Feb/17 08:24,14/Mar/19 02:48,19/Feb/17 08:24,framework-5.6.0,,,,,,framework-5.6.2,,,,,,,Framework,,,,,,0,,,,,,"With a bundle config:
<Bundle-NativeCode>lib/jnilibijg.dll; processor=x86-64; osname=win32</Bundle-NativeCode>

The dll won't be loaded on Windows Server 2012.

To fix this issue add the following properties in resources/default.properties:
felix.native.osname.alias.windowsserver2012=windows server 2012,win32",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-04 21:48:33.512,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Sun Dec 04 21:48:33 UTC 2016,,,,,,0|i374yn:,9223372036854775807,,,,,,,,04/Dec/16 21:48;mcculls;Sounds like a duplicate of https://issues.apache.org/jira/browse/FELIX-5184 (not yet fixed),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Webconsole Ranking in the Http Jetty bundle is always zero,FELIX-5437,13024773,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,swimmesberger,swimmesberger,01/Dec/16 13:51,06/Jan/17 12:01,14/Mar/19 02:48,21/Dec/16 11:29,http.base-3.0.16,http.bridge-3.0.16,http.jetty-3.4.0,,,,http.base-3.0.18,http.bridge-3.0.18,http.jetty-3.4.2,,,,,HTTP Service,,,,,,0,,,,,,"In the HttpServicePlugin class the method ""getServiceReference(long)"" returns always null because the filter supplied to the ""context.getServiceReferences(String, String)"" method is invalid. The exception thrown is catched and ignored therefore null is returned. In the Webconsole every service gets the rank ""0"" as a consequence.

{code}
org.osgi.framework.InvalidSyntaxException: Filter ended abruptly: (service.id=x
{code}

To fix the bug it is probably only necessary to change the filter from:
{code}
""("" + Constants.SERVICE_ID + ""="" + String.valueOf(serviceId)
{code}
to
{code}
""("" + Constants.SERVICE_ID + ""="" + String.valueOf(serviceId) + "")""
{code}

I'm using the bundle in equinox.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-21 11:29:37.169,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 21 11:29:37 UTC 2016,,,,,,0|i370tj:,9223372036854775807,,,,,,,,21/Dec/16 11:29;cziegeler;Thanks for your patch [~swimmesberger]. I've fixed the issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Service does not get loaded with updated properties that have been modified on file system after felix framework restart,FELIX-5435,13024601,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,alinbrici,alinbrici,30/Nov/16 22:45,02/Feb/17 10:07,14/Mar/19 02:48,28/Dec/16 07:14,configadmin-1.8.0,configadmin-1.8.12,configadmin-1.8.8,,,,configadmin-1.8.14,,,,,,,Configuration Admin,,,,,,0,,,,,,"In felix.scr 2.0.6, seeing an issue where a configuration for a particular Service is not loaded. 

We have one @Component(Componenent A) that offers one service, lets call this Service A. 

ComponenetA attributes are as follows: {noformat}(name=""ServiceA"", policy= ConfigurationPolicy.REQUIRE, metatype=true, immediate=true) {noformat}

ServiceA has a configuration that could look like this:
{noformat}
{
	""name"" : ""ServiceA"",
	""description"" : ""Displays which version it has of ServiceB"",
	""versionRequired"" : ""1""
}
{noformat}
We have a second @Component(Component B) that offers another service, lets call that Service B. 

The Component attributes for Component B are as follows: {noformat}(name:""ServiceB"", policy=ConfigurationPolicy.OPTIONAL, metatype=true, immediate=true).{noformat}
(I understand with immediate=true and ConfiguraitonPolicy.OPTIONAL, Service B will be initialized without any configuration when it first gets started by the framework, however if there is configuration for it on the file system, Felix DS will reload Service B with what is on file system when it scans the directory for ServiceB configuraiton). 

Service B, has some properties in the configuraiton for it, that are used by ServiceA if ServiceB has been loaded with configuration. For example say we have a configuration for ServiceB that looks like this. 
{noformat}
{
	""name"" : ""ServiceB"",
	""description"" : ""is used by ServiceA""
	""version"" : ""1""
}
{noformat}

Service A has a reference to Service B, as so:
{noformat}
@Reference(policy = ReferencePolicy.DYNAMIC)
volatile ServiceB serviceB = null;

For example if we have something like this for ComponentA/ServiceA, I will keep the code short to illustrate the problem. 
	@Component(name = ""ServiceA"",
        policy = ConfigurationPolicy.REQUIRE,
        metatype = true,
        description = ""ComponentA with ServiceA"",
        immediate = true)
	@Service(value = {ServiceAInterface.class})
	public class ServiceA implements ServiceAInterface {

		private String version; 
		private String description; 
		private Json config = null;

		// version requested by VersionB 
		private String versionRequested;

		@Reference(policy = ReferencePolicy.DYNAMIC)
		volatile ServiceB serviceB;

		@Activate
		protected void activate(ComponentContext context) {
			this.config = getConfigFromComponentContext(context);
			this.description = config.get(""description"");
			this.versionRequested = config.get(""versionRequested"");

			// get the version that ServiceA config requests 
			serviceB.getVersionAsStringAsync(versionRequested).thenOnResult(
				this.version = versionFromServiceB; 
			);
		}

		// @Deactivate method would go here

		@override
		public String getVersion() {
			if (version != null) {
				return version;
			} else {
				return ""No Version has been set yet!"";
			}
		}		

	}
{noformat}
For the scenario where this problem exists we need a configuration for both ServiceA and ServiceB. The configuration is stored on the file system in some directory that felix watches to load changes as they occur. /tmp/felixConfig/ ServiceA.json ServiceB.json.   

Start up the Felix OSGi environment with the configuration and what I see is that it works as expected. ServiceA waits until it has its @Refernce to ServiceB satisfied before it attempts to activate as expected. Then if I made a call to ServiceA#getVersion(""1""), and ServiceB is up and running with configuration from the file that was found, ServiceA will be able to get the version. 

Here is where the problem is. I shutdown the OSGi Framework. Then I change the configuration to both ServiceA and ServiceB, ""versionRequired"" : ""2"" and ""version"" : ""2"", respectively. I then start the OSGi framework back up and now ServiceA does not load correctly in the ComponentRegistry as ""versionRequired"" : ""2"", but rather has the old version, ""1"". I see that felix.scr picked up the changes and is attempting to notify all the ConfigurationListener(org.osgi.service.cm.ConfigurationListener) implementations. 

The setup I am working with picks up a change and makes a call to org.apache.felix.cm.impl.ConfigurationAdapter#update, 
{noformat}
	@Override 
    public void update( Dictionary<String, ?> properties ) throws IOException
    {
        delegatee.getConfigurationManager().log( LogService.LOG_DEBUG, ""update(properties={0})"", new Object[]
            { properties } );

        checkActive();
        checkDeleted();
        delegatee.update( properties );
    }
{noformat}   
{noformat}
** An Important NOTE **
I set a breakpoint at `delegatee.update(properties)`. When I look here at the `configurations` inside the ConfigurationAdapter->ConfigurationAdmin->configurations, the configuration for ServiceA is not here! The configuration for ServiceB is in that list of configurations. IF I look at a previous version of felix.scr, 2.0.2, I see ServiceA in that list of configurations..it no longer is there, in version 2.0.4,2.0.6, and trunk and this will result in the problem because the revision number will not be updated.
**      **
{noformat}    

These properties are the new properties for ServiceA, that has the the versionRequested attribute in the ServiceA object updated to versionRequest = 2, because I changed it on the file system when the system was down and on startup of the framework it pick up those changes on the file system and is attempting to propagate this configuration to all necessary services that require it. 

Digging deeper in the call to delegatee.update( properties), is implemented in org.apache.felix.cm.impl#update(Dictionary<String, ?> properties) as so, 
{noformat}
  * @see org.osgi.service.cm.Configuration#update(java.util.Dictionary)
     */
    public void update( Dictionary<String, ?> properties ) throws IOException
    {
        PersistenceManager localPersistenceManager = getPersistenceManager();
        if ( localPersistenceManager != null )
        {
            CaseInsensitiveDictionary newProperties = new CaseInsensitiveDictionary( properties );

            getConfigurationManager().log( LogService.LOG_DEBUG, ""Updating config {0} with {1}"", new Object[]
                { getPidString(), newProperties } );

            setAutoProperties( newProperties, true );

            // persist new configuration
            localPersistenceManager.store( getPidString(), newProperties );

            // finally assign the configuration for use
            configure( newProperties );

            // if this is a factory configuration, update the factory with
            // do this only after configuring with current properties such
            // that a concurrently registered ManagedServiceFactory service
            // does not receive a new/unusable configuration
            updateFactory();

            // update the service and fire an CM_UPDATED event
            getConfigurationManager().updated( this, true );
        }
    }
{noformat}
The intresting thing here is that the reference now to 'this' ConfigurationImpl seen on the code above `getConfigurationManager().updated( this, true );`
has the new revision, and properties of the ConfigurationImpl, but later on when we dig deeper in the call to getConfigurationManager().updated( this, true ); 
we will see that we cannot find the ConfigurationImpl(with the UPDATED revision and properties) in the list of Configurations of the ConfirurationAdmin.

Following the getConfigurationManager().updated( this, true ); code brings us to where the ConfigurationManager perpares the eventTread and the UpdateThread as so:

org.apache.felix.cm.impl.ConfigurationManager
{noformat}
	void updated( ConfigurationImpl config, boolean fireEvent )
    {
        if ( fireEvent )
        {
            fireConfigurationEvent( ConfigurationEvent.CM_UPDATED, config.getPidString(), config.getFactoryPidString() );
        }
        updateThread.schedule( new UpdateConfiguration( config ) ); // this will occur with the correct revision...
        log( LogService.LOG_DEBUG, ""UpdateConfiguration({0}) scheduled"", new Object[]
            { config.getPid() } );
    }
{noformat}
One very important thing to note here is that the `ConfigurationImpl config` passed into this updated(config, fireEvent) method has the correct `revision` and `properties`. 
That ConfigurationImpl is not passed into the `fireConfigurationEvent`, but we later look it up in the ConfigAdmin...which we will see that it is not there, and this is what I believe to be the root of the problem.

Before we get to the updateThread.schedule(), lets go ahead into the fireConfiguraitonEvent() which creates a new FireConfigurationEvent object for both asyncSender and for 
syncSender, I did not have any syncSender so that could be ignored. This new object gets scheduled in the `eventThread`. This thread will then loop through each ConfigurationListener
and passes the ConfiguraitonEvent that it had created letting them know about the changed. 

Using from the sample I wrote above, ComponentA and all its properties are part of this ConfigurationEvent. The listener that is having problems actually doing anything with the ConfigurationEvent is the 

org.apache.felix.scr.impl.manager.RegionConfigurationSupport#configurationEvent(ConfigurationEvent event) 

when we look at the code inside the implementation of that we see this line that is returning 
a ConfigurationInfo that has a revision that is revision=1, and the properties are the updatedProperties{version=2,etc.} instead of returning revision=2,updatedProperties{version=2,etc.}

around like 259
{noformat}
final ConfigurationInfo configInfo = getConfigurationInfo( pid, targetedPid, // This IS where the config returns the wrong revision
                                componentHolder, bundleContext );
{noformat}
If we dig deeper to understand why the ConfigurationInfo comes back with the correct updated properties but without updating the revision to 2 we will inside 

org.apache.felix.scr.impl.manager.RegionConfigurationSupport#getConfigurationInfo(final TargetedPID pid, TargetedPID targetedPid, ComponentHolder<?> componentHolder, final BundleContext bundleContext)
{noformat}
    try
        {//final ServiceReference caRef = bundleContext.getServiceReference(ComponentRegistry.CONFIGURATION_ADMIN);
            final ConfigurationAdmin ca = getConfigAdmin( bundleContext );
            try  // this looks interesting, could be getting the wrong config admin? ?
            {
                Configuration[] configs = ca.listConfigurations( filter( pid.getRawPid() ) ); <----- this ca.listConfigurations() is the problem, like I mentioned earlier in the ** NOTE **
                if ( configs != null && configs.length > 0 )
                {
                    Configuration config = configs[0];
                    return new ConfigurationInfo( config.getProperties(), config.getBundleLocation(), 
                        config.getChangeCount() );
                }
                ... the rest of the implementation
{noformat}
The problem I am seeing is the the `ConfigurationAdmin ca` does not have the configuration in its cachedConfigs
{noformat}
     // the cache of Configuration instances mapped by their PID
    // have this always set to prevent NPE on bundle shutdown
    private final HashMap<String, ConfigurationImpl> configurations = new HashMap<String, ConfigurationImpl>();
{noformat}
when it makese the call to ca.listConfigurations..
{noformat}
 				// ensure the service.pid and returned a cached config if available
                ConfigurationImpl cfg = getCachedConfiguration( pid ); <----- this returns null
                if ( cfg == null )
                {
                    cfg = new ConfigurationImpl( this, pmList[i], config ); 
                }
{noformat}
it returns no configuraiton from the cache, so then we return a new ConfigurationImpl which configures a NEW implementation of `ConfigurationImpl` from what we stored in the PersistanceManager above
at org.apache.felix.cm.impl#update(Dictionary<String, ?> properties), but the revision, because it's a NEW object, is set to 1. and when this goes back up the stack and gets to 

org.apache.felix.scr.impl.manager.ConfigurableComponentHolder#configurationUpdated()

The logical statement inside,
{noformat}
                if (oldChangeCount != null && changeCount <= oldChangeCount && factoryPid.equals(oldTargetedPID)) {
                	return false;
                }
{noformat}
is TRUE so the code immediately returns false and the Component(ComponentA) is not reconfigured with the new properties. 

This DOES NOT happen on version felix.scr 2.0.2, but tracing through that code I see a lot of code that has been refactored. The RegionConfigurationSupport has taken over what was the ConfigurationSupport. The revision changeCount has been refactored, and the CA has usage has also been refactored. 

It is broken in both 2.0.4, and 2.0.6. 

I did a manual bisect until I was able to narrow it down, here is a snapshot of when the behavior was introduced: 

{noformat}

------------------------------------------------------------------------
r1747831 | djencks | 2016-06-10 18:14:36 -0700 (Fri, 10 Jun 2016) | 1 line   <------------- TEST HERE [   BROKEN  ]

FELIX-5270 Don't set bundle location on configurations 
------------------------------------------------------------------------
{noformat}


This only started occuring after the first commit to {noformat}FELIX-5270{noformat}

Here a larger snapshot of the actual bisect steps I took: 

{noformat}
FELIX-5270 log when bundle locations are inconsistent
------------------------------------------------------------------------
r1749929 | djencks | 2016-06-23 08:57:30 -0700 (Thu, 23 Jun 2016) | 1 line   <------------- TEST HERE [   BROKEN  ] AT THIS REVISION 

FELIX-5248 missing license header
------------------------------------------------------------------------
r1749927 | cziegeler | 2016-06-23 08:48:00 -0700 (Thu, 23 Jun 2016) | 1 line

Revert rev 1749869
------------------------------------------------------------------------
r1749869 | cziegeler | 2016-06-23 04:45:33 -0700 (Thu, 23 Jun 2016) | 1 line 

add missing license header
------------------------------------------------------------------------
r1748287 | djencks | 2016-06-13 10:14:22 -0700 (Mon, 13 Jun 2016) | 1 line  

FELIX-5248 test for complaint
------------------------------------------------------------------------
r1747831 | djencks | 2016-06-10 18:14:36 -0700 (Fri, 10 Jun 2016) | 1 line   <------------- TEST HERE [   BROKEN  ] WINNER!!!

FELIX-5270 Don't set bundle location on configurations 						
------------------------------------------------------------------------
r1747329 | djencks | 2016-06-07 17:14:12 -0700 (Tue, 07 Jun 2016) | 1 line   <------------- TEST HERE [ WORKS ]

FELIX-5276 track service event before changing service properties
------------------------------------------------------------------------
r1746618 | djencks | 2016-06-02 12:36:26 -0700 (Thu, 02 Jun 2016) | 1 line    <------------- TEST HERE [   WORKS   ]

FELIX-4417 Improve logging of circular references.  Fix some problems introduced with rev 1744827 when activate changes service properties.
------------------------------------------------------------------------
r1746617 | djencks | 2016-06-02 12:36:22 -0700 (Thu, 02 Jun 2016) | 1 line    

FELIX-5264 Introduce a single State enum and use an atomic to track it, and use some optimistic locking on state changes.  This fixes the specific issue found and should provide much easier diagnosis of any remaining or new problems.
------------------------------------------------------------------------
r1746471 | gnodet | 2016-06-01 07:36:32 -0700 (Wed, 01 Jun 2016) | 1 line <-------- TEST HERE [ WORKS ]

[FELIX-5243] Make ComponentContextImpl#setImplementationAccessible public, similar to setImplementationObject
------------------------------------------------------------------------
r1746470 | gnodet | 2016-06-01 07:20:03 -0700 (Wed, 01 Jun 2016) | 1 line

[FELIX-5243] Remove anonymous inner class, add a unit test to ensure package consistency
{noformat}
",Java 1.7; Using Felix framework version 5.4.0. ,,,,,,,,,,,,,,,,,,,23/Dec/16 16:34;alinbrici;FELIX_5435.patch;https://issues.apache.org/jira/secure/attachment/12844585/FELIX_5435.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-12-09 18:10:03.484,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 02 10:07:36 UTC 2017,,,,,,0|i36zrb:,9223372036854775807,,,,,,,,"30/Nov/16 22:47;alinbrici;After the initial commit for FELIX-5270, I am seeing this new behavior. ",09/Dec/16 18:10;djencks;My initial impression from your analysis is that this is a configuration admin bug rather than a scr bug?  Isn't the problem  that ca is returning a change count of 1 rather than 2?,"21/Dec/16 05:06;alinbrici;I followed your advice about looking at the configuration admin. After more investigating I found that if I add this patch to RegionConfigurationSupport.java, I am using 2.0.6 branch,  

{noformat}
Index: src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java
===================================================================
--- src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java (revision 1771992)
+++ src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java (working copy)
@@ -139,6 +139,7 @@
                             logger.log( LogService.LOG_DEBUG,
                                 ""Configuring holder {0} with factory configuration {1}, change count {2}"",
                                 new Object[] { holder, config, config.getChangeCount() }, null );
+                            config = getConfiguration(ca, config.getPid());
                             if ( checkBundleLocation( config, bundleContext.getBundle() ) )
                             {
                                 long changeCount = config.getChangeCount();
@@ -157,6 +158,7 @@
                         Configuration singleton = findSingletonConfiguration( ca, confPid, bundleContext.getBundle() );
                         if ( singleton != null )
                         {
+                            singleton = getConfiguration(ca, singleton.getPid());
                             logger.log( LogService.LOG_DEBUG,
                                 ""Configuring holder {0} with configuration {1}, change count {2}"",
                                 new Object[] { holder, singleton, singleton.getChangeCount() }, null );
@@ -194,6 +196,20 @@
         return false;
     }
 
+    private Configuration getConfiguration(final ConfigurationAdmin ca, final String pid)
+    {
+        try
+        {
+            return ca.getConfiguration(pid);
+        }
+        catch (IOException ioe)
+        {
+            logger.log(LogService.LOG_WARNING, ""Failed reading configuration for pid={0}"", new Object[] {pid}, ioe);
+        }
+
+        return null;
+    }
+
     // ---------- ConfigurationListener
 
     /**

{noformat}

It works as I would expect and I no longer see the problem. The current unit test also still pass. 

I am trying to understand why you removed the call to getConfiguration(ConfigurationAdmin ca, String PID), from my analysis, I do see that inside the implementation of the interface 'ConfigurationAdmin', the method itself,

{noformat}
 public Configuration getConfiguration( String pid ) throws IOException
    {
        final ConfigurationManager configurationManager = getConfigurationManager();

        configurationManager.log( LogService.LOG_DEBUG, ""getConfiguration(pid={0})"", new Object[]
            { pid } );

        ConfigurationImpl config = configurationManager.getConfiguration( pid );
        if ( config == null )
        {
            config = configurationManager.createConfiguration( pid, null );

            // FELIX-3360: configuration creation with implicit binding is dynamic
            config.setDynamicBundleLocation( getBundle().getLocation(), false );
        }
        else
        {
            if ( config.getBundleLocation() == null )
            {
                configurationManager.log( LogService.LOG_DEBUG, ""Binding configuration {0} (isNew: {1}) to bundle {2}"",
                    new Object[]
                        { config.getPid(), config.isNew() ? Boolean.TRUE : Boolean.FALSE,
                            this.getBundle().getLocation() } );

                // FELIX-3360: first implicit binding is dynamic
                config.setDynamicBundleLocation( getBundle().getLocation(), true );
            }
            else
            {
                // CM 1.4 / 104.13.2.3
                this.checkPermission( configurationManager, config.getBundleLocation(), false );
            }
        }

        return this.wrap( config );
    }
{noformat}

is actually making a call to the ConfigurationImpl object, 'config.setDynamicBundleLocation()` and this in turn triggers a 'ConfigurationEvent.CM_LOCATION_CHANGED' event which is what FELIX-5270 is trying to avoid. However the call to getConfiguration(ConfigurationAdmin ca, String PID) was also creating the configuration and putting it in the 'configurations' list that is an object within the ConfigurationManager

{noformat}
 config = configurationManager.createConfiguration( pid, null );
{noformat}

going into that .createConfiguration(pid, null)

{noformat}
ConfigurationImpl createConfiguration( String pid, String bundleLocation ) throws IOException
    {
        // check for existing (cached or persistent) configuration
        ConfigurationImpl config = getConfiguration( pid );
        if ( config != null )
        {
            return config;
        }

        // else create new configuration also setting the bundle location
        // and cache the new configuration
        config = createConfiguration( pid, null, bundleLocation );
        return cacheConfiguration( config );
    }
{noformat}

It is being added in cacheConfiguration(config)..


From the my initial inquery, I raised the issue that when I looked at the 'configurations' inside of ConfigurationManager the configuration for my particular service was not there. 

I also believe that the call to 'getConfiguration(ConfigurationAdmin ca, String PID)' was removed because the 

{noformat}
        final Collection<Configuration> factory = findFactoryConfigurations( ca, confPid,bundleContext.getBundle() );
{noformat}

is supposed to find the configuration that we need, so it seemed redundant to have to call 'getConfiguration(ConfigurationAdmin ca, String PID)' again, however I don't see the call to `findFactoryConfigurations(ca, confPid,bundleContext.getBundle())` adding the configuration if/when it gets created, if it is not found in the 'configurations' object inside the ConfigurationManager.


`findFactoryConfigurations(ca, confPid,bundleContext.getBundle())` if we trace it down makes a call to 

'ConfigurationManager#listConfigurations(ConfigurationAdminImpl configurationAdmin, String filterString)'

inside that method there is this block

{noformat}
                // ensure the service.pid and returned a cached config if available
                ConfigurationImpl cfg = getCachedConfiguration( pid );
                if ( cfg == null )
                {
                    cfg = new ConfigurationImpl( this, pmList[i], config );
                }
{noformat}

Should this 'cfg = new ConfigurationImpl( this, pmList[ i ] , config ) ; ' be inserted in the `configurations` cache? It looks for it in the line above in the `configuraitons` (ConfigurationImpl cfg = getCachedConfiguration( pid ) ; ) and just creates a new one if it's not there and it looks like it is never chached. 

Please let me know your thoughts. Thanks in advance.","21/Dec/16 08:36;djencks;I still don't understand why you think this is a ds problem rather than a ca problem.  Could you explain without code snippets?

DS doesn't  persist any information it gets from ca.  Therefore if, on restart, you see ""old"" configuration data, it must have come from ca, presumably with change count 1.  If ca then notices your changed file, I presume through fileinstall telling it that the configuration is now different, then ca should notify ds that there's a change, and the change count should be different, presumably 2. As far as I know ds deals correctly with  this sequence of events from ca.  Do you see this sequence of events?  If not, I think there's a problem with ca.","21/Dec/16 13:50;alinbrici;I am not saying that this is a direct problem with DS, I am saying the DS used to rely on a different method in ca that would store the configuration in the list of 'configurations' inside the ConfigurationManager and now with the removal of this line 'config = getConfiguration(ca, config.getPid());` from rev r1747831, it doesn't. The sequence of events happens correctly, what is happening is the ConfigurationManager is now NOT storing the 'configuration' in it's HashMap of 'configurations' and later when DS needs to look up the service in the 'configurations', because it detected a change, it is not in the 'configurations' HashMap, so it treats it as a completely new config even thought it already dealt with it on fileinstall, but because it is not longer in the 'configurations' map due to that line being removed a new ConfigurationImpl is created and given a revision of 1. What should happen is we should be retrieving that ConfigurationImpl that we should have put in the list of 'configurations' on file install and swap out the properties and increment the revision to 2. I will attempt to build out a sample use case to demonstrate this behavior. Can you please explain why config = getConfiguration(ca, config.getPid()); was taken out in from rev r1747831 just so my understanding is clear?  ","21/Dec/16 17:39;djencks;I thought it was explained pretty clearly in FELIX-5270, but here's a simplified version.

1. management agent creates configuration with properties.

2. DS detects receives configuration event.

3. management agent deletes configuration.

4. DS calls getConfiguration, creating a new configuration with null properties.

At this point, DS can't notice that the properties are null and delete the configuration it just accidentally created, because

5. management agent sets properties on the configuration

6 DS deletes the configuration....oops

There are (at least theoretically) two possible strategies for writing a DS implementation's configuration-awareness: ManagedService + ManagedServiceFactory or configuration events.  Use of the MS+MSF strategy will result in CA setting the bundle location (if missing) for any configuration consumed by DS.  As seen above, use of the ConfigurationEvent strategy requires DS to not ever try to set the bundle location.  Therefore the expert group decided, in order to allow both these strategies, to not take a position on whether DS consuming a configuration should result in the bundle location being set (if missing).  Personally I don't know how to write a MS+MSF based strategy and think it would be horribly inefficient.","22/Dec/16 00:40;alinbrici;Thanks for clarifying. My main point that I am trying to make about that removal of that line, is that it no longer executes this block of code(if you follow that line to this block) which is causing the behavior I am seeing in my usecase:

{noformat}
ConfigurationImpl getConfiguration( String pid ) throws IOException
    {
        ConfigurationImpl config = getCachedConfiguration( pid );
        if ( config != null )
        {
            log( LogService.LOG_DEBUG, ""Found cached configuration {0} bound to {1}"", new Object[]
                { pid, config.getBundleLocation() } );

            config.ensureFactoryConfigPersisted();

            return config;
        }

        PersistenceManager[] pmList = getPersistenceManagers();
        for ( int i = 0; i < pmList.length; i++ )
        {
            if ( pmList[i].exists( pid ) )
            {
                Dictionary props = pmList[i].load( pid );
                config = new ConfigurationImpl( this, pmList[i], props );
                log( LogService.LOG_DEBUG, ""Found existing configuration {0} bound to {1}"", new Object[]
                    { pid, config.getBundleLocation() } );
                return cacheConfiguration( config ); <-----------modification of the ConfigurationManager#configurations 
            }
        }

        // neither the cache nor any persistence manager has configuration
        return null;
    }
{noformat}

follow that cacheConfiguration(config) to: 

{noformat}
ConfigurationImpl cacheConfiguration( ConfigurationImpl configuration )
    {
        synchronized ( configurations )
        {
            final String pid = configuration.getPidString();
            final Object existing = configurations.get( pid );
            if ( existing != null )
            {
                return ( ConfigurationImpl ) existing;
            }

            configurations.put( pid, configuration ); <--------- this is where we add the configuration to the HashMap
            return configuration;
        }
    }
{noformat}


As you can see, we are actually modifying the ConfigurationManager, on the line cacheConfiguration() that will load the configuration from the pm into the 'configurations' HashMap that is part of the ConfigurationManager. 

If you follow the code for this line 'findFactoryConfigurations( ca, confPid, bundleContext.getBundle() );' which is what is attempting to find the configuration, you will see that if it is not found it will create a new ConfigurationImpl but it will not update the ConfigurationManager#configurations with that configuration. 

Are you saying that cacheConfiguration(config) is no longer necessary? Should ConfigurationAdmin not rely on 'configurations' within the ConfigurationManager but instead only use what is in the the persistence manager? I am not saying that the bug is necessarily in DS at this point, all I am saying is that the RegionConfigurationSupport.java, in DS, relied on a piece of code executed in CA that is no longer executed and causes the issue i described above. 
","22/Dec/16 00:54;djencks;I don't know much about the internals of the felix config admin implementation, I've never used it.  If you have evidence that Felix CA supplies a configuration with one set of properties and change count 1, and later supplies the configuration with different properties and change count 1, that is a bug in config admin.  I can't really tell what actual data you have on what config admin does from your code snippets.  Please concentrate on describing the externally visible behavior of config admin to establish whether or not there is a problem.","23/Dec/16 16:33;alinbrici;[~djencks], I have made the modification in CA that would fix this issue. I add the configuration to the cache after it is not found in the cache because this is the behavior DS is depending on. This is the same behavior that getConfigurations() does. I believe this is the correct behavior, I also fixed the unit tests in there to reflect this change. 

I have read http://felix.apache.org/documentation/community/contributing-source-code.html and I am not a Felix committer yet, so I have attached the diff, it's also below. I would love to be on the review or create the review myself if I missed the instructions on how to go about that. 

{code}
Index: ../org.apache.felix.configadmin-1.8.12/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../org.apache.felix.configadmin-1.8.12/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java	(revision 1770905)
+++ ../org.apache.felix.configadmin-1.8.12/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java	(revision )
@@ -95,12 +95,6 @@
         assertEquals(1, conf.length);
         assertEquals(2, conf[0].getProperties(true).size());
         
-        Field configurations = configMgr.getClass().getDeclaredField( ""configurations"" );
-        configurations.setAccessible( true );
-        HashMap<String, ConfigurationImpl> configurationsMap = new HashMap<String, ConfigurationImpl>();
-        configurationsMap.put(pid, conf[0]);
-        configurations.set(configMgr, configurationsMap);
-        
         dictionary = new Hashtable();
         dictionary.put( ""property1"", ""value2"" );
         pid = ""testDefaultPersistenceManager"";
@@ -110,6 +104,9 @@
         conf = configMgr.listConfigurations(new ConfigurationAdminImpl(configMgr, null), null);
         assertEquals(1, conf.length);
         assertEquals(2, conf[0].getProperties(true).size());
+
+        // verify that the property in the configurations cache was used
+        assertEquals(""value1"", conf[0].getProperties(true).get(""property1""));
     }    
     
     public void test_listConfigurations_notcached() throws Exception
@@ -135,20 +132,18 @@
         assertEquals(1, conf.length);
         assertEquals(2, conf[0].getProperties(true).size());
         
-        Field configurations = configMgr.getClass().getDeclaredField( ""configurations"" );
-        configurations.setAccessible( true );
-        HashMap<String, ConfigurationImpl> configurationsMap = new HashMap<String, ConfigurationImpl>();
-        configurationsMap.put(pid, conf[0]);
-        configurations.set(configMgr, configurationsMap);
-        
         dictionary = new Hashtable();
+        dictionary.put(""property1"", ""valueNotCached"");
         pid = ""testDefaultPersistenceManager"";
         dictionary.put( Constants.SERVICE_PID, pid );
         pm.store( pid, dictionary );
  
         conf = configMgr.listConfigurations(new ConfigurationAdminImpl(configMgr, null), null);
         assertEquals(1, conf.length);
-        assertEquals(1, conf[0].getProperties(true).size());
+        assertEquals(2, conf[0].getProperties(true).size());
+
+        // verify that the value returned was not the one from the cache
+        assertEquals(""valueNotCached"", conf[0].getProperties(true).get(""property1""));
     }
 
     public void testLogNoLogService()
Index: ../org.apache.felix.configadmin-1.8.12/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../org.apache.felix.configadmin-1.8.12/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java	(revision 1770905)
+++ ../org.apache.felix.configadmin-1.8.12/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java	(revision )
@@ -683,14 +683,16 @@
                 }
 
                 // ensure the service.pid and returned a cached config if available
-                ConfigurationImpl cfg = null;
-                if (! (pmList[i].isNotCachablePersistenceManager())) 
-                {
+                ConfigurationImpl cfg;
+                if (!(pmList[i].isNotCachablePersistenceManager())) {
                     cfg = getCachedConfiguration( pid );
+                    if (cfg == null) {
+                        cfg = new ConfigurationImpl(this, pmList[i], config);
+                        // add the to configurations cache if it wasn't in the cache
+                        cacheConfiguration(cfg);
-                }
+                    }
-                if ( cfg == null )
-                {
+                } else {
-                    cfg = new ConfigurationImpl( this, pmList[i], config );
+                    cfg = new ConfigurationImpl(this, pmList[i], config);
                 }
 
                 // FELIX-611: Ignore configuration objects without props

{code}

[~cziegeler] could please take a look at this patch and let me know your thoughts on this as well. Thanks in advance! ","28/Dec/16 07:14;cziegeler;Thanks for your patch [~alinbrici]
It looks good to me and I've applied it to our code base","27/Jan/17 19:10;alinbrici;[~cziegeler] Do you know when a release will be cut for 1.8.14? 

Edit: When will it be available in a public repo? ","02/Feb/17 10:07;cziegeler;Release vote is throug, it should be in a public repo in some hours from now. If you have further questions pleas use the mailing list instead",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR Bnd Plugin does not work with bnd-maven-plugin: org.apache.felix.scrplugin.SCRDescriptorException: Unable to load compiled class,FELIX-5419,13021742,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,18/Nov/16 11:51,27/Dec/16 13:04,14/Mar/19 02:48,19/Dec/16 17:07,scr bnd plugin 1.6.0,,,,,,scr bnd plugin 1.7.0,,,,,,,SCR Tooling,,,,,,0,patch-available,,,,,"When used with the bnd-maven-plugin (https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin), the plugin issues the following error
{code}
[ERROR] Failed to execute goal biz.aQute.bnd:bnd-maven-plugin:3.3.0:bnd-process (default) on project accesscontroltool-bundle-with-b-m-p: Got unexpected exception while analyzing:org.apache.felix.scrplugin.SCRDescriptorException: Unable to load compiled class: <some class name>
[ERROR] at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:152)
[ERROR] at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:146)
[ERROR] at org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin.analyzeJar(SCRDescriptorBndPlugin.java:178)
[ERROR] at aQute.bnd.osgi.Analyzer.doPlugins(Analyzer.java:656)
[ERROR] at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:209)
[ERROR] at aQute.bnd.osgi.Builder.analyze(Builder.java:389)
[ERROR] at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:687)
[ERROR] at aQute.bnd.osgi.Builder.build(Builder.java:105)
[ERROR] at aQute.bnd.maven.plugin.BndMavenPlugin.execute(BndMavenPlugin.java:217)
[ERROR] at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
[ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
[ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
[ERROR] at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
[ERROR] at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
[ERROR] at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
[ERROR] at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
[ERROR] at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
[ERROR] at org.apache.maven.cli.MavenCli.execute(MavenCli.java:862)
[ERROR] at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:286)
[ERROR] at org.apache.maven.cli.MavenCli.main(MavenCli.java:197)
[ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[ERROR] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR] at java.lang.reflect.Method.invoke(Method.java:606)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[ERROR] Caused by: java.lang.ClassNotFoundException: <some class name>
[ERROR] at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
[ERROR] at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
[ERROR] at java.security.AccessController.doPrivileged(Native Method)
[ERROR] at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
[ERROR] at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
[ERROR] at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
[ERROR] at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:144)
[ERROR] ... 30 more
{code}

The equivalent configuration runs fine with the maven-bundle-plugin.
This happens for every source file.",,,,,,,,,,,,,,,,FELIX-5466,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-18 12:59:01.892,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Dec 19 17:07:58 UTC 2016,,,,,,0|i36i3z:,9223372036854775807,,,,,,,,"18/Nov/16 11:57;kwin;After very brief debugging I found that there is a difference in {{Analyzer.classpath}}. While within the maven-bundle-plugin it starts with the entry {{Jar:.}} this entry is not there for the bnd-maven-plugin. All other entries are identical (taken from the project's dependencies).
Also I am wondering why the sources are set up as relative file names in https://github.com/apache/felix/blob/trunk/tools/org.apache.felix.scr.bnd/src/main/java/org/apache/felix/scrplugin/bnd/SCRDescriptorBndPlugin.java#L290. Which base directory do those filenames refer to?","18/Nov/16 12:11;kwin;Some more logs with log level set to info.
For maven-bundle-plugin
{code}
[INFO] --- maven-bundle-plugin:3.2.0:manifest (generate-manifest-and-metadata) @ accesscontroltool-bundle ---
[INFO] Initialized Bnd ScrPlugin: destDir=/Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes, strictMode=false, specVersion=null
[INFO] Analyzing biz.netcentric.cq.tools.accesscontroltool.bundle
[INFO] Using claspath: [file:/Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/, file:/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.compendium/4.2.0/org.osgi.compendium-4.2.0.jar, file:/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/felix/org.apache.felix.scr.annotations/1.9.10/org.apache.felix.scr.annotations-1.9.10.jar, file:/Users/konradwindszus/.m2/repository/biz/aQute/bndlib/1.43.0/bndlib-1.43.0.jar, file:/Users/konradwindszus/.m2/repository/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar, file:/Users/konradwindszus/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar, file:/Users/konradwindszus/.m2/repository/javax/jcr/jcr/2.0/jcr-2.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.api/2.2.0/org.apache.sling.api-2.2.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.jcr.api/2.1.0/org.apache.sling.jcr.api-2.1.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.commons.osgi/2.2.0/org.apache.sling.commons.osgi-2.2.0.jar, file:/Users/konradwindszus/.m2/repository/commons-lang/commons-lang/2.5/commons-lang-2.5.jar, file:/Users/konradwindszus/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar, file:/Users/konradwindszus/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar, file:/Users/konradwindszus/.m2/repository/com/adobe/granite/com.adobe.granite.jmx/0.2.6/com.adobe.granite.jmx-0.2.6.jar, file:/Users/konradwindszus/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.8.5/jackson-core-asl-1.8.5.jar, file:/Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-api/2.7.5/jackrabbit-api-2.7.5.jar, file:/Users/konradwindszus/.m2/repository/com/day/cq/cq-security/5.6.2/cq-security-5.6.2.jar, file:/Users/konradwindszus/.m2/repository/com/day/cq/cq-commons/5.6.4/cq-commons-5.6.4.jar, file:/Users/konradwindszus/.m2/repository/org/apache/commons/commons-email/1.2/commons-email-1.2.jar, file:/Users/konradwindszus/.m2/repository/javax/mail/mail/1.4.1/mail-1.4.1.jar, file:/Users/konradwindszus/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar, file:/Users/konradwindszus/.m2/repository/org/yaml/snakeyaml/1.13/snakeyaml-1.13.jar, file:/Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-commons/2.11.2/jackrabbit-jcr-commons-2.11.2.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.settings/1.2.2/org.apache.sling.settings-1.2.2.jar, file:/Users/konradwindszus/.m2/repository/org/apache/jackrabbit/vault/org.apache.jackrabbit.vault/3.1.18/org.apache.jackrabbit.vault-3.1.18.jar, file:/Users/konradwindszus/.m2/repository/org/apache/tomcat/el-api/6.0.41/el-api-6.0.41.jar, file:/Users/konradwindszus/.m2/repository/org/apache/tomcat/jasper-el/6.0.41/jasper-el-6.0.41.jar]
[INFO] Using dependencies: [/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.compendium/4.2.0/org.osgi.compendium-4.2.0.jar, /Users/konradwindszus/.m2/repository/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar, /Users/konradwindszus/.m2/repository/org/apache/felix/org.apache.felix.scr.annotations/1.9.10/org.apache.felix.scr.annotations-1.9.10.jar, /Users/konradwindszus/.m2/repository/biz/aQute/bndlib/1.43.0/bndlib-1.43.0.jar, /Users/konradwindszus/.m2/repository/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar, /Users/konradwindszus/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar, /Users/konradwindszus/.m2/repository/javax/jcr/jcr/2.0/jcr-2.0.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.api/2.2.0/org.apache.sling.api-2.2.0.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.jcr.api/2.1.0/org.apache.sling.jcr.api-2.1.0.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.commons.osgi/2.2.0/org.apache.sling.commons.osgi-2.2.0.jar, /Users/konradwindszus/.m2/repository/commons-lang/commons-lang/2.5/commons-lang-2.5.jar, /Users/konradwindszus/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar, /Users/konradwindszus/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar, /Users/konradwindszus/.m2/repository/com/adobe/granite/com.adobe.granite.jmx/0.2.6/com.adobe.granite.jmx-0.2.6.jar, /Users/konradwindszus/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.8.5/jackson-core-asl-1.8.5.jar, /Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-api/2.7.5/jackrabbit-api-2.7.5.jar, /Users/konradwindszus/.m2/repository/com/day/cq/cq-security/5.6.2/cq-security-5.6.2.jar, /Users/konradwindszus/.m2/repository/com/day/cq/cq-commons/5.6.4/cq-commons-5.6.4.jar, /Users/konradwindszus/.m2/repository/org/apache/commons/commons-email/1.2/commons-email-1.2.jar, /Users/konradwindszus/.m2/repository/javax/mail/mail/1.4.1/mail-1.4.1.jar, /Users/konradwindszus/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar, /Users/konradwindszus/.m2/repository/org/yaml/snakeyaml/1.13/snakeyaml-1.13.jar, /Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-commons/2.11.2/jackrabbit-jcr-commons-2.11.2.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.settings/1.2.2/org.apache.sling.settings-1.2.2.jar, /Users/konradwindszus/.m2/repository/org/apache/jackrabbit/vault/org.apache.jackrabbit.vault/3.1.18/org.apache.jackrabbit.vault-3.1.18.jar, /Users/konradwindszus/.m2/repository/org/apache/tomcat/el-api/6.0.41/el-api-6.0.41.jar, /Users/konradwindszus/.m2/repository/org/apache/tomcat/jasper-el/6.0.41/jasper-el-6.0.41.jar]
[INFO] Generating 1 MetaType Descriptors in /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/metatype/biz.netcentric.cq.tools.actool.aceservice.impl.AceServiceImpl.xml
[INFO] Generating 1 MetaType Descriptors in /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/metatype/biz.netcentric.cq.tools.actool.configuploadlistener.impl.UploadListenerServiceImpl.xml
[INFO] Generating 1 MetaType Descriptors in /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/metatype/biz.netcentric.cq.tools.actool.dumpservice.impl.DumpserviceImpl.xml
[INFO] Generating 1 MetaType Descriptors in /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/metatype/biz.netcentric.cq.tools.actool.installationhistory.impl.AcHistoryServiceImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.aceservice.impl.AceServiceImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.aceservicejmx.impl.AceServiceMBeanImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.acls.AceBeanInstallerImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.authorizableutils.impl.AuthorizableCreatorServiceImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.configreader.ConfigFilesRetrieverImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.configreader.YamlConfigReader.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.configreader.YamlConfigurationMerger.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.configreader.YamlMacroChildNodeObjectsProviderImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.configreader.YamlMacroProcessorImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.configuploadlistener.impl.UploadListenerServiceImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.dumpservice.impl.DumpserviceImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.installationhistory.impl.AcHistoryServiceImpl.xml
[INFO] Writing 1 Service Component Descriptors to /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle/target/classes/OSGI-INF/biz.netcentric.cq.tools.actool.installhook.AcToolInstallHookServiceImpl.xml
[INFO]
{code}

while for the bnd-maven-plugin the log contains a different classpath:
{code}
[INFO] --- bnd-maven-plugin:3.3.0:bnd-process (default) @ accesscontroltool-bundle-with-b-m-p ---
[INFO] Initialized Bnd ScrPlugin: destDir=/Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle-with-b-m-p/target/classes, strictMode=false, specVersion=null
[INFO] Analyzing accesscontroltool-bundle-with-b-m-p
[INFO] Using claspath: [file:/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.compendium/4.2.0/org.osgi.compendium-4.2.0.jar, file:/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/felix/org.apache.felix.scr.annotations/1.9.10/org.apache.felix.scr.annotations-1.9.10.jar, file:/Users/konradwindszus/.m2/repository/biz/aQute/bndlib/1.43.0/bndlib-1.43.0.jar, file:/Users/konradwindszus/.m2/repository/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar, file:/Users/konradwindszus/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar, file:/Users/konradwindszus/.m2/repository/javax/jcr/jcr/2.0/jcr-2.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.api/2.2.0/org.apache.sling.api-2.2.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.jcr.api/2.1.0/org.apache.sling.jcr.api-2.1.0.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.commons.osgi/2.2.0/org.apache.sling.commons.osgi-2.2.0.jar, file:/Users/konradwindszus/.m2/repository/commons-lang/commons-lang/2.5/commons-lang-2.5.jar, file:/Users/konradwindszus/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar, file:/Users/konradwindszus/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar, file:/Users/konradwindszus/.m2/repository/com/adobe/granite/com.adobe.granite.jmx/0.2.6/com.adobe.granite.jmx-0.2.6.jar, file:/Users/konradwindszus/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.8.5/jackson-core-asl-1.8.5.jar, file:/Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-api/2.7.5/jackrabbit-api-2.7.5.jar, file:/Users/konradwindszus/.m2/repository/com/day/cq/cq-security/5.6.2/cq-security-5.6.2.jar, file:/Users/konradwindszus/.m2/repository/com/day/cq/cq-commons/5.6.4/cq-commons-5.6.4.jar, file:/Users/konradwindszus/.m2/repository/org/apache/commons/commons-email/1.2/commons-email-1.2.jar, file:/Users/konradwindszus/.m2/repository/javax/mail/mail/1.4.1/mail-1.4.1.jar, file:/Users/konradwindszus/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar, file:/Users/konradwindszus/.m2/repository/org/yaml/snakeyaml/1.13/snakeyaml-1.13.jar, file:/Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-commons/2.11.2/jackrabbit-jcr-commons-2.11.2.jar, file:/Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.settings/1.2.2/org.apache.sling.settings-1.2.2.jar, file:/Users/konradwindszus/.m2/repository/org/apache/jackrabbit/vault/org.apache.jackrabbit.vault/3.1.18/org.apache.jackrabbit.vault-3.1.18.jar, file:/Users/konradwindszus/.m2/repository/org/apache/tomcat/el-api/6.0.41/el-api-6.0.41.jar, file:/Users/konradwindszus/.m2/repository/org/apache/tomcat/jasper-el/6.0.41/jasper-el-6.0.41.jar]
[INFO] Using dependencies: [/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.compendium/4.2.0/org.osgi.compendium-4.2.0.jar, /Users/konradwindszus/.m2/repository/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar, /Users/konradwindszus/.m2/repository/org/apache/felix/org.apache.felix.scr.annotations/1.9.10/org.apache.felix.scr.annotations-1.9.10.jar, /Users/konradwindszus/.m2/repository/biz/aQute/bndlib/1.43.0/bndlib-1.43.0.jar, /Users/konradwindszus/.m2/repository/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar, /Users/konradwindszus/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar, /Users/konradwindszus/.m2/repository/javax/jcr/jcr/2.0/jcr-2.0.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.api/2.2.0/org.apache.sling.api-2.2.0.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.jcr.api/2.1.0/org.apache.sling.jcr.api-2.1.0.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.commons.osgi/2.2.0/org.apache.sling.commons.osgi-2.2.0.jar, /Users/konradwindszus/.m2/repository/commons-lang/commons-lang/2.5/commons-lang-2.5.jar, /Users/konradwindszus/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar, /Users/konradwindszus/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar, /Users/konradwindszus/.m2/repository/com/adobe/granite/com.adobe.granite.jmx/0.2.6/com.adobe.granite.jmx-0.2.6.jar, /Users/konradwindszus/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.8.5/jackson-core-asl-1.8.5.jar, /Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-api/2.7.5/jackrabbit-api-2.7.5.jar, /Users/konradwindszus/.m2/repository/com/day/cq/cq-security/5.6.2/cq-security-5.6.2.jar, /Users/konradwindszus/.m2/repository/com/day/cq/cq-commons/5.6.4/cq-commons-5.6.4.jar, /Users/konradwindszus/.m2/repository/org/apache/commons/commons-email/1.2/commons-email-1.2.jar, /Users/konradwindszus/.m2/repository/javax/mail/mail/1.4.1/mail-1.4.1.jar, /Users/konradwindszus/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar, /Users/konradwindszus/.m2/repository/org/yaml/snakeyaml/1.13/snakeyaml-1.13.jar, /Users/konradwindszus/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-commons/2.11.2/jackrabbit-jcr-commons-2.11.2.jar, /Users/konradwindszus/.m2/repository/org/apache/sling/org.apache.sling.settings/1.2.2/org.apache.sling.settings-1.2.2.jar, /Users/konradwindszus/.m2/repository/org/apache/jackrabbit/vault/org.apache.jackrabbit.vault/3.1.18/org.apache.jackrabbit.vault-3.1.18.jar, /Users/konradwindszus/.m2/repository/org/apache/tomcat/el-api/6.0.41/el-api-6.0.41.jar, /Users/konradwindszus/.m2/repository/org/apache/tomcat/jasper-el/6.0.41/jasper-el-6.0.41.jar]
[ERROR] /Users/konradwindszus/git/accesscontroltool/accesscontroltool-bundle-with-b-m-p/pom.xml [0:0]: Got unexpected exception while analyzing:org.apache.felix.scrplugin.SCRDescriptorException: Unable to load compiled class: biz.netcentric.cq.tools.actool.aceservice.AcInstallService
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:152)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:146)
	at org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin.analyzeJar(SCRDescriptorBndPlugin.java:178)
	at aQute.bnd.osgi.Analyzer.doPlugins(Analyzer.java:656)
	at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:209)
	at aQute.bnd.osgi.Builder.analyze(Builder.java:389)
	at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:687)
	at aQute.bnd.osgi.Builder.build(Builder.java:105)
	at aQute.bnd.maven.plugin.BndMavenPlugin.execute(BndMavenPlugin.java:217)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:862)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:286)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: java.lang.ClassNotFoundException: biz.netcentric.cq.tools.actool.aceservice.AcInstallService
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:144)
	... 30 more
{code}

So the issue is definitely the classpath lacking the first entry i.e. the classloader for the class directory in bnd-maven-plugin.","18/Nov/16 12:59;githubbot;GitHub user kwin opened a pull request:

    https://github.com/apache/felix/pull/75

    FELIX-5419 always add the target as classpath url

    This makes the scr bnd plugin compatible with bnd-maven-plugin.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kwin/felix FELIX-5419

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/75.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #75
    
----
commit 5d52da40bc08dacf05111f77b57563c5f2b099cb
Author: Konrad Windszus <konrad.windszus@netcentric.biz>
Date:   2016-11-18T12:57:48Z

    FELIX-5419 always add the target as classpath url 
    
    This makes the scr bnd plugin compatible with bnd-maven-plugin.

----
",19/Dec/16 17:07;cziegeler;Thanks for your patch [~kwin]. It's applied,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endless loop throwing InterruptedException when shutting down framework,FELIX-5416,13021209,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,bokie,bokie,16/Nov/16 17:54,22/Sep/17 08:55,14/Mar/19 02:48,20/Jun/17 20:33,scr-2.0.6,,,,,,scr-2.0.12,,,,,,,Declarative Services (SCR),,,,,,1,,,,,,"When shutting down the framework via the framework's stop method or in a gogo terminal shell via stop 0 command, the Apache Felix Declarative Services goes into a never ending loop with the following log ENTRIES:


2016-11-16 17:44:22,030 | ERROR | FelixStartLevel  | scr                              | 7 - org.apache.felix.scr - 2.0.6 | Interrupted exception waiting for queue to empty
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)[:1.8.0_111]
	at java.lang.Object.wait(Object.java:502)[:1.8.0_111]
	at org.apache.felix.scr.impl.ComponentActorThread.terminate(ComponentActorThread.java:131)[7:org.apache.felix.scr:2.0.6]
	at org.apache.felix.scr.impl.Activator.doStop(Activator.java:216)[7:org.apache.felix.scr:2.0.6]
	at org.apache.felix.utils.extender.AbstractExtender.stop(AbstractExtender.java:128)[7:org.apache.felix.scr:2.0.6]
	at org.apache.felix.scr.impl.Activator.stop(Activator.java:181)[7:org.apache.felix.scr:2.0.6]
	at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:719)[org.apache.felix.framework-5.6.1.jar:]
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2610)[org.apache.felix.framework-5.6.1.jar:]
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1389)[org.apache.felix.framework-5.6.1.jar:]
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)[org.apache.felix.framework-5.6.1.jar:]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_111]
","OS: linux and windows
Java Version: 1.8.0_111
OSGi Impl: Apache Felix (5.6.1)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-24 23:05:46.374,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 20 20:33:33 UTC 2017,,,,,,0|i36etj:,9223372036854775807,,,,,,,,"18/Nov/16 11:54;bokie;A little more information...

Not sure why yet, but I've noticed that the behavior described in the description is valid when installing and starting the SCR bundle as an ""initial"" bundle. In other words, when I don't install it as an initial bundle, put the jar file in a directory watched by FileInstall, let FileInstall manage its life-cycle, I don't notice the endless loop behavior.","24/Nov/16 23:05;djencks;I'm not sure there's any evidence that scr is doing anything wrong.  I suggest you figure out what is interrupting the ComponentActorThread, take a thread dump to try to see what is stopping the ComponentActorThread from getting through all it's tasks, and turn on debug logging and examine the ComponentActorThread debug messages indicating what tasks are scheduled and executed.
I recall running into an interrupted exception on shutdown once but unfortunately I don't recall what caused it, although for some reason I keep thinking it was something  in the equinox framework.",16/Mar/17 20:28;cziegeler;[~bokie] Could you please provide more info as requested by David?,"12/May/17 13:23;cnoelle;Seems to be a problem in the terminate method of ComponentActorThread (see below). Suppose we run into tasks.wait(), the thread gets interrupted, and the tasks lists is not empty yet. Then the catch block is executed, we interrupt the thread, and run into tasks.wait() again. But since the thread has been interrupted, another InterruptedException is raised immediately, and we are caught in a loop.

I think that there should be either a return statement at the end of the catch block (then the remaining tasks in the list will not be executed), or the interrupt() call should be moved outside the while loop.

void terminate()
    {
        schedule( TERMINATION_TASK );
        synchronized ( tasks )
        {
            while ( !tasks.isEmpty() )
            {
                try
                {
                    tasks.wait();
                }
                catch ( InterruptedException e )
                {
                    Thread.currentThread().interrupt();
                    logger.log( LogService.LOG_ERROR, ""Interrupted exception waiting for queue to empty"", e );
                }
            }
        }
    }","20/Jun/17 18:56;tjwatson;This is a real issue and SCR code is wrong.  Here is the sequence of events that happen.

1) The thread stopping the framework is interrupted (in this case it was gogo, but anything could do that).
2) The framework proceeds to stop the bundles
3) The SCR bundle is stopped (current thread is still interrupted)
4) SCR activator cases enters org.apache.felix.scr.impl.ComponentActorThread.terminate()
5) a TERMINATION_TASK is scheduled and the lock on 'tasks' is immediately obtained

Here is where the failure happens.  If the consuming task code in ComponentActorThread.run() does not obtain the 'tasks' lock in order to consume the TERMINATION_TASK before step 5 obtains the 'tasks' lock in order to wait for tasks to be empty we will enter an endless loop of interruptions and this all happens while holding the 'tasks' lock which then also causes deadlock and prevention of the TERMINATION_TASK from ever being consumed.

The terminate() method should be updated to something like the following in order to correctly ignore interrupted exceptions.

{code}
    void terminate()
    {
        schedule( TERMINATION_TASK );
        synchronized (tasks)
        {
            while (!tasks.isEmpty())
            {
                boolean interrupted = Thread.interrupted();
                try
                {
                    tasks.wait();
                }
                catch (InterruptedException e)
                {
                    interrupted = true;
                    logger.log(LogService.LOG_ERROR,
                        ""Interrupted exception waiting for queue to empty"", e);
                }
                finally
                {
                    if (interrupted)
                    { // restore interrupt status
                        Thread.currentThread().interrupt();
                    }
                }
            }
        }
    }
{code}","20/Jun/17 18:58;cnoelle;Thank you for your email. Kindly be informed that I will be out of the office until July 1st.      

Best regards,

-- 
Dr. Christoph Nölle
Fraunhofer Institut für Windenergie und Energiesystemtechnik IWES   
Division Systems Engineering and Distribution Grids
Königstor 59,  34119 Kassel, Germany
Tel: +49 561 7294 492
Email: christoph.noelle@iwes.fraunhofer.de
http://www.iwes.fraunhofer.de/
www.ogema.org



    [ https://issues.apache.org/jira/browse/FELIX-5416?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=16056276#comment-16056276 ] 

Thomas Watson commented on FELIX-5416:
--------------------------------------

This is a real issue and SCR code is wrong.  Here is the sequence of events that happen.

1) The thread stopping the framework is interrupted (in this case it was gogo, but anything could do that).
2) The framework proceeds to stop the bundles
3) The SCR bundle is stopped (current thread is still interrupted)
4) SCR activator cases enters org.apache.felix.scr.impl.ComponentActorThread.terminate()
5) a TERMINATION_TASK is scheduled and the lock on 'tasks' is immediately obtained

Here is where the failure happens.  If the consuming task code in ComponentActorThread.run() does not obtain the 'tasks' lock in order to consume the TERMINATION_TASK before step 5 obtains the 'tasks' lock in order to wait for tasks to be empty we will enter an endless loop of interruptions and this all happens while holding the 'tasks' lock which then also causes deadlock and prevention of the TERMINATION_TASK from ever being consumed.

The terminate() method should be updated to something like the following in order to correctly ignore interrupted exceptions.

{code}
    void terminate()
    {
        schedule( TERMINATION_TASK );
        while (!tasks.isEmpty()) {
            final boolean interrupted = Thread.interrupted();
            try {
                tasks.wait();
            } catch (InterruptedException e) {
                logger.log(LogService.LOG_ERROR,
                        ""Interrupted exception waiting for queue to empty"", e);
            } finally {
                if (interrupted) { // restore interrupt status
                    Thread.currentThread().interrupt();
                }
            }
        }
    }
{code}




--
This message was sent by Atlassian JIRA
(v6.4.14#64029)

","20/Jun/17 18:59;tjwatson;The org.apache.felix.scr.impl.ComponentActorThread.run() has the same issue, but is less likely to happen because that is run on a thread that is 'private' to SCR is is far less likely to be interrupted.",20/Jun/17 20:33;tjwatson;I release a fix to both the R6 and R7 impls.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove unused imports from resolver source code.,FELIX-5390,13016622,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,tjwatson,tjwatson,tjwatson,31/Oct/16 14:58,03/Nov/16 10:38,14/Mar/19 02:48,03/Nov/16 10:38,,,,,,,resolver-1.10.1,,,,,,,Resolver,,,,,,0,,,,,,"There are a few unused imports in the resolver source.  It looks like they did not get removed during the last refactoring of the code.

Loggner.java
 import org.osgi.service.resolver.ResolutionException;

WrappedResource.java
 import org.osgi.framework.namespace.IdentityNamespace;

CopyOnWriteSet.java
 import java.util.AbstractSet;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 02 19:45:20 UTC 2016,,,,,,0|i35mj3:,9223372036854775807,,,,,,,,"02/Nov/16 19:45;tjwatson;I released some general cleanup of the code.

     - remove unused imports
     - fix generic declaration issues
     - remove dead code",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE for requests missing 'felix-webconsole-locale' cookie,FELIX-5387,13014731,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,marett,marett,24/Oct/16 14:10,13/Jan/17 20:45,14/Mar/19 02:48,25/Oct/16 19:13,webconsole-4.2.16,,,,,,webconsole-4.2.18,,,,,,,Web Console,,,,,,0,,,,,,"Issuing a request without 'felix-webconsole-locale' cookies throws a NPE similar to 
{code}
24.10.2016 12:44:44.617 *ERROR* [qtp1226339741-3423] org.apache.felix.http.jetty Exception while processing request to /system/console/configMgr (java.lang.NullPointerException)
java.lang.NullPointerException: null
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.ensureLocaleCookieSet(OsgiManager.java:502)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:561)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager$3.run(OsgiManager.java:465)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:461)
	at org.apache.felix.http.base.internal.handler.ServletHandler.handle(ServletHandler.java:85)
	at org.apache.felix.http.base.internal.dispatch.InvocationChain.doFilter(InvocationChain.java:79)
	at com.adobe.granite.license.impl.LicenseCheckFilter.doFilter(LicenseCheckFilter.java:308)
	at org.apache.felix.http.base.internal.handler.FilterHandler.handle(FilterHandler.java:135)
	at org.apache.felix.http.base.internal.dispatch.InvocationChain.doFilter(InvocationChain.java:74)
	at org.apache.felix.http.sslfilter.internal.SslFilter.doFilter(SslFilter.java:96)
	at org.apache.felix.http.base.internal.handler.FilterHandler.handle(FilterHandler.java:135)
	at org.apache.felix.http.base.internal.dispatch.InvocationChain.doFilter(InvocationChain.java:74)
	at org.apache.sling.security.impl.ReferrerFilter.doFilter(ReferrerFilter.java:295)
	at org.apache.felix.http.base.internal.handler.FilterHandler.handle(FilterHandler.java:135)
	at org.apache.felix.http.base.internal.dispatch.InvocationChain.doFilter(InvocationChain.java:74)
	at org.apache.sling.i18n.impl.I18NFilter.doFilter(I18NFilter.java:133)
	at org.apache.felix.http.base.internal.handler.FilterHandler.handle(FilterHandler.java:135)
	at org.apache.felix.http.base.internal.dispatch.InvocationChain.doFilter(InvocationChain.java:74)
	at org.apache.felix.http.base.internal.dispatch.Dispatcher.dispatch(Dispatcher.java:128)
	at org.apache.felix.http.base.internal.dispatch.DispatcherServlet.service(DispatcherServlet.java:49)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:499)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
	at java.lang.Thread.run(Thread.java:745)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-24 14:21:35.711,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 02 02:15:31 UTC 2016,,,,,,0|i35av3:,9223372036854775807,,,,,,,,"24/Oct/16 14:14;marett;As an example, the following authenticated request throws a NPE
{code}
curl 'http://10.131.170.170:4504/system/console/bundles' -H 'Pragma: no-cache' -H 'DNT: 1' -H 'Accept-Encoding: gzip, deflate, sdch' -H 'Accept-Language: en-US,en;q=0.8,fr;q=0.6' -H 'Upgrade-Insecure-Requests: 1' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Cache-Control: no-cache' -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Connection: keep-alive' --compressed
{code}

and the same request with added cookie succeeds
{code}
curl 'http://10.131.170.170:4504/system/console/bundles' -H 'Pragma: no-cache' -H 'DNT: 1' -H 'Accept-Encoding: gzip, deflate, sdch' -H 'Accept-Language: en-US,en;q=0.8,fr;q=0.6' -H 'Upgrade-Insecure-Requests: 1' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Cache-Control: no-cache' -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Connection: keep-alive' -H 'Cookie: felix-webconsole-locale=en' --compressed
{code}

Debugging it, the NPE is thrown at

https://github.com/apache/felix/blob/trunk/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java#L498

with the method call

{code}
locale.toString()
{code}

indeed, the {{locale}} is {{null}} at that point.","24/Oct/16 14:21;cziegeler;This is not a bug in the web console, a fallback in the  code is using request.getLocale() which must not return NULL.
So it seems there is a faulty request implementation that returns null.
We could add a workround in the web console to avoid an NPE, but still the real bug is somewhere else","25/Oct/16 09:23;marett;[~cziegeler] thanks for looking at this! The {{javax.servlet.ServletRequest#getLocale}} JavaDoc is not super clear whether it may return {{null}} or not in case there is no default server locale configured.
I am fine with assuming it must not return {{null}} and therefor the issue is rooted somewhere else as you wrote.
No need to workaround it.
Closing.",25/Oct/16 17:32;cziegeler;I think it makes sense to catch the NPE nevertheless and fail gracefully,"25/Oct/16 19:13;cziegeler;I've added falling back to english as the default, if there is a faulty filter in the processing chain","02/Dec/16 02:15;alexander.klimetschek;FWIW, I was seeing the same issue using {{sling:install}} installing a bundle to the webconsole, while not all bundles were up on my system (it is likely that a custom {{request.getLocale()}} implementation on our system returned null due to this state). Good to see it guarded.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigAdmin uses wrong security when calling ManagedServices,FELIX-5385,13013795,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,20/Oct/16 08:47,25/Oct/16 17:35,14/Mar/19 02:48,20/Oct/16 11:46,configadmin-1.8.0,,,,,,configadmin-1.8.12,,,,,,,,,,,,,0,,,,,,"When a ManagedService (which bundles has all permissions) is called, we end up with the following exception.
The reason is that all code protection domain need to have the permission to actually grant the permission, and ConfigAdmin has very restricted permissions.  A DomainCombiner should be used to only apply the bundle's permission to the call.

{code}
10:43:43.543 [CM Configuration Updater (ManagedService Update: pid=[org.ops4j.pax.logging])] ERROR org.apache.felix.configadmin - [org.osgi.service.log.LogService, org.knopflerfish.service.log.LogService, org.ops4j.pax.logging.PaxLoggingService, org.osgi.service.cm.ManagedService, id=12, bundle=5/mvn:org.ops4j.pax.logging/pax-logging-log4j2/1.9.1-SNAPSHOT]: Unexpected problem updating configuration org.ops4j.pax.logging
java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""getClassLoader"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472) [?:?]
	at java.security.AccessController.checkPermission(AccessController.java:884) [?:?]
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) [?:?]
	at java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader.java:1528) [?:?]
	at java.lang.Thread.getContextClassLoader(Thread.java:1436) [?:?]
	at org.ops4j.pax.logging.log4j2.internal.PaxLoggingServiceImpl.updated(PaxLoggingServiceImpl.java:150) [5:org.ops4j.pax.logging.pax-logging-log4j2:1.9.1.SNAPSHOT]
	at org.ops4j.pax.logging.log4j2.internal.PaxLoggingServiceImpl$1ManagedPaxLoggingService.updated(PaxLoggingServiceImpl.java:408) [5:org.ops4j.pax.logging.pax-logging-log4j2:1.9.1.SNAPSHOT]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker$1.run(ManagedServiceTracker.java:177) [6:org.apache.felix.configadmin:1.8.8]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:?]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updated(ManagedServiceTracker.java:173) [6:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updateService(ManagedServiceTracker.java:152) [6:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.provideConfiguration(ManagedServiceTracker.java:85) [6:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.provide(ConfigurationManager.java:1444) [6:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.run(ConfigurationManager.java:1400) [6:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread$1.run(UpdateThread.java:131) [6:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread$1.run(UpdateThread.java:128) [6:org.apache.felix.configadmin:1.8.8]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:?]
	at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:127) [6:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:110) [6:org.apache.felix.configadmin:1.8.8]
	at java.lang.Thread.run(Thread.java:745) [?:?]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Oct 20 11:46:04 UTC 2016,,,,,,0|i35533:,9223372036854775807,,,,,,,,"20/Oct/16 11:46;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	configadmin/src/main/java/org/apache/felix/cm/impl/helper/BaseTracker.java
	M	configadmin/src/main/java/org/apache/felix/cm/impl/helper/ManagedServiceFactoryTracker.java
	M	configadmin/src/main/java/org/apache/felix/cm/impl/helper/ManagedServiceTracker.java
	M	configadmin/src/main/resources/OSGI-INF/permissions.perm
Committed r1765805
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Http Service is not unregistered / restarted if Jetty is reconfigured,FELIX-5379,13011767,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,12/Oct/16 19:02,06/Jan/17 12:01,14/Mar/19 02:48,12/Oct/16 19:05,http.jetty-3.4.0,,,,,,http.jetty-3.4.2,,,,,,,HTTP Service,,,,,,0,,,,,,"If jetty is reconfigured, e.g. through a configuration change (managed service), the jetty server itself is stopped, however the http service (and whiteboard impl) are not unregistered. WHich then leads to a wrong state (two http services), duplicate registrations etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 12 19:05:56 UTC 2016,,,,,,0|i34son:,9223372036854775807,,,,,,,,12/Oct/16 19:05;cziegeler;Fixed in rev 1764507,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Getting childnode names should not perform sync,FELIX-5377,13011155,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,10/Oct/16 19:54,15/Oct/16 13:55,14/Mar/19 02:48,12/Oct/16 05:30,prefs-1.0.6,,,,,,prefs-1.1.0,,,,,,,,,,,,,0,,,,,,Getting the child node names currently automatically performs a sync which in some cases might overwrite local changes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2016-10-10 19:54:54.0,,,,,,0|i34oxj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creating a node with an invalid path is not throwing,FELIX-5375,13011153,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,10/Oct/16 19:52,15/Oct/16 13:55,14/Mar/19 02:48,12/Oct/16 05:30,prefs-1.0.6,,,,,,prefs-1.1.0,,,,,,,,,,,,,0,,,,,,"According to the spec, if a node is tried to be created with an invalid path, the node() method should throw.
Path with a trailing slash or double slashes are currently allowed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2016-10-10 19:52:38.0,,,,,,0|i34ox3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentDescriptorIO.java relies on XML tags order,FELIX-5371,13010472,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,enterit,enterit,07/Oct/16 14:50,18/Oct/16 04:58,14/Mar/19 02:48,13/Oct/16 05:38,scr generator 1.14.0,,,,,,maven-scr-plugin 1.23.0,scr ant task 1.16.0,scr bnd plugin 1.6.0,scr generator 1.15.0,,,,SCR Tooling,,,,,,0,,,,,,"The parser relies implicitly on an order of tags in a component descriptor XML.
https://github.com/apache/felix/blob/1efe76fff7f4dcc5da5aa450ee8e7a774c874256/tools/org.apache.felix.scr.generator/src/main/java/org/apache/felix/scrplugin/xml/ComponentDescriptorIO.java#L546
{code}
                } else if (localName.equals(IMPLEMENTATION)) {
                    ...
                    this.currentClass = new ClassDescription(cl, ""classpath:"" + className);
                    ...
                } else if (localName.equals(SERVICE)) {

                    this.currentService = new ServiceDescription(null);
                    this.currentClass.add(this.currentService);
{code}

This chunk of code expects <implementation> tag to happen before <service> tag. If the order is reversed, then parsing files with NullPointerException when trying to call ""add"" on an uninitialized variable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-09 14:15:50.109,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 09 14:25:36 UTC 2016,,,,,,0|i34kpz:,9223372036854775807,,,,,,,,"09/Oct/16 14:15;cziegeler;Thanks for reporting, it's actually slightly worse, the DS XML schema uses a sequence of
property
properties
service
reference
implementation

which means that usually service always comes before implementation - if the generated XML is valid

So I think we should a) fix the generation of the XML to have the correct order and b) make the read independent of any order","09/Oct/16 14:25;cziegeler;[~enterit] I've committed  a potential fix in rev 1763983, could you please give this a try?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error parsing clauses with values containing ':=',FELIX-5370,13010471,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,07/Oct/16 14:49,13/Oct/16 06:16,14/Mar/19 02:48,07/Oct/16 14:54,utils-1.8.2,,,,,,utils-1.8.4,,,,,,,Utils,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 07 14:54:19 UTC 2016,,,,,,0|i34kpr:,9223372036854775807,,,,,,,,"07/Oct/16 14:54;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	utils/src/main/java/org/apache/felix/utils/manifest/Parser.java
	M	utils/src/test/java/org/apache/felix/utils/manifest/ParserTest.java
Committed r1763772
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationManager ignores NotCachablePersistenceManager marker interface,FELIX-5368,13010087,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,asanso,asanso,06/Oct/16 07:56,25/Oct/16 17:35,14/Mar/19 02:48,21/Oct/16 14:55,,,,,,,configadmin-1.8.12,,,,,,,Configuration Admin,,,,,,0,,,,,,"In FELIX-4930 a mechanism to support PersistenceManagers that provide their own caching heuristics was added.
This is partially broken since the logic is ignored by the {{ConfigurationManager}}. 
Adding unit tests showing the issue and patch",,,,,,,,,,,,,,,,,,,,06/Oct/16 08:01;asanso;FELIX-5368-diff.txt;https://issues.apache.org/jira/secure/attachment/12831916/FELIX-5368-diff.txt,06/Oct/16 07:59;asanso;FELIX-5368-test-diff.txt;https://issues.apache.org/jira/secure/attachment/12831915/FELIX-5368-test-diff.txt,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2016-10-06 12:42:10.954,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 21 14:55:20 UTC 2016,,,,,,0|i34icf:,9223372036854775807,,,,,,,,06/Oct/16 08:01;asanso;attaching patch. ,06/Oct/16 12:42;cziegeler;[~rotty3000] What do you think about this issue?,"06/Oct/16 17:44;rotty3000;I'll have to take a look. It's working in our build, but perhaps there was some regression in the interim.",21/Oct/16 14:44;rotty3000;After testing I think this is a good fix! Nice catch [~asanso]!,"21/Oct/16 14:55;cziegeler;Thanks, patch is applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Felix Prefs does not declare a capability it provides,FELIX-5364,13007380,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,yrashk,yrashk,24/Sep/16 17:34,15/Oct/16 13:55,14/Mar/19 02:48,09/Oct/16 10:21,prefs-1.0.6,,,,,,prefs-1.1.0,,,,,,,Preferences Service,,,,,,0,,,,,,"Not declaring providing a service capability causes failures like missing requirements in components that depend on PreferencesService:

osgi.service; filter:=""(objectClass=org.osgi.service.prefs.PreferencesService)""; effective:=active]""

If preferable, I can send a PR.

P.S. Or am I missing something of importance here?

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-26 10:14:00.215,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 09 10:21:46 UTC 2016,,,,,,0|i341nr:,9223372036854775807,,,,,,,,"26/Sep/16 10:14;cziegeler;Thanks for reporting, yes a patch would be great","26/Sep/16 10:25;githubbot;GitHub user yrashk opened a pull request:

    https://github.com/apache/felix/pull/73

    Felix Prefs should declare a provided service capability

    This will enable other services depend on this capability.
    
    For more details, see https://issues.apache.org/jira/browse/FELIX-5364
    
    I also proposed to release 1.0.7 to make this change available for everybody.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yrashk/felix prefs-capability

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/73.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #73
    
----
commit 1fffbd743408618f82697f8ebe3a9d3a22072f7b
Author: Yurii Rashkovskii <yrashk@gmail.com>
Date:   2016-09-26T10:23:58Z

    Felix Prefs should declare a provided service capability
    
    This will enable other services depend on this capability.
    
    For more details, see https://issues.apache.org/jira/browse/FELIX-5364

----
","26/Sep/16 10:25;yrashk;Thanks, here's my proposed PR: https://github.com/apache/felix/pull/73",08/Oct/16 13:35;yrashk;Any comments on the patch? Anything I can do to improve it or make it easier to merge?,"09/Oct/16 10:21;cziegeler;[~yrashk] Thanks for your patch, I've committed a slightly modified version to match the format uses in other projects",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component Factory and CM factory Configurations behave badly,FELIX-5356,13006657,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,tjwatson,tjwatson,tjwatson,21/Sep/16 21:26,11/Oct/16 14:28,14/Mar/19 02:48,11/Oct/16 14:28,scr-2.0.6,,,,,,,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"This is a corner case and a minor issue in my opinion.  The specification really only mentions the following with respect to what should happen with factory components and CM factory configurations:

{quote}
A factory configuration must not be used if the component is a factory component. This is because SCR is not free to create component configurations as necessary to support multiple Configurations. When SCR detects this condition, it must log an error message with the Log Service,
if present, and ignore the component description.
{quote}

At face value it seems to suggest that any CM factory configurations must be ignored when they match the factory component PID.  But the last sentence also makes a strong assertion that the component description must be ignored if matching factory configurations are detected while discovering a factory component description.  This seems overkill to me.  Why not just ignore the factory configurations?  Why must the factory component description be ignored altogether?

The other issue is that if a matching factory configuration is created later, after a ComponentFactory has been registered and a ComponentInstance has been created (with newInstance) then felix SCR will dispose of the ComponentInstance.  In this case the component instance did not specify an update method.",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-21 22:01:55.75,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 11 14:28:45 UTC 2016,,,,,,0|i33x73:,9223372036854775807,,,,,,,,"21/Sep/16 22:01;djencks;I'd take your first point up with BJ.  I think it is intended to mean that ""nothing happens"" not that ""kill all the instances created by newInstance"".  If it means what it says, we gotta fix it in R7 and provide a flag for more sensible behavior.

For the 2nd point, I would investigate overriding getComponentMetadata() from AbstractComponentManager in ComponentFactoryImpl to return metadata that has ConfigurationPolicy.IGNORE.  Maybe this would be only if  the obsoleteFactoryComponent support is off (maybe it's time to drop that anyway) and I don't know if it would interfere with my PersistentFactoryComponent extension behavior.","22/Sep/16 04:27;djencks;On further consideration, setting the policy definitely won't work since a factory component can be configured by any number of singleton configurations.  A better approach might be to look at the configuration merging code in ConfigurableComponentHolder and prevent dealing with a matching factory configurations if the component is a factory component.  If the literal spec behavior is correct, that might be a place to implement it as well.","22/Sep/16 12:55;tjwatson;Yes, that is the approach I was going to use.  Basically just ignore factory configurations for factory components, otherwise the rest of the code/behavior with respect to singleton configuration stays the same.",11/Oct/16 14:28;tjwatson;I released a fix and testcase for this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect encoding in metatype props file,FELIX-5345,13004852,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,sergey-b,sergey-b,14/Sep/16 12:13,18/Oct/16 04:59,14/Mar/19 02:48,16/Sep/16 02:12,scr generator 1.8.0,,,,,,maven-scr-plugin 1.23.0,scr ant task 1.16.0,scr bnd plugin 1.6.0,scr generator 1.15.0,,,,SCR Tooling,,,,,,0,,,,,,"maven-scr-plugin generates metatype properties file in incorrect encoding.

Steps to reproduce:

1. Create component with non-ascii label

{code:java}
import org.apache.felix.scr.annotations.Component;

@Component(
    metatype = true,
    label = ""Какие-то буквы"",
    description = ""Какие-то буквы"")
public class Reproduce {
    //
}
{code}

2. Make bundle using maven-scr-plugin 1.14 or higher

3. Deploy to Apache Felix

4. Go to configuration page of Felix Web Console

Expected result

1. There is component with correct name

Actual

1. Component name is scrumbled",,,,,,,,,,,,,,,,,,,,14/Sep/16 12:18;sergey-b;MetaTypeIO.patch;https://issues.apache.org/jira/secure/attachment/12828445/MetaTypeIO.patch,14/Sep/16 12:18;sergey-b;pom.xml;https://issues.apache.org/jira/secure/attachment/12828446/pom.xml,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2016-09-15 08:56:16.944,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 15 15:09:35 UTC 2016,,,,,,0|i33m3r:,9223372036854775807,,,,,,,,14/Sep/16 12:18;sergey-b;Here is my pom.xml and possible patch (not tested).,"15/Sep/16 08:56;cziegeler;Thanks for reporting, I've committed a potential fix, could you please give this a try?","15/Sep/16 13:37;sergey-b;Nothing has changed. Please, note that properties file format allows only ISO8859-1 encoding. https://docs.oracle.com/javase/6/docs/api/java/util/Properties.html

The issue was not in that encoding is platform-dependent, but that it was other than ISO8859-1.

If one uses method store(OutputStream), class Properties makes character escaping. When the method store(Writer) it is the responsibility of user.","15/Sep/16 14:15;cziegeler;Good point, I've changed the code accordingly",15/Sep/16 15:09;sergey-b;Now the problem is fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP_WHITEBOARD_TARGET doesn't work reliably,FELIX-5344,13004636,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,db82407,db82407,13/Sep/16 15:34,16/Sep/16 07:36,14/Mar/19 02:48,16/Sep/16 05:48,http.base-3.0.12,http.jetty-3.2.4,,,,,http.base-3.0.16,http.bridge-3.0.16,http.jetty-3.4.0,,,,,HTTP Service,,,,,,0,,,,,,"I am trying to use HTTP_WHITEBOARD_TARGET to match a specific http instance:

(I'm actually experimenting with multiple http instances, but the problem occurs with a single instance).

@Component(service = Servlet.class,
	property = {
HttpWhiteboardConstants.HTTP_WHITEBOARD_TARGET + ""=(org.osgi.service.http.port=7777)""
        })

I am configuring http.jetty using config admin (via fileinstall)

I have disabled automatic jetty startup using:
org.apache.felix.http.enable=false

Now I start jetty by dropping the file org.apache.felix.http.cfg into the fileinstall load directory:
org.apache.felix.http.enable=true
org.osgi.service.http.port=7777

and my servlet is not always registered.

This appears to be because WhiteboardManager.addWhiteboardService() is being called before the http service properties have been set.


Here's the output of some debug I added to isMatchingService():

XXXtarget =(org.osgi.service.http.port=7777) match=false
XXXprop objectClass=[Ljava.lang.String;@292aebaf
XXXprop osgi.http.service.id=[60]
XXXprop service.bundleid=22
XXXprop service.id=61
XXXprop service.scope=singleton

It doesn't contain any endpoint properties.

To prove this is a timing issue, I stopped and started my web bundle, which then registered correctly. The corresponding debug is:

XXXtarget =(org.osgi.service.http.port=7777) match=true
XXXprop objectClass=[Ljava.lang.String;@292aebaf
XXXprop org.apache.felix.http.enable=true
XXXprop org.apache.felix.https.enable=false
XXXprop org.osgi.service.http.port=7777
XXXprop org.osgi.service.http.port.secure=8443
XXXprop osgi.http.endpoint=[Ljava.lang.String;@1d1447fa
XXXprop osgi.http.service.id=[60]
XXXprop service.bundleid=22
XXXprop service.id=61
XXXprop service.scope=singleton


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-13 20:13:24.591,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 16 07:36:22 UTC 2016,,,,,,0|i33krr:,9223372036854775807,,,,,,,,"13/Sep/16 20:13;cziegeler;The problem is that two methods are called register() and setProperties() on the controller. While the initial design of http.base was to simply rely on init/destroy of the registered dispatcher servlet, this has changed over time. 
I think we should merge the register and setProperties method into a single one, avoiding the need of synchronizing and actually simplifying the implementation in http.base as well.",13/Sep/16 20:45;cziegeler;[~db82407] In revision 1760595 I've committed the above mentioned change which should solve the problem. Could you please give this a try?,13/Sep/16 20:52;cziegeler;Adjusted bridge code in rev 1760596,"13/Sep/16 21:41;db82407;Hi Carsten,

This isn't working for me at all;

e.g. webconsole is not found.

I updated to revision 1760601 and did 'mvn clean install'. all tests passed.

I then tried: rm -rf ~/.m2/repository/org/apache/felix/org.apache.felix.http*/*-SNAPSHOT

and repeated: mvn clean install

This failed due to a missing dependency: org.apache.felix.http.jetty-3.2.3-SNAPSHOT

(I obviously had a cached version of this in ~/.m2).

This dependency is in itest/pom.xml. I changed this to be 3.2.5-SNAPSHOT.

mvn clean install now fails the integration tests.

Tests run: 80, Failures: 36, Errors: 1, Skipped: 0

--
Derek","13/Sep/16 21:50;cziegeler;[~db82407] Args, sorry for that - yeah I ran all tests again 3.2.3-SNAPSHOT as well....that's why I didn't notice the problem. I'll have a look","13/Sep/16 21:58;cziegeler;[~db82407] It was a stupid sanity check mistake, fixed in rev 1760605. If you rebuild base and then jetty, the tests all pass again","13/Sep/16 22:13;db82407;works a treat!

thanks for your fast response.

--
Derek",16/Sep/16 07:36;db82407;I have tested this and verify that it resolves the issue. Thanks. Derek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NoClassDefFound not wrapped in the ClassScanner,FELIX-5328,12998225,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,18/Aug/16 15:05,18/Oct/16 04:59,14/Mar/19 02:48,16/Sep/16 05:55,scr generator 1.14.0,,,,,,maven-scr-plugin 1.23.0,scr ant task 1.16.0,scr bnd plugin 1.6.0,scr generator 1.15.0,,,,SCR Tooling,,,,,,0,,,,,,"Unfortunately only {{ClassNotFoundException}} is wrapped in https://github.com/apache/felix/blob/trunk/tools/org.apache.felix.scr.generator/src/main/java/org/apache/felix/scrplugin/helper/ClassScanner.java#L148. Every other exception is not wrapped at all, making it very hard to figure out where an issue happened.

An example stack trace of an error might look likes this
{code}
[ERROR] Bundle <some bundle : Got unexpected exception while analyzing:java.lang.NoClassDefFoundError: javax/servlet/jsp/el/VariableResolver
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:368)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:362)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:361)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:144)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:146)
	at org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin.analyzeJar(SCRDescriptorBndPlugin.java:178)
	at aQute.bnd.osgi.Analyzer.doPlugins(Analyzer.java:656)
	at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:209)
	at aQute.bnd.osgi.Builder.analyze(Builder.java:385)
	at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:687)
	at aQute.bnd.osgi.Builder.build(Builder.java:105)
	at org.apache.felix.bundleplugin.BundlePlugin.buildOSGiBundle(BundlePlugin.java:972)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:470)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:387)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:378)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:862)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:286)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: java.lang.ClassNotFoundException: javax.servlet.jsp.el.VariableResolver
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
{code}

I would suggest to not only catch {{ClassNotFoundException}} in the {{ClassScanner}} but basically all {{Throwable's}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-19 08:24:25.784,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 16 11:18:18 UTC 2016,,,,,,0|i32h8v:,9223372036854775807,,,,,,,,"19/Aug/16 08:24;githubbot;GitHub user kwin opened a pull request:

    https://github.com/apache/felix/pull/72

    FELIX-5328 catch all throwables and wrap in SCRDescriptorExceptions

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kwin/felix FELIX-5328

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/72.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #72
    
----
commit 8def298f9e4af2e3190833bf29b1ee5b10f36ba1
Author: Konrad Windszus <konrad.windszus@netcentric.biz>
Date:   2016-08-19T08:22:43Z

    FELIX-5328 catch all throwables and wrap in SCRDescriptorExceptions

----
","16/Sep/16 05:55;cziegeler;Thanks for the patch, [~kwin]. I've applied a slightly modified version which leaves the call to process() in the try/catch block. I'm not 100% but I think to remember that a CNFE can be thrown from there as well",16/Sep/16 11:18;kwin;Thanks [~cziegeler]. Your fix looks better and should cover all exceptions.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpServiceRuntime provides incorrect info for service that is both Servlet and Resource,FELIX-5319,12995187,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,db82407,db82407,05/Aug/16 11:50,12/Aug/16 09:31,14/Mar/19 02:48,05/Aug/16 14:54,http.base-3.0.10,http.bridge-3.0.10,http.jetty-3.2.2,,,,http.base-3.0.12,http.bridge-3.0.12,http.jetty-3.2.4,,,,,HTTP Service,,,,,,0,,,,,,"I have a servlet defined as follows:
Note: it defines _both_ servlet and resource properties.

@Component(property = {
		HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME + ""=Hello World"",
		HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN + ""=/hello/sayHello"",
        HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PATTERN + ""=/hello/static/*"",
        HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PREFIX + ""=/static""
        })
public class HelloWorldServlet extends HttpServlet implements Servlet {
}


I am using the HttpServiceRuntime to discover servlet info, but this servlet does not appear.

@Reference
HttpServiceRuntime httpRuntime;

RuntimeDTO runtimeDTO = httpRuntime.getRuntimeDTO();

for (ServletContextDTO servletContextDTO : runtimeDTO.servletContextDTOs) {
	ServletDTO[] servletDTOs = servletContextDTO.servletDTOs;
    // servletDTOs.length == 0
}

The equivalent code for ResourceDTO _does_ find a ResourceDTO for this servlet, but it contains servlet, rather than resource info:

resourceDTO.patterns = [/hello/sayHello]
resourceDTO.prefix = null


If I remove this resource property from the servlet, then the above code finds the servlet, as expected:
HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PATTERN + ""=/hello/static/*""



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-05 14:10:29.768,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Aug 05 15:48:40 UTC 2016,,,,,,0|i31yi7:,9223372036854775807,,,,,,,,"05/Aug/16 14:10;cziegeler;Thanks for reporting, as a first step I've added a test case for that to our integration tests...and the test fails of course atm, with the problem mentioned in the description","05/Aug/16 14:55;cziegeler;I've committed a fix - test passes now.

The problem was that internally a Resource is treated like a Servlet using the same ServletInfo implementation - which then leads to one object overwriting the other. As the DTO handling makes the assumption that this can't happen, the state gets totally corrupted.
We're now using a  sub class of ServletInfo for resources and compare the class names in the compareTo method","05/Aug/16 15:48;db82407;Hi Carsten,

Thanks for fixing this so quickly.

I can confirm that a local build of 3.2.3-SNAPSHOT works fine for me.

--
Derek",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR causes startup to wait when bundle uninstall itself in activator,FELIX-5318,12994345,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,djencks,chetanm,chetanm,02/Aug/16 17:25,06/Aug/16 07:10,14/Mar/19 02:48,03/Aug/16 05:52,,,,,,,scr-2.0.6,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"If a bundle which does not have any service component configured uninstall itself upon activation then SCR waits for latch to timeout in {{Activator$ScrExtension.destroy}}

The threaddump indicate that FelixStartLevel thread is waiting for latch to timeout
{noformat}
""FelixStartLevel"" daemon prio=10 tid=0x00007f4df45c5000 nid=0x65e6 waiting on condition [0x00007f4d92fcc000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x0000000783400420> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1033)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1326)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:282)
	at org.apache.felix.scr.impl.Activator$ScrExtension.destroy(Activator.java:268)
	at org.apache.felix.utils.extender.AbstractExtender$2.run(AbstractExtender.java:290)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.felix.utils.extender.AbstractExtender.destroyExtension(AbstractExtender.java:312)
	at org.apache.felix.utils.extender.AbstractExtender.bundleChanged(AbstractExtender.java:186)
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:916)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:835)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:517)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2600)
	at org.apache.felix.framework.Felix.uninstallBundle(Felix.java:2712)
	at org.apache.felix.framework.BundleImpl.uninstall(BundleImpl.java:1055)
	at com.foo.bar.Initializer.activate(Initializer.java:71)
{noformat}

This happens at [1] most likely because Framework has not invoked started yet so latch is not changed. As a fix destroy method should check if the bundle being stopped has any service component. If not it should then not wait on the latch

[1] https://github.com/apache/felix/blob/trunk/scr/src/main/java/org/apache/felix/scr/impl/Activator.java#L280",,,,,,,,,,,,,,,,,,,,02/Aug/16 17:27;chetanm;FELIX-5318-v1.patch;https://issues.apache.org/jira/secure/attachment/12821654/FELIX-5318-v1.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-08-03 05:40:53.578,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 03 06:05:54 UTC 2016,,,,,,0|i31tb3:,9223372036854775807,,,,,,,,02/Aug/16 17:27;chetanm;[possible patch|^FELIX-5318-v1.patch] this should fix the issue based on logical flow. Creating a testcase would take some time. May be logical fix is  sufficient!! Otherwise would try to come up with test also,03/Aug/16 05:40;djencks;In r1755018 and r1755019 I think I solved the problem in a different way using a lock rather than avoiding the countdown latch.  Could you see if it fixes the problem in your scenario?  I haven't had time to write a test.,03/Aug/16 05:49;chetanm;With latest trunk I do not see the pause post uninstall. So it works!,03/Aug/16 05:52;djencks;Thanks for checking so promptly!,03/Aug/16 06:05;chetanm;Thanks to you David for fixing it so promptly :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Updating from SCR 2.0.2 to SCR 2.0.4 leads to nullpointers,FELIX-5316,12994255,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,maxurech,maxurech,02/Aug/16 11:38,06/Aug/16 07:10,14/Mar/19 02:48,02/Aug/16 21:08,scr-2.0.4,,,,,,scr-2.0.6,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Our Application works fine with org.apache.felix.scr 2.0.2.
If we update to org.apache.felix.scr 2.0.4 it doesn't work any more.

Several bundles fail to load their components. 
The failure is displayed as stack trace([^felixScrNullpointer.txt]) on the console.
The failing components all have the same pattern in their definitions. 
They all provide the same interface and are defined as immediate=true. 
There is another component, which defines a dynamic 0..n reference to this interface.

I suspect, there has been introduced a bug with issue FELIX-4417.","org.apache.felix.main 5.4.0
org.apache.felix.scr 2.0.4",,,,,,,,,,,,,,,,,,,02/Aug/16 11:39;maxurech;felixScrNullpointer.txt;https://issues.apache.org/jira/secure/attachment/12821570/felixScrNullpointer.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-08-02 17:04:10.573,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 02 21:08:56 UTC 2016,,,,,,0|i31srb:,9223372036854775807,,,,,,,,02/Aug/16 11:39;maxurech;The typical stack trace shown for each failing component([^felixScrNullpointer.txt]).,"02/Aug/16 17:04;mjameswh;The bug has been introduced in r1744739 (FELIX-5243).

Here are the key items of the stack trace:

{noformat}
java.lang.NullPointerException
	at org.osgi.util.tracker.ServiceTracker.<init>(ServiceTracker.java:184)
	at org.apache.felix.scr.impl.inject.ClassUtils.getPackageAdmin(ClassUtils.java:187)
	at org.apache.felix.scr.impl.inject.ClassUtils.getClassFromComponentClassLoader(ClassUtils.java:118)
        [...]
	at org.apache.felix.scr.impl.Activator.start(Activator.java:108)
        [...]
{noformat}

From the first three lines, we get that the static field {{ClassUtils.m_context}} is {{null}}. The value of that field is set in {{Activator.start()}}, at line 110. But the method is called a little bit too early: we are currently at line 108 of that very same method.

It should be possible to fix the bug by simply moving lines 109-110 of Activator.jave before the current line 108.",02/Aug/16 21:08;djencks;Applied James's suggested fix in r1755004,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected release of ConfigurationAdmin service in RegionConfigurationSupport ,FELIX-5315,12994003,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,mjameswh,mjameswh,01/Aug/16 15:45,06/Aug/16 07:09,14/Mar/19 02:48,02/Aug/16 16:15,scr-2.0.4,,,,,,scr-2.0.6,,,,,,,Configuration Admin,Declarative Services (SCR),,,,,0,,,,,,"In commit 978a710, RegionConfigurationSupport has been modified to obtain the ConfigurationAdmin service through the ConfigurationAdmin's bundle context (in getConfigAdmin(), around line 633). However, services acquired through that method are then released using the impersonated bundle's context (for example in the finally block of configureComponentHolder(ComponentHolder), around line 186, and the finally block of getConfigurationInfo(TargetedPID, TargetedPID, ComponentHolder, BundleContext), around line 465).

This cause leak of service on the ConfigurationAdmin's bundle context, as well as unexpected early release of services on impersonated bundle contexts, causing an IllegalStateException(""Configuration Admin service has been unregistered"") being thrown in ConfigurationAdminImpl#getConfigurationManager().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-01 16:18:39.251,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 02 20:14:20 UTC 2016,,,,,,0|i31r7b:,9223372036854775807,,,,,,,,"01/Aug/16 16:18;cziegeler;We're hitting this as well, thanks for reporting!","02/Aug/16 05:11;djencks;I committed a fix in r1754817.  I'd like to verify with some experts that the fix is OK since it involves calling bundleContext.getService(serviceRef) with a serviceReference obtained from a different bundleContext. This seems to work and I don't see anything in the spec saying it shouldn't but it certainly isn't a common usage.

This is a pretty egregious and serious problem, I wonder after it really is fixed if we should immediately release 2.0.6?","02/Aug/16 06:08;cziegeler;[~djencks] Thanks for the quick fix, it seems to solve our problem and I can't see the IllegalStateException(""Configuration Admin service has been unregistered"") anymore.
The java API of ServiceReference says: ""A ServiceReference object may be shared between bundles and can be used to examine the properties
of the service and to get the service object."", so I think we're good.

We should definitely get out a 2.0.6 as quickly as possible, if we agree on this fix, I can do the release asap.",02/Aug/16 16:15;djencks;That javadoc quote seems pretty conclusive :-)  I think we can go ahead with the release.,"02/Aug/16 16:26;mjameswh;Actually, there could be an issue if there are more than one ConfigurationAdmin services in the environment, with one being visible to the SCR bundle and another one to an impersonated bundle. Though this in itself appears to be a very unlikely configuration, I can think of some corner cases where it would be possible: 1) multiple regions with SCR being loaded in a parent region while ConfigurationAdmin is loaded in a child region; 2) manipulations on bundle/services visibility done with hooks or a custom resolver. Neither case would be less an issue with 2.0.4 though, so that should not prevent a release of the proposed fix, but maybe one may want to think a little more about these rare yet possible occurrences...","02/Aug/16 19:25;djencks;The existence of RegionConfigurationSupport is entirely to deal with this scenario, and some informal testing seems to indicate that it works (at least before I broke stuff in 978a710).  If you can think of an actual scenario where the current code doesn't work please explain.  Roughly speaking how I think I set it up is:
precondition: there's only one config admin api visible anywhere.  DS isn't reasonably going to be able to deal with config admin services that implement CA from a package inconsistent with the CA interfaces DS sees.
precondition: there is a maximum of 1 config admin service visible to each extended bundle.
- each extended bundle opens a ServiceTracker for config admin services.
- When a config admin service shows up in one of these trackers, we find the bundle it's registered with and see if it's a config admin implementation we already know about.  If not, we add a new RegionConfigurationSupport for it (slightly simplified to elide the no-lock implementation). Therefore, there is a 1-1 relationship between config admin services that could possibly be relevant to an extended bundle and RegionConfigurationSupport instances.
- the RegionConfigurationSupport deals with configuration events from this config admin service and distributes them to relevant components that can see the associated config admin service.","02/Aug/16 20:14;mjameswh;Thanks for your clarifications! I had indeed missed a few key facts about the code's architecture, and was therefore under the impression that a {{caReference}} could be passed to a bundle context that would not be able to resolve it. However, I see now how the code indeed ensure that 1) there is exactly one RegionConfigurationSupport for each ConfigurationAdmin implementation bundle, 2) the correct RegionConfigurationSupport is used on resolving some component, and 3) that the {{caReference}} can consequently only be passed to a bundle context for which that reference would be valid. That sounds good for the multiple region case.

As for the other case I mentioned, that is manipulation of bundle/service visibility, for example using service hooks, I'm not absolutely certain that it would not be possible to create a problematic setup, but it seems indeed that the current solution should also handle pretty much any case properly, as long as the second precondition holds (that is, only one config admin service visible to each extended bundle).

Good job ;)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SslFilter: sendRedirect does not support deliberate protocol changes on the current host,FELIX-5309,12991093,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,20/Jul/16 12:09,29/Aug/16 11:13,14/Mar/19 02:48,24/Aug/16 07:27,http.sslfilter-1.0.6,,,,,,http.sslfilter-1.2.0,,,,,,,HTTP Service,,,,,,0,,,,,,"Consider the case where application A and B are running under the same domain example.com. A is served by an Apache Felix (below https://example.com/A) and only supports HTTPS (being terminated e.g. by a LoadBalancer in front). B is served by some other application server (below https://example.com/B) and only supports HTTP.

Now I create a link from A towards B with {{HttpServletResponse.sendRedirect(""http://example.com/B/somepath"")}}.

This URL is automatically converted by the SslFilter to {{https://example.com/B/somepath}} which is clearly not intended.

I think the sendRedirect(...) implementation of the SSLFilter from FELIX-4420 is way too aggressive, because it will also rewrite absolute URIs already containing a scheme.
Actually absolute URIs should never been rewritten by that filter, only relative ones (starting with a ""/"").",,,,,,,,,,,,,,,,,,,,23/Aug/16 05:22;cziegeler;patch.txt;https://issues.apache.org/jira/secure/attachment/12824990/patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-08-22 12:34:39.953,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 23 19:29:47 UTC 2016,,,,,,0|i3198v:,9223372036854775807,,,,,,,,20/Jul/16 12:50;kwin;There is currently an explicit test for the change of absolute URIs containing a different scheme (https://github.com/apache/felix/blob/d48ced9595f0ac7cd9dd3864743598b832313d37/http/sslfilter/src/test/java/org/apache/felix/http/sslfilter/internal/SslFilterJettyTest.java#L102). This test wrongly assumes that the current domain is being served exclusively by Apache Felix (or at least only by backends supporting HTTPS).,"20/Jul/16 12:59;kwin;Since the same logic for rewriting is being used for {{sendRedirect(<some uri>)}} and {{setHeader(""Location"", <some uri>)}} it is not easy to come up with a fix, which does not break intended rewriting. 

What again is the reason that {{setHeader(...)}} is overwritten as well? Even for Jetty it should work with {{sendRedirect(...)}} being overwritten only because that one will call the Jetty implementation of sendRedirect(...) already with the correct value (i.e. rewritten URI).
[~cziegeler] and [~jajans] WDYT?","22/Aug/16 12:34;cziegeler;FELIX-4420 originally was implemented by overwriting setHeader, it seems that has changed to overwrite both setHeader and sendRedirect.
I think it still makes sense to overwrite both and apply the same logic. If setHeader is called with a relative path, its better to make it absolute using the correct protocol.

Now I agree that if sendRedirect or setHeader is called with an absolute path, no rewriting should happen. I don't know why the rewriting is done nevertheless. I assume, it's because of the initial version relying on sendRedirect calling setHeader","23/Aug/16 05:22;cziegeler;Attaching a potential fix which does not rewrite absolute urls, adjusted test cases and added some more test cases for relative paths","23/Aug/16 05:23;cziegeler;[~kwin] I've attached a potential fix, wdyt? As this is a change in behaviour I think we should make it configurable, just to be safe that if we break applications there is an easy way out.","23/Aug/16 07:34;kwin;The patch looks good to me. Maybe we should extend the javadoc of {{sendRedirect}} and {{setHeader}} as well telling under which circumstances somethings gets rewritten (although probably not too many people will look at the javadoc of the response being set by the filter). I agree that introducing a property to configure the behavior of absolute URLs is probably the safest way. What do you think about a label like ""Don't rewrite absolute redirect URLs"" with a value of {{false}} as the default?","23/Aug/16 15:54;cziegeler;[~kwin] Thanks for the feedback, yes, that sounds good to me. I'll update the patch accordingly","23/Aug/16 19:29;cziegeler;In rev 1757420 I committed a version with a configuration property which is set to false (no rewriting of absolute urls) by default
I've increased the test coverage to test both cases (setting the flag to true and false)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SERVICE_PID property should not be created,FELIX-5304,12988397,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,11/Jul/16 19:15,14/Jul/16 19:45,14/Mar/19 02:48,11/Jul/16 19:20,maven-scr-plugin 1.22.0,scr annotations 1.10.0,scr ant task 1.15.0,scr generator 1.14.0,,,maven-scr-plugin 1.23.0,scr annotations 1.11.0,scr ant task 1.16.0,scr generator 1.15.0,,,,SCR Tooling,,,,,,0,,,,,,"The @Component annotation has a boolean flag for creating the SERVICE_PID property which defaults to true. However, the SERVICE_PID property is handled by the DS Implementation and should automatically be set to the configuration PIDs used by the component.
Therefore this property should never be created.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 12 04:46:40 UTC 2016,,,,,,0|i30t3r:,9223372036854775807,,,,,,,,11/Jul/16 19:20;cziegeler;Deprecated the createPid attribute and always set it to false in the scr annotations,12/Jul/16 04:46;cziegeler;Removed the pid handling from the scr generator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE using Http Whiteboard,FELIX-5302,12987167,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,db82407,db82407,06/Jul/16 14:42,21/Jul/16 11:48,14/Mar/19 02:48,08/Jul/16 10:15,http.base-3.0.8,http.bridge-3.0.8,http.jetty-3.2.0,,,,http.base-3.0.10,http.bridge-3.0.10,http.jetty-3.2.2,,,,,HTTP Service,,,,,,0,,,,,,"I am getting this NPE about 50% of the time after reconfiguring my servlet (causing it to unregister and re-register):

[org.apache.felix.http.jetty:3.2.0] Exception while processing request to /hello/sayHello

java.lang.NullPointerException: null
org.apache.felix.http.base.internal.handler.ServletHandler.handle(ServletHandler.java:85)
org.apache.felix.http.base.internal.dispatch.InvocationChain.doFilter(InvocationChain.java:79)
org.apache.felix.http.base.internal.dispatch.Dispatcher.dispatch(Dispatcher.java:124)
org.apache.felix.http.base.internal.DispatcherServlet.service(DispatcherServlet.java:61)
javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)
org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:583)
org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:224)
org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)
org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)
org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)
org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)
org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)
org.eclipse.jetty.server.Server.handle(Server.java:518)
org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)
org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)
org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)
org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)
org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)
org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)
org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)
org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)
org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)
java.lang.Thread.run(Thread.java:745)


The servlet uses the Http Whiteboard:

@Component(
        property = {        HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN + ""=/hello/sayHello"",        HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PATTERN + ""=/hello/static/*"",
HttpWhiteboardConstants.HTTP_WHITEBOARD_RESOURCE_PREFIX + ""=/static""})
public class HelloWorldServlet extends HttpServlet implements Servlet {
}


About 50% of the time when I initially deploy the Servlet, I've noticed that ServletRegistry.addServlet() is called twice for the same servlet with the same serviceId.

I don't know why this happens, but when it does it leads to the NPE above.

The second addServlet() invokes addToInactiveList().
The system works in this state, but it has a duplicate servlet handler in the inactive list.

If the servlet is now reconfigured, causing it to unregister and re-register, we get the NPE above on the next request.

This appears to be because ServletRegistry.removeServlet() fails to invoke
""resolvers.remove(regHandler)"", when the inactive list contains the argument ServletInfo.

Alternatively, addServlet() should never allow a duplicate registration to be added to the inactive list.



",,,,,,,,,,,,,,,,,,,,07/Jul/16 10:57;db82407;http.jetty.bad.log;https://issues.apache.org/jira/secure/attachment/12816607/http.jetty.bad.log,07/Jul/16 10:57;db82407;http.jetty.good.log;https://issues.apache.org/jira/secure/attachment/12816608/http.jetty.good.log,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2016-07-07 09:29:23.441,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jul 08 10:15:13 UTC 2016,,,,,,0|i30ljj:,9223372036854775807,,,,,,,,07/Jul/16 09:29;cziegeler;[~db82407] Would it be possible to attach a bundle for testing? Or could you post the stack trace for the two addServlet calls?,"07/Jul/16 10:57;db82407;Hi Carsten,

I'm attaching the stack traces first as it's easier.

I'll look into attaching some bundles/test-case, but that will take longer.

The stack trace is generated using the SVN head built locally.

I've also added two log messages so that I can determine whether it is a good or bad startup. I've done this without affecting the line numbers.

line 127 (patterns.add(pattern);) I've appended:
log(""addServlet: pattern="" + pattern + "" serviceId="" + handler.getServletInfo().getServiceId()); Thread.dumpStack();

line 155 (this.addToInactiveList(pattern, handler, status);) I've appended:
log(""addServlet: addToInactiveList"");

The bad.log will fail on the next request with the NPE after the servlet is unregistered/re-registered.
","07/Jul/16 11:21;cziegeler;[~db82407] Thanks, that's great, would it be possible for you to check whether
org.apache.felix.http.base.internal.whiteboard.tracker.WhiteboardServiceTracker.addingService(WhiteboardServiceTracker.java:36)
is called twice with the same service in the bad case or just once?","07/Jul/16 12:14;db82407;I added logging to addingService(), modifiedService() and removedService().
Here is the output in the bad case, including the previous logging, but without the stack trace:

WhiteboardServiceTracker: addingService: id=15 ref=[javax.servlet.Servlet]
ServletRegistry: addServlet: pattern=/hello/static/* serviceId=15
java.lang.Exception: Stack trace
ServletRegistry: addServlet: pattern=/hello/sayHello serviceId=15
java.lang.Exception: Stack trace
WhiteboardServiceTracker: addingService: id=15 ref=[javax.servlet.Servlet]
WhiteboardServiceTracker: removedService: id=15 ref=[javax.servlet.Servlet]
WhiteboardServiceTracker: removedService: id=15 ref=[javax.servlet.Servlet]
WhiteboardServiceTracker: addingService: id=15 ref=[javax.servlet.Servlet]
ServletRegistry: addServlet: pattern=/hello/sayHello serviceId=15
java.lang.Exception: Stack trace
ServletRegistry: addServlet: pattern=/hello/static/* serviceId=15
java.lang.Exception: Stack trace
ServletRegistry: addServlet: pattern=/hello/sayHello serviceId=15
java.lang.Exception: Stack trace
ServletRegistry: addServlet: addToInactiveList
WhiteboardServiceTracker: addingService: id=15 ref=[javax.servlet.Servlet]
",07/Jul/16 12:47;cziegeler;Thanks [~db82407] - so it seems addingService is called several times with the same reference - this is something the implementation doesn't expect. I'll have a look,"07/Jul/16 13:19;cziegeler;[~db82407] Could you give the following patch for http.base a try? (Apply patch, build http.base then http.jetty):

Index: src/main/java/org/apache/felix/http/base/internal/whiteboard/tracker/WhiteboardServiceTracker.java
===================================================================
--- src/main/java/org/apache/felix/http/base/internal/whiteboard/tracker/WhiteboardServiceTracker.java	(Revision 1751622)
+++ src/main/java/org/apache/felix/http/base/internal/whiteboard/tracker/WhiteboardServiceTracker.java	(Arbeitskopie)
@@ -100,10 +100,13 @@
 
     private void added(final ServiceReference<T> ref)
     {
-        final WhiteboardServiceInfo<T> info = this.getServiceInfo(ref);
-        if ( this.contextManager.addWhiteboardService(info) )
+        if ( this.allInfos.get(ref.getProperty(Constants.SERVICE_ID)) == null )
         {
-            this.allInfos.put((Long)ref.getProperty(Constants.SERVICE_ID), info);
+            final WhiteboardServiceInfo<T> info = this.getServiceInfo(ref);
+            if ( this.contextManager.addWhiteboardService(info) )
+            {
+                this.allInfos.put((Long)ref.getProperty(Constants.SERVICE_ID), info);
+            }
         }
     }","07/Jul/16 16:25;db82407;I'm afraid that didn't work. The duplicates are being added by different instances of the WhiteboardServiceTracker.

There is a single instance of the WhiteboardManager in both cases.


The ""good"" case looks like:

manager.start context1
adding service id=24 ServletTracker@3b3af66
manager.stop
manager.start context2
adding service id=26 ServletTracker@6b419013


while the ""bad"" case looks like:

manager.start context1
adding service id=24 ServletTracker@7245c93a
adding service id=26 ServletTracker@7245c93a
manager.stop
manager.start context2
adding service id=26 ServletTracker@5240ac63


The difference is that in the bad case, service id=26 was added by ServletTracker@7245c93a from the first start(context1) and then added again from the second start(context2) from ServletTracker@5240ac63.




","07/Jul/16 17:17;cziegeler;[~db82407] Excellent, that's great help, thank you - I was already surprised that the  tracker was not behaving as expected. So I think the bug is really that we have two trackers. That shouldn't be the case. I'll investigate on why this is happening.","08/Jul/16 06:03;cziegeler;[~db82407] I'm not 100% sure why the clean up is not working as expected, however I just committed some extra clean up code to http.base. Could you please give this another try?","08/Jul/16 08:43;db82407;Hi Carsten,

This appears to have fixed the problem.
I've tried 10 times and I can no longer reproduce it. It used to occur about every other time.

Thanks,

--
Derek",08/Jul/16 10:15;cziegeler;Thanks for the great help [~db82407]. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationPlugin support is not spec compliant,FELIX-5301,12986744,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,05/Jul/16 08:18,10/Jul/16 08:54,14/Mar/19 02:48,05/Jul/16 11:32,,,,,,,configadmin-1.8.10,,,,,,,Configuration Admin,,,,,,0,,,,,,"There are some issues with the configuration plugin support:
- modifications from plugins with a ranking below 0 or above 1000 should be ignored
- the cmRanking property should only be used if it is of type Integer (not Number)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 05 11:32:38 UTC 2016,,,,,,0|i30ixr:,9223372036854775807,,,,,,,,05/Jul/16 11:32;cziegeler;Fixed the above mentioned problems.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceComponentRuntime should not throw IllegalStateException,FELIX-5300,12986554,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,04/Jul/16 08:40,08/Jul/16 08:05,14/Mar/19 02:48,04/Jul/16 09:01,scr-2.0.0,scr-2.0.2,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"As can be seen in FELIX-5284, the methods in the ServiceComponentRuntime currently throw IllegalStateException - however according to the spec, these methods should not throw",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 04 09:01:59 UTC 2016,,,,,,0|i30hrr:,9223372036854775807,,,,,,,,04/Jul/16 09:01;cziegeler;I've checked all methods in the runtime service and they should not throw an exception anymore,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Possible hang when unbind method alters service properties,FELIX-5276,12976237,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,06/Jun/16 23:34,08/Jul/16 08:05,14/Mar/19 02:48,08/Jun/16 00:14,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In a delayed component, if a bind, updated, or unbind action updates the service properties without recycling the component, and this causes a target filter in another component to be unsatisfied, and this causes the component to attempt to deactivate, the deactivation will hang waiting for the registration of the tracking count from the original service event.

This can be fixed by having the AbstractComponentManager.setServiceProperties call tracked when there is a service properties update.  Since scopes other than singleton can't update the service properties, this avoids prematurely calling tracked for the first of many copies of the component.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jun 08 00:14:52 UTC 2016,,,,,,0|i2z1xb:,9223372036854775807,,,,,,,,08/Jun/16 00:14;djencks;Fixed (With a test!) in r1747329.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System bundle location incompatible with fileinstall,FELIX-5271,12974710,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,chris@die-schneider.net,chris@die-schneider.net,01/Jun/16 07:25,02/Jun/16 12:42,14/Mar/19 02:48,02/Jun/16 12:17,connect-0.1.0,,,,,,connect-0.2.0,,,,,,,Connect,,,,,,0,,,,,,"Fileinstall accesses the system bundle by its location ""System Bundle"". Connect uses the location ""felix-connect"" though. So fileinstall fails with a NPE. 

I think it would be better to change the location to ""System Bundle"" as this might happen with other bundles too. Additionally we could check if fileinstall could simply load the bundle 0 which I think should always work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-01 07:27:40.694,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 02 12:34:55 UTC 2016,,,,,,0|i2yt93:,9223372036854775807,,,,,,,,"01/Jun/16 07:27;githubbot;GitHub user cschneider opened a pull request:

    https://github.com/apache/felix/pull/70

    [FELIX-5271] Change system bundle location to System Bundle for compa…

    …tibility with fileinstall

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cschneider/felix FELIX-5271

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/70.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #70
    
----
commit 659b36ad34b3467257152821cb008b4b6470bc71
Author: Christian Schneider <chris@die-schneider.net>
Date:   2016-06-01T07:26:57Z

    [FELIX-5271] Change system bundle location to System Bundle for compatibility with fileinstall

----
","01/Jun/16 13:18;chris@die-schneider.net;[~karlpauls] Could you take a look at this one too? 
",02/Jun/16 12:17;karlpauls;Done,"02/Jun/16 12:23;githubbot;Github user cschneider closed the pull request at:

    https://github.com/apache/felix/pull/70
",02/Jun/16 12:34;chris@die-schneider.net;Looks good. Many thanks. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Config race between update and delete,FELIX-5270,12974396,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,01/Jun/16 00:12,30/Nov/16 22:47,14/Mar/19 02:48,11/Jun/16 01:15,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Thanks to Fabian Lange for reporting this problem and providing logging that shows what is going on.

The first getConfiguration when the location is not set generates a LocationChanged event.  When we get such an event, we get the configuration to see what happened.

DS: (either from query or initial CM_UPDATED event) calls getConfiguration, setting the bundle location and generating a CM_LOCATION_CHANGED event.
User: delete configuration, setting the properties to null
DS: receive CM_LOCATION_CHANGED, call getConfiguration (incidentally recreating the configuration) and get configuration with null properties and a location.  We then throw:

                            if (configInfo.getProps() == null)
                            {
                                throw new IllegalStateException(""Existing Configuration with pid "" + pid +
                                        "" has had its properties set to null and location changed.  We expected a delete event first."");
                            }

",,,,,,,,,,,,,,,,FELIX-5435,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jun 11 01:15:42 UTC 2016,,,,,,0|i2yro7:,9223372036854775807,,,,,,,,"09/Jun/16 17:51;djencks;After discussion with the osgi cpeg expert group (cf https://osgi.org/members/bugzilla/show_bug.cgi?id=2909) we decided the spec will indicate that it takes no position on whether DS should set the bundle location.  Therefore the solution here is for felix ds not to ever set the bundle location, but continue to check that any existing bundle location is compatible with any component we consider supplying with the configuration.",11/Jun/16 01:15;djencks;r1747831 removes all attempts to set bundle location and modifies tests appropriately.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception starting connect in a spring boot like packaging,FELIX-5267,12973453,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,chris@die-schneider.net,chris@die-schneider.net,27/May/16 16:26,27/May/16 20:54,14/Mar/19 02:48,27/May/16 18:15,connect-0.1.0,,,,,,connect-0.2.0,,,,,,,Connect,,,,,,0,,,,,,"I would like to use Felix connect inside a spring boot project.
It all works fine as long as I start the spring boot application in unpacked form.

The problem happens when I pakcage the app as a single jar that contains the depdendency jars in lib directory.

When I start this I get this exception:
http://apaste.info/l0A

I uploaded a complete little example on github:
https://github.com/cschneider/connecttest
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-27 18:15:31.628,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri May 27 20:54:51 UTC 2016,,,,,,0|i2yluv:,9223372036854775807,,,,,,,,"27/May/16 18:15;karlpauls;I just committed a potential fix for this. I'm not 100% sure it makes things work inside spring boot but it fixes this bug in that it lets springboot start-up. Let me know if there are problems once you deploy real bundles - otherwise, please close this issue if it works for you.
",27/May/16 20:54;chris@die-schneider.net;Looks good. I succesfully tested in the full spring boot app.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Connect does not compile in eclipse,FELIX-5266,12973429,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,chris@die-schneider.net,chris@die-schneider.net,27/May/16 14:37,27/May/16 20:56,14/Mar/19 02:48,27/May/16 18:16,connect-0.1.0,,,,,,connect-0.2.0,,,,,,,Connect,,,,,,0,,,,,,"When importing connect in eclipse I get lots of errors like this:
The method addServiceListener(ServiceListener, String) of type PojoSR must override a superclass method	PojoSR.java	/org.apache.felix.connect/src/main/java/org/apache/felix/connect	line 418	Java Problem

The problem is that @Override is used on methods provided by an interface but source level is 1.5 where this is not yet available.

I propose to switch to Java 1.6 for source and target.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-27 14:39:46.793,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri May 27 20:56:31 UTC 2016,,,,,,0|i2ylpj:,9223372036854775807,,,,,,,,"27/May/16 14:39;githubbot;GitHub user cschneider opened a pull request:

    https://github.com/apache/felix/pull/69

    [FELIX-5266] Set compiler to 1.6 to avoid errors in eclipse

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cschneider/felix FELIX-5266

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/69.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #69
    
----
commit 461a528ae0aa90ec8edfc93d370690c9bc903ab6
Author: Christian Schneider <chris@die-schneider.net>
Date:   2016-05-27T14:39:01Z

    [FELIX-5266] Set compiler to 1.6 to avoid errors in eclipse

----
",27/May/16 18:16;karlpauls;Done. Please close this issue if it works for you.,"27/May/16 20:56;githubbot;Github user cschneider closed the pull request at:

    https://github.com/apache/felix/pull/69
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OSGi specs should be used with scope provided,FELIX-5265,12973423,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,chris@die-schneider.net,chris@die-schneider.net,27/May/16 14:09,27/May/16 20:56,14/Mar/19 02:48,27/May/16 18:17,connect-0.1.0,,,,,,connect-0.2.0,,,,,,,Connect,,,,,,0,,,,,,"Currently the OSGi spec jars are listed with default scope. So they are also added to the project using connect. When the default scanner is used this results in running the specs as bundles which is not recommended in OSGi.

The specs should not be necessary as they are already embeded during the build.

I will create a PR for the fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-27 14:22:26.778,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri May 27 20:56:39 UTC 2016,,,,,,0|i2ylo7:,9223372036854775807,,,,,,,,"27/May/16 14:22;githubbot;GitHub user cschneider opened a pull request:

    https://github.com/apache/felix/pull/68

    [FELIX-5265] Use correct scope for specs

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cschneider/felix FELIX-5265

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/68.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #68
    
----
commit 183fcbaed91ebd676634ab79cedbd31b008cf2d5
Author: Christian Schneider <chris@die-schneider.net>
Date:   2016-05-27T14:11:38Z

    [FELIX-5265] Use correct scope for specs

----
",27/May/16 18:17;karlpauls;Done. Please close this issue if it works for you.,"27/May/16 20:56;githubbot;Github user cschneider closed the pull request at:

    https://github.com/apache/felix/pull/68
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Config updates may be missed,FELIX-5264,12973104,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,26/May/16 15:39,08/Jul/16 08:05,14/Mar/19 02:48,02/Jun/16 19:38,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"If two threads are trying to activate a component concurrently, it's possible that one enters validateDependencyManagers, determines that a dependency is missing (so it thinks state should be unsatisfied), then wait, and the other thread the missing dependency arrives and activates the component, then the first thread resumes and sets m_satisfied to false.  So there's a fully activated component with m_satisfied false.  When a configuration update comes in it resets the target filters but then tries to activate the component.... which does nothing as it's already activated.  So the configuration update does not get applied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 02 19:38:16 UTC 2016,,,,,,0|i2yjpb:,9223372036854775807,,,,,,,,02/Jun/16 19:38;djencks;r1746617 fixes the specific problem found here and introduces a single State enum with some optimistic locking and enough logging so any remaining or new problems should be easier to diagnose.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.ArrayIndexOutOfBoundsException: -1,FELIX-5263,12973053,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,rotty3000,rotty3000,26/May/16 12:54,23/Aug/16 17:24,14/Mar/19 02:48,23/Aug/16 17:24,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"In a specific scenario where duplicate resources are provided to the resolver it produces the error bellow:

{code}
java.lang.ArrayIndexOutOfBoundsException: -1
	at org.apache.felix.resolver.util.CopyOnWriteList.set(CopyOnWriteList.java:57)
	at org.apache.felix.resolver.Candidates.prepare(Candidates.java:946)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:232)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:179)
	at biz.aQute.resolve.ResolverValidator.resolve(ResolverValidator.java:124)
	at biz.aQute.resolve.ResolverValidator.validateResources(ResolverValidator.java:81)
	at biz.aQute.resolve.ResolverValidator.validate(ResolverValidator.java:75)
	at biz.aQute.resolve.ValidatorTest.testDuplicateIndexAgainstLargeTargetPlatform_whyDoesThisFail(ValidatorTest.java:188)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
{code}

Since the reproduction is complex I've provided one as a unit test in a PR to the bnd project. https://github.com/bndtools/bnd/pull/1472",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-26 14:28:21.387,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 23 17:24:30 UTC 2016,,,,,,0|i2yjdz:,9223372036854775807,,,,,,,,"26/May/16 14:28;tjwatson;This appears to be a bug in the implementation of ResolveContext that bndtools uses when resolving stuff.  I have not spent the time to run the testcase you provided in the PR, but you mention that you have duplicate resources provided to the resolver in the scenario.  I assume this means it is resolving these duplicate resources as either mandatory or optional resources.  Such duplicate resources must not be equal to each other as in Object.equals.  The only way duplicate content can be resolved multiple times by the resolver is if each Resource representing the ""same"" content are distinctly different from each other for Object.equals.  Otherwise there is no way the resolver could return the multiple Map<Resource, List<Wire>> entries representing each Resource that points to the duplicate content.

Someone familiar with the bndtools code needs to confirm how they implement the equals method in such a scenario.  If they are incorrectly returning true when they shouldn't then this is going to severely confused the resolver.  I had to fix a similar issue in Aries Subsystems impl ARIES-1554.

","30/May/16 15:21;rotty3000;As stated by [~tjwatson] we've managed to resolve the issue from the bnd side. Therefore I'm closing as ""Not A Bug"".",23/Aug/16 17:24;rotty3000;I fixed the bud in bnd again to do with equality check against CapReq.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SslFilterRequest always returns -1 when X-Forwarded-Port header is not present,FELIX-5259,12971176,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,bstopp,bstopp,19/May/16 15:09,03/Jul/17 09:47,14/Mar/19 02:48,20/May/16 16:09,,,,,,,http.sslfilter-1.0.6,,,,,,,,,,,,,0,,,,,,"The SslFilterRequest tries to pull the original port from a header; and if that fails, returns -1. It should, instead, get the response from the wrapped Request if there is an error. ",,,,,,,,,,,,,,,,,,,,19/May/16 15:10;bstopp;ssl_defer_port_query.diff;https://issues.apache.org/jira/secure/attachment/12804952/ssl_defer_port_query.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-05-20 16:09:42.598,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Fri May 20 16:09:42 UTC 2016,,,,,,0|i2y7tj:,9223372036854775807,,,,,,,,19/May/16 15:10;bstopp;Fix w/ updates to unit test.,"20/May/16 16:09;cziegeler;Thanks for your patch, [~bstopp]. It's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Object conversion should pass through unrecognized classes of the same type,FELIX-5256,12969323,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,12/May/16 18:31,08/Jul/16 08:05,14/Mar/19 02:48,12/May/16 19:36,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"When in extended ""allow interfaces"" mode, the object converter should just pass through objects that are already the right type, if it doesn't recognize them.  This can be useful for systems that do things like put passwords in non-string classes to hide them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu May 12 19:36:37 UTC 2016,,,,,,0|i2xwev:,9223372036854775807,,,,,,,,12/May/16 19:36;djencks;rev 1743542.  I extended it to compatible rather than identical classes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve structure of permutations to use unmodifiable capability lists,FELIX-5254,12967605,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,11/May/16 18:06,31/May/16 21:42,14/Mar/19 02:48,31/May/16 21:42,resolver-1.8.0,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"As discussed on the felix dev mailing list:

Implement a capability selection collection that
points to a constant list of capabilities and has an index to the currently
selected candidate for that permutation.  That way there is no copying of
the constant list, instead we have a super lightweight collection that
points to the unmodifiable list of capabilities and just has an index.
Changing a Permutation would only involve incrementing that index instead
of removing from a copy on write list.  We can then get rid of duplicate
capability lists since the list is unmodifiable it can be shared with
multiple selection index lists.",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue May 31 21:42:27 UTC 2016,,,,,,0|i2xlu7:,9223372036854775807,,,,,,,,"31/May/16 21:42;tjwatson;I released a fix that introduced a class CandidateSelector which replaces the CopyOnWriteList implementation.  This class maintains an unmodifiable list and an index to the currently selected candidate.  There is a period of time during the ""populate"" phase of resolving where the list of candidates is modifiable in order to handle hosted capabilities from fragments and substitutable exports.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolver impl is in need of extensive cleanup,FELIX-5251,12966969,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,10/May/16 16:33,11/May/16 07:34,14/Mar/19 02:48,10/May/16 18:06,resolver-1.8.0,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"The Resolver implementation has undergone a lot of changes since it was first contributed.  Over the coarse of development the code has deteriorated a bit.  This is not to blame the contributors to the codebase.  The codebase and overall problem is complicated and already hard enough to understand.

I have been looking to implement some upcoming changes that are being proposed for the OSGi R7 specification.  Before I start that work I have been spending significant time scrubbing the resolver code and trying to make it a little more understandable.  Here are the main things I have done:

1) Create a common code path for dynamic resolution and regular resolution.  
2) Extract common code and greatly reduce the number of lines contained in complicated do/while loops.
3) Make proper use of the existing ResolveSession class to keep track of state during the resolution process.   This keeps the maintenance of state in one place.  The code had evolved into many separate options being passed around to methods, each maintaining some kind of state.",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-11 07:34:39.167,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 11 07:34:39 UTC 2016,,,,,,0|i2xhxb:,9223372036854775807,,,,,,,,"10/May/16 18:06;tjwatson;I committed my changes with:

http://svn.apache.org/viewvc?view=revision&revision=1743238

This also fixed an issue where the resolver would attempt to attach fragment to an already resolved host.  I put a safeguard in the code to prevent that from happening.  The code is not able to handle doing proper class space consistency checks to an existing host wiring that gets updated with pay-load requirements and capabilities from a fragment.  There are lots of assumptions in the code that depend on fragments only getting attached to hosts that are being resolved during the current resolve process.

I updated the existing test that seemed to depend on the old behavior which would produce new host wires to already existing host wirings.",10/May/16 18:06;tjwatson;Closing issue.,"11/May/16 07:34;chris@die-schneider.net;The change looks good to me. We still have kind of a hotspot in ResolverImpl though. The method checkpackageSpaceConsistency is very long and complex:
https://github.com/apache/felix/blob/trunk/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java#L1262-L1569

I do not have a good idea how to split it up but this would be a good spot for further improvements.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enabling SSL for org.apache.felix.http fails to properly restart the jetty service,FELIX-5249,12965452,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,alexander.klimetschek,alexander.klimetschek,06/May/16 00:14,25/Jul/16 06:01,14/Mar/19 02:48,17/May/16 12:32,http.jetty-3.1.6,,,,,,http.jetty-3.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"When reconfiguring SSL for org.apache.felix.http.jetty (for a running system where jetty only is configured for an HTTP port), below error happens. Afterwards, jetty is not handling one or both ports anymore.

Restarting the entire server/osgi environment fixes it. It only seems to be a problem the first time or depending on timing. This happens during a somewhat automatic installation procedure on an Apache Sling based server, in which the osgi configuration comes in via the sling jcr installer. If I manually reconfigure org.apache.felix.http.jetty in the felix webconsole and enable/disable SSL, I don't see the problem.

This is actually with org.apache.felix.http.jetty 3.1.6.B002, which seems to be a special vendor release.

{noformat}
05.05.2016 16:12:33.931 *ERROR* [CM Configuration Updater (Update: pid=org.apache.felix.http)] org.apache.felix.configadmin Service [org.apache.felix.cm.ConfigurationAdmin,10, [org.osgi.service.cm.ConfigurationAdmin]] [org.osgi.service.cm.ManagedService, id=57, bundle=36/launchpad:resources/install/5/org.apache.felix.http.jetty-3.1.6-B002.jar]: Unexpected problem updating configuration org.apache.felix.http (java.util.NoSuchElementException)
java.util.NoSuchElementException: null
	at java.util.TreeMap.key(TreeMap.java:1221)
	at java.util.TreeMap.lastKey(TreeMap.java:292)
	at java.util.TreeSet.last(TreeSet.java:401)
	at org.apache.felix.http.jetty.internal.LoadBalancerCustomizerFactoryTracker.removedService(LoadBalancerCustomizerFactoryTracker.java:85)
	at org.apache.felix.http.jetty.internal.LoadBalancerCustomizerFactoryTracker.removedService(LoadBalancerCustomizerFactoryTracker.java:30)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:967)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:870)
	at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
	at org.osgi.util.tracker.ServiceTracker.close(ServiceTracker.java:377)
	at org.apache.felix.http.jetty.internal.JettyService.stopJetty(JettyService.java:225)
	at org.apache.felix.http.jetty.internal.JettyService.updated(JettyService.java:196)
	at org.apache.felix.http.jetty.internal.JettyManagedService$1.updated(JettyManagedService.java:46)
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updated(ManagedServiceTracker.java:189)
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updateService(ManagedServiceTracker.java:152)
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.provideConfiguration(ManagedServiceTracker.java:85)
	at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1753)
	at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:143)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:110)
	at java.lang.Thread.run(Thread.java:745)
{noformat}",,,,,,,,,,,,,,,,,,,,17/May/16 11:03;krystian;FELIX-5249-patch.txt;https://issues.apache.org/jira/secure/attachment/12804387/FELIX-5249-patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-05-17 11:03:32.4,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 25 06:01:14 UTC 2016,,,,,,0|i2x8mf:,9223372036854775807,,,,,,,,"06/May/16 00:27;alexander.klimetschek;The affected code seems to be introduced with FELIX-5207 and [31a9d13b|https://github.com/apache/felix/commit/31a9d13be64fbcad14e2606b8d37d080deaccbb7].

It looks like the [TreeSet here is empty|https://github.com/apache/felix/blob/trunk/http/jetty/src/main/java/org/apache/felix/http/jetty/internal/LoadBalancerCustomizerFactoryTracker.java#L85]. It should probably check for {{set.isEmpty()}} before calling {{last()}}, which throws if empty. Another call to {{set.last()}} is on line 53, that probably needs the same guarding. Something like this:

{code:java}
if (set.isEmpty()) {
    highestReference = null;
} else {
    highestReference = set.last();
}
{code}","06/May/16 02:55;alexander.klimetschek;If I provide the SSL-enabling configuration upon startup of the instance, I don't see the problem. Seems to be only upon configuration changes at runtime.","17/May/16 11:03;krystian;I can confirm that this issue is happening once every n times in my case (not always, but reoccurring) when changing any Jetty service property (so the issue description might be even reworded to be more generic if such details are needed). As far as I have checked the protection against the exception mentioned proposed by [~alexander.klimetschek] should be not in line 53 (highestReference retrieval after adding a reference to a set) but in fact in line 85 instead, as the highestReference retrieval is made there after reference removal and thus can be unsuccessful. The patch attached uses [~alexander.klimetschek]’s idea in that exact place and after applying works in my case at least.","17/May/16 12:32;cziegeler;Thanks for your patch [~krystian], it's applied","25/Jul/16 06:01;mlindsey;For anyone else experiencing this issue, we found that Restarting the entire server/OSGii was ineffective and required manual toggle the setting off & on through OSGi configuration to resolve.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSL Filter URL Decoding Path Issues,FELIX-5234,12958572,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,13/Apr/16 19:06,22/Jun/16 14:46,14/Mar/19 02:48,13/Apr/16 19:10,http.sslfilter-1.0.4,,,,,,http.sslfilter-1.0.6,,,,,,,HTTP Service,,,,,,0,,,,,,"A redirect of /apps/test/content/%E4%B8%83%E6%9C%88%E5%8F%B7.html
is incorrectly rewritten to
/apps/test/content/七月号.html
The encoding is lost",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 13 19:10:35 UTC 2016,,,,,,0|i2w2rr:,9223372036854775807,,,,,,,,"13/Apr/16 19:10;cziegeler;Fixed by appending the raw path instead of path
Added a unit test verifying it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[IE11][Edge]: Fields in OSGI Configuration Manager are not editable,FELIX-5223,12952858,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,ana.vinatoru,ana.vinatoru,23/Mar/16 15:22,08/Jun/16 16:55,14/Mar/19 02:48,19/May/16 05:52,webconsole-4.2.14,webconsole-4.2.8,,,,,webconsole-4.2.16,,,,,,,Web Console,,,,,,0,,,,,,"Access the configuration manager (/system/console/configMgr) using IE11 or Microsoft Edge.
Find a configuration that allows the user to input text inside a textfield. The content of these fields is not visible or editable because the height of the field is set to 0px. 
Investigation seems to point to a malfunction of the autosize JS library, as this line in config.js set the height to 0:

+        $(textareaEl).autosize(); 

A possible solution would be to set a min-height on the textfields, if the issue in the library isn't fixed.",,,,,,,,,,,,,,,,,,,,24/Mar/16 16:16;ana.vinatoru;FELIX-5223_2.diff;https://issues.apache.org/jira/secure/attachment/12795235/FELIX-5223_2.diff,23/Mar/16 15:31;ana.vinatoru;Screen Shot 2016-03-23 at 17.30.21.png;https://issues.apache.org/jira/secure/attachment/12795006/Screen+Shot+2016-03-23+at+17.30.21.png,24/Mar/16 16:18;ana.vinatoru;Screen Shot 2016-03-24 at 17.34.51_with_paddings.png;https://issues.apache.org/jira/secure/attachment/12795236/Screen+Shot+2016-03-24+at+17.34.51_with_paddings.png,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2016-03-24 10:09:47.971,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jun 08 16:55:34 UTC 2016,,,,,,0|i2v3jj:,9223372036854775807,,,,,,,,"24/Mar/16 09:54;ana.vinatoru;Attaching a patch to fix this issue. The patch is tested on IE11, Edge, Safari, Firefox and Chrome.

My solution was to set a min-height on the textarea fields. I also attempted to update the version of jquery.autosize plugin used in the console, but this did not fix the issue and misaligned the fields.","24/Mar/16 10:09;olli;[~ana.vinatoru], have you tried with [Autosize|http://www.jacklmoore.com/autosize/] v2?","24/Mar/16 11:59;ana.vinatoru;[~olli] - you're right, I will replace the jquery plugin with the latest version of autosize.
I want to make the fields align a bit better, and I will update the patch when I'm done.","24/Mar/16 16:16;ana.vinatoru;Attaching a new patch with the following changes:
* replacing jquery.autosize.min.js with autosize.min.js (the latest version of the library)
* changing config.js to use the new autosize API
* setting a min-size for text-areas, since even with the latest autosize they don't display properly in IE and Edge
* adding paddings to some of the configuration window components, to make the text easier to read. 

I will admit that the latest point is a pet peeve of mine, and since I'm in the area anyway I took the chance to improve text readability (see screenshot). If you find it too intrusive I can leave these changes out.","17/May/16 14:26;ana.vinatoru;[~cziegeler], [~olli] - Can you tell me what the proper route is to get this patch reviewed? 
Thank you!","18/May/16 04:40;cziegeler;[~ana.vinatoru] We need to find someone with enough js/css knowledge to review the patch. It looks good to me (but I'm far away from being an expert in this) and I trust your work, nevertheless it would be great if we would get a third opinion. However, if no one comments in the next days, we'll just go with the patch. It's here for review for a long time now and no one complained",19/May/16 05:52;cziegeler;Thanks for your patch [~ana.vinatoru]. It's applied,"08/Jun/16 00:46;gossmer;Grabbing the 4.2.16 version fails with an error to edit the configurations under Sarfari on the mac (version 9.1.1) Error:

createInput — config.js:421TypeError: $(textareaEl).autosize is not a function. (In '$(textareaEl).autosize()', '$(textareaEl).autosize' is undefined)

Firefox and Chrome versions work fine. Previous version was fine with Safari.",08/Jun/16 05:20;cziegeler;[~gossmer] Could you please open a new issue against 4.2.16 for this? Thanks,"08/Jun/16 08:46;ana.vinatoru;Hi [~gossmer] - before you create the issue can you clear the browser cache and try again? 
$(textareaEl).autosize() is the old autosize API, so it might just be a stale config.js file.

I tested on Safari 9.1.1 and the error did not occur.","08/Jun/16 16:55;gossmer;You are correct, I should have cleared the cache. Works fine on Safari. I figured it wasn't that because I didn't clear it on the other browsers and it worked.  thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Alarmist logging when bundle stops before we've activated it,FELIX-5220,12952202,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,21/Mar/16 21:06,08/Jul/16 08:05,14/Mar/19 02:48,21/Mar/16 21:16,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Although all the other disasters we look for when loading the components for a bundle are logged at debug, the bundleContext not being there is logged at error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 21 21:16:05 UTC 2016,,,,,,0|i2uzhr:,9223372036854775807,,,,,,,,21/Mar/16 21:16;djencks;r1736099,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Servlet Bridge does not work if not mounted as root servlet,FELIX-5219,12951203,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,epirealer,epirealer,17/Mar/16 13:31,01/Apr/16 07:40,14/Mar/19 02:48,28/Mar/16 13:33,http.proxy-3.0.0,,,,,,http.proxy-3.0.2,,,,,,,HTTP Service,,,,,,0,,,,,,"As described in the email thread http://www.mail-archive.com/users%40felix.apache.org/msg17074.html -- the Http Servlet Proxy/Bridge does not work when binding the Proxy Servlet something else than {{/*}}.

It seems that the bug was introduced in the 3.* versions - the proxy/bridge works as expected with version {{2.3.2}}.

I've created a reference project at https://github.com/metamorph/http-osgi-bridge that demonstrates the bug.",,,,,,,,,,,,,,,,,,,,23/Mar/16 08:06;cziegeler;patch.txt;https://issues.apache.org/jira/secure/attachment/12794953/patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-03-19 10:14:09.997,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 28 13:33:23 UTC 2016,,,,,,0|i2utsn:,9223372036854775807,,,,,,,,"17/Mar/16 17:36;epirealer;I'm having a look at the source code, and as far as I can understand there are no tests (or integration tests) that exercises the bridge or the {{Dispatcher}}. Is this correct?",18/Mar/16 17:47;epirealer;I'm working on a patch here: https://github.com/metamorph/felix/tree/bugfix/FELIX-5219_relative-path,"19/Mar/16 10:14;cziegeler;We definitely don't have tests for the bridge, but we have the IT tests which go via jetty and test the dispatcher","19/Mar/16 11:04;epirealer;Ok - I need to look closer at the integration tests then :) Good to know that they are there as an extra safety net.

I've created a custom integration test (maybe unnecessary) where I start an embedded Jetty, deploy the required event listeners and the proxy-servlet. One event listener starts an OSGi context and deploys the bridge and some dependencies. I use this to verify my changes.

","19/Mar/16 15:45;epirealer;I have a fix (that needs to be cleaned up a bit) that might solve the problem: https://github.com/metamorph/felix/commit/0625c38e572f02bfce42ae5ece5c3e9688c87a75

Basically - by using a request header that identifies a request a proxied request the Dispatcher can drop the `servletPath` when resolving the servlet to dispatch to. Requests that comes through the stand-alone Jetty container should still be dispatched with the servletPath untouched.

Not sure of the ""Forward"" header is suitable or not - maybe it can be a custom header.

[~cziegeler] - what's your thoughts on this?","19/Mar/16 16:11;cziegeler;[~epirealer] Thanks for the patch. I see now where the problem is.
I've attached a different solution: setting the servlet path to the empty string from the proxy servlet. This does not require any changes in the base module. Could you please give it a try? WDYT?","19/Mar/16 21:08;epirealer;Hi - 

in this case, personally, I think that explicit is better than implicit. I believe that it's good to keep the original HttpServletRequest unmodified if possible. Having an explicit ""rule"" in the Dispatcher for resolving requests from ""a proxy"" will make the code more understandable. 

In our setup we use the http.proxy and the http.bridge to implement 'pluggable' REST services using https://github.com/hstaudacher/osgi-jax-rs-connector. The Osgi JaxRS Connector uses Jersey internally which uses a bunch of magic tricks to do its own HTTP routing. I _believe_ that keeping the HTTP request consistent (not ""hiding"" the {{servletPath}}) will avoid issues there.

Fortunately it will be pretty straight forward for me to verify this :) I'll try out your patch and let you know how it works! ","20/Mar/16 21:42;epirealer;I've made some tests with `osgi-jax-rs-connector` and it seems that none of the patches works.

One (there might be more) reason that Jersey fails to route the HTTP request to the right endpoint is that the HttpServletRequest that gets passed along is mix between the original request (that went to the ProxyServlet) and the dispatched request such as ""Felix Base"" sees it ({{org.apache.felix.http.base.internal.dispatch.ServletRequestWrapper}}).

In my sample project this gives Jersey a ""base-uri""  of {{http://localhost:8080/services/}} while the ""requestUri"" is {{http://localhost:8080/osgi/services/greeter/foo}}. Jersey uses the baseURI and the requestURI to calculate *its* internal routing to the REST endpoint. In this case that *should* be {{/greeter/foo}} but since the baseURI and requestURI doesn't match it gets calculated as {{/ices/greeter/foo}}.

(I've also tried with Felix WebConsole - and it also fails to work fully. The request to the main servlet is dispatched ok, but any relative URLs and all resources fails to load. I believe this is due to the same basic issue as described above).

Not sure how to approach this.. somewhere in the 3.x refactoring of felix.http is seems that the aspect of proxying requests through an external servlet container was forgotten :).

I will try to hack around a bit more on the {{ServletRequestWrapper}} and see if I can get a request through to a REST endpoint. Do you have any other suggestions, [~cziegeler] ?","21/Mar/16 14:16;epirealer;I'm following up to my own comment here :).

So, I *think* I've found a fix: https://github.com/metamorph/felix/commit/c5c9c58769cfe2d238fe4368a8f5633884f25f68

{quote}
For some libraries to work correctly when running as servlets inside an OSGi
container the HttpServletRequest must be consistent. This applied to
""osgi-jax-rs-connector"" and to the ""Felix WebConsole"".

Basically, it must be possible to construct the correct request path by
concatening ""contextPath"", ""servletPath"" and ""pathInfo"" (so that it matches a
proper subset of the original requestURI).

In order to achieve this in the case of a proxied request, the servletPath that
should be propagated to servlets registered in the OSGi container is the
servletPath of the original request *+* the servletPath from the
""PathResolution"".
{quote}

With the changes in place it seems that both osgi-jax-rs-connector and Felix WebConsole works fine with 3.x of the proxy/bridge.

[~cziegeler] : If you'd like I can create a proper pull-request to the Felix Github project and we can discuss it further there?","22/Mar/16 08:57;cziegeler;I might be mistaken, but I think passing in the full mount path of the servlet into the http service might not work.
Let's assume the proxy servlet is mounted at /foo - and /foo/bar is requested and there is a servlet registered at /bar in the http service.
If you pass in the full path /foo/bar, the servlet does not match - I think we should write a test for this, to verify.

I think the correct way of handling this is in the proxy servlet: if the servlet is not mounted at the root, this path is added to the context path, and servlet path is set to """", then the request is forwarded to the http service. This ensures that still the full path is available within the http service, but the matching still works.
Example: webapp with proxy servlet has:
context path: /webapp
proxy servlet path: /foo
request: /webapp/foo/bar

Request passed into http service has:
context path: /webapp/foo
servlet path: """"
request path info: /bar","22/Mar/16 09:25;epirealer;I've verified that my changes works as expected - but take into account that my branch also contains the original modification we talked about (explicitly *not using* the servletPath when calculating the path used to find a matching servlet ( https://github.com/metamorph/felix/blob/0625c38e572f02bfce42ae5ece5c3e9688c87a75/http/base/src/main/java/org/apache/felix/http/base/internal/dispatch/Dispatcher.java#L96 ). That way the HandlerRepository can locate a matching servlet.

But - I'd also like to keep the changes in the ProxyServlet only. Your suggestion looks interesting.. given that the original request can be reconstructed using ""contextPath + servletPath + pathInfo"" I think it can work. We're basically just moving the original servletPath on top of the contextPath (if I understand you correctly).

I'll give it a spin! :)


","22/Mar/16 10:08;epirealer;Ah - that didn't work out of the box either. 

Requests to servlets deployed in the OSGi container is wrapped by {{org.apache.felix.http.base.internal.dispatch.ServletRequestWrapper#ServletRequestWrapper}} which overrides {{getContextPath()}} with the context path from the internal ServletContext (which is a {{org.apache.felix.http.base.internal.context.ExtServletContext}}).

So, {{requestURI() != contextPath + servletPath + pathInfo}}. 

On option is to create a HttpServletRequestWrapper in the ProxyServlet which fully hides the `servletPath` (also in the requestURI). I'm not sure that's a good solution since it could affect how, for example, relative URLs can be created by an end-servlet.

*Update*
I tried the a wrapper that hides the servletPath (see https://github.com/metamorph/felix/commit/cdc8d0f29e81a8ea55792b66b7cc2b0e669fb155) and that worked for Jersey (osgi-jax-rs-connector) but unfortunately it looks like Felix WebConsole uses redirects that uses the requestURI.","22/Mar/16 10:56;cziegeler;Thanks for testing, yes I forgot about the servlet context. I'll think about it one more time, I still have the hope that there is a simple solution","23/Mar/16 08:06;cziegeler;Updated patch which wraps both, the request and the servlet context.
Let's see if this leads us somewhere",23/Mar/16 08:12;epirealer;Cool - I will give it a try as soon as I can :),"23/Mar/16 12:32;epirealer;Impressive, [~cziegeler] - it seems to work :) At least with my tests (osgi-jax-rs-connector and Felix WebConsole) :-)

This is good news since it means that we can leave the 2.3.2 release in our project and move up to a servlet 3.1 compatible OSGi proxy!

When do you think a new released version of the proxy module can be available?

","23/Mar/16 17:33;cziegeler;Thanks for testin [~epirealer]

A release next week should be possible",28/Mar/16 13:33;cziegeler;Applied the patch in rev 1736887,,,,,,,,,,,,,,,,,,,,,,,,
ComponentContext.getServiceReference returns null though service registered,FELIX-5213,12949051,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,njbartlett,njbartlett,11/Mar/16 10:32,08/Jul/16 08:05,14/Mar/19 02:48,31/Mar/16 00:21,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In a component that provides a service and is not immediate, the service is registered before activation. Therefore the service reference of the registered service should be available to the component, from ComponentContext.getServiceReference(), during activation. However the following code sample throws NPE:

{code}
import org.osgi.framework.Constants;
import org.osgi.framework.ServiceReference;
import org.osgi.service.component.ComponentContext;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;

@Component(service = Object.class, property = ""name=scrbug"")
public class Example {
	@Activate
	void activate(ComponentContext context) {
		ServiceReference<?> reference = context.getServiceReference();
		System.out.printf(""My service ID is %d%n"", reference.getProperty(Constants.SERVICE_ID));
	}
}
{code}

Note that the service certainly exists, because I have injected it into a second component, in order to force activation of the above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-24 14:12:03.203,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 06 04:01:14 UTC 2016,,,,,,0|i2uig7:,9223372036854775807,,,,,,,,"24/Mar/16 14:12;djencks;Well, the service certainly _doesn't_ exist yet, since the activate method has not yet completed so it certainly hasn't been exposed to anything.

I don't see how to fix this.  We get the ServiceReference to return from the ServiceRegistration, however in your scenario the consuming component is obtaining the service from the service reference before the registerService call has returned the ServiceRegistration.  Is there another way to reliably find the ServiceReference for a particular service?","24/Mar/16 17:07;njbartlett;There are two cases. If the component publishes its service before any consumer tries to fetch it, then we should get the ServiceRegistration during activate. This does seem to work correctly.

On the other hand if somebody was already listening for the service when we registered and they call getService synchronously from the serviceChanged event, then SCR doesn't yet have either the ServiceRegistration OR the ServiceReference because OSGi hasn't returned from registerService yet. So SCR cannot possibly see the ServiceRegistration yet.

So it's not a Felix/SCR bug, but certainly a gotcha in the spec.","30/Mar/16 18:07;njbartlett;Reopening on the advice on BJ, who makes the following comment:

""The component activate method is being activated because someone wants the service object. Since the ServiceRegistration is passed to the ServiceFactory.getService method, SCR can certainly provide the ServiceReference in the call to context.getServiceReference in the activate method.""",30/Mar/16 18:20;bjhargrave;See section 5.2.4 “Early Need for ServiceRegistration Object” in the Core spec which provides advice for exactly this corner case.,31/Mar/16 00:21;djencks;Fixed in r1737170,06/Apr/16 04:01;djencks;Additional fix in r1737908 after Pierre de Rop noticed a FrameworkEvent logged in a test where service properties were being changed after service deregistration.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[ConfigAdmin] use provide/require capabilities instead of obsolete and meaningless import-export service headers,FELIX-5211,12948698,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,10/Mar/16 07:38,10/Jul/16 08:54,14/Mar/19 02:48,10/Mar/16 07:48,configadmin-1.8.8,,,,,,configadmin-1.8.10,,,,,,,Configuration Admin,,,,,,0,,,,,,"DS is now generating require-capability headers for references, and the subsystem spec enforces these.  In order to use config admin in a subsystem, it needs appropriate headers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 10 07:48:32 UTC 2016,,,,,,0|i2ugaf:,9223372036854775807,,,,,,,,10/Mar/16 07:48;djencks;fixed rev r1734366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalStateException when using custom URL handlers for bundles,FELIX-5204,12946140,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,02/Mar/16 13:06,13/Oct/16 06:09,14/Mar/19 02:48,08/Mar/16 08:43,framework-5.4.0,,,,,,framework-5.6.0,,,,,,,Framework,,,,,,0,,,,,,"The following exception can happen after having restarted the whole framework.

{code}
java.lang.IllegalStateException: Stream handler unavailable.
	at org.apache.felix.framework.URLHandlersStreamHandlerProxy.getDefaultPort(URLHandlersStreamHandlerProxy.java:180)
	at java.net.URLStreamHandler.sameFile(URLStreamHandler.java:407)
	at org.osgi.service.url.AbstractURLStreamHandlerService.sameFile(AbstractURLStreamHandlerService.java:131)
	at java.net.URLStreamHandler.equals(URLStreamHandler.java:333)
	at org.osgi.service.url.AbstractURLStreamHandlerService.equals(AbstractURLStreamHandlerService.java:81)
	at org.apache.felix.framework.URLHandlersStreamHandlerProxy.equals(URLHandlersStreamHandlerProxy.java:163)
	at java.net.URL.equals(URL.java:870)
	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:940)
	at javax.crypto.JceSecurityManager.getCryptoPermission(JceSecurityManager.java:124)
	at javax.crypto.Cipher.getConfiguredPermission(Cipher.java:2587)
	at javax.crypto.Cipher.initCryptoPermission(Cipher.java:700)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:863)
	at javax.crypto.Cipher.init(Cipher.java:1396)
	at javax.crypto.Cipher.init(Cipher.java:1327)
	at org.apache.sshd.common.cipher.BaseCipher.init(BaseCipher.java:60)
	at org.apache.karaf.shell.ssh.SshUtils.buildCiphers(SshUtils.java:89)
	at org.apache.karaf.shell.ssh.Activator.createSshServer(Activator.java:183)
	at org.apache.karaf.shell.ssh.Activator.doStart(Activator.java:111)
	at org.apache.karaf.util.tracker.BaseActivator.run(BaseActivator.java:233)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

The problems seems to be that the ProtectionDomain of the classes loaded from bundles do use the URL handler as their code source.  This means that any access to those URL will throw IllegalStateException after the framework has been shutdown.
The protection domain should use the url the jar from the filesystem for the code source url instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-02 13:22:08.299,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 07 20:16:07 UTC 2016,,,,,,0|i2u11r:,9223372036854775807,,,,,,,,02/Mar/16 13:22;karlpauls;I'm not sure I completely understand what is going on just yet. There was some reason we did the protection domain code source the way it is. It's certainly possible that there is a bug somewhere which causes this issue but I'm not sure just using the jar url from the filesystem is the correct fix... Could you describe the problem in a little more depth?,"02/Mar/16 14:50;gnt;We use the Mina SSHD server in Karaf.
The problem happens when we restart the framework without restarting the JVM.  The reason is that the javax.crypto package has some internal cache about Cipher providers.  The providers are cached by the protection domain source code url.

See http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/9b8c96f96a0f/src/share/classes/javax/crypto/JceSecurityManager.java#l79

Here's what happens:
  * the JVM starts, the OSGi framework starts, the SSH bundle is installed with a {{mvn:org.apache.sshd/sshd-core/1.0.0}} url (the url handler is an OSGi url handler, so provided by a pax-url bundle)
  * when the SSH server starts, the JceSecurityManager caches the Cipher provider with this url
  * the framework is restarted
  * when the SSH server starts again, the JceSecurityManager calls {{get}} on the cache indexed by the URL, but the URL in the cache is no longer valid and the {{URLHandlersStreamHandlerProxy.equals}} throws the exception indicated

This obviously only happen when the bundle is installed with a {{mvn:org.apache.sshd/sshd-core/1.0.0}} and not a {{file:system/org/apache/sshd/sshd-core/1.0.0/sshd-core-1.0.0.jar}} url.

I think it's a bad idea that the BundleProtectionDomain uses a URL which may not be valid after the framework is shutdown. My initial thinking was to use the jar bundle revision path instead, something like {{file:data/cache/bundle32/11.0/bundle.jar}}.
It seems that's the way Equinox works fwiw.
Especially, if the bundle is updated, I think the 2 code source should be different, and using the original location used to install / update the url does not bring this guarantee.  Using the bundle revision instead seems cleaner to me.","04/Mar/16 08:55;gnt;Proposed fix
   https://github.com/gnodet/felix/commit/6a3ef75f278319a9a0b2a380bd25bed5e38d4a0c","07/Mar/16 11:15;karlpauls;I did think about this issue for a while and I agree that there seems to be no really good solution for your special case. 

Just to make this clear so, we are talking about a special case that is the issue here where we are up against the Java standard libraries which unfortunately, one more time, don’t play well with dynamic applications — hence, I strongly suggest that this is not a bug in felix as such but more a feature request for a workaround that makes your scenario possible.

In general though, I don't think using the cached location is the right thing to do. The cached location is meaningless as a code source for the actual purpose of having a code source. I realize that there are libraries out there that are misusing the code source as a way to get access to the source resources (as is the issue in your case) and that is why we have this somewhat roundabout way of doing things the way we do them to make this possible. However, you are running into yet a more complicated scenario where the code source is not valid anymore at the time it is used and there is very little we can do about it. 

Personally, I’d say that this is not our problem and the correct way of fixing this on your side is to provide the url handler you need as a built-in handler (i.e. use the jvm extension property to provide the handler). That would make your scenario work and is the correct way of doing it but assumes you have control over the jvm.  

Given that limitation I’m not against doing what you are proposing as a workaround but I suggest we make it a real one i.e., by default we behave like we do currently and introduce a configuration property to switch to the cached url. 

If that would work for you, could you modify your patch so that it introduces a property to enable using cache urls only if it is set and otherwise keeps the current behavior including the handling of the ""reference:"" protocol that your current proposal seems to remove?","07/Mar/16 16:02;gnt;I've pushed a new PR according to your comments:
   https://github.com/gnodet/felix/tree/FELIX-5204",07/Mar/16 20:16;karlpauls;Looks good to me.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ServiceComponentRuntimeImpl NPE with subsystems/regions,FELIX-5202,12945547,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,29/Feb/16 18:11,08/Jul/16 08:05,14/Mar/19 02:48,29/Feb/16 19:00,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Although the global extender property set to true lets felix ds properly manage DS components in isolated bundles/regions, the SCRImpl doesn't get the right bundle to look up other bundles in this case, so you get an NPE like

java.lang.NullPointerException
	at org.apache.felix.scr.impl.ComponentRegistryKey.<init>(ComponentRegistryKey.java:41)
	at org.apache.felix.scr.impl.ComponentRegistry.getComponentHolder(ComponentRegistry.java:283)
	at org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.getHolderFromDescription(ServiceComponentRuntimeImpl.java:233)
	at org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.getComponentConfigurationDTOs(ServiceComponentRuntimeImpl.java:103)
	at org.apache.felix.scr.impl.ScrCommand.list(ScrCommand.java:263)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Feb 29 19:00:20 UTC 2016,,,,,,0|i2txen:,9223372036854775807,,,,,,,,"29/Feb/16 19:00;djencks;r1732934 fixes problem
r1732935 reformats Activator class using template.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Factory configuration adapter not restarted,FELIX-5200,12945206,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,27/Feb/16 17:04,06/Mar/16 19:07,14/Mar/19 02:48,27/Feb/16 17:08,org.apache.felix.dependencymanager-r1,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"When a factory pid adapter is losing one of its required service dependencies, it is stopped, but when the lost dependency comes up again, the configuration adapter instance is not re-created and re-started.

Example:

 * A factory configuration adapter has a required dependency on a ""Required"" service.
 * The factory configuration is created, the ""Required"" service is registered, so a factory configuration adapter INSTANCE1 is then created.
 * Now the ""Required"" service is unregistered: the INSTANCE1 is then stopped.
 * And when the ""Required"" service comes up again, then a new factory config adapter INSTANCE2 should be re-created, updated and started, But since R1 this is not the case anymore.

The bug is located in the AbstractDecorator.stop() method, this method currently does this:

{code}
    public void stop() {
        for (Component component : m_services.values()) {
            m_manager.remove(component);
        }
    }    
{code}

Clearly, this is a bug because the ""m_services"" list is not cleared, so when the AbstractDecorator.updated(String, Dictionary) method is called again, it finds again some old stale components, and updates them instead of re-creating new adapter instances.

In DM3, the list was correctly cleared:

{code}
    public void stop() { 
        Object[] components;
        synchronized (m_services) {
            components = m_services.values().toArray();
            m_services.clear();
        }
        for (int i = 0; i < components.length; i++) {
            m_manager.remove((Component) components[i]);
        }
    }    
{code}

I will add a test case soon.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 27 17:08:32 UTC 2016,,,,,,0|i2tvan:,9223372036854775807,,,,,,,,"27/Feb/16 17:08;pderop;Fixed issue in rv 1732653, and added the following test case:

org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5200_FactoryPidNotRestartedTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in HttpServiceFactory.getService() causing exception,FELIX-5199,12944592,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,25/Feb/16 18:34,01/Apr/16 07:40,14/Mar/19 02:48,23/Mar/16 06:55,http.base-3.0.6,http.bridge-3.0.6,http.jetty-3.1.6,,,,http.base-3.0.8,http.bridge-3.0.8,http.jetty-3.2.0,,,,,HTTP Service,,,,,,0,,,,,,"The HttpServiceFactory.getService() is as follows:

{code}
    public HttpService getService(final Bundle bundle, final ServiceRegistration<HttpService> reg)
    {
        final ServletContext servletContext = this.context;
        if ( servletContext != null ) {
            return new PerBundleHttpServiceImpl(bundle,
                    this.sharedHttpService,
                    this.context,
                    this.contextAttributeListenerManager,
                    this.sharedContextAttributes,
                    this.requestListenerManager,
                    this.requestAttributeListenerManager);
        }
        return null;
    }{code}

However it is possible that this.context is set to {{null}} after the check for {{null}} is done but before the constructor is called causing a null servlet context to be passed to {{PerBundleHttpServiceImpl}}",,,,,,,,,,,,,,,,,,,,25/Feb/16 18:35;bosschaert;felix-5199.patch;https://issues.apache.org/jira/secure/attachment/12789978/felix-5199.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-02-26 07:12:49.943,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 23 06:55:01 UTC 2016,,,,,,0|i2tri7:,9223372036854775807,,,,,,,,25/Feb/16 18:35;bosschaert;The attached small patch fixes the issue. It would be great if someone could review that I didn't miss anything.,"26/Feb/16 07:12;cziegeler;I think we need to check all objects that can get invalidated in stop(). If any of these is null or closed, we should not return the service anymore. So maybe using a simple flag (started/stopped) that's set in start/stop and evaluated in the getService method is safer","26/Feb/16 08:21;bosschaert;Thanks for the feedback, [~cziegeler]. I didn't think of checking for the other objects as {{PerBundleHttpServiceImpl}} only seems to require the Bundle and the ServletContext to be non-null. As this is a service factory which is called by the framework the Bundle can never be null...

I agree that a started/stopped flag would cover the overall case. Let me rework the patch for that...",26/Feb/16 10:13;bosschaert;Fixed in https://svn.apache.org/viewvc?view=revision&revision=1732445 using flag as suggested.,26/Feb/16 10:57;bosschaert;I improved the thread-safety in the fix after feedback from [~cziegeler] in this commit: https://svn.apache.org/viewvc?view=revision&revision=1732453,"20/Mar/16 20:47;epirealer;While investigating FELIX-5219 I ran into some issues that I believe is related to this patch. 

If a {{ServiceTracker}} is opened and listening for {{HttpService}} (*before* {{HttpServiceFactory#start}} have been called) the {{active}} flag in {{HttpServiceFactory#getService}} will never be {{!= null}} (and the returned service will be {{null}}. 

The reason is that the ServiceTracker will get a callback to {{addingService}} synchronously when the service-factory is registered (line 114 in {{HttpServiceFactory}}. At this point the {{active}} flag is still {{false}} (it's set to {{true}} right after the registration. If the ServiceTracker tries to resolve the service-reference in its {{addingService}} this will call into {{HttpServiceFactory#getService}} - but {{active}} is false, so no service is returned.

I tried setting {{active}} to true just before registering the HttpServiceFactory, and this seemed to work - but perhaps that will lead to similar race conditions as in the original code before this patch?","21/Mar/16 06:22;cziegeler;Good catch, I think we somehow have to do this differently","22/Mar/16 16:54;bosschaert;Yeah, when I looked at it the best solution seemed to split this object into two separate objects, but I didn't get to implement that yet...","23/Mar/16 06:55;cziegeler;Moving the boolean before registering should actually solve the problem, no one else is able to get the service until it is registered, therefore setting it to true before registering works as expected",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Capabilities not matching because of case,FELIX-5196,12941606,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,skahmann,skahmann,24/Feb/16 02:01,19/Apr/16 15:09,14/Mar/19 02:48,19/Apr/16 15:02,bundlerepository-2.0.6,,,,,,bundlerepository-2.0.10,,,,,,,Bundle Repository (OBR),,,,,,0,,,,,,"RequirementImpl is not matching Capabilities because it is using a filter that ignores case. The Filter lowercases the keys, but this is also not done when trying to match them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-18 20:19:43.954,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 19 15:09:01 UTC 2016,,,,,,0|i2t92n:,9223372036854775807,,,,,,,,"24/Feb/16 02:03;skahmann;PR made, but fix https://issues.apache.org/jira/browse/FELIX-5195 first",01/Mar/16 15:43;skahmann;Updated with recent bundlerepository commits and ready for review.,01/Mar/16 15:57;skahmann;PR: https://github.com/apache/felix/pull/54,04/Mar/16 12:22;skahmann;Any thoughts on this fix?,10/Mar/16 15:12;skahmann;[~bosschaert],"15/Mar/16 18:09;skahmann;Sorry for the bother, but has anyone had a chance to look at this?","18/Apr/16 02:37;skahmann;This is pretty important as this breaks deployment with OSGi services. For example:

{code}
<capability namespace=""osgi.service"">
    <attribute name=""objectClass"" type=""List&lt;String&gt;"" value=""org.some.interface""/>
    <attribute name=""someProperty"" value=""someValue""/>
    <attribute name=""service.ranking"" type=""Long"" value=""10""/>
</capability>

<requirement namespace=""osgi.service"">
    <directive name=""filter"" value=""(objectClass=org.some.interface)""/>
    <directive name=""effective"" value=""active""/>
</requirement>
{code}

Anyone able to take a look at this pull request? Thanks.","18/Apr/16 20:19;rickhall;Perhaps I'm misunderstanding the issue, but if you want to ignore the case of the keys, why not just call m_filter.match() instead of m_filter.matchCase()?","18/Apr/16 21:24;skahmann;Looks like we could use match, but we'd have to convert the Map to a Dictionary.

{code}
Dictionary<String, Object> propertyDict = new Hashtable<String, Object>(capability.getPropertiesAsMap());

return m_name.equals(capability.getName()) &&
                m_filter.match(propertyDict) &&
                (m_filter.toString().contains(""(mandatory:<*"") || propertyDict.get(""mandatory:"") == null);
{code}

Thoughts?",18/Apr/16 22:40;rickhall;I think utils already has a MapToDictionary class that won't make a copy.,"18/Apr/16 23:07;skahmann;Good catch:

{code}
Dictionary propertyDict = new MapToDictionary(capability.getPropertiesAsMap());
        
return m_name.equals(capability.getName()) &&
                m_filter.match(propertyDict) &&
                (m_filter.toString().contains(""(mandatory:<*"") || propertyDict.get(""mandatory:"") == null);
{code}","18/Apr/16 23:12;rickhall;I admit that I haven't dug into this too deeply, but that seems reasonable to me.",18/Apr/16 23:15;skahmann;[~rickhall] Thank you for your quick responses! I've pushed the changes to the PR.,"19/Apr/16 15:02;rickhall;I applied the patch, so this fix should be included in the next release. I am not sure when that will happen. Please close this issue if satisfied. Thanks.","19/Apr/16 15:08;githubbot;Github user skahmann closed the pull request at:

    https://github.com/apache/felix/pull/54
",19/Apr/16 15:08;skahmann;Thanks!,19/Apr/16 15:09;skahmann;Patch applied ,,,,,,,,,,,,,,,,,,,,,,,,,
Factory Pid Adapter race condition when component is stopped,FELIX-5193,12940824,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,20/Feb/16 21:07,06/Mar/16 19:07,14/Mar/19 02:48,20/Feb/16 21:15,dependencymanager-3.2.0,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"When a factory pid adapter component is being removed (stopped), and at the same time the factory configuration is updated, the handling of the factory configuration update
may take place while the factory pid component is being destroyed.

The factory conf update must be handled synchronously, but from the factory pid adapter component internal executor queue, in order to avoid all sort of racy problems.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 20 21:15:42 UTC 2016,,,,,,0|i2t493:,9223372036854775807,,,,,,,,20/Feb/16 21:15;pderop;Fixed in rv 1731471.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationDependency race condition when component is stopped,FELIX-5192,12940823,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,20/Feb/16 21:03,06/Mar/16 19:07,14/Mar/19 02:48,20/Feb/16 21:16,org.apache.felix.dependencymanager-r1,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"When a component is being removed (stopped) and at the same time a configuration is updated or removed, then it may be possible that
the configuration dependency invokes the updated callback after the component instance has been destroyed and nullified.

So far, this was never observed because we did not log any warnings when a configuration callback was unavailable, but now we log a warn (see  FELIX-5187).

The fix to do is simply to check if the configuration dependency is started before invoking the update callback method.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 20 21:16:16 UTC 2016,,,,,,0|i2t48v:,9223372036854775807,,,,,,,,"20/Feb/16 21:16;pderop;Fixed in Fixed in rv 1731471.

The ServiceRaceTest is now passing OK.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OBR R5 Capabilities are not Properly being Parsed,FELIX-5189,12939994,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,skahmann,skahmann,17/Feb/16 23:41,01/Mar/16 15:38,14/Mar/19 02:48,22/Feb/16 16:05,bundlerepository-2.0.6,,,,,,bundlerepository-2.0.8,,,,,,,Bundle Repository (OBR),,,,,,0,,,,,,"Capabilities are not correctly being parsed for the R5 spec. The ""osgi.wiring.package"" attribute is being compared to ""package"" which always fails to match.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-17 23:41:56.791,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 01 15:38:12 UTC 2016,,,,,,0|i2sz4n:,9223372036854775807,,,,,,,,"17/Feb/16 23:41;githubbot;GitHub user skahmann opened a pull request:

    https://github.com/apache/felix/pull/52

    Obr capability attribute fix

    Fix for https://issues.apache.org/jira/browse/FELIX-5189

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/skahmann/felix obr_capability_attribute_fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/52.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #52
    
----
commit 8c72ff4b85e07a2c6e36fe787759b07e09dc5dc4
Author: Stephen Kahmann <stephen.kahmann@inovexcorp.com>
Date:   2016-02-17T23:40:52Z

    Fixed capability parsing for attribute names

commit df390f520e2abed0eb947955fd26fe9a86e5e559
Author: Stephen Kahmann <stephen.kahmann@inovexcorp.com>
Date:   2016-02-17T23:41:03Z

    Added test to fix the problem

----
",17/Feb/16 23:42;skahmann;PR here: https://github.com/apache/felix/pull/52,22/Feb/16 13:21;skahmann;Anybody have an opinion on this?,"22/Feb/16 16:05;rickhall;Seems reasonable. I've applied your patch, please close if satisfied. I'm uncertain when this will be released.",22/Feb/16 16:41;skahmann;Thank you!,"01/Mar/16 15:38;githubbot;Github user skahmann closed the pull request at:

    https://github.com/apache/felix/pull/52
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No error log when a factory pid adapter update callback is not found,FELIX-5188,12939110,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,14/Feb/16 13:19,06/Mar/16 19:07,14/Mar/19 02:48,14/Feb/16 13:22,dependencymanager-2.0.1,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,,,,,,,0,,,,,,No errors are logged when a factory pid adapter is wrongly configured with an update callback that does not exist.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Feb 14 13:22:16 UTC 2016,,,,,,0|i2stpr:,9223372036854775807,,,,,,,,14/Feb/16 13:22;pderop;Fixed in rv 1730334.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No errog log when configuration dependency callback is not found,FELIX-5187,12939105,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,14/Feb/16 12:40,06/Mar/16 19:07,14/Mar/19 02:48,14/Feb/16 13:20,dependencymanager-2.0.1,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"if a configuration dependency is defined using a non-existing callback method name, then currently, no error is logged and the callback is simply not invoked when a configuration becomes available.

An error log must be displayed in such case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Feb 14 13:20:48 UTC 2016,,,,,,0|i2ston:,9223372036854775807,,,,,,,,14/Feb/16 13:20;pderop;fixed in rv 1730332.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Alarmist logging on asynchronous service changes,FELIX-5186,12938967,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,12/Feb/16 23:28,08/Jul/16 08:05,14/Mar/19 02:48,12/Feb/16 23:29,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"When a mandatory service is unregistered while we are trying to create the component instance, we currently emit an error log message.  With our current level of locking, this is an event to be expected.  I'm changing the log level to debug.  Info would also be ok in case anyone would prefer that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat May 21 06:50:19 UTC 2016,,,,,,0|i2sstz:,9223372036854775807,,,,,,,,12/Feb/16 23:29;djencks;r1730142,21/May/16 06:50;djencks;Additional fix in r1744852,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix description of metatype bundle,FELIX-5185,12938838,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,kwin,kwin,12/Feb/16 16:16,01/Sep/17 06:49,14/Mar/19 02:48,12/Feb/16 16:24,metatype-1.1.2,,,,,,metatype-1.1.4,,,,,,,,,,,,,0,,,,,,"It still says ""Implementation of the OSGi Metatype Service Specification 1.2"" while it now actually supports the spec 1.3 (see FELIX-4687).
The wrong description from the pom.xml (https://github.com/apache/felix/blob/trunk/metatype/pom.xml#L34) is also ending up in the manifest for that bundle.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-12 16:24:44.547,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 12 16:24:44 UTC 2016,,,,,,0|i2ss1b:,9223372036854775807,,,,,,,,"12/Feb/16 16:24;cziegeler;Thanks for reporting, should be fixed with commit 1730059",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only log info/debug if dm annotation log parameter is enabled,FELIX-5181,12937997,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,09/Feb/16 21:20,06/Mar/16 19:07,14/Mar/19 02:48,09/Feb/16 21:21,dependencymanager.runtime-3.2.0,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager Runtime,,,,,,0,,,,,,"Currently, the DM annotation runtime logs info/debug messages to any available log service, even if the ""org.apache.felix.dependencymanager.runtime.log"" system property is not set, or is set to ""false"".

When such property is not configured or is set to ""false"", then the dm runtime should only log error/warn messages, and not info/debug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 09 21:21:53 UTC 2016,,,,,,0|i2smun:,9223372036854775807,,,,,,,,09/Feb/16 21:21;pderop;Fixed in revision 1729458.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make some component parameters as volatile,FELIX-5178,12936995,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,05/Feb/16 09:26,06/Mar/16 19:06,14/Mar/19 02:48,23/Feb/16 23:57,org.apache.felix.dependencymanager-r1,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,Dependency Manager Lambda,,,,,0,,,,,,"Currently, all parameters passed to components/dependencies API are stored in non volatile variables, because internally,  we are using a concurrent queue, which ensures ""safe publication"" regarding memory visibility.

Now, this is all fine, except for the following case:

- The application creates and initialize a Component from one thread T1.

- Then later, from thread T2, the application starts the component (adds it to a DependencyManager object).

In this case, we should declare all API parameters in volatile attributes in order to ensure safe visibility from T2 thread, when accessing to parameters that were set in the original T1 thread.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 23 23:57:12 UTC 2016,,,,,,0|i2sgwf:,9223372036854775807,,,,,,,,23/Feb/16 23:57;pderop;fixed in revision 1731992.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sessions are incorrectly destroyed,FELIX-5175,12934744,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,28/Jan/16 09:41,01/Apr/16 07:40,14/Mar/19 02:48,28/Jan/16 10:24,http.base-3.0.6,http.bridge-3.0.4,http.jetty-3.1.4,,,,http.base-3.0.8,http.bridge-3.0.8,http.jetty-3.2.0,,,,,HTTP Service,,,,,,0,,,,,,"HttpSessionWrapper contains a static member, getExpiredSessionContextIds, that determines which sessions should be destroyed based on the timeouts that are set on each session.

The implementation incorrectly assumes these timeouts are in milliseconds, while the timeouts are actually set in seconds (see JavaDoc of HttpSession). This means that a timeout of 300 (5 minutes) is interpreted as 300 milliseconds, resulting in sessions being destroyed too soon.

(Found through ACE-528)",,,,,,,,,,,,,,ACE-528,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 28 10:24:20 UTC 2016,,,,,,0|i2s31j:,9223372036854775807,,,,,,,,28/Jan/16 10:24;jajans;Solved in rev #1727299.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Metatype service's BundleResources ignore properties provided by fragment bundles,FELIX-5173,12934261,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,jajans,o.otto,o.otto,26/Jan/16 22:24,01/Sep/17 06:49,14/Mar/19 02:48,04/Feb/16 16:14,metatype-1.1.2,,,,,,metatype-1.1.4,,,,,,,Metatype Service,,,,,,0,,,,,,"OSGi Fragment bundles may - rather similar to OSGI bundles contributing Resource Bundles for i18n - add translated properties for metatype services to a host bundle. Also, fragment bundles may add declarative service to a host bundle, thus having to contribute the corresponding properties.

However, the current BundleResources implementation exclusively loads properties from the declaring (host) bundle using ""getEntry(...)"":

{code}
URL resURL = this.bundle.getEntry(resourceName);
...
{code}

Instead, getResource(...) should be used, which takes into account resources contributed by fragments.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-04 16:14:08.261,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 04 16:14:08 UTC 2016,,,,,,0|i2s027:,9223372036854775807,,,,,,,,04/Feb/16 16:14;jajans;Fixed in rev #1728499 & #1728500.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoConf incorrectly references constants from DeploymentAdmin,FELIX-5169,12931660,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,16/Jan/16 13:32,16/Jan/16 15:03,14/Mar/19 02:48,16/Jan/16 13:44,autoconf-rp-0.1.6,,,,,,autoconf-rp-0.1.8,,,,,,,Deployment Admin,,,,,,0,,,,,,"The autoconf resource processor references the constants class from DeploymentAdmin. The package of this class is not exported, causing wiring issues when deploying the autoconf resource processor at runtime.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jan 16 13:44:26 UTC 2016,,,,,,0|i2rk1z:,9223372036854775807,,,,,,,,16/Jan/16 13:44;jajans;Fixed in rev #1724974.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WrappedResource does not handle namespace correctly,FELIX-5166,12929584,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,12/Jan/16 20:08,13/Oct/16 06:40,14/Mar/19 02:48,08/Mar/16 08:35,resolver-1.8.0,,,,,,resolver-1.10.0,,,,,,,Resolver,,,,,,0,,,,,,"This is similar to FELIX-4727.  There are several issues with how namespace is handled in getCapabilities and getRequirements for the org.apache.felix.resolver.WrappedResource class

In getCapabilities the namespace is correctly used to ask the host and fragment resources for the named capabilities.  But then that list is saved into the m_cachedCapabilities field.  If you first ask for the 'foo' namespace it will save all the 'foo' capabilities to m_cachedCapabilities, then if you ask for the 'bar' capabilities it will simply return the m_cachedCapabilities from before with 'foo' capabilities.

In getRequirements the namespace is completely ignored.  I think there are several reasons to stop lazily crating these caches.  It leads to strange bugs like the ones above, but also there is no synchronization here and the var is not volatile so I think there could be some issues with multi-threading.  Now that the resolver is multi-threaded I think we should stop creating these lists of capabilities and requirements lazily.  Instead I think we should make them final and create them in the constructor. ",,,,,,,,,,,,,,,,,,,,12/Jan/16 20:16;tjwatson;FELIX-5166.patch;https://issues.apache.org/jira/secure/attachment/12781907/FELIX-5166.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Feb 22 17:27:35 UTC 2016,,,,,,0|i2r78v:,9223372036854775807,,,,,,,,12/Jan/16 20:16;tjwatson;Possible fix,22/Feb/16 17:27;tjwatson;I released the patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Felix Properties doesn't handle multi value properties correctly,FELIX-5156,12928008,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,jbonofre,jbonofre,06/Jan/16 12:49,13/Oct/16 06:15,14/Mar/19 02:48,07/Jan/16 14:29,utils-1.6.0,utils-1.8.0,,,,,utils-1.8.2,,,,,,,Utils,,,,,,0,,,,,,"When a property contains multiple values, like:

{code}
testProperty = testing\\utest
{code}

Felix Properties considers as an unique value.

The attached patch deals with multi-valued property (including an unit test to illustrate the use case).",,,,,,,,,,,,,,,,,,,,06/Jan/16 12:50;jbonofre;Multi_value_encoding_error.patch;https://issues.apache.org/jira/secure/attachment/12780746/Multi_value_encoding_error.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-01-06 13:00:24.371,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Thu Jan 07 14:29:29 UTC 2016,,,,,,0|i2qxjb:,9223372036854775807,,,,,,,,"06/Jan/16 13:00;shuber;Thanks JB for creating this. 

A real world use case of this problem was some code that created a list of package exports dynamically, and specifically should have be saved as such : 

translation;version=\""4.0.9\"",\
trax;version=\""2.7.1\"",\
ucar.atd.dorade;version=\""4.2.0.min\"",\

without this patch the properties saving failed because or the concatenation that happens before the encoding, effectively trying to encode:

translation;version=\""4.0.9\"",\trax;version=\""2.7.1\"",\ucar.atd.dorade;version=\""4.2.0.min\"",\

and it failing because it was trying to decode \ucar as an unicode character.

",07/Jan/16 14:29;gnt;http://svn.apache.org/viewvc?view=revision&revision=1723557,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adapter/Aspect extra service dependencies injected twice if using callback instance,FELIX-5155,12926946,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,04/Jan/16 11:08,06/Mar/16 19:06,14/Mar/19 02:48,31/Jan/16 22:01,dependencymanager-3.0.0,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"In the context of the new DM-lambda library, we found the following issue:

When an aspect or an adapter is defined on an existing service, and if such aspect (or adapter) declares some extra service dependencies, and if one of these extra dependencies are using an external callback instance (in order to inject the extra dependency into the adapter or aspect instance), then the callback instance is invoked twice:

The first time, the callback instance is wrongly called by the internal aspect (or adapter) AbstractDecorator component, and the second time it is correctly called in order to inject the dependency into the callback instance.

I have written a test case which reproduces this issue and will commit it soon.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Feb 14 11:09:33 UTC 2016,,,,,,0|i2qqzj:,9223372036854775807,,,,,,,,"04/Jan/16 11:11;pderop;committed a test case for this issue in revision 1722844:

src/org/apache/felix/dm/itest/api/FELI5155_AdapterCallbackInstanceCalledTwice.java","04/Jan/16 11:27;pderop;Fix committed in revision 1722848: when an extra dependency is added to an aspect (or adapter), then the service dependency callback instance (if set) is temporarily removed from the dependency, and is cached in a datastructure, allowing to re-add it later, when instantiating concrete aspect/adapter component instances.

See the following patched methods in the FilterComponent class:

public Component add(Dependency ... dependencies)
protected void copyDependencies(List<DependencyContext> dependencies, Component component)

","31/Jan/16 21:59;pderop;The fix is not satisfying, because it requires a major version bump for the org.apache.felix.dm.context package. Another possible better and simpler fix consists in simply making sure that the ComponentImpl does not invoke callbacks on AbstractDecorator components (excepts for the first internal dependency declared by aspects and adapters).",31/Jan/16 22:01;pderop;Fixed in 1727864.,"14/Feb/16 11:09;pderop;The previous fix was incomplete.
Committed in rv 1730313 another fix:  ConfigurationDependencyImpl must not invoke the update callback if the component is an internal adapter object in order to avoid potential double update callback invocation.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DM4 calls stop before ungetService() on ServiceFactory components,FELIX-5153,12924874,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,pderop,bramk,bramk,30/Dec/15 12:34,06/Mar/16 19:06,14/Mar/19 02:48,03/Jan/16 23:42,,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"When you remove a ServiceFactory component DM4 will call the stop method before the the framework has called ungetService() for all service instances. 

This seems to be a regression from DM3 and breaks any implementation that relies on previous behavior for cleanup.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-12-30 12:42:53.706,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Feb 29 08:34:23 UTC 2016,,,,,,0|i2qelr:,9223372036854775807,,,,,,,,30/Dec/15 12:35;bramk;Here is a small project that reproduces the problem: https://github.com/bramk/dmtest,"30/Dec/15 12:42;pderop;ok, I will look into this asap.","30/Dec/15 13:40;pderop;I reproduced. (Thanks a lot for the nice bndtools sample project !)

I think all comes from the ComponentImpl.unregisterService() method (DM4), which currently does this:

{code}
    private void unregisterService() {
        if (m_serviceName != null && m_registration != null) {
            try {
                if (m_bundle != null && m_bundle.getState() == Bundle.ACTIVE) {
                    m_registration.unregister();
                }
            } catch (IllegalStateException e) { /* Should we really log this ? */}
            autoConfigureImplementation(ServiceRegistration.class, NULL_REGISTRATION);
            m_registration = null;
        }
    }
{code}

you see the ""if (m_bundle != null && m_bundle.getState() == Bundle.ACTIVE) {"" 
-> this is the root cause.

I will work on the fix tonight.

can you please tell me if you need a quick release ?

","30/Dec/15 13:57;bramk;Awesome! Thanks for a quick triage :)

Please do not spend new years eve on this! No need for super quick release from my end. We can stick with DM3 for a few more weeks.","30/Dec/15 14:25;pderop;Ok :-)

I plan to release the DM-R7 in the second week of 2016, so the fix will be included it it.
(notice that R7 will be built with java8,  because it will include a new dependencymanager-lambda library (see FELIX-4689).

I hope it won't be an issue if R7 is not compatible anymore with java7 ?
(I think you are all using java8 at Amdatu ? if not let me know).

thanks Bram.","30/Dec/15 14:51;bramk;Java 8 is fine (y)

Thanks!","31/Dec/15 09:10;pderop;It is fixed in the trunk (in rv 1722430.)
I will add a test case (based on your scenario) a bit later and will release around 10th January.
","31/Dec/15 15:32;bramk;Works! 

The update did uncover a nasty race condition in my code... seems the timing it a bit different to DM3 :)","03/Jan/16 23:41;pderop;Just committed a testcase in revision 1722772.
(src/org/apache/felix/dm/itest/api/FELIX5153_StopBeforeUngetServiceTest.java)","29/Feb/16 08:34;pderop;Hello Bram, 

Just to tell that the vote for the R7 has started (slightly behind schedule, sorry about that).
This release includes the fix for your issue.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundle Adapter auto configures class fields even if callbacks are used,FELIX-5147,12923240,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,19/Dec/15 18:01,06/Mar/16 19:06,14/Mar/19 02:48,19/Dec/15 18:03,org.apache.felix.dependencymanager-r1,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"When a bundle adapter is used with some callbacks (with or without a callback instance), then any fields in the adapter class with type=Bundle are auto-injected.

Normally, auto-configuration should be turned off when callbacks are used, exactly in the same manner it is done with regular service dependencies, or with service adapters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 19 18:03:51 UTC 2015,,,,,,0|i2q4lb:,9223372036854775807,,,,,,,,19/Dec/15 18:02;pderop;Added test: org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/BundleAdapterWithCallbacksNotAutoConfiguredTest.java,19/Dec/15 18:03;pderop;fixed in rv 1720964.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Service adapters turn on autoconf even if callbacks are used,FELIX-5146,12923239,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,19/Dec/15 17:57,06/Mar/16 19:06,14/Mar/19 02:48,19/Dec/15 18:00,org.apache.felix.dependencymanager-r1,,,,,,org.apache.felix.dependencymanager-r8,,,,,,,Dependency Manager,,,,,,0,,,,,,"in the previous DM 3 version, when you specify a service adapter without an autoconfig field and with some callbacks (and with or without a callback instance object), then auto config mode (on fields in the adapter class) is turned off.
This is good, because mixing callbacks and auto-config mode (on class fields) may lead to bugs difficult to diagnose.

in dm4, there is a mistake: when you specify a service adapter without an autoconfig field, but with callbacks on a callback instance, like this for example:

{code}
ServiceAdapterCallbackInstance callbackInstance =
    new ServiceAdapterCallbackInstance(e);

m.createAdapterService(OriginalService.class, null, null, /* no autoconfig field */,  
    callbackInstance, ""set"", ""changed"",""unset"", null, true)            
{code}

then the adapter class fields are auto-configured, even if no auto config class field have been specified and if some callbacks have been specified.

We should go back to the previous DM 3 behavior, which makes more sense: if some callbacks are defined and there is no autoconfig field, then do not enable auto-config mode.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 19 18:00:20 UTC 2015,,,,,,0|i2q4l3:,9223372036854775807,,,,,,,,19/Dec/15 17:58;pderop;added test in org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AdapterNoAutoConfigIfInstanceCallbackIsUsed.java,19/Dec/15 18:00;pderop;Fixed in rv 1720962.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UnsupportedOperationException when embedding felix in WebSphere,FELIX-5131,12919607,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tsc,tsc,07/Dec/15 08:39,13/Oct/16 06:39,14/Mar/19 02:48,08/Mar/16 08:36,framework-5.2.0,resolver-1.6.0,,,,,resolver-1.10.0,,,,,,,Framework,Resolver,,,,,3,,,,,,"Hello, we are embedding the OSGi framework in our application (creating the framework , managing its export packages, contolling the bundles &c.). This works great in a lot of enviroments, but not on WebSphere (using the IBM JDK): 
{noformat}
java.lang.UnsupportedOperationException
	at org.apache.felix.resolver.util.CopyOnWriteList.listIterator(CopyOnWriteList.java:218)
	at java.util.Collections.binarySearch(Collections.java:1551)
	at org.apache.felix.framework.ResolveContextImpl.insertHostedCapability(ResolveContextImpl.java:103)
	at org.apache.felix.resolver.Candidates.prepare(Candidates.java:934)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:233)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:159)
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:431)
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4109)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2111)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1365)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)
	at java.lang.Thread.run(Thread.java:790)
{noformat}

The problem seems to be that in the IBM JDK, the Collections.binarySearch method directly uses the listIterator of the list if it is not a RandomAccess list (while the oracle JDK doesn't).

A solution it to add the interface RandomAccess to the CopyOnWriteList class. I've tested this locally and eveything runs fine.",,,,,,,,,,,,,,,,,,,,11/Jan/16 22:01;tjwatson;FELIX-5131.patch;https://issues.apache.org/jira/secure/attachment/12781659/FELIX-5131.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-01-11 20:25:52.861,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 08 08:36:44 UTC 2016,,,,,,0|i2pipr:,9223372036854775807,,,,,,,,"11/Jan/16 20:25;tjwatson;I think we should implement as many of the List operations as feasible.  I don't really like the idea of implementing RandomAccess to avoid certain algorithms from using a list iterator.  But I do agree that CopyOnWriteList is in fact a random access list so I don't see any harm in adding it to the implements of CopyOnWriteList.

The issue is the CopyOnWriteList object is exposed when calling out to ResolveContext.insertHostedCapability.  The javadoc for that OSGi method does not state any limitations on the operations that can be supported on that object.  But I am pretty sure any resolver implementation is going to fail badly if the method does not result in adding/inserting the specified HostedCapability into the specified List.  For example, removing anything from the list is a good way to bust the resolver impl.

As a result I think we should at least implement all the add methods as well as a ListIterator that supports add and set operations.
","11/Jan/16 20:28;tjwatson;Actually the ListIterator must NOT support the set operation since that would remove and replace an existing entry from the list, again a good way to bust the resolver impl.",11/Jan/16 22:01;tjwatson;Possible fix to implement more List operations and implement RandomAccess,11/Jan/16 22:11;tjwatson;When looking at the IBM VM it seems that it treats all Lists as RandomAccess for Collections.binarySearch unless it has more than 5000 elements.  When you reproduced did you really have 5000 matching capabilities?,"12/Jan/16 08:07;tsc;Thanks for looking at this.
I'm using the IBM jdk 1.6.0 (sic) coming with WebSphere. Here is the binarySearch method:
{code}
public static <T> int binarySearch(List<? extends T> list, T object,
		Comparator<? super T> comparator) {
	if (comparator == null) {
		return Collections.binarySearch(
				(List<? extends Comparable<? super T>>) list, object);
	}
	if (!(list instanceof RandomAccess)) {
		ListIterator<? extends T> it = list.listIterator();
		while (it.hasNext()) {
			int result;
			if ((result = -comparator.compare(it.next(), object)) <= 0) {
				if (result == 0) {
					return it.previousIndex();
				}
				return -it.previousIndex() - 1;
			}
		}
		return -list.size() - 1;
	}

	int low = 0, mid = list.size(), high = mid - 1, result = -1;
	while (low <= high) {
		mid = (low + high) >> 1;
		if ((result = -comparator.compare(list.get(mid),object)) > 0) {
			low = mid + 1;
		} else if (result == 0) {
			return mid;
		} else {
			high = mid - 1;
		}
	}
	return -mid - (result < 0 ? 1 : 2);
}
{code}

","12/Jan/16 13:30;tjwatson;Thanks for the info on the IBM Java 6 VM.  I was looking at the IBM Java 7 VM which looks more like the Oracle Java 7 VM for this method.

That makes this defect a bit more serious for me also since I have to be able to use the resolver impl on the IBM Java 6 VM for a long while still.",22/Feb/16 17:29;tjwatson;I released the patch.  I must not have enough karma because I cannot seem to take ownership of this bug or move it along to change status to FIXED.,08/Mar/16 08:03;tsc;Great - can you at least tell in which versions it is corrected?,08/Mar/16 08:36;gnt;It has not been released yet.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Script console output cannot be copied,FELIX-5122,12916905,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,chetanm,chetanm,chetanm,30/Nov/15 09:37,03/Dec/15 06:59,14/Mar/19 02:48,30/Nov/15 10:03,script-console-1.0.0,,,,,,script-console-1.0.2,,,,,,,Script Console Plugin,,,,,,0,,,,,,"Script console output cannot be copied.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 30 10:03:53 UTC 2015,,,,,,0|i2p227:,9223372036854775807,,,,,,,,30/Nov/15 10:03;chetanm;Done with 1717220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScriptEngineManager not able to parse service file with comments at end of classname,FELIX-5120,12916880,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,chetanm,chetanm,chetanm,30/Nov/15 06:21,03/Dec/15 08:18,14/Mar/19 02:48,30/Nov/15 09:04,script-console-1.0.0,,,,,,script-console-1.0.2,,,,,,,Script Console Plugin,,,,,,0,,,,,,"A service file can also have a comment like below like

{noformat}
#script engines supported

com.sun.script.javascript.RhinoScriptEngineFactory #javascript
{noformat}

Such a service file is not parsed properly and following exception is thrown
{noformat}
2015-11-30 11:23:58.375 ERROR 23215 --- [ixDispatchQueue] o.a.f.webconsole.plugins.scriptconsole   : Cannot register ScriptEngineFactory com.sun.script.javascript.RhinoScriptEngineFactory #javascript (java.lang.ClassNotFoundException: com.sun.script.javascript.RhinoScriptEngineFactory #javascript)

java.lang.ClassNotFoundException: com.sun.script.javascript.RhinoScriptEngineFactory #javascript
        at java.net.URLClassLoader$1.run(URLClassLoader.java:366) ~[na:1.7.0_55]
        at java.net.URLClassLoader$1.run(URLClassLoader.java:355) ~[na:1.7.0_55]
        at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_55]
        at java.net.URLClassLoader.findClass(URLClassLoader.java:354) ~[na:1.7.0_55]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:425) ~[na:1.7.0_55]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:358) ~[na:1.7.0_55]
        at org.apache.felix.connect.PojoSRBundle.loadClass(PojoSRBundle.java:451) ~[org.apache.felix.connect-0.1.0.jar:na]
        at org.apache.felix.webconsole.plugins.scriptconsole.internal.ScriptEngineManager.registerFactories(ScriptEngineManager.java:197) [org.apache.felix.webconsole.plugins.scriptconsole-1.0.0.jar:na]
        at org.apache.felix.webconsole.plugins.scriptconsole.internal.ScriptEngineManager.refreshScriptEngineManager(ScriptEngineManager.java:160) [org.apache.felix.webconsole.plugins.scriptconsole-1.0.0.jar:na]
        at org.apache.felix.webconsole.plugins.scriptconsole.internal.ScriptEngineManager.bundleChanged(ScriptEngineManager.java:111) [org.apache.felix.webconsole.plugins.scriptconsole-1.0.0.jar:na]
        at org.apache.felix.connect.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:821) [org.apache.felix.connect-0.1.0.jar:na]
        at org.apache.felix.connect.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:771) [org.apache.felix.connect-0.1.0.jar:na]
        at org.apache.felix.connect.felix.framework.util.EventDispatcher.run(EventDispatcher.java:993) [org.apache.felix.connect-0.1.0.jar:na]
        at org.apache.felix.connect.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:52) [org.apache.felix.connect-0.1.0.jar:na]
        at org.apache.felix.connect.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:94) [org.apache.felix.connect-0.1.0.jar:na]
        at java.lang.Thread.run(Thread.java:745) [na:1.7.0_55]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 30 09:04:08 UTC 2015,,,,,,0|i2p1wn:,9223372036854775807,,,,,,,,30/Nov/15 09:04;chetanm;Fixed with 1717206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception when running on jdk9-ea,FELIX-5118,12916812,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kristof.vanbecelaere,kristof.vanbecelaere,29/Nov/15 15:52,18/May/16 05:43,14/Mar/19 02:48,11/May/16 06:51,maven-scr-plugin 1.21.0,,,,,,maven-scr-plugin 1.22.0,scr ant task 1.15.0,scr generator 1.14.0,,,,,SCR Tooling,,,,,,0,,,,,,"Caused by: java.lang.IllegalArgumentException: org.apache.felix.scrplugin.annotations.AnnotationProcessor is not an ImageIO SPI class
	at javax.imageio.spi.ServiceRegistry.checkClassAllowed(ServiceRegistry.java:733)
	at javax.imageio.spi.ServiceRegistry.lookupProviders(ServiceRegistry.java:191)
	at org.apache.felix.scrplugin.helper.AnnotationProcessorManager.<init>(AnnotationProcessorManager.java:61)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:141)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:237)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
",1.9.0-ea-b93,,,,,,,,,,,,,,,,,,,09/Mar/16 18:48;omajid;use-service-loader.patch;https://issues.apache.org/jira/secure/attachment/12792313/use-service-loader.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-03-09 18:11:55.653,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 11 06:51:24 UTC 2016,,,,,,0|i2p1hj:,9223372036854775807,,,,,,,,09/Mar/16 18:11;omajid;See https://bugs.openjdk.java.net/browse/JDK-8068749 for upstream discussion on the change that makes ServiceRegistry work with Image* classes only.,09/Mar/16 18:48;omajid;Patch to use java.util.ServiceLoader instead of javax.imageio.spi.ServiceRegistry,18/Apr/16 12:23;jerboaa;Any movement on this? Is there anything wrong with the proposed patch?,"11/May/16 06:51;cziegeler;Thanks for the patch [~omajid]. I've applied a slightly modified version

I've also updated the dependencies to latest asm ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Call to SSOHttpSessionListener#sessionDestroyed is done after the session is invalidated,FELIX-5117,12916159,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,xfournet,xfournet,25/Nov/15 14:23,29/Nov/15 14:51,14/Mar/19 02:48,25/Nov/15 15:17,http.base-3.0.0,http.base-3.0.2,http.bridge-3.0.0,http.bridge-3.0.2,http.jetty-3.1.0,http.jetty-3.1.2,http.base-3.0.4,http.bridge-3.0.4,http.jetty-3.1.4,,,,,HTTP Service,,,,,,1,,,,,,"The javadoc of javax.servlet.http.HttpSessionListener#sessionDestroyed indicate that the method should called before the session is invalidated (""Receives notification that a session is about to be invalidated."").

This was working correctly with HTTP Felix 2.x but no more working with HTTP Felix 3.1.x because the method is called after the session is invalidated, so any attempt to get information from the session in this method will throw an exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-25 15:07:33.15,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 25 17:44:00 UTC 2015,,,,,,0|i2oxgn:,9223372036854775807,,,,,,,,"25/Nov/15 15:07;githubbot;GitHub user xfournet opened a pull request:

    https://github.com/apache/felix/pull/43

    FELIX-5117 call SSOHttpSessionListener#sessionDestroyed before the se…

    …ssion is invalidated

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/felix FELIX-5117

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/43.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #43
    
----
commit 40f847ee2e2149174cec391b098be56988a9a226
Author: Xavier Fournet <xavier.fournet@gmail.com>
Date:   2015-11-25T14:35:31Z

    FELIX-5117 call SSOHttpSessionListener#sessionDestroyed before the session is invalidated

----
","25/Nov/15 15:17;cziegeler;[~xfournet] Good catch, thanks for the patch! It's applied in rev 1716434","25/Nov/15 17:44;githubbot;Github user xfournet closed the pull request at:

    https://github.com/apache/felix/pull/43
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dump SCR component definitions broken,FELIX-5116,12915599,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,sseifert@pro-vision.de,sseifert@pro-vision.de,23/Nov/15 21:48,07/Apr/17 21:13,14/Mar/19 02:48,08/Jul/16 11:19,maven-bundle-plugin-3.0.0,,,,,,maven-bundle-plugin-3.2.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"the feature to optionally dump SCR component definitions generated by bnd to the output classes folder introduced in FELIX-3324 is broken ins maven-bundle-plugin 3.0.0 and 3.0.1 - the associated code is never called when generating the bundle or manifest.

the attached patch fixes this and enabled the behavior for both manifest and bundle goals.

this feature is imporant for unit test support in IDEs, e.g. for https://sling.apache.org/documentation/development/osgi-mock.html",,,,,,,,,,,,,,FELIX-3324,,,,,,23/Nov/15 21:48;sseifert@pro-vision.de;FELIX-5116.patch;https://issues.apache.org/jira/secure/attachment/12773914/FELIX-5116.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-11-24 07:45:14.942,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Apr 07 21:13:30 UTC 2017,,,,,,0|i2ou07:,9223372036854775807,,,,,,,,"24/Nov/15 07:45;cziegeler;[~sseifert@pro-vision.de] Do I understand the issue correctly, that the SCR annotations are processed and the definitions are in the final jar, but they do not appear within the output directory?","24/Nov/15 08:47;sseifert@pro-vision.de;yes, correctly.

they are packed directly in the JAR file by bnd, but do not appear in the target/classes directory as it was/is the case with felix SCR annotations and the maven SCR plugin (and even the SCR BND plugin).

this code (which was alread developed in FELIX-3324, but broken) unpacks those XML files again and stores them in the target/classes directory (if enabled via maven configuration parameters on goals bundle or manifest).","30/Dec/15 12:55;cziegeler;Thanks for your patch Stefan, it's applied","26/Jun/16 21:17;cvgaviao;I'm trying this with the 3.1.0-Snapshot but it is not working with the manifest goal.

The variable bpHeader is always coming as null in my tests:
{code}
    String bpHeader = analyzer.getProperty(Analyzer.SERVICE_COMPONENT);
    Parameters map = Processor.parseHeader(bpHeader, null);
    for (String root : map.keySet())
{code}

could someone explain me the reason for try to get this property from analyzer instead to directly get the directory map from the jar (dot) that was built by bnd? the same way it is doing for metatypes?
{code}
         // export metatype files from OSGI-INF/metatype
        Map<String,Resource> metatypeDir = jar.getDirectories().get(MetaTypeService.METATYPE_DOCUMENTS_LOCATION);
{code}
--- edit
looking in the bndlib, I found two places where components xml are created. aQute.bnd.make.component.ServiceComponent.ComponentMaker.createComponentResource(Map<String, Map<String, String>>, String, Map<String, String>)(line245), 
{code}
			// We have a definition, so make an XML resources
			Resource resource = createComponentResource(name, impl, info);
			String pathSegment = analyzer.validResourcePath(name, ""Invalid component name"");
			analyzer.getJar().putResource(""OSGI-INF/"" + pathSegment + "".xml"", resource);
			components.put(""OSGI-INF/"" + pathSegment + "".xml"", EMPTY);
{code}
and aQute.bnd.component.DSAnnotations.analyzeJar(Analyzer) Line(83)
{code}
String name = ""OSGI-INF/""
								+ analyzer.validResourcePath(definition.name, ""Invalid component name"") + "".xml"";
						names.add(name);
						analyzer.getJar().putResource(name, new TagResource(definition.getTag()));
{code}
Both the xml is being added in the jar directly in the directory ""OSGI-INF"".

So, I think that this code was used in order to deal with old aQute.bnd.make.component.ServiceComponent, that is now deprecated:
{code}
			analyzer.warning(
					""%s annotation used in class %s. Bnd DS annotations are deprecated as of Bnd 3.2 and support will be removed in Bnd 4.0. Please change to use OSGi DS annotations."",
					""aQute.bnd.annotation.component.Component"", c);

{code}","27/Jun/16 12:36;cvgaviao;[~cziegeler], can you reopen this issue, please ? As it was not released yet it is not necessary to create a new one, right?","27/Jun/16 14:48;githubbot;GitHub user cvgaviao opened a pull request:

    https://github.com/apache/felix/pull/71

    FELIX-5116 - simplify component xmls export

    This will also ensure that those xmls are being exported, with ""exportScr"" parameter, even inside
    eclipse workspace with m2e.
    In the older code seems that the number of recursions are so big that m2e
    refused to work with it.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cvgaviao/felix trunk

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/71.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #71
    
----
commit 2019658020a0979d41a3a1c80b05defdd66cd98b
Author: Cristiano Gavião <cvgaviao@gmail.com>
Date:   2016-06-27T14:42:34Z

    FELIX-5116 - simplify component xmls export
    
    This will also ensure that those xmls are being exported even inside
    eclipse workspace with m2e.
    In the older code seems that the number of recursion is so big that m2e
    refused to work with it.

----
","08/Jul/16 11:18;sseifert@pro-vision.de;[~cvgaviao] its still working fine on my side, so my issue from this ticket is solved. 
i checked with one of my project - the bpHeader is not null in my case.

i think it's best for your to create a separate issue - and perhaps you can provide an example project as well to reproduce your problem.","08/Jul/16 11:27;cvgaviao;[~sseifert@pro-vision.de], two questions. Are you using manifest goal ? are you using eclipse with m2e ?
If yes to second question. it is generating the scr files inside eclipse when you 'update' the project?","08/Jul/16 11:31;sseifert@pro-vision.de;yes and yes

basically this is the parent pom i've used to test my projects:
https://github.com/wcm-io/wcm-io-tooling/blob/develop/maven/aem-global-parent/pom.xml
i've configured an explicit call to the manifest goal in the pom to have them ready during the osgi-mock based unit tests, and that's before the bundle goal is executed. it works fine for me on the command line and within eclipse with m2e.","08/Jul/16 11:45;cvgaviao;
Well, in this case I must do some more digging even if I have passed lot of hours last week doing this... :(

Ok, seems that the differences from what I have are that I'm not using <scrLocation> and not using <_plugin>. Mine is set to default directory that is inside OSGI-INF directory.

Interesting... Could you tell me how do you do in order to copy the scr files to the OSGI-INF directory inside the jar ?","08/Jul/16 12:00;sseifert@pro-vision.de;the plugin is only there to include SCRDescriptorBndPlugin - so i cannot only use the ""new"" OSGi SCR annotations, but also the ""old"" ones from the felix project. you need it only if you use the old ones from the package {{org.apache.felix.scr.annotations}}.

the explicit configuration of scrLocation is only required for the manifest goal, any only for the unit tests. if you do not configure it you will still get the correct files in OSGI-INF in your JAR file - bndlib takes care of this. but only in the JAR file and not in the filesystem in the classes path - and thus not reachable for the unit tests. the explicit manifest goal generated them during processing the classses and the scrLocation property tells it where to put them so the unit tests can find them. it took me some time as well to get this right.","08/Jul/16 12:16;cvgaviao;well, my problem was that, the scr files was not being generated to classpath directory and I need them to run pax-exam integration tests and also to run the Equinox launcher inside eclipse.

And in my case the scr files are beings added to Jar ONLY when running outside eclipse.

May I ask you to give a try with my patch without your different source location, please ? Just to ensure that those files were created in the classpath properly...","08/Jul/16 16:29;sseifert@pro-vision.de;bq. May I ask you to give a try with my patch without your different source location, please ? Just to ensure that those files were created in the classpath properly...
yes, it works with your patch and without the {{scrLocation}} property as well with my project.
","08/Jul/16 17:48;cvgaviao;[~sseifert@pro-vision.de], many thanks to take a time and have tested it with your projects.

",14/Jul/16 05:47;cziegeler;[~cvgaviao] I've appled your additional patch. thanks,14/Jul/16 13:53;cvgaviao;Thanks Carsten !,"07/Apr/17 21:13;githubbot;Github user cvgaviao closed the pull request at:

    https://github.com/apache/felix/pull/71
",,,,,,,,,,,,,,,,,,,,,,,,,
HTTP resources content type are not set when using whiteboard pattern,FELIX-5110,12914856,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,xfournet,xfournet,20/Nov/15 14:03,29/Nov/15 14:51,14/Mar/19 02:48,20/Nov/15 16:20,http.base-3.0.0,http.base-3.0.2,http.bridge-3.0.0,http.bridge-3.0.2,http.jetty-3.1.0,http.jetty-3.1.2,http.base-3.0.4,http.bridge-3.0.4,http.jetty-3.1.4,,,,,HTTP Service,,,,,,1,,,,,,"As written in the javadoc of org.osgi.service.http.context.ServletContextHelper#getMimeType, when it return null ""the Http Whiteboard implementation should determine the MIME type itself""

When registering resource through the HTTP service, a similar default mecanism is working well.
But the whiteboard pattern, no content type is determined at all. This cause problem (eg serving .css with no content type is not accepted by IE)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-20 14:21:48.233,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 23 15:08:49 UTC 2015,,,,,,0|i2opfb:,9223372036854775807,,,,,,,,"20/Nov/15 14:21;githubbot;GitHub user xfournet opened a pull request:

    https://github.com/apache/felix/pull/41

    FELIX-5110 implement default mime type handling in PerBundleServletCo…

    …ntextImpl#getMimeType with the same way than ServletContextImpl#getMimeType

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/felix FELIX-5110

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/41.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #41
    
----
commit e186ce83913b77b5d09a57a4e064c156aad81e74
Author: Xavier Fournet <xavier.fournet@gmail.com>
Date:   2015-11-20T14:20:22Z

    FELIX-5110 implement default mime type handling in PerBundleServletContextImpl#getMimeType with the same way than ServletContextImpl#getMimeType

----
",20/Nov/15 16:20;cziegeler;Thanks for your patch [~xfournet]. It's applied in rev 1715385,"23/Nov/15 15:08;githubbot;Github user xfournet closed the pull request at:

    https://github.com/apache/felix/pull/41
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong path matching for http whiteboard service,FELIX-5109,12914425,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,19/Nov/15 10:52,29/Nov/15 14:51,14/Mar/19 02:48,19/Nov/15 17:02,http.base-3.0.0,http.base-3.0.2,http.bridge-3.0.0,http.bridge-3.0.2,http.jetty-3.1.0,http.jetty-3.1.2,http.base-3.0.4,http.bridge-3.0.4,http.jetty-3.1.4,,,,,HTTP Service,,,,,,0,,,,,,"It seems we have some bugs in the path matching which result from different handling between the http service and the servlet spec. 
For the http service, an alias like ""/foo"" matches ""/foo"" and ""/foo/*"" - while for the servlet spec ""/foo"" only matches ""/foo"" - exact match.
Right now, in both cases ""/foo/*"" matches.
For the servlet spec a pattern like ""/foo/*"" matches ""/foo/something"" but also ""/foo"". Right now we don't handle the second case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-19 11:18:58.932,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 19 17:02:30 UTC 2015,,,,,,0|i2oms7:,9223372036854775807,,,,,,,,"19/Nov/15 11:18;walkerr;Just want to clarify this one - as down the year's it been a bit of an awkward area, not helped by the relevant part of the HttpService spec being a little tricky to decipher.

Are we saying this is a an actual bug i.e. the Felix Http bundle is not functioning according to the OSGi HttpService.

Or are we saying this is actually an underlying discrepancy between the Servlet spec and the OSGi HttpService spec.

If it's the latter case then, IMO, Felix needs to follow the OSGi spec - even if it is at odds somewhat with the Servlet spec.

I believe (and stand to be corrected) that the OSGi HttpService alias is consider a root path i.e. if I mount a service at /foo then I expect to see requests for all sub-paths of /foo as well. I'm pretty sure that's how our application is coded, and we've tried to only use the HttpService according to the standard vanilla OSGi form.

Happy to be corrected if I've misunderstood this.
","19/Nov/15 11:29;walkerr;Just downloaded the latest OSGi v6 compendium spec in case this area changed.

According to table 102.1 on p50 the described behavior, whilst apparently at odds with servlet matching, is correct for an OSGi HttpService.

/foo should match /foo/something (or /fudd if you prefer the examples used in the spec).

There is no concept of standard /foo/* matching within OSGi as far as I can see. Maybe I missed it, but it's also unnecessary because /foo is considered a root path.

There's no issue with us having non-compliant extension services or bundles I guess, but requiring /foo/* would actually mean we are not conforming to the published OSGi HttpService. IMO that would not only be wrong, but would break existing code.

Unless I'm totally misunderstanding this report!","19/Nov/15 11:47;walkerr;My bad - I think I missed the part that this is really in relation to the Http Whiteboard Service not the HttpService per se.

I'm not that familiar with whiteboard services, but they do indeed seem to use /* matching so I'll defer to those who understand and use this spec themselves.

As above, I don't believe we should be adding /* matching (or requirements) to our basic HttpService though unless the spec calls for it.

","19/Nov/15 13:26;cziegeler;Right, sorry for my brief description - the http service impl is fine and works as expected.
The two above errors are in the whiteboard part as they should act exactly as the servlet spec but the impl does not atm",19/Nov/15 13:32;walkerr;Also something of a misunderstanding on my part!,19/Nov/15 14:46;cziegeler;And I used a wrong title :),"19/Nov/15 17:02;cziegeler;Fixed the handling in rev 1715214.

For http whiteboard something like /foo is now just an exact match, and /foo/* matches - as defined in the servlet spec - /foo as well. This also includes that /* now matches all requests",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in org.apache.felix.eventadmin.impl.adapter.LogEventAdapter if log msg is empty,FELIX-5107,12914049,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,tmielke,tmielke,18/Nov/15 09:11,25/May/16 15:09,14/Mar/19 02:48,18/Nov/15 12:34,eventadmin-1.4.4,,,,,,eventadmin-1.4.6,,,,,,,Event Admin,,,,,,0,event,karaf,,,,"If a log event contains an empty message, it raises an NPE in  
https://github.com/apache/felix/blob/trunk/eventadmin/impl/src/main/java/org/apache/felix/eventadmin/impl/adapter/LogEventAdapter.java#L180

As a result the Karaf container will raise
{noformat}
'org.apache.felix.eventadmin.impl.adapter.LogEventAdapter$1@XXXXXX' is removed as a LogListener, since it threw an exception.
{noformat}

to stderr and remove this event admin instance.

An empty log message may sound like a stupid thing to do but may happen as a result of e.g. running a Camel route like this one deployed in a Karaf container:

{code:java}
public class LogExceptionRoute extends RouteBuilder {
	
    @Override
	public void configure() {
		onException(Throwable.class)
		    .handled(true)
		    .log(LoggingLevel.ERROR, ""${exception.message}"");
		from(""jetty:http://0.0.0.0:8005"")
		.throwException(new Exception()); 
	}	
}
{code}

The route raises an empty exception (i.e. no detail message) which then get logged in the onException() policy, causing the error above.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-18 09:18:09.483,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Wed Nov 18 12:34:26 UTC 2015,,,,,,0|i2okgn:,9223372036854775807,,,,,,,,"18/Nov/15 09:18;githubbot;GitHub user tmielke opened a pull request:

    https://github.com/apache/felix/pull/40

    FELIX-5107: NPE in org.apache.felix.eventadmin.impl.adapter.LogEventA…

    …dapter if log msg is empty

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tmielke/felix EmptyLogMessage

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/40.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #40
    
----
commit 1a88fe0fb35308e083c37456fca9c9d406b52530
Author: Torsten Mielke <tmielke@redhat.com>
Date:   2015-11-18T09:13:14Z

    FELIX-5107: NPE in org.apache.felix.eventadmin.impl.adapter.LogEventAdapter if log msg is empty

----
","18/Nov/15 12:33;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/40
","18/Nov/15 12:34;bosschaert;Thanks for your patch, [~tmielke]! I've applied it in http://svn.apache.org/viewvc?view=revision&revision=1714987",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JSESSIONID Cookie in HTTPS Session Without 'Secure' and ‘HttpOnly’ Attributes,FELIX-5099,12912746,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,asanso,asanso,13/Nov/15 08:00,29/Nov/15 14:51,14/Mar/19 02:48,19/Nov/15 14:02,,,,,,,http.jetty-3.1.4,,,,,,,HTTP Service,,,,,,0,,,,,,"The session Cookie JSESSIONID has not the attributes HttpOnly and Secure; 

There is already a pull request to address the HttpOnly case in https://github.com/apache/felix/pull/12/files

Same approach can be used to address the secure flag",,,,,,,,,,,,,,,,,,,,13/Nov/15 08:13;asanso;FELIX-5099-patch.txt;https://issues.apache.org/jira/secure/attachment/12772146/FELIX-5099-patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-11-19 14:02:47.452,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 19 14:02:47 UTC 2015,,,,,,0|i2ocgf:,9223372036854775807,,,,,,,,13/Nov/15 08:13;asanso;attaching proposed patch,19/Nov/15 14:02;bosschaert;Thanks for the patch [~asanso]! I've applied it in http://svn.apache.org/viewvc?view=revision&revision=1715183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpServletRequest.getRequestURI is broken for escaped char in URL since 3.1.0,FELIX-5093,12909754,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,xfournet,xfournet,02/Nov/15 19:03,11/Dec/15 15:17,14/Mar/19 02:48,26/Nov/15 11:46,http.base-3.0.0,http.base-3.0.2,http.bridge-3.0.0,http.bridge-3.0.2,http.jetty-3.1.0,http.jetty-3.1.2,http.base-3.0.4,http.bridge-3.0.4,http.jetty-3.1.4,,,,,HTTP Service,,,,,,1,,,,,,"The HttpServletRequest.getRequestURI must return the URI without processing % escaping. Since version 3.1.0 this processing is done, so the returned value is incorrect. For exemple this can lead to error in Apache Shiro when it try to unescape % of an URI.

See the attached jar for a bundle that can be used to reproduce the problem:
* load the bundle
* with a browser go on http://localhost:8080/requesturibug/test%2Ftest%25test

With HTTP Jetty < 3.1.0 it prints:
{noformat}
Request URI: /requesturibug/test%2Ftest%25test (org.apache.felix.http.base.internal.handler.ServletHandlerRequest)
Wrapped URI: /requesturibug/test%2Ftest%25test (org.apache.felix.http.base.internal.dispatch.FilterPipeline$FilterRequestWrapper)
Wrapped URI: /requesturibug/test%2Ftest%25test (org.apache.felix.http.base.internal.DispatcherServlet$AttributeEventRequest)
Wrapped URI: /requesturibug/test%2Ftest%25test (org.eclipse.jetty.server.Request)
{noformat}

=> request URI is ok

With HTTP Jetty 3.1.0 or 3.1.2 it prints:
{noformat}
Request URI: /requesturibug/test/test%test (org.apache.felix.http.base.internal.dispatch.ServletRequestWrapper)
Wrapped URI: /requesturibug/test%2Ftest%25test (org.eclipse.jetty.server.Request)
{noformat}

=> request URI is wrong while the underlying request URI returned by Jetty itself is correct.
When this request come the Shiro filter it will issue an exception because it will try to unescape ""%te"" which is not valid since ""te"" is not a number
",,,,,,,,,,,,,,FELIX-4925,,,,,,02/Nov/15 19:07;xfournet;requesturibug-1.0.0-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12770148/requesturibug-1.0.0-SNAPSHOT.jar,02/Nov/15 19:08;xfournet;requesturibug-sources.zip;https://issues.apache.org/jira/secure/attachment/12770149/requesturibug-sources.zip,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-11-06 21:50:19.873,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 11 15:17:35 UTC 2015,,,,,,0|i2nu6n:,9223372036854775807,,,,,,,,02/Nov/15 23:36;xfournet;The regression has been introduced by FELIX-4925,"06/Nov/15 21:50;githubbot;GitHub user xfournet opened a pull request:

    https://github.com/apache/felix/pull/39

    FELIX-5093 remove the override of getRequestURI

    Quite simple (maybe naive ?) fix. Let me know if this approach is valid or not.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/felix FELIX-5093

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/39.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #39
    
----
commit e93efa3e471f380f8043ee1dea29c53bfc7393c7
Author: Xavier Fournet <xavier.fournet@gmail.com>
Date:   2015-11-06T21:47:00Z

    FELIX-5093 remove the override of getRequestURI

----
","19/Nov/15 22:38;cziegeler;[~xfournet] Thanks for your patch. Unfortunately it breaks some it tests, I haven't looked in detail why they fail but it seems there is a problem when requests are forwarded or included (four tests are failing in RequestDispatchTest)","19/Nov/15 22:54;xfournet;Ok i see, i missed the execution of felix.http.itests. I will look at the result of thoses tests.","26/Nov/15 11:46;cziegeler;I found a different solution which I committed in rev 1716611.
The attached bundle shows now the same output as in versions < 3.1.0 and the integration tests still pass","11/Dec/15 15:17;githubbot;Github user xfournet closed the pull request at:

    https://github.com/apache/felix/pull/39
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Coordinator.begin can return null,FELIX-5086,12907307,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,eduard.vodicka@eforce21.com,eduard.vodicka@eforce21.com,23/Oct/15 07:20,09/Nov/15 12:54,14/Mar/19 02:48,09/Nov/15 09:05,coordinator-1.0.0,,,,,,coordinator-1.0.2,,,,,,,Coordinator Service,,,,,,0,,,,,,"Calls to CoordinatorImpl.begin (and CorrdinatorImpl.create) can return null, if the Garbage Collector runs between the creation of the Coordination and the return of the CoordinationHolder reference.

During that time, only the WeakReference to the Holder exists, therefor it is removed and cannot be returned to the caller.

This can easily happen in high load scenarios with many calls to CoordinatorImpl.begin. The caller has no chance of ever receiving a Coordination reference.

I created a simple test do demonstrate the problem.",,,,,,,,,,,,,,FELIX-4976,,,,,,23/Oct/15 07:24;eduard.vodicka@eforce21.com;Fix_null_return.patch;https://issues.apache.org/jira/secure/attachment/12768236/Fix_null_return.patch,23/Oct/15 07:22;eduard.vodicka@eforce21.com;test_to_demonstrate_GC_problems.patch;https://issues.apache.org/jira/secure/attachment/12768234/test_to_demonstrate_GC_problems.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-11-04 06:45:38.702,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 05 16:50:52 UTC 2015,,,,,,0|i2nf3b:,9223372036854775807,,,,,,,,23/Oct/15 07:24;eduard.vodicka@eforce21.com;A workaround that keeps a strong reference to the CoordinationHolder as long as it is not passed to the client solves the problem. A possible solution is demonstrated in the attached patch.,04/Nov/15 06:45;cziegeler;[~eduard.vodicka@eforce21.com] Thanks for reporting this and providing a patch. I've committed a slightly different fix in rev 1712478. Could you please verify if it fixes your problem?,05/Nov/15 16:50;eduard.vodicka@eforce21.com;I could not reproduce the problem in my tests anymore. Thank you.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] gogo info command left out Implementation-Class,FELIX-5080,12905377,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,16/Oct/15 00:04,08/Jul/16 08:05,14/Mar/19 02:48,16/Oct/15 00:11,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,Looks like somehow I forgot to include implementation class from the DTO.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 16 00:11:08 UTC 2015,,,,,,0|i2n3cf:,9223372036854775807,,,,,,,,16/Oct/15 00:11;djencks;r1708905,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Not enough configuration listeners to deal with regions,FELIX-5079,12905339,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,15/Oct/15 21:27,08/Jul/16 08:05,14/Mar/19 02:48,03/Dec/15 22:24,scr-2.0.2,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We implemented the global extender flag that lets DS deal with components in all regions (or in more spec terms all bundles everywhere in the framework regardless of visibility to the DS bundle)  but there is only one ConfigurationListener registered with the DS bundle context.  Obviously if there are different CA's in different regions this won't work.

Another twist is that (apparently, according to Tom Watson) just because a bundle A can see a particular CA instance B does not mean that B can see a ConfigurationListener registered by A.

This might work:
1. When a bundle to be extended arrives, and it has configurable components in it, we register a ServiceTracker for config admin with that bundle.
2. When the service tracker detects a CA, we check that it is a CA compatible with the DS CA class, and whether we already know about it.
3. if it's our kind of CA and we don't know about it, then we register a ConfigurationListener with the CA's bundle.
4. When the last service tracker knowing about a particular CA indicates the CA is leaving we unregister the ConfigurationListener (or when the last bundle using that CA stops)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 03 22:24:04 UTC 2015,,,,,,0|i2n33z:,9223372036854775807,,,,,,,,03/Dec/15 22:24;djencks;Initial implementation in r1717854.  This may not be the most elegant solution but appears to work in practice.  I don't know how to go about writing an integration test for this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Framework hooks not re-sorted on service ranking update,FELIX-5075,12904226,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,12/Oct/15 16:16,16/Oct/15 16:44,14/Mar/19 02:48,12/Oct/15 16:28,framework-5.4.0,,,,,,framework-5.4.0,,,,,,,Framework,,,,,,0,,,,,,"When framework hooks (or URL handlers) have their properties changed to reflect a new service ranking order, this order is not reflected when these hooks are used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 12 16:28:34 UTC 2015,,,,,,0|i2mw93:,9223372036854775807,,,,,,,,12/Oct/15 16:28;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1708156,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using org.apache.felix.scr.bnd together with maven-bundle-plugin leads to using the wrong bnd version,FELIX-5074,12903840,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,kwin,kwin,09/Oct/15 17:39,12/Jul/16 04:54,14/Mar/19 02:48,25/Oct/15 22:34,scr bnd plugin 1.4.0,,,,,,scr bnd plugin 1.5.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"If I have a POM with a plugin configuration like this
{code}
<plugin>
  <groupId>org.apache.felix</groupId>
  <artifactId>maven-bundle-plugin</artifactId>
  <version>3.0.0</version>
  <extensions>true</extensions>
  <configuration>
    <instructions>
    <!-- support parsing of felix annotations through the felix.scr.bnd plugin -->
    <_plugin>org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin;destdir=target/classes</_plugin>
    </instructions>
  </configuration>
  <dependencies>
  <!-- https://github.com/apache/felix/tree/trunk/tools/org.apache.felix.scr.bnd -->
   <dependency>
     <groupId>org.apache.felix</groupId>
     <artifactId>org.apache.felix.scr.bnd</artifactId>
     <version>1.4.0</version>
   </dependency>
 </dependencies>
 </plugin>
{code}

Unfortunately {{org.apache.felix.scr.bnd}} depends on {{biz.aQute.bnd:bndlib:jar:2.1.0}}. Therefore the classpath of maven-bundle-plugin looks like this:
{code}
[DEBUG] Populating class realm plugin>org.apache.felix:maven-bundle-plugin:3.0.0
[DEBUG]   Included: org.apache.felix:maven-bundle-plugin:jar:3.0.0
[DEBUG]   Included: org.apache.felix:org.apache.felix.scr.bnd:jar:1.4.0
[DEBUG]   Included: biz.aQute.bnd:bndlib:jar:2.1.0
[DEBUG]   Included: org.osgi:org.osgi.core:jar:4.3.1
[DEBUG]   Included: biz.aQute.bnd:biz.aQute.bndlib:jar:3.0.0
[DEBUG]   Included: org.apache.felix:org.apache.felix.bundlerepository:jar:1.6.6
[DEBUG]   Included: org.easymock:easymock:jar:2.5.2
[DEBUG]   Included: org.apache.felix:org.apache.felix.utils:jar:1.6.0
[DEBUG]   Included: org.osgi:org.osgi.compendium:jar:4.2.0
[DEBUG]   Included: org.slf4j:slf4j-jdk14:jar:1.5.6
[DEBUG]   Included: org.slf4j:slf4j-api:jar:1.5.6
[DEBUG]   Included: org.slf4j:jcl-over-slf4j:jar:1.5.6
[DEBUG]   Included: org.apache.maven.reporting:maven-reporting-api:jar:2.2.0
[DEBUG]   Included: org.apache.maven.doxia:doxia-logging-api:jar:1.1
[DEBUG]   Included: junit:junit:jar:4.11
[DEBUG]   Included: org.hamcrest:hamcrest-core:jar:1.3
[DEBUG]   Included: commons-cli:commons-cli:jar:1.2
[DEBUG]   Included: org.codehaus.plexus:plexus-interactivity-api:jar:1.0-alpha-4
[DEBUG]   Included: backport-util-concurrent:backport-util-concurrent:jar:3.1
[DEBUG]   Included: org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3
[DEBUG]   Included: org.sonatype.plexus:plexus-cipher:jar:1.4
[DEBUG]   Included: org.apache.maven:maven-archiver:jar:2.5
[DEBUG]   Included: org.codehaus.plexus:plexus-archiver:jar:2.1
[DEBUG]   Included: org.codehaus.plexus:plexus-io:jar:2.0.2
[DEBUG]   Included: org.codehaus.plexus:plexus-interpolation:jar:1.15
[DEBUG]   Included: org.apache.maven.shared:maven-dependency-tree:jar:2.1
[DEBUG]   Included: org.codehaus.plexus:plexus-component-annotations:jar:1.5.5
[DEBUG]   Included: org.eclipse.aether:aether-util:jar:0.9.0.M2
[DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:3.0.10
[DEBUG]   Included: org.sonatype.plexus:plexus-build-api:jar:0.0.7
[DEBUG]   Included: org.apache.maven.doxia:doxia-sink-api:jar:1.0
[DEBUG]   Included: org.apache.maven.doxia:doxia-site-renderer:jar:1.0
[DEBUG]   Included: org.apache.maven.doxia:doxia-core:jar:1.0
[DEBUG]   Included: org.codehaus.plexus:plexus-i18n:jar:1.0-beta-7
[DEBUG]   Included: org.codehaus.plexus:plexus-velocity:jar:1.1.7
[DEBUG]   Included: org.apache.velocity:velocity:jar:1.5
[DEBUG]   Included: commons-lang:commons-lang:jar:2.1
[DEBUG]   Included: oro:oro:jar:2.0.8
[DEBUG]   Included: org.apache.maven.doxia:doxia-decoration-model:jar:1.0
[DEBUG]   Included: commons-collections:commons-collections:jar:3.2
[DEBUG]   Included: org.apache.maven.doxia:doxia-module-apt:jar:1.0
[DEBUG]   Included: org.apache.maven.doxia:doxia-module-fml:jar:1.0
[DEBUG]   Included: org.apache.maven.doxia:doxia-module-xdoc:jar:1.0
[DEBUG]   Included: org.apache.maven.doxia:doxia-module-xhtml:jar:1.0
[DEBUG]   Excluded: org.apache.maven:maven-core:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-settings:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-plugin-parameter-documenter:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-profile:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-model:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-artifact:jar:2.2.0
[DEBUG]   Excluded: org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1
[DEBUG]   Excluded: org.apache.maven:maven-repository-metadata:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-error-diagnostics:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-project:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-plugin-registry:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-plugin-api:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-plugin-descriptor:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-artifact-manager:jar:2.2.0
[DEBUG]   Excluded: org.apache.maven:maven-monitor:jar:2.2.0
[DEBUG]   Excluded: classworlds:classworlds:jar:1.1
{code}

So the classpath contains both bnd 2.1 and bnd 3.0.
IMHO the {{felix.scr.bnd}} should not transitively influence the classpath. I guess marking the dependency to bnd as provided in its pom.xml should do the trick here!",,,,,,,,,,,,,,,,,,,,09/Oct/15 17:42;kwin;pom.xml;https://issues.apache.org/jira/secure/attachment/12765864/pom.xml,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-11 13:17:20.532,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 25 22:34:07 UTC 2015,,,,,,0|i2mtun:,9223372036854775807,,,,,,,,09/Oct/15 17:42;kwin;Attached is a demo project. Just execute with {{mvn package -X}} to observe the wrong classpath with two times bnd in it.,"09/Oct/15 18:29;kwin;The fix from FELIX-4567 is not working, as this is not a problem with embedding bnd in the resulting JAR. It rather is a problem with the pom.xml which defines bnd as transitive dependency with scope compile!","11/Oct/15 11:58;kwin;After excluding the bnd dependency via
{code}
<dependency>
  <groupId>org.apache.felix</groupId>
  <artifactId>org.apache.felix.scr.bnd</artifactId>
  <version>1.4.0</version>
  <exclusions>
    <exclusion>
      <groupId>biz.aQute.bnd</groupId>
      <artifactId>bndlib</artifactId>
    </exclusion>
  </exclusions>
</dependency>
{code}

I get the the following exception
{code}
[ERROR] Failed to execute goal org.apache.felix:maven-bundle-plugin:3.0.0:bundle (default-bundle) on project oneweb-showcase-aem-components-core: Execution default-bundle of goal org.apache.felix:maven-bundle-plugin:3.0.0:bundle failed: An API incompatibility was encountered while executing org.apache.felix:maven-bundle-plugin:3.0.0:bundle: java.lang.NoSuchMethodError: org.osgi.service.component.annotations.Reference.bind()Ljava/lang/String;
[ERROR] -----------------------------------------------------
[ERROR] realm =    extension>org.apache.felix:maven-bundle-plugin:3.0.0
[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy
[ERROR] urls[0] = file:/Users/konradwindszus/.m2/repository/org/apache/felix/maven-bundle-plugin/3.0.0/maven-bundle-plugin-3.0.0.jar
[ERROR] urls[1] = file:/Users/konradwindszus/.m2/repository/org/apache/felix/org.apache.felix.scr.bnd/1.4.0/org.apache.felix.scr.bnd-1.4.0.jar
[ERROR] urls[2] = file:/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.core/4.3.1/org.osgi.core-4.3.1.jar
[ERROR] urls[3] = file:/Users/konradwindszus/.m2/repository/biz/aQute/bnd/biz.aQute.bndlib/3.0.0/biz.aQute.bndlib-3.0.0.jar
[ERROR] urls[4] = file:/Users/konradwindszus/.m2/repository/org/apache/felix/org.apache.felix.bundlerepository/1.6.6/org.apache.felix.bundlerepository-1.6.6.jar
[ERROR] urls[5] = file:/Users/konradwindszus/.m2/repository/org/easymock/easymock/2.5.2/easymock-2.5.2.jar
[ERROR] urls[6] = file:/Users/konradwindszus/.m2/repository/org/apache/felix/org.apache.felix.utils/1.6.0/org.apache.felix.utils-1.6.0.jar
[ERROR] urls[7] = file:/Users/konradwindszus/.m2/repository/org/osgi/org.osgi.compendium/4.2.0/org.osgi.compendium-4.2.0.jar
[ERROR] urls[8] = file:/Users/konradwindszus/.m2/repository/org/slf4j/slf4j-jdk14/1.5.6/slf4j-jdk14-1.5.6.jar
[ERROR] urls[9] = file:/Users/konradwindszus/.m2/repository/org/slf4j/jcl-over-slf4j/1.5.6/jcl-over-slf4j-1.5.6.jar
[ERROR] urls[10] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/reporting/maven-reporting-api/2.2.0/maven-reporting-api-2.2.0.jar
[ERROR] urls[11] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-logging-api/1.1/doxia-logging-api-1.1.jar
[ERROR] urls[12] = file:/Users/konradwindszus/.m2/repository/junit/junit/4.11/junit-4.11.jar
[ERROR] urls[13] = file:/Users/konradwindszus/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
[ERROR] urls[14] = file:/Users/konradwindszus/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar
[ERROR] urls[15] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar
[ERROR] urls[16] = file:/Users/konradwindszus/.m2/repository/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar
[ERROR] urls[17] = file:/Users/konradwindszus/.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar
[ERROR] urls[18] = file:/Users/konradwindszus/.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar
[ERROR] urls[19] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.jar
[ERROR] urls[20] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.jar
[ERROR] urls[21] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.jar
[ERROR] urls[22] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.15/plexus-interpolation-1.15.jar
[ERROR] urls[23] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.jar
[ERROR] urls[24] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar
[ERROR] urls[25] = file:/Users/konradwindszus/.m2/repository/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.jar
[ERROR] urls[26] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.10/plexus-utils-3.0.10.jar
[ERROR] urls[27] = file:/Users/konradwindszus/.m2/repository/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar
[ERROR] urls[28] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar
[ERROR] urls[29] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.jar
[ERROR] urls[30] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.jar
[ERROR] urls[31] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.jar
[ERROR] urls[32] = file:/Users/konradwindszus/.m2/repository/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.jar
[ERROR] urls[33] = file:/Users/konradwindszus/.m2/repository/org/apache/velocity/velocity/1.5/velocity-1.5.jar
[ERROR] urls[34] = file:/Users/konradwindszus/.m2/repository/commons-lang/commons-lang/2.1/commons-lang-2.1.jar
[ERROR] urls[35] = file:/Users/konradwindszus/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar
[ERROR] urls[36] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.jar
[ERROR] urls[37] = file:/Users/konradwindszus/.m2/repository/commons-collections/commons-collections/3.2/commons-collections-3.2.jar
[ERROR] urls[38] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.jar
[ERROR] urls[39] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.jar
[ERROR] urls[40] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.jar
[ERROR] urls[41] = file:/Users/konradwindszus/.m2/repository/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.jar
[ERROR] Number of foreign imports: 1
[ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]]
{code}

The according stack trace to the missing bind method is here 
{code}
Caused by: java.lang.NoSuchMethodError: org.osgi.service.component.annotations.Reference.bind()Ljava/lang/String;
	at aQute.bnd.component.AnnotationReader.doReference(AnnotationReader.java:532)
	at aQute.bnd.component.AnnotationReader.annotation(AnnotationReader.java:227)
	at aQute.bnd.osgi.Clazz.doAnnotations(Clazz.java:1485)
	at aQute.bnd.osgi.Clazz.doAttribute(Clazz.java:953)
	at aQute.bnd.osgi.Clazz.doAttributes(Clazz.java:930)
	at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:709)
	at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:512)
	at aQute.bnd.osgi.Clazz.parseClassFileWithCollector(Clazz.java:501)
	at aQute.bnd.component.AnnotationReader.getDef(AnnotationReader.java:131)
	at aQute.bnd.component.AnnotationReader.getDefinition(AnnotationReader.java:127)
	at aQute.bnd.component.DSAnnotations.analyzeJar(DSAnnotations.java:79)
	at aQute.bnd.osgi.Analyzer.doPlugins(Analyzer.java:658)
	at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:213)
	at aQute.bnd.osgi.Builder.analyze(Builder.java:379)
	at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:688)
	at aQute.bnd.osgi.Builder.build(Builder.java:104)
	at org.apache.felix.bundleplugin.BundlePlugin.buildOSGiBundle(BundlePlugin.java:651)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:371)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:288)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:279)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)
	... 20 more
{code}
This is due to the fact that {{org.osgi.compendium}} in version 4.3.0 is embedded in the {{felix.scr.bnd}} plugin JAR, while bndlib 3.0 embeds {{org.osgi.service.component.annotations}} from {{org.osgi.compendium}} in version 6.0. The {{felix.scr.bnd}} plugin should not embed anything which is already part of bndlib. Even version 2.1.0 of bndlib embeds part of {{org.osgi}}. 
Why is embedding {{org.osgi.compendium}} necessary at all? What dependencies from that artifact are actually used, which are not already known to bndlib?","11/Oct/15 13:17;githubbot;GitHub user kwin opened a pull request:

    https://github.com/apache/felix/pull/38

    FELIX-5074, make compatible with bndlib 3.0

    simplify POM (only relying on maven-shade-plugin), don't embed any
    provided dependencies!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kwin/felix FELIX-5074

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/38.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #38
    
----
commit 66814cf45ef9cc1d983dfc702378c39da676c1a4
Author: Konrad Windszus <konrad.windszus@netcentric.biz>
Date:   2015-10-11T13:15:50Z

    FELIX-5074, make compatible with bndlib 3.0
    
    simplify POM (only relying on maven-shade-plugin), don't embed any
    provided dependencies!

----
",11/Oct/15 13:19;kwin;I attached a PR which fixes compatibility with bndlib 3.0. It also makes sure that the scr.bnd only contains the relevant classes. So there should be no longer any classpath collisions with bnd.,"11/Oct/15 22:33;pderop;Hi Konrad;

The compendium is included because the scr.bnd plugin is intented to be run within bndtools, and when the plugin runs in bndtools, the compendium is not available in the classpath (only bndlib is available if I'm correct).

Now, to verify if what I'm saying is making sense, I just created a bndtools project and tried the scr.bnd plugin compiled with your patch (which does not include the compendium) and when I'm building using ""gradle jar"", I'm indeed getting a CNF on org.osgi.service.component.ComponentContext class (which is needed by the scr.bnd plugin):

{code}
gradle jar

Error  : Got unexpected exception while analyzing:org.apache.felix.scrplugin.SCRDescriptorException: Unable to load class.
        at org.apache.felix.scrplugin.helper.Validator.getMethod(Validator.java:222)
        at org.apache.felix.scrplugin.helper.Validator.findLifecycleMethod(Validator.java:246)
        at org.apache.felix.scrplugin.SCRDescriptorGenerator.createComponent(SCRDescriptorGenerator.java:452)
        at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:161)
        at org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin.analyzeJar(SCRDescriptorBndPlugin.java:172)
        at aQute.bnd.osgi.Analyzer.doPlugins(Analyzer.java:658)
        at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:213)
        at aQute.bnd.osgi.Builder.analyze(Builder.java:379)
        at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:688)
        at aQute.bnd.osgi.Builder.build(Builder.java:104)
        at aQute.bnd.osgi.Builder.builds(Builder.java:1283)
        at aQute.bnd.build.ProjectBuilder.builds(ProjectBuilder.java:540)
        at aQute.bnd.build.Project.buildLocal(Project.java:1650)
        at aQute.bnd.build.Project.build(Project.java:1497)
        at aQute.bnd.build.Project.build(Project.java:1974)
        at aQute.bnd.build.Project$build$14.call(Unknown Source)
        at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)
        at aQute.bnd.gradle.BndPlugin$_apply_closure1_closure13_closure45.doCall(BndPlugin.groovy:242)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)
        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:324)
        at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:278)
        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1016)
        at groovy.lang.Closure.call(Closure.java:423)
        at groovy.lang.Closure.call(Closure.java:439)
        at org.gradle.api.internal.AbstractTask$ClosureTaskAction.execute(AbstractTask.java:548)
        at org.gradle.api.internal.AbstractTask$ClosureTaskAction.execute(AbstractTask.java:529)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46)
        at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35)
        at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64)
        at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)
        at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:42)
        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)
        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)
        at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)
        at org.gradle.api.internal.AbstractTask.executeWithoutThrowingTaskFailure(AbstractTask.java:305)
        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.executeTask(AbstractTaskPlanExecutor.java:79)
        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:63)
        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:51)
        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:23)
        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:88)
        at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:29)
        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)
        at org.gradle.execution.DefaultBuildExecuter.access$200(DefaultBuildExecuter.java:23)
        at org.gradle.execution.DefaultBuildExecuter$2.proceed(DefaultBuildExecuter.java:68)
        at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)
        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)
        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:55)
        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:149)
        at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:106)
        at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:86)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:80)
        at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:33)
        at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:24)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:36)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)
        at org.gradle.launcher.cli.RunBuildAction.run(RunBuildAction.java:51)
        at org.gradle.internal.Actions$RunnableActionAdapter.execute(Actions.java:171)
        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:237)
        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:210)
        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:35)
        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:206)
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)
        at org.gradle.launcher.Main.doAction(Main.java:33)
        at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)
        at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)
        at org.gradle.launcher.GradleMain.main(GradleMain.java:23)
Caused by: java.lang.ClassNotFoundException: org.osgi.service.component.ComponentContext
        at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
        at org.apache.felix.scrplugin.helper.Validator.getMethod(Validator.java:219)
        ... 81 more
{code}

So, I think that we have to leave the compendium included in the scr.bnd plugin.

However it seems that your initial proposal does resolve the issue: we can just declare in the tools/org.apache.felix.scr.bnd/pom.xml file a dependency on bndlib with scope=provided. 
Moreover, we can also upgrade to 3.0.0 version (in order to be in line with the one used by the latest maven bundle plugin).

Something like this (in the tools/org.apache.felix.scr.bnd/pom.xml file):

{code}
                <dependency>
                        <groupId>biz.aQute.bnd</groupId>
                        <artifactId>biz.aQute.bndlib</artifactId>
                        <version>3.0.0</version>
                        <scope>provided</scope>
                </dependency>
{code}

Will this resolve your issue ?

Regarding the other modification you did in org.apache.felix.scr.generator/pom.xml, may be Carsten could give his opinion on it ?

","12/Oct/15 06:45;kwin;Hi Pierre,
thanks for your feedback on my patch. Ok, so it seems we need to rethink the patch. But only setting bndlib to ""provided"" will only resolve one part of the issue. The other issue that we should not include the same class within the classpath of bndlib twice remains. Let me quickly summarize what is part of bndlib 3.0 and bndlib 2.1

bndlib 3.0

# org.osgi.resource
# org.osgi.service.component.annotations
# org.osgi.service.metatype.annotations
# org.osgi.service.repository

bndlib 2.1

# org.osgi.resource
# org.osgi.service.component.annotations
# org.osgi.service.repository

Those packages should not be contained in {{felix.scr.bnd}}, otherwise you run into problems. But the issue is that those packages are part of osgi.compendium as well. Therefore I think we must depend on something less generic than osgi.compendium.
What is needed at runtime by {{felix.scr.bnd}} really should be only:

# org.osgi.service.component.ComponentContext
# org.osgi.framework.BundleContext

All the other references really seem to be constants (which are in any case being inlined by the compiler).
So maybe depending on http://search.maven.org/#artifactdetails|org.osgi|org.osgi.service.component|1.3.0|jar seems better as that includes only the relevant package (but is only available for DS 1.3, though).
","12/Oct/15 11:50;kwin;Actually it is not that simple, because for org.osgi.service.component.ComponentContext there are only the following dependencies available:
http://search.maven.org/#search|ga|1|fc%3A%22org.osgi.service.component.ComponentContext%22%20g%3A%22org.osgi%22
Only since DS 1.3 there is a dedicated artifact for something related to OSGi services.

Therefore maybe the right solution is to somehow invert the classloading order, so that {{bndlib}} is always loaded first before the {{felix.scr.bnd}} artifact is being loaded. That way {{bndlib}} would loads its own classes and {{felix.scr.bnd}} would preferably leverage the classes from {{bndlib}} and only if they are not contained in {{bndlib}} use its own versions of those classes.

The problem with that is how to modify the class loading order.
Currently the loading order is:
# maven-bundle-plugin-3.0.0.jar
# org.apache.felix.scr.bnd-1.4.0.jar
# org.osgi.core-4.3.1.jar
# biz.aQute.bndlib-3.0.0.jar

To modify that {{felix.scr.bnd}} would need to depend on {{bndlib}} as well. Unfortunately {{bndlib}} changed its artifactId from {{bndlib}} to {{biz.aQute.bndlib}} in version 2.4.1. Therefore it seems impossible to have the same version of {{felix.scr.bnd}} for both bnd < 2.4.1 and bnd >= 2.4.1.",12/Oct/15 12:42;kwin;I updated the PR. [~pderop] Would you mind testing it again? Now the transitive dependencies are again embedded in the final JAR but those packages which are part of bndlib are filtered out.,"13/Oct/15 21:23;pderop;Hi Konrad;

I just looked into your latest patch, and it looks good to me :-)

I made a successful test using the latest bndtools, and also using maven I verified that the bndlib 2.1.0 is not present anymore in the maven classpath; and I also observed that using your patch none of the packages that are part of bndlib are not included anymore in the scr.bnd artifact.

Only one question now: why not depending on bndlib 3.0.0 instead of the old bndlib 2.1.0 ?

in scr.bnd pom.xml:

{code}
...
		<dependency>
		  <groupId>biz.aQute.bnd</groupId>
		  <!--
			<artifactId>bndlib</artifactId>
			<version>2.1.0</version>
		  -->
		  <artifactId>biz.aQute.bndlib</artifactId>
                  <version>3.0.0</version>
		<scope>provided</scope>
		</dependency>
...
{code}

So, are you ok if I apply your patch, but using a dependency on bndlib 3.0.0 ?


","14/Oct/15 05:58;kwin;Hi Pierre,
thanks for testing. Usually you depend on the minimal version of a dependency you need. If felix.scr.bnd is still compatible with bndlib 2.1.0 you should still depend on exactly that version. Only if scr.bnd depends on some bndlib 3.0.0 only features you should increase that dependency. Otherwise you detect incompatibilities only at run time and not at compile time (e.g. if you leverage new methods being added in 3.0.0). If you still want to increase the dependency to bndlib 3.0.0 please clearly state, that this plugin is only compatible with bnd 3+.
Thanks in advance for applying my patch.
Konrad","14/Oct/15 06:16;pderop;Ok, I do agree; we don't depend on some specific bndlib 3+ api, so let's continue to depend on bndlib 2.1.0. 
Thanks.
","25/Oct/15 22:32;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/38
",25/Oct/15 22:34;pderop;Applied the patch (thanks Konrad).,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple syntax for specifying embedded dependencies has broken,FELIX-5070,12903400,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,08/Oct/15 15:46,25/Nov/16 18:15,14/Mar/19 02:48,24/Oct/15 18:31,maven-bundle-plugin-3.0.0,,,,,,maven-bundle-plugin-3.0.1,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"In 2.5.3, I could say:

{code}
<Embed-Dependencies>res-core;rni-rnt</Embed-Dependencies>
{code}

or 

{code}
<Embed-Dependencies>res-core,rni-rnt</Embed-Dependencies>
{code}

Not any more. I need to say:

{code}
<Embed-Dependency>*;artifactId=res-core|rni-rnt</Embed-Dependency>
{code}

which is a whole lot more verbose. This seems undesirable.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Oct 24 18:31:35 UTC 2015,,,,,,0|i2mrc7:,9223372036854775807,,,,,,,,"24/Oct/15 18:31;bmargulies;r1710372 adds a unit test that proves that there's no problem here. 

I *think* that resulted from a behavior of the old version in which , and ; were interchangeable.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Framework should provide service capabilities for registered services,FELIX-5064,12902624,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,06/Oct/15 08:21,16/Oct/15 16:44,14/Mar/19 02:48,06/Oct/15 10:05,framework-5.2.0,,,,,,framework-5.4.0,,,,,,,Framework,,,,,,0,,,,,,"The Felix framework registers the following three service:

{code}org.osgi.service.resolver.Resolver
org.osgi.service.packageadmin.PackageAdmin
org.osgi.service.startlevel.StartLevel{code}

The OSGi specifications define the {{osgi.service}} capability (chapter 135.5), the framework should provide these capability for these services.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 06 10:05:20 UTC 2015,,,,,,0|i2mmjz:,9223372036854775807,,,,,,,,06/Oct/15 10:05;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1706973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Optional resource fragment with requirements that cause class space consistency issues with the host export cause unexpected ResolutionExceptions,FELIX-5061,12902135,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,02/Oct/15 15:08,16/Oct/15 16:44,14/Mar/19 02:48,05/Oct/15 18:50,resolver-1.6.0,,,,,,framework-5.4.0,,,,,,,Resolver,,,,,,0,,,,,,"Not sure if this is actually a bug in version 1.6.0.  I am testing with the latest out of trunk so it could be something after 1.6.0.

If a fragment contains a requirement that ultimately causes a uses constraint conflict with one of the hosts exported packages then the resolver will end up throwing a ResolutionExceptoin even when the fragment and host are considered to be optional resources by the ResolverContext.",,,,,,,,,,,,,,,,,,,,02/Oct/15 15:59;tjwatson;FELIX-5061.patch;https://issues.apache.org/jira/secure/attachment/12764779/FELIX-5061.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-05 18:50:45.117,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 05 18:50:45 UTC 2015,,,,,,0|i2mjj3:,9223372036854775807,,,,,,,,"02/Oct/15 15:59;tjwatson;Here is a possible fix.  The issue is the loop used to call  ResolverImpl.checkPackageSpaceConsistency changed to only loop over host resources.  I like that change and do not suggest that we change that.

Before it used to loop over all the 'seed' resources and check their consistency.  This included any fragments that are mandatory or optional resources according to the ResolveContext.  When checking the consistency of the fragment the impl would first find its hosts and do the check on the host, but the original fragment resource was kept for the faulty resource and could therefore be optionally removed from the resolution and we would retry resolution without the fragment.

Now we have lost the context of the fragment seeds and only have their hosts and that causes the issues.  At first I was thinking we needed to somehow bring the context back for the fragment during the consistency check, but that proved to be overcomplicated.

Instead I decided to fix an issue with the UseConstraintError so that we report back the Requirement that is to blame for the conflict with the host export.  That way the bit of code in ResolverImpl.checkConsistency that finds the faulty resource will correctly detect faultyReq is a WrappedRequirement from a fragment resource.

This also fixes an existing issue in the prior implementation that would end up throwing out the host as well even though it could have resolved the host once the fragment was removed from resolution.",02/Oct/15 16:24;tjwatson;I did add a new testcase to Equinox for this case.  You can find it in the twatson/newResolver branch as I described in FELIX-4987,"05/Oct/15 18:50;rickhall;I applied the patch, please close if satisfied. Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unnecessary import of org.osgi.service.component,FELIX-5060,12902125,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,02/Oct/15 14:10,06/Oct/15 03:33,14/Mar/19 02:48,02/Oct/15 14:13,webconsole-4.2.12,,,,,,webconsole-4.2.14,,,,,,,Web Console,,,,,,0,,,,,,For an unknown reason the webconsole has an import to org.osgi.service.component which it should not have as no code is using DS within the webconsole,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 02 14:13:25 UTC 2015,,,,,,0|i2mjgv:,9223372036854775807,,,,,,,,02/Oct/15 14:13;cziegeler;Nothing to commit as the import is not there anymore. I assume something went wrong with the 4.2.12 release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition between getService and stopping the http service,FELIX-5057,12901073,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,28/Sep/15 17:17,13/Oct/15 04:37,14/Mar/19 02:48,28/Sep/15 17:19,http.base-3.0.0,,,,,,http.base-3.0.2,http.bridge-3.0.2,http.jetty-3.1.2,,,,,HTTP Service,,,,,,0,,,,,,"It might happen that getService() is called on the HttpServiceFactory while stop() is called and the context is set to null. This results in an IAE.
We should first unregister the factory and then set the context to null. In addition if the context is null, getService should just return null and not throw",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 28 17:19:35 UTC 2015,,,,,,0|i2md67:,9223372036854775807,,,,,,,,28/Sep/15 17:19;cziegeler;Fixed in rev 1705725,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException when forwarding request,FELIX-5053,12896204,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,srs,srs,srs,24/Sep/15 19:13,13/Oct/15 04:38,14/Mar/19 02:48,09/Oct/15 14:51,http.base-3.0.0,,,,,,http.base-3.0.2,http.bridge-3.0.2,http.jetty-3.1.2,,,,,HTTP Service,,,,,,0,,,,,,"It seems to be a problem with forwarding requests in certain cases. I have the following setup:

* Servlet A forwards the request to Servlet 2 (using RequestDispatcher).
* Servlet B writes to the response using an output stream (HttpServletResponse.getOutputStream()).

When this happens I get an IllegalStateException from Jetty that basically saying that the Writer cannot be closed since I have already used an OutputStream.

The code that I think is wrong (or possibly not robust enough) is in RequestDispatcherImp line 84. 

{code}
if (!request.isAsyncStarted())
{
  response.flushBuffer();
  response.getWriter().close();
}
{code}

The line that causes trouble is:

{code}
response.getWriter().close();
{code}

We should probably check if we can actually close this writer or just ignore the potential exception.


In my setup I have one servlet that writes to OutputStream using HttpServletResponse.getOutputStream(). Then I have another servlet that forwards the request to the first servlet. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-25 05:06:25.526,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 09 14:22:07 UTC 2015,,,,,,0|i2lj4n:,9223372036854775807,,,,,,,,"24/Sep/15 21:19;srs;I propose that we just ignore any exceptions comming from closing the writer. Like this:

{code}
if (!request.isAsyncStarted())
{
  response.flushBuffer();
  
  try {
    response.getWriter().close();
  } catch (final Exception e) {
    // Ignore any exception. See FELIX-5053.
  }
}
{code}

Any comments?","25/Sep/15 05:06;cziegeler;Not sure if the close() is needed at all - I guess it's there to ensure that no other component writes after the request has been forwarded, but if this can't be ensured (like in the described case), I think we can remove the whole statement. Jetty will close the response anyway","25/Sep/15 06:16;srs;Yes, that was my initial tought too, but was a little bit afraid to remove it (in case it's a really good reason). But, have tried a lot of cases without that statement and it seems to work just fine.",01/Oct/15 08:12;srs;I removed the response.getWriter().close() line. It works for me and it should not be there. ,"08/Oct/15 15:12;cziegeler;Three tests in the itest module fail now, all of them in
RequestDispatchTest.

These tests call a servlet which:
- writes to the writer
- forwards to another servlet
- writes to the writer again.


With http.base 3.0.0 the write after the forward is simply ignored, with
http.base 3.0.1-SNAPSHOT it is not and ends up in the output stream.
Looking at the servlet spec, that seems to be wrong. However I'm not
sure whether the writing should be ignored or actually throw an exception.
I seems we were wrong that the close is
not needed ","08/Oct/15 18:45;srs;Sorry, did not notice that. Probably the best thing for now is to ignore any exceptions from the ""getWriter().close()"" operation?","09/Oct/15 06:19;cziegeler;[~srs] I've now committed a slight variant of this: the writer is tried to be closed, if an IllegalStateException is thrown by this, it's most likely that the servlet handling the forward used an output stream. In this case, I close that one. For both, any other exception is closed
WDYT?",09/Oct/15 14:22;srs;Looks good. I think this will do it. Tested it agaist my setup and everything works perfectly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Annoying System.out in RequestDispatcherImpl,FELIX-5052,12896202,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,srs,srs,srs,24/Sep/15 19:05,13/Oct/15 04:38,14/Mar/19 02:48,24/Sep/15 21:15,http.base-3.0.0,,,,,,http.base-3.0.2,http.bridge-3.0.2,http.jetty-3.1.2,,,,,HTTP Service,,,,,,0,,,,,,There's an annoying System.out in RequestDispatcherImpl's constructor. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-09-24 19:05:16.0,,,,,,0|i2lj47:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in async delivery,FELIX-5051,12895793,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,gnt,gnt,23/Sep/15 14:21,25/May/16 15:09,14/Mar/19 02:48,08/Oct/15 14:59,eventadmin-1.4.2,eventadmin-1.4.4,,,,,eventadmin-1.4.6,,,,,,,,,,,,,0,,,,,,"From debugging through the code, it seems that entries get added to the org.apache.felix.eventadmin.impl.tasks.AsyncDeliverTasks#m_running_threads  (java.util.concurrent.ConcurrentHashMap) but not removed. 

In org.apache.felix.eventadmin.impl.tasks.AsyncDeliverTasks.TaskExecuter#run() the call to remove is trying to remove the ""object"" rather than the key. This does not remove anything from the map. 

{code}
  public void run()
        {
          ...
                        this.m_running_threads.remove(this);
           ...
            } while ( running );
        }
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-24 07:43:17.722,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 24 07:43:17 UTC 2015,,,,,,0|i2lglj:,9223372036854775807,,,,,,,,24/Sep/15 07:43;cziegeler;[~gnt] I've committed a potential fix in rev 1705009,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gradle wrapper is not included in DM source release,FELIX-5046,12888690,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,18/Sep/15 22:15,30/Nov/15 12:54,14/Mar/19 02:48,18/Sep/15 22:17,  org.apache.felix.dependencymanager-r5,,,,,,org.apache.felix.dependencymanager-r6,,,,,,,Dependency Manager,,,,,,0,,,,,,"the ""gradle/wrapper/gradle-wrapper.jar"" jar is not included in the source distribution, preventing the usage of ""./gradlew"" wrapper.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 18 22:17:25 UTC 2015,,,,,,0|i2l54f:,9223372036854775807,,,,,,,,18/Sep/15 22:17;pderop;Fixed in revision 1703924.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DM Optional callbacks may sometimes be invoked before start callback,FELIX-5045,12888687,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,18/Sep/15 21:51,30/Nov/15 12:54,14/Mar/19 02:48,18/Sep/15 22:10,  org.apache.felix.dependencymanager-r5,,,,,,org.apache.felix.dependencymanager-r6,,,,,,,Dependency Manager,,,,,,0,,,,,,"We just found a corner case that triggers optional dependency callbacks before the component is invoked in its 'start' lifecycel callback. This is a bug, because in DM, optional dependency callbacks should be always invoked after the component's 'start' lifecycle callback.

I'm describing now the use case: we have the following component players: 

- B: a simple service component.
- BFactory: a service that has a 'create' method which registers in the OSGi registry a new B service instance.
- A: a component that adds from A.init() lifecycle callback a required dependency (with a callback) on BFactory, as well as an optional dependency (with a callback) on B.

- when A.bind(BFactory factory) is called, it then calls ""factory.create()"" method which triggers the registration of the B Service.  At this point, A.bind(B b) is then invoked, but the A.start() lifecycle callback has not yet been called. This is because we are currently transiting from INSTANTIATED_AND_WAITING_FOR_REQUIRED -> TRACKING_OPTIONAL; so the current state is TRACKING_OPTIONAL, and we are calling the             invokeAddRequiredInstanceBoundDependencies()
method, which calls A.bind(BFactory) method, which synchronously registers a B service instance; so this ends up calling the handleAdded method, which invoke A.bind(B b) method, but at this point we have not yet called the A.start() callback.
- then ""A.start()"" is called.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 24 22:06:33 UTC 2015,,,,,,0|i2l53z:,9223372036854775807,,,,,,,,"18/Sep/15 22:10;pderop;Fixed in revision 1703922.
",24/Sep/15 22:06;pderop;The integration test for this issue is located in org.apache.felix.dm.itest.api.FELIX5045_OptionalDependencyCBCalledBeforeStartTest.java,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] (felix-extensions) Service property changes during service registration get ignored,FELIX-5044,12888585,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,18/Sep/15 15:27,08/Jul/16 08:05,14/Mar/19 02:48,21/Sep/15 05:19,scr-2.0.0,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"felix-extensions allows event and lifecycle methods to return the new service property map.  However, there's a timing hole.  These changes are only applied when m_serviceRegistration is non-null.  Thus any changes that occur between the time the service is registered and m_serviceRegistration is set will be dropped.

This will occur when service registration results in something calling getService resulting in activation before m_serviceRegistration is recorded and one of the event methods or activation trying to change the service properties.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 21 05:19:02 UTC 2015,,,,,,0|i2l4i7:,9223372036854775807,,,,,,,,21/Sep/15 05:19;djencks;r1704219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential of waiting forever in ServiceRegistry.getService(),FELIX-5043,12883443,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,18/Sep/15 11:38,16/Oct/15 16:44,14/Mar/19 02:48,18/Sep/15 11:58,framework-5.2.0,,,,,,framework-5.4.0,,,,,,,Framework,,,,,,0,,,,,,The Felix Service registry uses a CountDownLatch for cases where multiple threads from the same bundle obtain the same service concurrently. When the getService() throws an exception this may cause some of these threads to wait for the service forever.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 18 11:58:09 UTC 2015,,,,,,0|i2ke0n:,9223372036854775807,,,,,,,,18/Sep/15 11:58;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1703814,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Get system bundle by location, not number for global bundle list",FELIX-5042,12875813,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,18/Sep/15 09:01,06/Oct/15 03:34,14/Mar/19 02:48,18/Sep/15 09:10,webconsole-4.2.10,webconsole-4.2.12,,,,,webconsole-4.2.14,,,,,,,Web Console,,,,,,0,,,,,,Similar to FELIX-5040 we should get the system bundle by using the bundle location in order to avoid getting blocked by a hook,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 18 09:10:23 UTC 2015,,,,,,0|i2kdpj:,9223372036854775807,,,,,,,,18/Sep/15 09:10;cziegeler;Fixed in rev 1703786. This needs an udpate of the core dep from 4.1 to 4.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot build web console with JDK 1.8 due to javadoc problems,FELIX-5041,12875794,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,18/Sep/15 07:24,23/Sep/15 12:52,14/Mar/19 02:48,18/Sep/15 07:33,webconsole-4.2.10,,,,,,webconsole-4.2.12,,,,,,,Web Console,,,,,,0,,,,,,"Running ""mvn javadoc:javadoc"" fails with the following errors:

{code}
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:2.10.2:javadoc (default-cli) on project org.apache.felix.webconsole: An error has o
ccurred in JavaDocs report generation:
[ERROR] Exit code: 1 - javadoc: warning - Multiple sources of package comments found for package ""org.osgi.framework""
[ERROR] javadoc: warning - Multiple sources of package comments found for package ""org.osgi.service.packageadmin""
[ERROR] javadoc: warning - Multiple sources of package comments found for package ""org.osgi.service.startlevel""
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\AbstractWebConsolePlugin.java:210: error: unknown tag: true
[ERROR] * <code>true</true> and may be overwritten by plugins to detect
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\AbstractWebConsolePlugin.java:215: warning: nested tag not allowed: <code>

[ERROR] * @return <code>true</code> if the page should have headers and footers rendered
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\AbstractWebConsolePlugin.java:210: error: element not closed: code
[ERROR] * <code>true</true> and may be overwritten by plugins to detect
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\DefaultBrandingPlugin.java:84: error: no summary or caption for table
[ERROR] * </table>
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\DefaultVariableResolver.java:50: error: bad HTML entity
[ERROR] * Creates a new variable resolver and initializes both - capacity & load factor
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\WebConsoleConstants.java:164: error: malformed HTML
[ERROR] * The type of this request attribute is <code>Map<String, String></code>.
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\WebConsoleConstants.java:164: error: bad use of '>'
[ERROR] * The type of this request attribute is <code>Map<String, String></code>.
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\WebConsoleUtil.java:254: error: malformed HTML
[ERROR] * Escapes HTML special chars like: <>&\r\n and space
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\WebConsoleUtil.java:254: error: bad use of '>'
[ERROR] * Escapes HTML special chars like: <>&\r\n and space
[ERROR] ^
[ERROR] d:\develop\.apache-felix\webconsole\src\main\java\org\apache\felix\webconsole\WebConsoleUtil.java:254: error: bad HTML entity
[ERROR] * Escapes HTML special chars like: <>&\r\n and space
[ERROR] ^
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 23 12:52:18 UTC 2015,,,,,,0|i2kdlb:,9223372036854775807,,,,,,,,18/Sep/15 07:33;v_valchev;fixed in svn,23/Sep/15 12:52;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] get system bundle by location, not number, for global extender true",FELIX-5040,12875409,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,17/Sep/15 16:12,08/Jul/16 08:05,14/Mar/19 02:48,17/Sep/15 17:18,scr-2.0.0,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,getBundle(long bundleId) goes through the framework hooks so its conceivable that bundle 0 could be hidden from DS.  getBundle( String bundleLocation) does not so DS would work.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 17 17:18:56 UTC 2015,,,,,,0|i2kb87:,9223372036854775807,,,,,,,,17/Sep/15 17:18;djencks;fixed in r1703652,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component getServices method does not return null anymore,FELIX-5039,12875390,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,pderop,pderop,17/Sep/15 15:17,10/Jul/16 08:54,14/Mar/19 02:48,18/Sep/15 09:24,scr.compat-1.0.0,,,,,,scr.compat-1.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In the scr.compat module, the org.apache.felix.scr.getServices() method does not return null anymore when no services are provided.
The javadoc states that null is returned in this case; however, currently an empty array is returned instead of null.",,,,,,,,,,,,,,,,,,,,17/Sep/15 15:24;pderop;FELIX-5039.patch;https://issues.apache.org/jira/secure/attachment/12757100/FELIX-5039.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-09-18 06:34:42.961,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 18 09:24:47 UTC 2015,,,,,,0|i2kb3z:,9223372036854775807,,,,,,,,17/Sep/15 15:24;pderop;Attached a proposed patch.,18/Sep/15 06:34;cziegeler;Patch lgtm,"18/Sep/15 09:24;cziegeler;Thanks for the patch, Pierre. It's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException in SCR ComponentTestBase class,FELIX-5032,12863624,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,djencks,pderop,pderop,12/Sep/15 15:24,08/Jul/16 08:05,14/Mar/19 02:48,20/Oct/15 02:14,scr-2.0.0,,,,,,scr-2.0.4,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In the SCR integration tests, there is an issue in the ComponentTestBase.Log.run() method: 

When a warn message is logged, and if the current test includes a part of the warn message in the ""ignoredWarnings"" attributes, then the Log.run() method may get an ArrayIndexOutOfBound exception, and the message is not logged. 

Moreover, this exception kills the thread that is internally used by the ComponentTestBase.Log, so any further log won't be displayed at all.

Here is where the bug is located (see ComponentTestBase.Log inner class, line 919):

{code}
 ...
        public void run()
        {
            try
            {
                LogEntry entry = null;
                while ( true )
                {
                    entry = m_logQueue.take();
                    if ( entry.getLevel() <= 2 )
                    {
                        if ( m_warnings.size() < 1024 && acceptWarning( entry.getMessage() ) )
                        {
                            m_warnings.add( entry.getMessage() );
                        }
                        else
                        {
                            // Avoid out of memory ...
                            m_warnings.set( 1023, ""Unexpected errors logged. Please look at previous logs"" );
                        }
                    }
   ...
{code}

Here, if the test generates a warn log that can be ignored (the acceptWarning method will return false), then the m_warnings list is immediately set to 1023, and if the current size of the list is lower than 1024 (which is the case at the begining), then the logging thread will get an ArrayIndexOutOfMemory exception.

(This exception was never noticed because the stdout/stderr logs are disabled.)

I have attached a simple patch that corrects the problem.
The patch also does two new thing:

- By default, the DS_LOGLEVEL is set to ""warn"" in order to reduce output when we want to simply run all the tests before doing a release and check if eveything is ok.

- when a warn message is not accepted (is actually expected by the test), then it is not logged when DS_LOGLEVEL is set to ""warn"". However, of course the expected warn message is logged when running with DS_LOGLEVEL=""debug"".

Here is the patch (also attached to this issue)

{code}
                    if ( entry.getLevel() <= 2 )
                    {
                    	// If the test does not accept this warning, it means this warning is expected by the test.
                    	if (acceptWarning( entry.getMessage())) {
                    		if ( m_warnings.size() < 1024 )
                    		{
                        		// Store this warning so any test can check if some warnings have been generated.
                    			m_warnings.add( entry.getMessage() );
                    		}
                    		else
                    		{
                    			// Avoid out of memory ...
                    			m_warnings.set( 1023, ""Unexpected errors logged. Please look at previous logs"" );
                    		}
                    	} else {
                    		// The current test explicitly said that this warning is not accepted and is expected.
                    		// So, unless we are in full debug, don't display this expected warning message.
                    		if (! DS_LOGLEVEL.equals(""debug"")) {
                    			continue;
                    		}
                    	}
                    }
{code}

",,,,,,,,,,,,,,,,,,,,12/Sep/15 15:25;pderop;FELIX-5032.patch;https://issues.apache.org/jira/secure/attachment/12755561/FELIX-5032.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-20 02:14:38.953,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 21 09:39:49 UTC 2015,,,,,,0|i2k3c7:,9223372036854775807,,,,,,,,12/Sep/15 15:25;pderop;Attached the proposed patch.,"20/Oct/15 02:14;djencks;r1709501
I'd like to see all the log output even if it's expected, so I applied a simpler change.  I also had a test failure that I think was due to an expected warn log entry that had been concealed by the bug, did all the tests pass for you with your patch?","21/Oct/15 09:39;pderop;IIRC, I think that the test failure that was hidden by the bug was ComponentConcurrencyTest and I added the following warning message in order to make it pass OK:

""DependencyManager : invokeBindMethod : Service not available from service registry for ServiceReference""

(and I saw that you also added it your recent commit).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in Web Console configuration plugin when metatype service is missing,FELIX-5031,12863378,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,v_valchev,v_valchev,v_valchev,11/Sep/15 13:14,23/Sep/15 12:52,14/Mar/19 02:48,11/Sep/15 13:17,webconsole-4.2.10,,,,,,webconsole-4.2.12,,,,,,,Web Console,,,,,,0,,,,,,"The following exception occurs when metatype service is missing:
{code}
java.lang.NullPointerException
        at org.apache.felix.webconsole.internal.configuration.ConfigAdminSupport.getConfigurationPropertyValueOrDefault(ConfigAdminSupport.java:703)
        at org.apache.felix.webconsole.internal.configuration.ConfigAdminSupport.getConfigurationFactoryNameHint(ConfigAdminSupport.java:641)
        at org.apache.felix.webconsole.internal.configuration.ConfigAdminSupport.listConfigurations(ConfigAdminSupport.java:608)
        at org.apache.felix.webconsole.internal.configuration.ConfigManager.renderContent(ConfigManager.java:395)
        at org.apache.felix.webconsole.AbstractWebConsolePlugin.doGet(AbstractWebConsolePlugin.java:194)
        at org.apache.felix.webconsole.internal.configuration.ConfigManager.doGet(ConfigManager.java:330)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:567)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager$3.run(OsgiManager.java:465)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:461)

{code}

This is probably related to FELIX-4710

As result all configurations are missing and the plugin becomes completely unusable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 23 12:52:17 UTC 2015,,,,,,0|i2k1vb:,9223372036854775807,,,,,,,,11/Sep/15 13:17;v_valchev;Fixed in svn r1702457,23/Sep/15 12:52;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceFactory for components might return null,FELIX-5028,12863073,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,10/Sep/15 14:37,16/Mar/17 20:32,14/Mar/19 02:48,15/Sep/15 12:56,scr-2.0.0,,,,,,scr-2.0.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"There seems to be an uneven handling of locking/status information in getService/ungetService of the service factory registered by the SingleComponentManager. (I didn't check the other factories)
We have a concurrent get/ungetService for the same service. While the unget service uses a lock around decrementing the counter, incrementing the counter and other actions in getService are not using the lock. There is a partial lock there. 
But this can lead to the problem that while the preconditions for getService are still fine, ungetService cleans up which then makes getService to return null.
We have a huge app where we can reproduce the problem, I'll try to trim this down to a simple test case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-15 21:14:54.082,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 15 21:44:51 UTC 2015,,,,,,0|i2k00n:,9223372036854775807,,,,,,,,"10/Sep/15 18:54;cziegeler;I'm not sure, but I think if in SingleComponentManager#getService( Bundle bundle, ServiceRegistration<S> serviceRegistration )
  the useCount would be increased as a first statement, it would be avoided that the instance and/or the component context are cleaned up through a concurrent ungetService.
If something fails in getService, we can decrement the counter, and if it gets to zero, clean up.",11/Sep/15 07:35;cziegeler;This is a simple fix which might solve the problem. Not sure if this should be the final solution,"11/Sep/15 15:43;cziegeler;Actually the patch does not fix the problem - so far I couldn't come up with a reproducible test case. As the patch does not fix the problem, I'm wondering if the problem we're hitting is caused by something else.
Now, what we see is that in some circumstances getService returns null - in our case the component at hand implements two service hooks (EventListenerHook, FindHook), has no references, no activator/deactivaor and is not immediate. On startup of our app we see the NPE; we assume this is because the hooks are get/unget a lot by the framework causing a high concurrency on getService/ungetService.","15/Sep/15 12:56;cziegeler;I've hopefully fixe this in rev 1703178 by increasing the use count on getService and protecting it through the lock. At least manual tests proof that with this in place, the problem is not occuring anymore","15/Sep/15 21:14;pderop;Carsten,

I looked at the last commit from rv 1703178 and now it seems that the ungetService() is not checking anymore bad cases where the framework calls ungetService() more than it calls getServices(). So, don't you think that the following patch would be better:

{code}
    public void ungetService( Bundle bundle, ServiceRegistration<S> serviceRegistration, S o )
    {
        obtainStateLock( );
        try
        {
            // unget the service instance if no bundle is using it
            // any longer unless delayed component instances have to
            // be kept (FELIX-3039).
            // We also check if the useCount does not go below zero (when ungetService is
            // called more times than getService is called).
            if (  m_useCount.get() > 0 && m_useCount.decrementAndGet() == 0 && !isImmediate() && !keepInstances() )
            {
                ungetService( );
            }
        }
        finally
        {
            releaseStateLock(  );
        }
    }
{code}","15/Sep/15 21:24;cziegeler;I don't think this is needed, because this extra check assumes that the framework is wrong
We could change m_useCount.decrementAndGet() == 0 to m_useCount.decrementAndGet() <= 0 as in this processing of ungetService the count is reset to zero.
A simple check of m_useCount.get() > 0 && m_useCount.decrementAndGet() == 0 would catch the situation where the framework calls ungetService more often, but it doesn't reset the counter to 0, so e.g. if it's -1 , the next call to getService gets it to 0 - which would be wrong
Forgot to mention that the previous code did check the count and then decremented it outside of the state lock, so while the count would have been higher than zero, it might have got to zero by the time decrement is called, getting it to -1","15/Sep/15 21:44;pderop;ok, I see your point; let's forget about this extra check.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSL Filter URL Decoding Issues,FELIX-5027,12863053,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kmrobin,kmrobin,10/Sep/15 13:46,17/Sep/15 13:20,14/Mar/19 02:48,11/Sep/15 06:28,http.sslfilter-1.0.2,,,,,,http.sslfilter-1.0.4,,,,,,,HTTP Service,,,,,,0,,,,,,"In SslFilterResponse, call to uri.getQuery() newly introduced with following FELIX-4920 commit is creating URL decoding issues:
https://github.com/apache/felix/commit/57819578b1b26f40a1f1d3c9f07fa928a395d0a9#diff-00202663cae410b17b36aa25e60ba6cb

#L188 
{quote}return new URI(this.clientProto,null, this.serverName, this.clientPort, uri.getPath(),uri.getQuery(),uri.getFragment()).toURL();
{quote}

The uri.getQuery() will remove the decoding from the “resource” parameter  causing a 302 with a location which is not decoded.

So for example, it causes URLs to appear like 
https://www.abc.com/?resource=https://mypage-1.abc.com:80/en.html?pbOpen=true&$$login$$=$$login$$&j_reason=errors.login.account.not.found

When the expected URL for example is: 

https://www.abc.com/en/login.html?resource=%2Fen.html%3FpbOpen%3Dtrue&$$login$$=%24%24login%24%24&j_reason=errors.login.account.not.found

This creates problems when we have multiple domain URL mappings using sling resource and apache mod_rewrite.
Also, important to note that the problem especially persists when the “resource” parameter contains a URL with URL parameters (and thus with “?” in it).

It may be good to utilize StringBuilder in this method instead of using uri.getQuery() in combination with the URI and URL classes. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-11 06:28:39.345,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 17 13:20:18 UTC 2015,,,,,,0|i2jzwf:,9223372036854775807,,,,,,,,"11/Sep/15 06:28;cziegeler;Fixed in rev 1702383 by using a string builder and appending the raw query string (and also raw fragment).
Added a test case to verify the correct behaviour",17/Sep/15 13:20;kmrobin;Thank you [~cziegeler]. :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in Events web console plugin - no events can be seen,FELIX-5025,12861559,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,03/Sep/15 12:59,23/Sep/15 12:54,14/Mar/19 02:48,03/Sep/15 13:11,webconsole-event-plugin-1.1.2,,,,,,webconsole-event-plugin-1.1.4,,,,,,,Web Console,,,,,,0,,,,,,"The following exception is seen when clicking on the Web Console Events plugin.

{code}
java.lang.NullPointerException
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.eventJson(PluginServlet.java:373)
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.renderJSON(PluginServlet.java:184)
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.doGet(PluginServlet.java:208)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.apache.felix.webconsole.internal.WebConsolePluginAdapter.renderContent(WebConsolePluginAdapter.java:123)
	at org.apache.felix.webconsole.AbstractWebConsolePlugin.doGet(AbstractWebConsolePlugin.java:170)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.apache.felix.webconsole.internal.WebConsolePluginAdapter.service(WebConsolePluginAdapter.java:211)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:493)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:418)

{code}

I think the exception is caused due to an event, containing a property with value which is of type Array and one of the elements of the array is null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 23 12:54:01 UTC 2015,,,,,,0|i2jqtr:,9223372036854775807,,,,,,,,23/Sep/15 12:54;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console plugin is missing function to enable component descriptions,FELIX-5023,12861231,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,02/Sep/15 06:56,19/Sep/15 12:45,14/Mar/19 02:48,02/Sep/15 07:24,webconsole-ds-plugin-2.0.0,,,,,,webconsole-ds-plugin-2.0.2,,,,,,,Web Console,,,,,,0,,,,,,With the switch to R6 the displayed list only contains component configurations. Therefore disabled component descriptions are not shown and there is no way to enable them,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 02 07:24:38 UTC 2015,,,,,,0|i2jouf:,9223372036854775807,,,,,,,,"02/Sep/15 07:24;cziegeler;Fixed in rev 1700717

I've also added the information about disabled components for all other plugins",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[scr.compat] ScrServiceImpl.getComponents() returns no components,FELIX-5016,12858936,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,niallc,niallc,26/Aug/15 10:03,19/Sep/15 12:46,14/Mar/19 02:48,27/Aug/15 14:43,scr.compat-1.0.0,,,,,,scr.compat-1.0.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In the scr.compat version of ScrServceImpl, the getComponents() method which should return all components in the system, always returns null.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-27 14:43:31.297,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 27 14:43:31 UTC 2015,,,,,,0|i2je7b:,9223372036854775807,,,,,,,,"26/Aug/15 10:05;niallc;The reason is that it passes {{null}} to a variable arguments list, which is interpreted as an array of size one, with a null value, rather than an empty list.

As a result in the second clause of the if statement below gets called (from {{ServiceComponentRuntimeImpl}})

{code}
 	public Collection<ComponentDescriptionDTO> getComponentDescriptionDTOs(Bundle... bundles)
	{
		List<ComponentHolder<?>> holders;
		if (bundles == null || bundles.length == 0)
		{
			holders = componentRegistry.getComponentHolders();
		}
		else
		{
			holders = componentRegistry.getComponentHolders(bundles);
		}
{code}","27/Aug/15 14:43;cziegeler;Thanks for reporting, I've fixed this in master",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ResolverImpl,FELIX-5015,12858927,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,romale,romale,26/Aug/15 09:27,16/Oct/15 16:45,14/Mar/19 02:48,28/Sep/15 12:50,resolver-1.6.0,,,,,,resolver-1.8.0,,,,,,,Resolver,,,,,,1,,,,,,"The method getPackageSources in ResolverImpl.java returns a Set.
This collection is used in mergeUses (line 1039) in a foreach loop.

A null value may be returned by getPackageSources, as a result of querying a Map. In this case, the foreach loop in mergeUses will trigger a NPE.

The method getPackageSources should return an empty Set when there is no result.",,,,,,,,,,,,,,,,,,,,07/Sep/15 15:51;eruiz;FELIX-5015.patch.gz;https://issues.apache.org/jira/secure/attachment/12754511/FELIX-5015.patch.gz,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-09-07 15:50:47.763,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 13 11:47:59 UTC 2015,,,,,,0|i2je5b:,9223372036854775807,,,,,,,,"07/Sep/15 15:50;eruiz;Hi, Spring Roo has been upgraded to OSGi R6, including its Subsystem based feature ""Roo Addon Suites"".

We have implemented Alexandre's patch and it works, so we have attached the patch implementation. Hope you accept it to fix this issue.

All the best.","26/Sep/15 00:17;srs;I have also tested the patch and it looks good. I can apply the patch if nobody has any objections.
","28/Sep/15 12:50;bosschaert;I had the same problem and verified that Alexandre's patch resolves it. So I have applied the patch here: http://svn.apache.org/viewvc?view=revision&revision=1705679

Many thanks to Alexandre!","13/Oct/15 11:43;romale;Any idea when the next version of Resolver will be out?
The new Karaf 4.0.2 is out with Felix 5.2.0, and this bug prevents me from using Subsystems in this release (it used to work in Karaf 4.0.1).","13/Oct/15 11:47;karlpauls;We are just in the process of wrapping up for a new framework+resolver release. I'll cut the release asap - hence, should be out around the end of the week.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolver creates and shutdown ExecuterService within the wrong AccessControlContext,FELIX-5011,12858424,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,24/Aug/15 22:05,31/Aug/15 05:15,14/Mar/19 02:48,24/Aug/15 22:09,,,,,,,resolver-1.6.0,,,,,,,Resolver,,,,,,0,,,,,,"The resolver can create and shutdown it own ExecuterService (depending on the configuration). If it does, it currently does it within the wrong AccessControlContext (namely, the one of the caller). ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 24 22:09:26 UTC 2015,,,,,,0|i2jb33:,9223372036854775807,,,,,,,,24/Aug/15 22:09;karlpauls;I commited a fix in r1697509. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NPE when resolving bundle with a header ""Bundle-NativeCode = *""",FELIX-5010,12858371,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bobpaulin,gnt,gnt,24/Aug/15 18:36,12/Sep/18 17:13,14/Mar/19 02:48,25/Aug/15 03:59,framework-5.0.1,,,,,,framework-5.2.0,,,,,,,Framework,,,,,,0,,,,,,"{code}
java.lang.NullPointerException
	at org.apache.felix.framework.capabilityset.CapabilitySet.match(CapabilitySet.java:197)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.framework.capabilityset.CapabilitySet.match(CapabilitySet.java:187)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.framework.StatefulResolver.findProvidersInternal(StatefulResolver.java:229)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.framework.ResolveContextImpl.findProviders(ResolveContextImpl.java:89)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.resolver.Candidates.populate(Candidates.java:198)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:199)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:140)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:431)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.framework.Felix.resolveBundles(Felix.java:4073)[org.apache.felix.framework-5.0.1.jar:]
	at org.apache.felix.framework.FrameworkWiringImpl.resolveBundles(FrameworkWiringImpl.java:133)[org.apache.felix.framework-5.0.1.jar:]
{code}",,,,,,,,,,,,,,KARAF-3938,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-24 23:42:45.849,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 12 17:13:50 UTC 2018,,,,,,0|i2jarj:,9223372036854775807,,,,,,,,24/Aug/15 23:42;bobpaulin;[~gnt] Looking at this.  I think I have a fix.  Just need to test against the R6 compliance tests.,25/Aug/15 03:59;bobpaulin;Fixed with Rev 1697537.  The code should treat the default Bundle-NativeCode: * just like the default as if the entry was not present.  Change passes R6 tests.,"12/Sep/18 17:08;githubbot;GitHub user timothyjward opened a pull request:

    https://github.com/apache/felix/pull/154

    Integration tests verifying the fix for FELIX-5010

    Signed-off-by: Tim Ward <timothyjward@apache.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/timothyjward/felix 5010-integration-test

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/154.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #154
    
----
commit a61c459e7f3ee09e0a8a41805fbfeaff5c39e74c
Author: Tim Ward <timothyjward@...>
Date:   2018-09-12T17:08:14Z

    Integration tests verifying the fix for FELIX-5010
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

----
",12/Sep/18 17:13;timothyjward;Please ignore the above PR addition - It was supposed to reference FELIX-5910,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EventAdmin threads should be named,FELIX-5006,12857539,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,romale,romale,20/Aug/15 13:46,25/May/16 15:10,14/Mar/19 02:48,27/Aug/15 14:57,eventadmin-1.4.4,,,,,,eventadmin-1.4.6,,,,,,,Event Admin,,,,,,0,,,,,,"Threads created by EventAdmin have no name.
The ThreadFactory used in DefaultThreadPool.java does not assign a name to new threads.

Anonymous threads make debugging harder, since we have to guess which thread is running our event handlers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-08-20 13:46:09.0,,,,,,0|i2j5qf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BundleInfoProvider should work with null being passed as appRoot,FELIX-5005,12856550,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,17/Aug/15 08:27,19/Sep/15 12:45,14/Mar/19 02:48,17/Aug/15 08:38,webconsole-ds-plugin-2.0.0,,,,,,webconsole-ds-plugin-2.0.2,,,,,,,Web Console,,,,,,0,,,,,,"According to the interface, it's possible that null is passed as appRoot when the BundleInfoProvider is called, e.g. when it's not called by the webconsole",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 17 08:38:02 UTC 2015,,,,,,0|i2izt3:,9223372036854775807,,,,,,,,17/Aug/15 08:38;cziegeler;Resolved in 1696216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Null is passed to BundleInfoProvider if plugin root is null,FELIX-5004,12856548,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,17/Aug/15 08:22,23/Sep/15 12:52,14/Mar/19 02:48,17/Aug/15 08:26,webconsole-4.2.10,,,,,,webconsole-4.2.12,,,,,,,Web Console,,,,,,0,,,,,,"If the plugin root is null, null is passed into the BundleInfoProvider for the app root - this should rather be the empty string",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-23 12:52:18.772,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 23 12:52:18 UTC 2015,,,,,,0|i2izsn:,9223372036854775807,,,,,,,,17/Aug/15 08:26;cziegeler;Fixed in rev 1696212,23/Sep/15 12:52;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scr:list Gogo command should display component descriptions and configurations,FELIX-5001,12854041,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,njbartlett,njbartlett,11/Aug/15 02:43,16/Dec/15 18:18,14/Mar/19 02:48,15/Sep/15 14:32,scr-2.0.0,,,,,,scr-2.0.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"The gogo command scr:list has changed drastically since version 1.8.2 and is now unusable. The component IDs are not displayed and so there is no way for the user to pass this ID to the scr:info command.

Here is the current output:
{noformat}
g! scr:list
 Name  BundleId DefaultEnabled
[org.example.exchange.orderentry.OrderEntry] [  11] [true]
[org.example.exchange.prices.feed] [   2] [true]
[org.example.osgi.exchange.impl.ExchangeImpl] [   2] [true]
{noformat}

For reference, here was the much more useful output from 1.8.2:
{noformat}
g! scr:list
 Id   State BundleId Name
[   0] [active      ] [   2] org.example.osgi.exchange.impl.ExchangeImpl
[   1] [active      ] [   2] org.example.exchange.prices.feed
[   2] [active      ] [  11] org.example.exchange.orderentry.OrderEntry
[   3] [active      ] [   2] org.example.exchange.prices.feed
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-11 06:41:29.483,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 16 18:15:49 UTC 2015,,,,,,0|i2ikg7:,9223372036854775807,,,,,,,,11/Aug/15 06:41;cziegeler;The command lists now ComponentDescriptionDTOs - which I think is wrong - it should rather list ComponentConfigurationDTOs,"11/Aug/15 07:27;cziegeler;I've changed the gogo command to list configurations instead of descriptions
The info command can now be used with either a component name or a configuration ID
Fixed some descriptions for the shell commands and the config command (flush was missing)
Rev 1695222","09/Sep/15 07:44;cziegeler;I've changed the format to look like this now:
 BundleId Component Name Id    State
 [ 235]   org.apache.sling.servlets.get.DefaultGetServlet [ 541] [active      ]
 [ 235]   org.apache.sling.servlets.get.impl.DefaultHeadServlet [ 540] [active      ]
 [ 235]   org.apache.sling.servlets.get.impl.RedirectServlet [ 538] [active      ]
 [ 235]   org.apache.sling.servlets.get.impl.impl.info.SlingInfoServlet [ 539] [active      ]
 [ 235]   org.apache.sling.servlets.get.impl.version.VersionInfoServlet  --    --

Rev 1701930
","11/Sep/15 15:33;djencks;At my request Carsten also committed 1701934 and 1702030 which make the list command display both the component descriptions and below that indented the configurations.  While I agree with him that the result is not ideal to look at this is the information that I consider essential.  It now looks something like:
{code}
 [   8]   com.ibm.ws.config.xml.internal.ServerXMLConfigurationMBeanImpl  enabled
    [   8] [satisfied   ] 
 [  10]   com.ibm.wsspi.config.internal.FilesetImpl  enabled
    [  33] [active      ] com.ibm.ws.kernel.metatype.helper.fileset_8 (com.ibm.ws.kernel.metatype.helper.fileset )
    [  34] [active      ] com.ibm.ws.kernel.metatype.helper.fileset_7 (com.ibm.ws.kernel.metatype.helper.fileset )
{code}

I committed 1702491 which fixes some formatting problems in the info command.

I note that in my environment where the console is started after DS the gogo descriptor annotations don't get picked up.  I'm still looking for a solution to this.","15/Sep/15 14:32;cziegeler;I think we can resolve this for now - if there is anything to improve on the output, we can open a new issue","16/Dec/15 18:14;flangel;Hi,

here my suggestion for the new display. Please provide feedback, I am happy to implement it.

scr:list 

[5] com.osgi.rocks.bundle1 
	[ 1]  (active)  com.osgi.rocks.bundle1.provider1 (myservice1)
	[  ]  (noref )  com.osgi.rocks.bundle1.provider2 (myservice3)
[6] com.osgi.rocks.bundle2 
	[ 2]  (active)  com.osgi.rocks.bundle2.provider1 (myservice1)
	[  ]  (satis )  com.osgi.rocks.bundle2.impl2 (myservice1)
	[  ]  (noconf)  com.osgi.rocks.bundle2.provider3 (cid=com.farmnet365)

Hope its self explanatory
[bundleId] [bsn]
     [ComponentId]  (ComponentStatus) ComponentName (Info in resp to status, i.e. Service, pid ...)


","16/Dec/15 18:15;flangel;This seems old version of Jira. there is an indention
[BundleID] 
         [ComponentID]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven-scr-plugin messes project resources when outputDirectory configuration present on windows,FELIX-4999,12853687,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,philipp.kunz,philipp.kunz,09/Aug/15 12:32,18/May/16 05:43,14/Mar/19 02:48,13/Aug/15 05:23,maven-scr-plugin 1.21.0,,,,,,maven-scr-plugin 1.22.0,,,,,,,SCR Tooling,,,,,,0,easyfix,patch-available,,,,"As I look at the following code, I easily can conclude problems on Windows.
{code:title=org.apache.felix.scrplugin.mojo.SCRDescriptorMojo#updateProjectResources()}
    private boolean updateProjectResources() {
        final String classesDir = this.project.getBuild().getOutputDirectory().replace(File.separatorChar, '/');
        final String ourRsrcPath = this.outputDirectory.getAbsolutePath().replace(File.separatorChar, '/');
        if ( !classesDir.equals(ourRsrcPath) ) {
            // now add the descriptor directory to the maven resources
            boolean found = false;
            @SuppressWarnings(""unchecked"")
            final Iterator<Resource> rsrcIterator = this.project.getResources().iterator();
            while (!found && rsrcIterator.hasNext()) {
                final Resource rsrc = rsrcIterator.next();
                found = rsrc.getDirectory().equals(ourRsrcPath);
            }
            if (!found) {
                final Resource resource = new Resource();
                resource.setDirectory(this.outputDirectory.getAbsolutePath());
                this.project.addResource(resource);
            }
            return true;
        }
        return false;
    }
{code}

The problematic snippet is *{{.replace(File.separatorChar, '/')}}*. On any other environment that Windows this might work but it does not work with backslash file separators.
At first *{{classesDir}}* is compared to *{{ourRsrcPath}}* which is correct as both values have their slashes replaced. The second comparison on line [545|http://svn.apache.org/viewvc/felix/trunk/scrplugin/maven-scr-plugin/src/main/java/org/apache/felix/scrplugin/mojo/SCRDescriptorMojo.java?view=markup&revision=1616419], however, is invalid because *{{rsrc.getDirectory()}}* contains native file separators when compared to *{{ourRsrcPath}}* with replaced file separators.

As a consequence, the outputDirecory becomes (is added as a) maven project resource and everything inside it if previously existing is copied into the target directory. In my case I specified the project root directory as outputDirectory so that Eclipse PDE finds the OSGI-INF folder in the place expected and added the root folder with an inclusion pattern of OSGI-INF/** to the project resources. The issue caused the whole project to get copied into the target/classes folder resulting in something like target/classes/target/classes, which maven-bundle-plugin is then complaining with an error because:
{code}
[ERROR] ... : Classes found in the wrong directory: {target/classes/target/clases/...=...}
{code}",Windows,,,,,,,,,,,,,,,,,,,09/Aug/15 16:23;philipp.kunz;FELIX-4999.patch;https://issues.apache.org/jira/secure/attachment/12749473/FELIX-4999.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-08-10 07:51:53.534,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Aug 15 08:42:55 UTC 2015,,,,,,0|i2ii9z:,9223372036854775807,,,,,,,,09/Aug/15 13:38;philipp.kunz;as a workaround it migth be possible to specify no outputDirectory and the copy the generated output to whereever desired,09/Aug/15 16:23;philipp.kunz;The attached patch should solve the problem but I was not able to verify it. Until no tests cover the improvement it's more like a suggestion. Also with the slash replacement I was not 100% sure why it was there in the first place.,"10/Aug/15 07:51;cziegeler;[~philipp.kunz] Thanks for reporting, I'Ve committed in rev 1694981 a slightly different fix. The idea of replacing the file separator char with ""/"" is basically to work with resource definitions that use any path character, e.g. there might be a resource definition for dir foo/bar in the pom, but the project is built on windows. I think I fixed all the places where this should matter with the patch. Could you please try this out?","10/Aug/15 20:09;philipp.kunz;The file separators are now compared correctly. However, I find one of my resources directory (*{{rsrc.getDirectory()}}* on line 546 now in SCRDescriptorMojo) ending up with a trailing *{{\.}}* which is not suitable for comparison. Eventually I figured I have added it myself.
{code}
<resources><resource><directory>.</directory>...
{code}
Nevertheless, *{{ourRsrcPath}}* is absolute due to *{{getAbsolutePath()}}* and *{{rsrc.getDirectory()}}* is not or not always.","10/Aug/15 20:26;philipp.kunz;[~cziegeler], have you ever thought about the case the outputDirectory of the maven-scr-plugin an existing directory which is not empty and at the same time not defined as a maven resource directory when scr is executed such as basedir in my case? Might happen rarely but would then be even more confusing. I have encountered a somewhat similar case with the complete project directory tree ending up copied into target/classes resulting in a build failure. I think I was lucky having got this problem reported by the bundle plugin but it has still wasted considerable amount of time to find out where the confusion originated from. With some inclusion pattern to cover exactly the generated files this case might have worked well. On the other hand I'm still not conviced of the added value of such behaviour as it would be quite easier to manually add a maven resource to the configuration when finding the generated stuff not ending up in the final artifact. For better understanding the purpose of {{<outputDirectory>${project.basedir}</outputDirectory>}} my intention in the first place was to get it known to Eclipse PDE so that I can launch my app from within the workspace. There might be more promising options, feel free to give me a hint. In case this might have become a little bit off-topic, I apologize in advance.",10/Aug/15 20:55;philipp.kunz;There are by the way quite a few occurrences of *{{<directory>.</directory>}}* inside Felix itself. Whether considered recommended or bad it should not necessarily break the build.,"11/Aug/15 05:54;cziegeler;I've committed a patch which should fix the ""."" problem. Could you please give this a try?

In fact, the scr plugin should work with an output directory which is not configured in the resources. However, having additional content in that output directory not generated by the plugin, seems uncommon. The plugin tries to be smart, but I guess there will always be a case where it fails. In general, especially when working with Eclipse, the best solution we're using is to let the scr plugin generate it's stuff into target/classes. This basically makes target/classes an expanded version of the resulting bundle jar which allows for easy bundle updates into your container (without building the jar) etc.
But I think for this issue we should focus on getting the dir path handling right",13/Aug/15 05:23;cziegeler;Assuming this is resolved,15/Aug/15 08:42;philipp.kunz;It is. Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependency Finder should use Inventory instead of deprecated ConfigurationPrinter,FELIX-4996,12852913,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,07/Aug/15 08:39,23/Sep/15 12:56,14/Mar/19 02:48,07/Aug/15 09:00,webconsole-packageadmin-plugin 1.0.0,,,,,,webconsole-packageadmin-plugin 1.0.2,,,,,,,Web Console,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 23 12:56:34 UTC 2015,,,,,,0|i2iglz:,9223372036854775807,,,,,,,,07/Aug/15 09:00;v_valchev;svn commit: r1694635,23/Sep/15 12:56;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when updating Apache Felix OSGi Management Console configuration without a password,FELIX-4995,12852905,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,07/Aug/15 08:12,23/Sep/15 12:52,14/Mar/19 02:48,07/Aug/15 08:15,webconsole-4.2.10,,,,,,webconsole-4.2.12,,,,,,,Web Console,,,,,,0,,,,,,"The following exception occurs, when you try to save the webconsole configuration from the web console config plugin:
{code}
java.lang.NullPointerException
	java.security.MessageDigest$Delegate(java.security.MessageDigest).update(byte[]) line: 293	
	java.security.MessageDigest$Delegate(java.security.MessageDigest).digest(byte[]) line: 368	
	org.apache.felix.webconsole.internal.servlet.Password.hashPassword(byte[], java.lang.String) line: 178	
	org.apache.felix.webconsole.internal.servlet.Password.hashPassword(java.lang.String, byte[]) line: 118	
	org.apache.felix.webconsole.internal.servlet.Password.hashPassword(java.lang.String) line: 77	
{code}

The implementation obviously expects password to be always set.
However initially the configuration doesn't exist and when you create it with web console, the password is not set yet.
However, if you do not edit the password in the configuration dialog, it is set to a PASSWORD_PLACEHOLDER_VALUE = ""unmodifed"".

Then the following code becomes the reason of the problem, because of the incorrect assumption:
{code}
// assumption: config is not null and as a non-null password String property
final String pwd = ( String ) config.get( OsgiManager.PROP_PASSWORD );
final String hashedPassword = Password.hashPassword( pwd );
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 23 12:52:17 UTC 2015,,,,,,0|i2igk7:,9223372036854775807,,,,,,,,07/Aug/15 08:15;v_valchev;fixed in svn commit: r1694628 ,23/Sep/15 12:52;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only first factoy configuration is used,FELIX-4990,12851264,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,cziegeler,cziegeler,04/Aug/15 00:36,11/Aug/15 05:09,14/Mar/19 02:48,04/Aug/15 01:04,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Right now, if several factory configurations are available in config admin while a component is activatd, only the first configuration is used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 04 01:04:45 UTC 2015,,,,,,0|i2ialb:,9223372036854775807,,,,,,,,04/Aug/15 01:04;cziegeler;Fixed in rev 1693990,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CopyOnWriteList.removeAll(Collection<?>) is incorrect causing failures for multiple cardinality resolution,FELIX-4989,12851208,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,tjwatson,tjwatson,03/Aug/15 21:02,20/Aug/15 19:16,14/Mar/19 02:48,19/Aug/15 07:53,,,,,,,resolver-1.6.0,,,,,,,Resolver,,,,,,0,,,,,,"The method org.apache.felix.resolver.Candidates.clearCandidates(Requirement, Collection<Capability>) uses the List.removeAll method which is backed by the org.apache.felix.resolver.util.CopyOnWriteList.removeAll(Collection<?>) implementation.

clearCandidates is used when a requirement has multiple cardinality and some subset of candidates causes a uses constraint violation.  The clearCandidates method will remove the offending capabilities as long as there is at least one remaining capability that does not cause a uses constraint violation.  The issue is the CopyOnWriteList.removeAll is not correct.  If the last element in the list is the only element to be removed then the logic ends up removing all elements (by constructing and empty data array).
",All,,,,,,,,,,,,,,,,,,,03/Aug/15 21:45;tjwatson;CopyOnWriteList.patch;https://issues.apache.org/jira/secure/attachment/12748543/CopyOnWriteList.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-08-19 07:53:12.877,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 20 19:16:11 UTC 2015,,,,,,0|i2ia9b:,9223372036854775807,,,,,,,,03/Aug/15 21:45;tjwatson;Possible fix.,"19/Aug/15 07:53;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	resolver/src/main/java/org/apache/felix/resolver/util/CopyOnWriteList.java
Committed r1696529
",20/Aug/15 19:16;tjwatson;Thanks for releasing the fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResolverImpl uses an internal ExecutorService,FELIX-4988,12851183,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,tjwatson,tjwatson,03/Aug/15 19:04,20/Aug/15 19:15,14/Mar/19 02:48,19/Aug/15 07:53,,,,,,,resolver-1.6.0,,,,,,,Resolver,,,,,,0,,,,,,"Latest code in trunk for org.apache.felix.resolver.ResolverImpl.ResolverImpl constructor will create an internal ExecutorService based on the results of Runtime.getRuntime().availableProcessors().

I would much rather be able to pass in my own ExecutorService so I can control the behavior and lifecycle of the executor myself.  The current implementation will create a new ExecutorService using java.util.concurrent.Executors.newFixedThreadPool(int) and shuts it down each resolve() operation.  It would be much better to be able to control the ExecutorService from outside of the ResolveImpl.

The code in its current form will force me to use org.apache.felix.resolver.ResolverImpl.ResolverImpl(Logger, int) and passing in 1 for parallelism to prevent extraneous thread creation for each framework resolve operation. ",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-19 07:53:58.263,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 20 19:15:00 UTC 2015,,,,,,0|i2ia3z:,9223372036854775807,,,,,,,,03/Aug/15 21:02;tjwatson;Possible fix.,"03/Aug/15 21:45;tjwatson;Sorry, attached the patch to the wrong issue.","19/Aug/15 07:53;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java
Committed r1696530
",20/Aug/15 19:15;tjwatson;Thanks for addressing the issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic package resolution with unresolvable or fragment package exports can lead to invalid wirings,FELIX-4987,12851135,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,tjwatson,tjwatson,03/Aug/15 15:50,21/Aug/15 18:17,14/Mar/19 02:48,20/Aug/15 12:33,,,,,,,resolver-1.6.0,,,,,,,Resolver,,,,,,0,,,,,,"With the latest code in trunk calling org.apache.felix.resolver.ResolverImpl.resolve(ResolveContext, Resource, Requirement, List<Capability>) with a List<Capability> containing a Capability from a fragment will lead to an invalid Wire.

This looks similar to FELIX-4897 and appears to be a regression.

There are two types of failures.
1) Where the fragment has a valid host to resolve against.  In this case I would expect the Wire.getProvider() to be the host revision for the fragment, but the current code returns the fragment revision

2) Where the fragment has no valid host available.  In this case I would expect no Wire to be returned in the result from the ResolverImpl.resolve call.",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-19 14:39:53.671,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Aug 21 18:17:01 UTC 2015,,,,,,0|i2i9tj:,9223372036854775807,,,,,,,,"03/Aug/15 19:33;tjwatson;There is a third case that is failing that involves no fragments.  If a candidate is passed in from an unresolvable host bundle then the resolver will return a Wire to the capability with an unresolvable revision.

I have not been able to track down what is missing, but some processing seems to be completely missing now on the dynamic import path.","19/Aug/15 14:39;gnt;For #1, the behaviour has not changed afaik.  I tried a simple test with the previous resolver, and it also returns the fragment as the provider.  I don't mind changing that behavior, but it's not really a regression imho.

For #2 and #3, I think there are some test cases available in equinox.  I've cloned the https://git.eclipse.org/r/equinox/rt.equinox.bundles git repo, but I run into some build issues.  Could you give me the steps to run your tests please ?

Also, as a side question, can you confirm that a dynamic resolution can lead to fragments being attached to new hosts and new hosts to be resolved ?","19/Aug/15 19:17;tjwatson;To run the Equinox tests you need 4 projects (which are located across 3 repositories).  First clone the following repositories:

git clone http://git.eclipse.org/gitroot/equinox/rt.equinox.framework.git
git clone http://git.eclipse.org/gitroot/platform/eclipse.platform.runtime.git
git clone http://git.eclipse.org/gitroot/platform/eclipse.platform.releng.git

rt.equinox.framework.git contains the framework implementation.  I created a branch there called twatson/newResolver that should have the latest felix resolver source.

Then import the following 4 projects into Eclipse (hope you don't mind using Eclipse):

rt.equinox.framework\bundles\org.eclipse.osgi - contains the framework implementation
rt.equinox.framework\bundles\org.eclipse.osgi.tests - contains the tests
eclipse.platform.runtime\tests\org.eclipse.core.tests.harness - harness for the tests
eclipse.platform.releng\bundles\org.eclipse.test.performance - something the harness needs

Once you have these 4 projects imported into Eclipse.  Then the easiest way to run all the tests is to use the Run->Run Configurations... menu to bring up the Run Configurations dialog.  There should be a predefined launch configuration under ""JUnit Plug-in Tests"" called ""All OSGi Tests"".  Run that.

This will run all the framework tests.  The important test suite to pay attention to is org.eclipse.osgi.tests.container.TestModuleContainer.  That suite has 3 failures with tests that start with testDynamicImport.  If you want you can run only the org.eclipse.osgi.tests.container.TestModuleContainer by modifying the ""All OSGi Tests"" launch config to use that class.

Dynamic resolution can lead to fragments being attached to new hosts.  I added a new test just now that tests that directly.  If you run the TestModuleContainer tests with the master branch they all pass.  With the twatson/newResolver branch 4 testDynamicImport tests fail.","20/Aug/15 12:33;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	resolver/src/main/java/org/apache/felix/resolver/Candidates.java
	M	resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java
	M	resolver/src/test/java/org/apache/felix/resolver/test/ResolverTest.java
Committed r1696779


The above commit seems to fix the use cases mentioned.
Could you please double check ?","20/Aug/15 19:10;tjwatson;This does seem to solve my problems.  One question on the fix.  The new method org.apache.felix.resolver.Candidates.getHosts() is misleading because it can return fragment resources.  I assume this is not your intention?

It seems to me that you need additional (!Util.isFragment(res)) checks in each loop before putting the resource in the hosts map.","20/Aug/15 19:36;gnt;That makes sense, thx for reporting.
I've fixed it.

Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	resolver/src/main/java/org/apache/felix/resolver/Candidates.java
Committed r1696846
",21/Aug/15 15:05;tjwatson;Thanks.  I merged the latest felix into my twatson/newResolver branch.  I'm still doing some work to figure out the best settings to use for the executor for the framework's use of the resolver.  You have any idea what the felix framework is going to do here?,"21/Aug/15 16:26;gnt;Currently, it lets the ResolverImpl handle threading with the default parameters, i.e. no Executor and a parallelisation equals to the number of cores.

The drawback is that it creates threads for each resolution. 
I suppose the best settings would be to give the ResolverImpl an Executor created with {{Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())}} with a lifecycle controlled by the framework.","21/Aug/15 18:17;tjwatson;I'm going to try something like the following so that the pool of threads quickly can go to zero threads when idle which is shortly after startup.

new ThreadPoolExecutor(
	// Always want to go to zero threads when idle
	0,
	// use the number of processors - 1 because we use the current thread when rejected
	Math.max(Runtime.getRuntime().availableProcessors() - 1, 1),
	// idle timeout; make it short to get rid of threads quickly after resolve
	5,
	// unit for timeout
	TimeUnit.SECONDS,
	// use sync queue to force thread creation
	new SynchronousQueue<Runnable>(),
	// try to name the threads with useful name
	new ThreadFactory() {
		@Override
		public Thread newThread(Runnable r) {
			return new Thread(r, ""Resolver thread - "" + adaptor.toString()); //$NON-NLS-1$
		}
	},
	// use a rejection policy that simply runs the task in the current thread once the max threads is reached
	new RejectedExecutionHandler() {
		@Override
		public void rejectedExecution(Runnable r, ThreadPoolExecutor exe) {
			r.run();
		}
	});

I register a different instance of the resolver as a service, for that I will likely use the default behavior which will create/shutdown the internal executor.  If that proves to be an issue then I may register it using a PrototypeSeviceFactory such that the executor is created/shutdown when the new service object is created/destroyed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"To prevent server information disclosure on error page, jetty 9.3.2 should be used",FELIX-4983,12850309,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,apailhes,apailhes,30/Jul/15 16:58,01/Apr/16 07:41,14/Mar/19 02:48,07/Jan/16 08:00,http.jetty-3.0.2,,,,,,http.jetty-3.2.0,,,,,,,HTTP Service,,,,,,0,,,,,,"According to this commit: 
https://github.com/eclipse/jetty.project/commit/6428718962b26ece54736da897ac9755eda265e2
jetty information is no more used in ErrorHandler (aka Jetty.POWERED_BY_HTML is removed).

So, for security purpose(information disclosure threat), it would be usefull to use jetty 9.3.2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-31 05:01:22.214,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 07 08:00:48 UTC 2016,,,,,,0|i2i4sn:,9223372036854775807,,,,,,,,"31/Jul/15 05:01;cziegeler;Jetty 9.3.x requires Java 8, most of our users are still on Java 7",07/Jan/16 08:00;cziegeler;Updated to jetty 9.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Jetty] Document change in default behaviour of sendServerHeader,FELIX-4982,12850291,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,apailhes,cziegeler,30/Jul/15 15:38,10/Aug/15 06:46,14/Mar/19 02:48,10/Aug/15 06:46,http.jetty-3.0.2,,,,,,http.jetty-3.1.0,,,,,,,HTTP Service,,,,,,0,,,,,,"According to http://felix.apache.org/documentation/subprojects/apache-felix-http-service.html#configuration-properties, org.apache.felix.http.jetty.sendServerHeader default value is ""false"".
In fact, if you look the code, it's ""true"".
See org.apache.felix.http.jetty.internal.JettyConfig#isSendServerHeader on the trunk:
{code}
    public boolean isSendServerHeader()
    {
        return getBooleanProperty(FELIX_JETTY_SEND_SERVER_HEADER, true);
    }
{code}

Can we just set ""false"" as documented?",,,,,,,,,,,FELIX-4981,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-30 15:38:39.165,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 10 06:46:31 UTC 2015,,,,,,0|i2i4on:,9223372036854775807,,,,,,,,30/Jul/15 15:38;cziegeler;This issue is to update the docs once the release is out,10/Aug/15 06:46;cziegeler;Fixed in rev 1694964,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Jetty] Change default behaviour of sendServerHeader from true to false,FELIX-4981,12850275,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,apailhes,apailhes,30/Jul/15 14:57,10/Aug/15 06:42,14/Mar/19 02:48,30/Jul/15 15:39,http.jetty-3.0.2,,,,,,http.jetty-3.1.0,,,,,,,HTTP Service,,,,,,0,,,,,,"According to http://felix.apache.org/documentation/subprojects/apache-felix-http-service.html#configuration-properties, org.apache.felix.http.jetty.sendServerHeader default value is ""false"".
In fact, if you look the code, it's ""true"".
See org.apache.felix.http.jetty.internal.JettyConfig#isSendServerHeader on the trunk:
{code}
    public boolean isSendServerHeader()
    {
        return getBooleanProperty(FELIX_JETTY_SEND_SERVER_HEADER, true);
    }
{code}

Can we just set ""false"" as documented?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-30 15:16:11.654,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jul 30 15:43:18 UTC 2015,,,,,,0|i2i4l3:,9223372036854775807,,,,,,,,"30/Jul/15 15:16;cziegeler;Thanks for reporting, I think the docs are wrong - and to have the least surprises for people updating, I'll correct the docs",30/Jul/15 15:23;cziegeler;Updated the docs,"30/Jul/15 15:33;antoine.dessaigne;Hi,

Since it's nowadays considered as a security issue to send back those headers, it's not better to prevent from sending them by default ?

Thanks a lot.","30/Jul/15 15:35;cziegeler;I guess it is and we can do this for the 3.1 release, but right now the behaviour is different :)",30/Jul/15 15:39;cziegeler;Changed the default behaviour in rev 1693444,"30/Jul/15 15:43;antoine.dessaigne;Thanks a lot, that was fast !",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add capabilities for metatype R6,FELIX-4980,12850273,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,30/Jul/15 14:55,13/Oct/15 08:12,14/Mar/19 02:48,07/Aug/15 00:14,,,,,,,metatype-1.1.0,,,,,,,Metatype Service,,,,,,0,,,,,,The R6 spec defines some capabilities to be declared by the metatype implementation. We need to add them,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-13 08:12:34.146,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 13 08:12:34 UTC 2015,,,,,,0|i2i4kn:,9223372036854775807,,,,,,,,07/Aug/15 00:14;cziegeler;Added in 1694588. The implemenation is now fully R6 compliant,13/Oct/15 08:12;kwin;What about https://issues.apache.org/jira/browse/FELIX-4687? Is this already supported in 1.1.0 as well. Can we close that as duplicate?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Jetty] String array properties are not parsed correctly when supplied through framework properties,FELIX-4979,12849994,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,apailhes,apailhes,29/Jul/15 17:11,10/Aug/15 06:42,14/Mar/19 02:48,30/Jul/15 06:25,http.jetty-3.0.2,,,,,,http.jetty-3.1.0,,,,,,,HTTP Service,,,,,,0,,,,,,"According to https://issues.apache.org/jira/browse/FELIX-4376, it's possible to configure excluded cipher suites with a comma-separated list.
But in fact it does not work because org.apache.felix.http.jetty.internal.JettyConfig#getStringArrayProperty does not parse correctly property.

On associated patch, test(org.apache.felix.http.jetty.internal.JettyConfigTest#testParseStringArrayProperty) and correction(on trunk)
",,,,,,,,,,,,,,,,,,,,29/Jul/15 17:12;apailhes;FELIX-4979_ParseStringArrayProperty.patch;https://issues.apache.org/jira/secure/attachment/12747817/FELIX-4979_ParseStringArrayProperty.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-07-30 06:19:12.781,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jul 30 06:25:56 UTC 2015,,,,,,0|i2i2v3:,9223372036854775807,,,,,,,,"30/Jul/15 06:19;cziegeler;Thanks for your patch Adrien, it's applied in rev 1693389.

The string array is handled correctly if it's passed in as a configuration from config admin, problematic - and this is fixed with this patch - is passing it in as a system/framework property",30/Jul/15 06:25;cziegeler;I've fixed the metatype generation in rev 1693390,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrency issue with factory services,FELIX-4977,12849907,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,cziegeler,cziegeler,29/Jul/15 11:34,31/Aug/15 05:14,14/Mar/19 02:48,31/Jul/15 14:41,framework-5.0.1,,,,,,framework-5.2.0,,,,,,,Framework,,,,,,0,,,,,,"It seems there is a chance that a service object returned for a factory service is already unget. The scenario is like this:
Two threads from the same bundle get the same service which happens to be a service factory.
While the first thread calls already ungetService, the second thread is in the getService method. The second service gets the same object as the first one, but as the first one passed ""successfully"" through ungetService, the object is unget and - depending on how its implemented - not usable anymore.

After some analysis together with David, it seems that both threads get the same usage count object, the ungetService thread decreases the count to zero before the getService thread increases it.
Therefore the service object is unget but at the same returned to the next client",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-30 10:40:56.358,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jul 31 14:41:48 UTC 2015,,,,,,0|i2i2dr:,9223372036854775807,,,,,,,,29/Jul/15 14:57;cziegeler;Added a test case in 1693285 exposing the problem (this test passes with 4.6.1),30/Jul/15 10:40;bosschaert;Commit http://svn.apache.org/viewvc?view=revision&revision=1693406 fixes nearly all the cases. I occasionally see the test case failing with 1 violation (down from a couple of hundreds before). I'm leaving the bug open for now as we need to look into that occasional failure too.,"31/Jul/15 14:41;bosschaert;With the following commits, the sporadic test failure of ServiceRegistryTest.testGetUngetServiceFactory() have been resolved: 

http://svn.apache.org/viewvc?view=revision&revision=1693602
http://svn.apache.org/viewvc?view=revision&revision=1693609
http://svn.apache.org/viewvc?view=revision&revision=1693612",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DM filter indices not enabled if the dependencymanager bundle is started first,FELIX-4974,12849450,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,27/Jul/15 21:48,30/Nov/15 12:54,14/Mar/19 02:48,27/Jul/15 21:51,  org.apache.felix.dependencymanager-r5,,,,,,org.apache.felix.dependencymanager-r6,,,,,,,Dependency Manager,,,,,,0,,,,,,"Optimized DM filter indices are not enabled if the org.apache.felix.dependencymanager bundle is started before any other bundles that contain a DM Activator.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 27 21:51:48 UTC 2015,,,,,,0|i2hznb:,9223372036854775807,,,,,,,,"27/Jul/15 21:51;pderop;Committed a fix in revision 1692960.

Now with the patch, If the DM bundle is already started, then the static initializer in the DependencyManager class will enable any configured filter indices.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] With configuration annotations, coercion exceptions are thrown at the wrong time.",FELIX-4968,12846378,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,20/Jul/15 22:22,11/Aug/15 05:09,14/Mar/19 02:48,20/Jul/15 22:34,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"the spec indicates that coercion exceptions should be thrown when the annotation member is accessed, not when the coercion is originally attempted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 20 22:34:06 UTC 2015,,,,,,0|i2hgwf:,9223372036854775807,,,,,,,,20/Jul/15 22:34;djencks;r1692035,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Configuration annotations need to handle char and char[],FELIX-4967,12846377,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,20/Jul/15 22:20,11/Aug/15 05:09,14/Mar/19 02:48,20/Jul/15 22:33,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I forgot to handle char and char[] types.

Also, clarification of the boolean/Number situation indicates that this should be handled with ((Number)0).doubleValue != 0 rather than truncating to int as I originally implemented.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 20 22:33:35 UTC 2015,,,,,,0|i2hgw7:,9223372036854775807,,,,,,,,20/Jul/15 22:33;djencks;r1692034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Configuration annotations with invalid members handled incorrectly,FELIX-4965,12846106,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,18/Jul/15 16:25,11/Aug/15 05:09,14/Mar/19 02:48,18/Jul/15 18:14,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,Given a component configuration annotation with an invalid member (annotation or annotation array type) we're supposed to provide an annotation instance and throw a ComponentException if someone tries to access it.  Current implementation doesn't know quite what to do and returns null for the whole configuration annotation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jul 18 18:14:45 UTC 2015,,,,,,0|i2hf8v:,9223372036854775807,,,,,,,,18/Jul/15 18:14;djencks;r1691762,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Reactivate component at most once per service event,FELIX-4964,12845981,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,17/Jul/15 20:33,11/Aug/15 05:09,14/Mar/19 02:48,18/Jul/15 18:13,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"When a component has several references to the same service (most likely scenario is field references for object, properties, service ref all for the same service) and a service event results in the component being deactivated and activated (such as a static reference being replaced by another) then we should only reactivate the component instance once.

The solution I have in mind involves distributing events to the service trackers for the components in a bundle through the BundleComponentActivator and tracking the components that need to be activated with the event.  Once all the relevant service trackers have been notified, we can try to activate all the components relevant to that service event.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-18 09:57:23.547,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jul 18 18:13:38 UTC 2015,,,,,,0|i2hei7:,9223372036854775807,,,,,,,,"18/Jul/15 09:57;cziegeler;I'm not sure if your idea is similar to my thoughts: right now we have a separate tracker for each reference, this are informed asynchronously and independently on a change. What about having a single tracker tracking all changes and this one knows the internal trackers we have right now. Once a change comes in, it goes through the list of all these internal trackers, calculates the change set and then acts on that set. So basically instead of letting the framework service reg do the dispatching, we do it ourselfs.","18/Jul/15 14:38;djencks;You'll be able to see my idea soon.... it seems to be working.
Trackers are much much more complicated than service listeners, and the initial query part is not part of this problem.
We have to do this per bundle, since we have no practical way of replicating the service hooks that determine which events are visible to which bundles.
Sending an event to the outside world involves a security check, so I'd prefer to reduce the number of events shown to a bundle if practical.

So my solution is for the BundleComponentActivator to register a ServiceListener for each service class for which there is at least one dependency manager, and to distribute the events received to the dependency managers for that bundle after filtering and creating appropriate endmatch events from modified events.  Since the service tracker already doesn't propagate events to unknown service refs, we don't need to worry about only generating endmatch events for refs that previously actually matched, so this path is slightly simpler than the one in the service registry.","18/Jul/15 16:55;cziegeler;Ok, got it - sounds great to me",18/Jul/15 18:13;djencks;r1691760,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eventadmin leaks caller's security context downstream,FELIX-4963,12845707,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,rotty3000,rotty3000,16/Jul/15 20:21,24/Oct/15 11:47,14/Mar/19 02:48,20/Jul/15 17:07,eventadmin-1.4.2,,,,,,eventadmin-1.4.4,,,,,,,Event Admin,,,,,,0,,,,,,,any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-16 20:37:46.558,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Oct 24 11:47:45 UTC 2015,,,,,,0|i2hcuf:,9223372036854775807,,,,,,,,"16/Jul/15 20:37;githubbot;GitHub user rotty3000 opened a pull request:

    https://github.com/apache/felix/pull/27

    FELIX-4963 Eventadmin leaks caller's security context downstream

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rotty3000/felix FELIX-4963

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/27.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #27
    
----
commit 0fa7eff96371d5fab9c82d7625c2a9e8761ab612
Author: Raymond Auge <raymond.auge@liferay.com>
Date:   2015-07-16T20:22:34Z

    FELIX-4963 Eventadmin leaks caller's security context downstream

----
","20/Jul/15 16:41;cziegeler;[~rotty3000] You catch the access controller in the constructor but never use this, I guess you want to use that in the thread?",20/Jul/15 16:53;rotty3000;It's used at line 241!,20/Jul/15 16:53;rotty3000;https://github.com/rotty3000/felix/commit/0fa7eff96371d5fab9c82d7625c2a9e8761ab612#diff-7764f10ab0fe43bbb2ff645b9f10ad82R241,"20/Jul/15 17:07;cziegeler;D'oh - forgot my glasses, so sorry for noise...

Thanks for the patch Ray, its applied in rev 1691981","24/Oct/15 11:47;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/27
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configadmin leaks caller's security context downstream,FELIX-4962,12845706,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,rotty3000,rotty3000,16/Jul/15 20:15,24/Oct/15 11:47,14/Mar/19 02:48,20/Jul/15 17:30,configadmin-1.8.6,,,,,,configadmin-1.8.8,,,,,,,Configuration Admin,,,,,,0,,,,,,,any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-16 20:36:37.636,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Oct 24 11:47:46 UTC 2015,,,,,,0|i2hcu7:,9223372036854775807,,,,,,,,"16/Jul/15 20:36;githubbot;GitHub user rotty3000 opened a pull request:

    https://github.com/apache/felix/pull/26

    FELIX-4962 Configadmin leaks caller's security context downstream

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rotty3000/felix FELIX-4962

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/26.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #26
    
----
commit 8a27b56dfc3c0572941a8d702f57e30feb27d83a
Author: Raymond Auge <raymond.auge@liferay.com>
Date:   2015-07-16T20:18:44Z

    FELIX-4962 Configadmin leaks caller's security context downstream

----
","20/Jul/15 17:30;cziegeler;Thanks for your patch Ray, it'S applied in rev 1691989","24/Oct/15 11:47;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/26
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in BundleRevisionImpl.getResourcesLocal(),FELIX-4960,12845195,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,15/Jul/15 07:16,31/Aug/15 05:14,14/Mar/19 02:48,15/Jul/15 07:44,framework-4.4.0,framework-5.0.1,,,,,framework-5.2.0,,,,,,,Framework,,,,,,0,,,,,,"In some situations a NPE can be observed in the BundleRevisionImpl.getResourcesLocal() method.

{code}java.lang.NullPointerException: null
   at org.apache.felix.framework.BundleRevisionImpl.getResourcesLocal(BundleRevisionImpl.java:531)
   at org.apache.felix.framework.BundleWiringImpl.findResourcesByDelegation(BundleWiringImpl.java:1191)
   at org.apache.felix.framework.BundleWiringImpl.getResourcesByDelegation(BundleWiringImpl.java:1101)
   at org.apache.felix.framework.BundleWiringImpl$BundleClassLoaderJava5.getResources(BundleWiringImpl.java:1888){code}

The offending line of code is: 
{code}  for (int i = 0; i < contentPath.size(); i++){code}
So it seems that contentPath is null in some cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-15 07:26:16.924,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 15 07:44:55 UTC 2015,,,,,,0|i2h9tb:,9223372036854775807,,,,,,,,"15/Jul/15 07:26;gzres;I had similar issue, when old BundleClassLoader was used to get resources. This was the case described in ARIES-1161 and the [fix|https://github.com/apache/aries/commit/760dac830ac7a84f628a27dc680a9ba6ee1ba711] was to switch the key from bundle to bundle wiring.
The problem occurred after updating bundle. Old bundle wiring (and classloader) was invalid, but was still used leading to NPE in Felix code.","15/Jul/15 07:33;bosschaert;Right - there is actually a more specific exception that is being logged from this line of code in getContentPath(): 
{code}((BundleImpl) m_bundle).getFramework().getLogger().log(m_bundle, Logger.LOG_ERROR, ""Unable to get module class path."", ex);{code}
However execution continues after this leading to the NPE. I think the NPE should not happen in either case...",15/Jul/15 07:44;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1691137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS][RFC-212] Various issues with field references,FELIX-4957,12844365,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,11/Jul/15 11:47,14/Dec/15 13:40,14/Mar/19 02:48,16/Jul/15 07:04,,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"1. The DS spec states that non-volatile fields with dynamic references is an error. These fields must not be injected. See 112.3.8.1:

""For a dynamic reference, the field must be declared with the volatile modifier so that field value changes made by SCR are visible to other threads. If the field is not declared with the volatile modifier, SCR must log an error message with the Log Service, if present, and the field must not be modified.""

2. When a field with a dynamic reference holds the service properties of the referenced service, the field must be modified when the referenced service's properties are changed.

See 112.3.8.1: ""For a dynamic reference with unary cardinality, SCR must set the field with initial bound service, if any, before the component instance is activated. When there is a new bound service or the service properties of the bound service are modified and the field holds service properties, SCR must replace the field value. ""

3. When a component uses a static field reference holding properties for the referenced service and these service properties change, DS must reactivate the component to inject the updated service properties.

See 112.3.8.1: ""For a static reference, SCR must set the value of the field before the component instance is activat- ed and must not change the field while the component is active.""
So the component must be reactivated to receive the updated service properties.

4. When a final field is used as a reference, DS must activate the component but not set the field value.

See 112.3.8.1: ""If the field is declared with the final modifier, SCR must log an error message with the Log Service, if present, and the field must not be modified.""

5. If a field reference is optional and there is no bound service, DS must null the field.

See 112.3.8.1: ""If the reference has optional cardinality and there is no bound service, SCR must set the field value to null.""

6. The spec says that for an optional reference with no target services, DS must inject an empty mutable collection/list. Currentyl DS is not injecting the field and leaving the constructor set value.

From 112.3.8.1:
""Before the component instance is activated, SCR must set the field with a new mutable collection that must contain the initial set of bound services sorted using the same ordering as ServiceReference.compareTo based upon service ranking and service id. The new collection may be empty if the reference has optional cardinality and there are no bound services.""

7. The DS spec, 112.3.8, says:

""If the update option is used when not permitted, SCR must log an error message with the Log Service, if present, and the field must not be modified.""
",,,,,,,,,,,,,,FELIX-5139,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 14 05:42:19 UTC 2015,,,,,,0|i2h4x3:,9223372036854775807,,,,,,,,"11/Jul/15 13:47;cziegeler;Fixed the following issues in rev 1690370
1. The check for volatile was not done in all cases - and if it failed, the component was not activated. Added missing checks and added a way to ignore the reference but activate the component
4. If a final field was used, component was not activated - now the field is ignored but the component is activated.","11/Jul/15 14:48;cziegeler;Fixed the following issue in rev 1690372:

2. When a field with a dynamic reference holds the service properties of the referenced service, the field must be modified when the referenced service's properties are changed.","12/Jul/15 09:31;cziegeler;Fixed the following issue in rev 1690437:
5. If a field reference is optional and there is no bound service, DS must null the field.","12/Jul/15 10:28;cziegeler;Fixed the remaining issue in rev 1690440:
3. When a component uses a static field reference holding properties for the referenced service and these service properties change, DS must reactivate the component to inject the updated service properties.","14/Jul/15 05:42;cziegeler;Fixed this issue in rev 1690864:
 The spec says that for an optional reference with no target services, DS must inject an empty mutable collection/list. Currentyl DS is not injecting the field and leaving the constructor set value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Connect fails to build on Java 1.5,FELIX-4952,12843299,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,karlpauls,njbartlett,njbartlett,07/Jul/15 20:53,08/Jul/15 13:51,14/Mar/19 02:48,08/Jul/15 12:19,,,,,,,connect-0.2.0,,,,,,,Connect,,,,,,0,,,,,,"The maven animal sniffer plugin reports the following API violations:

{noformat}
[ERROR] /Users/nbartlett/Projects/felix-svn/connect/src/main/java/org/apache/felix/connect/PojoSR.java:107: Undefined reference: java.util.Enumeration java.util.Collections.emptyEnumeration()
[ERROR] /Users/nbartlett/Projects/felix-svn/connect/src/main/java/org/apache/felix/connect/URLRevision.java:53: Undefined reference: java.util.Enumeration java.util.Collections.emptyEnumeration()
{noformat}

Note that the {{Collections.emptyEnumeration()}} method is only available in Java 1.7+.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-08 12:19:39.21,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 08 13:51:28 UTC 2015,,,,,,0|i2gygn:,9223372036854775807,,,,,,,,"08/Jul/15 12:19;karlpauls;I added the sniffer plugin to the pom and fixed the two violations in configuration java15 version1.0. 

Please close this issue if it works for you with java5 now (can't test this atm - don't have java5 around anymore apparently).","08/Jul/15 12:53;njbartlett;Hi Karl, I can't test on java5 either. I actually don't care about java5, I just wanted the build to work, which it didn't because of the animal-sniffer settings.

What is the policy with regard to minimal java version for this project?

Thanks, Neil","08/Jul/15 12:57;karlpauls;I can't think of any reason why it shouldn't target java5. I did add the animal sniffer with java1.5 and did set the maven-compiler to target 1.5 too (which seems to work). 

Just see if it builds for you now and close this issue if it does - thanks for reporting!",08/Jul/15 13:08;njbartlett;Confirmed this works.,08/Jul/15 13:51;cziegeler;[~karlpauls] You could use the new parent pom versoin 3 which has everything configured for the animals sniffer plugin etc.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS][RFC-190] Correct pid handling,FELIX-4951,12843007,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,06/Jul/15 22:25,11/Aug/15 05:09,14/Mar/19 02:48,12/Jul/15 11:07,,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"The DS 1.3 spec requires multiple service.pid values to be coalesced into a Collection<String> but only if there are multiple values. When there is only a single service.pid value, it must remain a scalar String. 

Furthermore, DS 1.3 adds support for a component to specify multiple pid values in a whitespace separated list. See section 112.4.4:

""Multiple configuration PIDs can be specified by using a whitespace separated list in the attribute.""

For example:

configuration-pid=""org.osgi.test.cases.component.tb23.MultiplePID1 org.osgi.test.cases.component.tb23.MultiplePID2""

When specifying multiple pids (with configuration-policy=""require"" and the configurations present in CM), the current implementation does not satisfy the component. So the component is not activated and does not register its service.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jul 12 11:07:23 UTC 2015,,,,,,0|i2gwnz:,9223372036854775807,,,,,,,,06/Jul/15 22:26;cziegeler;Fixed the first issue in rev 1689515,07/Jul/15 00:48;cziegeler;Fixed the second issue in rev 1689540,"11/Jul/15 11:45;cziegeler;Another issue:
When a more targeted configuration is created, scr will deactivate the component and activate a new instance rather than call the modified method as required by the spec. 

configuration-policy=""optional"" works as expected and calls the modified method. ",12/Jul/15 11:07;cziegeler;Fixed the issue in rev 1690444,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS][RFC-190] Within a component instance for each reference to the same service the same object needs to be injected,FELIX-4950,12842755,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,05/Jul/15 23:53,11/Aug/15 05:09,14/Mar/19 02:48,06/Jul/15 01:32,,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"When using reference scope prototype (or prototype_required), when a component instance references the same service multiple time, each reference must use the same service instance rather than a unique instance.

See DS spec section 122.3.5:

prototype: 
That is, for a given bound service, each component instance may use a distinct service object but within a component instance all references to the bound service will use the same service object.

prototype_required:
That is, for a given bound service, each component instance will use a distinct service object but within a component instance all references to the bound service will use the same service object.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 06 01:32:01 UTC 2015,,,,,,0|i2gv5r:,9223372036854775807,,,,,,,,06/Jul/15 01:32;cziegeler;Fixed in rev 1689302 by keeping track of prototype instances per service reference,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Escaped folder names makes ConfigAdmin incompatible and factory configs not always work,FELIX-4945,12841667,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,balazs.zsoldos,balazs.zsoldos,30/Jun/15 11:26,10/Aug/15 07:11,14/Mar/19 02:48,30/Jul/15 14:08,configadmin-1.8.6,,,,,,configadmin-1.8.8,,,,,,,Configuration Admin,,,,,,0,,,,,,"The fix of FELIX-4302 raises other issues:

 - Old configurations that start with reserved names, are not read and components are not instantiated
 - The same configurations are not working on windows and other operating systems anymore. Till now, we could copy the configuration folder between computers with different operating system and it worked pretty well
 - Strangely, factory.config files from old configurations were found, but the actual configuration files were not

This issues come from the fix of FELIX-4302.

I would suggest that instead of

 - having a Set winDevNames in FilePersist and
 - callng winDevNames.equals(dir.substring(0, 3))

create a separate function like isReservedName and handle the different names separately. E.g.: directory names starting with ""com"" should be escaped only if there is a number afterwards and nothing else.

Handle reserved names in the same way on every operating system!!! Now the  configuration that works on windows, will not work on linux (if we simply copy the configuration folders to another system).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-06 00:57:43.027,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jul 30 14:08:03 UTC 2015,,,,,,0|i2gokf:,9223372036854775807,,,,,,,,"30/Jun/15 11:30;balazs.zsoldos;I left the priority of the issue as default. However, this is a blocker issue for everyone who had folder names started with reserved words in windows.",06/Jul/15 00:57;cziegeler;[~balazs.zsoldos] Are all issues mentioned here only happening on windows?,"06/Jul/15 07:52;balazs.zsoldos;[~cziegeler] Yes. See the usage of _winDevNames_ variable in _FilePersistentManager_ class.

The other issue is that by storing files on windows in a different way, the same configuration cannot be moved between operating systems. That is why I said that although these names are not preserved on Linux or Mac, they should be handled in the same way as in Windows.","06/Jul/15 07:54;balazs.zsoldos;Shall I prepare a patch that:

 - Uses a regular expressions to check if a folder name is preserved instead of startsWith (e.g.: com1 will be preserved but component will not)
 - Handles folder names in the same way on every operating system

If there is a chance that it is accepted, I will spend some time to prepare the patch.","06/Jul/15 22:08;cziegeler;[~balazs.zsoldos] A patch is definitely welcome.
I'm not so sure about handling the folder names the same on every operating system. I see the reason behind it. If we do this, it must be compatible to the current way, which means on non windows systems the old configs need to be read correctly and maybe then converted?","30/Jul/15 13:20;balazs.zsoldos;I created a pull request, that escapes only those folder names on windows that are truly reserved words. By applying this patch, configadmin will be compatible with version 1.8.2 again.

Pull request: https://github.com/apache/felix/pull/32
","30/Jul/15 14:08;cziegeler;Thanks for your patch Balazs, it's applied in rev 1693428",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration Properties not defined in Metatype are lost after update,FELIX-4941,12840701,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,gossmer,gossmer,26/Jun/15 00:26,03/Jun/16 10:53,14/Mar/19 02:48,31/May/16 07:23,webconsole-4.2.14,webconsole-4.2.8,,,,,webconsole-4.2.16,,,,,,,Web Console,,,,,,3,,,,,,"Web console when updating items that have metadata will only update the properties defines in metadata.

This means, the fileinstall file location is removed from the property update. This makes so fileinstall will no longer update the configuration
file with the change. A simple workaround is to always post back the fileinstall property if present. 

In the ConfigAdminSupport.java file added these lines. In the method applyConfiguration at line 312, insert these lines:

            // Add Fileinstall key or the property will not get written back to the configuration
            if (props.get(""felix.fileinstall.filename"") != null)
            {
                updateProps.put(""felix.fileinstall.filename"", props.get(""felix.fileinstall.filename""));
            }

If you return the fileinstall filename then fileinstall will save any property changes.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-04 21:08:53.949,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue May 31 07:23:55 UTC 2016,,,,,,0|i2giof:,9223372036854775807,,,,,,,,"04/Mar/16 21:08;dosgiuser;Is this still an issue with 4.2.15?  This is a pretty bad issue.  We have a lot of configuration we drop in with fileinstall... then users will go to the webconsole to refine the properties.  As soon as they do that, the config pid is now completely disconnected from the backing file.  The worst part is that if you restart felix/karaf, fileinstall will see the file and reinstall it so now you have 2 separate configurations which breaks a lot of things.","04/Mar/16 21:55;gossmer;yes, this is still an issue.",05/Mar/16 10:02;cziegeler;I think the web console should leave all configuration properties which are not in the metatype description untouched,31/May/16 07:23;cziegeler;I've updated the web console to leave all properties not covered by metatype as-is,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException on shutdown if sessions have been created,FELIX-4937,12840347,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,24/Jun/15 21:41,10/Aug/15 06:36,14/Mar/19 02:48,25/Jun/15 14:45,,,,,,,http.base-3.0.0,http.jetty-3.1.0,,,,,,HTTP Service,,,,,,0,,,,,,"java.lang.IllegalArgumentException: Context cannot be null!
	at org.apache.felix.http.base.internal.service.PerBundleHttpServiceImpl.<init>(PerBundleHttpServiceImpl.java:74)
	at org.apache.felix.http.base.internal.service.HttpServiceFactory.getService(HttpServiceFactory.java:137)
	at org.apache.felix.http.base.internal.whiteboard.HttpServiceContextHandler.getServletContext(HttpServiceContextHandler.java:82)
	at org.apache.felix.http.base.internal.whiteboard.WhiteboardManager.sessionDestroyed(WhiteboardManager.java:252)
	at org.apache.felix.http.base.internal.HttpServiceController$1.sessionDestroyed(HttpServiceController.java:76)
	at org.apache.felix.http.base.internal.EventDispatcher.sessionDestroyed(EventDispatcher.java:56)
	at org.eclipse.jetty.server.session.AbstractSessionManager.removeSession(AbstractSessionManager.java:772)
	at org.eclipse.jetty.server.session.AbstractSession.invalidate(AbstractSession.java:326)
	at org.eclipse.jetty.server.session.HashSessionManager.shutdownSessions(HashSessionManager.java:447)
	at org.eclipse.jetty.server.session.AbstractSessionManager.doStop(AbstractSessionManager.java:304)
	at org.eclipse.jetty.server.session.HashSessionManager.doStop(HashSessionManager.java:192)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.server.session.SessionHandler.doStop(SessionHandler.java:127)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:835)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStop(ServletContextHandler.java:215)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.server.Server.doStop(Server.java:456)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.apache.felix.http.jetty.internal.JettyService.stopJetty(JettyService.java:218)
	at org.apache.felix.http.jetty.internal.JettyService.stop(JettyService.java:164)
	at org.apache.felix.http.jetty.internal.JettyActivator.doStop(JettyActivator.java:66)
	at org.apache.felix.http.base.internal.AbstractActivator.stop(AbstractActivator.java:47)
	at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:719)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2604)
	at org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:1013)
	at org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:1000)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 25 14:45:33 UTC 2015,,,,,,0|i2ggjz:,9223372036854775807,,,,,,,,25/Jun/15 14:45;cziegeler;Solved by stopping (deactivating) the event dispatcher on shutdown,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Singleton getService() sometimes incorrectly returns null,FELIX-4928,12837761,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,bosschaert,bosschaert,bosschaert,15/Jun/15 07:37,13/Aug/15 12:30,14/Mar/19 02:48,15/Jun/15 09:12,framework-5.0.0,,,,,,framework-5.0.1,,,,,,,Framework,,,,,,0,,,,,,Sometimes in a multithreaded environment getService() on a singleton service returns null where this shouldn't happen.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-15 07:54:46.249,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jun 15 09:26:37 UTC 2015,,,,,,0|i2g19r:,9223372036854775807,,,,,,,,15/Jun/15 07:54;chris@die-schneider.net;Do you have steps to reproduce this problem? ,"15/Jun/15 08:33;bosschaert;Yeah, its quite easy to reproduce if you run my service registry performance test that can be found here: https://github.com/bosschaert/coderthoughts/tree/master/service-registry-perftest

This will report null services for the SingleBundleSingletonRunner where it should really not report null services.",15/Jun/15 09:12;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1685519,15/Jun/15 09:26;chris@die-schneider.net;Great you found it so fast.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Felix reports itself as an OSGi R4/R5 Framework,FELIX-4927,12837511,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,12/Jun/15 21:04,13/Aug/15 12:30,14/Mar/19 02:48,12/Jun/15 21:10,framework-5.0.0,,,,,,framework-5.0.1,,,,,,,Framework,,,,,,0,,,,,,The Framework version reported in the Bundle-Description header of the framework is incorrect. It should be R6.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 12 21:10:32 UTC 2015,,,,,,0|i2fzqn:,9223372036854775807,,,,,,,,12/Jun/15 21:10;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1685172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Request path is not decoded,FELIX-4925,12837383,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,12/Jun/15 11:51,02/Nov/15 23:36,14/Mar/19 02:48,13/Jun/15 07:55,,,,,,,http.base-3.0.0,http.jetty-3.1.0,,,,,,HTTP Service,,,,,,0,,,,,,The dispatcher servlet currently uses req.getRequestURI() to get the full path of the request. However this information is not decoded and therefore when the path contains unicode characters the encoded version is used instead of the real path.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-12 17:23:06.088,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jun 13 07:55:46 UTC 2015,,,,,,0|i2fyyn:,9223372036854775807,,,,,,,,"12/Jun/15 12:06;cziegeler;Neither getRequestURI nor getRequestURL return the decoded string, therefore they are not useful.
While getServletPath() and getPathInfo() return the decoded values, they don't include path parameters (like ;v=1.0).
I've now committed a version which:
- uses the decoded values unless the path contains a "";"", in that case getRequestURL is used

This can only be seen as a temporary solution.

It seems that the Jetty's servlet implementation does not provide any access to path parameters, therefore I'm wondering why we want to do this? Or maybe I'm overlooking something.

[~jajans] What do you think? ",12/Jun/15 13:35;cziegeler;Previous versions of the http service did not provide access to this either,"12/Jun/15 15:19;cziegeler;Looking at this, simply using servletPath + pathInfo seems to be the correct thing to do; it's compatible to what we had before, compatible to what Jetty does, does not introduce any regression. If no one objects I'll go with that",12/Jun/15 17:23;jajans;[~cziegeler]: returning the servletPath + pathInfo sounds like the soundest option to me as well...,13/Jun/15 07:55;cziegeler;Resolved as discussed in rev 1685217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SslFilterResponse doesn 't take in account ssl-forward.header property,FELIX-4923,12837352,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,asanso,asanso,12/Jun/15 08:55,05/Aug/16 08:32,14/Mar/19 02:48,02/Aug/16 07:30,,,,,,,http.sslfilter-1.0.8,,,,,,,HTTP Service,,,,,,0,,,,,,"{{SslFilterResponse}} doesn 't take in account {{ssl-forward}}.header property.
Indeed the {{SslFilterResponse}} constructor hardcodes {{HDR_X_FORWARDED_PROTO}}.

{code}
...
request.getHeader(HDR_X_FORWARDED_PROTO);
...
{code}

the  {{ssl-forward}} osgin configuration should be taken in account IMHO. The default is even different than {{HDR_X_FORWARDED_PROTO}} indeed is rather {{X-Forwarded-SSL}}",,,,,,,,,,,,,,,,,,,,01/Aug/16 10:00;asanso;FELIX-4923-patch.txt;https://issues.apache.org/jira/secure/attachment/12821298/FELIX-4923-patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-02 06:48:22.698,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 02 07:30:35 UTC 2016,,,,,,0|i2fyrz:,9223372036854775807,,,,,,,,02/Oct/15 06:48;cziegeler;[~asanso] Is this still an issue?,02/Oct/15 06:54;asanso;[~cziegeler] I'd say so....,"02/Oct/15 07:26;cziegeler;[~asanso] If I understand the code correctly, X-Forwaded-SSL is checked to see whether the filter should run at all, and then the harded headers are used to get the protocol and the port. Not sure if that makes sense or not. In any case, care to make a patch?",02/Oct/15 07:46;asanso;Sure. I'll propose a patch...,13/Jun/16 12:27;cziegeler;[~asanso] Do we still need to do something about this?,13/Jun/16 12:30;asanso;[~cziegeler] is a minor nice to have.,01/Aug/16 09:14;asanso;attaching proposed patch,01/Aug/16 10:00;asanso;update patch with better tests,"01/Aug/16 10:24;kwin;[~asanso] Even in your patch you making some assumptions about the header name and value. Is the comparison 
{code}
if (cfg.sslValue.equalsIgnoreCase(httpReq.getHeader(cfg.sslHeader))) 
{code}
not enough here?

In case we really want to distinguish between the 3 cases:
1) HTTPS terminated at proxy in front, Felix accessed through HTTP
2) HTTP terminated at proxy in front, Felix accessed through HTTPS
3) Felix directly accessed through HTTP or HTTPS
we need to extend the OSGi configuration with a value for use case 2) as well.","01/Aug/16 10:46;asanso;[~kwin]

bq. ...not enough here?

not enough :(

bq. we need to extend the OSGi configuration with a value for use case 2) as well.
fine to me let's tackle in another issue though",02/Aug/16 07:30;cziegeler;Thanks for your patch [~asanso]. It's applied,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sslfilter does not preserve fragment in redirect,FELIX-4920,12837232,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,joerghoh,joerghoh,11/Jun/15 20:38,10/Aug/15 06:36,14/Mar/19 02:48,16/Jun/15 06:18,http.sslfilter-1.0.0,,,,,,http.sslfilter-1.0.2,,,,,,,HTTP Service,,,,,,0,,,,,,"I have an application which behaves like this when sslfilter-0.0.1 is installed:

$ curl -v -u admin:admin -H ""X-Forwarded-SSL:on"" ""http://localhost/bin/command?cmd=open&path=/page""

GET /bin/command?cmd=open&path=/page HTTP/1.1
...
< HTTP/1.1 302 Found
< Date: Mon, 08 Jun 2015 19:10:33 GMT
< Expires: Thu, 01 Jan 1970 00:00:00 GMT
< Location: /cf#/page.html

Then I deployed sslfilter-1.0.0

$ curl -v -u admin:admin -H ""X-Forwarded-SSL:on"" ""http://localhost/bin/command?cmd=open&path=/page""
...
GET /bin/command?cmd=open&path=/page HTTP/1.1
...
< HTTP/1.1 302 Found
< Date: Mon, 08 Jun 2015 19:10:06 GMT
< Expires: Thu, 01 Jan 1970 00:00:00 GMT
< Location: https://localhost/cf

As you can see, the protocol is changed accordingly (that's why I wanted to update), but the fragment part of the location header (#/page.html) is not preserved.

I tracked it down to FELIX-4420, where the rewriting of the location was implemented.

",,,,,,,,,,,,,,,,,,,,11/Jun/15 20:40;joerghoh;sslfilterDoesNotPreserverUriFragment.patch;https://issues.apache.org/jira/secure/attachment/12739124/sslfilterDoesNotPreserverUriFragment.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-06-16 06:18:21.848,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 16 06:18:21 UTC 2015,,,,,,0|i2fy2f:,9223372036854775807,,,,,,,,11/Jun/15 20:40;joerghoh;A patch including the testcase to demonstrate the behaviour plus a fix. It basically changes the handling to use a URI instead of a URL.,"16/Jun/15 06:18;cziegeler;Thanks for your patch, Jörh. It's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable not escaping property values as Metatype default values,FELIX-4919,12837148,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,CptBartender,CptBartender,11/Jun/15 14:30,23/Jul/15 16:11,14/Mar/19 02:48,12/Jun/15 10:37,maven-scr-plugin 1.15.0,,,,,,maven-scr-plugin 1.21.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"A while ago, there was a bug that caused all spaces in default property value to be ""doubly escaped"" in metatype descriptors. However, this makes it not possible to use unescaped spaces in the default values, which are needed for, among others, Apache Sling's Scheduler expressions (like ""/5 * * * * ? *"", meaning ""every 5 seconds""). Please make it possible to use spaces in default values.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-11 15:44:50.677,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 12 10:37:29 UTC 2015,,,,,,0|i2fxkn:,9223372036854775807,,,,,,,,11/Jun/15 14:30;CptBartender;Fix for this issue caused this bug.,"11/Jun/15 15:44;cziegeler;[~CptBartender] Thanks for reporting, can you please confirm whether this problem still exists in the latest version of the plugin and maybe provide a simple test project for verification?","12/Jun/15 10:37;CptBartender;[~cziegeler] I've updated to 1.21.0 and it seems to be working fine - descriptors contain a single-backslash-escaped spaces which work fine on OSGi for my use case.

Resolving as Fixed with the latest released as the Fix Version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FilePersistenceManager doesn't support comments,FELIX-4917,12836138,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,tuerkben,tuerkben,08/Jun/15 12:57,10/Aug/15 07:10,14/Mar/19 02:48,18/Jun/15 06:08,configadmin-1.8.0,,,,,,configadmin-1.8.8,,,,,,,Configuration Admin,,,,,,0,,,,,,"The following config file cannot be parsed and read as we would expect.
Spaces seem to be supported.
{noformat}
#mongodb URI
mongouri=mongodb=""//127.0.0.1:27017""

#custom datastore
customBlobStore=B""true""
{noformat}

{code:java}
@Test
public void testLoad() throws IOException {
	FilePersistenceManager filePersistenceManager = new FilePersistenceManager(getClass().getResource(""/config"").getFile());
	@SuppressWarnings(""unchecked"")
	Dictionary<String,Boolean> cfg = filePersistenceManager.load(""test"");
	assertTrue(cfg.get(""customBlobStore""));
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-18 06:08:16.311,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 18 06:08:16 UTC 2015,,,,,,0|i2fren:,9223372036854775807,,,,,,,,18/Jun/15 06:08;cziegeler;Added support for comments in rev 1686141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Provide service capability,FELIX-4916,12835977,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,07/Jun/15 04:18,11/Aug/15 05:09,14/Mar/19 02:48,07/Jun/15 08:54,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"cmpn spec requires that a DS implementation state something like this:
{code}
Provide-Capability: osgi.service;
                       objectClass:List<String>=
                         ""org.osgi.service.component.runtime.ServiceComponentRuntime"";
                       uses:=""org.osgi.service.component.runtime""
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-07 08:54:08.272,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jun 07 08:54:08 UTC 2015,,,,,,0|i2fq6v:,9223372036854775807,,,,,,,,"07/Jun/15 04:22;djencks;r1683985, leaving open till I know it passes the CT",07/Jun/15 08:54;cziegeler;ct passes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolution problem with identity requirements on fragments,FELIX-4914,12835684,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,05/Jun/15 11:07,13/Aug/15 12:30,14/Mar/19 02:48,12/Jun/15 14:39,framework-5.0.0,resolver-1.2.0,,,,,framework-5.0.1,resolver-1.4.0,,,,,,,,,,,,1,,,,,,"When a fragment has a requirement that can be fulfilled by another fragment, there are chances that the resolution fail, depending on the order in which fragments are considered.  The {{Candidates#prepare}} method is not complete, and in some cases, can leave non-wrapped capabilities in the candidates map, possibly leading to usage constraints problems.

I have a test case which I'm trying to clean a bit.",,,,,,,,,,KARAF-3757,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-12 14:53:57.415,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 12 15:12:02 UTC 2015,,,,,,0|i2focn:,9223372036854775807,,,,,,,,"08/Jun/15 07:02;gnt;Actually, the problem comes from the fact that the WrappedResource does not include identities from fragments.
In my model, I use a dummy resource as the only mandatory resource and add to that one several requirements, usually identity requirements.
However, the WrappedResource explicitly filter out identity capabilities, so this leads to those use constraints conflicts.

I pushed a possible fix in a private branch at
  https://github.com/gnodet/felix/commits/FELIX-4914

The idea is to add the fragments identity capabilities to the wrapped host as done for all other capabilities, then make sure the wire is correctly created to the actual fragment.

If there's no objections, I'll commit the fix to trunk.
[~rickhall] [~tjwatson] Thoughts ?
","12/Jun/15 14:39;gnt;Committed r1685088
",12/Jun/15 14:53;bosschaert;[~gnt] That commit only contains test changes and currently the trunk has a test failure. Did you have more changes to commit?,"12/Jun/15 15:11;gnt;Yeah, of course, sorry about that. It seems ""git svn dcommit"" only send a single commit...
It should be ok now.","12/Jun/15 15:12;gnt;Committed r1685090
Committed r1685100
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DM Optional callbacks may sometimes be invoked twice,FELIX-4913,12835297,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,04/Jun/15 06:32,09/Jun/15 21:39,14/Mar/19 02:48,04/Jun/15 21:09,org.apache.felix.dependencymanager-r3,,,,,,  org.apache.felix.dependencymanager-r5,,,,,,,Dependency Manager,,,,,,0,,,,,,"The following use case is not currently supported by the DM state machine, which suffers from a bug where sometimes, when the use case happens, the same optional callback may be invoked twice.

The following case is supported by DS, so DM should support it, regardless of the fact that the design of this use case is arguable/questionable:

- there is a component B
- there is a component BFactory (registered in the OSGI registry). And BFactory.createB() creates a B instance and simply registers it in the OSGi registry.
- there is a A component that has two OPTIONAL dependencies:

{code}
  A.bind(BFactory)
  A.bind(B b)
{code}

- Then A is created and is starting. Since BFactory is available, the DM state machine for A transits from the INSTANTIATED_AND_WAITING_FOR_REQUIRED into the  TRACKING_OPTIONAL state:

{code}
        if (oldState == ComponentState.INSTANTIATED_AND_WAITING_FOR_REQUIRED && newState == ComponentState.TRACKING_OPTIONAL) {
            invokeAutoConfigInstanceBoundDependencies();
            invokeAddRequiredInstanceBoundDependencies();
            invoke(m_callbackStart);
            invokeAddOptionalDependencies();
            registerService();
            notifyListeners(newState);
            return true;
        }
{code}

- then, when the invokeAddOptionalDependencies() is running, it is invoking A.bind(BFactory b). At this exact point, the A.bind(BFactory) method calls bf.createB():

{code}
A.bind(BFactory bf) {
    bf.createB();
}
{code}

- this has the following side effect: a B service is synchronously registered in the OSGI service registry. So ComponentImpl.handleAdded() is called, and since we are in the
TRACKING_OPTIONAL state (we are entering into this state), then the A.bindB(B b) callback is invoked.

- BUT ... we are still running in the invokeAddOptionalDependencies() method. So when that method is about to iterate on the available services of the B dependency, then it calls a
second time the ""A.bind(B)"" callback.

I have a patch for this use case, which I have extensively tested since two days.

To preserve my soul, the patch is simple and conservative: I use the same technique that was done in the ConfigurationDependencyImpl class: I'm using a cache of callbacks that ensures that the same callback won't be invoked more than one time. The advantage of this patch is that it does not make too much polutions in the state machine which is not altered too much.

I will also commit a test case which demonstrates the issue.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 04 10:26:17 UTC 2015,,,,,,0|i2fm7b:,9223372036854775807,,,,,,,,"04/Jun/15 06:58;pderop;Committed in revision 1683471 the org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX4913_OptionalCallbackInvokedTwiceTest.java which reproduces the issue.
","04/Jun/15 10:26;pderop;Commited the patch in 1683504.

Now, a hashtable is used to keep track of all invoked callbacks. An IdentityHashMap is used to make sure that a ""change"" event will be different from an ""add"" event (in case both may refer to the same ServiceReference instance).

When we invoke a component dependency callback in ComponentImpl, we are now using the invokeCallbackSafe which won't invoke the same callback twice. 

When handleEvent is called, the clearInvokeCallbackCache() method is called at the end of the method, but this method will only clear the cache of invoked callbacks if the handleChange is not currently running.

Also added some comments and did some code cleanup.
Removed the handleChange() method call from the startDependencies() method (this is useless).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentExecutorFactory does not allow to return null from getExecutorFor method.,FELIX-4910,12834226,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,01/Jun/15 12:44,09/Jun/15 21:39,14/Mar/19 02:48,04/Jun/15 21:09,org.apache.felix.dependencymanager-r3,,,,,,  org.apache.felix.dependencymanager-r5,,,,,,,Dependency Manager,,,,,,0,,,,,,"When providing a ComponentExecutorFactory in the OSGi service registry, then all components that are not black listed by the ""org.apache.felix.dependencymanager.parallel"" system property are managed and started concurrently, using the executor returned by the ComponentExecutorFactory.getExecutorFor(Component c) method.

This issue concerns the case when the getExecutorFor(Component c) method returns null, which normally indicates that the component should be handled synchronously (like in the normal case), and not concurrently.

But currently, returning null from getExecutorFor() method is not supported and does not work.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 04 21:09:15 UTC 2015,,,,,,0|i2fgdz:,9223372036854775807,,,,,,,,04/Jun/15 21:09;pderop;Fixed in the trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationDependency calls updated(null) when component is stopped.,FELIX-4907,12832884,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,26/May/15 22:26,09/Jun/15 21:39,14/Mar/19 02:48,04/Jun/15 21:08,org.apache.felix.dependencymanager-r3,,,,,,  org.apache.felix.dependencymanager-r5,,,,,,,Dependency Manager,,,,,,0,,,,,,"When a component has a Configuration Dependency, the updated callback is invoked with a null Dictionary when the omponent is stopped.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-01 12:05:40.616,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 04 21:08:47 UTC 2015,,,,,,0|i2f887:,9223372036854775807,,,,,,,,"26/May/15 22:51;pderop;Added testFELIX4907() method in ConfigurationDependencyTest.java, which is reproducing this issue.
","29/May/15 07:22;pderop;I did more checks and compared the old bahavior that was used by DM3 when a configuration is lost:

in DM3, when a component defines a ConfigurationDependency:

1) when the configuration is lost; component.updated(null) is called, and then the component.stop() is called (the component is stopped).
2) when the component is removed (with ""dm.remove(c)""), the component.stop() is just called, and component.updated(null) is not called.

but in DM4:

1) when the configuration is lost, component.stop() is first called, then component.updated(null) is called.

2) when the component is removed (with ""dm.remove(c)""), the component.stop() is first called, then component.updated(null) is called.

So, in DM4, we should following the same behavior as in DM3: when the component is stopped, we should not call updated(null).

Now, I'm hesitant about the following other issues:

- when the configuration is lost, should we really invoke updated(null) ? After all, the component will be called in its component.stop() callback, so do we really need to invoke updated(null) ? Thanks for confirming ?

- When the configuration is lost (deleted), in DM3 we called component.updated(null) in the current ConfigurationAdmin thread, then we called component.stop(). But in DM4, we first stop the component (we call component.stop(); possibly in another thread than the ConfigurationAdmin thread), and then we call component.updated(null). 
So, should we reverse the order, like in DM3: first invoke component.updated(null), then invoke component.stop() ?
","01/Jun/15 12:05;marrs;I think the DM3 behaviour makes sense. It only invokes updated(null) if the configuration is indeed deleted, and that leaves the component the opportunity to react on that (if it wants to do something). Only after that the component is then stopped.","01/Jun/15 12:29;chris@die-schneider.net;I think this behaviour is good as it allows the updated method to clean up.

For example I use the same behaviour outside DM in plain OSGi with config admin. I create a class when config is available and destroy it when the config is null.
So if updated is called with null when then bundle is stopped this allows to clean up without adding some special callback when the bundle stops. It is simply the same behaviour as if the user deletes the config. So +1 for keeping this functionality. On the other hand it of course makes sense to have a test that checks for it and kind of documents the behaviour.","04/Jun/15 21:08;pderop;Thanks, I have committed the patches, and updated the ConfigurationDependencyTest.java integration test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Framework does not export org.osgi.service.resolver,FELIX-4905,12832530,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,25/May/15 15:02,13/Aug/15 12:29,14/Mar/19 02:48,25/May/15 15:10,framework-5.0.0,,,,,,framework-5.0.1,,,,,,,Framework,,,,,,0,,,,,,"The Felix Framework provides (as of the 5.0.0 release) the org.osgi.service.resolver.Resolver service. However, it does not export the resolver package, so consumers can never get wired to this service.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon May 25 15:10:40 UTC 2015,,,,,,0|i2f62v:,9223372036854775807,,,,,,,,25/May/15 15:10;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1681593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic package resolution with fragment package exports can lead to invalid wirings,FELIX-4897,12831587,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,tjwatson,tjwatson,21/May/15 02:49,22/May/15 14:04,14/Mar/19 02:48,21/May/15 13:58,resolver-1.0.0,,,,,,resolver-1.4.0,,,,,,,Resolver,,,,,,0,,,,,,"Similar to FELIX-4428 but the behavior is a regression since the fix for FELIX-4656 was released.  The issue is only with dynamic import package resolution.  In this case a new CopyOnWriteList is created by Candidates.add(Requirement, List<Capability>) from the method Candidates.populateDynamic(ResolveContext, Resource, Requirement, List<Capability>) but the original List<Capability> list may be modified in the next call to Candidates.processCandidates(ResolveContext, Resource, List<Capability>)

The issue is that processCandidates is responsible for inserting hosted capabilities into the candidates List.  Previously to the fix for FELIX-4656 the passed in List was used as is so modifying it later would effect the list stored in the Candidates data structure also.  This is no longer the case.",All,,,,,,,,,,,,,,,,,,,21/May/15 12:52;tjwatson;FELIX-4897.patch;https://issues.apache.org/jira/secure/attachment/12734444/FELIX-4897.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-05-21 13:58:30.994,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri May 22 14:04:10 UTC 2015,,,,,,0|i2f0uv:,9223372036854775807,,,,,,,,21/May/15 02:55;tjwatson;Possible fix is to return the internal copy of the candidates when adding them to Candidates so we can modify them correctly when inserting hosted capabilities for dynamic package resolution,21/May/15 12:52;tjwatson;Alternative fix.  This fix is likely better because it behaves more closely to the normal resolution flow where processCandidates is called before adding the candidate lists to the Candidates data structure.,"21/May/15 13:58;rickhall;The patch looks simple enough, I've applied. Please close if satisfied, thanks!",21/May/15 14:23;bosschaert;See here for a test case: http://git.eclipse.org/c/equinox/rt.equinox.framework.git/commit/?id=2e359683d0064e3bc331ed25677c8fea128cbfee,22/May/15 14:04;tjwatson;Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceComponentRuntime.getComponentConfigurationDTOs NullPointerException,FELIX-4883,12827787,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,bosschaert,rryan@adobe.com,rryan@adobe.com,06/May/15 19:50,11/Aug/15 05:09,14/Mar/19 02:48,28/May/15 18:55,,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In our test automation we install a large set of bundles after our also large 'main' app starts up. This causes significant churn as bundles and components are stopped and potentially new versions are started. Unfortunately the coded involved is not open source, so I cannot deliver the full data required to reproduce  the failure described here.

What I can share is that after all this churn of bundles and components being stopped and started the ScrComponentRuntime service starts to fail with a NullPointerException in getComponentConfigurationDTOs. This was initially noticed as an NPE being reported when visiting the felix console at /system/console/components.

The stack at the point of failure is:
java.lang.NullPointerException
	at org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.serviceReferenceToDTO(ServiceComponentRuntimeImpl.java:205)
	at org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.satisfiedRefManagersToDTO(ServiceComponentRuntimeImpl.java:169)
	at org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.managerToConfiguration(ServiceComponentRuntimeImpl.java:145)
	at org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.getComponentConfigurationDTOs(ServiceComponentRuntimeImpl.java:119)
	at com.robr.incqtest.test.ScrTest.test(ScrTest.java:37)
	...

The NPE occurs because a org.apache.felix.framework.ServiceRegistrationImpl.ServiceReferenceImpl being processed in org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.serviceReferenceToDTO(org.osgi.framework.ServiceReference<?>) line: 205	

has a m_svcObj of null. So even though the bundle is actually available in the object the getBundle() method returns null.

[~cziegeler] [~bosschaert] I can investigate further to ideally narrow this down further, but any pointers would be much appreciated.","Linux, Sling, Adobe CQ, org.apache.felix.scr version 1.8.3-R1658944",,,,,,,,,,,,,,,,,,,06/May/15 19:55;rryan@adobe.com;scrtest.zip;https://issues.apache.org/jira/secure/attachment/12730933/scrtest.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-05-21 09:54:15.538,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu May 28 18:55:23 UTC 2015,,,,,,0|i2edtj:,9223372036854775807,,,,,,,,"06/May/15 19:55;rryan@adobe.com;This project is a sling remote junit test  which exhibits the NPE described *once* an instance is in a bad state.

Unfortunately I cannot yet publicly share the collateral which generates the bad state.","12/May/15 21:13;rryan@adobe.com;The root cause which led to discovery of this NPE was a component which (mis)handled its own service registration. It could at times attempt to update its service registration properties while not actually registered.

I think it is appropriate for clients of ServiceReference.getBundle() to handle a null return, but that was not a root cause to our actual problem.

A 'minor' priority seems appropriate, so setting as such.","21/May/15 09:54;bosschaert;[~rryan@adobe.com] how should I run your attached test case? It's a test, but it's in src/main so won't be executed by the maven test running. Moving it to the test subdirectory gives me a NPE, but I think its a different one:
{code}test(com.robr.incqtest.test.ScrTest)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.apache.sling.junit.annotations.SlingAnnotationsTestRunner.createTest(SlingAnnotationsTestRunner.java:43)
	at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java{code}","21/May/15 15:28;djencks;I don't understand your suggestion.  The code in question:
{code}
		Bundle[] usingBundles = serviceRef.getUsingBundles();
		if (usingBundles != null)
        {
            long[] usingBundleIds = new long[usingBundles.length];
            for (int i = 0; i < usingBundles.length; i++)
            {
                usingBundleIds[i] = usingBundles[i].getBundleId();  <<<<<NPE!!
            }
            dto.usingBundles = usingBundleIds;
        }
{code}
So serviceRef.getUsingBundles(); has returned an array with at least one null.

This is probably incorrect, but it might be wiser to allow for this potential bug in frameworks and just ignore null bundles?
{code}
		Bundle[] usingBundles = serviceRef.getUsingBundles();
		if (usingBundles != null)
        {
            long[] usingBundleIds = new long[usingBundles.length];
            int i = 0;
            for (Bundle usingBundle: usingBundles)
            {
                if (usingBundle != null) {
                    usingBundleIds[i++] = usingBundle.getBundleId();
                }
            }
            if (i < usingBundleIds.length) {
                usingBundleIds = Arrays.copyOf(usingBundleIds, i);
            }
            dto.usingBundles = usingBundleIds;
        }
{code}
","21/May/15 15:45;rryan@adobe.com;The particular point where this exception was seen was:

	private ServiceReferenceDTO serviceReferenceToDTO( ServiceReference<?> serviceRef)
	{
		ServiceReferenceDTO dto = new ServiceReferenceDTO();
		Bundle bundle = serviceRef.getBundle(); // <-- NPE was here.
		

This is the kind of context where checking null may be appropriate defensiveness IMO...

But in the end the bug originates with bad calling of the service registration APIs where a call to update service registration properties while the service was unregistered resulted in bad state in the SCR. I can try to reduce the proprietary code to an example which can be publicly disclosed.","21/May/15 19:39;bosschaert;I guessed that the problem may be there, but rather than guessing I prefer to run your testcase so that I can be sure that the problem is fixed. You have attached a testcase, but I can't run it. I would appreciate if you could tell me how to run the testcase (a simple 'mvn install' didn't work as mentioned above) so that I can expose the problem and then ensure that its fixed.","22/May/15 12:47;bosschaert;I mistakenly thought that the attached zip contained a testcase. [~rryan@adobe.com], I have put a defensive check for nulls on the line that you indicated: http://svn.apache.org/viewvc?view=revision&revision=1681073
As creating a ServiceReferenceDTO for a null ServiceReference does not make any sense, I'm having it return null. I have also updated the calling side to be able to deal with the null return value: http://svn.apache.org/viewvc?view=revision&revision=1681097

Please reopen if this doesn't fix it for you.","22/May/15 20:11;rryan@adobe.com;Sorry. my previous comment was in error I was looking at a version I had made to test the behavior.

The actual line which NPEs is:

dto.bundle = serviceRef.getBundle().getBundleId();

In this line serviceRef being null *or* serviceRef.getBundle() returning null can cause an NPE.

In our case it was serviceRef.getBundle() returning null which caused the issue.

I will try to make time to abstract the proprietary code into a publicly disclosable form that can demonstrate what is happening.
","28/May/15 16:10;rryan@adobe.com;It is proving difficult to provoke the failure through an isolated  test case. But code inspection and testing with variations of the code have convinced me the situation goes like this:

ServiceRegistration.setProperties checks up front for a valid service object, but it lets go of its lock on the ServiceRegistrationImpl before it calls the ServiceListeners. That means that the ServiceRegistrationImpl delivered to a ServiceListener can become invalid before the serviceChanged method of a listener is called. This is coupled with an inappropriate assumption in org.apache.felix.scr.impl.manager.ServiceTracker<S, T>. In org.apache.felix.scr.impl.manager.ServiceTracker.Tracked.serviceChanged(ServiceEvent) :

				case ServiceEvent.REGISTERED :
				case ServiceEvent.MODIFIED :
					track(reference, event);

This means that delivery of a ServiceEvent.MODIFIED can have the same effect as a ServiceEvent.REGISTERED, and can re-track a service registration that is actually already invalid!

Bottom line I think is that ServiceRegistration *and* ServiceReference uses need to be aware that any time a lock is not held on the ServiceRegistration the object can become invalid. At which point the bundle becomes unavailable (getBundle returns null).

While I haven't unraveled all the implications for the ServiceTracker implementation yet, it appears some additional synchronization is necessary within the ServiceTracker to ensure that service registration changes from separate threads don't result in an invalid state of the system.

[~lbyrum]","28/May/15 17:43;bosschaert;[~rryan@adobe.com], [~lbyrum], in general in the Felix codebase there are no locks held when calling into custom code (i.e. listeners) as you have no idea what this code is doing; if custom code is called while holding a lock this may increase the chances of deadlock situations. I'm not sure whether it's a good idea to change this. 

Wrt to the ServiceTracker being incorrect. It might be good to take this discussion to [osgi-dev|https://mail.osgi.org/mailman/listinfo/osgi-dev] or [osgi bugzilla|https://osgi.org/bugzilla/]. The ServiceTracker class in scr is actually a copy of the [org.osgi.util.tracker.ServiceTracker|https://osgi.org/javadoc/r5/core/org/osgi/util/tracker/ServiceTracker.html] class developed by OSGi and since this is quite a complex class it might be better to discuss it where the original authors can participate.

On the actual symptom. I guess it would do no harm in changing the dto.bundle assignment to check that getBundle() does not return null. Would this help?","28/May/15 17:54;rryan@adobe.com;Yes, lets please at least harden the line:

dto.bundle = serviceRef.getBundle().getBundleId();

In this line serviceRef being null or serviceRef.getBundle() returning null can cause an NPE.

This would allow the felix console to remain usable for non-impacted components at least.

","28/May/15 17:58;bosschaert;One other comment, from https://osgi.org/javadoc/r5/core/org/osgi/framework/ServiceReference.html#getBundle():

bq. This method must return null when the service has been unregistered. This can be used to determine if the service has been unregistered.

So maybe the current behaviour is correct, although the dto.bundle assignment should be updated to take this into account.","28/May/15 18:55;bosschaert;I added the defensive check for serviceRef.getBundle() returning null as agreed. I guess that's all we can do on this one for now. If any of the other points raised need additional fixes, please raise new issues for those.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error while downloadig full text config in BundlesServlet: IllegalArgumentException: Invalid local link,FELIX-4872,12825991,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,joelrich,joelrich,29/Apr/15 16:02,11/Aug/15 05:08,14/Mar/19 02:48,29/Apr/15 16:08,,,,,,,webconsole-ds-plugin-2.0.0,,,,,,,Web Console,,,,,,0,,,,,,"When downloading the full text config from /system/console/config, it logs the following error:

{code}29.04.2015 16:39:18.692 *ERROR* [qtp1487714743-156] org.apache.felix.http.jetty %bundles.pluginTitle: Problem rendering Bundle details for configuration status (java.lang.IllegalArgumentException: Inval
java.lang.IllegalArgumentException: Invalid local link
        at org.apache.felix.webconsole.bundleinfo.BundleInfoType.validate(BundleInfoType.java:96)
        at org.apache.felix.webconsole.bundleinfo.BundleInfo.<init>(BundleInfo.java:54)
        at org.apache.felix.webconsole.plugins.ds.internal.InfoProvider.toInfo(InfoProvider.java:110)
        at org.apache.felix.webconsole.plugins.ds.internal.InfoProvider.getBundleInfo(InfoProvider.java:92)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.bundleInfoDetails(BundlesServlet.java:844)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.bundleDetails(BundlesServlet.java:826)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.bundleInfo(BundlesServlet.java:731)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.writeJSON(BundlesServlet.java:626)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.printConfiguration(BundlesServlet.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.felix.inventory.impl.webconsole.ConfigurationPrinterAdapter.invoke(ConfigurationPrinterAdapter.java:313)
        at org.apache.felix.inventory.impl.webconsole.ConfigurationPrinterAdapter.printConfiguration(ConfigurationPrinterAdapter.java:257)
        at org.apache.felix.inventory.impl.webconsole.WebConsoleAdapter$WebConsolePrinter.print(WebConsoleAdapter.java:215)
        at org.apache.felix.inventory.impl.InventoryPrinterAdapter.print(InventoryPrinterAdapter.java:148)
        at org.apache.felix.inventory.impl.helper.ConfigurationWriter.printInventory(ConfigurationWriter.java:52)
        at org.apache.felix.inventory.impl.AbstractWebConsolePlugin.printConfigurationInventory(AbstractWebConsolePlugin.java:66)
        at org.apache.felix.inventory.impl.AbstractWebConsolePlugin.doGet(AbstractWebConsolePlugin.java:130)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:618)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
        at org.apache.felix.webconsole.internal.WebConsolePluginAdapter.renderContent(WebConsolePluginAdapter.java:123)
        at org.apache.felix.webconsole.AbstractWebConsolePlugin.doGet(AbstractWebConsolePlugin.java:202)
{code}

The path of the problematic component is ""null/components/1339"". The null is taken from a null webConsoleRoot which originates from a null pluginRoot passed to writeJSON in printConfiguration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-29 16:08:31.087,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 29 16:08:31 UTC 2015,,,,,,0|i2e36f:,9223372036854775807,,,,,,,,29/Apr/15 16:08;cziegeler;I'Ve fixed this some weeks ago in rev 1658720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The felix framework logger can't be used with reflection anymore,FELIX-4871,12825490,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,28/Apr/15 11:07,13/Oct/16 06:09,14/Mar/19 02:48,08/Mar/16 08:43,framework-5.0.0,,,,,,framework-5.6.0,,,,,,,,,,,,,0,,,,,,Not being able to use reflection means you need to create a separate jar for the logger so that it can be loaded with the required framework classes.,,,,,,,,,,KARAF-3744,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-28 11:25:38.161,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 07 13:30:05 UTC 2016,,,,,,0|i2e06f:,9223372036854775807,,,,,,,,"28/Apr/15 11:25;cziegeler;Reflection doesn't look like a good/stable contract; it's easy to break this without knowing.
Can you explain a little bit what exactly the issue is? When instantiating the framework you can provide your own logger","26/Jun/15 12:30;gnt;The logger needs to inherit the felix logger.  This cause class loader constraints.
Specifically, karaf loads the framework in a different class loader, so the Main class which creates the framework using the framework launch API can't provide a logger if not using reflection.","07/Mar/16 13:30;gnt;Possible fix at
   https://github.com/gnodet/felix/tree/FELIX-4871",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Callbacks not invoked for dependencies that are added after the component is initialized,FELIX-4869,12825438,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,brampouwelse,brampouwelse,28/Apr/15 06:52,26/May/15 21:54,14/Mar/19 02:48,28/Apr/15 23:06,org.apache.felix.dependencymanager-r2,,,,,,org.apache.felix.dependencymanager-r3,,,,,,,Dependency Manager,,,,,,0,,,,,,"When adding a ServiceDependency after the component is initialized the dependency manager doesn't invoke callbacks for services already registered before the dependency was added.

I'm using the 4.0.1 version of the dependency manager.

I've created a small example to demonstrate the issue. 
{code:title=TestComponent.java}
...
public class TestComponent {
  private volatile DependencyManager dm; 
  private volatile Component c; 
  
  public void addDependency(){
    c.add(dm.createServiceDependency().setService(Object.class).setCallbacks(""add"", ""remove""));
  }
  
  public void add(ServiceReference<?> ref) {
   System.out.println(""added "" + ref)
  }
  
  public void remove(ServiceReference<?> ref) {
    System.out.println(""removed "" + ref)
  }
} 
{code}

When the dependency is added *after* the services are registered the add callback is never invoked. 
{code:title=Activator.java}
...
@Override
public void init(BundleContext ctx, DependencyManager dm) throws Exception {
	TestComponent testComponent = new TestComponent();
	dm.add(createComponent().setImplementation(testComponent));
 
	ctx.registerService(Object.class, new Object(), null);
	ctx.registerService(Object.class, new Object(), null);

	testComponent.addDependency();  
}
...
{code}

When the dependency is added *before* the services are registered the add callback are invoked. 
{code:title=Activator.java}
...
@Override
public void init(BundleContext ctx, DependencyManager dm) throws Exception {
	TestComponent testComponent = new TestComponent();
	dm.add(createComponent().setImplementation(testComponent));
		
	testComponent.addDependency();  
 
	ctx.registerService(Object.class, new Object(), null);
	ctx.registerService(Object.class, new Object(), null);
}
...
{code}

I've noticed something similar when adding multiple service dependencies in the init method. When adding the dependencies in one call to Component#add(Dependency...) everything seems to work as expected but when calling the add method one component at a time callbacks not invoked for the second service dependency. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-28 08:03:06.416,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 28 23:06:39 UTC 2015,,,,,,0|i2dzuv:,9223372036854775807,,,,,,,,"28/Apr/15 08:03;pderop;Hello Bram,

Thanks for reporting, I will try to reproduce this issue with a DM testcase and will let you know asap (today if possible).
Did you check if you have some exceptions in the OSG log service when you are facing the issue ?


Regarding your last comment, yes, iif you add multiple dependencies from the init() method, then you have to do it atomically and pass all dependencies in one shot using the varargs options. Please see the documentation on the Component.add(Dependency ... dependencies) in [1].

[1] http://felix.apache.org/apidocs/dependencymanager/4.0.0/org/apache/felix/dm/Component.html","28/Apr/15 09:20;pderop;I reproduced the problem, and will provide a patch today.","28/Apr/15 09:27;pderop;Added test case in org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX4869_CallbackNotCalled.java
","28/Apr/15 09:54;brampouwelse;Hello Pierre, 

Thanks for the quick reply, I did check the log service for errors but nothing (at least not with the log level error ) ","28/Apr/15 10:05;pderop;ok Bram.

From my side, I identified the bug (argh .. really sorry for that).
I will make a patch today.

Just curious: if I commit a patch today, then do you need a release quickly or can you live with the trunk ?
(we could make a release soon, next week for example).

let me know




","28/Apr/15 10:15;brampouwelse;Good to hear you've found the issue, and even better that you'll have a patch today :) 

Are there snapshots available that I can use so I can give it a try? a release next week is ok for me :)  ","28/Apr/15 12:46;pderop;I think I fixed it (it's committed in the trunk).

Unfortunately, I'm not sure I can easily push snapshots to maven because the release process of DM is now based on bndtools and I did not have time to add support for maven.

Can you please build the trunk using gradle and confirm that the issue is fixed ? To build with gradle:

cd /tmp
svn checkout https://svn.apache.org/repos/asf/felix/trunk/dependencymanager
cd dependencymanager
gradlew org.apache.felix.dependencymanager:jar

The generated jar is stored in org.apache.felix.dependencymanager/generated/org.apache.felix.dependencymanager.jar

thank you !

","28/Apr/15 18:04;brampouwelse;Just tested the version from trunk and I can confirm that your fix works.

Thanks again for the quick response and fix!",28/Apr/15 23:06;pderop;great ! Thanks Bram.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Framework should not create a classloader for a fragment,FELIX-4868,12824301,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,,jbonofre,jbonofre,27/Apr/15 14:58,16/Oct/15 16:46,14/Mar/19 02:48,16/Jun/15 11:04,framework-5.0.0,,,,,,resolver-1.4.0,,,,,,,Framework,,,,,,0,,,,,,"Assuming we have:
- bundle A
- and bundle B which is a fragment to A

We have classes exported by both bundle A and bundle B, which is not correct: as bundle B is a fragment, it should use the same classloader as the host, so the classloader of bundle A.

It's the case in Karaf (4.0.0-SNAPSHOT):
- we have the class org.apache.karaf.shell.commands.basic.AbstractCommand provided by org.apache.karaf.shell.core and org.apache.karaf.shell.console bundles
- where org.apache.karaf.shell.console is a fragment to org.apache.karaf.shell.core",,,,,,,,,,KARAF-3677,,,,KARAF-3707,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-28 11:24:53.427,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 16 11:42:59 UTC 2015,,,,,,0|i2dt6n:,9223372036854775807,,,,,,,,"28/Apr/15 11:24;gnt;The problem seems to come from {{BundleWiringImpl#searchDynamicImports()}} which calls {{StatefulResolver#resolve(BundleRevision, String)}}.
This call returns a provider from a fragment instead of from its host.",16/Jun/15 10:54;jbonofre;I gonna test if the problem still exists.,16/Jun/15 11:04;jbonofre;I re-tested it and the problem is fixed in the new resolver.,"16/Jun/15 11:22;hwellmann;JB, can you explain about the ""new resolver""? I ran into the same problem with org.apache.felix.framework:5.0.0 in the context of Pax CDI. I'm not using a resolver bundle (at least not consciously).

Does that mean I have to add another bundle? Or try a SNAPSHOT build of the framework bundle?","16/Jun/15 11:42;jbonofre;Hi Harald, actually the felix resolver is ""embedded"" in the framework. You have to try with latest framework SNAPSHOT.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stale bundle revisions don't get cleaned up when last using bundle is gone,FELIX-4867,12824277,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,27/Apr/15 13:58,13/Aug/15 12:29,14/Mar/19 02:48,27/Apr/15 15:42,framework-4.6.1,,,,,,framework-5.0.1,,,,,,,Framework,,,,,,0,,,,,,"If another bundle is still using an uninstalled bundle, a bundle revision remains for it.

However, once the using bundle gets uninstalled, the bundle revision does not get cleaned up, so it remains in memory. This is a problem because the packages exported by this orphaned revision are still visible via Package Admin.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Apr 27 15:42:37 UTC 2015,,,,,,0|i2dt1b:,9223372036854775807,,,,,,,,"27/Apr/15 15:42;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1676309

Also added unit test.
I ran this version through the OSGi CT and that still passed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SSLFilter 0.1.0 and 0.2.0 have a Java race condition, stopping the Filter from working correctly",FELIX-4863,12823693,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,asanso,asanso,24/Apr/15 08:53,04/May/15 07:45,14/Mar/19 02:48,29/Apr/15 11:24,http.sslfilter-0.2.0,,,,,,http.sslfilter-1.0.0,,,,,,,HTTP Service,,,,,,0,,,,,,"There is a Java race condition, where if the wrong method ""wins"", the configuration does not get applied.
The SSL Filter (which is supposed to override certain Request/Response methods) does not work, causing mapping failures, wrong URLs, etc.
",,,,,,,,,,,,,,,,,,,,24/Apr/15 09:16;asanso;stacktrace.png;https://issues.apache.org/jira/secure/attachment/12727861/stacktrace.png,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-24 09:09:37.065,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 29 09:28:12 UTC 2015,,,,,,0|i2dphj:,9223372036854775807,,,,,,,,24/Apr/15 08:54;asanso;The issue seems to be in the {{HttpServiceTracker}} class in the {{open(boolean trackAllServices)}} method.,"24/Apr/15 09:09;jajans;Could you explain the problem in a little more detail? What reproduction steps are there, what stacktrace(s) do you see, etc...","24/Apr/15 09:15;asanso;Root cause
The implementation of the SSLFilter (mostly in HttpServiceTracker) has a classic multithreading race condition.
As soon as the bundle gets started, both the “addingService” and “updated” method are called asynchronously.
If “updated” hits line 124 before “addingService” hits line 109, then no configuration will be applied (the default will be applied, no matter what the actual configuration is).
If ”addingService” hits line 109 before “updated” hits line 124, then the correct configuration will be applied (this is the expected behavior).

How to reproduce?
 
Set debug points on entry of these 2 methods:
org.apache.felix.http.sslfilter.internal.HttpServiceTracker.addingService (line 99)
org.apache.felix.http.sslfilter.internal.HttpServiceTracker.open (ManagedService.updated) (line 71)",24/Apr/15 09:16;asanso;[~jajans] thanks. I have provided more info...,28/Apr/15 09:37;cziegeler;I've committed a fix which should solve the problem: the SslFilter instance is actually a singleton which can be registered with any ext http service.,28/Apr/15 09:37;cziegeler;[~asanso] Could you please give this version a try?,29/Apr/15 09:28;asanso;[~cziegeler] thanks a lot for the quick fix. It works like a charm... :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Correct version range for web console package,FELIX-4862,12823405,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,23/Apr/15 12:35,27/Apr/15 08:04,14/Mar/19 02:48,24/Apr/15 06:18,webconsole-memoryusage-plugin-1.0.4,,,,,,webconsole-memoryusage-plugin-1.0.6,,,,,,,Web Console,,,,,,0,,,,,,"The imports in the web console memory plugin for the webconsole package are:
org.apache.felix.webconsole;version=""[3.0,3.2)""

which now fails with the latest webconsole version. Not sure why this strict range has been used here",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Apr 24 06:18:28 UTC 2015,,,,,,0|i2dnrj:,9223372036854775807,,,,,,,,"24/Apr/15 06:18;cziegeler;I've corrected it to [3.0,4)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation inconsistency in filter.order vs service.ranking,FELIX-4859,12822352,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,tuerkben,tuerkben,20/Apr/15 15:36,27/Apr/15 08:05,14/Mar/19 02:48,21/Apr/15 07:46,scr annotations 1.9.10,,,,,,scr annotations 1.9.12,,,,,,,Documentation,SCR Tooling,,,,,0,,,,,,"The javadoc of {{org.apache.felix.scr.annotations.sling.SlingFilter::order}}(1) is conflicting the SlingFilter's documentation (2).

Currently {{org.apache.felix.scrplugin.processing.SlingAnnotationProcessor}} sets the value of service.ranking from order property. I think {{SlingFilter::order}} value is consumed only by {{SlingAnnotationProcessor}}, so its javadoc should be updated accordingly.
 
1. [Javadoc of SlingFilter.java::order|http://grepcode.com/file/repo1.maven.org/maven2/org.apache.felix/org.apache.felix.scr.annotations/1.9.2/org/apache/felix/scr/annotations/sling/SlingFilter.java#SlingFilter.order%28%29]
2. [https://sling.apache.org/documentation/the-sling-engine/filters.html]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-21 07:46:08.683,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 21 07:46:08 UTC 2015,,,,,,0|i2dhfj:,9223372036854775807,,,,,,,,"21/Apr/15 07:46;cziegeler;Thanks for reporting, I've corrected the javadocs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DependencyManager: missing createCopy method in timed service dependency,FELIX-4858,12822156,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,tuomas_kiviaho,pderop,19/Apr/15 16:36,26/May/15 21:54,14/Mar/19 02:48,28/Apr/15 23:03,org.apache.felix.dependencymanager-r2,,,,,,org.apache.felix.dependencymanager-r3,,,,,,,Dependency Manager,,,,,,0,,,,,,"The TemporalServiceDependencyImpl does not define a createCopy method. This prevent temporal service dependencies to be used in aspects and adapters.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-28 23:03:07.007,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 28 23:03:07 UTC 2015,,,,,,0|i2dg93:,9223372036854775807,,,,,,,,"28/Apr/15 23:03;pderop;Fixed. Now any adapter can use a temporal service dependency.
Added corresponding test case in TemporalServiceDependencyTest.
(see testFELIX4858_ServiceAdapterConsumptionWithCallbackAndIntermittentAvailability method).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigAdmin does not update ManagedServiceFactory on framework restart,FELIX-4855,12821480,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,chris@die-schneider.net,chris@die-schneider.net,16/Apr/15 10:07,18/Jun/15 10:33,14/Mar/19 02:48,16/Apr/15 13:27,configadmin-1.8.2,,,,,,configadmin-1.8.4,,,,,,,Configuration Admin,,,,,,0,,,,,,"Details are described in the linked karaf issue.

I found how to fix this and will attach a patch.",,,,,,,,,,,,,,,,,,,,16/Apr/15 12:11;chris@die-schneider.net;FELIX-4855-1.patch;https://issues.apache.org/jira/secure/attachment/12725852/FELIX-4855-1.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-16 13:17:16.205,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Apr 16 13:27:48 UTC 2015,,,,,,0|i2dc6n:,9223372036854775807,,,,,,,,"16/Apr/15 10:09;chris@die-schneider.net;The problem seems to be that the Caching PersistenceManager does not look into the real persistence once fullLoaded is true.

As at that point the factories are not loaded it never checks again.
So I removed the check for fullyLoaded at exist and load.","16/Apr/15 13:17;gnt;I think the patch is not correct.
The problem comes from the fact that the internal cache does not contain factories configuration which are discarded when the full load is done.
The patch at https://gist.github.com/gnodet/b8da87a1cdc9e5610f53 should provide a better fix while still retaining the fix for FELIX-4566",16/Apr/15 13:27;gnt;https://svn.apache.org/viewvc?view=revision&revision=1674069,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigAdmin only forwards ConfigurationEvents to ConfigurationListeners which are provided by bundles that are in state ACTIVE,FELIX-4851,12820309,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,bosschaert,herr-herner,herr-herner,11/Apr/15 12:49,18/Jun/15 10:32,14/Mar/19 02:48,17/Apr/15 11:59,configadmin-1.8.2,,,,,,configadmin-1.8.4,,,,,,,Configuration Admin,,,,,,0,,,,,,"I am facing a serious problem with the Felix ConfigAdmin in combination with Felix SCR. Let us assume that the SCR bundle becomes activated at last and activates a component that creates a configuration which itself is a precondition for the instantiation of another component (ConfigurationPolicy#REQUIRE). In this case the Felix ConfigAdmin does not deliver the configuration update event to SCR, although SCR has registered a ConfigurationListener in the OSGi Service Registry.
The problem is caused by line 2029 of the class ConfigurationManager (Version: 1.8.3-SNAPSHOT):

{code}
if ( listenerProvider[serviceIndex].getState() == Bundle.ACTIVE && this.listeners[serviceIndex] != null )
{code}

In this scenario, the SCR bundle is in state STARTING and reaches the ACTIVE state directly after all available components have been activated. Because of missing Configuration Events caused by the Felix ConfigAdmin, SCR is not able to activate all those components whose preconditions are actually fulfilled. The problem does not occur in combination with the Equinox ConfigAdmin, which does not make the problematic bundle state check.
I highly recommend removing the bundle state check and change line 2029 into:

{code}
if ( this.listeners[serviceIndex] != null ).
{code}

It is up to the developer to decide, in which bundle state configuration events are considered to be important or not. In the SCR scenario, the developers rely on the fact that configuration events are delivered independently of their bundle state.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-11 13:12:28.296,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Apr 17 18:13:21 UTC 2015,,,,,,0|i2d54f:,9223372036854775807,,,,,,,,"11/Apr/15 13:12;magnet;Oh thanks a lot. We're facing the same problem that has been plaguing us for some time, and I was thinking to try to find exactly what's happening this afternoon, but you just made that useless :).

My workaround so far has been to call configAdmin.getConfiguration(configPid, null).update(properties); after all bundles are in the ACTIVE state, which is very ugly. 

I believe this fix alone, if it's approved, warrants a new release!

I might as well report that Felix SCR's ""scr:info"" Gogo command is outputing wrong info when the problem happens; it seems it has no way to tell a component is unsatisfied because the required configuration was not provided, an instead the first required service reference is stated as unsatisfied, even though the service is indeed provided and used elsewhere in the same bundle.","11/Apr/15 13:43;herr-herner;I am facing the problem for a long time, but I was never able to find the issue. My workaround so far was to resort to the Equinox CM, but now we must run in Apache Karaf where the Felix ConfigAdmin is set. The activation problem becomes now a hard blocker for me. In the last time, I have tried to get rid of all direct OSGi dependencies (.e.g. BundleActivator), relying solely on SCR and the problem has been multiplied.

Thanks for the info regarding SCR's ""scr:info"". Hopefully, the problem can be fixed soon.","17/Apr/15 11:44;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java
Committed r1674281
","17/Apr/15 11:54;bosschaert;I had actually worked on a slightly different fix. After discussing with [~gnt] we decided to use my approach which allows events to be sent to bundles in STARTING and ACTIVE states, but not in all other states. For example it is not desirable to have events sent to bundles in the STOPPING state. ","17/Apr/15 11:59;bosschaert;Applied my fix in http://svn.apache.org/viewvc?view=revision&revision=1674284

I also added a unit test for this and ran it through the OSGi ConfigAdmin CT.

[~herr-herner], [~magnet] could you please check that this resolves the issue for you?",17/Apr/15 12:05;cziegeler;[~magnet] Could you please open a separate issue for the SCR gogo command problem?,"17/Apr/15 12:08;magnet;~davidb: Thanks. I'll try it right now but that will take some time, I know one of our integration servers used to always fail (on my dev machine, it rarely happened)
~cziegeler: Sure thing.","17/Apr/15 12:49;magnet;The fix seems to work for me. I have a test environment where the current release of ConfigAdmin consistently fails at updating my DS components and  switching  the configadmin impl with the current snapshot fixes the problem. Tried a few times back and forth and it seems OK. Thanks a lot!

On a related note, the pax-exam integration tests on ConfigAdmin are failing with deployment errors using mvn clean install. I had to skipTests to build the snapshot. I know that's another issue, but for the record I have fixed it a few weeks ago when I was having a look at the current issue and pushed it here https://github.com/livingobjects/felix-configadmin. Please tell me if the build is broken for you as well so that I can open another issue and extract a patch.

~cziegeler: I opened FELIX-4857 for the scr command issue.","17/Apr/15 13:01;bosschaert;> On a related note, the pax-exam integration tests on ConfigAdmin are failing with deployment errors using mvn clean install.

I'm not seeing this issue. For me 'mvn clean install' in the configadmin directory completes successfully. (With Maven 3.0.5 and Java 1.7 on OSX)","17/Apr/15 13:08;magnet;I'm on Linux with Apache Maven 3.3.1, a clean local repository and Maven central.
{noformat}
java version ""1.8.0_40""
Java(TM) SE Runtime Environment (build 1.8.0_40-b25)
Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)
{noformat}

I have tens of errors like this:
{noformat}
ERROR: Bundle org.ops4j.pax.tinybundles [15] Error starting mvn:org.ops4j.pax.tinybundles/tinybundles/1.0.0 (org.osgi.framework.BundleException: Unresolved constraint in bundle org.ops4j.pax.tinybun
dles [15]: Unable to resolve 15.0: missing requirement [15.0] osgi.wiring.package; (&(osgi.wiring.package=org.slf4j)(version>=1.6.0)(!(version>=2.0.0))) [caused by: Unable to resolve 6.0: missing re
quirement [6.0] osgi.wiring.package; (osgi.wiring.package=javax.xml.parsers)])
org.osgi.framework.BundleException: Unresolved constraint in bundle org.ops4j.pax.tinybundles [15]: Unable to resolve 15.0: missing requirement [15.0] osgi.wiring.package; (&(osgi.wiring.package=org
.slf4j)(version>=1.6.0)(!(version>=2.0.0))) [caused by: Unable to resolve 6.0: missing requirement [6.0] osgi.wiring.package; (osgi.wiring.package=javax.xml.parsers)]
{noformat}

Most errors are related to javax packages not being defined in systemPackages() in pax exam.

PS: Sorry for the message flood, the JIRA instance is severely lagging.
","17/Apr/15 13:24;cziegeler;That's a problem of 1.8 and PAX I think, updating the pax version does the trick (at least that solved it for me in a different project9","17/Apr/15 18:13;herr-herner;Thanks a lot. I have built the ConfigAdmin fresh from the Felix repository and everythings works nice with 1.8.3-SNAPSHOT. Switching back to 1.8.2 and the issue occurs immediately. I get under Windows 7 and Java 8 the same error stated above during test execution. I switched to Java 7, but Pax reports two test failures:
{code}
Failed tests:
testCMUpdateStress:org.apache.felix.cm.integration.ConfigurationAdminUpdateStressTest.testCMUpdateStress:NativeContainer:org.apache.felix.framework.FrameworkFactory@714fef9f(org.apache.felix.cm.integration.ConfigurationAdminUpdateStressTest): Test did not completed timely
test_ConcurrentManagedServicesWithConcurrentConfigurations:org.apache.felix.cm.integration.FELIX4385_StressTest.test_ConcurrentManagedServicesWithConcurrentConfigurations:NativeContainer:org.apache.felix.framework.FrameworkFactory@67adc23a(org.apache.felix.cm.integration.FELIX4385_StressTest): Test failed: Detected errors logged during concurrent test
{code}
Harald from Pax Exam prepares a new release that will be fully compatbile with both OSGi R6 frameworks. Have a look here: https://ops4j1.jira.com/browse/PAXEXAM-701",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.osgi.framework.version should be 1.8,FELIX-4850,12820194,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,hwellmann,hwellmann,10/Apr/15 20:53,27/Apr/15 07:00,14/Mar/19 02:48,15/Apr/15 19:41,framework-4.6.0,framework-4.6.1,,,,,framework-5.0.0,,,,,,,Framework,,,,,,0,,,,,,"{{BundleContext.getProperty(""org.osgi.framework.version"")}} returns 1.7. The expected value is 1.8.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-15 19:41:48.778,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 15 19:41:48 UTC 2015,,,,,,0|i2d4fb:,9223372036854775807,,,,,,,,"15/Apr/15 19:41;cziegeler;Thanks for reporting, i've changed it to 1.8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not call setContentLength after calling sendRedirect,FELIX-4849,12820192,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,tjwatson,tjwatson,10/Apr/15 20:39,23/Sep/15 12:52,14/Mar/19 02:48,04/Sep/15 11:14,webconsole-4.2.8,,,,,,webconsole-4.2.12,,,,,,,Web Console,,,,,,0,,,,,,"Calling setContentLength(0) after calling sendRedirect(path) is unnecessary and usually results in an error message getting logged by the container.  In FELIX-3006 a call to setContentLength(0) was added to line 523 of the method OsgiManager.service(HttpServletRequest, HttpServletResponse)

response.sendRedirect(path);
response.setContentLength(0);

The sendRedirect method commits the response so there is no benefit to trying to call setContentLength because that attempts to set the Content-Length header which cannot happen after a response has been committed.",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-04 11:14:58.692,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 23 12:52:17 UTC 2015,,,,,,0|i2d4ev:,9223372036854775807,,,,,,,,04/Sep/15 11:14;v_valchev;fixed in svn r1701212,23/Sep/15 12:52;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong exception type in list operation,FELIX-4846,12819202,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,08/Apr/15 06:27,18/Jun/15 10:33,14/Mar/19 02:48,08/Apr/15 07:06,configadmin-1.8.2,,,,,,configadmin-1.8.4,,,,,,,Configuration Admin,,,,,,0,,,,,,"When running the OSGi CT I get the following error
try to list configurations by invalid filter string. expected:[org.osgi.framework.InvalidSyntaxException] but was:[java.lang.IllegalArgumentException]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-04-08 06:27:36.0,,,,,,0|i2cyc7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScrInfo impl misses the first provided service,FELIX-4843,12788112,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,03/Apr/15 21:38,11/Aug/15 05:09,14/Mar/19 02:48,03/Apr/15 22:08,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,bad for loop starting at 1 misses the first service.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Apr 03 22:08:03 UTC 2015,,,,,,0|i27rxr:,9223372036854775807,,,,,,,,03/Apr/15 22:08;djencks;rev 1671177.  Manually verified that all the interfaces are listed in the situation where I noticed the problem.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Asynchronous IO fails in webconsole plugin,FELIX-4840,12787394,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,balazs.zsoldos,balazs.zsoldos,01/Apr/15 16:32,13/Jan/17 20:45,14/Mar/19 02:48,13/Jun/16 12:18,webconsole-4.2.8,,,,,,webconsole-4.2.18,,,,,,,Web Console,,,,,,0,,,,,,"*Issue*

The following function call always returns with true:

{code:java}
ServletRequest.isAsyncSupported()
{code}

However, async calls fail even if the webconsole plugin tries to provide some resource (with some special extension on the end of the URI).

*Reason*

In the end of the _OSGiManager.service(ServletRequest, ServletResponse)_ function, there is the following:

{code:java}
        // ensure response has been sent back and response is committed
        // (we are authorative for our URL space and no other servlet should interfere)
        res.flushBuffer();
{code}

Due to the reason that _flushBuffer()_ function is called, any asynchronous handling will fail with an exception.

*Proposed solution*

 - In case the webconsole plugin is rendered (the path ends with / or .html), the _request.isAsyncSupported()_ method call should return false
 - In case a custom resource is provided by the webconsole plugin (any extension but html on the end of the path) the _flushBuffer()_ method should not be called

At least the second part of the fix should be implemented as if a plugin wants to provide bigger files (like a dump), async support can be useful. Also, by the time more and more libraries will support asynchronous IO to provide resources and if a webconsole plugin uses such library, it will fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-02 06:01:25.122,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jun 13 12:18:55 UTC 2016,,,,,,0|i27nin:,9223372036854775807,,,,,,,,"02/Apr/15 06:01;cziegeler;isAsyncSupported returning true is not a problem/bug of the web console; this is more a problem of the http service implementation. I assume you're using an implementing embedding Jetty (like the Apache Felix one). Jetty always returns true. We are currently working on an update of the Felix implementation handling this correctly and ignoring the value from Jetty.
I agree that if your web console plugin wants to use async support, we maybe should change the webconsole implementation as well","02/Apr/15 09:51;balazs.zsoldos;I am not sure HTTPService implementation should be changed at all. It is up to the servlet if async is supported or not. In case of WebConsole, there are two different situations:

*A full page is rendered*

In this case async is not supported. I do not think async is an issue as plugins would not want to (and cannot) render their fragments asynchronously.

*The request is simply dispatched to the plugin*

This happens if the end of the uri neither ends with extension nor the extension is _.html_. When such a request comes, Webconsole should not call any function on the response By calling _flushBuffer()_, webconsole horns in on the lifecycle of the response although it should not.",02/Apr/15 10:21;balazs.zsoldos;Btw.: I made a workaround in my plugin that I wrap the request in the plugin with HttpServletRequestWrapper and override the function of isAsyncSupported() in case of non-full page requests.,13/Jun/16 12:18;cziegeler;I've removed the flushBuffer call - not sure why it was there in the first place,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in Service Registry,FELIX-4838,12786635,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,30/Mar/15 08:48,27/Apr/15 07:00,14/Mar/19 02:48,30/Mar/15 08:50,framework-4.6.1,,,,,,framework-5.0.0,,,,,,,Framework,,,,,,0,,,,,,"As described http://www.mail-archive.com/dev%40felix.apache.org/msg35998.html

An endless loop situation which looks very much like a deadlock occasionally happens with the Service Registry.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 30 08:50:18 UTC 2015,,,,,,0|i27ixr:,9223372036854775807,,,,,,,,30/Mar/15 08:50;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=r1668495,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bnd Scrplugin is called twice by BndTools,FELIX-4836,12785869,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,pderop,pderop,pderop,26/Mar/15 12:41,27/Apr/15 08:06,14/Mar/19 02:48,26/Mar/15 15:06,scr bnd plugin 1.3.0,,,,,,scr bnd plugin 1.4.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"The Scr Bnd plugin is now called twice by BndTools 2.4.1 and onwards versions. This causes a problem because the second time the plugin is called, then ""Service-Component"" header is appended a second time with the same set of component descriptors paths; and we get some compilation errors like this one:

{code}
""Service-Component entry can not be located in JAR: OSGI-INF/greeting.impl.GreetingImpl.xml~
{code}



To work around, the Scr bnd plugin must check for duplicated component descriptors paths, when generating the Service-Component header.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-03-26 12:41:29.0,,,,,,0|i27e93:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use bnd 2.3 (via maven-bundle-plugin 2.5.3) to avoid java 8 import problems,FELIX-4835,12785030,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,23/Mar/15 23:51,23/Mar/15 23:58,14/Mar/19 02:48,23/Mar/15 23:58,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"java 8 adds the source class of constant references to the constant pool, causing unaware bnd's to generate bogus import-package clauses.  c.f. http://blog.bjhargrave.com/2014/04/java-8-bnd-and-references-to-compile.html

Apparently this is fixed in bnd 2.3 which is used in maven-bundle-plugin 2.5.3.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 23 23:58:42 UTC 2015,,,,,,0|i2796v:,9223372036854775807,,,,,,,,23/Mar/15 23:58;djencks;Fixed rev 1668760,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revisit some javadocs in the DM annotations.,FELIX-4833,12783340,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,pderop,pderop,pderop,19/Mar/15 19:21,25/Mar/15 16:00,14/Mar/19 02:48,19/Mar/15 19:40,org.apache.felix.dependencymanager-r1,,,,,,org.apache.felix.dependencymanager-r2,,,,,,,Dependency Manager Annotations,,,,,,0,,,,,,Some javadocs should be revisited in the Dependency Manager annotations.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 19 19:40:10 UTC 2015,,,,,,0|i26zvz:,9223372036854775807,,,,,,,,"19/Mar/15 19:40;pderop;Fixed javadocs in revision 1667855 (@Init, @ServiceDependency, @ResourceDependency, @BundleDependency).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException with autoconfig Iterable fields,FELIX-4832,12783137,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,pderop,pderop,pderop,19/Mar/15 06:36,25/Mar/15 16:00,14/Mar/19 02:48,19/Mar/15 07:27,org.apache.felix.dependencymanager-r1,,,,,,org.apache.felix.dependencymanager-r2,,,,,,,Dependency Manager,,,,,,0,,,,,,"When you configure a service dependency using auto configuration without specifying a field name and when there is a field in the component instance with a type that is assignable to an Iterable, but without a valid generic type, then a fatal class cast exception occurs.

For example, assuming we have the following Activator code:

{code}
dm.createComponent()
.setImplementation(Consumer.class)
.add(dm.createServiceDependency().setService(OtherService.class).setRequired(true));
{code}

and the following consumer, which has a valid ""m_providers"" field, but another ""m_notInjectMe"" field that must not be injected:

{code}
class Consumer {
        // Auto injected
        final Iterable<OtherService> m_providers = new ConcurrentLinkedQueue<>();
      
       // should never be injected, but causes a class cast exception:
        final List m_notInjectMe = new ArrayList();
...
}
{code}

Then the following exception occurs:
{code}
java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
        at org.apache.felix.dm.impl.FieldUtil.mayInjectToIterable(FieldUtil.java:292)
        at org.apache.felix.dm.impl.FieldUtil.mapField(FieldUtil.java:255)
        at org.apache.felix.dm.impl.FieldUtil.injectDependencyField(FieldUtil.java:105)
        at org.apache.felix.dm.impl.ComponentImpl.configureImplementation(ComponentImpl.java:1027)
        at org.apache.felix.dm.impl.ComponentImpl.invokeAutoConfigDependencies(ComponentImpl.java:822)
        at org.apache.felix.dm.impl.ComponentImpl.performTransition(ComponentImpl.java:543)
        at org.apache.felix.dm.impl.ComponentImpl.handleChange(ComponentImpl.java:494)
        at org.apache.felix.dm.impl.ComponentImpl.handleAdded(ComponentImpl.java:360)
        at org.apache.felix.dm.impl.ComponentImpl.access$700(ComponentImpl.java:68)
        at org.apache.felix.dm.impl.ComponentImpl$5.run(ComponentImpl.java:289)
        at org.apache.felix.dm.impl.SerialExecutor.runTask(SerialExecutor.java:138)
        at org.apache.felix.dm.impl.SerialExecutor.runTasks(SerialExecutor.java:120)
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:86)
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:105)
        at org.apache.felix.dm.impl.ComponentImpl.handleEvent(ComponentImpl.java:284)
        at org.apache.felix.dm.impl.ServiceDependencyImpl.addedService(ServiceDependencyImpl.java:256)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1278)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked$2.execute(ServiceTracker.java:1394)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked$1.run(ServiceTracker.java:1191)
        at org.apache.felix.dm.impl.SerialExecutor.runTask(SerialExecutor.java:138)
        at org.apache.felix.dm.impl.SerialExecutor.runTasks(SerialExecutor.java:120)
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:86)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChangedHideAspects(ServiceTracker.java:1197)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1052)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:987)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:838)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:545)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4547)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3521)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:322)
        at com.alcatel.as.service.metering2.SimpleMonitorable$1.run(SimpleMonitorable.java:164)
        at com.alcatel.as.service.concurrent.SerialExecutor.runTasks(SerialExecutor.java:64)
        at com.alcatel.as.service.concurrent.SerialExecutor.execute(SerialExecutor.java:49)
        at com.alcatel.as.service.metering2.SimpleMonitorable.start(SimpleMonitorable.java:159)
        at com.alcatel.as.service.metering2.impl.MonitorableSystem.start(MonitorableSystem.java:166)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.felix.dm.impl.InvocationUtil.invokeMethod(InvocationUtil.java:112)
        at org.apache.felix.dm.impl.InvocationUtil.invokeCallbackMethod(InvocationUtil.java:67)
        at org.apache.felix.dm.impl.ComponentImpl.invokeCallbackMethod(ComponentImpl.java:923)
        at org.apache.felix.dm.impl.ComponentImpl.invoke(ComponentImpl.java:893)
        at org.apache.felix.dm.impl.ComponentImpl.performTransition(ComponentImpl.java:555)
        at org.apache.felix.dm.impl.ComponentImpl.handleChange(ComponentImpl.java:494)
        at org.apache.felix.dm.impl.ComponentImpl.startDependencies(ComponentImpl.java:662)
        at org.apache.felix.dm.impl.ComponentImpl.performTransition(ComponentImpl.java:537)
        at org.apache.felix.dm.impl.ComponentImpl.handleChange(ComponentImpl.java:494)
        at org.apache.felix.dm.impl.ComponentImpl.access$500(ComponentImpl.java:68)
        at org.apache.felix.dm.impl.ComponentImpl$3.run(ComponentImpl.java:227)
        at org.apache.felix.dm.impl.SerialExecutor.runTask(SerialExecutor.java:138)
        at org.apache.felix.dm.impl.SerialExecutor.runTasks(SerialExecutor.java:120)
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:86)
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:105)
        at org.apache.felix.dm.impl.ComponentImpl.start(ComponentImpl.java:223)
        at org.apache.felix.dm.impl.ComponentScheduler.add(ComponentScheduler.java:71)
        at org.apache.felix.dm.DependencyManager.add(DependencyManager.java:173)
        at com.alcatel.as.service.metering2.impl.Activator.init(Activator.java:56)
        at org.apache.felix.dm.DependencyActivatorBase.start(DependencyActivatorBase.java:75)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2223)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2141)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:977)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl$DeployedBundle.start(BundleInstallerImpl.java:961)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.startBundles(BundleInstallerImpl.java:633)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.frameworkEvent(BundleInstallerImpl.java:152)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.start(BundleInstallerImpl.java:121)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2223)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2141)
        at org.apache.felix.framework.Felix.updateBundle(Felix.java:2481)
        at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:995)
        at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:982)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.checkSelfUpdate(BundleInstallerImpl.java:202)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.frameworkEvent(BundleInstallerImpl.java:139)
        at org.apache.felix.framework.util.EventDispatcher.invokeFrameworkListenerCallback(EventDispatcher.java:880)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:830)
        at org.apache.felix.framework.util.EventDispatcher.run(EventDispatcher.java:1143)
        at org.apache.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:55)
        at org.apache.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:102)
        at java.lang.Thread.run(Thread.java:745)
{code}

This exception prevents the correct component activation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 19 07:27:45 UTC 2015,,,,,,0|i26ynr:,9223372036854775807,,,,,,,,"19/Mar/15 06:42;pderop;Modified org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AutoConfigTest.java test case in order to reproduce the issue (committed in rv 1667671).
",19/Mar/15 07:27;pderop;Bug fixed and committed in rv 1667672.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve logging on LoginModule registration,FELIX-4827,12780440,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,chetanm,stillalex,stillalex,09/Mar/15 09:36,03/Dec/15 06:58,14/Mar/19 02:47,30/Nov/15 05:47,,,,,,,jaas-0.0.4,,,,,,,JAAS,,,,,,0,,,,,,"There's a space missing in the log message when registering a new LoginModule [0], currently the log looks like the following:
{code}
22.02.2015 03:03:28.256 *INFO* [FelixStartLevel] org.apache.felix.jaas Registering LoginModule class [org.apache.jackrabbit.oak.security.authentication.token.TokenLoginModule] from Bundleorg.apache.jackrabbit.oak-core [85]
{code}

_from Bundleorg.apache.jackrabbit.oak-core_ -> _from Bundle org.apache.jackrabbit.oak-core_



[0] https://github.com/apache/felix/blob/33f093d4862955286c3a37b0b1a01153821c50f3/jaas/src/main/java/org/apache/felix/jaas/internal/BundleLoginModuleCreator.java#L151",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-30 05:47:58.436,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 30 05:47:58 UTC 2015,,,,,,0|i26idj:,9223372036854775807,,,,,,,,30/Nov/15 05:47;chetanm;Done in 1717186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The resolver may return wires to unresolved resources in some cases,FELIX-4825,12780066,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,06/Mar/15 13:21,16/Oct/15 16:46,14/Mar/19 02:48,17/Mar/15 09:41,resolver-1.0.0,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-06 14:46:06.556,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 17 09:41:59 UTC 2015,,,,,,0|i26g5j:,9223372036854775807,,,,,,,,"06/Mar/15 14:41;gnt;I've pushed a branch and a possible fix for it at
   https://github.com/gnodet/felix/commit/9b188ac44a9ba8f0c46d38555f122672c79a38f1

[~tjwatson] or [~rickhall], or anyone else, can you review the patch before I apply it ? it seems to solve the problem but I'm not sure if it's the best way at all.",06/Mar/15 14:46;rickhall;A few more details describing the issue/situation would be welcome.,"06/Mar/15 15:15;gnt;[~rickhall] The test case shows the problem. Let me explain it briefly...

The resource {{res2}} is the resource to resolve.  With the current code, the resolution leads to {{res5}} being wired to {{res6}} through an optional requirement, while {{res6}} can not be resolved, because it has a mandatory requirement on {{res3}}, which has a requirement with no matching capability.  The resource {{res6}} is also returned in the wiring map, but with no wires.

The problem seems to be related to optional requirements and cycles (there are a lot of those in the small resource set).  It may be possible to fix the problem at the time the candidate is added to the localCandidateMap, but I failed to see how to detect the problem (the resolution exception will be thrown at a later time because of a cycle).",17/Mar/15 09:41;gnt;https://github.com/apache/felix/commit/852adf4ea39be251f5d9b57ea7a075d60d3efd47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Baseline plugin is not thread safe,FELIX-4817,12778731,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,02/Mar/15 10:39,12/May/15 05:56,14/Mar/19 02:48,02/Mar/15 10:41,maven-bundle-plugin-2.5.3,,,,,,maven-bundle-plugin-2.5.4,,,,,,,,,,,,,0,,,,,,"Although the baseline mojo is marked as a thread safe maven plugin, it's using instance variables to keep state.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-03-02 10:39:37.0,,,,,,0|i268kf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Metatype information might contain wrong default values,FELIX-4813,12778438,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,28/Feb/15 03:46,05/Mar/15 08:52,14/Mar/19 02:48,01/Mar/15 13:55,http.jetty-3.0.0,,,,,,http.jetty-3.0.2,,,,,,,HTTP Service,,,,,,0,,,,,,"The metatype information for the JettyService does not consider values from the bundle context properties. Therefore it can happen that it for example contains the port 8080 while the actual port is something different. If a tool now uses the metatype information to create a configuration form it displays the wrong value and once such a configuration is saved, unexpected changes might occur.
This can be easily reproduced by using the property to change the port when starting an instance, going to the web console and saving the configuration. The port will change to 8080 without any further action.
The same happens to all properties that have been changed through bundle context properties.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-02-28 03:46:20.0,,,,,,0|i266rr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ungetting service through ServiceObjects might throw IllegalArgumentException,FELIX-4806,12776749,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,23/Feb/15 00:53,09/Mar/15 06:49,14/Mar/19 02:48,23/Feb/15 01:05,framework-4.6.0,,,,,,framework-4.6.1,,,,,,,Framework,,,,,,0,,,,,,"Currently the ServiceObjects object for a reference is not a singleton per bundle, it's creating a fresh instance on each call. Therefore if a servce object is get and then unget via a new instance of ServiceObjects an IllegalArgumentException is thrown.
In addition, keeping a list of services that were get through the ServiceObjects object might lead to a memory leak if that objects is kept by the client",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Feb 23 01:05:46 UTC 2015,,,,,,0|i25wqf:,9223372036854775807,,,,,,,,23/Feb/15 01:05;cziegeler;Fixed by keeping the state in the usage object which is a per bundle/ref object that already exists. This avoids keeping an extra list of services,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Servlet filters should not run if no servlet/resource is targetted,FELIX-4804,12776740,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,22/Feb/15 22:43,10/Aug/15 06:36,14/Mar/19 02:48,22/Feb/15 22:43,http-2.4.0,,,,,,http.base-3.0.0,,,,,,,HTTP Service,,,,,,0,,,,,,"Right now servlet filters are run simply based on path matching, even if no servlet or resource is registered for the requested uri.
Although there is no definite answer in the servlet specification, this seems to contradict establishing a filter chain and once it's established executing it. In addition, it looks wrong to do filter processing just to send an 404 at the end. Use cases like authentication etc. make little sense either.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Feb 22 22:43:43 UTC 2015,,,,,,0|i25wof:,9223372036854775807,,,,,,,,22/Feb/15 22:43;cziegeler;This has been fixed as part of the refactoring for the http whiteboard implementation,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregate Dependency with Field Injection does not respect SERVICE_RANKING,FELIX-4802,12776459,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,andyphillips404,andyphillips404,20/Feb/15 15:03,20/Feb/15 18:30,14/Mar/19 02:48,20/Feb/15 18:30,ipojo-runtime-1.12.1,,,,,,,,,,,,,iPOJO,,,,,,0,,,,,,"I found an issue with the Aggregate Dependency with Field Injection where i have a list of ""services"" that i would like to maintain with a manager.   The order of the services is important. 

I noticed that the field injection, say:
@Component
public class HelloConsumer {
     @Requires
     private Hello m_hellos[]; // Array => Aggregate
     public doSomething() {
             for(int I = 0; I < m_hellos.length; i++) { 
                 System.out.println(m_hellos[i].getMessage());
             }
       }
}

The initial list when the instance is ""created"" appears to respect the SERVICE_RANKING, but subequent modifications (say you install a new bundle with an additional ""hello"") does not respect the SERVICE_RANKING in the order.   I will have to end up do my own sorting on the list prior to using the field.  

Is this normal?  I feel that the SERVICE_RANKING should always be respected on the list of m_hellos[]s....",I found this using Apache Karaf 3.0.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-20 15:30:29.806,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 20 18:30:49 UTC 2015,,,,,,0|i25uyf:,9223372036854775807,,,,,,,,"20/Feb/15 15:30;pierre.bourret;Hi,

I think you should use the dynamic-priority binding policy for your dependency:
{code:java}
@Requires(policy=BindingPolicy.DYNAMIC_PRIORITY)
private Hello m_hellos[]; // Array => Aggregate
{code}

The iPOJO documentation is quite clear : [http://felix.apache.org/documentation/subprojects/apache-felix-ipojo/apache-felix-ipojo-userguide/describing-components/service-requirement-handler.html#managing-resilience-to-dynamism-binding-policies]

{quote}
* Dynamic policy (default): the binding are managed dynamically. At each injection, the same provider is injected if the provider is always available. Else a new one is chosen. For aggregate dependency, *the array order does not change*; new providers are placed at the end of the array.
[…]
* Dynamic-priority policy: the binding is managed dynamically but the injected provider is selected by using a ranking policy. Two injections can return two different providers, is a new provider is 'better' than the previous one, despite the first one is always available. For aggregate dependency, *the array is sorted*.
{quote}

If you want to always keep your array sorted, use the dynamic priority policy.","20/Feb/15 18:30;andyphillips404;I am soo sorry about this, i guess i miss understood / missed .   When i say ""Dynamic Policy"" as default, i guess i assumed it was Dynamic Priority...   Sorry and i appreciate your patience.  BTW love the product and excellent work!   ","20/Feb/15 18:30;andyphillips404;Fixed, mis understood documentation.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundle search in /system/console/bundles produces 405,FELIX-4800,12775723,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,17/Feb/15 20:32,16/Mar/15 08:19,14/Mar/19 02:48,18/Feb/15 16:27,webconsole-4.2.4,,,,,,webconsole-4.2.8,,,,,,,Web Console,,,,,,0,,,,,,"Searching in the bundles list produces a 405. Enter any value in the bundle search box and hit 'Apply Filter' and it will produce a 405 with as reason:

    HTTP method POST is not supported by this URL

possibly related, when selecting 'Filter All' instead, I'm getting a 500 with as message:

Problem accessing /system/console/bundles/.json. Reason:
    Invalid LDAP filter specified

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 18 16:27:05 UTC 2015,,,,,,0|i25qm7:,9223372036854775807,,,,,,,,17/Feb/15 20:42;bosschaert;I'm seeing that the 405 only happens in cases where the search produces nothing. In cases where the search has a result (a subset of bundles) these are correctly reported.,"18/Feb/15 16:27;bosschaert;The 405 issue is fixed in commit http://svn.apache.org/viewvc?view=revision&revision=1660639

The 500 issue I mentioned above was actually me using the plugin incorrectly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support for multiple factory designates in single MetaType file,FELIX-4799,12775628,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,17/Feb/15 15:41,23/Apr/15 10:14,14/Mar/19 02:48,18/Feb/15 12:40,,,,,,,metatype-1.0.12,,,,,,,Metatype Service,,,,,,0,,,,,,"A MetaType file can contain multiple designates for both non-factory and factory PIDs. The {{MetaData}} object returned by {{MetaDataReader}} returns a map of all designates found in the file, using the (factory) PID as key. In case multiple designates exist for the same factory PID, obviously only one is returned.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 18 12:40:09 UTC 2015,,,,,,0|i25q1z:,9223372036854775807,,,,,,,,18/Feb/15 12:40;jajans;Solved in rev #1660612.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Servlet API 3.x not supported,FELIX-4795,12774863,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,tuomas_kiviaho,tuomas_kiviaho,13/Feb/15 11:33,03/Jun/16 10:53,14/Mar/19 02:48,31/May/16 05:18,webconsole-4.2.6,,,,,,webconsole-4.2.16,,,,,,,Web Console,,,,,,0,,,,,,"It seems that webconsole along it's plugins import      javax.servlet.*;version=2.4 version only. Newest Pax Web for instance uses 3.x and thus these bundles do not resolve.

As a solution I propose opening up the version range as per
[http://blog.osgi.org/2014/09/portable-java-contracts-for-javax.html] 

{code}
Require-Capability: osgi.contract; filter:=""(&(osgi.contract=JavaServlet)(version>=2.4))"",
Import-Package: javax.servlet, javax.servlet.http 
{code}

PS. [webconsole-4.2.6-all.jar|http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.apache.felix%22%20AND%20a%3A%22org.apache.felix.webconsole%22] isn't available in the maven repo, but I assume it would have still this same ""defect"" as the previous ones.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-31 05:18:26.377,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue May 31 05:18:26 UTC 2016,,,,,,0|i25ldr:,9223372036854775807,,,,,,,,13/Feb/15 11:37;tuomas_kiviaho;It might be a bit premature with declaring the {{Require-Capability:}} because can't find any [implementation|https://repo1.maven.org/maven2/javax/servlet/javax.servlet-api/3.0.1/] that provides this capability. The version range could in my opinion be open-ended because the API is most like to stay backward compatible in the future as well.,"31/May/16 05:18;cziegeler;I've changed the version import to [2.4,4) in rev 1746226
This should allow to run the web console with any javax servlet version from 2.4 onwards",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Components with an empty configuration are created even if configuration is required or available,FELIX-4793,12774158,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,11/Feb/15 10:08,11/Aug/15 05:09,14/Mar/19 02:48,11/Feb/15 11:37,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We have a component which has one or more factory configurations in config admin.
If the configuration policy is set to required, an instance is created nevertheless with an empty configuration.
Similar, if the policy is optional there is a factory configuration in Config Admin, two instances are created and both are kept active.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-11 11:37:24.707,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 11 11:37:24 UTC 2015,,,,,,0|i25h33:,9223372036854775807,,,,,,,,11/Feb/15 11:37;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1658933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[SCR] Handle Errors on component initialization,FELIX-4792,12773485,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,09/Feb/15 15:59,11/Aug/15 05:09,14/Mar/19 02:48,09/Feb/15 16:36,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"During component initialization the component implementation class is loaded. If the class or one of its dependencies cannot be properly loaded a ClassDefNotFound error can be thrown.

This error bubbles up from BundleComponentActivator.initialEnable to the AbstractExtender.createExtension method, where it is logged. The problem with this is, that the BundleComponentActivator has registered all the components of the bundle with the ComponentRegistry but when the error is thrown, the BundleComponentActivator is not registered in Activator's m_componentBundles map.

So, when the bundle is stopped, the components registered with the ComponentRegistry stay registered and will never be cleaned away.

The simple fix is to catch Throwable in the BundleComponentActivator.initialEnable method and log it. The single component failing to load will stay inactive but the rest of the component registration will continue unaffected.

Background: We have a situation where a bundle is compiled against an API bundle whose exported API is not properly versioned. So the OSGi framework happily wires the bundle to the older API bundle version but one of the components fails to load due to missing API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Feb 09 16:36:48 UTC 2015,,,,,,0|i25dbz:,9223372036854775807,,,,,,,,"09/Feb/15 16:36;fmeschbe;Implemented catching any Throwable during initial component initialization and logging it in Rev. 1658457.

In addition the component is disabled to make sure any partical setup is rolled back.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR MutablePropertiesTest fails when run with framework 4.6.0,FELIX-4790,12772682,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,05/Feb/15 12:20,11/Aug/15 05:09,14/Mar/19 02:48,05/Feb/15 12:55,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,When running the SCR integration tests with Felix 4.6.0 the MutablePropertiesTest starts failing. With Felix 4.4.1 it is working fine.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 05 12:55:15 UTC 2015,,,,,,0|i258gn:,9223372036854775807,,,,,,,,05/Feb/15 12:52;bosschaert;The problem is caused by the fact that the test is based on counting the number of properties on a service. This is a bad idea since the framework may add more properties to the service over time. This is exactly what happened with the R6 framework where the service.scope and service.bundleid properties are added to the service properties. This messes up the accounting in this test.,05/Feb/15 12:55;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1657558,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR Felix4188Test fails when run with framework 4.4.1 or newer,FELIX-4789,12772680,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,05/Feb/15 12:17,11/Aug/15 05:09,14/Mar/19 02:48,05/Feb/15 14:01,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"By default the SCR tests are run with Felix 4.0.2. When using a newer framework implementation (e.g. 4.4.1 or 4.6.0) the following failure starts appearing. 

BTW I didn't try it with any framework earlier than 4.4.1, so this failure might have been introduced before this version.

The test fails as follows:
{noformat}-------------------------------------------------------------------------------
Test set: org.apache.felix.scr.integration.Felix4188Test
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.916 sec <<< FAILURE!
test_concurrent_deactivation(org.apache.felix.scr.integration.Felix4188Test)  Time elapsed: 0.912 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<1> but was:<0>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:78)
	at junit.framework.Assert.assertEquals(Assert.java:234)
	at junit.framework.Assert.assertEquals(Assert.java:241)
	at org.apache.felix.scr.integration.ComponentTestBase.getServiceFromConfiguration(ComponentTestBase.java:380)
	at org.apache.felix.scr.integration.Felix4188Test.test_concurrent_deactivation(Felix4188Test.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:67)
	at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:37)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.invokeViaJUnit(JUnitProbeInvoker.java:123)
	at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.findAndInvoke(JUnitProbeInvoker.java:96)
	at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.call(JUnitProbeInvoker.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.ops4j.pax.swissbox.framework.RemoteFrameworkImpl.invokeMethodOnService(RemoteFrameworkImpl.java:420)
	at org.ops4j.pax.swissbox.framework.RemoteFrameworkImpl.invokeMethodOnService(RemoteFrameworkImpl.java:393)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)
	at sun.rmi.transport.Transport$1.run(Transport.java:177)
	at sun.rmi.transport.Transport$1.run(Transport.java:174)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:173)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744){noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 05 14:01:27 UTC 2015,,,,,,0|i258g7:,9223372036854775807,,,,,,,,"05/Feb/15 13:46;bosschaert;The service that the test is looking for is in a different class space, therefore the test (which uses getServiceReferences()) does not see it.",05/Feb/15 14:01;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1657569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incompatible SCR API,FELIX-4785,12772045,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,03/Feb/15 15:15,11/Aug/15 05:09,14/Mar/19 02:48,18/Feb/15 15:05,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,,,,,,,0,,,,,,"Current trunk contains version 2.0.0 of the org.apache.felix.scr API package. While this is a logical step, this makes the new implementation unusable as a drop-in replacement into existing installations which might use the 1.x version of that API.

I think we should go a more moderate way, leave the 1.x version in but deprecate it and also provide the replacement API (if any). Then in one of the further versions along the road, we can remove the API. This gives our users a chance to migrate slowly",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-03 15:17:14.846,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 17 07:35:18 UTC 2015,,,,,,0|i254lr:,9223372036854775807,,,,,,,,03/Feb/15 15:17;bosschaert;I also noticed that the bundle version is currently still at 1.8.3-SNAPSHOT. This should probably make a bigger jump given the changes...,"03/Feb/15 16:01;cziegeler;My suggestion would be to readd that API, register the old service but let it just return empty collections","05/Feb/15 09:43;cziegeler;I've added the old API together with an implementation back in rev 1657502
and deprecated the API

However, as soon as the ScrService is registered, one test case fails - so there seems to be a timing problem with the test.

Changing line 152 in the Activator to
        m_runtime_reg = m_context.registerService(new String[] {ScrService.class.getName(), ServiceComponentRuntime.class.getName()},

a test fails ","05/Feb/15 09:58;cziegeler;Failing tests: 

Failed tests:   test_concurrent_reference_bindings(org.apache.felix.scr.integration.Felix3680Test): unexpected warning or error logged: [org.apache.felix.scr.integration.components.felix3680.Main(1)] bind method [bindSCR] not found; Component will fail
","05/Feb/15 10:57;pderop;Hello Carsten; 

Looking at the failing test (org.apache.felix.scr.integration.Felix3680Test), it looks like the
org.apache.felix.scr.integration.components.felix3680.Main class has now a ""bindSCR"" method that is now taking as parameter a 
org.osgi.service.component.runtime.ServiceComponentRuntime object.

However, at the end of the ./src/test/resources/integration_test_FELIX_3680.xml file, the descriptor for the ""sCR"" Reference still refers to the old API:

<code>
       ...
        <scr:component xmlns:scr='http://www.osgi.org/xmlns/scr/v1.1.0'
                name='org.apache.felix.scr.integration.components.felix3680.Main'
                activate='start' deactivate='stop' enabled=""false"">
                <implementation
                        class='org.apache.felix.scr.integration.components.felix3680.Main' />
                <reference name='a'
                        interface='org.apache.felix.scr.integration.components.felix3680.A'
                        cardinality='0..n' bind='bindA' unbind='unbindA' policy='dynamic' />
                <reference name='logService' interface='org.osgi.service.log.LogService'
                        bind='bindLogService' />
                <reference name='sCR' interface='org.apache.felix.scr.ScrService'
                        bind='bindSCR' />
        </scr:component>
</code>

can you try to update the ./src/test/resources/integration_test_FELIX_3680.xml and change the ""sCR"" reference like this:

<code>
                ...
                <reference name='sCR' interface='org.osgi.service.component.runtime.ServiceComponentRuntime'
                        bind='bindSCR' />
</code>

",05/Feb/15 11:43;bosschaert;Thanks [~pderop] that fixes it! I've committed the fix plus the extra service being registered in http://svn.apache.org/viewvc?view=revision&revision=1657539,"05/Feb/15 13:30;cziegeler;Awesome, I looked at the XML for hours and didn't see it ....Thanks!","05/Feb/15 19:01;djencks;IIUC you have added an implementation of the old service to the new service implementation, and are actually returning some information for the old interfaces.  I object in the strongest possible terms to this.  The meaning of the new interfaces cannot be stuffed back into the old ones, the old ones are just a wrong model of scr.  Freeing the implementation from the mistakes of the old model means that any attempt to return information in the old format will differ from what is returned in released felix ds versions.

I would be OK with including the old interfaces but returning absolutely no information in the SCRInfo service.  IMO There's no reason to saddle any implementation classes with returning deprecated information.

I would have appreciated discussion on this when I originally proposed the version change rather than months later.","06/Feb/15 08:05;cziegeler;I wasn't aware of the implications when the change happened, but I'm now and It's not too late to discuss things . 
I see your point, however the ScrService is widely used out in the field, it's even mentioned in OSGi books - so if we remove it and update the API to 2.0 this makes it impossible to simply update to the new DS implementation; it requires to change code - and the same is of course true if the service returns no information. And we gave our users no warning or time to act accordingly as we simply remove it from one version to the next.
I seriously think we have to find a compromise here - what about leaving it as it is; the api is back, it's functional, it's deprecated, it uses the wrong model - but it gives users a notice as it's deprecated - we could even add big bold log message each time the api is used. And once we released the new DS implementation, we remove the API so it's gone in the next version. WDYT?
","07/Feb/15 04:49;djencks;cf my original attempt to discuss this april 16-may 14 2014:
http://felix.markmail.org/message/ysjwfztinovvo7k5?q=from:david_jencks%40yahoo%2Ecom+list:org%2Eapache%2Efelix%2Edev&page=3
http://felix.markmail.org/message/h7seohu2polq6aza?q=from:david_jencks%40yahoo%2Ecom+list:org%2Eapache%2Efelix%2Edev&page=2
http://felix.markmail.org/message/6iux52gysnjg7fnv?q=from:david_jencks%40yahoo%2Ecom+list:org%2Eapache%2Efelix%2Edev&page=2

I have a hard time equating this with giving users no warning.

I will have to study your proposal in more detail.

IIRC the actual implementation objects were exposed through the old API.  If we keep it I would really prefer to copy the info into more DTO like objects.

The operations in the old API are just wrong and need to be disabled.  They act on the wrong logical layer of objects.  They cannot be made to work in a sensible way.

The old API was flawed in that it conflated the two levels of DTO,   Basing the old info on the current objects will return different information than it used to and in particular for components that have no ComponentConfigurationDTO will return nothing at all.  It seemed impractical and pointless to me to expose the same info through the old interfaces as used to be exposed, but if you want to try to make it work I will not try to remove it, although I think a fragment bundle might be a more appropriate location.  I will seriously consider forking the project for my own use rather than go back to the incorrect data model being forced into the actual runtime classes.

The only tool I'm aware of that used the old data model was the web console, which (although I haven't actually tried it) ought to show the correct information now through the SCRInfo service which now uses the new data model.  Are there actually any other tools using the old data model?","09/Feb/15 20:47;cziegeler;Many of our users simply rely on releases, so we have a 1.8.2 with the API in it and it's not deprecated. And we have the next release (probably 2.0.0) where the package is still there but changed incompatible (to version 2.0). And in this sense, users have no choice of simply upgrading the DS implementation as API is simply gone without any (deprecation) warning.
I totally agree that the old API has a wrong model, but we provided it and it's being used out there.
Now, in addition, it seems 1.8.2 has some bugs that are fixed in 2.0.0 - (it seems there are cases where a change to a factory config is not causing a reactivation of the component); so again updating to get just that fix is not possible.
The other option I see is we provide a compat package, that implements the old API based on the DTOs. So we clearly separated it and people upgrading install two bundles.","10/Feb/15 02:51;djencks;>>Now, in addition, it seems 1.8.2 has some bugs that are fixed in 2.0.0 - (it seems there are cases where a change to a factory config is not causing a reactivation of the component); so again updating to get just that fix is not possible.

The spec behavior is clearly wrong and caused by failure to notice that a section needed to be updated for 1.1, but apparently we could only have the correct behavior in 1.3 specced components.  No one has objected in practice to the correct but non-spec behavior that the last couple of releases have had.  If someone does we could release a 1.8.4 with just that fix.  Actually from your note it almost sounds like you would be ok with releasing 1.8.4 based on our last release with this wrong spec-required behavior present and the old api deprecated, and of course without any 1.3 features, and then as soon as the spec is finalized releasing current trunk as 2.0.0.  Since spec approval is still some months off, we could do this easily and it would give users several months of warning.

If you or someone wants to provide an additional bundle or fragment implementing the old api in terms of DTOs I won't object as long as the current behavior of the main bundle classes doesn't change.  The two Items I am totally against breaking to provide alleged compatible old behavior are:

1. The operations in the old api operate on the ComponentConfigurationDTO layer whereas the operations in the spec api operate on the ComponentDescriptionDTO layer.  Providing operations that operate on the ComponentConfigurationDTO layer is not acceptable, it cannot be made consistent with the spec API.

2. The component objects in the old api basically correspond to ComponentConfigurationDTOs.  However, since there is no ComponentConfigurationDTO, a bogus ComponentConfigurationDTO-like-object is provided whenever there is no actual ComponentConfigurationDTO, to represent the ComponentDescriptionDTO.  This is why a reimplementation of the old api needs to use objects independent of the runtime classes (e.g. SingleComponentManager which more or less corresponds to a ComponentDescriptionDTO).  We can't add a bogus ComponentManager in to represent the missing object modeling the ComponentDescriptionDTO.  However, I'd be ok with an entirely new set of objects backing the old api, where the ""always present"" component is constructed based on either the ComponentDescriptionDTO (if there are no ComponentConfigurationDTOs) or the ""first"" ComponentConfigurationDTO.","11/Feb/15 09:47;cziegeler;[~djencks] After some rethinking of the issue, I agree that doing a compat bundle that acts on the DTOs is the nicer option. It gets the impl free of the cruft and people using that simply install the second bundle.

However, org.apache.felix.scr contains also the ScrInfo interface which isn't really used - as the package version is updated to 2.0 (due to the removal of the other stuff), this will break clients using this anyway. On the other hand, I'm not sure if this one is used much. 

My suggestion is we complete remove the org.apache.felix.scr package from the DS implementation and put everything into the compat bundle including org.apache.felix.scr.ScrInfo and an implementation for that.","16/Feb/15 12:36;cziegeler;I've now splitted this into a whole new bundle (scr-compat). This one registers the old ScrService and the ScrInfo.
The scr bundle itself is now free from the org.apache.felix.scr package (which currently causes the Aries bundle to fail therefore I disabled it for now).
As mentioned previously I think it makes sense to move the ScrInfo interface as well, if we still think this is usefull, we can add a similar interface in a new package in the DS bundle.

With the implementation I see a couple of problems
- How should we implement Component#getComponentInstance ? Currently it simply returns null
- The ScrInfo service is now always registered regardless of a system property which was previously used. I think as this is a compat bundle that's fine.
- The ScrInfo#config method can't get the configuration and therefore it does not print it out","16/Feb/15 18:47;djencks;I'm using ScrInfo service so I'll need to reimplement it.  What package name would you suggest?

-- I'm happy with Component#getComponentInstance returning null.  I don't think we should ever have exposed this, and we can't stop too soon IMO
-- glad you figured out how to implement ""isServiceFactory() :-)
-- I won't be using this ScrInfo service so don't care about it.  I think registering it is fine.
-- OK about ScrInfo#config.... maybe hooking it up to the new ScrInfo I'm going to write would also work?

I'm really not sure about your implementation of 
        public void enable()
        {
            this.runtime.enableComponent(this.description);
        }

        public void disable()
        {
            this.runtime.disableComponent(this.description);
        }

The original implementation operated, basically, on a Configuration not a Description.  I'm not going to be using this but changing the scope of the operation seems like an incompatible change to me.  I might rather have these no-ops.","17/Feb/15 06:58;cziegeler;Thanks David, so what about these:

- I think o.a.f.scr.info might be a good package for ScrInfo.
- Component#getComponentInstance returning null: ok, I guess that's the best option we have
- ScrInfo#config: right, if we have a new service in a new package, we can easily hook it up. Maybe we can also simply delegate all methods to the new service?
- I see your point with enableComponent/disableComponent : let's make it a noop","17/Feb/15 07:12;cziegeler;I've changed the compat implementation as explained above.
I also added a o.a.f.scr.info package with the ScrInfo and implemented it in the same way the old one was implemented, so it's optional with a configurable property. I wouldn't mind dropping the property and always registering it; that way we could easily/always use it in the compat impl",17/Feb/15 07:35;cziegeler;I've now changed the compat implementation to use the new ScrInfo service and simply delegates to it.,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException when stopping,FELIX-4783,12771978,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,chris@die-schneider.net,chris@die-schneider.net,03/Feb/15 09:17,17/Mar/15 07:05,14/Mar/19 02:48,03/Feb/15 10:49,,,,,,,gogo.runtime-0.16.2,,,,,,,Gogo Runtime,,,,,,0,,,,,,"The exception below happens in the karaf itests but originates in felix.
The problem is in org.apache.felix.gogo.runtime.CommandProcessorImpl.stop .
It iterates over the sessions in a foreach loop and removes the session during the iteration.

I propose to do the remove at the end in one clear call.
This should go into gogo runtime 0.14.1. Unfortunately there is no version for it in jira.

14:31:55,602 | ERROR | Felix                                              | Error stopping bundle.
java.util.ConcurrentModificationException
    at java.util.WeakHashMap$HashIterator.nextEntry(WeakHashMap.java:882)[:1.7.0_60]
    at java.util.WeakHashMap$KeyIterator.next(WeakHashMap.java:915)[:1.7.0_60]
    at org.apache.felix.gogo.runtime.CommandProcessorImpl.stop(CommandProcessorImpl.java:87)[42:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
    at org.apache.karaf.shell.impl.console.SessionFactoryImpl.stop(SessionFactoryImpl.java:139)[42:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
    at org.apache.karaf.shell.impl.console.osgi.secured.SecuredSessionFactoryImpl.stop(SecuredSessionFactoryImpl.java:76)[42:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
    at org.apache.karaf.shell.impl.console.osgi.Activator.stop(Activator.java:88)[42:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
    at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)[org.apache.felix.framework-4.4.1.jar:]
    at org.apache.felix.framework.Felix.stopBundle(Felix.java:2538)[org.apache.felix.framework-4.4.1.jar:]
    at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1317)[org.apache.felix.framework-4.4.1.jar:]
    at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)[org.apache.felix.framework-4.4.1.jar:]
    at java.lang.Thread.run(Thread.java:745)[:1.7.0_60] ",,,,,,,,,,,,,,,,,,,,03/Feb/15 09:20;chris@die-schneider.net;FELIX-4783-1.patch;https://issues.apache.org/jira/secure/attachment/12696131/FELIX-4783-1.patch,03/Feb/15 10:06;chris@die-schneider.net;FELIX-4783-2.patch;https://issues.apache.org/jira/secure/attachment/12696143/FELIX-4783-2.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-02-03 09:39:51.258,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 03 10:49:00 UTC 2015,,,,,,0|i25473:,9223372036854775807,,,,,,,,03/Feb/15 09:20;chris@die-schneider.net;Patch provided,03/Feb/15 09:21;chris@die-schneider.net;It does not seem to fully fix the problem as we also seem to have a problem on the karaf side. Still it should be better than the current code.,"03/Feb/15 09:39;jbonofre;Unfortunately, I don't think your patch will solve completely the problem. We can try to use a ConcurrentHashSet.","03/Feb/15 09:41;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/CommandProcessorImpl.java
Committed r1656656
",03/Feb/15 10:05;chris@die-schneider.net;Unfortunately my patch was not fully working ,03/Feb/15 10:06;chris@die-schneider.net;New patch that copies the keySet into an ordinary array to iterate over it. This seems to really fix the issue.,03/Feb/15 10:08;jbonofre;It looks better indeed. I'm testing it.,"03/Feb/15 10:49;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/CommandProcessorImpl.java
Committed r1656672
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated service component xml does not conform to XSD,FELIX-4773,12770320,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,mgrafl,mgrafl,27/Jan/15 11:16,27/Apr/15 08:05,14/Mar/19 02:48,18/Feb/15 15:39,maven-scr-plugin 1.20.0,,,,,,maven-scr-plugin 1.21.0,scr ant task 1.14.0,scr bnd plugin 1.4.0,scr generator 1.13.0,,,,SCR Tooling,,,,,,0,,,,,,"The ServiceComponent xml file generated by maven-scr-plugin does not conform to the declared XML Schema Definition ""http://www.osgi.org/xmlns/scr/v1.0.0"". Same for other specVersions (""http://www.osgi.org/xmlns/scr/v1.1.0"" and ""http://www.osgi.org/xmlns/scr/v1.2.0"").

The file is generated with root element ""components"", e.g., 
<?xml version=""1.0"" encoding=""UTF-8""?><components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.0.0"">
    <scr:component> ... 
    </scr:component>
</components>

The XSD specifies the root element as ""component"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-18 15:35:08.138,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 18 15:35:08 UTC 2015,,,,,,0|i24u5r:,9223372036854775807,,,,,,,,"18/Feb/15 15:35;cziegeler;Afaik, the XML is correct according to the specification, see section 112.4.3. It is allowed to have a root element which does not have to be in the namespace and can have any name.

However, we can skip this element as we're creating a single component per XML anyway",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible NPE when accessing content of attribute,FELIX-4771,12768931,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,21/Jan/15 09:27,23/Apr/15 10:14,14/Mar/19 02:48,21/Jan/15 09:35,,,,,,,metatype-1.0.12,,,,,,,Metatype Service,,,,,,0,,,,,,"An attribute can have optional content, but will throw a NPE when no content is present. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 21 09:35:55 UTC 2015,,,,,,0|i24ltz:,9223372036854775807,,,,,,,,21/Jan/15 09:35;jajans;Solved in rev #1653464.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reload button on user admin plugin doesn't work correctly.,FELIX-4763,12767061,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,13/Jan/15 08:20,16/Mar/15 08:29,14/Mar/19 02:48,13/Jan/15 08:25,webconsole-useradmin-plugin-1.0.0,,,,,,webconsole-useradmin-plugin-1.0.2,,,,,,,Web Console,,,,,,0,,,,,,"The reload button works every even time, but every odd time you press the button it doesn't do anything. 

IMHO this could be a problem of the used tree library, which is pretty old. It's probably best to upgrade to the latest version of jsTree.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 13 08:25:17 UTC 2015,,,,,,0|i24apb:,9223372036854775807,,,,,,,,13/Jan/15 08:25;v_valchev;Fixed in SVN rev. 1651300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 OutOfMemoryError (Java Heap Space) when resolving bundles ,FELIX-4762,12766235,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,rickhall,mhelleboid,mhelleboid,09/Jan/15 15:53,15/Jan/15 17:34,14/Mar/19 02:48,15/Jan/15 17:17,,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,"When trying to start Capella (https://polarsys.org/capella/) we encounter OutOfMemoryError (please see the stacktrace below). It seems that there is too many blames objects generated.

The original bug is https://bugs.eclipse.org/bugs/show_bug.cgi?id=457118
A quick workaround is proposed here https://git.eclipse.org/r/#/c/39271/
This workaround helps to avoid OOMError, but the resolution is still very
slow",Usage of Felix resolver as part of Eclipse Equinox,,,,,,,,,,,,,,,,,,,15/Jan/15 17:05;mhelleboid;avoidMergeDuplicateExportedPackages.patch;https://issues.apache.org/jira/secure/attachment/12692546/avoidMergeDuplicateExportedPackages.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-01-15 17:02:01.002,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 15 17:34:04 UTC 2015,,,,,,0|i245u7:,9223372036854775807,,,,,,,,"15/Jan/15 09:32;mhelleboid;Here is a patch : avoidMergeDuplicateExportedPackages.patch
The goal is to avoid to merge duplicate exported packages from required bundles.
I applied the patch on https://github.com/gnodet/felix/commits/resolver-improvements and execute the tests, everything is fine.
I also applied the patch on the Resolver used in eclipse Luna, and it solve the OOM error and avoid duplicate in the mergeCandidatePackage method.","15/Jan/15 17:02;tjwatson;I have been reviewing this fix on the Equinox side in https://bugs.eclipse.org/bugs/show_bug.cgi?id=457118

In order to trigger the code I had to have a dependency tree like the following and I had to use re-export for each level of the dependency:
{noformat}
       +-->C--+
A-->B--+      +-->E
       +-->D--+
{noformat}
Where :
 B re-exports C and D
 C re-exports E
 D re-exports E

In this scenario I would see duplicate blames for package E with the blamed requirement A->B

The fix looks good to me, but the variable names mergeExportedPackagesCycles and mergeExportedPackagesCyclesList are misleading.  Perhaps a name like visitedRequiredBundlesMap and visitedRequiredBundles for the list?","15/Jan/15 17:05;mhelleboid;Update of the patch to change some variables name, as suggested by Thomas Watson here : https://bugs.eclipse.org/bugs/show_bug.cgi?id=457118","15/Jan/15 17:07;mhelleboid;Also here is also a scenario by Thomas Watson (from https://bugs.eclipse.org/bugs/show_bug.cgi?id=457118) : 

In order to trigger the code I had to add another level to the dependency tree and I had to use re-export for each level of the dependency:

       +-->C--+
A-->B--+      +-->E
       +-->D--+

Where :
 B re-exports C and D
 C re-exports E
 D re-exports E

In this scenario I would see duplicate blames for package E with the blamed requirement A->B","15/Jan/15 17:17;rickhall;I applied the patch, please close if satisfied. Thanks!",15/Jan/15 17:34;mhelleboid;Ok thx,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Modifications on Properties#entrySet() are not properly reflected in the layout,FELIX-4761,12765981,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,09/Jan/15 09:48,17/Mar/15 07:07,14/Mar/19 02:48,09/Jan/15 09:49,,,,,,,utils-1.8.0,,,,,,,Utils,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 09 11:20:20 UTC 2015,,,,,,0|i24473:,9223372036854775807,,,,,,,,"09/Jan/15 09:49;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	utils/src/main/java/org/apache/felix/utils/properties/Properties.java
	M	utils/src/test/java/org/apache/felix/utils/properties/PropertiesTest.java
Committed r1650469
","09/Jan/15 11:20;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	utils/src/main/java/org/apache/felix/utils/properties/Properties.java
Committed r1650502
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throw Invalid BundleContext when getAllServiceReferences(),FELIX-4756,12765368,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,Chenqiulin,Chenqiulin,07/Jan/15 13:26,07/Jan/15 13:48,14/Mar/19 02:48,07/Jan/15 13:48,framework-4.0.1,,,,,,,,,,,,,Framework,,,,,,0,,,,,,"I registService like this:
public class ManagerActivator implements BundleActivator {


	private ServiceRegistration serviceRegistration;

	// 运行服务
	private ServiceRegistration serviceRegistrationRuntime;

	public void start(BundleContext context) throws Exception {

		Dictionary props = new Hashtable();
		// service.pid
		String symbolicName = (String) context.getBundle().getHeaders()
				.get(""Bundle-SymbolicName"");
		props.put(""service.pid"", symbolicName);
		props.put(Constant.COMMANDNAME, ""manager"");

		serviceRegistrationRuntime = context.registerService(
				AgentAction.class.getName(), new ManagerAction(context), props);
		logger.info(""manager regist success."");		
	}
}

and I get the service like this:

public Response handle(Message message) {
		ServiceReference[] serviceRefs = null;
		Response result = null;
		try {
			String mess = message.getContent().toString();
			logger.debug(mess);
			Map map = JsonUtil.toBean(mess, Map.class);
			serviceRefs = context.getAllServiceReferences(
					AgentAction.class.getName(), ""("" + Constant.COMMANDNAME
							+ ""=manager)"");
			if (serviceRefs.length == 0) {
				throw new Exception("" has not Command service like this "");
			}
			if (serviceRefs.length > 1) {
				throw new Exception(""more than one Command service like this "");
			}
			AgentAction action = (AgentAction) context
					.getService(serviceRefs[0]);
			// handle
			result = action.handle(message);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}

		return result;
	}


But I always get Exception :
  (AgentMessageHandler.java:72) ERROR - ******.AgentMessageHandler  - Invalid BundleContext.
java.lang.IllegalStateException: Invalid BundleContext.
    at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)
    at org.apache.felix.framework.BundleContextImpl.getAllServiceReferences(BundleContextImpl.java:411)
    at cn.tianya.amm.agent.service.AgentMessageHandler.handle(AgentMessageHandler.java:55)
    at cn.tianya.fw.mq.impl.activemq.FwMqListenService$MessageSyncHandlerAdapter.run(FwMqListenService.java:582)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)

Did I need to synchronized regist service?",Centos 6.0  JDK 6,,,,,,,,,,,FELIX-4751,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-07 13:48:34.341,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 07 13:48:34 UTC 2015,,,,,,0|i2416f:,9223372036854775807,,,,,,,,"07/Jan/15 13:48;jajans;Already edited and commented on FELIX-4751, but didn't see all the dupes that were created...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timing issues with bundle context configuration and CM configuration taking effect.,FELIX-4753,12765124,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,tjwatson,tjwatson,06/Jan/15 15:08,11/Aug/15 05:09,14/Mar/19 02:48,21/Jul/15 18:13,scr-2.0.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In ScrConfiguration.start a ManagedService is registered in order to process configuration from CM.  The ManagedService is registered before processing configuration settings from the bundle context.  After registering the ManagedService the bundle context settings are processed synchronously.  The issue is that we do not know when a configuration will be delivered to the ManagedService.  It may happen synchronously as we are registering the ManagedService or later asynchronously or much later when CM is activated.  But the point is we don't have a predictable order here.

I think we should have the configuration from CM override the bundle context property settings.  In order to do that we must guarantee that the bundle context properties are processed first so that later the CM configuration can override it.",All,,,,,,,,,,,,,,,,,,,06/Jan/15 15:13;tjwatson;FELIX-4753.patch;https://issues.apache.org/jira/secure/attachment/12690356/FELIX-4753.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-01-06 16:26:47.26,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 21 18:13:00 UTC 2015,,,,,,0|i23zof:,9223372036854775807,,,,,,,,06/Jan/15 15:13;tjwatson;Possible fix by processing bundle context configuration first.,06/Jan/15 16:26;djencks;Applied rev 1649864,21/Jul/15 18:13;djencks;Issue seems fixed.  This is the (now fixed) issue holding up https://issues.apache.org/jira/browse/FELIX-4467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getAllServiceReferences() Throw IllegalStateException: Invalid BundleContext,FELIX-4752,12765082,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,Chenqiulin,Chenqiulin,06/Jan/15 09:50,07/Jan/15 13:47,14/Mar/19 02:48,07/Jan/15 13:47,framework-4.0.1,,,,,,,,,,,,,Framework,,,,,,0,,,,,,"I register service like this:

public void start(BundleContext context) throws Exception {

		Dictionary props = new Hashtable();
		// service.pid
		String symbolicName = (String) context.getBundle().getHeaders()
				.get(""Bundle-SymbolicName"");
		props.put(""service.pid"", symbolicName);
		props.put(Constant.COMMANDNAME, ""manager"");

		
		serviceRegistrationRuntime = context.registerService(
				AgentAction.class.getName(), new ManagerAction(context), props);
		logger.info(""manager Service regist success."");
	}

and I get the service like this:
public Response handle(Message message) {
		ServiceReference[] serviceRefs = null;
		Response result = null;
try {
			String mess = message.getContent().toString();
			logger.debug(mess);
			Map map = JsonUtil.toBean(mess, Map.class);

			logger.info(""begin to handle message "" + map.get(MODULENAME));

			serviceRefs = context.getAllServiceReferences(
					AgentAction.class.getName(), ""("" + Constant.COMMANDNAME
							+ ""="" + map.get(MODULENAME) + "")"");
			// serviceRefs = context.getAllServiceReferences(
			// AgentAction.class.getName(),null);
			if (serviceRefs.length == 0) {
				throw new Exception(""has not command service like this"");
			}
			if (serviceRefs.length > 1) {
				throw new Exception(""more than one command service like this"");
			}
			AgentAction action = (AgentAction) context
					.getService(serviceRefs[0]);
			// handle the command
			result = action.handle(message);
		} catch (Exception e) {
			result = message.createResponse();
			result.setErrorMsg( e.getMessage());
			logger.error(e.getMessage(), e);
		}

       return result;
	}


the phenomenon is  I always catch the Exception(about 50%) like this:

ERROR - cn.tianya.amm.agent.service.AgentMessageHandler  - Invalid BundleContext.
java.lang.IllegalStateException: Invalid BundleContext.
    at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)
    at org.apache.felix.framework.BundleContextImpl.getAllServiceReferences(BundleContextImpl.java:411)
    at cn.tianya.amm.agent.service.AgentMessageHandler.handle(AgentMessageHandler.java:55)
    at cn.tianya.fw.mq.impl.activemq.FwMqListenService$MessageSyncHandlerAdapter.run(FwMqListenService.java:582)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)
",Centos 6.0  JDK 6,,,,,,,,,,,FELIX-4751,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-07 13:47:56.583,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 07 13:47:56 UTC 2015,,,,,,0|i23zfb:,9223372036854775807,,,,,,,,"07/Jan/15 13:47;jajans;Already edited and commented on FELIX-4751, but didn't see all the dupes that were created...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getAllServiceReferences() Throw IllegalStateException: Invalid BundleContext,FELIX-4750,12765080,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,Chenqiulin,Chenqiulin,06/Jan/15 09:22,07/Jan/15 13:47,14/Mar/19 02:48,07/Jan/15 13:47,framework-4.0.1,,,,,,,,,,,,,Framework,,,,,,0,,,,,,"I register service like this:

public void start(BundleContext context) throws Exception {

		Dictionary props = new Hashtable();
		// service.pid
		String symbolicName = (String) context.getBundle().getHeaders()
				.get(""Bundle-SymbolicName"");
		props.put(""service.pid"", symbolicName);
		props.put(Constant.COMMANDNAME, ""manager"");

		
		serviceRegistrationRuntime = context.registerService(
				AgentAction.class.getName(), new ManagerAction(context), props);
		logger.info(""manager Service regist success."");
	}

and I get the service like this:
public Response handle(Message message) {
		ServiceReference[] serviceRefs = null;
		Response result = null;
try {
			String mess = message.getContent().toString();
			logger.debug(mess);
			Map map = JsonUtil.toBean(mess, Map.class);

			logger.info(""begin to handle message "" + map.get(MODULENAME));

			serviceRefs = context.getAllServiceReferences(
					AgentAction.class.getName(), ""("" + Constant.COMMANDNAME
							+ ""="" + map.get(MODULENAME) + "")"");
			// serviceRefs = context.getAllServiceReferences(
			// AgentAction.class.getName(),null);
			if (serviceRefs.length == 0) {
				throw new Exception(""has not command service like this"");
			}
			if (serviceRefs.length > 1) {
				throw new Exception(""more than one command service like this"");
			}
			AgentAction action = (AgentAction) context
					.getService(serviceRefs[0]);
			// handle the command
			result = action.handle(message);
		} catch (Exception e) {
			result = message.createResponse();
			result.setErrorMsg( e.getMessage());
			logger.error(e.getMessage(), e);
		}

       return result;
	}


the phenomenon is  I always catch the Exception(about 50%) like this:

ERROR - cn.tianya.amm.agent.service.AgentMessageHandler  - Invalid BundleContext.
java.lang.IllegalStateException: Invalid BundleContext.
    at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)
    at org.apache.felix.framework.BundleContextImpl.getAllServiceReferences(BundleContextImpl.java:411)
    at cn.tianya.amm.agent.service.AgentMessageHandler.handle(AgentMessageHandler.java:55)
    at cn.tianya.fw.mq.impl.activemq.FwMqListenService$MessageSyncHandlerAdapter.run(FwMqListenService.java:582)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)
",Centos 6.0  JDK 6,,,,,,,,,,,FELIX-4751,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-07 13:47:19.718,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 07 13:47:19 UTC 2015,,,,,,0|i23zev:,9223372036854775807,,,,,,,,"07/Jan/15 13:47;jajans;Already edited and commented on FELIX-4751, but didn't see all the dupes that were created...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getAllServiceReferences() Throw IllegalStateException: Invalid BundleContext,FELIX-4749,12765079,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,Chenqiulin,Chenqiulin,06/Jan/15 09:21,07/Jan/15 13:46,14/Mar/19 02:48,07/Jan/15 13:46,framework-4.0.1,,,,,,,,,,,,,Framework,,,,,,0,,,,,,"I register service like this:

public void start(BundleContext context) throws Exception {

		Dictionary props = new Hashtable();
		// service.pid
		String symbolicName = (String) context.getBundle().getHeaders()
				.get(""Bundle-SymbolicName"");
		props.put(""service.pid"", symbolicName);
		props.put(Constant.COMMANDNAME, ""manager"");

		
		serviceRegistrationRuntime = context.registerService(
				AgentAction.class.getName(), new ManagerAction(context), props);
		logger.info(""manager Service regist success."");
	}

and I get the service like this:
public Response handle(Message message) {
		ServiceReference[] serviceRefs = null;
		Response result = null;
try {
			String mess = message.getContent().toString();
			logger.debug(mess);
			Map map = JsonUtil.toBean(mess, Map.class);

			logger.info(""begin to handle message "" + map.get(MODULENAME));

			serviceRefs = context.getAllServiceReferences(
					AgentAction.class.getName(), ""("" + Constant.COMMANDNAME
							+ ""="" + map.get(MODULENAME) + "")"");
			// serviceRefs = context.getAllServiceReferences(
			// AgentAction.class.getName(),null);
			if (serviceRefs.length == 0) {
				throw new Exception(""has not command service like this"");
			}
			if (serviceRefs.length > 1) {
				throw new Exception(""more than one command service like this"");
			}
			AgentAction action = (AgentAction) context
					.getService(serviceRefs[0]);
			// handle the command
			result = action.handle(message);
		} catch (Exception e) {
			result = message.createResponse();
			result.setErrorMsg( e.getMessage());
			logger.error(e.getMessage(), e);
		}

       return result;
	}


the phenomenon is  I always catch the Exception(about 50%) like this:

ERROR - cn.tianya.amm.agent.service.AgentMessageHandler  - Invalid BundleContext.
java.lang.IllegalStateException: Invalid BundleContext.
    at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)
    at org.apache.felix.framework.BundleContextImpl.getAllServiceReferences(BundleContextImpl.java:411)
    at cn.tianya.amm.agent.service.AgentMessageHandler.handle(AgentMessageHandler.java:55)
    at cn.tianya.fw.mq.impl.activemq.FwMqListenService$MessageSyncHandlerAdapter.run(FwMqListenService.java:582)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)
",Centos 6.0  JDK 6,,,,,,,,,,,FELIX-4751,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-07 13:46:52.229,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 07 13:46:52 UTC 2015,,,,,,0|i23zen:,9223372036854775807,,,,,,,,"07/Jan/15 13:46;jajans;Already edited and commented on FELIX-4751, but didn't see all the dupes that were created...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getAllServiceReferences() Throw IllegalStateException: Invalid BundleContext,FELIX-4748,12765078,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,Chenqiulin,Chenqiulin,06/Jan/15 09:20,07/Jan/15 13:46,14/Mar/19 02:48,07/Jan/15 13:46,framework-4.0.1,,,,,,,,,,,,,Framework,,,,,,0,,,,,,"I register service like this:

public void start(BundleContext context) throws Exception {

		Dictionary props = new Hashtable();
		// service.pid
		String symbolicName = (String) context.getBundle().getHeaders()
				.get(""Bundle-SymbolicName"");
		props.put(""service.pid"", symbolicName);
		props.put(Constant.COMMANDNAME, ""manager"");

		
		serviceRegistrationRuntime = context.registerService(
				AgentAction.class.getName(), new ManagerAction(context), props);
		logger.info(""manager Service regist success."");
	}

and I get the service like this:
public Response handle(Message message) {
		ServiceReference[] serviceRefs = null;
		Response result = null;
try {
			String mess = message.getContent().toString();
			logger.debug(mess);
			Map map = JsonUtil.toBean(mess, Map.class);

			logger.info(""begin to handle message "" + map.get(MODULENAME));

			serviceRefs = context.getAllServiceReferences(
					AgentAction.class.getName(), ""("" + Constant.COMMANDNAME
							+ ""="" + map.get(MODULENAME) + "")"");
			// serviceRefs = context.getAllServiceReferences(
			// AgentAction.class.getName(),null);
			if (serviceRefs.length == 0) {
				throw new Exception(""has not command service like this"");
			}
			if (serviceRefs.length > 1) {
				throw new Exception(""more than one command service like this"");
			}
			AgentAction action = (AgentAction) context
					.getService(serviceRefs[0]);
			// handle the command
			result = action.handle(message);
		} catch (Exception e) {
			result = message.createResponse();
			result.setErrorMsg( e.getMessage());
			logger.error(e.getMessage(), e);
		}

       return result;
	}


the phenomenon is  I always catch the Exception(about 50%) like this:

ERROR - cn.tianya.amm.agent.service.AgentMessageHandler  - Invalid BundleContext.
java.lang.IllegalStateException: Invalid BundleContext.
    at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)
    at org.apache.felix.framework.BundleContextImpl.getAllServiceReferences(BundleContextImpl.java:411)
    at cn.tianya.amm.agent.service.AgentMessageHandler.handle(AgentMessageHandler.java:55)
    at cn.tianya.fw.mq.impl.activemq.FwMqListenService$MessageSyncHandlerAdapter.run(FwMqListenService.java:582)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)
",Centos 6.0  JDK 6,,,,,,,,,,,FELIX-4751,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-07 13:46:35.577,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 07 13:46:35 UTC 2015,,,,,,0|i23zef:,9223372036854775807,,,,,,,,"07/Jan/15 13:46;jajans;Already edited and commented on FELIX-4751, but didn't see all the dupes that were created...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Executing actions with parameters on UPnP devices does not work,FELIX-4747,12764903,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,v_valchev,v_valchev,v_valchev,05/Jan/15 13:27,16/Mar/15 08:27,14/Mar/19 02:48,04/Mar/15 14:56,webconsole-upnp-plugin-1.0.4,,,,,,webconsole-upnp-plugin-1.0.6,,,,,,,Web Console,,,,,,0,,,,,,"There is a problem with serialization/deserialization of the the action parameters in UPnP Web Console plugin.

In the javascript code the action invocation is serialized as JSON object, containing 'names' and 'vals', which are arrays of strings.

However, on the Java side, the keys are read as 'names[]' and 'vals[]'. Probably, that's due to changes in jquery or it's a bug, since the plugin is created.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 14:56:06 UTC 2015,,,,,,0|i23ycv:,9223372036854775807,,,,,,,,04/Mar/15 14:56;v_valchev;fixed in SVN rev. 1649521 from 05/01/2015,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot create a new factory configuration from Web Admin Console,FELIX-4735,12762792,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,v_valchev,v_valchev,v_valchev,19/Dec/14 08:20,30/Jan/15 09:37,14/Mar/19 02:48,19/Dec/14 08:22,webconsole-4.2.4,,,,,,webconsole-4.2.6,,,,,,,Web Console,,,,,,0,,,,,,The + button on any factory configuration doesn't work. So basically you are unable to create a new factory config.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 19 08:22:42 UTC 2014,,,,,,0|i23m1r:,9223372036854775807,,,,,,,,19/Dec/14 08:22;v_valchev;fixed in svn rev. 1646649,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console RESTful API should wait for asynchonous operations until they complete ,FELIX-4734,12762026,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,16/Dec/14 15:29,23/Feb/17 10:29,14/Mar/19 02:48,26/Jan/15 07:40,webconsole-4.2.4,,,,,,webconsole-4.2.6,,,,,,,Web Console,,,,,,0,,,,,,"Currently the RESTful API (http://felix.apache.org/documentation/subprojects/apache-felix-web-console/web-console-restful-api.html) adds a delay of 800ms to the response to give the asynchronous operations enough time to complete successfully (https://github.com/apache/felix/blob/trunk/webconsole/src/main/java/org/apache/felix/webconsole/internal/core/BundlesServlet.java#L412).
Instead the according listeners should be used which are notified upon completion of an asynchronous task.
For {{refresh}} {{FrameworkWiring.refreshBundles}} can be used (http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/wiring/FrameworkWiring.html#refreshBundles%28java.util.Collection,%20org.osgi.framework.FrameworkListener...%29). A similar approach should be used for the other actions like uninstall, install, update, start, stop, ...",,,,,,,,,,SLING-4249,,,,,,,,,,19/Dec/14 14:38;v_valchev;FELIX-4734.patch;https://issues.apache.org/jira/secure/attachment/12688333/FELIX-4734.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-19 08:32:30.266,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 26 07:40:17 UTC 2015,,,,,,0|i23hdj:,9223372036854775807,,,,,,,,"19/Dec/14 08:32;v_valchev;IMHO the web console shouldn't way at all, but you might be right, that it's more convenient that way.

Looking at the code, I think that web console waits all the time, but that completely unnecessary for install, start, stop..

But for sure - we should wait for refresh(bundle) and refreshPackages and probably update(bundle). And blind waiting is really not enough. So I'll think about it and propose a patch.","19/Dec/14 14:38;v_valchev;I'm attaching a patch that:
- removes all unnecessary waits
- always waits for refresh package to complete
  -- at most 5 seconds for a single bundle packages refresh
  -- at most 15 seconds for the whole framework packages refresh
- it doesn't uses the wiring, since I'm trying to keep webconsole OSGi 4.0 compliant

I didn't make update to do refresh packages. Considering that web console is developer tool, for me it's better to update the bundle(s) I need, and then to refresh the packages. 


Looking forward for your review.",19/Dec/14 14:39;v_valchev;FELIX-600 is somehow related to this issue,"19/Dec/14 14:47;cziegeler;[~v_valchev] Patch lgtm and I agree to not use the wiring api; and I also agree to not change the behaviour of the ""refresh packages"" button. Thanks","19/Dec/14 16:17;fmeschbe;Please make sure to not cause deadlocks ! We had situations in the past where the web console bundle itself was involved in the update and refreshPackage operations and when not properly handling this, this may cause a deadlock !",26/Jan/15 07:40;cziegeler;I've applied a slighty modified version of the patch in rev 1654733,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UPnP plugin native2ascii plugin conflicts with Eclipse m2e,FELIX-4733,12761990,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,v_valchev,v_valchev,v_valchev,16/Dec/14 09:36,05/Jan/15 09:47,14/Mar/19 02:48,16/Dec/14 09:38,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,There was similar issue with the event admin plugin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 05 09:47:46 UTC 2015,,,,,,0|i23h5j:,9223372036854775807,,,,,,,,16/Dec/14 09:38;v_valchev;Fixed in rev 1645889,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console event plugin is not compatible with OSGi/Minimum EE,FELIX-4732,12761985,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,16/Dec/14 09:21,05/Jan/15 09:53,14/Mar/19 02:48,16/Dec/14 09:26,webconsole-event-plugin-1.1.0,,,,,,webconsole-event-plugin-1.1.2,,,,,,,Web Console,,,,,,0,,,,,,Character.valueOf() is not available in OSGi/Minimum Execution Environment. That prevents the plugin from running on embedded JVMs,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 05 09:53:01 UTC 2015,,,,,,0|i23h4f:,9223372036854775807,,,,,,,,16/Dec/14 09:26;v_valchev;Fixed in rev.1645886,05/Jan/15 09:53;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Event plugin native2ascii plugin conflicts with Eclipse,FELIX-4731,12761981,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,v_valchev,v_valchev,v_valchev,16/Dec/14 09:11,05/Jan/15 09:53,14/Mar/19 02:48,16/Dec/14 09:25,webconsole-event-plugin-1.1.0,,,,,,webconsole-event-plugin-1.1.2,,,,,,,Web Console,,,,,,0,,,,,,"When the event plugin is imported in Eclipse as ""Existing Maven Project"" the project is not correctly generated because of the following section:

{code}
<resource>
	<directory>target/classes</directory>
	<includes>
		<include>OSGI-INF/**</include>
	</includes>
	<filtering>false</filtering>
</resource>
{code}

If you uncomment it, then resources processed by native2ascii doesn't get included.

I've found a solution, and it is to remove the additional resources, but instead add the following instruction to the maven-bundle-plugin:
{code}
<Include-Resource>{maven-resources},OSGI-INF=target/classes/OSGI-INF</Include-Resource>
{code}
",,,,,,,,,,,,,,FELIX-4733,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 05 09:53:01 UTC 2015,,,,,,0|i23h3j:,9223372036854775807,,,,,,,,16/Dec/14 09:25;v_valchev;Fixed in rev.1645885,05/Jan/15 09:53;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RequestDispatcher's servletPath is wrong for the root servlet,FELIX-4730,12761358,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,12/Dec/14 14:18,02/Feb/15 08:06,14/Mar/19 02:48,12/Dec/14 14:25,http-2.3.2,,,,,,http-2.4.0,,,,,,,HTTP Service,,,,,,0,,,,,,"ServletHandler.RequestDispatcherImpl uses the servlet alias unmodified as the servlet path for forwarded requests. In case of the root servlet resgistered with ""/"", this should actually be converted to the empty string according to the specification of ServletRequest.getServletPath().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 12 14:25:55 UTC 2014,,,,,,0|i23ddz:,9223372036854775807,,,,,,,,12/Dec/14 14:25;fmeschbe;Fixed in Rev. 1644885 by applying using the empty string as the servlet path if the alias denotes the root servlet -- this is the same logic as in ServletHandlerRequest.getServletPath,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Core R6] Support for osgi.native namespace with Loading native code libraries,FELIX-4729,12761154,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bobpaulin,bobpaulin,bobpaulin,11/Dec/14 20:20,27/Apr/15 07:01,14/Mar/19 02:48,18/Dec/14 22:14,framework-4.4.1,,,,,,framework-4.6.0,,,,,,,Framework,,,,,,0,,,,,,Implement translation of Bundle-NativeCode to Require-Capability as defined on page 73 of OSGi 6.0.0 spec.,,,,,,,,,,,,,,FELIX-4503,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 18 22:14:21 UTC 2014,,,,,,0|i23c13:,9223372036854775807,,,,,,,,18/Dec/14 22:14;bobpaulin;Completed with rev 1646550 and 1646527.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InstanceManager concurrency issue,FELIX-4728,12761093,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,n.beekman,n.beekman,11/Dec/14 15:56,24/Dec/14 16:24,14/Mar/19 02:48,15/Dec/14 15:59,ipojo-runtime-1.11.2,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"We observed a race condition in InstanceManager.onEntry. This is caused by improperly synchronized access on a HashMap. Unlike reported in FELIX-3500, we did not get an exception, but high cpu usage due to the data race. See the relevant thread stacks in the comments.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-12 07:23:35.804,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 19 09:57:17 UTC 2014,,,,,,0|i23bmn:,9223372036854775807,,,,,,,,"11/Dec/14 15:57;n.beekman;Relevant portions of the thread stacks:

Thread 98: (state = IN_JAVA)
 - java.util.HashMap.getEntry(java.lang.Object) @bci=81, line=465 (Compiled frame; information may be imprecise)
 - java.util.HashMap.containsKey(java.lang.Object) @bci=2, line=449 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.getMethodById(java.lang.String) @bci=19, line=1310 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.onEntry(java.lang.Object, java.lang.String, java.lang.Object[]) @bci=28, line=1238 (Compiled frame)

Thread 62: (state = IN_JAVA)
 - java.util.HashMap.getEntry(java.lang.Object) @bci=81, line=465 (Compiled frame; information may be imprecise)
 - java.util.HashMap.get(java.lang.Object) @bci=11, line=417 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.getMethodById(java.lang.String) @bci=5, line=1309 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.onEntry(java.lang.Object, java.lang.String, java.lang.Object[]) @bci=28, line=1238 (Compiled frame)

Thread 58: (state = IN_JAVA)
 - java.util.HashMap.getEntry(java.lang.Object) @bci=81, line=465 (Compiled frame; information may be imprecise)
 - java.util.HashMap.containsKey(java.lang.Object) @bci=2, line=449 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.getMethodById(java.lang.String) @bci=19, line=1310 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.onEntry(java.lang.Object, java.lang.String, java.lang.Object[]) @bci=28, line=1238 (Compiled frame)

Thread 53: (state = IN_JAVA)
 - java.util.HashMap.getEntry(java.lang.Object) @bci=81, line=465 (Compiled frame; information may be imprecise)
 - java.util.HashMap.containsKey(java.lang.Object) @bci=2, line=449 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.getMethodById(java.lang.String) @bci=19, line=1310 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.onEntry(java.lang.Object, java.lang.String, java.lang.Object[]) @bci=28, line=1238 (Compiled frame)

Thread 44: (state = IN_JAVA)
 - java.util.HashMap.getEntry(java.lang.Object) @bci=81, line=465 (Compiled frame; information may be imprecise)
 - java.util.HashMap.get(java.lang.Object) @bci=11, line=417 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.getMethodById(java.lang.String) @bci=5, line=1309 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.onEntry(java.lang.Object, java.lang.String, java.lang.Object[]) @bci=28, line=1238 (Compiled frame)

Thread 40: (state = IN_JAVA)
 - java.util.HashMap.getEntry(java.lang.Object) @bci=81, line=465 (Compiled frame; information may be imprecise)
 - java.util.HashMap.containsKey(java.lang.Object) @bci=2, line=449 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.getMethodById(java.lang.String) @bci=19, line=1310 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.onEntry(java.lang.Object, java.lang.String, java.lang.Object[]) @bci=28, line=1238 (Compiled frame)

Thread 39: (state = IN_JAVA)
 - java.util.HashMap.getEntry(java.lang.Object) @bci=81, line=465 (Compiled frame; information may be imprecise)
 - java.util.HashMap.containsKey(java.lang.Object) @bci=2, line=449 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.getMethodById(java.lang.String) @bci=19, line=1310 (Compiled frame)
 - org.apache.felix.ipojo.InstanceManager.onEntry(java.lang.Object, java.lang.String, java.lang.Object[]) @bci=28, line=1238 (Compiled frame)
",12/Dec/14 07:23;clement.escoffier;Do you have a way to reproduce it ?,"12/Dec/14 09:22;n.beekman;No, unfortunately. We encountered this issue only once after months in production.
However, if you have tests for the InstanceManager, you should be able to just let a number of threads access onEntry concurrently to reproduce.
A simple fix would be to use ""private Map m_methods = Collections.synchronizedMap(new HashMap());"" or use ConcurrentHashMap if possible, or synchronize getMethodById entirely.

For a detailed explanation of this race condition, see http://mailinator.blogspot.nl/2009/06/beautiful-race-condition.html.",15/Dec/14 15:59;clement.escoffier;Fixed in trunk.,"19/Dec/14 09:57;n.beekman;Thanks for the quick fix. Has a release date for 1.12.1 been set yet?

I think much of the InstanceManager code would benefit a lot from using modern synchronization classes such as ConcurrentMap rather than a crude Collections.synchronizedMap(). I don't know much about iPOJO internals, but this code path seems to be occurring for each and every dependency access. Is there a limitation on JVM version that prevents iPOJO from being able to use these?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WrappedResource.getCapabilities ignores the namespace param,FELIX-4727,12761086,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,11/Dec/14 15:30,15/Dec/14 14:17,14/Mar/19 02:48,12/Dec/14 20:53,,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,"The overall design of org.apache.felix.resolver.WrappedResource is that it is an internal type to the ResolverImpl and is not exposed to external code.  The fact that it does not pay attention to the namespace param is an oversite, but not one that effects the ResolverImpl since it uses a null param anyway and does its own filtering of the capabilities.

But there are cases where this type will get exposed to code outside the resolver implementation.  One example is when ResolverImpl.mergeUses is called and does a ArrayList.contains.  Typically the types in the list are provided by the ResolveContext implementation.  If a WrappedCapability is passed to the ArrayList.contains method then it does an equals call across all values in the list.  If a ResolveContext capability implementation of that equals method calls getResource on  WrappedCapability then it will be exposed to the WrappedResource.  I know of one case where this causes issues when the client code is trying to get the osgi.identity capability of the WrappedResource.  All capabilities are being returned but the first one is not the expected osgi.identity.

Here is a stacktrace from Aries:

Caused by: java.lang.NullPointerException
	at org.apache.aries.subsystem.obr.internal.FelixResourceAdapter.equals(FelixResourceAdapter.java:44)
	at java.util.ArrayList.indexOf(ArrayList.java:319)
	at java.util.ArrayList.contains(ArrayList.java:302)
	at org.apache.felix.resolver.ResolverImpl.mergeUses(ResolverImpl.java:955)
	at org.apache.felix.resolver.ResolverImpl.calculatePackageSpaces(ResolverImpl.java:767)
	at org.apache.felix.resolver.ResolverImpl.calculatePackageSpaces(ResolverImpl.java:715)
	at org.apache.felix.resolver.ResolverImpl.calculatePackageSpaces(ResolverImpl.java:715)
	at org.apache.felix.resolver.ResolverImpl.calculatePackageSpaces(ResolverImpl.java:715)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:249)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:410)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:393)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:101)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:92)
	at org.apache.aries.subsystem.core.internal.InstallAction.createSubsystemResource(InstallAction.java:128)
	at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:62)",All,,,,,,,,,,,,,,,,,,,11/Dec/14 16:57;tjwatson;Felix-4737.patch;https://issues.apache.org/jira/secure/attachment/12686615/Felix-4737.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-12 20:53:06.615,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Dec 15 14:17:35 UTC 2014,,,,,,0|i23bl3:,9223372036854775807,,,,,,,,11/Dec/14 16:57;tjwatson;Fix is to pass the namespace param to the wrapped resource/fragments,"12/Dec/14 20:53;rickhall;I've applied the patch, please close if satisfied. Thanks.",15/Dec/14 14:17;tjwatson;Thanks.  Closing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inner Class Manipulation uses the wrong 'access level',FELIX-4725,12760666,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,10/Dec/14 07:29,24/Dec/14 16:23,14/Mar/19 02:48,10/Dec/14 07:46,ipojo-manipulator-1.12.0,,,,,,ipojo-manipulator-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"When the manipulator manipulates inner classes, the copied method are reusing the same access level than the initial (original method). For instance {code}public void foo(){code}  is replaced by {code}public void __foo(){code}. However, reusing the same access level leads to a (missing) mediation on the invoke instruction we need to use to invoke this method. Despite this is working on traditional JVM (Oracle, HotSpot...), it fails on Dalvik. 

The fix is straightforward. Copied methods should be private:

{code}private void __foo(){code}

Thus, we just need to use the {code}INVOKE_SPECIAL{code} instruction.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 10 07:46:13 UTC 2014,,,,,,0|i239jb:,9223372036854775807,,,,,,,,10/Dec/14 07:46;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SnapshotCommand never properly restores archived data-areas,FELIX-4719,12759412,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,04/Dec/14 12:09,16/Jan/16 15:03,14/Mar/19 02:48,05/Dec/14 09:21,,,,,,,deploymentadmin-0.9.8,,,,,,,Deployment Admin,,,,,,0,,,,,,"The {{RestoreSnapshotRunnable}} task that is used by {{SnapshotCommand}} to restore the data area of a bundle cannot ever work:
{code}
private void unpack(File source, File target) throws IOException {
  ZipInputStream input = null;
  try {
    input = new ZipInputStream(new FileInputStream(source));
    for (ZipEntry entry = input.getNextEntry(); entry != null; entry = input.getNextEntry()) {
      if (entry.isDirectory()) {
        (new File(target, entry.getName())).mkdirs();
      } else {
        OutputStream output = null;
        try {
          output = new FileOutputStream(target);
// THIS:                                ^^^^^^
// ...
{code}

Given that {{target}} is *always* a directory, the marked line above will never succeed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 09:21:02 UTC 2014,,,,,,0|i231y7:,9223372036854775807,,,,,,,,05/Dec/14 09:21;jajans;Fixed in rev #1643202.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SnapshotCommand creates invalid snapshot archives,FELIX-4718,12759409,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,04/Dec/14 11:45,16/Jan/16 15:03,14/Mar/19 02:48,05/Dec/14 09:21,,,,,,,deploymentadmin-0.9.8,,,,,,,Deployment Admin,,,,,,0,,,,,,"When upgrading a bundle, DP archives the data area of all bundles.  For example, consider a bundle that has one file in its data area called {{file1}}. For this case, the data area archive will look like:
{code}
file1
file1/file1
{code}
which is incorrect (the file entry is also used as directory entry, which is impossible to recreate on almost all file systems).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 09:21:17 UTC 2014,,,,,,0|i231xj:,9223372036854775807,,,,,,,,05/Dec/14 09:21;jajans;Fixed in rev #1643202.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot use the stream API on injected collections,FELIX-4717,12759159,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,03/Dec/14 12:42,24/Dec/14 16:23,14/Mar/19 02:48,03/Dec/14 13:47,ipojo-runtime-1.12.0,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"An incompatible class change error is thrown when the stream API is used on injected collections:

{code}
[ERROR]  : java.lang.IncompatibleClassChangeError: Conflicting default methods: java/util/List.spliterator java/util/Set.spliterator
java.lang.IllegalStateException: java.lang.IncompatibleClassChangeError: Conflicting default methods: java/util/List.spliterator java/util/Set.spliterator
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__M_stateChanged(LifecycleCallbackHandler.java:171) ~[org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java) ~[org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:560) [org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:440) [org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:179) [org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:319) [org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:240) [org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:312) [org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:306) [org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.extender.internal.queue.JobInfoCallable.call(JobInfoCallable.java:114) [org.apache.felix.ipojo-1.12.0.jar:na]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0]
	at java.lang.Thread.run(Thread.java:744) [na:1.8.0]
Caused by: java.lang.IncompatibleClassChangeError: Conflicting default methods: java/util/List.spliterator java/util/Set.spliterator
	at org.apache.felix.ipojo.handlers.dependency.ServiceCollection.spliterator(ServiceCollection.java) ~[org.apache.felix.ipojo-1.12.0.jar:na]
	at java.util.Collection.stream(Collection.java:581) ~[na:1.8.0]
	at org.wisdom.samples.SamplesController.__M_test(SamplesController.java:100) ~[na:na]
	at org.wisdom.samples.SamplesController.test(SamplesController.java) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0]
	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0]
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:233) ~[org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:193) ~[org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86) ~[org.apache.felix.ipojo-1.12.0.jar:na]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__M_stateChanged(LifecycleCallbackHandler.java:162) ~[org.apache.felix.ipojo-1.12.0.jar:na]
	... 13 common frames omitted
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 03 13:47:40 UTC 2014,,,,,,0|i230en:,9223372036854775807,,,,,,,,03/Dec/14 13:47;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundle org.apache.felix.ipojo physically contains OSGi API classes,FELIX-4716,12758920,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,palador,palador,02/Dec/14 15:31,24/Dec/14 16:23,14/Mar/19 02:48,10/Dec/14 07:45,ipojo-runtime-1.12.0,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"The _org.apache.felix.ipojo_ bundle imports, exports and physically contains interface-classes of packages _org.osgi.services.cm_ and _org.osgi.services.log_, both with version 1.3.

I'm running ipojo in karaf 3.0.2. There, these osgi-packages also exists, just in another version.

Sometimes it happens that a bundle of mine, which has a package-dependency on _org.osgi.services.cm_ is bound to the ipojo-version instead of the one of felix/karaf. Now, the bundle is resolved, but the service dependency on the ConfigurationAdmin can never be resolved, because the implementation is incompatible to the imported interface.

I can fix that, if I play around with the bundle start levels.

Anyway, I think it's a bug in iPOJO, because it should not inline any OSGi API packages.","ubuntu 14, karaf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-02 15:38:50.946,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 10 07:45:40 UTC 2014,,,,,,0|i22ywf:,9223372036854775807,,,,,,,,02/Dec/14 15:38;clement.escoffier;iPOJO embeds theses classes to be standalone. We should update the embedded version to avoid the issue (and to always use the latest API).,"02/Dec/14 16:01;palador;Oh no, please don't do that...

Now, I can work around this issue by tuning start-levels, so that they're started the newer config-admin API is running. Since it is newer, it is preferred over the API exported by iPOJO. If both bundles export org.osgi.services.* with the same version, I have to look for another hack to get my stuff running correctly.

And I still think, that it's not a good idea to inline AND export these packages. If iPOJO has a dependency on the OSGi-compendium, then it should be. And having the OSGi-compendium API in an OSGi container is not that uncommon :) .

What about making the dependency on org.osgi.services.* optional? Then, I'll have a lot of trouble at runtime with checking whether it's there or not, but in the end it should be possible.","03/Dec/14 07:49;clement.escoffier;Oh I see.

So, first making these packages optional is not really satisfying, for two reasons:

1. Providers (bundle exporting these packages) may come and go, and the optional resolution does not support such dynamism
2. The impact of not having these packages is quite huge. I agree that an initial detection would be enough, but if I want to be more dynamic, that's not that simple

One possibility would be to package a _bare_ version of iPOJO core. This version would not contain _org.osgi.services.*_ packages (just import them). 

WDYT ?",03/Dec/14 10:49;chris@die-schneider.net;Embedding packages from the OSGi compendium or enterprise APIs is quite common practice. If importers of the packages specify correct import ranges this normally should not pose a problem.,"03/Dec/14 11:11;palador;You're right, that's the best solution since it avoids a rotten compromise between being able to run standalone and having a potentially unnecessary package-dependencies on OSGi-services.

BTW. I'm still a bit confused if the approach with inlining api classes works. Imagine:

Bundle 1: exports and contains org.osgi.service.cm;version=""1.3""  and requires service org.osgi.service.cm.ConfigurationAdmin 
Bundle 2: exports and contains org.osgi.service.cm;version=""1.5""

Bundle 3: imports org.osgi.service.cm;version=""[1.0,2)"" and registers ConfigAdminImpl (which implements org.osgi.service.cm.ConfigurationAdmin)
Bundle 4: imports org.osgi.service.cm;version=""[1.0,2)"" and want to use org.osgi.service.cm.ConfigurationAdmin 

Now, when everything is started, Bundle 3 and 4 would be wired to either Bundle 1 or 2. If they are started in the given order, Bundle 2 would be preferred, cause of the higher package-version. Now, bundle 4 can take the service, because it's using the same API-package.
But how can bundle 1 use the service? It's service API interface class is not an instance of the one provided by Bundle 3, since both API-classes come from different bundles and are defined by different class-loaders.

The question is, I believe that there doesn't exist any ConfigAdmin service or whatever for the iPOJO bundle. There is one, but it is incompatible because it doesn't implement the API provided by iPOJO but the newer provided by the latest config-admin-api bundle...","03/Dec/14 14:01;chris@die-schneider.net;Like you explained your example would not work. The problem is that some of the Import ranges are wrong.

Every bundle that exports an OSGi API and also uses it should also import it. So bundle 1 is wrong as it only exports the API. It also should import it with a range of [1,2)

The idea behind this is that if everyone imports the OSGI API then the OSGi framework will only select one bundle to export the API and all use the same classloader for that package","03/Dec/14 14:25;palador;Thank you, I got it. Also, that's why I can ""fix"" my problem with fine-tuning the bundle startlevels: If the iPOJO bundle is started after the bundle exporting a newer version of _org.osgi....._, It'll use this package instead of its own one.",10/Dec/14 07:45;clement.escoffier;Fixed in trunk by creating a 'bare' bundle that does not include the classes from the compendium.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
instance bundle context injection does not works,FELIX-4715,12758408,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,speedytblob,speedytblob,28/Nov/14 23:46,24/Dec/14 16:23,14/Mar/19 02:48,02/Dec/14 13:10,ipojo-runtime-1.12.0,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"Using @Context(Context.Source.INSTANCE) field injection injects null value.

I tested it on iPOJO 1.11.x and it was working.",Ubuntu 14.04 LTS and Mac OS X,,,,,,,,,,,FELIX-4646,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-02 12:57:34.232,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 02 13:10:13 UTC 2014,,,,,,0|i22vs7:,9223372036854775807,,,,,,,,"02/Dec/14 12:57;clement.escoffier;After discussing with Thomas, the issue happens when instances are declared in `@Configuration` classes.",02/Dec/14 13:10;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error in ProvidedServiceHandler.checkProvidedService : only the first service is checked,FELIX-4713,12758253,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,gvega,gvega,27/Nov/14 15:49,02/Dec/14 18:06,14/Mar/19 02:48,02/Dec/14 18:06,ipojo-runtime-1.11.2,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"Verification in the method checkProvidedService tries to get the field ""specification"" from the service interface, if the field doesn't exist it returns from the method and stop verifying the remaining interfaces in the list.

Solution : change
{quote}
           \} catch (NoSuchFieldException e) \{
                  return true; // No specification field
            \}
{quote}

to

{quote}
          \} catch (NoSuchFieldException e) \{
                  {color:red} continue; // No specification field{color}
          \}
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-02 12:23:24.318,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 02 18:06:52 UTC 2014,,,,,,0|i22uuf:,9223372036854775807,,,,,,,,"02/Dec/14 12:23;clement.escoffier;Fixed in trunk. I've applied to proposed patch.

Interesting, the issue only shows up on Java 8. ",02/Dec/14 18:01;clement.escoffier;Looks a bit more tricky than expected. There are some changes on how interfaces are loaded on Java 8.,02/Dec/14 18:06;clement.escoffier;This time is should be fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect Named Dependencies are binded to the Service Instance,FELIX-4709,12757292,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,eanujwa,eanujwa,23/Nov/14 14:46,19/Mar/15 05:59,14/Mar/19 02:48,16/Jan/15 22:39,dependencymanager.runtime-3.2.0,,,,,,org.apache.felix.dependencymanager-r1,,,,,,,Dependency Manager Runtime,,,,,,1,,,,,,"There is an issue when we use @FactoryConfigurationAdapterService with dynamic filtering using init() method. 

Use Case: We want to have multiple instances of a service. For each service instance,  we want to dynamically specify service dependency filter based on the configuration received for the service instance.

Issue: Whenever  init() method of new created service instance is invoked, ALL Named dependencies(with filters) defined in init method of previously created service instances are also added as named dependencies for this service instance. This is not logical as init must ONLY  add filters defined in the init of this particular service instance.  When we run DM command, this is visible. We created two service instances with value of property: com.ericsson.rm.config.tag  as main and v30. In the output of Dm command, we can see that second instance of the factory i.e. 137 also has named dependencies with filters of the first service instance i.e. 136 . Second instance must not have named dependencies with filter  com.ericsson.rm.config.tag=main which was specified in configuration of first instance (136) . 137 must only have named dependencies with filter com.ericsson.rm.config.tag=v30.

Output of DM command:

[110] com.ericsson.bss.voucher.traffic.persistence.cassandra
 [34] Adapter for factory pid com.ericsson.rm.voucher.traffic.persistence.cassandra registered
    com.ericsson.bss.ctrl.service.jmx.MBeanServerAdmin service required available
    javax.transaction.TransactionManager service required available
 [136] com.ericsson.rm.service.voucher.traffic.persistence.VoucherPersistenceService(service.pid=com.ericsson.rm.voucher.traffic.persistence.cassandra-1416741861126-0,com.ericsson.rm.config.tag=main,service.factoryPid=com.ericsson.rm.voucher.traffic.persistence.cassandra) registered
javax.transaction.TransactionManager service required available       com.ericsson.rm.service.domain.types.cryption.DomainTypesCryption (com.ericsson.rm.config.tag=main-db) service required available com.ericsson.rm.service.encryption.hash.EncryptionTokenService (com.ericsson.rm.config.tag=main) service required available
 [137] com.ericsson.rm.service.voucher.traffic.persistence.VoucherPersistenceService(service.pid=com.ericsson.rm.voucher.traffic.persistence.cassandra-1416742092818-74,com.ericsson.rm.config.tag=v30, ,service.factoryPid=com.ericsson.rm.voucher.traffic.persistence.cassandra) registered
 javax.transaction.TransactionManager service required available com.ericsson.rm.service.domain.types.cryption.DomainTypesCryption (com.ericsson.rm.config.tag=main-db) service required availablc
com.ericsson.rm.service.encryption.hash.EncryptionTokenService (com.ericsson.rm.config.tag=main) service required available
 com.ericsson.rm.service.domain.types.cryption.DomainTypesCryption (com.ericsson.rm.config.tag=v30-db) service required available
    com.ericsson.rm.service.encryption.hash.EncryptionTokenService (com.ericsson.rm.config.tag=v30) service required available

We are intermittently facing issues where named dependencies (with filters specified in other service instances) are getting bound to a service instance and we suspect that the above mentioned issue is the reason. Please confirm our assumption. If you see any other problem in the code , please let us know. Please also suggest workaround to make sure binding is correct.

Felix Code Analysis:
Looking into the code of ServiceLifeCycleHandler,we observed: Instead of creating new list of named dependencies with their filter for EACH service instance created, ServiceLifecycleHandler maintains a common list  of all named dependencies with their filters for all service instances.  Thus when init method of a service instance is called, named dependencies with filters are added to existing list of dependencies from previous service instances 

We used dependency manager as follows:

@FactoryConfigurationAdapterService(provides = VoucherPersistenceService.class, factoryPid = ""com.ericsson.rm.voucher.traffic.persistence.cassandra"",
        propagate = true, updated = ""configure"")
public class CassandraPersistence implements VoucherPersistenceService
{
……
//Named Dependencies.
@ServiceDependency(name = ""Cryption"", added = ""bindDomainTypesCryption"", removed = ""unbindDomainTypesCryption"", required = true)
    public void bindDomainTypesCryption(final DomainTypesCryption parDomainTypesCryption)
    { //some code }

@ServiceDependency(name = ""EncryptionTokenService"", added = ""bindEncryptionTokenService"", removed = ""unbindEncryptionTokenService"", required = true)
    public void bindEncryptionTokenService(final EncryptionTokenService parEncryptionTokenService)
    { //some code  }

    
//Unnamed Dependencies
    @ServiceDependency(added = ""bindTransactionManager"", removed = ""unbindTransactionManager"", required = true)
    public void bindTransactionManager(final TransactionManager parTransactionManager)
    {//some code}

    protected void configure(Dictionary<String, ?> parParameters)
    {
        myMvnoId = (String) parParameters.get(Constants.MVNO_CONFIG_TAG);
        
    }

@Init
    Map init()
    {
        Map m = new HashMap();
        String filter = ""(com.ericsson.rm.config.tag="" + myMvnoId + "")"";
 m.put(""Cryption.filter"", Constants.MVNO_FILTER_PREFIX + myMvnoId + Constants.MVNO_SEPARATOR + ""db)"");
        m.put(""EncryptionTokenService.filter"", filter);
        return m;
    }	

Thanks


","Windows 7 Enterprise, Eclipse 3.8",,,,,,,,,,,,,,,,,,,23/Nov/14 23:49;pderop;FELIX-4709.patch;https://issues.apache.org/jira/secure/attachment/12683247/FELIX-4709.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-11-23 22:59:53.964,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 16 22:39:25 UTC 2015,,,,,,0|i22p2f:,9223372036854775807,,,,,,,,"23/Nov/14 22:59;pderop;Thanks for reporting this issue, and also for the bug analysis !

I believe I already fixed this problem in the DM 4.0.0 version, which is currently still in the sanbox, in [1].
I hope I will be able to move soon the code from [1] into the felix-trunk and then make a release.

In the meantime, I will try to backport the fix I made in the sandbox and will attach a patch to this issue, so you can compile it and go ahead; but I would like to avoid committing it, since the sandbox version will be copied soon to the felix-trunk (and the code in the sandbox has changed a lot).

I hope to provide a fix to apply on the DM 3.2.0 tomorrow, if I can.
thanks.

[1] http://svn.apache.org/viewvc/felix/sandbox/pderop/dependencymanager-prototype/
","23/Nov/14 23:49;pderop;I attached to this issue the FELIX-3709.patch file, which you can apply on the dependencymanager/runtime/ 3.2.0 codebase.

Please let me know if this is fixing your problem.
","16/Jan/15 22:39;pderop;I believe that this issue has been fixed in the dependencymanager.runtime 4.0.0 version. So, I'm setting this issue as fixed. 

The new 4.0.0 version will be moved soon from the sandbox to the felix-trunk and will be released soon.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Properties with surprising spelling in AutoProcessor,FELIX-4701,12755986,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,bmargulies,bmargulies,18/Nov/14 01:14,18/Nov/14 15:39,14/Mar/19 02:48,18/Nov/14 13:39,framework-4.0.3,,,,,,framework-4.6.0,,,,,,,,,,,,,0,,,,,,"Several fields are missing a ""T"":

AUTO_DEPLOY_DIR_PROPERY

e.g.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-18 13:23:05.421,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Nov 18 15:39:09 UTC 2014,,,,,,0|i22hjr:,9223372036854775807,,,,,,,,"18/Nov/14 13:23;rickhall;Pretty funny and sad at the same time.  I guess that's what copy and paste and command completion can do to you...makes us lazy. :-)

I assume we will have to mark the old spelling deprecated and introduce the correct spelling.",18/Nov/14 13:39;rickhall;I created properly spelled properties and deprecated the old ones. Please close this bug if satisfied. Thanks.,18/Nov/14 15:39;bmargulies;He who is well paid is well satisfied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some bundles containing native code can fail to start on Windows 7+,FELIX-4690,12754415,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,bobpaulin,AndreyMZ,AndreyMZ,11/Nov/14 09:15,27/Apr/15 07:01,14/Mar/19 02:48,09/Jan/15 03:10,framework-4.4.1,,,,,,framework-4.6.0,,,,,,,Framework,,,,,,0,,,,,,"The fix of the FELIX-4534 is incomplete a little: ""Windows7"" is still normalized to ""win"" instead of ""windows7"".

Bundles which have ""Windows7"" in their manifest fail to start.
*Workaround:* for bundle provider to use ""windows7"" instead of ""Windows7"" in a manifest.


","Windows 7, 8, 9",,,,,,,,,,,,,FELIX-3883,FELIX-4534,,,,,11/Nov/14 09:16;AndreyMZ;R4LibrabyClause-normalizeOSName.patch;https://issues.apache.org/jira/secure/attachment/12680769/R4LibrabyClause-normalizeOSName.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-01-09 03:10:22.818,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 09 03:10:22 UTC 2015,,,,,,0|i22853:,9223372036854775807,,,,,,,,11/Nov/14 09:16;AndreyMZ;I have attached a patch. Could anyone review and commit it?,09/Jan/15 03:10;bobpaulin;This is resolved with the fix for FELIX-3883.  Added a test with rev 1650433 to confirm Windows7 resolves to windows7 not win.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"If component is declared with 1.3 NS and ds.factory.enabled = true, validation error occors",FELIX-4686,12753907,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,08/Nov/14 11:25,11/Aug/15 05:09,14/Mar/19 02:48,12/Nov/14 01:37,,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"For example the following component xml leads to a validation error:

""Configuration of component factory instances through config admin factory pids supported only through the 1.2 namespace""

<components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.3.0"">
    <scr:component name=""org.apache.sling.sample.slingshot.impl.SetupService"" activate=""activate"" deactivate=""deactivate"">
        <implementation class=""org.apache.sling.sample.slingshot.impl.SetupService""/>
        <property name=""service.vendor"" value=""The Apache Software Foundation""/>
        <property name=""service.pid"" value=""org.apache.sling.sample.slingshot.impl.SetupService""/>
    </scr:component>
</components>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-11 23:57:31.602,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 12 01:37:04 UTC 2014,,,,,,0|i2254f:,9223372036854775807,,,,,,,,"11/Nov/14 23:41;cziegeler;[~djencks] What do you think about this patch , which disables the non standard factory stuff if namespace 1.3+ is used:

Index: src/main/java/org/apache/felix/scr/impl/metadata/XmlHandler.java
===================================================================
--- src/main/java/org/apache/felix/scr/impl/metadata/XmlHandler.java	(revision 1637751)
+++ src/main/java/org/apache/felix/scr/impl/metadata/XmlHandler.java	(working copy)
@@ -280,7 +280,14 @@
                     m_currentComponent.setConfigurableServiceProperties(""true"".equals(attributes.getAttribute(NAMESPACE_URI_1_0_FELIX_EXTENSIONS, CONFIGURABLE_SERVICE_PROPERTIES)));
                     m_currentComponent.setPersistentFactoryComponent(""true"".equals(attributes.getAttribute(NAMESPACE_URI_1_0_FELIX_EXTENSIONS, PERSISTENT_FACTORY_COMPONENT)));
                     m_currentComponent.setDeleteCallsModify(""true"".equals(attributes.getAttribute(NAMESPACE_URI_1_0_FELIX_EXTENSIONS, DELETE_CALLS_MODIFY)));
-                    m_currentComponent.setObsoleteFactoryComponentFactory(m_globalObsoleteFactoryComponentFactory ||  ""true"".equals(attributes.getAttribute(NAMESPACE_URI_1_0_FELIX_EXTENSIONS, OBSOLETE_FACTORY_COMPONENT_FACTORY)));
+                    if ( namespaceCode.isDS13() )
+                    {
+                           m_currentComponent.setObsoleteFactoryComponentFactory(false);
+                    }
+                    else
+                    {
+                        m_currentComponent.setObsoleteFactoryComponentFactory(m_globalObsoleteFactoryComponentFactory ||  ""true"".equals(attributes.getAttribute(NAMESPACE_URI_1_0_FELIX_EXTENSIONS, OBSOLETE_FACTORY_COMPONENT_FACTORY)));
+                    }
                     m_currentComponent.setConfigureWithInterfaces(""true"".equals(attributes.getAttribute(NAMESPACE_URI_1_0_FELIX_EXTENSIONS, CONFIGURE_WITH_INTERFACES)));
                     m_currentComponent.setDelayedKeepInstances(m_globalDelayedKeepInstances || ""true"".equals(attributes.getAttribute(NAMESPACE_URI_1_0_FELIX_EXTENSIONS, DELAYED_KEEP_INSTANCES)));
 
","11/Nov/14 23:57;djencks;IIUC your example only fails if your felix configuration includes the global ds.factory.enabled = true flag, which IMO we should do our utmost to discourage, since there is now a felix-namespace attribute you can use per-component.

I don't like this suggestion.  You only get a 1.3 namespace from annotations if you use a new 1.3 feature or explicitly set it.  In this case it should be an error to try to use the obsolete component factory stuff, it should not be silently ignored.  If you have a bundle where you want to update the namespace to 1.3 but are not willing to fix the code to use factory configurations properly, you can go to the trouble of adding the felix-namespace attribute to all these badly written components.  There's no reason to make preserving these obsolete implementations easy with up-to-date namespaces, we should encourage people to update them, and to not use the obsolete global flag.","12/Nov/14 00:11;cziegeler;[~djencks] But my component is neither a factory nor is it really trying to use the feature enabled with ds.factory.enabled = true (it's right that this flag is enabled to be able to deal with old components). So I can't disable the flag - so if we don't fix this, I can never use 1.3 features, which I believe is not what we want.
Another option would be to remove the support of ds.factory.enable completely","12/Nov/14 00:24;djencks;If we completely removed ds.factory.enable support, your old components wouldn't work even if you didn't use any 1.3 features:-)  I'm OK with that, but I don't think you are :-)
The current situation is that if you want to use 1.3 features and obsolete components, you have to change the component descriptor for the obsolete components to mark them obsolete by adding the felix-namespace attribute.  Even if you don't own the source code for these, you can repackage the compiled component and change the component xml descriptor.","12/Nov/14 00:34;cziegeler;I still think this is a little bit strange as we put a pun on components using new stuff.
So, as we have the felix-namespace, we *could* remove the ds.factory.enabled flag - now, my problem is actually not that we have old components, but we have running installations where the flag is set and as soon as I update the DS implementation I can't use 1.3 stuff unless I remove the ds.factory.enabled property - which in my case is not that easy","12/Nov/14 01:02;cziegeler;[~djencks] Rethinking the whole story, for compatibility sake we should leave the switch (ds.factory.enabled) in.
So basically what you're saying is to always switch of ds.factory.enabled and change the old components that use that. However, you don't know which component is actually using this, right? If you have hundreds of bundles, you would need to rewrap all those bundles. (Or maybe I'm missing something).
Where on the other hand, we could simply say, if you're using the 1.3 NS, the ds.factory.enabled flag has no influence on your component anymore - which my patch does. And this simply ensures, old bundles work as is, new bundles work as expected as well.","12/Nov/14 01:11;djencks;I'm having trouble reading your patch in my web browser, so it might possibly already do what I'm going to propose:

-- for pre-1.3 components, either the global flag or the attribute will turn on the obsolete behavior

-- for 1.3 components, the global flag has no effect

-- for 1.3 components, using the attribute fails verification.

We could remove the attribute, but I think it might be useful for someone interested in gradually removing/rewriting obsolete components.  If you feel strongly about this and want to remove the attribute, I won't object.","12/Nov/14 01:23;cziegeler;[~djencks] My patch does point 1 and 2, but actually not 3 yet. I'll implement that one in addition, then. And I don't think we need to remove the attribute. Thanks!",12/Nov/14 01:37;cziegeler;Fixed as outlined above,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible AIOOBE when using single-digit port,FELIX-4681,12751077,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,28/Oct/14 13:01,11/Nov/14 11:43,14/Mar/19 02:48,28/Oct/14 13:04,,,,,,,http-2.3.2,,,,,,,HTTP Service,,,,,,0,,,,,,"When specifying a single-digit port number for the HTTP service, an exception occurs in the parse-routine of port ranges. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 28 13:04:02 UTC 2014,,,,,,0|i21o1r:,9223372036854775807,,,,,,,,28/Oct/14 13:04;jajans;Fixed in rev #1634867.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in Felix HTTP service,FELIX-4670,12748034,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,joerghoh,joerghoh,14/Oct/14 14:01,11/Nov/14 11:43,14/Mar/19 02:48,16/Oct/14 09:37,http-2.2.0,,,,,,http-2.3.2,,,,,,,HTTP Service,,,,,,0,,,,,,"When we startup our webapplication, we sometimes run into a deadlock:

{code}
1LKDEADLOCK    Deadlock detected !!!
NULL           ---------------------
NULL           
2LKDEADLOCKTHR  Thread ""server.startup : 1"" (0x0000000001DDC800)
3LKDEADLOCKWTR    is waiting for:
4LKDEADLOCKMON      sys_mon_t:0x00007FFFBBB61F20 infl_mon_t: 0x00007FFFBBB61F90:
4LKDEADLOCKOBJ      org/apache/felix/http/whiteboard/internal/manager/ExtenderManager@0x00000001014B3650/0x00000001014B365C: 
3LKDEADLOCKOWN    which is owned by:
2LKDEADLOCKTHR  Thread ""FelixStartLevel"" (0x0000000002156100)
3LKDEADLOCKWTR    which is waiting for:
4LKDEADLOCKMON      sys_mon_t:0x00007FFFBBBBA340 infl_mon_t: 0x00007FFFBBBBA3B0:
4LKDEADLOCKOBJ      org/apache/felix/http/base/internal/handler/HandlerRegistry@0x00000001070D6EA0/0x00000001070D6EAC: 
3LKDEADLOCKOWN    which is owned by:
2LKDEADLOCKTHR  Thread ""server.startup : 1"" (0x0000000001DDC800)
NULL         
{code}

The stacktrace of these 2 threads as indicated by the javacore file:

{code}
3XMTHREADINFO      ""FelixStartLevel"" J9VMThread:0x0000000002156100, j9thread_t:0x00007FFFC938B4B0, java/lang/Thread:0x0000000101580260, state:B, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0x70, isDaemon:true)
3XMTHREADINFO1            (native thread ID:0x5D3A, native priority:0x5, native policy:UNKNOWN)
3XMTHREADINFO2            (native stack address range from:0x00007FFFC530A000, to:0x00007FFFC534B000, size:0x41000)
3XMTHREADINFO3           Java callstack:
4XESTACKTRACE                at org/apache/felix/http/base/internal/service/HttpServiceImpl.unregisterFilter(HttpServiceImpl.java:140)    
4XESTACKTRACE                at org/apache/felix/http/base/internal/service/HttpServiceImpl.unregisterFilter(HttpServiceImpl.java:76)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/manager/FilterMapping.unregister(FilterMapping.java:90)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/manager/FilterMapping.unregister(FilterMapping.java:83)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/manager/ExtenderManager.unregisterMapping(ExtenderManager.java:270)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/manager/ExtenderManager.removeMapping(ExtenderManager.java:252)      
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/manager/ExtenderManager.remove(ExtenderManager.java:183)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/tracker/FilterTracker.removed(FilterTracker.java:48)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/tracker/FilterTracker.removed(FilterTracker.java:24)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/tracker/AbstractTracker.removedService(AbstractTracker.java:52)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:956)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:864)
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.untrack(AbstractTracked.java:341(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:902(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireEventImmediately(EventDispatcher.java:793(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireServiceEvent(EventDispatcher.java:543(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.fireServiceEvent(Felix.java:4401(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.access$000(Felix.java:74(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix$1.serviceChanged(Felix.java:390(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/ServiceRegistry.unregisterService(ServiceRegistry.java:151(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127(Compiled Code))
4XESTACKTRACE                at org/apache/felix/scr/impl/manager/AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:702(Compiled Code))
4XESTACKTRACE                at org/apache/felix/scr/impl/manager/AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1301(Compiled Code))
4XESTACKTRACE                at org/apache/felix/scr/impl/manager/AbstractComponentManager$Satisfied.dispose(AbstractComponentManager.java:1617)
4XESTACKTRACE                at org/apache/felix/scr/impl/manager/AbstractComponentManager.disposeInternal(AbstractComponentManager.java:574(Compiled Code))
4XESTACKTRACE                at org/apache/felix/scr/impl/manager/AbstractComponentManager.dispose(AbstractComponentManager.java:404(Compiled Code))
4XESTACKTRACE                at org/apache/felix/scr/impl/config/ImmediateComponentHolder.disposeComponents(ImmediateComponentHolder.java:371(Compiled Code))
4XESTACKTRACE                at org/apache/felix/scr/impl/BundleComponentActivator.dispose(BundleComponentActivator.java:320(Compiled Code))
4XESTACKTRACE                at org/apache/felix/scr/impl/Activator.disposeComponents(Activator.java:316)
4XESTACKTRACE                at org/apache/felix/scr/impl/Activator.bundleChanged(Activator.java:183(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireEventImmediately(EventDispatcher.java:789(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireBundleEvent(EventDispatcher.java:514(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.fireBundleEvent(Felix.java:4385(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.stopBundle(Felix.java:2508)
4XESTACKTRACE                at org/apache/felix/framework/Felix.setActiveStartLevel(Felix.java:1297(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
4XESTACKTRACE                at java/lang/Thread.run(Thread.java:761)
{code}

{code}
3XMTHREADINFO      ""server.startup : 1"" J9VMThread:0x0000000001DDC800, j9thread_t:0x00007FFFC8C61340, java/lang/Thread:0x00000001014B35A8, state:B, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0x68, isDaemon:true)
3XMTHREADINFO1            (native thread ID:0x5A08, native priority:0x5, native policy:UNKNOWN)
3XMTHREADINFO2            (native stack address range from:0x00007FFFC64D4000, to:0x00007FFFC6515000, size:0x41000)
3XMTHREADINFO3           Java callstack:
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/manager/ExtenderManager.remove(ExtenderManager.java:183)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/tracker/ServletTracker.removed(ServletTracker.java:48)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/tracker/ServletTracker.removed(ServletTracker.java:24)
4XESTACKTRACE                at org/apache/felix/http/whiteboard/internal/tracker/AbstractTracker.removedService(AbstractTracker.java:52)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:956)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:864)
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.untrack(AbstractTracked.java:341(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:902(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.invokeServiceLi	stenerCallback(EventDispatcher.java:932(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireEventImmediately(EventDispatcher.java:793(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireServiceEvent(EventDispatcher.java:543(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.fireServiceEvent(Felix.java:4401(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.access$000(Felix.java:74(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix$1.serviceChanged(Felix.java:390(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/ServiceRegistry.unregisterService(ServiceRegistry.java:151(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127(Compiled Code))
4XESTACKTRACE                at org/apache/felix/inventory/impl/InventoryPrinterAdapter.unregisterConsole(InventoryPrinterAdapter.java:84)
4XESTACKTRACE                at org/apache/felix/inventory/impl/InventoryPrinterManagerImpl.addService(InventoryPrinterManagerImpl.java:196)
4XESTACKTRACE                at org/apache/felix/inventory/impl/InventoryPrinterManagerImpl.addingService(InventoryPrinterManagerImpl.java:128)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.trackAdding(AbstractTracked.java:256(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.track(AbstractTracked.java:229(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:894(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireEventImmediately(EventDispatcher.java:793(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireServiceEvent(EventDispatcher.java:543(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.fireServiceEvent(Felix.java:4401(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.registerService(Felix.java:3411(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/BundleContextImpl.registerService(BundleContextImpl.java:346(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/BundleContextImpl.registerService(BundleContextImpl.java:320)
4XESTACKTRACE                at org/apache/felix/inventory/impl/webconsole/WebConsoleAdapter.add(WebConsoleAdapter.java:125)
4XESTACKTRACE                at org/apache/felix/inventory/impl/webconsole/WebConsoleAdapter.addingService(WebConsoleAdapter.java:155)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.trackAdding(AbstractTracked.java:256(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.track(AbstractTracked.java:229(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:894(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireEventImmediately(EventDispatcher.java:793(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireServiceEvent(EventDispatcher.java:543(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.fireServiceEvent(Felix.java:4401(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.registerService(Felix.java:3411(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/BundleContextImpl.registerService(BundleContextImpl.java:346(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/BundleContextImpl.registerService(BundleContextImpl.java:320)
4XESTACKTRACE                at de/xxx/yyy/modules/common/servlet/dispatcher/jsp/JspTldLocationsCache.<init>(JspTldLocationsCache.java:81)
4XESTACKTRACE                at de/xxx/yyy/modules/common/servlet/dispatcher/jsp/engine/JspScriptEngineFactory.activate(JspScriptEngineFactory.java:235)
4XESTACKTRACE                at de/xxx/yyy/modules/common/servlet/ContainerServlet.init(ContainerServlet.java:96)
4XESTACKTRACE                at org/apache/felix/http/base/internal/handler/ServletHandler.init(ServletHandler.java:55)
4XESTACKTRACE                at org/apache/felix/http/base/internal/handler/HandlerRegistry.addServlet(HandlerRegistry.java:65)                     
4XESTACKTRACE                at org/apache/felix/http/base/internal/service/HttpServiceImpl.registerServlet(HttpServiceImpl.java:95)
4XESTACKTRACE                at de/xxx/yyy/modules/common/osgi/webapp/WebappModuleServiceTracker.addingService(WebappModuleServiceTracker.java:82)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.trackAdding(AbstractTracked.java:256(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.track(AbstractTracked.java:229(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:894(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireEventImmediately(EventDispatcher.java:793(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/util/EventDispatcher.fireServiceEvent(EventDispatcher.java:543(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.fireServiceEvent(Felix.java:4401(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/Felix.registerService(Felix.java:3411(Compiled Code))
4XESTACKTRACE                at org/apache/felix/framework/BundleContextImpl.registerService(BundleContextImpl.java:346(Compiled Code))
4XESTACKTRACE                at org/apache/felix/http/base/internal/HttpServiceController.register(HttpServiceController.java:135)
4XESTACKTRACE                at org/apache/felix/http/base/internal/DispatcherServlet.init(DispatcherServlet.java:48)
4XESTACKTRACE                at org/apache/felix/http/proxy/DispatcherTracker.initDispatcher(DispatcherTracker.java:97)
4XESTACKTRACE                at org/apache/felix/http/proxy/DispatcherTracker.setDispatcher(DispatcherTracker.java:77)
4XESTACKTRACE                at org/apache/felix/http/proxy/DispatcherTracker.addingService(DispatcherTracker.java:52)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864)
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.trackAdding(AbstractTracked.java:256(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/AbstractTracked.trackInitial(AbstractTracked.java:183(Compiled Code))
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker.open(ServiceTracker.java:317)
4XESTACKTRACE                at org/osgi/util/tracker/ServiceTracker.open(ServiceTracker.java:261)
4XESTACKTRACE                at org/apache/felix/http/proxy/ProxyServlet.doInit(ProxyServlet.java:51)
4XESTACKTRACE                at org/apache/felix/http/proxy/ProxyServlet.init(ProxyServlet.java:39)
4XESTACKTRACE                at org/apache/sling/launchpad/base/webapp/SlingServletDelegate.init(SlingServletDelegate.java:208)
4XESTACKTRACE                at javax/servlet/GenericServlet.init(GenericServlet.java:241)
4XESTACKTRACE                at org/apache/sling/launchpad/webapp/SlingServlet.startSling(SlingServlet.java:384)
4XESTACKTRACE                at org/apache/sling/launchpad/webapp/SlingServlet.startSling(SlingServlet.java:325)
4XESTACKTRACE                at org/apache/sling/launchpad/webapp/SlingServlet.init(SlingServlet.java:118)
4XESTACKTRACE                at javax/servlet/GenericServlet.init(GenericServlet.java:241)
4XESTACKTRACE                at com/ibm/ws/webcontainer/servlet/ServletWrapper.init(ServletWrapper.java:363)
4XESTACKTRACE                at com/ibm/ws/webcontainer/servlet/ServletWrapperImpl.init(ServletWrapperImpl.java:171)
4XESTACKTRACE                at com/ibm/ws/webcontainer/servlet/ServletWrapper.initialize(ServletWrapper.java:1844)
4XESTACKTRACE                at com/ibm/wsspi/webcontainer/extension/WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:98)
4XESTACKTRACE                at com/ibm/ws/webcontainer/webapp/WebApp.getServletWrapper(WebApp.java:1048(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/webcontainer/webapp/WebApp.getServletWrapper(WebApp.java:969)
4XESTACKTRACE                at com/ibm/ws/webcontainer/webapp/WebApp.initializeTargetMappings(WebApp.java:648(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/webcontainer/webapp/WebApp.commonInitializationFinally(WebApp.java:450)
4XESTACKTRACE                at com/ibm/ws/webcontainer/webapp/WebAppImpl.initialize(WebAppImpl.java:304(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/webcontainer/webapp/WebGroupImpl.addWebApplication(WebGroupImpl.java:100)
4XESTACKTRACE                at com/ibm/ws/webcontainer/VirtualHostImpl.addWebApplication(VirtualHostImpl.java:166)
4XESTACKTRACE                at com/ibm/ws/webcontainer/WSWebContainer.addWebApp(WSWebContainer.java:732)
4XESTACKTRACE                at com/ibm/ws/webcontainer/WSWebContainer.addWebApplication(WSWebContainer.java:617)
4XESTACKTRACE                at com/ibm/ws/webcontainer/component/WebContainerImpl.install(WebContainerImpl.java:376)
4XESTACKTRACE                at com/ibm/ws/webcontainer/component/WebContainerImpl.start(WebContainerImpl.java:668)
4XESTACKTRACE                at com/ibm/ws/runtime/component/ApplicationMgrImpl.start(ApplicationMgrImpl.java:1128(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/runtime/component/DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1319)
4XESTACKTRACE                at com/ibm/ws/runtime/component/DeployedModuleImpl.start(DeployedModuleImpl.java:611(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/runtime/component/DeployedApplicationImpl.start(DeployedApplicationImpl.java:944(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/runtime/component/ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:741(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/runtime/component/ApplicationMgrImpl$3.run(ApplicationMgrImpl.java:2056)
4XESTACKTRACE                at com/ibm/ws/security/auth/ContextManagerImpl.runAs(ContextManagerImpl.java:5395)
4XESTACKTRACE                at com/ibm/ws/security/auth/ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5483)
4XESTACKTRACE                at com/ibm/ws/security/core/SecurityContext.runAsSystem(SecurityContext.java:255)
4XESTACKTRACE                at com/ibm/ws/runtime/component/ApplicationMgrImpl.start(ApplicationMgrImpl.java:2061)
4XESTACKTRACE                at com/ibm/ws/runtime/component/CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389(Compiled Code))
4XESTACKTRACE                at com/ibm/ws/runtime/component/CompositionUnitImpl.start(CompositionUnitImpl.java:123)
4XESTACKTRACE                at com/ibm/ws/runtime/component/CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332)
4XESTACKTRACE                at com/ibm/ws/runtime/component/CompositionUnitMgrImpl.access$300(CompositionUnitMgrImpl.java:117)
4XESTACKTRACE                at com/ibm/ws/runtime/component/CompositionUnitMgrImpl$CUInitializer.run(CompositionUnitMgrImpl.java:899)
4XESTACKTRACE                at com/ibm/wsspi/runtime/component/WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:496)
4XESTACKTRACE                at com/ibm/ws/util/ThreadPool$Worker.run(ThreadPool.java:1656(Compiled Code))

{code}

We run into this quite often, so it's kind of reproducible. We have the same behaviour as well with other thread combinations (e.g. Sling Notifier and FelixFrameworkWiring) hitting the same locks.

","Websphere 7.0, IBM Java 6.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-14 16:17:33.642,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Oct 16 09:37:20 UTC 2014,,,,,,0|i215kv:,9223372036854775807,,,,,,,,"14/Oct/14 16:17;bosschaert;If I look at the latest codebase, the APIs are slightly different (ExtenderManager.remove() has been replaced by ExtenderManager.removeServlet()) but in essence the locks seem to be the same.

Both stack traces originate from the AbstractTracker (which calls down into ServletTracker/FilterTracker). These then call ExtenderManager.removeServlet()/removeFilter(). 

I'm wondering whether it would help putting the calls to ExtenderManager from ServletTracker/FilterTracker in a separate thread. That would allow the initiating threads to continue and potentially release the locks that they have been holding on to. I guess there would not be any issues in relation to processing these servlet events asynchronously (note that the Trackers are synchronous in nature, see OSGi Tracker spec section 701.2.5).

Any other thoughts?","15/Oct/14 08:35;bosschaert;This patch processes the handling of the tracker callbacks in a separate thread which should break the deadlock.

The patch also brings the use of trackers in line with what the OSGi spec says in section 701.2.5:

bq. Trackers use synchronous listeners; the callbacks are called on the same thread as that of the initiating event. Care should be taken to not linger in the callback and perform non-trivial work. Callbacks should return immediately and move substantial work to other threads.","15/Oct/14 09:03;jajans;I'm fine with the proposed change, the only thing I would do differently is make use of an ExecutorService to manage threads for us instead of creating threads manually. This would also take care of the lifecycle of the threads when the whiteboard bundle itself is started/stopped.

(The JettyService also uses an ExecutorService, in case you need a more detailed example).","15/Oct/14 10:07;bosschaert;After some further feedback I have come up with an alternative implementation (felix_4680_alt.diff) that does not involve separate threads. It removes the need for synchronization on the HandlerRegistry, one of the locks in this deadlock. 

This is done by using concurrent maps. Note that the atomicity to ConcurrentMap is only guaranteed per single call, therefore I had to move handler.init() in the add methods to before the putIfAbsent call. An optimistic approach if you like. However this means that if the handler cannot be added an extra destroy() call was needed.

What do people think? Is this a better approach than with the threading? If there is consensus that this is a better idea I'll also provide unit tests.","15/Oct/14 12:41;cziegeler;I like this more, to more asynchronous stuff kills you eventually :)

What about doing a get() call on the concurrent map before doing handler.init() ? If get returns something, you can skip the rest. Otherwise you do the optimistic init(), putIfAbsent() stuff","15/Oct/14 12:45;bosschaert;bq. What about doing a get() call on the concurrent map before doing handler.init() ? If get returns something, you can skip the rest. Otherwise you do the optimistic init(), putIfAbsent() stuff

Right so that might save you from some unnecessary inits. There is still a theoretic possibility that someone else adds the servlet/filter between doing that get() and the putIfAbsent(), so I think that code should stay there but an additional get in front might be good as it should catch >99% of the cases.","15/Oct/14 19:38;bosschaert;I thought a little more about doing a get() call before doing the init() but I think there is an issue with that. Basically there is a window of opportunity where a servlet is removed between that get() call and the putIfAbsent() which means that a servlet/filter may not get added even though the alias/servlet (or filter) isn't there.

Therefore I think it might be better to not do the additional get() and simply do the atomic putIfAbsent(). I'll put some code in that makes sure that init() doesn't get called multiple times without destroy in between.","15/Oct/14 20:28;bosschaert;bq. I'll put some code in that makes sure that init() doesn't get called multiple times without destroy in between.

Actually, that piece turns out to be quite tricky, as you don't know from a Servlet itself whether it has been inited, which means you need to add synchronization again to check this in a separate datastructure, and the synchronization was what we were trying to remove. 
So I think that there is a risk that init() gets called more than once if someone tries to add the actual same servlet twice, but that is an error condition anyway and an exception will get thrown, so I think it might be ok to leave it at that.","16/Oct/14 05:17;cziegeler;Yes, I agree on your previous points. But I'm wondering if the code is complete anyway. I assume there is a clash if two servlets try to register for the same path. The first one succeeds, the second one fails. If now the first one is unregistered, is the second one registered?","16/Oct/14 06:50;jajans;bq. Actually, that piece turns out to be quite tricky, as you don't know from a Servlet itself whether it has been inited, which means you need to add synchronization again to check this in a separate datastructure, and the synchronization was what we were trying to remove. 

A trick you could use is wrapping the actual servlet in an adapter class that simply delegates all calls directly to the real servlet, but allows you to add an additional method that returns whether or not init() has been called. IIRC, this is also how Jetty does this.","16/Oct/14 07:02;bosschaert;[~cziegeler]
bq.  I assume there is a clash if two servlets try to register for the same path. The first one succeeds, the second one fails. If now the first one is unregistered, is the second one registered?

The second one will receive an exception on registration. That should be enough for the registering agent to know that it failed :) There's no automatic retry in case the first one is removed. Or is that not what you meant?","16/Oct/14 07:07;bosschaert;[~jajans]
bq. A trick you could use is wrapping the actual servlet in an adapter class that simply delegates all calls directly to the real servlet, but allows you to add an additional method that returns whether or not init() has been called. IIRC, this is also how Jetty does this.

Then you still need to keep track of what wrapper belongs to what servlet. User code simply calls registerServlet() with the bare servlet, so you'd have to be able to find the wrapper if you created before. 

I think a slightly simpler solution would be to simply keep track of the servlets that have been inited in the HandlerRegistry. I think it can be done without synchronization but I wonder whether it's really worth the effort since registering the same servlet instance is an error condition and an exception is thrown directly after anyway.",16/Oct/14 07:50;bosschaert;I've removed the attachments as I've made a few tiny tweaks and added unit tests. If nobody complains I'll commit this soon.,16/Oct/14 08:33;cziegeler;+1,16/Oct/14 09:37;bosschaert;Resolved in http://svn.apache.org/viewvc?view=revision&revision=1632257,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can not use @Stereotype annotated annotation from another bundle (unless its package is included or re-exported),FELIX-4668,12746664,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,azzazzel,azzazzel,08/Oct/14 09:11,24/Dec/14 16:23,14/Mar/19 02:48,03/Dec/14 10:52,,,,,,,ipojo-manipulator-1.12.1,,,,,,,iPOJO,,,,,,0,ipojo-manipulator,maven,,,,"Here are the steps:
# create a bundle (say ""Stereotype"") that exports package {{test.ipojo.stereotype}} containing
## the {{MyInterface}} interface 
## the {{MyComponent}} annotation:
{code}
@Component
@Provides (specifications = MyInterface.class)
@Stereotype
@Target(TYPE)
public @interface  MyComponent {
}
{code}
# build and install ""Stereotype"" in local maven repo
# using maven, create another bundle (say ""Stereotype-bundle"") containing a class that uses the stereotype:
{code}
@MyComponent
public class ComponentByStereotype extends ComponentBase implements AnotherInterface 
{code}
# configure BND of ""Stereotype-bundle"" like this (the bundle does not need to export or include any package):
{code:xml}
<Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>
<Bundle-Version>${project.version}</Bundle-Version>
<Import-Package>test.ipojo.stereotype,*</Import-Package>
<Private-Package></Private-Package>
<Export-Package></Export-Package>
{code}
# make sure ""Stereotype-bundle"" has ""Stereotype"" in it's maven dependencies
# configure {{maven-ipojo-plugin}} in ""Stereotype-bundle""
{code:xml}
<plugin>
	<groupId>org.apache.felix</groupId>
	<artifactId>maven-ipojo-plugin</artifactId>
	<version>1.12.0</version>
	<executions>
		<execution>
			<goals>
				<goal>ipojo-bundle</goal>
			</goals>
		</execution>
	</executions>
</plugin>
{code}
# Try to build 'Stereotype-bundle'

+Expected result:+ The  'Stereotype-bundle' will be build and @MyComponent annotation will be processed.

+Actual result:+ The @MyComponent annotation is NOT processed. The following is displayed in console:
{code}
[WARNING] Class test.ipojo.bundle.ComponentByStereotype has not been marked as a component type (no @Component, @Handler, ...). It will be ignored by the iPOJO manipulator.
{code}
",maven-ipojo-plugin 1.12.0,,,,,,,,,,,,,,,,,,,08/Oct/14 09:15;azzazzel;stereotype-test.zip;https://issues.apache.org/jira/secure/attachment/12673564/stereotype-test.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-10-17 19:52:58.459,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 03 10:52:26 UTC 2014,,,,,,0|i20xdj:,9223372036854775807,,,,,,,,08/Oct/14 09:15;azzazzel;Attaching a zip containing maven projects for the 2 bundles from the description to demonstrate the issue.  ,"17/Oct/14 19:52;sauthieg;The stereotype support was initially designed with the ipojo-bnd-plugin in mind.
As the maven-bundle-plugin (that has to be configured to use the ipojo plugin) is aware of all the dependencies of your project, it is possible to load ""external"" annotations.

Using any other manipulator frontend mandates you to include your stereotypes classes inside of your bundle.","03/Dec/14 10:52;clement.escoffier;Fixed in trunk.

I've tested on your project and now it works (BTW thanks to the use case, made testing much simpler).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Metatype service does not allow a default empty string in XML resource,FELIX-4665,12746023,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,kmart216,kmart216,05/Oct/14 22:08,23/Apr/15 10:14,14/Mar/19 02:48,21/Jan/15 16:25,metatype-1.0.10,,,,,,metatype-1.0.12,,,,,,,Metatype Service,,,,,,0,,,,,,"An entry like the following will be treated as invalid and the default will change to null instead of an empty string:

{code}
<AD id=""string.prop"" cardinality=""0"" required=""false"" default="""" type=""String"" description=""Some string property""/>
{code}

MetaDataReader.readAD() method will first set the default value, then later check if the value is required:

{code}
ad.setDefaultValue( this.getOptionalAttribute( ""default"" ) );
ad.setRequired( this.getOptionalAttribute( ""required"", true ) );
{code}

However, setDefaultValue method will check if the value is required (before it is known) in ADValidator.validateString():

{code}
if (ad.isRequired() && ((value == null) || (length == 0)))
{
    // Possible if the cardinality != 0 and input was something like
    // ""0,,1""...
    return AD.VALIDATE_MISSING;
}
{code}

The call to isRequired() will always be true at the time of the call.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-21 16:25:40.257,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 21 16:25:40 UTC 2015,,,,,,0|i20thj:,9223372036854775807,,,,,,,,21/Jan/15 16:25;jajans;Fixed in rev #1653581.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[SSLFilter] Support for pre-3.0 Servlet API,FELIX-4664,12745715,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,fmeschbe,fmeschbe,03/Oct/14 11:55,11/Nov/14 11:43,14/Mar/19 02:48,06/Oct/14 10:46,http.sslfilter-0.1.0,http-2.3.0,,,,,http.sslfilter-0.2.0,http-2.3.2,,,,,,HTTP Service,,,,,,0,,,,,,"The SSL Filter bundle currently inherits the Servlet API dependency from the parent project which sets it to Servlet API 3.0. 

Actually, the filter itself does not depend at all on Servlet API 3.0 and the dependency should probably be fixed to a reduced version number -- maybe even the lowest version still compiling...

There is one caveat: unit tests currently use HttpServletResponse.getHeader method which has been introduced with Servlet API 3.0. So the tests need to be tweaked.",,,,,,,,,,,,,,,,,,,,03/Oct/14 12:02;fmeschbe;FELIX-4664.patch;https://issues.apache.org/jira/secure/attachment/12672764/FELIX-4664.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-10-06 08:43:22.798,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 06 10:46:29 UTC 2014,,,,,,0|i20rnr:,9223372036854775807,,,,,,,,03/Oct/14 12:02;fmeschbe;Proposed patch.,06/Oct/14 08:43;asanso;LGTM,06/Oct/14 10:46;fmeschbe;Applied the patch in Rev. 1629609,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential memory leak in AsyncDeliveryTask,FELIX-4663,12745697,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,hlang,hlang,03/Oct/14 09:02,10/Aug/15 06:58,14/Mar/19 02:48,06/Oct/14 12:18,eventadmin-1.3.2,,,,,,eventadmin-1.4.4,,,,,,,Event Admin,,,,,,0,,,,,,"EventAdmin 1.3.2 can create an OutOfMemory condition caused by not delivered async events.
The problem can occur if an interrupted thread issues an async event (e.g. log-event).
In EventAdmin 1.3.2 the async-delivery uses DefaultThreadPool based on PooledExecutor. 
If the already interrupted thread enters the execute-method in PooledExecutor an InterruptedException is thrown before the TaskExecutor was added to the Thread-Pool.
This Exception is catched(not handled, only logged) in the DefaultThreadPool.
As a result the TaskExecuter was not scheduled in the ThreadPool but is still part of the m_running_threads.
All new events are added to the pool of the TaskExecuter, adding in a increasing LinkedList. The TaskExecutor is never started again. Memory is leaking.
Seems that 1.4.x is not vulnerable related to interrupted threads. But the same catch-and-not-handle block is used in 1.4.x. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-04 15:26:46.214,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 06 12:18:50 UTC 2014,,,,,,0|i20rjr:,9223372036854775807,,,,,,,,"03/Oct/14 09:06;hlang;The critical code parts in 1.3.2 are:
{code:title=AsyncDeliverTask.java}
final Thread currentThread = Thread.currentThread();
            TaskExecuter executer = null;
            synchronized (m_running_threads )
            {
                final TaskExecuter runningExecutor = (TaskExecuter)m_running_threads.get(currentThread);
                if ( runningExecutor != null )
                {
                    runningExecutor.add(tasks, event);
                }
                else
                {
                    executer = new TaskExecuter( tasks, event, currentThread );
                    m_running_threads.put(currentThread, executer);
                }
            }
            if ( executer != null )
            {
                m_pool.executeTask(executer);
            }
{code}

and

{code:title=DefaultThreadPool.java}
    public void executeTask(final Runnable task)
    {
        try
        {
            super.execute(task);
        }
        catch (final Throwable t)
        {
            LogWrapper.getLogger().log(
                    LogWrapper.LOG_WARNING,
                    ""Exception: "" + t, t);
            // ignore this
        }
    }
{code}",03/Oct/14 09:07;hlang;Please also check if 1.4.2 can cause the same situation if ExecutorService of the DefaultThreadPool throws an RejectedExecutionException.,04/Oct/14 15:26;cziegeler;I've added some code in rev 1629402 which should handle the case for the RejectedExecutionException. Not sure though if we should just catch REE or all exceptions (like it is now),"05/Oct/14 09:28;hlang;That is exactly how i would have solved this issue.
I think i would change it to only catch the REE. 
Because here we do not see the exceptions of the actual thread execution, but only the exceptions that can occur in scheduling the task on the thread-pool, right? 
So basically REE is the only exception that can occur at all.
Thx for your quick fix!","06/Oct/14 12:18;cziegeler;Thanks, I've changed the code to just report false if the reject exception occurs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebConsole Xdialog javascript function is not working correctly,FELIX-4662,12745686,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,v_valchev,v_valchev,v_valchev,03/Oct/14 07:59,16/Mar/15 08:17,14/Mar/19 02:48,03/Oct/14 08:01,webconsole-4.2.2,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"When jQuery and jQuery were updated, seems nobody tested the Xdialog function. The problem is that it tries to destroy the dialog without checking if the dialog object is already created.

Previously that seems the be ignored, but now, jQuery UI will throw exception and that will break the normal operation of the JavaScript code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 03 08:01:00 UTC 2014,,,,,,0|i20rhj:,9223372036854775807,,,,,,,,03/Oct/14 08:01;v_valchev;Fixed in rev. 1629131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Security problem in WebConsoleUtil.getParameter() method,FELIX-4660,12745272,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,01/Oct/14 14:55,16/Mar/15 08:17,14/Mar/19 02:48,03/Oct/14 08:00,webconsole-4.2.2,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"The mentioned method is used to get simple parameters as well FileItems, if the request is multipart.

If a big file has been uploaded Apache File Upload will store the file in a temporary folder, instead of keeping it in memory. That folder is specified by system property 'java.io.tmpdir'.

When running with security the file upload will require the bundle to have the following permission:
(java.util.PropertyPermission ""java.io.tmpdir"" ""read"")

But in order to read/write/delete to that folder the bundle will require
(java.io.FilePermission ""<<ALL FILES>>"" ""read,write,delete"")

Because we don't know where the file will be stored and cannot express that using system properties, we need to give permission to read any file on system and that is well .. bad.

In OSGi however, it's guaranteed that the bundle will have permission to read/write/delete files in it's data folder. So all we need is to set the repository path:
{code}
DiskFileItemFactory factory
factory.setRepository( 256000 );
{code}


To keep compatibility with existing version(s) I suggest that we add a new constant:
AbstractWebConsolePlugin.ATTR_FILEUPLOAD_DIR

The value of that attribute is a File object - a folder, which plugins obtain using BundleContext.getDataFile().

So if the attribute is set, the getParameter() method will set that file as repository to the DiskFileItemFactory. That wouldn't require any changes to the API, though any plugins, that use FileUpload are recommended to update their code and set that attribute.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 03 08:00:01 UTC 2014,,,,,,0|i20otb:,9223372036854775807,,,,,,,,03/Oct/14 08:00;v_valchev;Fixed in rev. 1629129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The maven bundle plugin incorrectly reports cardinality on service references in the generated generic requirements,FELIX-4659,12745189,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,01/Oct/14 07:38,12/May/15 05:56,14/Mar/19 02:48,01/Oct/14 07:44,maven-bundle-plugin-2.5.3,,,,,,maven-bundle-plugin-2.5.4,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 01 07:44:45 UTC 2014,,,,,,0|i20oav:,9223372036854775807,,,,,,,,"01/Oct/14 07:44;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	bundleplugin/src/main/resources/org/apache/felix/bundleplugin/scr.xsl
Committed r1628630
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP SSLFilter wrong port,FELIX-4657,12744623,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,asanso,asanso,29/Sep/14 09:16,11/Nov/14 11:43,14/Mar/19 02:48,01/Oct/14 10:56,,,,,,,http.sslfilter-0.2.0,http-2.3.2,,,,,,HTTP Service,,,,,,0,,,,,,"
looking at [FELIX-3693] HTTP SSLFilter pecially at the SslFilterRequest it looks to me that the final Request object might end up having this weird behavior:

- request.getScheme() ==> https
- request.getServerPort() ==> 80

and possibly

- request.getRequestURL() ==> https://domain.80/active.html

IMHO having a scheme https with a port 80 might lead to some inconsistencies .

See also mailing list discussion in [0].

patch to follow

[0] http://www.mail-archive.com/dev@felix.apache.org/msg34344.html

",,,,,,,,,,,,,,,,,,,,29/Sep/14 13:05;asanso;FELIX-4657-patch.txt;https://issues.apache.org/jira/secure/attachment/12671783/FELIX-4657-patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-09-29 09:19:52.191,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 01 10:56:14 UTC 2014,,,,,,0|i20kuv:,9223372036854775807,,,,,,,,"29/Sep/14 09:19;jajans;For completeness, my reply on this on the Felix-dev ML:
{quote}
I'm less inclined to immediately state this as a bug. Though it is by convention to use port 443 for secure HTTP, actually nothing prevents me from using port 80 instead for secure HTTP.
{quote}",29/Sep/14 13:05;asanso;attaching proposed simple patch and unit test,"01/Oct/14 10:56;cziegeler;Hi Antonio, thanks for your patch. It's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in BundleWiringImpl.findClassOrResourceByDelegation(),FELIX-4654,12744042,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,diru,diru,25/Sep/14 14:32,27/Apr/15 07:04,14/Mar/19 02:48,26/Sep/14 15:49,framework-4.2.0,,,,,,framework-4.4.1,,,,,,,,,,,,,0,,,,,,"There is a potential NPE in the implementation of BundleWiringImpl.findClassOrResourceByDelegation(). When the Implementation tries to load a class using the classloader of the wiring null can be returned in case when the wiring has been disposed. I think in this case the null pointer should be handled properly instead of throwing an exception. 

{code}
java.lang.NullPointerException
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1472)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1923)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.generatePublic(Unknown Source)
	at org.bouncycastle.jce.provider.BouncyCastleProvider.getPublicKey(Unknown Source)
	at org.bouncycastle.jce.provider.X509CertificateObject.getPublicKey(Unknown Source)
	at org.bouncycastle.operator.jcajce.JceAsymmetricKeyWrapper.<init>(Unknown Source)
	at org.bouncycastle.cms.jcajce.JceKeyTransRecipientInfoGenerator.<init>(Unknown Source)
{code}

Unfortunately this is really hard to reproduce. The problem occurs for me when I use Apache Sling in combination with javax.security and bouncycastle (everything installed as bundles) but in my eyes its not (only) related to that.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-25 19:58:18.396,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 26 09:33:44 UTC 2014,,,,,,0|i20hcn:,9223372036854775807,,,,,,,,"25/Sep/14 19:58;bosschaert;Thanks Dirk for reporting this issue. Looking at the the source code of 4.2.0 line 1472 the issue seems to be the following:
{code}result = (isClass)
  ? (Object) ((BundleClassLoader) getClassLoader()).findClass(name)
  : (Object) m_revision.getResourceLocal(name);
{code}
getClassLoader() seems to return null, which can cause the NPE (m_revision cannot be null as it's a final field).

Looking at the latest trunk, this issue seems to have been resolved there. The relevant code on trunk is on lines start at 1512:
{code}                    if (isClass)
                    {
                        ClassLoader cl = getClassLoaderInternal();
                        if (cl == null)
                        {
                            throw new ClassNotFoundException(
                                ""Unable to load class '""
                                + name
                                + ""' because the bundle wiring for ""
                                + m_revision.getSymbolicName()
                                + "" is no longer valid."");
                        }
                        result = ((BundleClassLoader) cl).findClass(name);
                    }
                    else
                    {
                        result = m_revision.getResourceLocal(name);
                    }
{code}
So if the classloader cannot be found, a CNFE is thrown which should be picked up by the classloader as an ordinary signal that the class isn't available.

Is there any chance that you could check this with the latest Felix?","26/Sep/14 09:33;diru;Unfortunately I cannot confirm that this works for me but I looks good to me. I updated my sling launchpad to use version 4.4.1 of apache felix and my issue has disappeared. I am not sure if its because of the ClassNotFoundException and a proper handling of those in the library or any other fix that is related to my use case. 

Thanks so far. I think this can be closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Security problem with AbstractWebConsolePlugin.spoolResource,FELIX-4652,12743966,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,25/Sep/14 08:12,16/Mar/15 08:17,14/Mar/19 02:48,25/Sep/14 08:14,webconsole-4.2.2,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"In AbstractWebConsolePlugin.spoolResource() reflection is used to find the method that will actually provide the resource. However, using reflection will require that the web console plugin to have the following permissions:
(java.lang.RuntimePermission ""getClassLoader"")
(java.lang.RuntimePermission ""accessDeclaredMembers"")
(java.lang.reflect.ReflectPermission ""suppressAccessChecks"")

This is due to some internals of the AbstractWebConsole, which actually should be run in a privileged block.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 25 08:14:58 UTC 2014,,,,,,0|i20gvz:,9223372036854775807,,,,,,,,25/Sep/14 08:14;v_valchev;Fixed in SVN rev.1627478,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SlingAnnotationProcessor.processSlingFilter cannot deal with multiple scopes,FELIX-4648,12742684,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,19/Sep/14 09:43,09/Jan/15 09:56,14/Mar/19 02:48,21/Sep/14 09:15,scr annotations 1.9.8,,,,,,scr annotations 1.9.10,,,,,,,SCR Tooling,,,,,,1,,,,,,"If an annotation like this is used:

{code}
@SlingFilter(generateComponent = false, generateService = true, order = -700, scope = { SlingFilterScope.REQUEST, SlingFilterScope.ERROR })
{code}

the generated XML will contain only the first scope (i.e. request)
{code}
....
        <service servicefactory=""false"">
            <provide interface=""javax.servlet.Filter""/>
        </service>
        <property name=""service.ranking"" type=""Integer"" value=""-700""/>
        <property name=""sling.filter.scope"" value=""REQUEST""/>
{code}

The problem is https://github.com/apache/felix/blob/trunk/scrplugin/annotations/src/main/java/org/apache/felix/scrplugin/processing/SlingAnnotationProcessor.java#L191. That can only deal with single values.
Rather it should use the helper method {{generateStringPropertyDescriptor}}, like it is done for all the multivalue fields of the annotation {{@SlingServlet}}.",,,,,,,,,,SLING-3954,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-21 09:15:25.795,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Sep 21 09:15:25 UTC 2014,,,,,,0|i208yf:,9223372036854775807,,,,,,,,"21/Sep/14 09:15;cziegeler;The helper method can't be used as this is an enum value, the handling is a little bit more tricky. If added some code to handle the case",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Context(Context.Source.INSTANCE) does not inject bundle context,FELIX-4646,12742460,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,clement.escoffier,Pierrick Tact,Pierrick Tact,18/Sep/14 14:34,24/Dec/14 16:23,14/Mar/19 02:48,02/Dec/14 13:16,ipojo-runtime-1.12.0,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"I would like to use the bundle context for each instanciate of my bundle with this code :

@Context(Context.Source.INSTANCE)
    private BundleContext _context;

But the context return is null.

If I use Context.Source.COMPONENT for the context definition, the context field is injected.",JAVA 1.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-18 17:28:15.964,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 02 13:38:08 UTC 2014,,,,,,0|i207lb:,9223372036854775807,,,,,,,,18/Sep/14 17:28;clement.escoffier;Could you tell me how is created your instance ?,"22/Sep/14 07:21;Pierrick Tact;Hello,

To create the new instance, i use the following code :

@Configuration
public class newInstance {
    Instance myInstance = instance().of(ComponentToInstanciate.class).named(newName).with(proprietyName).setto(proprietyValue);
}

ComponentToInstanciate is in an other bundle, and dependencies works.","16/Oct/14 14:56;Pierrick Tact;I try to use :
ComponentInstance instance = myFactory.createComponentInstance(configProperties);
But I have the same problem.
","02/Dec/14 13:15;clement.escoffier;First, the @Configuration issue was fixed earlier Today (See FELIX-4715).

Then, when using the Factory service, iPOJO is not able to retrieve the caller bundle context, and so, you need to inject it manually in the instance configuration:

{code}
Properties configuration = new Properties();
configuration.put(""instance.bundle.context"", bc); // bc is the bundle context
ComponentInstance instance = ipojoHelper.createComponentInstance(""my-component"", configuration);
{code}",02/Dec/14 13:38;Pierrick Tact;Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Designates with multiple Objects,FELIX-4644,12742385,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,18/Sep/14 07:56,23/Apr/15 10:14,14/Mar/19 02:48,21/Jan/15 12:13,metatype-1.0.10,,,,,,metatype-1.0.12,,,,,,,Metatype Service,,,,,,0,,,,,,"MetaType (schema) specifies a Designate tag should have only one Object tag. This is currently not validated, and in case of multiple Object tags not even detectable making external validation difficult to implement.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 21 12:13:20 UTC 2015,,,,,,0|i2074n:,9223372036854775807,,,,,,,,21/Jan/15 12:13;jajans;Fixed in rev #1653489.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in the resolver when substituting,FELIX-4642,12742192,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,17/Sep/14 16:16,16/Oct/15 16:46,14/Mar/19 02:48,18/Sep/14 06:53,resolver-1.2.0,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,"{code}
2014-09-17 11:01:13,035 | ERROR | agent-5-thread-1 | DeploymentAgent                  | ?                                   ? | 76 - io.fabric8.fabric-agent - 1.2.0.SNAPSHOT | Unable to update agent
java.lang.NullPointerException
	at org.apache.felix.resolver.ResolverImpl.permutateIfNeeded(ResolverImpl.java:1523)[76:io.fabric8.fabric-agent:1.2.0.SNAPSHOT]
	at org.apache.felix.resolver.Candidates.checkSubstitutes(Candidates.java:447)[76:io.fabric8.fabric-agent:1.2.0.SNAPSHOT]
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:225)[76:io.fabric8.fabric-agent:1.2.0.SNAPSHOT]
	at io.fabric8.agent.DeploymentBuilder.resolve(DeploymentBuilder.java:243)[76:io.fabric8.fabric-agent:1.2.0.SNAPSHOT]
	at io.fabric8.agent.DeploymentAgent.doUpdate(DeploymentAgent.java:588)[76:io.fabric8.fabric-agent:1.2.0.SNAPSHOT]
	at io.fabric8.agent.DeploymentAgent$2.run(DeploymentAgent.java:313)[76:io.fabric8.fabric-agent:1.2.0.SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_51]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-17 19:02:52.393,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 18 06:53:50 UTC 2014,,,,,,0|i20607:,9223372036854775807,,,,,,,,"17/Sep/14 16:25;gnt;I think this is caused by a call to {{clearCandidates}} somewhere.

I propose the following patch, though I'm not entirely sure if the test is ok or if it should be inverted.
Thoughts welcomed !
{code}
diff --git a/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java b/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java
index 6ada758..e8b5d2f 100644
--- a/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java
+++ b/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java
@@ -1520,7 +1520,7 @@ public class ResolverImpl implements Resolver
             for (Candidates existingPerm : permutations)
             {
                 List<Capability> existingPermCands = existingPerm.getCandidates(req);
-                if (!existingPermCands.get(0).equals(candidates.get(0)))
+                if (existingPermCands == null || !existingPermCands.get(0).equals(candidates.get(0)))
                 {
                     permutated = true;
                 }
{code}","17/Sep/14 19:02;tjwatson;It seems to me the check should be reversed:

if (existingPermCands != null && !existingPermCands.get(0).equals(candidates.get(0)))","18/Sep/14 06:53;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java
Committed r1625895
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
missing (&(osgi.ee=JavaSE)(version=1.8)) when embedding in org.apache.felix.framework,FELIX-4640,12741801,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,jwausle,jwausle,16/Sep/14 14:30,18/Mar/15 12:50,14/Mar/19 02:48,24/Sep/14 12:11,,,,,,,bundlerepository-2.0.4,,,,,,,Bundle Repository (OBR),Framework,,,,,0,,,,,,"When I try to deploy a bundle from a OBRepo occur the below error 'Unsatisfied requirement'.

g! obr:deploy any.bundle

Unsatisfied requirement(s):
---------------------------
   (&(osgi.ee=JavaSE)(version=1.8))

I would expect that this capability will be provided by system-bundle.

g! felix:inspect capability osgi.ee
org.apache.felix.framework [0] provides:
----------------------------------------
osgi.ee; OSGi/Minimum [1.0.0, 1.1.0, 1.2.0] [UNUSED]
osgi.ee; JavaSE [1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0]

*My full runtime environment is.*

g! lb 
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (4.4.0)
    1|Active     |    1|Apache Felix Bundle Repository (2.0.2)
    2|Active     |    1|bndlib (2.3.0.201405100607)
    3|Active     |    1|biz.aQute.repository (2.1.0.062515_230REL)
    4|Active     |    1|Java XML Streaming API (1.0.1.v201004272200)
    5|Active     |    1|JAXP XML (1.3.4.v201005080400)
    6|Active     |    1|Apache Felix Gogo Command (0.14.0)
    7|Active     |    1|Apache Felix Gogo Runtime (0.12.1)
    8|Active     |    1|Apache Felix Gogo Shell (0.10.0.v201212101605)

I found one related fact in 'org.apache.felix.bundlerepository-2.0.2/org.apache.felix.bundlerepository.impl.LocalResourceImpl.java'.
- declared 'osgi.ee' capabilities from framework-bundle will realized as 'ee=JavaSE-1.8' capability
- but the filter require 1 spitted capability (<java-ee-name> and <java-ee-version>) '(&(osgi.ee=JavaSE)(version=1.8))'

*Here the patch who works for me.*
85c85,86
<                     cap.addProperty(Capability.EXECUTIONENVIRONMENT, tokens.nextToken().trim());
---
>                     String eeValue = tokens.nextToken().trim();
> 					cap.addProperty(Capability.EXECUTIONENVIRONMENT, eeValue);
86a88,100
>
>                     String[] split = eeValue.split(""-"");
>                     switch (split.length) {
> 					case 2:
> 						String osgi_ee = ""osgi."" + Capability.EXECUTIONENVIRONMENT;
> 						CapabilityImpl cap2 = new CapabilityImpl(osgi_ee, new PropertyImpl[]{
> 							new PropertyImpl(osgi_ee, null, split[0]),
> 							new PropertyImpl(""version"", null, split[1])
> 						});
> 						addCapability(cap2);
> 						break;
> 					}

",any,,,,,,,,,,,,,,,,,,,23/Sep/14 12:40;bosschaert;cap.diff;https://issues.apache.org/jira/secure/attachment/12670705/cap.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-09-23 12:40:17.013,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 18 12:50:59 UTC 2015,,,,,,0|i203nr:,9223372036854775807,,,,,,,,"16/Sep/14 14:34;jwausle;Related discussions: 
- https://groups.google.com/forum/#!topic/bndtools-users/PccjjZMbE6U 
- https://groups.google.com/forum/#!topic/bndtools-users/VRNZoorZKWU","23/Sep/14 12:40;bosschaert;While looking at it, I realized that we're basically constructing the {{osgi.ee}} capability here for the system bundle, but the system bundle already has this capability, so I thought it might be easier to copy it. For example you can find the {{osgi.ee}} capability of the system bundle with the following code:
{code}        Bundle b = context.getBundle(0);
        BundleRevision br = b.adapt(BundleRevision.class);
        List<Capability> caps = br.getCapabilities(""osgi.ee"");
        System.out.println(""caps);{code}
Which prints out:
{noformat}osgi.ee; {osgi.ee=OSGi/Minimum, version=[1.0.0, 1.1.0, 1.2.0]}, [0] osgi.ee; {osgi.ee=JavaSE, version=[1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0, 1.5.0, 1.6.0]}]{noformat}

So I started thinking, would it not be better to simply copy _all_ the capabilities from the system bundle? I've attached {{cap.diff}} patch that does this to this issue. This would create a *lot* of capabilities (e.g. every exported package from the system bundle is also represented as a capability) but I have the feeling that this is more generic and more complete...

Thoughts anyone?","23/Sep/14 14:30;jwausle;I tested Your patch. (works fine :) ) 
- with a little hint:  append {code:java} for (..) { ... addCapability(bcap);} {code} ","23/Sep/14 20:25;bosschaert;bq. with a little hint: append for (..) { ... addCapability(bcap);} 

doh! yes adding that would be useful. I hope you tested it with that addition :)","24/Sep/14 12:11;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1627285 

[~jwausle] it would be great if you could double-check once more that this fixes the issue for you.",17/Mar/15 10:04;jwausle;Where can I download a jar with fix?,"18/Mar/15 12:50;bosschaert;Hi [~jwausle] it has been released last week. You can download it from Maven central here: http://search.maven.org/#artifactdetails%7Corg.apache.felix%7Corg.apache.felix.bundlerepository%7C2.0.4%7Cbundle

I noticed that the Felix download area has not yet been updated with this artifact. Hopefully that will be soon.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gogo can't cope without several commands with defined service.ranking ,FELIX-4637,12740574,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,10/Sep/14 18:25,17/Mar/15 07:05,14/Mar/19 02:48,11/Sep/14 21:07,,,,,,,gogo.runtime-0.14.0,,,,,,,Gogo Runtime,,,,,,0,,,,,,,,,,,,,,,,KARAF-3221,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 11 21:07:18 UTC 2014,,,,,,0|i1zw67:,9223372036854775807,,,,,,,,"11/Sep/14 21:07;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/CommandProcessorImpl.java
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/activator/Activator.java
Committed r1624391
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid a useless change in the bundle location and a persistence the configuration,FELIX-4635,12739133,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,04/Sep/14 14:31,17/Mar/15 06:54,14/Mar/19 02:48,04/Sep/14 15:10,,,,,,,fileinstall-3.4.2,,,,,,,File Install,,,,,,0,,,,,,The call to setBundleLocation is unnecessary has the way the configuration is retrieve will not create a binding to fileinstall bundle.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 04 15:10:50 UTC 2014,,,,,,0|i1zonb:,9223372036854775807,,,,,,,,"04/Sep/14 15:10;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java
Committed r1622494
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Event Admin Documentation - Properties and Property Defaults Incorrect,FELIX-4629,12738683,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,bobpaulin,bobpaulin,03/Sep/14 02:41,14/Sep/14 10:19,14/Mar/19 02:48,04/Sep/14 09:46,eventadmin-1.3.0,eventadmin-1.4.0,,,,,eventadmin-1.4.2,,,,,,,Event Admin,,,,,,0,,,,,,"The documentation at http://felix.apache.org/site/apache-felix-event-admin.html appears to be out of date with the current release.

1) There is no CacheSize Property
2) ThreadPoolSize defaults to 20
3) No mention of IgnoreTopic and LogLevel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-04 09:46:50.298,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 04 09:46:50 UTC 2014,,,,,,0|i1zlwv:,9223372036854775807,,,,,,,,"04/Sep/14 09:46;cziegeler;Thanks for reporting.
I've updated the docs and aligned it with the metatype information within the implementation.
The new ratio prop is also already mentioned in the docs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Jetty] Ignore empty string value for truststore,FELIX-4628,12738373,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,dpfister,dpfister,02/Sep/14 09:57,11/Nov/14 11:43,14/Mar/19 02:48,03/Sep/14 14:08,http-2.3.0,,,,,,http-2.3.2,,,,,,,HTTP Service,,,,,,0,,,,,,"When configuring the Jetty Service through the Web Console, the trust store defaults to an empty string. If an empty string is passed to jetty's SslConnector, it interprets it as an empty path, which equals the current working directory. This results in an exception on startup:
{code}
java.io.FileNotFoundException: /usr/local/apache-felix (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:120)
        at org.eclipse.jetty.util.resource.FileResource.getInputStream(FileResource.java:286)
        at org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:43)
        at org.eclipse.jetty.util.ssl.SslContextFactory.getKeyStore(SslContextFactory.java:1053)
        at org.eclipse.jetty.util.ssl.SslContextFactory.loadTrustStore(SslContextFactory.java:1027)
        at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:265)
        ...
{code}
Instead, an empty value for the trust store should be treated as _null_.",,,,,,,,,,,,,,,,,,,,02/Sep/14 11:09;dpfister;patch.txt;https://issues.apache.org/jira/secure/attachment/12665893/patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-09-03 14:08:58.754,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 03 14:08:58 UTC 2014,,,,,,0|i1zkiv:,9223372036854775807,,,,,,,,02/Sep/14 11:09;dpfister;Trivial patch against trunk to fix issue,"03/Sep/14 14:08;cziegeler;Thanks for the patch, Dominique. It's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Event Admin - Memory Leak in AsyncDeliverTasks,FELIX-4627,12738333,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,bobpaulin,bobpaulin,02/Sep/14 01:31,14/Sep/14 10:19,14/Mar/19 02:48,02/Sep/14 15:48,eventadmin-1.4.0,,,,,,eventadmin-1.4.2,,,,,,,Event Admin,,,,,,0,,,,,,Currently the AsyncDeliverTasks has a Map that tracks running threads (essentially a ThreadLocal like implementation).  As new threads post async events this list will continue to grow and is never cleared out.  Over time this will create a slow memory leak.,,,,,,,,,,,,,,,,,,,,02/Sep/14 01:37;bobpaulin;FELIX-4627.patch;https://issues.apache.org/jira/secure/attachment/12665827/FELIX-4627.patch,02/Sep/14 14:23;bobpaulin;FELIX-4627b.patch;https://issues.apache.org/jira/secure/attachment/12665918/FELIX-4627b.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-09-02 11:10:17.273,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 02 15:48:41 UTC 2014,,,,,,0|i1zka7:,9223372036854775807,,,,,,,,"02/Sep/14 11:10;cziegeler;Thanks for your patch, Bob - I've applied a slightly modified version which adds the executor to the map when it gets reactivated.",02/Sep/14 14:24;bobpaulin;Thanks for catching that use case.  Since there's no locking on the null check this makes sense.  With that addition I think we can remove the put that's outside of the synchronized block. This will prevent an additional put that occurs when the remove is executed before the next send request checks the running threads map for null (outside the synchronized block).  I've attached another patch.,"02/Sep/14 15:48;cziegeler;Good point, it's gone now. Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression: SCR spec version detection incorrect for activate method,FELIX-4622,12737142,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,kwin,kwin,27/Aug/14 16:26,27/Apr/15 08:05,14/Mar/19 02:48,23/Apr/15 13:25,maven-scr-plugin 1.20.0,,,,,,maven-scr-plugin 1.21.0,scr ant task 1.14.0,scr bnd plugin 1.4.0,scr generator 1.13.0,,,,SCR Tooling,,,,,,0,,,,,,"In all versions from 1.11.0 till (including 1.20.0) the following method signature does not enforce the right scr version(1.1.0).

{code}
public void activate(@SuppressWarnings(""rawtypes"") final Map properties, final ComponentContext context) throws Exception
{code}

With all previous versions of the maven-scr-plugin the DS version was correctly set to 1.1. 
It does work though even in newer version of the maven-scr-plugin if I annotate that method with @Activate. Please fix the version detection mechanism so that these OSGi components generate a descriptor with version 1.1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2014-08-27 16:26:13.0,,,,,,0|i1zee7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Warning should be removed when @Configuration is used,FELIX-4620,12737133,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,speedytblob,speedytblob,27/Aug/14 15:48,24/Dec/14 16:23,14/Mar/19 02:48,02/Dec/14 15:36,ipojo-manipulator-1.12.0,,,,,,ipojo-manipulator-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"Following warning should be removed when a class used the @Configuration annotation.

has not been marked as a component type (no @Component, @Handler, ...). It will be ignored by the iPOJO manipulator.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-02 15:36:48.644,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 02 15:36:48 UTC 2014,,,,,,0|i1zec7:,9223372036854775807,,,,,,,,02/Dec/14 15:36;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Debug output of project properties,FELIX-4619,12737085,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,27/Aug/14 12:28,31/Aug/14 08:41,14/Mar/19 02:48,27/Aug/14 12:29,maven-bundle-plugin-2.5.2,,,,,,maven-bundle-plugin-2.5.3,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,The release contains a spurious System.out of all project properties. This annoying output needs to be removed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 27 12:29:22 UTC 2014,,,,,,0|i1ze1j:,9223372036854775807,,,,,,,,27/Aug/14 12:29;cziegeler;Removed the System.out,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE if config value for ignore topic or timeout is empty,FELIX-4618,12737079,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,27/Aug/14 11:51,14/Sep/14 10:19,14/Mar/19 02:48,27/Aug/14 11:54,eventadmin-1.4.0,,,,,,eventadmin-1.4.2,,,,,,,Event Admin,,,,,,0,,,,,,If the configuration for ignore topic or ignore timeout contains an empty value (either null or the empty string) this will lead to an NPE at runtime during event delivery,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 27 11:54:15 UTC 2014,,,,,,0|i1ze07:,9223372036854775807,,,,,,,,27/Aug/14 11:54;cziegeler;Fixed in rev 1620869,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty configurations for ignore topic and ignore timeout lead to error messages in the log,FELIX-4617,12737069,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,27/Aug/14 10:30,14/Sep/14 10:19,14/Mar/19 02:48,27/Aug/14 10:33,eventadmin-1.4.0,,,,,,eventadmin-1.4.2,,,,,,,Event Admin,,,,,,0,,,,,,"If no configuration for the properties to ignore timeout or ignore topic are present, an error is log that the provided value is invalid.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 27 10:33:12 UTC 2014,,,,,,0|i1zdxz:,9223372036854775807,,,,,,,,27/Aug/14 10:33;cziegeler;Fixed in rev 1620856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BundleRepository ResourceComparator violates comparison contract,FELIX-4616,12736838,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,jascott,jascott,26/Aug/14 16:23,17/Mar/15 06:51,14/Mar/19 02:48,27/Aug/14 11:39,bundlerepository-1.6.6,,,,,,bundlerepository-2.0.4,,,,,,,,,,,,,0,,,,,,"The ResourceComparator use to sort resources by presentation name may cause the Arrays.sort to throw IllegalArgumentException if bundles without a bundle name are present.

This occurs because -1 is always returned if two compared resources do not have a bundle name.
This violates the sgn(x,y)=-sgn(y,x) for all x,y.

This forced us into a workaround of setting a system property to force  Arrays.sort to use the legacy sort that does not throw exceptions.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-27 11:39:54.656,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 27 11:39:54 UTC 2014,,,,,,0|i1zcjb:,9223372036854775807,,,,,,,,27/Aug/14 11:39;cziegeler;Fixed in rev 1620867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Whiteboard service registration changes not propagated by AbstractTracker,FELIX-4613,12736751,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,dpfister,dpfister,26/Aug/14 08:51,02/Feb/15 08:06,14/Mar/19 02:48,27/Aug/14 06:23,,,,,,,http-2.4.0,,,,,,,HTTP Service,,,,,,0,,,,,,"If a whiteboard service changes its registration properties, a tracker derived from o.a.f.http.whiteboard.internal.tracker.AbstractTracker will not get notified, because AbstractTracker.modifiedService() does not invoke the subclass responsible method modified().",,,,,,,,,,,,,,,,,,,,26/Aug/14 08:52;dpfister;patch.txt;https://issues.apache.org/jira/secure/attachment/12664359/patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-26 09:28:41.513,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 27 06:20:41 UTC 2014,,,,,,0|i1zbzz:,9223372036854775807,,,,,,,,26/Aug/14 08:52;dpfister;Trivial patch fixing this issue.,"26/Aug/14 09:28;cziegeler;Thanks for your patch, Dominique. It's applied in rev 1620543","26/Aug/14 17:50;dpfister;I'm afraid something went wrong with applying the patch, Carsten, it should add a line but replaced it instead, so instead of:
{code}
        super.modifiedService(ref, service);
        modified((T) service, ref)
{code}
it reads:
{code}
        modified((T) service, ref)
{code}
Moreover, the code in sandbox _http-rfc189_ requires a try-catch block because the method modified() might still throw checked exceptions.
","27/Aug/14 06:20;cziegeler;Thanks [~dpfister] - I corrected the sandbox and added the try-catch block (though I think the abstract methods should handle this internally and not throw an exception).
There is no need to call super.modifiedService as that is a NOP implementation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@PostRegistration is not being called,FELIX-4612,12736348,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,lukewink,lukewink,24/Aug/14 16:05,24/Dec/14 16:23,14/Mar/19 02:48,25/Aug/14 08:34,,,,,,,ipojo-manipulator-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"When a simple service starts up, I expect to see the following:
# Constructor called
# @Validate method called
# @PostRegistration called

Instead, what is seen is:
# Constructor called
# @Validate method called
# @Post*Un*registration called

Here is the service implementation:
{code:title=TestServiceImpl.java|borderStyle=solid}
@Component
@Provides
@Instantiate
public class TestServiceImpl implements TestService
{
  @Requires 
  LogService log;
  
  public TestServiceImpl()
  {
    log.log(LogService.LOG_ERROR, ""TestServiceImpl Constructor"");
  }
  
  @Validate
  public void validate()
  {
    log.log(LogService.LOG_ERROR, ""Validate"");
  }
  
  @Invalidate
  public void invalidate()
  {
    log.log(LogService.LOG_ERROR, ""Invalidate"");
  }
  
  @PostRegistration
  public void name(ServiceReference ref)
  {
    log.log(LogService.LOG_ERROR, ""PostRegistration"");
  }
  
  @PostUnregistration
  public void uname(ServiceReference ref)
  {
    log.log(LogService.LOG_ERROR, ""PostUnregistration"");
  }
}
{code}",Seen on felix and equinox,,,,,,,,,,,FELIX-4636,,,,,,,,24/Aug/14 20:40;lukewink;post_registration_fix.diff;https://issues.apache.org/jira/secure/attachment/12664060/post_registration_fix.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-25 05:32:00.171,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 25 08:34:12 UTC 2014,,,,,,0|i1z9xb:,9223372036854775807,,,,,,,,"24/Aug/14 20:08;lukewink;Looking through the code, I believe I have found a potential problem.  In DefaultBindingModule, the PostUnregistration class is bound to the PostRegistrationVisitor object (see DefaultBindingModule.java:272).  ","24/Aug/14 20:40;lukewink;I verified that when the DefaultBindingModule issue is fixed, the problem goes away.  I've attached post_registration_fix.diff patch that fixes the problem.","25/Aug/14 05:32;clement.escoffier;Thanks ! 

That explains why the runtime test didn't catch the issue (runtime tests are using the XML format for the metadata). Will apply your patch today (and add a test in the manipulator test suite).",25/Aug/14 08:34;clement.escoffier;Patch applied in trunk. Thanks !,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebConsole doesn't start with Java Security enabled,FELIX-4610,12735761,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,v_valchev,v_valchev,v_valchev,21/Aug/14 11:50,16/Mar/15 08:17,14/Mar/19 02:48,21/Aug/14 11:56,webconsole-4.2.2,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"The framework is run with java security enabled. When I attempt to start the webconsole there is an exception:
{code}
java.security.AccessControlException: access denied (""org.osgi.framework.ServicePermission"" ""(service.id=44)"" ""get"")
        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:366)
        at com.prosyst.mbs.impl.framework.module.security.SecurityManagerImpl.checkPermission(SecurityManagerImpl.java:110)
        at com.prosyst.mbs.impl.framework.module.security.SecurityManagerImpl.checkPermission(SecurityManagerImpl.java:71)
        at com.prosyst.mbs.impl.framework.module.security.BasicSecurityImpl.checkServicePermissions0(BasicSecurityImpl.java:256)
        at com.prosyst.mbs.impl.framework.module.security.BasicSecurityImpl.checkServicePermissions(BasicSecurityImpl.java:251)
        at com.prosyst.mbs.impl.framework.ServicesManager.getSR(ServicesManager.java:774)
        at com.prosyst.mbs.impl.framework.BundleContextImpl.getServiceReferences0(BundleContextImpl.java:794)
        at com.prosyst.mbs.impl.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:774)
        at com.prosyst.mbs.impl.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:749)
        at org.osgi.util.tracker.ServiceTracker.getInitialReferences(ServiceTracker.java:334)
        at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:297)
        at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.updateConfiguration(OsgiManager.java:1002)
        at org.apache.felix.webconsole.internal.servlet.ConfigurationSupport.updated(ConfigurationSupport.java:51)
{code}

The reason for this exception is that Web Console tries to access a service in it's updated method. Since configuration admin bundle doesn't have enough permission the call fails and the /system/console alias doesn't get registered.

To solve that issue, the updated method should use doPrivileged when performing the operations. 

The same applies to the ""service* method of the HttpServlet. According the OSGi R5 compendium specification chapter 102.8.3, ""it is the responsibility of the Servlet and Http Context implementations to use a doPrivileged block when performing privileged operations.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 21 11:56:18 UTC 2014,,,,,,0|i1z6i7:,9223372036854775807,,,,,,,,21/Aug/14 11:56;v_valchev;Fixed in svn rev. 1619371,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Whiteboard registration might get lost,FELIX-4603,12732855,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,cziegeler,cziegeler,08/Aug/14 15:34,11/Nov/14 11:43,14/Mar/19 02:48,08/Aug/14 16:17,http-2.2.2,http-2.3.0,,,,,http-2.3.2,,,,,,,HTTP Service,,,,,,0,,,,,,"If the same service object is registered as a servlet and a filter, one of these registration might get lost if the http service starts after the whiteboard registration. The mapping in ExtenderManager is using the ServiceReference object as the key which is the same. Therefore only one of the mappings is put into the map and when registerAll is called, this is lost",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,410883,,,Fri Aug 08 16:17:33 UTC 2014,,,,,,0|i1yovr:,410876,,,,,,,,"08/Aug/14 16:17;cziegeler;Fixed in rev 1616812
Also added a test cases showing the problem",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TemporalServiceDependency does not properly propagate RuntimeExceptions,FELIX-4602,12732303,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,seanrohead,seanrohead,06/Aug/14 14:00,19/Mar/15 05:59,14/Mar/19 02:48,07/Aug/14 09:04,dependencymanager-3.2.0,,,,,,org.apache.felix.dependencymanager-r1,,,,,,,Dependency Manager,,,,,,0,easyfix,,,,,"I have a service that throws subclasses of RuntimeException from some of it's methods. When wrapped in a TemporalServiceDependency, these calls throw UndeclaredThrowableException instead.

The fix is quite simple:

Wrap TemporalServiceDependencyImpl lines 182-188 in the following try/catch block:

try {
    ...
}
catch (InvocationTargetException e) {
    throw e.getTargetException();
}",,,,,,,,,,,,,,,,,,,,06/Aug/14 14:02;seanrohead;TemporalServiceDependencyImpl.java.patch;https://issues.apache.org/jira/secure/attachment/12660138/TemporalServiceDependencyImpl.java.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-07 08:44:10.128,,,no_permission,,,,,,,,,,,,410331,,,Thu Aug 07 09:04:28 UTC 2014,,,,,,0|i1ylhj:,410320,,,,,,,,"07/Aug/14 08:44;pderop;Thanks Sean for the proposed patch.

As explained in FELIX-4598, we have made a big revamp of dependency manager, which is now using a new (almost) lock-free thread model. 

This new DM 4.0.0 version is unfortunately not yet committed in felix-trunk, but in the felix sandbox: [1] , and the code has changed a lot from DM 3.2.0; it's a big refactoring, so I would to avoid fixing anything in DM 3.2.0 because we first have to bring this new DM 4.0.0 version from the sandbox into the felix-trunk, then at this point I will will apply your patch (thanks again !).

(I'm currently off and will get back from vacations around 20 august).
/pierre

[1] http://svn.apache.org/viewvc/felix/sandbox/pderop/dependencymanager-prototype/



","07/Aug/14 09:04;pderop;commited the proposed patch in rv 1616445 (in the felix sandbox), and also adapter the org.apache.felix.dm.itest/src/org/apache/felix/dm/itest/TemporalServiceDependencyTest.java testcase.

Sean, now, we'll do our best to quickly move this new DM 4.0.0 version from the sandbox to the felix-trunk.

for now, you can build this new DM 4.0.0 version from the sandbox (it's a bndtools-only project, so you have to install the latest bndtools before importing dm 4.0.0 into eclipse). 

thanks;
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BundleDependency can effectively track only one bundle,FELIX-4598,12731993,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,tuomas_kiviaho,tuomas_kiviaho,05/Aug/14 11:21,19/Mar/15 06:00,14/Mar/19 02:48,07/Aug/14 08:16,dependencymanager.runtime-3.2.0,,,,,,org.apache.felix.dependencymanager-r1,,,,,,,Dependency Manager,,,,,,0,,,,,,"Bundles are delivered to callbacks after component is instantiated but prior to that they can't be. This is the case with ServiceDependencies as well but unlike them after component instantiation the tracker is not used as source of bundles but instead lookup method is used. {{ServiceDependencyImpl}} uses this approach only to gain properties and auto configuration instance.

I suggest that {{BundleDependencyImpl#invokeAdded(DependencyService service)}} would be implemented in similar manner that {{ServiceDependencyImpl#invokeAdded(DependencyService service)}} has been (perhaps also utilizing the serial executor) .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-05 12:08:33.012,,,no_permission,,,,,,,,,,,,410022,,,Tue Dec 09 16:38:47 UTC 2014,,,,,,0|i1yjlz:,410015,,,,,,,,"05/Aug/14 12:08;pderop;Hi Tuomas,

I have limited time since I'm travelling, going to vacations for two weeks, however I would like to point out that since a couple of months we have entirely revisited the dependency manager 4.0.0, using a new strong thread model.
And I'm not sure but I believe that this problem from dm 3.2.0 (if it is really a problem, I did not have time to really check) is probably not applicable in DM 4.0.0.

Unfortunately, we have not yet commited the DM 4.0.0 version in felix-trunk/dependencymanager, and you can take a look at the felix sandbox here: [1]: it's a pure bndtools project, so you will have to install bndtools before. But we will (hopefully) move this dm 4.0.0 soon to the felix-trunk.

then you can take a quick look at [2], which is a quick description about the new architecture, and the BundleDependencyImpl is located in [3] 

please close this issue if you think it's ok in DM 4.0.0. Thanks.

[1] http://svn.apache.org/viewvc/felix/sandbox/pderop/dependencymanager-prototype/
[2] http://svn.apache.org/viewvc/felix/sandbox/pderop/dependencymanager-prototype/org.apache.felix.dm/design.txt
[3] http://svn.apache.org/viewvc/felix/sandbox/pderop/dependencymanager-prototype/org.apache.felix.dm/src/org/apache/felix/dm/impl/BundleDependencyImpl.java

PS: I will commit a fix as well as some test cases for your other issue FELIX-4594, but this will be committed in the dm 4.0.0 (in the sandbox).

","05/Aug/14 13:18;tuomas_kiviaho;Hello Pierre,

I'll close this since I doubt there will be another 3.x fix prior 4.0.0 although the fix would have been copy-pasting {{addedService/removedService}} methods both with five lines of code. From what I understood with a quick glance is that it indeed would not be a problem anymore in the new major release.","06/Aug/14 07:10;tuomas_kiviaho;I dumped my patch here because JIRA prevents attachments from closed issues
{code}
Index: src/org/apache/felix/dm/impl/dependencies/BundleDependencyImpl.java
===================================================================
--- src/org/apache/felix/dm/impl/dependencies/BundleDependencyImpl.java	(revision 1546540)
+++ src/org/apache/felix/dm/impl/dependencies/BundleDependencyImpl.java	(working copy)
@@ -31,6 +31,7 @@
 import org.apache.felix.dm.InvocationUtil;
 import org.apache.felix.dm.impl.DefaultNullObject;
 import org.apache.felix.dm.impl.Logger;
+import org.apache.felix.dm.impl.SerialExecutor;
 import org.apache.felix.dm.tracker.BundleTracker;
 import org.apache.felix.dm.tracker.BundleTrackerCustomizer;
 import org.osgi.framework.Bundle;
@@ -54,7 +55,6 @@
     private String m_callbackChanged;
     private String m_callbackRemoved;
     private boolean m_autoConfig;
-	private Bundle m_bundleInstance;
 	private Filter m_filter;
 	private long m_bundleId = -1;
 	private String m_autoConfigInstance;
@@ -63,11 +63,13 @@
     private boolean m_propagate;
     private Object m_propagateCallbackInstance;
     private String m_propagateCallbackMethod;
+    private SerialExecutor m_executor;
 
     public BundleDependencyImpl(BundleContext context, Logger logger) {
         super(logger);
 		m_context = context;
 		m_autoConfig = true;
+        m_executor = new SerialExecutor(logger);
 	}
     
     public BundleDependencyImpl(BundleDependencyImpl prototype) {
@@ -76,7 +78,6 @@
         m_autoConfig = prototype.m_autoConfig;
         m_stateMask = prototype.m_stateMask;
         m_nullObject = prototype.m_nullObject;
-        m_bundleInstance = prototype.m_bundleInstance;
         m_filter = prototype.m_filter;
         m_bundleId = prototype.m_bundleId;
         m_propagate = prototype.m_propagate;
@@ -85,6 +86,7 @@
         m_callbackChanged = prototype.m_callbackChanged;
         m_callbackRemoved = prototype.m_callbackRemoved;
         m_autoConfigInstance = prototype.m_autoConfigInstance;
+        m_executor = prototype.m_executor;
     }
     
     public Dependency createCopy() {
@@ -447,15 +449,40 @@
         return Bundle.class;
     }
 
-    public void invokeAdded(DependencyService service) {
-        // we remember these for future reference, needed for required service callbacks
-        m_bundleInstance = lookupBundle();
-        invokeAdded(service, m_bundleInstance);
+    public void invokeAdded(final DependencyService service) {
+        Runnable task = new Runnable() {
+
+            @Override
+            public void run() {
+                Bundle[] bundles = m_tracker.getBundles();
+                if (bundles != null) {
+                    for (int i = 0; i < bundles.length; i++) {
+                        Bundle bundle = bundles[i];
+                        invokeAdded(service, bundle);
+                    }
+                } 
+            }
+            
+        };
+        m_executor.execute(task);
     }
 
-    public void invokeRemoved(DependencyService service) {
-        invokeRemoved(service, m_bundleInstance);
-        m_bundleInstance = null;
+    public void invokeRemoved(final DependencyService service) {
+        Runnable task = new Runnable() {
+
+            @Override
+            public void run() {
+                Bundle[] bundles = m_tracker.getBundles();
+                if (bundles != null) {
+                    for (int i = 0; i < bundles.length; i++) {
+                        Bundle bundle = bundles[i];
+                        invokeRemoved(service, bundle);
+                    }
+                } 
+            }
+            
+        };
+        m_executor.execute(task);
     }
     
     public BundleDependency setPropagate(boolean propagate) {

{code}",07/Aug/14 08:11;pderop;reopen in order to set the fixed-version as dm 4.0.0,"07/Aug/14 08:16;pderop;issue resolved in dm 4.0.0

Tuomas, I will see with Marcel/Xander if we can move the dm 4.0.0 sandbox in the felix-trunk. If this is not possible to do it quickly, then I'll look at your proposed patch and will commit it in the trunk (but when I will get back from vacations); 
thanks.","09/Dec/14 16:38;tuomas_kiviaho;I noticed that {{ResourceDependencyImpl}} suffers from similar scenario. On top of this both seem not to call {{invokeAdded}} (as {{ServiceDependency}} does) when dependency is required but service has already been instantiated.

{code}
Index: src/org/apache/felix/dm/impl/dependencies/ResourceDependencyImpl.java
===================================================================
--- src/org/apache/felix/dm/impl/dependencies/ResourceDependencyImpl.java	(revision 1488970)
+++ src/org/apache/felix/dm/impl/dependencies/ResourceDependencyImpl.java	(working copy)
@@ -35,6 +35,7 @@
 import org.apache.felix.dm.ResourceDependency;
 import org.apache.felix.dm.ResourceHandler;
 import org.apache.felix.dm.impl.Logger;
+import org.apache.felix.dm.impl.SerialExecutor;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceRegistration;
 import org.osgi.service.log.LogService;
@@ -56,16 +57,16 @@
     private URL m_trackedResource;
     private List m_resources = new ArrayList();
     private List m_resourceProperties = new ArrayList();
-    private URL m_resourceInstance;
-    private Dictionary m_resourcePropertiesInstance;
     private boolean m_propagate;
     private Object m_propagateCallbackInstance;
     private String m_propagateCallbackMethod;
+    private SerialExecutor m_executor;
     
     public ResourceDependencyImpl(BundleContext context, Logger logger) {
         super(logger);
         m_context = context;
         m_autoConfig = true;
+        m_executor = new SerialExecutor(logger);
     }
     
     public ResourceDependencyImpl(ResourceDependencyImpl prototype) {
@@ -80,6 +81,7 @@
         m_resourceFilter = prototype.m_resourceFilter;
         m_trackedResource = prototype.m_trackedResource;
         m_propagate = prototype.m_propagate;
+        m_executor = prototype.m_executor;
     }
     
     public Dependency createCopy() {
@@ -151,6 +153,9 @@
             for (int i = 0; i < services.length; i++) {
                 DependencyService ds = (DependencyService) services[i];
                 if (counter == 1) {
+                    if (ds.isInstantiated() && isInstanceBound() && isRequired()) {
+                        invokeAdded(ds, resource, resourceProperties);
+                    }
                     ds.dependencyAvailable(this);
                     if (!isRequired()) {
                         invokeAdded(ds, resource, resourceProperties);
@@ -438,17 +443,44 @@
         return URL.class;
     }
 
-    public void invokeAdded(DependencyService service) {
-        // we remember these for future reference, needed for required callbacks
-        m_resourceInstance = lookupResource();
-        m_resourcePropertiesInstance = lookupResourceProperties();
-        invokeAdded(service, m_resourceInstance, m_resourcePropertiesInstance);
+    public void invokeAdded(final DependencyService service) {
+        Runnable task = new Runnable() {
+
+            @Override
+            public void run() {
+                URL[] resourceInstances;
+                Dictionary[] resourcePropertiesInstances;
+                synchronized (this) {
+                    resourceInstances = (URL[]) m_resources.toArray(new URL[m_resources.size()]);
+                    resourcePropertiesInstances = (Dictionary[]) m_resourceProperties.toArray(new Dictionary[m_resourceProperties.size()]);
+                }
+                for (int i = 0; i < resourceInstances.length; i++) {
+                    invokeAdded(service, resourceInstances[i], resourcePropertiesInstances[i]);
+                }
+            }
+            
+        };
+        m_executor.execute(task);
     }
 
-    public void invokeRemoved(DependencyService service) {
-        invokeRemoved(service, m_resourceInstance, m_resourcePropertiesInstance);
-        m_resourceInstance = null;
-        m_resourcePropertiesInstance = null;
+    public void invokeRemoved(final DependencyService service) {
+        Runnable task = new Runnable() {
+
+            @Override
+            public void run() {
+                URL[] resourceInstances;
+                Dictionary[] resourcePropertiesInstances;
+                synchronized (this) {
+                    resourceInstances = (URL[]) m_resources.toArray(new URL[m_resources.size()]);
+                    resourcePropertiesInstances = (Dictionary[]) m_resourceProperties.toArray(new Dictionary[m_resourceProperties.size()]);
+                }
+                for (int i = 0; i < resourceInstances.length; i++) {
+                    invokeAdded(service, resourceInstances[i], resourcePropertiesInstances[i]);
+                }
+            }
+            
+        };
+        m_executor.execute(task);
     }
 
     public ResourceDependency setPropagate(boolean propagate) {
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race issue causing ConcurrentModificationException in org.apache.felix.http.whiteboard.internal.manager.ExtenderManager.add(ExtenderManager.java:111),FELIX-4597,12731951,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,uiterlix,uiterlix,05/Aug/14 07:12,11/Nov/14 11:43,14/Mar/19 02:48,05/Aug/14 09:32,http-2.3.0,,,,,,http-2.3.2,,,,,,,HTTP Service,,,,,,0,,,,,,"Quite frequently when launching our application we're getting a ConcurrentModificationException, see the following stacktrace:

java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)
	at java.util.HashMap$KeyIterator.next(HashMap.java:1453)
	at org.apache.felix.http.whiteboard.internal.manager.ExtenderManager.add(ExtenderManager.java:111)
	at org.apache.felix.http.whiteboard.internal.tracker.HttpContextTracker.added(HttpContextTracker.java:37)
	at org.apache.felix.http.whiteboard.internal.tracker.HttpContextTracker.added(HttpContextTracker.java:24)
	at org.apache.felix.http.whiteboard.internal.tracker.AbstractTracker.addingService(AbstractTracker.java:36)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
	at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:8

This is caused by a race issue where one thread is adding HttpContext where another thread is adding a servlet for this context at the same time.

Thread A:
In ExtenderManager.addHttpContext(service, ref) the http context is added to the context manager which returns a collection of mappings. This collection is the actual collection as administered by the HttpContextHolder.
In a for loop* on these mappings the mappings are registered with the HttpService.

Collection<AbstractMapping> mappings = this.contextManager.addHttpContext(bundle, contextId, service);

Thread B:
When adding a servlet on the other thread, getHttpContext(mapping, ref) is called which calls getHttpContext(bundle, contextId, mapping). Here the HttpContextHolder is obtained by HttpContextHolder holder = this.idMap.get(id). After which holder.addMapping(mapping) is called. This addMapping is called while thread A is still in it's for loop iterating over the mappings.

This requires synchronization. It would actually be nice to be able to synchronize on a particular HttpContext. This would require some method refactoring.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,409980,,,Tue Aug 05 09:32:45 UTC 2014,,,,,,0|i1yjdb:,409974,,,,,,,,05/Aug/14 09:32;uiterlix;Resolved by returning a copy of the set on addHttpContext instead of the original set.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Passing configuration to the maven-bundle-plugin does not always work,FELIX-4595,12731934,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,05/Aug/14 06:16,25/Aug/14 09:24,14/Mar/19 02:48,22/Aug/14 06:17,maven-scr-plugin 1.19.0,,,,,,maven-scr-plugin 1.20.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"The maven-scr-plugin passes the Service-Component and Include-Resource information to the maven-bundle-plugin by setting maven project properties.
This works as long as the using maven project does not have a configuration in the pom for these values. In that case, the configuration value is used as it overrides the project properties",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,409963,,,Thu Aug 07 06:54:09 UTC 2014,,,,,,0|i1yj9j:,409957,,,,,,,,"07/Aug/14 06:54;cziegeler;I've committed a first version based on FELIX-4596 in rev 1616419. The plugin checks if the maven bundle plugin with a version higher than 2.5.0 is available and then uses the new mechanism, otherwise it's falling back to the old (partially broken) mechanism.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Propagation from dependencies overwrites service properties,FELIX-4594,12731926,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,pderop,tuomas_kiviaho,tuomas_kiviaho,05/Aug/14 04:46,19/Mar/15 06:00,14/Mar/19 02:48,07/Aug/14 08:09,dependencymanager-3.2.0,,,,,,org.apache.felix.dependencymanager-r1,,,,,,,Dependency Manager,,,,,,0,,,,,,"ComponentImpl#calculateServiceProperties() method overwrites implicitly defined service properties those coming from propagated dependencies.
{code}
addTo(properties, m_serviceProperties);
for (int i = 0; i < m_dependencies.size(); i++) {
	Dependency d = (Dependency) m_dependencies.get(i);
	if (d.isPropagated() && d.isAvailable()) {
		Dictionary dict = d.getProperties();
		addTo(properties, dict);
	}
}
{code}

I think that it would be more appropriate to deal clashes so that service properties would be added AFTER dependency propagation inverting the overwrite. Traversal of dependencies should in my opinion be inverted as well.

{code}
for (int i = m_dependencies.size() - 1; i >= 0; i--) {
	Dependency d = (Dependency) m_dependencies.get(i);
	if (d.isPropagated() && d.isAvailable()) {
		Dictionary dict = d.getProperties();
		addTo(properties, dict);
	}
}
addTo(properties, m_serviceProperties);
{code}

My use case involves Service PID which is currently overwritten by propagated dependencies. I'd turn off propagation but @AdapterService (and @AspectService) annotation is missing such option that @BundleAdapterService is providing. I can't work around the issue (without patching) while using annotations so I increased the priority accordingly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-07 08:09:50.823,,,no_permission,,,,,,,,,,,,409955,,,Thu Aug 07 08:09:50 UTC 2014,,,,,,0|i1yj7r:,409949,,,,,,,,"07/Aug/14 08:09;pderop;commited the suggested patch in dm 4.0.0 (in the sandbox), in rv 1616434.

Commited the org.apache.felix.dm/src/org/apache/felix/dm/impl/ComponentImpl.java and modifed the following test cases:

org.apache.felix.dm.itest/src/org/apache/felix/dm/itest/AdapterWithPropagationTest.java
org.apache.felix.dm.itest/src/org/apache/felix/dm/itest/AspectWithPropagationTest.java
org.apache.felix.dm.itest/src/org/apache/felix/dm/itest/ServiceDependencyPropagateTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
createCopy method ConfigurationDependency produces a malfunctioning clone,FELIX-4588,12730418,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,tuomas_kiviaho,tuomas_kiviaho,29/Jul/14 06:42,19/Mar/15 06:00,14/Mar/19 02:48,04/Aug/14 09:31,dependencymanager.runtime-3.2.0,,,,,,org.apache.felix.dependencymanager-r1,,,,,,,Dependency Manager,,,,,,0,,,,,,"createCopy copies m_metaType as well which is understandable because the existence of this particular instance keeps track of appended metatype information. Problem arises when metaType is present and createCopy is used, because MetaTypeProviderImpl carries a reference to the original ConfigurationDependency. updated invocations wind up to the original implementation instead of clone",,,,,,,,,,,,,,FELIX-3909,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-04 09:30:46.574,,,no_permission,,,,,,,,,,,,408491,,,Mon Aug 04 09:31:28 UTC 2014,,,,,,0|i1yacn:,408489,,,,,,,,"04/Aug/14 09:30;pderop;Thanks for reporting;

Indeed, there is a bug when cloning metatype info in ConfigurationDependencyImpl.createCopy() method.
I have committed a test case , as well as a candidate patch in rv 1615520, but in tdependencymanager-4.0.0 (which is currently only committed in the felix sandbox [1], and not yet in the felix trunk).

[1]  http://svn.apache.org/viewvc/felix/sandbox/pderop/dependencymanager-prototype

the patched files are:

dependencymanager-prototype/org.apache.felix.dm/src/org/apache/felix/dm/impl/ConfigurationDependencyImpl.java
dependencymanager-prototype/org.apache.felix.dm/src/org/apache/felix/dm/impl/metatype/MetaTypeProviderImpl.java

and the new testcase: 

dependencymanager-prototype/org.apache.felix.dm.itest/src/org/apache/felix/dm/itest/AdapterWithConfigurationAndMetaType.java


",04/Aug/14 09:31;pderop;issue resolved (fee free to reopen if necessary).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update method is not verified,FELIX-4587,12730159,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,28/Jul/14 08:13,31/Jul/14 13:13,14/Mar/19 02:48,28/Jul/14 09:05,maven-scr-plugin 1.17.0,scr ant task 1.11.0,scr generator 1.10.0,,,,maven-scr-plugin 1.19.0,scr ant task 1.13.0,scr generator 1.12.0,,,,,SCR Tooling,,,,,,0,,,,,,"When specifying a non existing method for updated on a reference, this is never checked and put as is into the component xml, resulting in a runtime exception",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,408232,,,2014-07-28 08:13:54.0,,,,,,0|i1y8tj:,408236,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A field must be volatile if methods are generated for a dynamic reference,FELIX-4586,12730122,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,28/Jul/14 05:44,14/Dec/15 13:40,14/Mar/19 02:48,28/Jul/14 12:48,maven-scr-plugin 1.17.0,scr ant task 1.11.0,scr generator 1.10.0,,,,maven-scr-plugin 1.19.0,scr ant task 1.13.0,scr generator 1.12.0,,,,,SCR Tooling,,,,,,0,,,,,,"If a field is used for a reference, like
@Reference(policy=DYNAMIC)
private Field myService

and methods are generated for this dynamic reference, the field must be declared volatile. Otherwise updates to the field are not visible to the threads calling this component.
If no methods are generated and the reference is dynamic, a warning should be generated if it is not volatile.",,,,,,,,,,,,,,FELIX-5139,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-07-28 12:09:18.835,,,no_permission,,,,,,,,,,,,408195,,,Mon Jul 28 12:48:12 UTC 2014,,,,,,0|i1y8lb:,408199,,,,,,,,28/Jul/14 07:45;cziegeler;Added extra checks in rev 1613904,"28/Jul/14 12:09;rombert;I've tried the new plugin on a component with the following snippet:

{code}
    @Reference(policy = DYNAMIC)
    private StringBuilder bla;
    
    protected synchronized void bindBla(StringBuilder newBla) {
    	this.bla = newBla;
    }
    
    protected synchronized void unbindBla(StringBuilder oldBla) {
    	if ( this.bla == oldBla ) {
    		this.bla = null;
    	}
    } 
{code}

I would not expect to get an error, but I do:

{code}[1:1]: @Reference(bla) : Dynamic field should be declared volatile for unary references{code}

I would expect this to be triggered only if the methods were generated by the plugin, which they were not. Either I misunderstood the feature, or generated methods are not properly taken into account.","28/Jul/14 12:29;cziegeler;You're absolutely right, this should actually be just a warning - or maybe we should don't comment in that case at all?","28/Jul/14 12:32;rombert;In this case I would not comment at all, since it is be annoying to write correct bind/unbind methods and still get the warning. The alternative would be to turn off the check altogether, but then I'd miss potential errors in other components.","28/Jul/14 12:35;cziegeler;Hmm, right I agree. I'll remove that part completely then",28/Jul/14 12:48;cziegeler;Removed the second check completely in rev 1613989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR will create an additional component instance when ComponentContext.enableComponent is called,FELIX-4585,12729923,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,bjhargrave,bjhargrave,25/Jul/14 20:55,11/Aug/15 05:09,14/Mar/19 02:48,02/Aug/14 03:25,,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In the OSGi CT, the testActivateDeactivate(org.osgi.test.cases.component.junit.DeclarativeServicesControl) method tests that that component activate and deactivate methods are properly called. It uses ComponentContext.disableComponent and enableComponent to cause component instances to be disposed and created.

If ComponentContext.enableComponent is called on an already enabled component, SCR will improperly create an additional instance of the component.

See the following log messages:

org.osgi.test.cases.component.tb6.CcBcMapIntNS110@1048641931 activate
org.osgi.test.cases.component.tb6.ContExp@339127939 activate
configuration update org.osgi.test.cases.component.tb6.CcBcMapIntNS110
configuration updated org.osgi.test.cases.component.tb6.CcBcMapIntNS110
org.osgi.test.cases.component.tb6.CcBcMapIntNS110@1048641931 deactCcBcMapInt
org.osgi.test.cases.component.tb6.CcBcMapIntNS110@855459426 activate
enable org.osgi.test.cases.component.tb6.CcBcMapIntNS110
enabled org.osgi.test.cases.component.tb6.CcBcMapIntNS110
org.osgi.test.cases.component.tb6.CcBcMapIntNS110@232400695 activate


We can see that CcBcMapIntNS110 is activated initially. Then in response to a configuration change, the component instance is deactivated and a new instance it activated. Then ComponentContext.enableComponent is called on the already enabled component and another instance is created in error.

This error is creating problems passing the OSGi CT.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-02 03:25:45.132,,,no_permission,,,,,,,,,,,,407996,,,Sat Aug 02 03:25:45 UTC 2014,,,,,,0|i1y7e7:,408005,,,,,,,,"02/Aug/14 03:25;djencks;Thanks for finding this, fixing it revealed several other problems with factory components. Fixed in revs r1615283 and r1615284",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad Require-Capability generation when the SCR target filter has no parentheses,FELIX-4576,12728880,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,22/Jul/14 15:49,01/Aug/15 11:30,14/Mar/19 02:48,22/Jul/14 15:52,,,,,,,maven-bundle-plugin-2.5.2,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,406954,,,Tue Jul 22 15:52:07 UTC 2014,,,,,,0|i1y127:,406973,,,,,,,,"22/Jul/14 15:52;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	bundleplugin/src/main/resources/org/apache/felix/bundleplugin/scr.xsl
Committed r1612595
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The maven-bundle-plugin only generates Provide-/Require-Capabilities for SCR if version is 1.1.0,FELIX-4574,12728799,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,22/Jul/14 08:21,01/Aug/15 11:30,14/Mar/19 02:48,22/Jul/14 15:15,,,,,,,maven-bundle-plugin-2.5.2,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,406873,,,Tue Jul 22 15:15:09 UTC 2014,,,,,,0|i1y0k7:,406892,,,,,,,,"22/Jul/14 15:15;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	bundleplugin/src/main/resources/org/apache/felix/bundleplugin/scr.xsl
Committed r1612587
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console Event plugin might cease operation if Event property is null,FELIX-4573,12728794,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,v_valchev,v_valchev,v_valchev,22/Jul/14 07:56,05/Jan/15 09:53,14/Mar/19 02:48,22/Jul/14 07:59,webconsole-event-plugin-1.1.0,,,,,,webconsole-event-plugin-1.1.2,,,,,,,Web Console,,,,,,0,,,,,,"With OSGi r4.2 the Event class can be created not only with Dictionary but also with a Map.

Map allows the users to post dictionary where some values are null. In that case the event plugin will fail with the following exception and stop processing other events:
{code}
java.lang.NullPointerException
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.eventJson(PluginServlet.java:359)
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.renderJSON(PluginServlet.java:184)
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.doGet(PluginServlet.java:208)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,406868,,,Mon Jan 05 09:53:01 UTC 2015,,,,,,0|i1y0j3:,406887,,,,,,,,22/Jul/14 07:59;v_valchev;Fixed in rev. 1612498,05/Jan/15 09:53;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console may cause NPE on refresh packages,FELIX-4572,12728786,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,v_valchev,v_valchev,v_valchev,22/Jul/14 07:13,16/Mar/15 08:17,14/Mar/19 02:48,22/Jul/14 07:17,webconsole-4.2.2,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"If you try to refresh packages on the webconsole or it's dependencies (like the fileupload) bundle, the following exception will be printed in the log file:

{code}
 [ERROR]8 : [HTTP] Problem while making answer to request /system/console/bundles/19 from client address 127.0.0.1:63063

java.lang.NullPointerException
        at org.osgi.util.tracker.ServiceTracker.<init>(ServiceTracker.java:207)
        at org.apache.felix.webconsole.SimpleWebConsolePlugin.getService(SimpleWebConsolePlugin.java:196)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.getPackageAdmin(BundlesServlet.java:1403)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.isFragmentBundle(BundlesServlet.java:715)
        at org.apache.felix.webconsole.internal.core.BundlesServlet.doPost(BundlesServlet.java:358)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:815)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:493)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:418)
{code}

The reason is that the refresh will cause the webconsole bundle to be restarted. Here is what happens:
# doPost entered
# sent package refresh
# webconsole bundle is stopped
# web console tries to access a service
# NPE
# doPost leaving

To prevent that, the bundle plugin should simply check if the bundleContext is null",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,406860,,,Tue Jul 22 07:17:55 UTC 2014,,,,,,0|i1y0hb:,406879,,,,,,,,22/Jul/14 07:17;v_valchev;fixed in rev. 1612488,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when using Repository impl with Aries subsystem impl,FELIX-4571,12728592,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,tjwatson,tjwatson,21/Jul/14 14:34,17/Mar/15 06:52,14/Mar/19 02:48,22/Sep/14 14:57,,,,,,,bundlerepository-2.0.4,,,,,,,Bundle Repository (OBR),,,,,,0,,,,,,"I get the following while trying to use the OSGi  Repository service  implementation with Apache Aries subsystems implementation:

Caused by: java.lang.NullPointerException
	at org.apache.felix.bundlerepository.impl.LazyHashMap.put(LazyHashMap.java:88)
	at org.apache.felix.bundlerepository.impl.OSGiRepositoryImpl.newOSGiContentCapability(OSGiRepositoryImpl.java:155)
	at org.apache.felix.bundlerepository.impl.FelixResourceAdapter.getCapabilities(FelixResourceAdapter.java:50)
	at org.apache.felix.resolver.Util.isFragment(Util.java:62)
	at org.apache.felix.resolver.Candidates.processCandidates(Candidates.java:606)
	at org.apache.felix.resolver.Candidates.populateResource(Candidates.java:273)
	at org.apache.felix.resolver.Candidates.populate(Candidates.java:161)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:146)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:410)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:393)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:101)
	at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:92)
	at org.apache.aries.subsystem.core.internal.InstallAction.createSubsystemResource(InstallAction.java:114)
	at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:52)

It appears a null capability size attribute is causing the exception:

 contentAttrs.put(ContentNamespace.CAPABILITY_SIZE_ATTRIBUTE, resource.getSize());

I'm not sure why it is null or if it is not allowed to be null.",,,,,,,,,,,,,,,,,,,,24/Jul/14 19:48;tjwatson;obr.test_1.0.0.201407241433.jar;https://issues.apache.org/jira/secure/attachment/12657656/obr.test_1.0.0.201407241433.jar,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-07-21 14:42:46.041,,,no_permission,,,,,,,,,,,,406667,,,Mon Sep 22 14:57:48 UTC 2014,,,,,,0|i1xzb3:,406687,,,,,,,,"21/Jul/14 14:42;bosschaert;I've used it successfully with Aries Subsystems, so you're probably doing something a little differently than me. Do you have any specific instructions to reproduce?

BTW I assume this is with bundlerepository 2.0.2?","22/Jul/14 12:31;tjwatson;Yes, bundlerepository 2.0.2.  I will have to get an isolated testcase to reproduce.  I'm pretty sure it involves using the org.osgi.service.obr.RepositoryAdmin.addRepository(URL) method.  I need to investigate the scenario more and figure out what the inputs are that cause the NPE.",24/Jul/14 19:32;tjwatson;Here is a test bundle to reproduce.  It uses a very simple old style obr XML file and then does a search for all resources uses the osgi.identity namespace and then simply calls getCapabilities(null) on each resource.  The NPE happens when trying to fill out the information for the osgi.content capability.,"24/Jul/14 19:48;tjwatson;Attach test again, this time including the necessary resource bundle embedded in the test bundle.","22/Sep/14 14:57;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1626798

[~tjwatson] could you please double check that this fixes it for your scenario?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scr bnd plugin incompatible with maven-bundle-plugin 2.5.0,FELIX-4567,12728203,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,tnarake,tnarake,18/Jul/14 13:41,09/Oct/15 18:24,14/Mar/19 02:48,19/Jul/14 21:08,scr bnd plugin 1.0.0,scr bnd plugin 1.1.0,,,,,scr bnd plugin 1.3.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"Using the scr bnd plugin inside maven-bundle-plugin fails with {{java.lang.NoSuchMethodError: aQute.bnd.osgi.Verifier.isStrict()Z}}
(full pom.xml attached)

{code:xml}
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.5.0</version>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <_plugin>org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin</_plugin>
          </instructions>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.felix</groupId>
            <artifactId>org.apache.felix.scr.bnd</artifactId>
            <version>1.1.0</version>
          </dependency>
        </dependencies>
      </plugin>
{code}

Root cause is that scr-bnd plugin includes an incompatible version of bndlib (2.1.0) while maven-bundle-plugin 2.5.0 is using bndlib 2.3.0. In the maven context, scr-bnd plugin is first in the class path and so, its embedded version of bndlib wins.

Probably scr-bnd plugin should not include a version of bndlib at all, but expect it to be provided by the caller of the plugin.


*workaround*
add a dependency on bndlib before scr-bnd plugin:

{code:xml}
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.5.0</version>
        <dependencies>
          <dependency>
            <groupId>biz.aQute.bnd</groupId>
            <artifactId>bndlib</artifactId>
            <version>2.3.0</version>
          </dependency>
          <dependency>
            <groupId>org.apache.felix</groupId>
            <artifactId>org.apache.felix.scr.bnd</artifactId>
            <version>1.1.0</version>
          </dependency>
        </dependencies>
      </plugin>
{code}","Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 14:51:28+0100)
Java version: 1.7.0_51, vendor: Oracle Corporation
Default locale: en_US, platform encoding: UTF-8
OS name: ""mac os x"", version: ""10.9.4"", arch: ""x86_64"", family: ""mac""",,,,,,,,,,,,,FELIX-5074,,,,,,18/Jul/14 13:43;tnarake;pom.xml;https://issues.apache.org/jira/secure/attachment/12656511/pom.xml,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-07-19 21:08:36.08,,,no_permission,,,,,,,,,,,,406308,,,Wed Jul 23 14:19:41 UTC 2014,,,,,,0|i1xx3z:,406329,,,,,,,,18/Jul/14 13:43;tnarake;Run {{mvn package}} on this [^pom.xml] to reproduce the issue. (No other project files required beside the pom),"19/Jul/14 21:08;pderop;Thanks Timo for reporting this issue.

I have committed a patch (revision  1611964) in the bnd scrplugin pom.xml , in order to exclude bndlib, when running the maven-shade-plugin.
I think the issue is resolved, but feel free to reopen on anything wrong.","23/Jul/14 14:14;pderop;Carsten;

Usually, what is the best practice when an issue is resolved ? should I only set the fix-version and leave this issue to Resolved state (and then you will close it after the next release), or should I close it immediately ?
(I have set the fix-version to the next release version which is scr bnd plugin 1.1.2).

thanks.
","23/Jul/14 14:19;cziegeler;Pierre, yes, that's the right thing, just setting to resolved and once the release is out closing it.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consistency in PersistenceManager and Cache is not guaranteed,FELIX-4566,12728182,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,iocanel,iocanel,18/Jul/14 10:24,15/Apr/15 15:12,14/Mar/19 02:48,05/Sep/14 11:29,configadmin-1.8.2,,,,,,configadmin-1.8.2,,,,,,,Configuration Admin,,,,,,0,,,,,,"Currently the store method in the CachingPersistenceManagerProxy performs an update on the PersistenceManager and then also updates the Cache.

Since we are updating 2 resources, without any form of synchronisation its possible that the resources are out of sync.

For example:

Two threads A and B call configuration.update() on the same pid. The first threads calls store(), the PersistenceManager gets updated and then the second thread kicks in updates both PersistenceManager and the cache and finally the first thread updates the cache. 

",,,,,,,,,,,,,,KARAF-3204,,KARAF-3668,,,,18/Jul/14 14:11;iocanel;FELIX-4566-2.patch;https://issues.apache.org/jira/secure/attachment/12656514/FELIX-4566-2.patch,18/Jul/14 14:05;iocanel;FELIX-4566.patch;https://issues.apache.org/jira/secure/attachment/12656512/FELIX-4566.patch,05/Sep/14 09:43;iocanel;FELIX-45661-global-lock.patch;https://issues.apache.org/jira/secure/attachment/12666768/FELIX-45661-global-lock.patch,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2014-07-28 20:34:24.712,,,no_permission,,,,,,,,,,,,406287,,,Fri Sep 05 11:29:55 UTC 2014,,,,,,0|i1xwzb:,406308,,,,,,,,"18/Jul/14 14:05;iocanel;I am attaching a patch which uses read/write lock to ensure that updates on cache and persistence manager are synchronized.

It also removes the check and act for populating the initial cache values and moves that part in the constructor. ",18/Jul/14 14:11;iocanel;Improvement: Removal of the lock when the pid gets removed.,"28/Jul/14 20:34;gnt;I think the patch is not sufficient.
We should provide some kind of synchronization for concurrent access to the cache and the getDictionaries() method returns an enumeration directly on the Hashtable which is not guarded.
I'm also not sure if eagerly loading the entries is a good idea, as it would result in an exception thrown from a totally different place and i'm not sure it's really supported.
I wonder if it would be easier to sync on a single global lock...
Thoughts ?","02/Sep/14 09:24;iocanel;Even though getDictionaries() doesn't affect the consistency between cache/file persistance it should still be guarded so that it always returns the ""snapshot"" of the cache. 

Regarding, the eager loading I am not sure. Personally, I think that since the service is backed by files its better to have an error during initialisation than later in the processes. For what it worths, I switched to eager loading so that I can be able to use a lock per pid. But since the getDictionaries() will require a global lock, then yes most probably will can switch back to lazy loading too.
","05/Sep/14 11:29;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	configadmin/src/main/java/org/apache/felix/cm/impl/CachingPersistenceManagerProxy.java
Committed r1622684
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Occasional ArrayIndexOutOfBoundException in iPOJO's ProvidedServiceHandler,FELIX-4565,12728016,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,benjamindebeerst,benjamindebeerst,17/Jul/14 18:54,24/Dec/14 16:27,14/Mar/19 02:48,25/Aug/14 08:41,ipojo-runtime-1.11.2,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"I have an iPOJO (1.11.2) component using the @ServiceController annotation to control the service publishing. Most of the time this works perfectly fine, but occasionally I get an ArrayIndexOutOfBoundsException.

{code}
java.lang.ArrayIndexOutOfBoundsException: 4
               at org.apache.felix.ipojo.handlers.providedservice.ProvidedServiceHandler.__M_onSet(ProvidedServiceHandler.java:416)[83:org.apache.felix.ipojo:1.11.2]
               at org.apache.felix.ipojo.handlers.providedservice.ProvidedServiceHandler.onSet(ProvidedServiceHandler.java)[83:org.apache.felix.ipojo:1.11.2]
               at org.apache.felix.ipojo.InstanceManager.onSet(InstanceManager.java:1401)[83:org.apache.felix.ipojo:1.11.2]
               [..] (My own code following, where the service controller boolean is manipulated)
{code}

Unfortunately I cannot share the consumer code nor reproduce the problem. I looked into [iPOJOs code|http://grepcode.com/file/repo1.maven.org/maven2/org.apache.felix/org.apache.felix.ipojo/1.11.2/org/apache/felix/ipojo/handlers/providedservice/ProvidedServiceHandler.java#416] to see what's going on, and there we have:

{code}
for (int j = 0; j < svc.getProperties().length; j++) { Property prop = svc.getProperties()[j];
               [...]
}
{code}

Which looks like a proper race condition to me, if svc.getProperties() changes its value in the meantime because of missing synchronizations. I don't see any synchronizations there, but I also don't know if they would be appropriate in the first place.
",Karaf 2.3.3 / Windows 7 64 bit,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-25 08:41:13.472,,,no_permission,,,,,,,,,,,,406121,,,Wed Dec 24 16:27:41 UTC 2014,,,,,,0|i1xvz3:,406141,,,,,,,,25/Aug/14 08:41;clement.escoffier;Fixed in trunk.,03/Sep/14 09:13;benjamindebeerst;Is there a way to see the commits/diff that belonged to this fix?,03/Sep/14 11:34;clement.escoffier;Here it is: https://github.com/apache/felix/commit/d142625f2bb30d8c723114edfb66322c55240687,"24/Dec/14 16:27;Benjamin.Debeerst@younicos.com;Sorry, I am currently not in the office and will be back on January 5, 2015.

Please note, your email has not been forwarded.

In urgent cases please contact:
For issues regarding the WEMAG project: Niels Majer (niels.majer@younicos.com).
For issues regarding the UKPN project and other topics: Udo Berninger (udo.berninger@younicos.com).

Let the fossils rest in peace.
Benjamin Debeerst

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JSON Output overwrites resource information,FELIX-4564,12727822,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,17/Jul/14 02:12,25/Jul/14 11:48,14/Mar/19 02:48,17/Jul/14 02:13,webconsole-obr-plugin-1.0.0,,,,,,webconsole-obr-plugin-1.0.2,,,,,,,Web Console,,,,,,0,,,,,,"When JSON output is generated, properties of the rendered Resource object are overwritten as the JSONObject is constructed with the properties map of the Resource and consequent put operations on the JSONObject overwrite the content in the properties map.
This results in a ClassCastException for the version attribute",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405927,,,2014-07-17 02:12:26.0,,,,,,0|i1xurz:,405947,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] target filters in xml reference element are not turned into properties,FELIX-4563,12727718,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,16/Jul/14 17:40,11/Aug/15 05:09,14/Mar/19 02:48,16/Jul/14 23:11,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"spec section 12.6 item 3 indicates that targets specified in reference elements should show up as component properties.  This has to be processed as the xml is read since later property specifications override earlier ones, and reference and property elements can be interspersed  in any order.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405823,,,Wed Jul 16 23:11:45 UTC 2014,,,,,,0|i1xu5b:,405843,,,,,,,,16/Jul/14 23:11;djencks;fixed (with a test!) in rev 1611157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console License plugin fails to load files,FELIX-4562,12727620,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,16/Jul/14 09:08,16/Mar/15 08:17,14/Mar/19 02:48,16/Jul/14 09:09,webconsole-4.2.2,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"License plugin fails to load the files from fragment bundles. The reason for that is the following code in LicenseServlet.sendResource() method:

bundle.getResource( pathInfo.licenseFile )

The problem is that by specification bundle.getResource() must always return null if the bundle is fragment.

To fix the problem, the code should also try searching the files using bundle.getEntry() method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405726,,,Wed Jul 16 09:09:54 UTC 2014,,,,,,0|i1xtk7:,405748,,,,,,,,16/Jul/14 09:09;v_valchev;fixed in rev.1610945,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jetty 2.3.0 and Whiteboard 2.3.0 randomly not registering services,FELIX-4561,12727352,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,paulbakker,paulbakker,15/Jul/14 14:54,11/Nov/14 11:43,14/Mar/19 02:48,30/Oct/14 08:57,http-2.3.0,,,,,,http-2.3.2,,,,,,,HTTP Service,,,,,,0,,,,,,"In a project with many bundles/services there are always some registrations being ""missed"" by Jetty/Whiteboard. The problems seems to be random; each time different registrations will be missing.

I can't reproduce this consistently yet, it seems to be timing dependent. The logs show the stacktrace below, I'm not sure if this is related to the cause of the issue, or just another side effect.

{code}
g! ERROR: Bundle org.apache.felix.http.whiteboard [4] EventDispatcher: Error during dispatch. (java.lang.IllegalArgumentException: Nothing registered at /whatsnewjson)
java.lang.IllegalArgumentException: Nothing registered at /whatsnewjson
        at org.apache.felix.http.base.internal.service.HttpServiceImpl.unregister(HttpServiceImpl.java:129)
        at org.apache.felix.http.whiteboard.internal.manager.ServletMapping.unregister(ServletMapping.java:68)
        at org.apache.felix.http.whiteboard.internal.manager.ExtenderManager.unregisterAll(ExtenderManager.java:217)
        at org.apache.felix.http.whiteboard.internal.manager.ExtenderManager.unsetHttpService(ExtenderManager.java:200)
        at org.apache.felix.http.whiteboard.internal.tracker.HttpServiceTracker.removed(HttpServiceTracker.java:47)
        at org.apache.felix.http.whiteboard.internal.tracker.HttpServiceTracker.removed(HttpServiceTracker.java:24)
        at org.apache.felix.http.whiteboard.internal.tracker.AbstractTracker.removedService(AbstractTracker.java:52)
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:956)
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:864)
        at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
        at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:902)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
        at org.apache.felix.framework.Felix.access$000(Felix.java:74)
        at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:401)
        at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:151)
        at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
        at org.apache.felix.http.base.internal.HttpServiceController.unregister(HttpServiceController.java:159)
        at org.apache.felix.http.base.internal.DispatcherServlet.destroy(DispatcherServlet.java:53)
        at org.eclipse.jetty.servlet.ServletHolder.destroyInstance(ServletHolder.java:395)
        at org.eclipse.jetty.servlet.ServletHolder.doStop(ServletHolder.java:368)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
        at org.eclipse.jetty.servlet.ServletHandler.doStop(ServletHandler.java:241)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
        at org.eclipse.jetty.server.handler.HandlerWrapper.doStop(HandlerWrapper.java:107)
        at org.eclipse.jetty.server.session.SessionHandler.doStop(SessionHandler.java:136)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
        at org.eclipse.jetty.server.handler.HandlerWrapper.doStop(HandlerWrapper.java:107)
        at org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:815)
        at org.eclipse.jetty.servlet.ServletContextHandler.doStop(ServletContextHandler.java:160)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStop(HandlerCollection.java:250)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
        at org.eclipse.jetty.server.handler.HandlerWrapper.doStop(HandlerWrapper.java:107)
        at org.eclipse.jetty.server.Server.doStop(Server.java:343)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
        at org.apache.felix.http.jetty.internal.JettyService.stopJetty(JettyService.java:216)
        at org.apache.felix.http.jetty.internal.JettyService.updated(JettyService.java:188)
        at org.apache.felix.http.jetty.internal.JettyManagedService$1.updated(JettyManagedService.java:44)
        at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updateService(ManagedServiceTracker.java:148)
        at org.apache.felix.cm.impl.helper.ManagedServiceTracker.provideConfiguration(ManagedServiceTracker.java:81)
        at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.provide(ConfigurationManager.java:1448)
        at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.run(ConfigurationManager.java:1404)
        at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:103)
        at java.lang.Thread.run(Thread.java:744)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-08 15:13:10.896,,,no_permission,,,,,,,,,,,,405458,,,Thu Oct 30 08:57:15 UTC 2014,,,,,,0|i1xrxj:,405483,,,,,,,,08/Aug/14 15:13;bosschaert;I've just been hit by this problem too. FWIW it was also present with Felix/Jetty 2.2.2.,"08/Aug/14 16:24;cziegeler;Not sure if this is the same problem, however I discoverd (and fixed) FELIX-4603 - but that problem only occurs if a service object is registered as a servlet and filter at the same time through the whiteboard.",11/Aug/14 07:18;cziegeler;[~paulbakker] [~bosschaert] Maybe you could give the latest version from trunk a try? we have to conccurency fixes included and maybe they already solve the problem?,"30/Oct/14 08:57;jajans;Committed a fix for this, which was tested successfully internally.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unsynchonized access to map can cause infinite loop in UPnP web console plugin,FELIX-4560,12727324,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,15/Jul/14 12:00,05/Jan/15 09:47,14/Mar/19 02:48,15/Jul/14 12:06,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,"An infinite loop loop while getting/putting elements in a map can occur in ControlServlet.
It uses unsynchonized maps to cache UPnP devices and icons. It seems that map implementation might cause the infinite loop, if you access an element, that is concurrently being removed.
In order to prevent that race condition, the access to the cache must be synchronized properly.

To reproduce the problem do:
# run upnp and upnp web console plug-in
# restart upnp bundle
# click a few times on ""Search for UPnP Devices"" button in web console

The problem usually occurs on slower machines.",j9 v2.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405430,,,Mon Jan 05 09:47:47 UTC 2015,,,,,,0|i1xrrb:,405455,,,,,,,,15/Jul/14 12:06;v_valchev;fixed in rev.1610667,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DS plugin should use Inventory instead of deprecated ConfigurationPrinter,FELIX-4559,12727266,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,15/Jul/14 07:06,11/Aug/15 05:08,14/Mar/19 02:48,15/Jul/14 07:10,webconsole-ds-plugin-1.0.0,,,,,,webconsole-ds-plugin-2.0.0,,,,,,,Inventory,Web Console,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405372,,,Tue Jul 15 07:10:26 UTC 2014,,,,,,0|i1xren:,405397,,,,,,,,15/Jul/14 07:10;v_valchev;fixed in rev.1610597,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console Service plugin doesn't list properties with value 0,FELIX-4558,12727077,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,14/Jul/14 12:35,16/Mar/15 08:17,14/Mar/19 02:48,14/Jul/14 12:38,webconsole-4.2.2,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"There is installed service, that has service registration property which value is  0. Instead of showing the value, the web console plugin displays empty string.",,,,,,,,,,,,,,,,,,,,14/Jul/14 12:36;v_valchev;Service-no-value.png;https://issues.apache.org/jira/secure/attachment/12655533/Service-no-value.png,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405184,,,Mon Jul 14 12:38:45 UTC 2014,,,,,,0|i1xqc7:,405219,,,,,,,,14/Jul/14 12:36;v_valchev;attached screenshot that illustrates the problem,14/Jul/14 12:38;v_valchev;fixed in rev. 1610403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Maven Bundle Plugin fails with ArrayIndexOutOfBoundsException, ""Invalid Class File"" errors with Java 8 features",FELIX-4556,12726548,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,suceugene,suceugene,10/Jul/14 10:33,12/May/15 05:56,14/Mar/19 02:48,09/Mar/15 09:48,maven-bundle-plugin-2.5.0,,,,,,maven-bundle-plugin-2.5.4,,,,,,,Maven Bundle Plugin,,,,,,1,,,,,,"This issue had been fixed in maven-bundle-plugin-2.4.0. It comes out again. Please refer to FELIX-4005.

[INFO] --- maven-bundle-plugin:2.5.0:bundle (default-bundle) @ importer-app ---
java.lang.ArrayIndexOutOfBoundsException: 34983
	at aQute.bnd.osgi.Clazz.classConstRef(Clazz.java:1862)
	at aQute.bnd.osgi.Clazz.crawl(Clazz.java:1166)
	at aQute.bnd.osgi.Clazz.doCode(Clazz.java:1134)
	at aQute.bnd.osgi.Clazz.doAttribute(Clazz.java:945)
	at aQute.bnd.osgi.Clazz.doAttributes(Clazz.java:910)
	at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:741)
	at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:494)
	at aQute.bnd.osgi.Clazz.parseClassFileWithCollector(Clazz.java:483)
	at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:473)
	at aQute.bnd.osgi.Analyzer.analyzeJar(Analyzer.java:2177)
	at aQute.bnd.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:2083)
	at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:138)
	at aQute.bnd.osgi.Builder.analyze(Builder.java:343)
	at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:616)
	at aQute.bnd.osgi.Builder.build(Builder.java:80)
	at org.apache.felix.bundleplugin.BundlePlugin.buildOSGiBundle(BundlePlugin.java:612)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:375)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:292)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:283)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[ERROR] Bundle com.memory.app:importer-app:bundle:1.0.0 : Exception: 34983
[ERROR] Bundle com.memory.app:importer-app:bundle:1.0.0 : Invalid class file com/ibm/icu/text/SimpleDateFormat.class (java.lang.ArrayIndexOutOfBoundsException: 34983)
","Apache Maven 3.0.5
Java version: 1.8.0_05, vendor: Oracle Corporation
OS name: ""linux"", version: ""3.13.0-30-generic"", arch: ""amd64"", family: ""unix""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-07-10 14:35:41.202,,,no_permission,,,,,,,,,,,,404655,,,Mon Mar 09 09:48:02 UTC 2015,,,,,,0|i1xn47:,404693,,,,,,,,10/Jul/14 14:35;mcculls;I believe this is related to https://github.com/bndtools/bnd/issues/527 which was fixed in bndlib trunk a few weeks ago - once there's a new release of bndlib we can update the bundle plugin to use that and do a maintenance release.,"15/Nov/14 11:52;bmargulies;I think I hit this without Java 8. See  bnd issue 685, which I'm told duplicates 603, and in turn that there is a fix released already in bndlib 2.4.0, so the maven plugin could release.



","15/Nov/14 12:38;mcculls;BTW, as a workaround until the next plugin release you can upgrade the version of bnd used locally in your project:
{code:xml}
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.5.3</version>
        <dependencies>
          <dependency>
            <groupId>biz.aQute.bnd</groupId>
            <artifactId>bndlib</artifactId>
            <version>2.4.0</version>
          </dependency>
        </dependencies>
      <plugin>
{code}","09/Mar/15 03:08;p_ansell;The workaround above worked for me when this hit me today, but is there any timeline on the next release for the bundle plugin to patch the new dependency version in.","09/Mar/15 09:48;cziegeler;Not sure when we will cut a release, but at least this is fixed in trunk as we have 2.4.1 included",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] use a bnd.bnd file for bnd configuration,FELIX-4537,12721271,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,15/Jun/14 00:44,11/Aug/15 05:09,14/Mar/19 02:48,07/Aug/14 19:57,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,I got fed up with xml an am trying a bnd.bnd file to configure bnd's actions.  Can be reversed if necessary.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,399467,,,Thu Aug 07 19:57:09 UTC 2014,,,,,,0|i1wrnj:,399576,,,,,,,,07/Aug/14 19:57;djencks;I like this much better.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] [R6rfc190] service.pid property aggregates pids from all configurations.,FELIX-4536,12721270,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,15/Jun/14 00:40,11/Aug/15 05:09,14/Mar/19 02:48,06/Aug/14 02:02,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"An addition to rfc 190 specifies that all the service.pids from the xml config, all the ca configs, and the newInstance factory method get put in a Collection<String> so you can figure out what happened.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,399466,,,2014-06-15 00:40:20.0,,,,,,0|i1wrnb:,399575,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundles containing native code fails to start on Windows 7,FELIX-4534,12721107,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bthiebault,bthiebault,13/Jun/14 13:33,11/Nov/14 09:19,14/Mar/19 02:48,16/Jun/14 07:25,framework-4.2.0,framework-4.2.1,framework-4.4.0,,,,framework-4.4.1,,,,,,,Framework,,,,,,0,,,,,,"Windows 7 system is not properly recognized which makes bundles containing native code fail to start.

The OS name is retrieved using Java system property in org.apache.felix.Felix class, line 4481. OS name is then ""Windows 7"", with a space.

It is then normalized using method org.apache.felix.framework.util.manifestparser.R4LibraryClause.normalizeOSName() and stored in the configMap. OS name becomes ""windows7"" without the space.

When starting the bundle, method org.apache.felix.framework.util.manifestparser.R4LibraryClause.match() is called, retrieves the already normalized OS name (""windows7"") in the configMap and normalizes it again.

This second normalisation fails as ""windows7"" without the space is not recognized by method org.apache.felix.framework.util.manifestparser.R4LibraryClause.normalizeOSName().

In particular, the condition in the if statement line 392 is false when the OS name is ""windows7"":
if ((value.indexOf("" 7"") >= 0) || value.equals(""win7""))

Possible solutions are:
- prevent the OS name to be normalized twice (by checking if it is already normal)
- improve the normalisation to deal with ""windows7"" OS name (by replacing the if statement with if ((value.indexOf(""7"") >= 0)) <- no space)",Windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-13 15:32:48.347,,,no_permission,,,,,,,,,,,,399304,,,Mon Jun 16 15:25:21 UTC 2014,,,,,,0|i1wqo7:,399414,,,,,,,,13/Jun/14 15:32;bosschaert;I'm having a look to provide a fix for this...,"13/Jun/14 15:37;rickhall;Ok, I think the best approach is to simply not re-normalize already normal names. Thanks!","13/Jun/14 15:49;bosschaert;Is there a simple way to figure out that a string has already been normalized though?

The one thing that I notice is is that for these Windows values the return value doesn't pass its own test:
{code}  else if ((value.indexOf("" 7"") >= 0) || value.equals(""win7""))
  {
    os = ""windows7"";
  }{code}
","13/Jun/14 16:02;bosschaert;I guess the easiest way to fix this would be to make that condition pass its own test (like the other tests in this place), e.g. 

{code}  else if ((value.indexOf("" 7"") >= 0) || value.equals(""win7"") || value.equals(""windows7""))
  {
    os = ""windows7"";
  }{code}
But that doesn't change the amount of times that the normalization is executed...","13/Jun/14 16:03;bthiebault;Exactly, it's because the Windows 7 normalised name does not pass the normalisation test that the problem appears.

To know if a name is already normalised, you could store the normalised names somewhere. There is another bug report from Richard that suggest storing OS names in a properties file.","13/Jun/14 19:05;rickhall;Yes, David, I think that would be the easiest too.","13/Jun/14 20:26;bosschaert;I wrote an implementation in http://svn.apache.org/viewvc?view=revision&revision=1602511

I basically didn't go for the easiest way I described above, but use a map of all the normalized names instead so that already normalized osnames won't be normalized again. This should be a little faster at runtime and this should also be really easy to change to having these names stored in a properties file, in a later commit.

Benoît, would you have time to see whether this fixes the issue for you?
Richard, are you happy with the approach I took? 
If not I'm happy to change things...","14/Jun/14 06:19;bthiebault;Yes, it fixes the issue for me.

Maybe it is a good occasion to coordinate with https://issues.apache.org/jira/browse/FELIX-3883

Thanks both for your help anyway :-)","16/Jun/14 07:25;bosschaert;Thanks for confirming, Benoît.","16/Jun/14 15:25;rickhall;Looks good, David. Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gogo runtime does not advertise published services,FELIX-4533,12721043,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,13/Jun/14 06:38,17/Mar/15 07:05,14/Mar/19 02:48,13/Jun/14 10:17,gogo.runtime-0.12.0,,,,,,gogo.runtime-0.12.1,,,,,,,Gogo Runtime,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,399241,,,Fri Jun 13 10:17:37 UTC 2014,,,,,,0|i1wqa7:,399351,,,,,,,,13/Jun/14 10:17;gnt;https://svn.apache.org/viewvc?view=revision&revision=1602330,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in fileinstall,FELIX-4532,12720861,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,12/Jun/14 12:48,17/Mar/15 06:54,14/Mar/19 02:48,09/Sep/14 14:57,fileinstall-3.4.0,,,,,,fileinstall-3.4.2,,,,,,,File Install,,,,,,2,,,,,,"{code}
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:926)[:1.7.0_51]
	at java.util.HashMap$KeyIterator.next(HashMap.java:960)[:1.7.0_51]
	at org.apache.felix.fileinstall.internal.WatcherScanner.scan(WatcherScanner.java:70)[5:org.apache.felix.fileinstall:3.4.0]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:305)[5:org.apache.felix.fileinstall:3.4.0]
{code}",,,,,,,,,,KARAF-3213,,,,,,,,,,09/Sep/14 13:55;jbonofre;FELIX-4532.patch;https://issues.apache.org/jira/secure/attachment/12667418/FELIX-4532.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-07-28 07:39:47.62,,,no_permission,,,,,,,,,,,,399060,,,Tue Sep 09 14:57:42 UTC 2014,,,,,,0|i1wp7z:,399177,,,,,,,,"28/Jul/14 07:39;tuomas_kiviaho;Main difference between Scanner and WatcherScanner implementation is that the latter (which is a NIO2 implementation) has the following lines causing the problem above
37 Set<File> changed = new HashSet<File>();
70   for (File file : changed)
...
83        changed.remove(file);

This could be fixed as:
37 Set<File> changed = new ConcurrentHashSet<File>();
70   for (Iterator<File> iterator = changed.iterator(); iterator.hasNext();)
...
83        iterator.remove();

felix.fileinstall.disableNio2=true option could perhaps be used as workaround","25/Aug/14 22:35;krumpi;Though the felix.fileinstall.disableNio2=true is used by DirectoryWatcher it is never set upstream on FileInstall
It requires a modification of the Activator",09/Sep/14 12:19;jbonofre;I provided a patch fixing the problem. It would be great to have a SNAPSHOT and a release soon.,09/Sep/14 13:55;jbonofre;New patch using CopyOnWriteArrayList,"09/Sep/14 14:57;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M fileinstall/src/main/java/org/apache/felix/fileinstall/internal/WatcherScanner.java
Committed r1623838
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Null pointer in IPojoTask,FELIX-4531,12720705,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,dean.anderson,dean.anderson,11/Jun/14 21:29,12/Jun/14 13:57,14/Mar/19 02:48,12/Jun/14 13:57,,,,,,,,,,,,,,iPOJO,,,,,,0,,,,,,"Received a Null Pointer exception when trying to run ipojo task:
java.lang.NullPointerException
	at org.apache.felix.ipojo.task.IPojoTask.execute(IPojoTask.java:236)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:435)
	at org.apache.tools.ant.Target.performTasks(Target.java:456)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1393)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1248)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:441)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:435)
	at org.apache.tools.ant.Target.performTasks(Target.java:456)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1393)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1248)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:441)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:435)
	at org.apache.tools.ant.Target.performTasks(Target.java:456)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1393)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1248)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:441)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)
	at net.sf.antcontrib.logic.ForEach.executeSequential(ForEach.java:181)
	at net.sf.antcontrib.logic.ForEach.execute(ForEach.java:259)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:435)
	at org.apache.tools.ant.Target.performTasks(Target.java:456)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1393)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1364)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1248)
	at org.apache.tools.ant.Main.runBuild(Main.java:851)
	at org.apache.tools.ant.Main.startAnt(Main.java:235)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

The ant task definition is:
    <taskdef name=""ipojo"" classname=""org.apache.felix.ipojo.task.IPojoTask"">
        <classpath>
            <pathelement location=""${build_support.basedir}/ant-lib/felix/org.apache.felix.ipojo.ant-1.12.0.jar""/>
            <pathelement location=""${build_support.basedir}/ant-lib/felix/org.apache.felix.ipojo.annotations-1.12.0.jar""/>
        </classpath>
    </taskdef>


The actual target is:

    <target name=""ipojo"" if=""invoke.ipojobuild"" description=""Run Felix iPojo for OSGi deployment"" depends=""felix_bnd"">
        <ipojo
                input=""${build.jar.dir}/${jar.name}.jar""
                metadata=""${src.ipojo.dir}/metadata.xml""
                />
    </target>


The metadata.xml file is:

<ipojo>
<instance component=""com.healthsense.bundles.agent.impl.AgentImpl""/>
</ipojo>",Tried with ant 1.8.2 and 1.9.4 using org.apache.felix.ipojo.ant-1.12.0.jar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-12 13:54:08.168,,,no_permission,,,,,,,,,,,,398904,,,Thu Jun 12 13:57:11 UTC 2014,,,,,,0|i1wob3:,399026,,,,,,,,11/Jun/14 21:44;dean.anderson;I did just try this with version 1.11.0 and it works fine.,"12/Jun/14 13:54;clement.escoffier;The new Ant task requires a classpath or a classpath ref such as in:
https://github.com/apache/felix/blob/trunk/ipojo/runtime/distributions/ten-minutes-tutorial/src/main/skeleton/spell.english/build.xml (line 71).

This classpath is required to compute bytecode frames correctly.","12/Jun/14 13:57;dean.anderson;Thanks for the info, that fixes the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[SCR Plugin] Revisit setting the default output to target/classes,FELIX-4530,12720570,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,fmeschbe,fmeschbe,11/Jun/14 12:37,31/Jul/14 13:17,14/Mar/19 02:48,28/Jul/14 05:54,maven-scr-plugin 1.17.0,,,,,,maven-scr-plugin 1.19.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"With FELIX-4241 the default value for the descriptor output files has been set to {{target/classes}}. Unfortunately this causes {{target/classes}} to be added to the Maven Input Resources resulting in all contents of {{target/classes}} to be included in the final bundle regardless of whether this is actually desired or not.

Regardless of tooling integration noted in FELIX-4241, it is against the spirit of the bundle plugin to blindly include everything in {{target/classes}} in the bundle. So the resolution for FELIX-4241 must be revisited.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-11 15:36:18.895,,,no_permission,,,,,,,,,,,,398769,,,Mon Jul 28 09:46:24 UTC 2014,,,,,,0|i1wnhj:,398891,,,,,,,,"11/Jun/14 15:36;cziegeler;Ok, so it seems whatever default we pick, it might be wrong :)
I personally think having a default that works in the general case and also supports tooling, is the better one.
In the case where you don't want target/classes to be added to the resources, you could configure a different output directory and override the default.

We could maybe go with a more clever algorithm though:
if the output directory is already in the resources, we're fine - this should be the default.
If not, we don't add the full directory but just the created resources","13/Jun/14 15:55;sseifert@pro-vision.de;please note that the eclipse:eclipse project file generation is somewhat broken with all maven-scr-plugin version since 1.15.0 due to the changes from FELIX-4241.
see FELIX-4535 for details and a sample project, but i closed FELIX-4535 as a duplicate in favor to this ticket.","16/Jun/14 08:12;fmeschbe;[~cziegeler] It's about a default behaviour of the bundle plugin and how the SCR plugin interferes.

I am absolutely in favor of the SCR plugin adding the generated descriptors to the project resources. But this is just the manifests not the complete folder where they reside in.

If the only way to add the desciptors is to add the complete descriptor target folder, then using target/classes is not a good idea because then you loose all the fine tuning that the bundle plugin and bnd offer.

And maybe, it is the Sling tooling which should be more intelligent ?","16/Jun/14 17:03;cziegeler;It's not the Sling tooling, it's m2e; maybe there is a way around and this can be changed as well.","23/Jul/14 13:53;cziegeler;I've just committed a potential fix to the maven plugin - at least this fixes [~sseifert@pro-vision.de] problem (FELIX-4535).
With the change:
a) if the output directory of the plugin is not the classes directory, it is added to the maven resources (if not already) - this keeps the behaviour if a different output directory is configured
b) if the output directory is not the classes directory, it directly sets the Include-Resource directive for the bnd plugin and explicitely adds only the generated files
This should give us the best of all worlds in one setup.
I'll leave this open for some time to wait for potential feedback",28/Jul/14 09:46;sseifert@pro-vision.de;works - thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Substituted exports may cause IndexOutOfBoundsException,FELIX-4524,12716901,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,27/May/14 20:45,29/May/14 13:57,14/Mar/19 02:48,28/May/14 12:52,,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,"In some cases substituted exports can cause IndexOutOfBoundsException.  This can happen if you have a substituted export for which the exported capability is the only capability that can satisfy one or more other requirements.  For example:

BSN: A
Import-Package; substituted; version=""[1.0,1.1)""

BSN: B
Export-Package: substituted; version=1.0
Import-Package: substituted; version=1.0

BSN: C
Export-Package: substituted; version=1.1
Import-Package: substituted; version=1.1

Resolving A as a root resource will cause something like the following exception:

java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:635)
	at java.util.ArrayList.get(ArrayList.java:411)
	at org.apache.felix.resolver.ResolverImpl.calculatePackageSpaces(ResolverImpl.java:692)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:251)

",,,,,,,,,,,,,,,,,,,,27/May/14 21:10;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12646985/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-28 12:52:33.097,,,no_permission,,,,,,,,,,,,395109,,,Thu May 29 13:57:32 UTC 2014,,,,,,0|i1w10n:,395243,,,,,,,,"28/May/14 12:52;rickhall;I've applied the patch, please close if satisfied. Thanks!",29/May/14 13:57;tjwatson;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in URLHandlers when Felix.init and Felix.stop are called concurrently,FELIX-4523,12716643,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,plastic-karma,plastic-karma,26/May/14 13:16,30/Jul/14 07:16,14/Mar/19 02:48,09/Jul/14 09:58,framework-4.2.1,,,,,,framework-4.4.1,,,,,,,Framework,,,,,,0,,,,,,"From time to time we are experiencing a deadlock in the URLHandlers Class in Apache Felix. We are using Felix as an embedded OSGi Container and instantiate the Felix Framework via ServiceLoader and Framework Factory ourselves. The situation is as follows: When Felix.stop and Felix.init are called by different threads, eventually URLHandlers.unregisterFrameworkListsForContextSearch and URLHandlers.registerFrameworkInstance are called by the threads. There are two locks: m_frameworks and the Class Object of URL (URL.class). registerFrameworkInstance tries to aquire m_frameworks first and via the constructor of URLHanders URL.class after that. unregisterFrameworkListsForContextSearch tries to aquire URL.class first and m_frameworks after that. This is a classic deadlock situation. The situation arises in unittests where we frequently start and stop the felix framework. 

Stacktracke log:
{code}
Found one Java-level deadlock:
=============================
""FelixShutdown"":
  waiting to lock monitor 0x0000000000ff7710 (object 0x00000007ff33e7f0, a java.util.ArrayList),
  which is held by ""main""
""main"":
  waiting to lock monitor 0x00000000022c4a08 (object 0x0000000783b06b18, a java.lang.Class),
  which is held by ""FelixShutdown""

Java stack information for the threads listed above:
===================================================
""FelixShutdown"":
	at org.apache.felix.framework.URLHandlers.unregisterFrameworkListsForContextSearch(URLHandlers.java:315)
	- waiting to lock <0x00000007ff33e7f0> (a java.util.ArrayList)
	- locked <0x00000007ff33e840> (a java.util.HashMap)
	- locked <0x0000000783b06b18> (a java.lang.Class for java.net.URL)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.felix.framework.util.SecureAction.invoke(SecureAction.java:840)
	at org.apache.felix.framework.URLHandlers.unregisterFrameworkInstance(URLHandlers.java:635)
	at org.apache.felix.framework.URLHandlersActivator.stop(URLHandlersActivator.java:76)
	at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
	at org.apache.felix.framework.Felix$SystemBundleActivator.stop(Felix.java:4715)
	at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2530)
	at org.apache.felix.framework.Felix$2.run(Felix.java:959)
	at java.lang.Thread.run(Thread.java:724)
""main"":
	at org.apache.felix.framework.URLHandlers.<init>(URLHandlers.java:150)
	- waiting to lock <0x0000000783b06b18> (a java.lang.Class for java.net.URL)
	at org.apache.felix.framework.URLHandlers.registerFrameworkInstance(URLHandlers.java:600)
	- locked <0x00000007ff33e7f0> (a java.util.ArrayList)
	at org.apache.felix.framework.URLHandlersActivator.start(URLHandlersActivator.java:71)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix$SystemBundleActivator.start(Felix.java:4634)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.init(Felix.java:783)
{code}","linux, junittests",,,,,,,,,,,,,,,,,,,04/Jul/14 17:01;plastic-karma;ConcurrentTest.java;https://issues.apache.org/jira/secure/attachment/12654126/ConcurrentTest.java,24/Jun/14 14:54;karlpauls;urlhandlers-2.patch;https://issues.apache.org/jira/secure/attachment/12652203/urlhandlers-2.patch,24/Jun/14 10:44;karlpauls;urlhandlers.patch;https://issues.apache.org/jira/secure/attachment/12652177/urlhandlers.patch,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2014-06-24 10:44:54.701,,,no_permission,,,,,,,,,,,,394851,,,Wed Jul 09 09:58:25 UTC 2014,,,,,,0|i1vzfj:,394986,,,,,,,,24/Jun/14 10:44;karlpauls;Can you try the attached patch (against the current trunk) and see whether that fixes your issue? That would be great...,"24/Jun/14 12:19;plastic-karma;@[~karlpauls]: Thank you very much. It might take me a couple of days (to find time to do it), but I'm on it.",24/Jun/14 14:54;karlpauls;Updated patch.,"24/Jun/14 14:57;karlpauls;[~plastic-karma] cool. Please note, I uploaded a slightly modified patch (urlhandlers-2.patch). Please use that one for your testing. Looking forward to hear if it helps. Furthermore, if you manage to get this captured in reproducible test case that would be even better :-). ","26/Jun/14 10:21;bosschaert;FWIW I have also tried the patch and haven't found any issues. But... I haven't run it in a context where multiple frameworks are present, which I guess is where this thing really gets hammered.",03/Jul/14 12:55;karlpauls;[~plastic-karma] did you manage to take a look at his patch? We are moving towards cutting a new release and it be nice to know whether this patch does help or not....,03/Jul/14 14:47;plastic-karma;I tried reducing the problem to a simple unittest without success. I will have time on Monday to reproduce it with our test codebase. When is the new release coming?,"03/Jul/14 15:00;karlpauls;Well, this is the last issue we are waiting for - hence, if you can try it on Monday I'll wait until next week and see. If it takes you much longer I'll probably would do the release and we'd have to make this one part of the next release...","03/Jul/14 15:03;plastic-karma;Alright, apologies for the delay. What is the minimum result that you can work with? Do you need the unittest or would a simple ""yes, it fixes our problem"" be sufficient ?","03/Jul/14 15:36;plastic-karma;I added a first version of a ""unittest"" that resembles the deadlock behavior. It does not check anything (yet), but the testcase will be stuck in a deadlock. I hope this is useful to you already. I will check the patch with the test as well as our codebase until monday.","04/Jul/14 17:01;plastic-karma;I extended the test. The test fails, if there is a deadlock situation, however provoking a deadlock in a reproducible and predictable manner  is in this case rather difficult. (There also is the way of making the testcase more efficient by using the ThreadMXBean, but that basically means, implementing a full deadlock recognition)

While without the patch, the test ran into a deadlock about 3/4 of the runs, after the patch, I could not observe the deadlock anymore. So, the deadlock should be fixed. Looking forward to the new version :-)",09/Jul/14 09:58;karlpauls;I applied the patch to trunk. Will cut a new release asap.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BundleRevision for system extension has no capabilities,FELIX-4515,12713885,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,cziegeler,cziegeler,13/May/14 12:45,30/Jul/14 07:16,14/Mar/19 02:48,13/May/14 15:58,framework-4.4.0,,,,,,framework-4.4.1,,,,,,,Framework,,,,,,0,,,,,,"The BundleRevision for a system extension bundle has currently no capabilities. I think it should at least have the identity capability.
Currently BundleRevisionImpl explicitely sets the capabilites to an empty list for an extensions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-13 12:57:59.947,,,no_permission,,,,,,,,,,,,392198,,,Tue May 13 15:58:23 UTC 2014,,,,,,0|i1vjjj:,392391,,,,,,,,13/May/14 12:57;bosschaert;I'm wondering whether framework extenions could simply have the same type of capabilities as for any other fragment bundle. Would there be any problem with making framework extension bundles behave the same? In the end they are just a special type of fragment...,13/May/14 15:40;bosschaert;I'm having a look to see can I write a little unit test for this (and possibly provide a fix :),13/May/14 15:58;bosschaert;I've committed http://svn.apache.org/viewvc?view=revision&revision=1594257 which hopefully fixes the issue. The commit also contains a unit test to cover the case...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid wirings may result from substitutable exports,FELIX-4497,12710408,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,24/Apr/14 20:24,24/Apr/14 20:53,14/Mar/19 02:48,24/Apr/14 20:39,resolver-1.0.0,,,,,,resolver-1.2.0,,,,,,,,,,,,,0,,,,,,"FELIX-737 is a framework issue but the same issue also exists in the standalone resolver implementation.  I am opening a separate bug to specifically address the issue in the standalone resolver implementation.

The felix framework resolve has a known issue with substitutable exports FELIX-737.  The scenario is pretty complex.  It involves bundles multiple bundles that export and import the same package X at different versions and an importer that imports the package with a range that requires a specific package.  If that specific package gets substituted there are cases where the resolver will return wires to the substituted export.

The ideal solution would do something smart with selection of substituted exports so that different combinations or selections can be made if the first substitution did not provide good results.  This potentially will explode the permutations.  For now we should at least change the current permutation to drop the substituted exports so that invalid wires do not get created.  That could drop some good valid combinations, but that is better than the current state where completely invalid wires get created.",,,,,,,,,,,,,,,,,,,,24/Apr/14 20:36;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12641795/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-24 20:39:42.903,,,no_permission,,,,,,,,,,,,388730,,,Thu Apr 24 20:53:21 UTC 2014,,,,,,0|i1uymf:,388980,,,,,,,,"24/Apr/14 20:36;tjwatson;This patch takes an approach that uses two steps:

1) During the prepare phase (end of populate phase) establish a table of Capability->Requirement that maps each capability to the requirement that potentially could be used to substitute the capability

2) For each permutation: check for substitutes.  If substitutes are found then A) create a new permutation that selects the next candidate for the substitution requirement and B) for the existing permutation remove the substituted capability as the candidate","24/Apr/14 20:39;rickhall;Applied patch, please close if satisfied. Thanks.",24/Apr/14 20:53;tjwatson;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Candidates from already resolved fragments get ignored if no new hosts are available,FELIX-4495,12710375,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,tjwatson,tjwatson,24/Apr/14 17:34,16/Oct/15 16:46,14/Mar/19 02:48,17/Mar/15 09:43,resolver-1.0.0,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,"org.apache.felix.resolver.Candidates.populateResource(ResolveContext, Resource) gets called for fragments even if they are already resolved so that we can attach them to more hosts as needed.

The issue is that this method will throw a ResolutionException if the fragment cannot attach to any new hosts during the current resolve process.  This has the effect of removing any candidate capabilities provided by already resolved fragments.",,,,,,,,,,,,,,,,FELIX-4525,,,,24/Apr/14 19:56;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12641785/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-24 19:58:30.208,,,no_permission,,,,,,,,,,,,388697,,,Mon Mar 23 15:28:06 UTC 2015,,,,,,0|i1uyfb:,388948,,,,,,,,24/Apr/14 19:56;tjwatson;Fixed by checking that the resource is a fragment and already resolved before failing populateResource for a fragment.,"24/Apr/14 19:58;rickhall;I applied the patch, please close if satisfied. Thanks.",24/Apr/14 20:54;tjwatson;Thanks!,"12/Mar/15 15:29;gnt;This issue is causing me a NPE when asking the resolver to resolve a single resource which is an already resolved fragment.

[~tjwatson] How do you use the resolver in such a case ?

{code}
java.lang.NullPointerException
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:266)[org.apache.felix.framework-4.9.0-SNAPSHOT.jar:]
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:431)[org.apache.felix.framework-4.9.0-SNAPSHOT.jar:]
	at org.apache.felix.framework.Felix.resolveBundles(Felix.java:4053)[org.apache.felix.framework-4.9.0-SNAPSHOT.jar:]
	at org.apache.felix.framework.FrameworkWiringImpl.resolveBundles(FrameworkWiringImpl.java:133)[org.apache.felix.framework-4.9.0-SNAPSHOT.jar:]
	at org.apache.karaf.bundle.command.Resolve.doExecute(Resolve.java:32)[12:org.apache.karaf.bundle.core:4.0.0.SNAPSHOT]
	at org.apache.karaf.bundle.command.BundlesCommand.execute(BundlesCommand.java:54)[12:org.apache.karaf.bundle.core:4.0.0.SNAPSHOT]
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:83)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:67)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:87)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at org.apache.karaf.shell.impl.console.ConsoleSessionImpl.run(ConsoleSessionImpl.java:267)[28:org.apache.karaf.shell.core:4.0.0.SNAPSHOT]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
{code}","13/Mar/15 07:56;gnt;Proposed patch at
   https://github.com/gnodet/felix/commit/da52e3b94c67060d19198506cd13f3480bc3bc31",17/Mar/15 09:43;gnt;https://github.com/apache/felix/commit/d17068b666e8d3f7a6db49fa1db0386a2d8308bc,23/Mar/15 15:05;tjwatson;I don't think I ask the resolver to resolve and already resolved fragment.,23/Mar/15 15:09;tjwatson;Not sure what you are trying to do by resolving an already resolved fragment.  I use org.apache.felix.resolver.FelixResolveContext.getOndemandResources(Resource) to attach fragments as new hosts come in.,"23/Mar/15 15:28;gnt;I'm not really trying to do anything.
It's just that this is a valid call to the FrameworkBundleWiring coming from karaf commands : we have a command to resolve bundles, and if I use it specifying a single bundle, which is an already attached fragment, it leads to the NPE i pasted above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fragment identity capabilities are incorrectly wrapped,FELIX-4494,12710368,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,24/Apr/14 17:11,24/Apr/14 19:54,14/Mar/19 02:48,24/Apr/14 19:48,resolver-1.0.0,,,,,,resolver-1.2.0,,,,,,,,,,,,,0,,,,,,"The osgi.identity capability is not a payload capability for a fragment.  We must never wrap them as if they are payloads for the hosts they are attached to.

The Cadidates.processCandidates method is currently wrapping all capabilities from a fragment.  Also the Candidates code makes the incorrect assumption that a a fragment wiring only has required wires in the osgi.wiring.host namespace.  This is not true since osgi.ee namespace is also not a payload requirement.",,,,,,,,,,,,,,,,,,,,24/Apr/14 19:46;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12641782/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-24 19:48:59.327,,,no_permission,,,,,,,,,,,,388690,,,Thu Apr 24 19:54:30 UTC 2014,,,,,,0|i1uydr:,388941,,,,,,,,24/Apr/14 19:46;tjwatson;Fix to avoid wrapping osgi.identity capability and to iterate correctly over osgi.wiring.host wires only.,"24/Apr/14 19:48;rickhall;I've applied the patch, please close if satisfied. Thanks.",24/Apr/14 19:54;tjwatson;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceProcessors should be optional for processed resources,FELIX-4491,12710280,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,24/Apr/14 10:19,16/Jan/16 15:03,14/Mar/19 02:48,05/Dec/14 09:21,,,,,,,deploymentadmin-0.9.8,,,,,,,Deployment Admin,,,,,,0,,,,,,"OSGi R4.2 compendium, section 114.3.4.9 states that resource processors are optional to allow a DP to carry resources that are not processed, such as documentation or license files. Currently, the DA mandates that all non-bundle resources have a resource processor defined.",,,,,,,,,,,,,,FELIX-4516,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,388602,,,Fri Dec 05 09:21:39 UTC 2014,,,,,,0|i1uxu7:,388853,,,,,,,,05/Dec/14 09:21;jajans;Fixed in rev #1643202.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Jetty] Ignore empty (string) entries in configuration arrays,FELIX-4489,12708768,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,fmeschbe,fmeschbe,16/Apr/14 14:08,13/Jun/14 09:24,14/Mar/19 02:48,16/May/14 07:02,http-2.2.2,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"When configuring the Jetty Service through the Web Console, the enabled and disabled cipher suites properties might become single-entry lists of empty strings. For cipher suite enablement this essentially means that no suites are actually enabled at all.

When configuring the cipher suites such empty entries should in fact be removed from the list and if the list becomes empty, no explicit configuration should be used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-16 07:02:15.487,,,no_permission,,,,,,,,,,,,387091,,,Fri May 16 07:02:15 UTC 2014,,,,,,0|i1uolj:,387354,,,,,,,,16/May/14 07:02;cziegeler;I'Ve added some code to filter out empty values in rev 1595125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible thread leakage in DA,FELIX-4486,12708148,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,13/Apr/14 15:52,16/Jan/16 15:03,14/Mar/19 02:48,15/Apr/14 15:46,,,,,,,deploymentadmin-0.9.8,,,,,,,Deployment Admin,,,,,,0,,,,,,"When the DA starts the installation of a DP, it will start a thread to copy the contents of the input stream to persist the DP while installing it. When the installation fails before anything is actually installed, this thread is not properly closed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,386471,,,Tue Apr 15 15:46:55 UTC 2014,,,,,,0|i1uks7:,386735,,,,,,,,"15/Apr/14 15:46;jajans;Replaced the ExplodingOutputtingInputStream with a simpler ContentCopyingJarInputStream that leverages the JarInputStream API to create copies of its entries on the fly.

See revs #1587613, 1587618 & 1587621.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect version of exported API,FELIX-4485,12708139,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,13/Apr/14 13:28,16/Jan/16 15:03,14/Mar/19 02:48,15/Apr/14 15:54,,,,,,,deploymentadmin-0.9.8,,,,,,,Deployment Admin,,,,,,0,,,,,,"DA currently exposes its service API as 1.0, while it should be version 1.1 (see Compendium 4.2, 114).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,386462,,,Tue Apr 15 15:54:53 UTC 2014,,,,,,0|i1ukq7:,386726,,,,,,,,15/Apr/14 15:54;jajans;Fixed in rev #1587623.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
uninstall incorrectly marks a DP as stale when its uninstallation fails,FELIX-4484,12708138,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,13/Apr/14 13:25,16/Jan/16 15:03,14/Mar/19 02:48,15/Apr/14 09:37,,,,,,,deploymentadmin-0.9.8,,,,,,,Deployment Admin,,,,,,0,,,,,,"When trying to uninstall a DP that causes a failure (and thus a rollback), the DP itself is still marked as ""stale"" causing it to remain present in the DA and no way to force its uninstallation. This is not correct according to the spec, see Compendium 4.2, 114.9, last three paragraphs.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,386461,,,Tue Apr 15 09:37:59 UTC 2014,,,,,,0|i1ukpz:,386725,,,,,,,,15/Apr/14 09:37;jajans;Fixed in rev #1587490.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
osgi-bundlecontext is not available in init methods,FELIX-4483,12708073,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,bobpaulin,bobpaulin,12/Apr/14 03:45,13/Jun/14 09:25,14/Mar/19 02:48,15/Apr/14 16:02,,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"This current ordering in the JettyService#doExecute method does not allow the osgi-bundlecontext to be available in Servlet and Filter init classes:

1) Get Bundle
2) Start WebAppBundleContext
3) Create Service Properties
4) Register Service
5) Set osgi-bundlecontext Servlet Context

Propose changing it to the following order to allow for the context to be used:

1) Get Bundle
*2) Set osgi-bundlecontext Servlet Context*
3) Start WebAppBundleContext
4) Create Service Properties
5) Register Service it in the
",,,,,,,,,,,,,,,,,,,,12/Apr/14 03:54;bobpaulin;FELIX-4483.patch;https://issues.apache.org/jira/secure/attachment/12639916/FELIX-4483.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-15 16:02:29.333,,,no_permission,,,,,,,,,,,,386396,,,Tue Apr 15 16:02:29 UTC 2014,,,,,,0|i1ukbr:,386661,,,,,,,,12/Apr/14 03:48;bobpaulin;Patch and Integration Test included.,15/Apr/14 16:02;jajans;Thanks for the patch! Applied in rev #1587624.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Various concurrency issues in fileinstall,FELIX-4472,12705540,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,30/Mar/14 13:58,17/Mar/15 06:55,14/Mar/19 02:48,31/Mar/14 16:15,fileinstall-3.2.8,,,,,,fileinstall-3.4.0,,,,,,,File Install,,,,,,0,,,,,,"Here an exception that can happen:
{code}
2014-03-30 15:39:36,058 | ERROR | Thread-11        | fileinstall                      | 6 - org.apache.felix.fileinstall - 3.2.8 | Failed to install artifact: /Users/gnodet/work/git/karaf3x/assemblies/apache-karaf-minimal/target/apache-karaf-minimal-4.0.0-SNAPSHOT/etc/org.apache.karaf.command.acl.bundle.cfg
java.lang.IllegalStateException: Configuration Admin service has been unregistered
	at org.apache.felix.cm.impl.ConfigurationAdminImpl.getConfigurationManager(ConfigurationAdminImpl.java:300)[5:org.apache.felix.configadmin:1.8.0]
	at org.apache.felix.cm.impl.ConfigurationAdminImpl.listConfigurations(ConfigurationAdminImpl.java:179)[5:org.apache.felix.configadmin:1.8.0]
	at org.apache.felix.fileinstall.internal.ConfigInstaller.findExistingConfiguration(ConfigInstaller.java:346)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.ConfigInstaller.getConfiguration(ConfigInstaller.java:320)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.ConfigInstaller.setConfig(ConfigInstaller.java:245)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.ConfigInstaller.install(ConfigInstaller.java:84)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:945)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:873)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:499)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.start(DirectoryWatcher.java:236)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.FileInstall.updated(FileInstall.java:239)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.fileinstall.internal.FileInstall.start(FileInstall.java:125)[6:org.apache.felix.fileinstall:3.2.8]
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.karaf.bundle.command.LoadTest$1.run(LoadTest.java:129)[35:org.apache.karaf.bundle.command:4.0.0.SNAPSHOT]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,383869,,,Mon Mar 31 16:15:34 UTC 2014,,,,,,0|i1u4sn:,384137,,,,,,,,31/Mar/14 16:15;gnt;https://svn.apache.org/viewvc?view=revision&revision=1583364,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing license headers for several source files,FELIX-4471,12703974,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,27/Mar/14 13:37,01/Apr/14 12:45,14/Mar/19 02:48,27/Mar/14 13:39,,,,,,,deploymentadmin-0.9.6,,,,,,,Deployment Admin,,,,,,0,,,,,,"Running the RAT tool on DeploymentAdmin and AutoConf reveals several files that are missing a license header/footer.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,382308,,,Thu Mar 27 13:39:15 UTC 2014,,,,,,0|i1tv6n:,382579,,,,,,,,27/Mar/14 13:39;jajans;Fixed in rev #1582297.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"shell command ""scr help"" does not work without parameter",FELIX-4469,12703780,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,VincentG,VincentG,26/Mar/14 18:22,11/Aug/15 05:09,14/Mar/19 02:48,27/Apr/14 07:01,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Using shell command line with fix of FELIX-4447,

""scr help"" returns :
java.lang.NullPointerException
        at org.apache.felix.scr.impl.ScrShellCommand.help(ScrShellCommand.java:116)
        at org.apache.felix.scr.impl.ScrShellCommand.execute(ScrShellCommand.java:75)
        at org.apache.felix.shell.impl.Activator$ShellServiceImpl.executeCommand(Activator.java:249)
        at org.apache.felix.shell.remote.Shell.startFelixShell(Shell.java:162)
        at org.apache.felix.shell.remote.Shell.run(Shell.java:86)
        at java.lang.Thread.run(Thread.java:722)

The code of ""void help()"" is not expecting ""command"" to be null.

Intead of :
         if (command.equals(LIST_CMD))
you should write :
        if (LIST_CMD.equals(command))


Workaround : type anything after ""scr help"" (example ""scr help zzz"").
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-27 07:01:11.967,,,no_permission,,,,,,,,,,,,382114,,,Sun Apr 27 07:01:11 UTC 2014,,,,,,0|i1tu0f:,382389,,,,,,,,27/Apr/14 07:01;djencks;Should be fixed in rev. 1590351,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"EventObject is created with null pointer : ""null source""",FELIX-4468,12703756,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,VincentG,VincentG,26/Mar/14 17:23,31/Aug/15 05:14,14/Mar/19 02:48,19/Aug/15 14:54,framework-4.2.1,framework-4.4.0,scr-1.8.2,,,,framework-5.2.0,,,,,,,Framework,,,,,,0,,,,,,"""java.util.EventObject"" should not be created with null pointer. As a result, the real cause of the error is masked.

java.lang.IllegalArgumentException: null source
        at java.util.EventObject.<init>(EventObject.java:56)
        at org.osgi.framework.FrameworkEvent.<init>(FrameworkEvent.java:196)
        at org.apache.felix.framework.Felix.fireFrameworkEvent(Felix.java:4392)
        at org.apache.felix.framework.Felix.getService(Felix.java:3572)
        at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
        at org.osgi.util.tracker.ServiceTracker.addingService(ServiceTracker.java:411)
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932)
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864)
        at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
        at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
        at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:317)
        at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:107)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:258)
        at org.apache.felix.scr.impl.Activator.access$000(Activator.java:45)
        at org.apache.felix.scr.impl.Activator$ScrExtension.start(Activator.java:185)
        at org.apache.felix.utils.extender.AbstractExtender.createExtension(AbstractExtender.java:259)
        at org.apache.felix.utils.extender.AbstractExtender.modifiedBundle(AbstractExtender.java:232)
        at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:479)
        at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:414)
        at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:232)
        at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:443)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:722)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-17 06:03:22.825,,,no_permission,,,,,,,,,,,,382090,,,Wed Aug 19 14:54:21 UTC 2015,,,,,,0|i1ttv3:,382365,,,,,,,,"17/Apr/14 06:03;djencks;This appears to be a framework problem, if you call context.getService(ServiceReference) on a service reference that has been unregistered.  The code in Felix is

    <S> S getService(Bundle bundle, ServiceReference<S> ref)
    {
        try
        {
            return (S) m_registry.getService(bundle, ref);
        }
        catch (ServiceException ex)
        {
            fireFrameworkEvent(FrameworkEvent.ERROR, ref.getBundle(), ex);
        }

        return null;
    }
and if ref is unregistered then ref.getBundle() must return null.  Could we use the ref as the source instead of the missing bundle in this case?","19/Aug/15 14:54;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	framework/src/main/java/org/apache/felix/framework/Felix.java
Committed r1696606
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Option to use system bundle context for tracking bundles,FELIX-4467,12703562,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,tjwatson,tjwatson,25/Mar/14 19:32,11/Aug/15 05:09,14/Mar/19 02:48,21/Jul/15 18:13,,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"My understanding is that the SCR implementation bundle uses its own bundle context to track bundles that contain service components.  A majority of the time this is the correct thing to do.

In environments that use an isolation engine there may be scenarios where the SCR bundle context does not have visibility to all the bundles it should be extending.  For example, OSGi Subsystems or Equinox regions.  In such scenarios it may be desirable to install a single implementation of SCR which has the ability to extend all bundles installed in the framework regardless of what subsystem or region the extendee bundle is installed.

One way to accomplish this is to use the system bundle context to track bundle to extend.  SCR still needs to use the extendee context in order interact with the service registry on behalf of the extendee bundle (e.g. listen for service registrations, get services etc.).

If we do this there should probably be an option to enable using the system.bundle context and the default behavior is to still use the context of the SCR bundle",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-17 05:48:33.988,,,no_permission,,,,,,,,,,,,381896,,,Tue Jul 21 18:13:51 UTC 2015,,,,,,0|i1tsof:,382171,,,,,,,,"17/Apr/14 05:48;djencks;My initial implementation assumes that you aren't likely to change this setting while ds is running, so if you do it shuts down all ds components and starts over.  Anyone object?",27/Apr/14 07:01;djencks;Initial implementation rev 1590350.  Have not yet tested it with isolation.,28/Oct/14 16:17;djencks;There are some concurrency problems with the initial implementation when a configuration for DS is supplied.,21/Jul/15 07:58;cziegeler;[~djencks] Is there anything to be done for a first release?,21/Jul/15 18:13;djencks;The concurrency issues mentioned were dealt with in https://issues.apache.org/jira/browse/FELIX-4753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deployment Admin does not always fire events,FELIX-4466,12703484,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,25/Mar/14 15:02,01/Apr/14 12:45,14/Mar/19 02:48,25/Mar/14 15:30,,,,,,,deploymentadmin-0.9.6,,,,,,,Deployment Admin,,,,,,0,,,,,,"The deployment admin does only send events in case of successful installation/uninstallation. However, it should always send an event even in case of failures.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,381819,,,Tue Mar 25 15:30:24 UTC 2014,,,,,,0|i1ts7b:,382094,,,,,,,,25/Mar/14 15:30;jajans;Fixed in rev #1581373.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DA does not consistently handle non-unique resources,FELIX-4463,12703439,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,25/Mar/14 12:12,01/Apr/14 12:45,14/Mar/19 02:48,25/Mar/14 12:20,,,,,,,deploymentadmin-0.9.6,,,,,,,Deployment Admin,,,,,,0,,,,,,"When trying to install a DP containing two bundles that are not unique (= same BSN, different versions) will cause the DA to throw an exception, this is correct as resources need to be unique in context of a DP.
However, when trying to install a DP containing two bundles that are not unique but where one of those bundles is already installed on the system does *not* cause the DA to throw an exception. This is because the DA currently assumes that the already installed bundle is present for ""reference only"" and ignores it during the installation, but will upgrade it once its finds the new version. So, although the DP was incorrect, the result of its installation is correct.

The expected result is: DA should always fail when a DP contains non-unique resources.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,381774,,,Tue Mar 25 12:20:21 UTC 2014,,,,,,0|i1trxb:,382049,,,,,,,,25/Mar/14 12:20;jajans;Solved in rev #1581302.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader deadlock in Java6 between two bundles,FELIX-4462,12702388,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,egli,egli,19/Mar/14 14:36,19/Mar/14 16:23,14/Mar/19 02:48,19/Mar/14 16:23,framework-4.2.1,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,"As discussed on the user list ([0]) there is a deadlock in Java 6 (if bug 4670071 [2] is not fixed). The problem is the hidden, implicit ClassLoader.loadClassInternal which is is synchronized(this) in that case. 

Consider the following scenario:
 * bundle 2 wants to load a class of bundle 1 - hence is not synchronized with bundle 1's classloader - thus uses the m_classLocks locking mechanism to lock bundle 1's classloader for the particular class being loaded. Then calls defineClass (with bundle 1's classloader)
 * before it can do so, bundle 1 wants to load the same class (of bundle 1) - hence does a synchronized loadClassInternal. then reaches the m_classLocks locking mechanism and notices that there's another thread loading the class

-> this results in the deadlock reported.

There's multiple fixes for this:
 * use Java 7
 * use -XX:+UnlockDiagnosticVMOptions -XX:+UnsyncloadClass
 * create a special Java 6 classloader (Java 7 would use the current one) which does a plain synchronized findClass() - and replaces all synchronized(m_classLocks) with synchronized(this)

[0] http://markmail.org/thread/crwqzqobxgob7q3n
[1] http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4670071","MacOS 10.7.5, java version ""1.6.0_65"", Java(TM) SE Runtime Environment (build 1.6.0_65-b14-462-11M4609), Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-462, mixed mode)",,,,,,,,,,,,,,,,,,,19/Mar/14 15:23;rickhall;FELIX-4462.txt;https://issues.apache.org/jira/secure/attachment/12635556/FELIX-4462.txt,19/Mar/14 15:24;egli;classLockMonitor.FELIX-4462.patch2;https://issues.apache.org/jira/secure/attachment/12635557/classLockMonitor.FELIX-4462.patch2,19/Mar/14 14:44;egli;suggested.synchronized.FELIX-4462.patch;https://issues.apache.org/jira/secure/attachment/12635552/suggested.synchronized.FELIX-4462.patch,19/Mar/14 14:39;egli;test.reproducingFELIX-4462.patch;https://issues.apache.org/jira/secure/attachment/12635551/test.reproducingFELIX-4462.patch,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2014-03-19 15:23:12.76,,,no_permission,,,,,,,,,,,,380727,,,Wed Mar 19 15:58:46 UTC 2014,,,,,,0|i1tliv:,381006,,,,,,,,"19/Mar/14 14:39;egli;Adding a patch which contains a test (Java6DeadlockTest) that reproduces the deadlock. I had a problem reproducing it via maven (mvn clean test), there is succeeds, but when running it in Eclipse it indeed reproduces the deadlock. When running it in Eclipse with '-XX:+UnlockDiagnosticVMOptions -XX:+UnsyncloadClass' it succeeds.",19/Mar/14 14:44;egli;Attached the synchronized findClass as mentioned in the description of this ticket. This would fix the deadlock encountered - but prevents parallel classloading for Java 7 onwards. So maybe there's a better solution...,"19/Mar/14 15:23;rickhall;I've attached a patch that tries to determine if we are using a parallel class loader or not. If so, it uses the class locks list as the lock object, if not, it uses the class loader itself as the lock object.

Please test this patch and see if it works. Thanks.",19/Mar/14 15:24;egli;Attached a patch which replaces the synchronization monitor of m_classLocks to this. With this fix the Java6DeadlockTest succeeds.,"19/Mar/14 15:28;egli;[~rickhall], yes, with your patch Java6DeadlockTest succeeds.","19/Mar/14 15:51;rickhall;Ok, great. I've applied the fix, so please close this issue if satisfied. Thanks.",19/Mar/14 15:58;egli;Thanks! Test works fine with the fix now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad HTTPS settings render Jetty inaccessible,FELIX-4460,12701738,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,dpfister,dpfister,16/Mar/14 13:15,13/Jun/14 09:23,14/Mar/19 02:48,20/Mar/14 21:03,http-2.2.2,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"Entering some bad values for the HTTPS configuration prevents the complete Jetty server startup. This looks like a regression of upgrading Jetty to version 7. 

The current implementation initializes all enabled connectors, adds them to the server and then starts the server which in turn starts all connectors. If one of them fails to start, the complete server startup fails and the Jetty Bridge is no longer accessible via HTTP.

I suggest to initialize an additional HTTPS connector only after having started the server, so at least HTTP stays available if enabled.

 ",,,,,,,,,,,,,,,,,,,,16/Mar/14 13:19;dpfister;patch.txt;https://issues.apache.org/jira/secure/attachment/12634975/patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-20 20:38:07.973,,,no_permission,,,,,,,,,,,,380083,,,Fri Mar 21 17:14:53 UTC 2014,,,,,,0|i1thlr:,380367,,,,,,,,16/Mar/14 13:19;dpfister;Patch to initialize auxiliary HTTPS connector only after having started the server.,"20/Mar/14 20:38;fmeschbe;Thanks for providing the patch. I actually took a different route: The server will be started at first and then the connectors will be started one after the other. Any connector not being able to start will prevent the other connector from starting. If neither connector can be started, the Jetty server itself is stopped again.","20/Mar/14 21:03;fmeschbe;Fixed in Rev. 1579733 & 1579739:

* Start connectors individually after the server start
* Stop the server if no connector can be started","21/Mar/14 17:14;dpfister;Looks good, thank you for fixing this!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.felix.utils.properties will save key=value on top of comments if the original properties file are all comments,FELIX-4457,12701175,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,ffang,ffang,ffang,13/Mar/14 07:17,21/Mar/15 09:54,14/Mar/19 02:48,20/Mar/15 03:00,,,,,,,utils-1.8.0,,,,,,,Utils,,,,,,0,,,,,,"for example if the properties file looks like
{code}
#
# just a comment
#
{code}
then if we add a property into this file and save it we get something like
{code}
key1 = value1
#
# just a comment
#
{code}

we should get
{code}
#
# just a comment
#
key1 = value1
{code}
instead",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,379521,,,Fri Mar 14 08:34:56 UTC 2014,,,,,,0|i1te6v:,379812,,,,,,,,"14/Mar/14 08:34;ffang;commit fix
http://svn.apache.org/r1577060",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
openConnection().getContentLengthLong() always returns -1 for bundle URLs on Java7,FELIX-4456,12701127,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,mcculls,mcculls,12/Mar/14 23:11,31/Aug/15 05:15,14/Mar/19 02:48,19/Aug/15 14:47,framework-4.2.1,,,,,,framework-5.2.0,,,,,,,Framework,,,,,,0,,,,,,"Java7 introduced a new method to URLConnection called getContentLengthLong. Felix's URLHandlersBundleURLConnection only overrides getContentLength, so the default getContentLengthLong implementation is left in place and always returns -1 for 'bundle' URLs when running Felix on Java7.

The client-side workaround is to fall-back to getContentLength whenever getContentLengthLong returns -1, but it would be great if this could be fixed in a future framework release.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-19 14:47:15.046,,,no_permission,,,,,,,,,,,,379473,,,Wed Aug 19 14:47:15 UTC 2015,,,,,,0|i1tdw7:,379764,,,,,,,,"19/Aug/15 14:47;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	framework/src/main/java/org/apache/felix/framework/URLHandlersBundleURLConnection.java
Committed r1696598
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Introduce manipulator BOM (Bill of Material),FELIX-4453,12699789,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,sauthieg,sauthieg,sauthieg,10/Mar/14 14:49,10/Mar/14 18:51,14/Mar/19 02:48,10/Mar/14 18:51,,,,,,,ipojo-manipulator-1.11.2,,,,,,,iPOJO,,,,,,0,,,,,,This is useful to keep dependency versions synchronized,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,378135,,,2014-03-10 14:49:23.0,,,,,,0|i1t5nz:,378427,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.felix.http.bundle jetty dependency problem,FELIX-4452,12699764,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,bosschaert,bosschaert,10/Mar/14 11:39,27/Feb/18 14:43,14/Mar/19 02:48,27/Feb/18 14:43,http-2.3.0,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"In the current trunk, the org.apache.felix.http.bundle bundle contains an inconsistency in its manifest which means it cannot resolve wrt to a package that it exports itself.

The problem centres around this package:
  org.eclipse.jetty.continuation
The package is embedded in the bundle and exported in version 8.1.14. However the package is imported in the version range [7.6,8) which means that the import doesn't resolve against its own export.

I did a little bit of digging and found that the import range stems from a transitive dependency of the org.apache.felix.http.cometd component, which has as part of its dependency tree:
[INFO] org.apache.felix:org.apache.felix.http.cometd:jar:2.3.0-SNAPSHOT
[INFO] ...
[INFO] +- org.eclipse.jetty:jetty-util:jar:8.1.14.v20131031:compile
[INFO] +- org.cometd.java:cometd-java-server:jar:2.8.0:compile
[INFO] |  +- org.eclipse.jetty:jetty-continuation:jar:7.6.14.v20131031:compile

As you can see, the direct dependency on Jetty is in version 8.1.14, but the transitive one coming in from cometd is in 7.6.x.

As it's not a good idea to mix versions of the same dependency for a single component, I looked for a newer version of org.cometd.java to see if it could work with 8.1.14. I found that cometd 3 has an import range of [7.6, 9), so they have updated it there, but cometd 3 is currently unreleased. ",,,,,,,,,,,,,,,,,,,,10/Mar/14 11:43;bosschaert;felix-4452.diff;https://issues.apache.org/jira/secure/attachment/12633677/felix-4452.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-10 13:11:16.591,,,no_permission,,,,,,,,,,,,378110,,,Mon Mar 10 13:45:08 UTC 2014,,,,,,0|i1t5if:,378402,,,,,,,,"10/Mar/14 11:43;bosschaert;From the import range in cometd 3 I'm learning that Jetty 8 is actually backward compatible with Jetty 7.6. As they have such a wide version range [7.6, 9). So we should be able to use version 8.1.14 too with the current version of comet (2.8.0). 

Therefore the attached patch overrides the Jetty transitive dependencies of cometd and replaces them with the versions used elsewhere in the Felix http component (= 8.1.14).

Not sure whether this is the best way to solve it, so therefore a patch rather than a direct commit :)","10/Mar/14 12:06;bosschaert;I'm just noticing that with my proposed changes the bundle resolves, but starting it doesn't start the Http endpoint...","10/Mar/14 13:11;jajans;The all-in-one bundle is by default configured to run in ""bridged"" mode and you need to explicitly enable its embedded Jetty server. Did you add {{-Dorg.apache.felix.http.jettyEnabled=true}} (and/or {{-Dorg.apache.felix.http.whiteboardEnabled=true}} to your test(app)? 

I've seen another issue in the bundle manifest of the all-in-one bundle (the HTTP API isn't correctly versioned), mind if I apply your patch and commit it?","10/Mar/14 13:27;bosschaert;Ah, thanks for explaining. I didn't find that difference in the docs... 
Yes, feel free to go ahead and apply the patch!

Thanks :)",10/Mar/14 13:45;jajans;Applied the patch and fixed a typo in the all-in-one bundle export clause. See rev #1575941.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpContext#getResource is called with a relative path,FELIX-4451,12699686,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,09/Mar/14 10:54,28/Feb/15 03:05,14/Mar/19 02:48,28/Feb/15 03:05,http-2.3.0,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"When a resource is registered through the HttpService with an HttpContext, the getResource() method is called with a relative path, stripping off the leading slash, e.g.
httpService.registerResources(""/foo"", ""/foo"", myContext)

If /foo/a is requested myContext.getResource(""foo/a"") is called.

The leading slash should not be removed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,378033,,,Sun Mar 09 11:03:02 UTC 2014,,,,,,0|i1t51b:,378325,,,,,,,,"09/Mar/14 11:03;cziegeler;Fixed in trunk, I also had to fix the test case which was working on this wrong assumption
Reference: Table 102.1 in the OSGi Compendium Spec (chapter 102.4)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The ConfigurationListener list contains duplicates and fires update on unchanged configurations,FELIX-4449,12699362,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,07/Mar/14 08:22,12/Mar/14 08:23,14/Mar/19 02:48,12/Mar/14 08:16,ipojo-runtime-1.11.0,,,,,,ipojo-runtime-1.11.2,,,,,,,iPOJO,,,,,,0,,,,,,"The configuration handler holds a list of configuration listeners. This list should not contain duplicates.

In addition, these listeners should not be notified when when there are no change in the reconfiguration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,377709,,,Wed Mar 12 08:23:45 UTC 2014,,,,,,0|i1t31j:,378001,,,,,,,,12/Mar/14 08:16;clement.escoffier;Fixed in 1.11.2,12/Mar/14 08:23;clement.escoffier;iPOJO Runtime and Manipulator 1.11.2 release process has started.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid dynamism management when an interceptor implements both Tracking and Ranking interceptors,FELIX-4448,12699360,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,07/Mar/14 08:18,12/Mar/14 08:23,14/Mar/19 02:48,12/Mar/14 08:16,ipojo-runtime-1.11.0,,,,,,ipojo-runtime-1.11.2,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,377707,,,Wed Mar 12 08:23:45 UTC 2014,,,,,,0|i1t313:,377999,,,,,,,,12/Mar/14 08:16;clement.escoffier;Fixed in 1.11.2,12/Mar/14 08:23;clement.escoffier;iPOJO Runtime and Manipulator 1.11.2 release process has started.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression in ScrShellCommand (NPE caused by falsy regex),FELIX-4447,12699175,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,olivier.fayau,olivier.fayau,06/Mar/14 15:39,20/Sep/17 19:01,14/Mar/19 02:48,06/Aug/14 02:28,scr-1.8.0,scr-1.8.2,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),Script Console Plugin,,,,,0,easyfix,,,,,"Using felix console and DS (scr + shell +shell tui), the command scr doesn't work anymore.

Sample : 
scr list
-> Unable to execute command: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.scr.impl.ScrShellCommand.help(ScrShellCommand.java:116)
	at org.apache.felix.scr.impl.ScrShellCommand.execute(ScrShellCommand.java:75)
	at org.apache.felix.shell.impl.Activator$ShellServiceImpl.executeCommand(Activator.java:249)
	at org.apache.felix.shell.tui.Activator$ShellTuiRunnable.run(Activator.java:184)
	at java.lang.Thread.run(Unknown Source)


Looking at source code, in ScrShellCommand.execute(), command is splitted by the falsy regex ""//s"".
This should be ""\\s+"" instead.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-10 19:35:06.44,,,no_permission,,,,,,,,,,,,377522,,,Wed Sep 20 19:01:13 UTC 2017,,,,,,0|i1t1wn:,377816,,,,,,,,"10/Mar/14 19:35;VincentG;Simple workaround :
Instead of ""scr list"" type ""scr //slist"".
Instead of ""scr list 1"" type ""scr //slist//s1"".","20/Sep/17 19:01;githubbot;GitHub user cgdrake opened a pull request:

    https://github.com/apache/felix/pull/120

    [FELIX-4447] fix regexp, thanks to Olivier Fayau

    git-svn-id: https://svn.apache.org/repos/asf/felix/trunk/scr@1591422 13f79535-47bb-0310-9956-ffa450edef68
    
    Given that this is a low impact and trivial fix which causes a fair bit of aggrevation, it would be great if this could be merged into the scr-1.8.x branch and released in 1.8.5.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cgdrake/felix scr-1.8.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/120.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #120
    
----
commit 29e5f8d247c5e927b6e703a7b1ed2f87d5015fa7
Author: David Jencks <djencks@apache.org>
Date:   2014-04-30T18:01:38Z

    [FELIX-4447] fix regexp, thanks to Olivier Fayau
    
    git-svn-id: https://svn.apache.org/repos/asf/felix/trunk/scr@1591422 13f79535-47bb-0310-9956-ffa450edef68

----
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate unregistrations do not throw IllegalArgumentException,FELIX-4444,12698418,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,cziegeler,cziegeler,03/Mar/14 13:32,13/Jun/14 09:24,14/Mar/19 02:48,03/Mar/14 13:46,http-2.2.2,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"If HttpService.unregister(String) is called more than once with the same alias, according to the spec, an IllegalArgumentException should be thrown.
However, the current implementation silently ignores this",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,376776,,,Mon Mar 03 13:46:25 UTC 2014,,,,,,0|i1sxbj:,377071,,,,,,,,03/Mar/14 13:46;cziegeler;Fixed in rev 1573560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lifecycle methods with wrong arguments should be treated as an error,FELIX-4442,12697881,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,28/Feb/14 08:23,16/Mar/14 10:05,14/Mar/19 02:48,28/Feb/14 08:52,maven-scr-plugin 1.15.0,scr ant task 1.9.0,scr generator 1.8.2,,,,maven-scr-plugin 1.16.0,scr ant task 1.10.0,scr generator 1.9.0,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,376355,,,Fri Feb 28 08:52:11 UTC 2014,,,,,,0|i1suq7:,376651,,,,,,,,"28/Feb/14 08:25;cziegeler;If an annotation is used on a lifecycle method which does not match the supported signatures, this should be treated as an error and not as a warning, e.g.

@Activate
protected void activate(Object foo)

","28/Feb/14 08:52;cziegeler;Fixed by throwing an error if the annotation is specifed, but just a warning if not",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The default value is not escaped correctly.,FELIX-4441,12697876,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,mikaelsvahn,mikaelsvahn,28/Feb/14 07:32,16/Mar/14 10:05,14/Mar/19 02:48,28/Feb/14 08:31,scr generator 1.8.2,,,,,,maven-scr-plugin 1.16.0,scr ant task 1.10.0,scr generator 1.9.0,,,,,SCR Tooling,,,,,,0,bug,patch,,,,"The default value is not correctly escaped when the xml file is generated.
The problem is that the characters ' ' and ',' is escaped twice.

It is solved by the following patch

--- src/main/java/org/apache/felix/scrplugin/xml/MetaTypeIO.java        2014-02-28 08:16:21.706349600 +0100
+++ src/main/java/org/apache/felix/scrplugin/xml/MetaTypeIO.java        2014-02-28 08:16:28.307009600 +0100
@@ -284,9 +284,9 @@
         }
 
         String result = value.trim();
+        result = result.replace(""\\"", ""\\\\"");
         result = result.replace("" "", ""\\ "");
         result = result.replace("","", ""\\,"");
-        result = result.replace(""\\"", ""\\\\"");
         return result;
     }

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-28 08:31:24.775,,,no_permission,,,,,,,,,,,,376350,,,Fri Feb 28 08:31:24 UTC 2014,,,,,,0|i1sup3:,376646,,,,,,,,28/Feb/14 08:31;cziegeler;Thanks for reporting. I've applied your patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dots in pathinfo's are removed for include requests,FELIX-4440,12697842,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,tripod,tripod,28/Feb/14 01:53,13/Jun/14 09:24,14/Mar/19 02:48,07/May/14 16:20,,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"the pathinfo of a included request does not contain any dots. this is a regression of FELIX-2774 and a bug in org.apache.felix.http.base.internal.util.UriUtils#removeDotSegments

the following test fails:
{code}
        assertEquals(""/test.jsp"", removeDotSegments(""/test.jsp""));
{code}

as it also removes the '.'. according to RFC-3986 section 5.2.4, it should only remove the path segments '/./' and '/../'.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-07 16:20:22.702,,,no_permission,,,,,,,,,,,,376316,,,Wed May 07 16:20:22 UTC 2014,,,,,,0|i1suhj:,376612,,,,,,,,"28/Feb/14 02:04;tripod;btw: what about using http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html#normalize(java.lang.String,%20boolean) instead?","07/May/14 16:20;jajans;Resolved by rewriting the algorithm in a different way, see rev #1593051.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Jetty] Jetty server reports itself as being version 8.y.z-SNAPSHOT,FELIX-4438,12697403,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,26/Feb/14 16:59,01/Aug/15 09:22,14/Mar/19 02:48,26/Feb/14 17:00,http-2.2.1,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"The Jetty server currently announces itself as version ""8.y.z-SNAPSHOT"" in the ServletContext.getServerInfo() and the Server header.

The fault seems to be that Jetty's Server class inspects the package implementation name and version and does not find it. It then falls back to the jetty.version system property which is not set. Finally it falls back to said version ""8.y.z-SNAPSHOT"".

The fix is to set the jetty.version system property in the JettyService.getJettyVersion method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,375877,,,Wed Feb 26 17:00:57 UTC 2014,,,,,,0|i1srsf:,376173,,,,,,,,26/Feb/14 17:00;fmeschbe;Fixed in Rev. 1572163,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DirectoryWatcher should not refresh transformed bundles on every start-up,FELIX-4436,12697369,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,gnt,metatech,metatech,26/Feb/14 14:02,17/Mar/15 06:55,14/Mar/19 02:48,08/Apr/14 14:01,fileinstall-3.2.4,,,,,,fileinstall-3.4.0,,,,,,,File Install,,,,,,1,,,,,,"DirectoryWatcher can auto-deploy JAR or XML files placed in a directory.
Blueprint XML files (containing for instance ActiveMQ factories or JAAS realms) are detected as ""installed"" on every start-up.  Prior to FELIX-2066, this had no effect.  Since FELIX-2066, bundles detected as ""installed"" are now forcibly ""refreshed"" on every start-up.  The impact is that these bundles are stopped and restarted during the container start-up.  Because there are some race conditions (see FELIX-3067), this can prevent those XML files or other bundles depending on them from fully starting.  Here is a patch which avoids restarting those bundles when they were not modified.
",ServiceMix 4.5.3,,,,,,,,,,,,,KARAF-2420,,SMX4-956,,,,26/Feb/14 14:03;metatech;felix_no_refresh_installed.patch;https://issues.apache.org/jira/secure/attachment/12631228/felix_no_refresh_installed.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-04 17:14:31.594,,,no_permission,,,,,,,,,,,,375843,,,Sat Apr 12 08:22:37 UTC 2014,,,,,,0|i1srkv:,376139,,,,,,,,"04/Mar/14 17:14;barthel;I think the provided patch does not solve the real problem.

h4. Explanation of my understanding

The blueprint deployer extending the {{ArtifactUrlTransformer}} and create a new bundle (JAR) based on passed blueprint XML file. This bundle goes the normal way and will be installed. The bundle location is a opaque URI like:
{noformat}
blueprint:file:/tmp/fileinstall/deploy/blueprint.xml
{noformat}

The real problem, as I understand it, is located deep in the {{#initializeCurrentManagedBundles()}} method.

If the {{DirectoryWatcher}} starts to work, the {{#initializeCurrentManagedBundles()}} will be executed and analysed the installed artifacts:
# get all installed bundles
# interate over all bundles and get the bundle location
# create normalized {{URI}} based on bundle location
# check {{URI#getPath()}}
## if path is {{null}} or path doesn't starts with the configured watch directory
*** continue *without* create {{Artifact}} object for the installed bundle/
## otherwise
*** create {{Artifact}} object and add to global {{currentManagedArtifacts}} via {{#setArtifact(...)}}

After all the {{#process(...)}} method will be execute (this is the method where the provided patch is located).
This method iterate also over the files and tried to get a {{Artifact}} object for the passed file.

In the described case no {{Artifact}} object will be found for the blueprint XML file and the way goes to the {{// File has been added}}-_else_ part of the big _if-else_ statement.
At this point a new {{Artifact}} object will be created and added to the {{created}}-List.
The content of the {{created}}-List will be installed or updated via {{#install(...)}} and the returned {{Bundle}} objects goes directly into the {{toRefresh}}-Set.

h4. Possible solution
Try to handle opaque {{URI}} at the point _4.1_.

","05/Mar/14 06:39;githubbot;GitHub user barthel opened a pull request:

    https://github.com/apache/felix/pull/3

    [FELIX-4436] handle bundle if bundle location is a opaque uri

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/barthel/felix trunk

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/3.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #3
    
----
commit 008c1c43aca0b8d10f54f6eb1bf55854128e1614
Author: Uwe Barthel <barthel@x-reizend.de>
Date:   2014-03-05T06:34:52Z

    [FELIX-4436] handle bundle if bundle location is a opaque uri

----
","13/Mar/14 14:26;metatech;Hi Uwe,
Thanks for looking into this issue.
I tried your patch but it does not change my observations : on every start-up, the Blueprint XML are still refreshed.
To be honest, I do not understand how your patch is supposed to solve the problem, could you please elaborate ?
Also, I notice that on Windows, the path extraction algorithm does not work, because there is an extra colon in the path, eg C:/
Regards,
metatech","13/Mar/14 23:58;githubbot;Github user barthel closed the pull request at:

    https://github.com/apache/felix/pull/3
","13/Mar/14 23:58;barthel;Hi metatech,

Thx for review my patch.
{quote}
To be honest, I do not understand how your patch is supposed to solve the problem, could you please elaborate ?
{quote}
The idea behind my patch is to prevent to put the bundle into the {{installedBundles}} collection. This collection will be added into the {{toRefresh}} set, which you comment out in your patch.

If you're going the way back, you'll find a long if-else statement. In this if-else statement, it's about if the file exists and whether an {{Artifact}} object exists.

If this {{Artifact}} object is not found, it is newly created and inserted into the {{toRefresh}} set.

A list of all known {{Artifact}} objects is collected at startup in the method {{#initializeCurrentManagedBundles()}}. Creating the {{Artifact}} object for the Blueprint XML file based on the path of the found file and the Bundle Location of the already known bundles.

I hope this and my explanation above, have explained my thought better.
{quote}
Also, I notice that on Windows, the path extraction algorithm does not work, because there is an extra colon in the path, eg C:/
{quote}
You're absolutely right. My solution is not optimal at this point. Perhaps it is better to search {{file:}}, instead of the last colon. This could be the reason why it does not work for you.

I've change the implementation. Please try it again.
Did you run the {{DirectoryWatcherTest}} test?

Sincerely
barthel","14/Mar/14 00:00;githubbot;GitHub user barthel opened a pull request:

    https://github.com/apache/felix/pull/4

    Possible fix for [FELIX-4436]  https://issues.apache.org/jira/browse/FELIX-4436

    * handle bundle if bundle location is a opaque uri
    * use 'file:' instead of last index of colon for extract the path name from opaque uri
    * test added


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/barthel/felix trunk

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/4.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #4
    
----
commit 008c1c43aca0b8d10f54f6eb1bf55854128e1614
Author: Uwe Barthel <barthel@x-reizend.de>
Date:   2014-03-05T06:34:52Z

    [FELIX-4436] handle bundle if bundle location is a opaque uri

commit b623ec0a2a607c4f8baa827660ba32bfdfccf09d
Author: Uwe Barthel <barthel@x-reizend.de>
Date:   2014-03-13T23:52:55Z

    [FELIX-4436] handle bundle if bundle location is a opaque uri
    * use 'file:' instead of last index of colon for extract the path name from opaque uri
    * test added

----
",14/Mar/14 08:51;metatech;[~barthel] : your pull #4 is the same as #3,"14/Mar/14 09:35;barthel;[~metatech]: the patch (pull req. #4) contains the commits of #3 and two new commits. If it is the 'felix' way, so may I provide a patch file instead of git pull requests?","14/Mar/14 11:55;metatech;[~barthel] Sorry, I do not use Github, so I downloaded the patch manually and only looked at the beginning and did not see the other changes. I will give it a try.","18/Mar/14 14:47;barthel;[~metatech] Have you had time for a test? 
In my test setup the patch works on Linux.
{code}
g! lb
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (4.2.1)
    1|Active     |    1|HSQLDB (2.2.4)
    2|Active     |    1|Apache Aries Blueprint Bundle (1.1.0)
    3|Active     |    1|Apache Aries Proxy Bundle (1.0.0)
    4|Active     |    1|Apache Aries Util (1.0.0)
    5|Active     |    1|Apache Felix Bundle Repository (1.6.6)
    6|Active     |    1|Apache Felix Configuration Admin Service (1.8.0)
    7|Active     |    1|Apache Felix File Install (3.3.0.SNAPSHOT)
    8|Active     |    1|Apache Felix Gogo Command (0.12.0)
    9|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
   10|Active     |    1|Apache Felix Gogo Shell (0.10.0)
   11|Active     |    1|Apache Karaf :: Deployer :: Blueprint (2.2.8)
   12|Active     |    1|OPS4J Pax Logging - API (1.6.7)
   13|Active     |    1|OPS4J Pax Logging - Service (1.6.7)
   14|Active     |    1|datasource-hsqldb.xml (0.0.0)
{code}
{{datasource-hsqldb.xml}} is the Blueprint XML file deployed in {{./load}}. After a restart the bundle was found and not refreshed/reinstalled anymore. If I touch the file, the bundle will be refreshed.","18/Mar/14 17:54;gnt;I've committed a slightly improved patch which also supports the Karaf wrap url handler which may add $xxx stuff after the file path.
Thx for the work Uwe !

Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java
	M	fileinstall/src/test/java/org/apache/felix/fileinstall/internal/DirectoryWatcherTest.java
Committed r1578984

https://svn.apache.org/viewvc?view=revision&revision=1578984",18/Mar/14 20:41;barthel;Should I write a test for your improvement?,18/Mar/14 20:44;gnt;I actually modified the testInitializeCurrentManagedBundlesOpaqueURIOnBundleLocation to make sure this is tested.,"18/Mar/14 20:45;githubbot;Github user barthel closed the pull request at:

    https://github.com/apache/felix/pull/4
","19/Mar/14 13:06;metatech;I tested using Guillaume's commit version.
Indeed the Blueprint XML are not detected anymore as ""installed"" on every start-up.
However, I see now that the ""activemq-broker.xml"" gets restarted during start-up, which generates many errors in depending bundles.
I also see that the ""cfg"" files in the ""etc"" directory are still detected as ""installed"" on every start-up, although this does not seem to cause any harm.

Below is the stack trace when the ""activemq-broker.xml"" is stopped during start-up, if it can help.
{code}
""fileinstall-C:\smx\servicemix/etc"" daemon prio=6 tid=0x000000000a18e000 nid=0x1210 at breakpoint[0x000000000bfbf000]
   java.lang.Thread.State: RUNNABLE
        at org.apache.felix.framework.Felix.stopBundle(Felix.java:2217)
        at org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:963)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.stopTransient(DirectoryWatcher.java:1214)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.update(DirectoryWatcher.java:1156)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.update(DirectoryWatcher.java:935)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:498)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:308)
{code}

",19/Mar/14 16:55;gnt;Reopening to check the activemq xml config,"19/Mar/14 20:39;barthel;[~metatech] Oh, that isn't cool.
Please provide information about your framework and setup.
Debug log information are helpful too.
Is it possible that you provide the bundle cache content for that file ?
It sounds like a failure in scanner on calculate the checksum or something else in this context.

Under Linux with a minimal Felix setup I have not noticed this behavior.

Please retry with a clear bundle cache.
","20/Mar/14 11:53;metatech;The restart of the activemq-broker.xml bundle seems to be caused by the fact that there are 2 DirectoryWatcher for this file : 
1. the normal one for ""/etc/*"".
2. the specific ""org.apache.felix.fileinstall-activemq.cfg"" for ""etc/activemq-broker.xml"".
When deleting the ""org.apache.felix.fileinstall-activemq.cfg"", the bundle is not restarted anymore at start-up.
Strangely, in the previous version, this unusual configuration was working fine.","20/Mar/14 12:05;metatech;I emphasize that this double DirectoryWatcher is configured this way ""out of the box"" with ServiceMix.","21/Mar/14 19:47;barthel;The two processes monitor the same directory?
I have not check until now if both watcher processes are working on the same file.
For me It is a new BUG.
","08/Apr/14 14:01;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java
Committed r1585732
","12/Apr/14 08:22;barthel;For use with Karaf this BUG has not Minor priority. It is a Major in my oppinion.
It would be great integrate this fix into ""fileinstall-3.2.x"" for integrating in Karaf 2.3.x and Karaf 3.0.x.",,,,,,,,,,,,,,,,,,,,
DefaultServiceRankingInterceptor holds duplicate dependencies,FELIX-4432,12696505,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,rodehav,rodehav,21/Feb/14 12:14,12/Mar/14 08:23,14/Mar/19 02:48,24/Feb/14 17:03,ipojo-runtime-1.11.1,,,,,,ipojo-runtime-1.11.2,,,,,,,iPOJO,,,,,,0,,,,,,"It seems like every dependency is duplicated in the member ""dependencies"" in class DefaultServiceRankingInterceptor. This has been discussed on the mailing list:

http://www.mail-archive.com/users@felix.apache.org/msg15121.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-24 13:04:52.899,,,no_permission,,,,,,,,,,,,374981,,,Wed Mar 12 08:23:45 UTC 2014,,,,,,0|i1sma7:,375280,,,,,,,,24/Feb/14 13:04;clement.escoffier;The field should definitely be a set. Thanks.,24/Feb/14 17:03;clement.escoffier;Fixed in trunk,12/Mar/14 08:23;clement.escoffier;iPOJO Runtime and Manipulator 1.11.2 release process has started.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Arrays are loaded as string from cfg file,FELIX-4431,12696294,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,adezeghe,adezeghe,20/Feb/14 16:39,18/Jun/15 10:33,14/Mar/19 02:48,18/Mar/14 17:57,configadmin-1.8.0,fileinstall-3.2.6,,,,,,,,,,,,Configuration Admin,File Install,,,,,0,,,,,,"When we have a configuration file with following contents:

station.ids = [1,5,6]
station.names = [Station1, Station2, Station3]

These properties are given as a string in the service properties and not as an array if loaded with fileInstall.

If these properties are configured from Config Admin Felix Console, then the properties are stored as an array in the service properties.
The cardinality is Integer.MIN_MAX",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-18 17:57:27.374,,,no_permission,,,,,,,,,,,,374770,,,Tue Mar 18 17:57:27 UTC 2014,,,,,,0|i1skzj:,375070,,,,,,,,"18/Mar/14 17:57;gnt;The ConfigAdmin syntax is supported for files with a "".config"" extension.
The reason is that the syntax is not compatible, so "".cfg"" files are treated as strings and "".config"" files with an extended syntax.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When inserting hosted capability from an already resolved fragment the real non-hosted capability is not removed as a candidate,FELIX-4428,12695967,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,19/Feb/14 14:34,24/Apr/14 20:55,14/Mar/19 02:48,24/Apr/14 20:16,resolver-1.0.0,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,"In Candidates there are two places where ResolveContext.insertHostedCapability is called:

 - org.apache.felix.resolver.Candidates.prepare(ResolveContext)
 - org.apache.felix.resolver.Candidates.processCandidates(ResolveContext, Resource, List<Capability>)

In the prepare method the actual fragment capability is correctly removed as a candidate when inserting the hosted capability:

                                List<Capability> original = ((ShadowList) cands).getOriginal();
                                int removeIdx = original.indexOf(origCap);
                                if (removeIdx != -1)
                                {
                                    original.remove(removeIdx);
                                    cands.remove(removeIdx);
                                }

But in the processCandidates method this is not the case.  This can lead to invalid Wires being created where the fragment resource is the provider.  This happens if the hosted capability introduces a class space inconsistency (from uses constraints).  In this case we move on to the next candidate which may be the fragment capability (depending on how the ResolveContext sorts).

The fix is simple, just remove the original fragment capability from the candidate list.  I fixed this in equinox with commit:

http://git.eclipse.org/c/equinox/rt.equinox.framework.git/commit/?id=7efe91f3673e970f32cabc3701e99743a536da00

",,,,,,,,,,,,,,,,,,,,24/Apr/14 20:13;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12641786/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-24 20:16:18.859,,,no_permission,,,,,,,,,,,,374445,,,Thu Apr 24 20:55:11 UTC 2014,,,,,,0|i1sizb:,374745,,,,,,,,24/Apr/14 20:13;tjwatson;Fix by removing fragment capabilities as candidates before inserting the hosted capability for the fragment capability.,"24/Apr/14 20:16;rickhall;Applied patch, please close if satisfied. Thanks.",24/Apr/14 20:55;tjwatson;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create separate API bundle,FELIX-4427,12695642,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,fmeschbe,fmeschbe,18/Feb/14 07:37,13/Jun/14 09:23,14/Mar/19 02:48,07/May/14 08:55,http-2.2.1,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"Currently the Servlet API is exported from the Http Service Bundle bundle and the Jetty bundle.

In a typical web application a large number of bundles will typically wire to the Servlet API and to the Http Service API. To detach the application from the Http Service implementation, if would be usefull to have the APIs fully detached from the implementations.

As such, I suggest we do not export the Servlet API from the Jetty bundle but expect the Servlet API to be exported from somewhere else.

As the Http Service Bundle bundle is a convenience all-in-one bundle, it does not hurt for this bundle to export the API.

To help solve the versioning problem, I actually think we should create our own Servlet API bundle. The versioning problem is that the Servlet API 3.0 spec is actually backwards compatible with Servlet 2.5 but chose to upgrade the specification major version. Unfortunately that does not play well with semantic versioning when applying the specification version to the API exports (as is customarily but wrongly done).

So, our bundle should:
- be based on the Tomcat Servlet API library (since this is ASL2 licensed and can easily be included)
- export Servlet API at version 2.6 (which is a custom compromise) as well as version 3.0
- also Provide-Capability for the Servlet API capability",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-18 09:11:32.849,,,no_permission,,,,,,,,,,,,374150,,,Wed May 07 08:55:18 UTC 2014,,,,,,0|i1sh5r:,374450,,,,,,,,"18/Feb/14 09:11;jajans;+1, currently the Servlet APIs export themselves as version 3.0, which breaks most of the existing bundles that uses an import of ""[2.1,3.0)"" (this is a pending todo on my list). Creating a separate servlet API project makes it easier to maintain the version bumps in the servlet API now and in the future...
","18/Feb/14 10:44;fmeschbe;Created a first version based on the Tomcat Servlet API 7.0.8 (tomcat 8 is already Servlet API 3.1) in Rev. 1569258

Next steps:

* Remove API exports from the Jetty bundle
* Add HTTP Service API export to the Api bundle","18/Feb/14 10:54;fmeschbe;Fixed the exports in Rev. 1569268:

* Removed Http Service, ext Http Service and Servlet API exports from Jetty bundle
* Added OSGi Http Service export to API bundle
* API bundle depends on Servlet API 2.3 which was the first to provide Filter and imports servlet API at [2.3,4) to support all servlet API which we currently assume compatible.","18/Feb/14 11:20;jajans;I think the resulting output can cause unexpected exceptions due to the missing ""LocalStrings.properties"" file, that is used in some of the classes, like HttpConstraintElement.

Is there a reason this project is a JAR-artifact, instead of a bundle artifact? Can the maven-bundle-plugin not be used?",18/Feb/14 11:47;fmeschbe;Fix Servlet API export bundle in Rev. 1569272 (bundle version was corrupt and local strings were missing) and added the API bundles in the integration tests in Rev. 1569274.,"18/Feb/14 11:54;fmeschbe;[~jajans] Yes, I could not get the bundle plugin to export the same package twice with different versions. If you know how to do it ...

Also have to also import the OSGi Http Service API in the API bundle to make it more lenient to 3rd party providers of the OSGi service API (as is the case in the integration tests which happen to install the compendium bundle). Fix in Rev. 1569288.","18/Feb/14 12:06;jajans;[~fmeschbe]: ok, if it is necessary to use another plugin than that's fine, I think it is also needed because of the additional manifest sections that are needed.
Anyway, the changes look fine to me, and all integration tests are still running :)","18/Feb/14 14:47;fmeschbe;Found out how to actually use the bundle plugin to generate the bundle instead of my jar file with static manifest hack:  The exported packages have to be fully listed and then the bundle plugin is actually able to export the same packages twice with different versions.

Fixed in Rev. 1569365",07/May/14 08:55;jajans;I think this is resolved already...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Short command in Gogo Shell not working with Java 8 ,FELIX-4425,12694328,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,nroduit,nroduit,10/Feb/14 19:33,27/Mar/14 07:06,14/Mar/19 02:48,25/Mar/14 19:30,,,,,,,gogo.shell-0.12.0,,,,,,,Gogo Command,,,,,,0,,,,,,"The bug comes from the different interpretation of String.split() method in line 474 of org.apache.felix.gogo.options.Options (in Gogo Shell).

Here are the different results of the split method:
String val = ""-k"".substring(1).split("""");
Java < 8:
val[0]=""""
val[1]=""k""

Java 8: 
val[0]=""k""

A simple fix can be an iteration of the characters instead of using split().",Java 8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-25 19:30:23.952,,,no_permission,,,,,,,,,,,,372837,,,Tue Mar 25 19:30:23 UTC 2014,,,,,,0|i1s93z:,373141,,,,,,,,"21/Feb/14 20:18;nroduit;The following fix works with Java 7 and Java 8:

{code}
diff --git a/gogo/shell/src/main/java/org/apache/felix/gogo/options/Options.java b/gogo/shell/src/main/java/org/apache/felix/gogo/options/Options.java
index e2fdba0..570b067 100644
--- a/gogo/shell/src/main/java/org/apache/felix/gogo/options/Options.java
+++ b/gogo/shell/src/main/java/org/apache/felix/gogo/options/Options.java
@@ -470,16 +470,15 @@
                     }
                 }
                 else {
-                    int i = 0;
-                    for (String c : arg.substring(1).split("""")) {
-                        if (i++ == 0)
-                            continue;
+                    for (int i = 1; i < arg.length(); i++) {
+                        String c = String.valueOf(arg.charAt(i));
                         if (optName.containsKey(c)) {
                             String name = optName.get(c);
                             optSet.put(name, true);
                             if (optArg.containsKey(name)) {
-                                if (i < arg.length()) {
-                                    addArg(name, arg.substring(i));
+                                int k = i + 1;
+                                if (k < arg.length()) {
+                                    addArg(name, arg.substring(k));
                                 }
                                 else {
                                     needOpt = c;
{code}","25/Mar/14 19:30;rickhall;I applied your patch so it will be included in any future release, please close if satisfied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassLoader leak in Http Service ServletContextManager,FELIX-4424,12694204,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,chetanm,chetanm,10/Feb/14 05:20,27/Feb/18 14:44,14/Mar/19 02:48,27/Feb/18 14:44,,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"While analyzing heap dump for classloader leaks using script [1] following possible leak was reported

{noformat}
	com.day.crx.packmgr.impl.AuthHttpContext@0x124214d18
	 Following are few of the live paths found
	 Live path
		com.day.crx.packmgr.impl.AuthHttpContext@0x124214d18
		java.util.HashMap$Entry@0x12429db50
		[Ljava.util.HashMap$Entry;@0x1238f47b0
		java.util.HashMap@0x1238f4780
		org.apache.felix.http.base.internal.context.ServletContextManager@0x1238f4760 [*]
		org.apache.felix.http.base.internal.service.HttpServiceImpl@0x1238f45c0 [*]
		org.apache.felix.framework.ServiceRegistry$UsageCount@0x1238f45a8
		[Lorg.apache.felix.framework.ServiceRegistry$UsageCount;@0x129efb430
		java.util.HashMap$Entry@0x1235ee950
		[Ljava.util.HashMap$Entry;@0x1249e2b78
		java.util.HashMap@0x123484668
		org.apache.felix.framework.ServiceRegistry@0x12339c108
		org.apache.felix.framework.ServiceRegistrationImpl@0x126a7a3c8
		java.util.concurrent.atomic.AtomicReference@0x126a7a3b8
		org.apache.felix.scr.impl.manager.DelayedComponentManager@0x126a79ab8 [*]
		java.util.HashMap$Entry@0x126a9c3f0
		java.util.HashMap$Entry@0x1286ce7a0
		[Ljava.util.HashMap$Entry;@0x124884030
		java.util.HashMap@0x1238f1ce0
		org.apache.felix.scr.impl.ComponentRegistry@0x1236757f0 [*]
		org.apache.felix.scr.impl.BundleComponentActivator@0x127152bd0 [*]
		org.apache.felix.scr.impl.config.ImmediateComponentHolder@0x127153a08 [*]
		org.apache.felix.scr.impl.manager.DelayedComponentManager@0x127154398 [*]
		org.apache.felix.scr.impl.manager.DependencyManager@0x127154720 [*]
{noformat}

In our case the AuthHttpContext was being registered via the Whiteboard pattern. The dump shows that ServletContextManager [2] uses the HttpContext as key for the map however it is never removed. If our bundle would had used HttpService directly then internal map would have been GC upon bundle deactivation.

In Felix HttpService is registered as a ServiceFactory however as all interactions with HttpService is done via Whiteboard bundle the HttpService is bound to Whiteboard bundle. So such HttpContext might remain for the lifetime of whiteboard bundle and hence cause classloader leak.

[1] https://gist.github.com/chetanmeh/8860776
[2] https://github.com/apache/felix/blob/trunk/http/base/src/main/java/org/apache/felix/http/base/internal/context/ServletContextManager.java

PS: The lines marked with [*] are objects which are from valid bundle and are maintaining hard reference to the objects from classloader which should have been GC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-10 14:03:49.595,,,no_permission,,,,,,,,,,,,372713,,,Wed Feb 12 08:48:26 UTC 2014,,,,,,0|i1s8cn:,373017,,,,,,,,"10/Feb/14 14:03;fmeschbe;Wow ! Excellent catch, indeed !

We could use a WeakHashMap, though, instead of a regular HashMap. This way, we can cope for this.

{noformat}
Index: ServletContextManager.java
===================================================================
--- ServletContextManager.java	(Revision 1566626)
+++ ServletContextManager.java	(Arbeitskopie)
@@ -16,8 +16,8 @@
  */
 package org.apache.felix.http.base.internal.context;
 
-import java.util.HashMap;
 import java.util.Map;
+import java.util.WeakHashMap;
 
 import javax.servlet.ServletContext;
 import javax.servlet.ServletContextAttributeListener;
@@ -39,7 +39,7 @@
         this.bundle = bundle;
         this.context = context;
         this.attributeListener = attributeListener;
-        this.contextMap = new HashMap<HttpContext, ExtServletContext>();
+        this.contextMap = new WeakHashMap<HttpContext, ExtServletContext>();
         this.sharedAttributes = sharedAttributes;
     }
 
{noformat}","11/Feb/14 12:59;jajans;I'm already busy in this area, so I'll be happy to apply the proposed patch...
","11/Feb/14 13:06;fmeschbe;[~jajans] Thanks alot. This is just a quick shot approach which I did not actually thoroughly test, though :-)","11/Feb/14 13:09;jajans;No problem, I'll ponder about the solution a little as well ;)
","12/Feb/14 08:30;jajans;Committed the fix proposed by [~fmeschbe] in rev #1567561. A more correct solution would be to allow removal of ServletContexts in the ServletContextManager as well. This needs a bit more work, but would be necessary for RFC-189 anyway...","12/Feb/14 08:48;fmeschbe;Thanks.

Yes, I agree with the full fix. I would think that we need to track consumers of the ServletContexts:

* In the Whiteboard case we can remove the ServletContext once the HttpContext service is unregistered
* In the traditional registration case we can probably remove the entry when the last Servlet (and Filter in our case) referring to the same HttpContext is unregistered from the HttpService.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException when stopping Jetty bundle,FELIX-4423,12693923,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,07/Feb/14 16:24,13/Jun/14 09:24,14/Mar/19 02:48,12/Feb/14 17:00,http-2.2.2,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"I sometimes see a class-not-found exception when stopping the OSGi framework with a running Jetty bundle. It seems that due to the asynchronous nature of this bundle, subtle timing issues can occur during shutdown:

{code}
2014-02-07 17:21:23.312:WARN:oejuc.AbstractLifeCycle:FAILED qtp1827750836{8<=8<=8/254,0}: java.lang.NoClassDefFoundError: org/eclipse/jetty/util/thread/QueuedThreadPool$1
java.lang.NoClassDefFoundError: org/eclipse/jetty/util/thread/QueuedThreadPool$1
	at org.eclipse.jetty.util.thread.QueuedThreadPool.doStop(QueuedThreadPool.java:126)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.AggregateLifeCycle.doStop(AggregateLifeCycle.java:107)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:69)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStop(HandlerWrapper.java:108)
	at org.eclipse.jetty.server.Server.doStop(Server.java:342)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.apache.felix.http.jetty.internal.JettyService.stopJetty(JettyService.java:228)
	at org.apache.felix.http.jetty.internal.JettyService.access$100(JettyService.java:72)
	at org.apache.felix.http.jetty.internal.JettyService$3.doExecute(JettyService.java:169)
	at org.apache.felix.http.jetty.internal.JettyService$JettyOperation.call(JettyService.java:792)
	at org.apache.felix.http.jetty.internal.JettyService$JettyOperation.call(JettyService.java:783)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
Caused by:
java.lang.ClassNotFoundException: Unable to load class 'org.eclipse.jetty.util.thread.QueuedThreadPool$1' because the bundle wiring for org.apache.felix.http.jetty is no longer valid.
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1494)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.doStop(QueuedThreadPool.java:126)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.AggregateLifeCycle.doStop(AggregateLifeCycle.java:107)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:69)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStop(HandlerWrapper.java:108)
	at org.eclipse.jetty.server.Server.doStop(Server.java:342)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.apache.felix.http.jetty.internal.JettyService.stopJetty(JettyService.java:228)
	at org.apache.felix.http.jetty.internal.JettyService.access$100(JettyService.java:72)
	at org.apache.felix.http.jetty.internal.JettyService$3.doExecute(JettyService.java:169)
	at org.apache.felix.http.jetty.internal.JettyService$JettyOperation.call(JettyService.java:792)
	at org.apache.felix.http.jetty.internal.JettyService$JettyOperation.call(JettyService.java:783)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-12 12:44:35.826,,,no_permission,,,,,,,,,,,,372432,,,Wed Feb 12 17:00:49 UTC 2014,,,,,,0|i1s6mv:,372736,,,,,,,,"12/Feb/14 12:44;fmeschbe;Hmm this might be caused by the JettyService.stop() method scheduling the server shutdown but not waiting until the Executor service has actually executed all scheduled tasks.

Maybe the stop() method should call the awaitTermination() method after shutting down the executor to make sure the server has been stopped.","12/Feb/14 17:00;jajans;Made the stopping of Jetty synchronous with the fix for FELIX-4422, and added an {{awaitTermination()}} call in the {{stop()}} method. Initial smoke tests show that the {{ClassCastExceptions}} are gone.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove asynchronous starting of Jetty service,FELIX-4422,12693921,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,07/Feb/14 16:20,13/Jun/14 09:24,14/Mar/19 02:48,12/Feb/14 17:01,http-2.2.2,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"The Jetty bundle currently uses an {{ExecutorService}} to start Jetty in the background. I'm not sure this is actually needed with the recent versions of Jetty. I've did a quick test to start Jetty synchronously in the bundle activator, but could not measure any significant timing differences in startup times.

A reason to change this is that it makes the start/stop behaviour bundle more deterministic when using it in integration tests.",,,,,,,,,,,,,,FELIX-4423,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-12 12:41:42.747,,,no_permission,,,,,,,,,,,,372430,,,Wed Feb 12 17:01:55 UTC 2014,,,,,,0|i1s6mf:,372734,,,,,,,,"12/Feb/14 08:35;jajans;[~fmeschbe]: could you shed some light as to why Jetty is to be started asynchronously?
","12/Feb/14 12:41;fmeschbe;[~jajans] Looks like this asynchronous start up behaviour was introduced with the patch for FELIX-4137 to implement web app bundle support.

[~dpfister] Do you remember why you introduced this for web app support ?","12/Feb/14 12:51;dpfister;The start up was already asynchronous at the time I provided the patch: JettyService implemented Runnable [1] and a background thread was started that waited for interruptions to start and stop Jetty. All I did was generalizing this idea to perform other operations such as deploy and un-deploy on Jetty asynchronously.

[1] http://svn.apache.org/viewvc/felix/trunk/http/jetty/src/main/java/org/apache/felix/http/jetty/internal/JettyService.java?revision=1485242&view=markup&pathrev=1496453","12/Feb/14 13:15;jajans;[~dpfister] thanks for the info. Probably the earlier versions of Jetty started synchronously and you needed to background it yourself. The latest version(s) no longer need this. Is it necessary for the web-app support to deploy/undeploy asynchronously (is it potentially time consuming to deploy this)?
","12/Feb/14 13:31;dpfister;Good point, Jan Willem: deployment could indeed be time-consuming, so I'd rather keep this asynchronous. I don't expect the same from undeploying, so we could switch to synchronous mode here, which would also remedy FELIX-4423.","12/Feb/14 13:46;jajans;Ok, understood. I'll go ahead with this issue and leave the deployment of web-apps asynchronously. Thanks for the information, Dominique!","12/Feb/14 17:01;jajans;Made the starting & stopping of synchronous in rev #1567677. All itests still work, and some initial smoke tests in a real-world application does not show any problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open access to InstanceDeclaration and TypeDeclaration,FELIX-4419,12693509,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,clement.escoffier,clement.escoffier,06/Feb/14 07:19,24/Feb/14 13:40,14/Mar/19 02:48,24/Feb/14 13:23,ipojo-runtime-1.11.0,,,,,,ipojo-runtime-1.11.2,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-06 08:47:31.542,,,no_permission,,,,,,,,,,,,372094,,,Mon Feb 24 13:40:59 UTC 2014,,,,,,0|i1s4kf:,372399,,,,,,,,"06/Feb/14 08:47;sauthieg;Is this really necessary to exposes theses internal classes/packages ?
Maybe we should use the service way:

{code:java}
public interface DeclarationService {
  InstanceDeclaration newInstance(String name, String component);
  // Provide any other necessary/friendly methods
}
{code}

This way we can keep private all of our internal bits.

Thinking aloud about this interface:
* does it need to expose an InstanceDeclaration or some kind of handle to the declaration (something that can be use to retract the declaration) ?
* does it need to have some fluid API (something like what you've done for the {{@Configuration}} API) ?

WDYT ?","08/Feb/14 07:11;clement.escoffier;Hi,

I agree, our internal bits should be kept hidden. Adding a way to create InstanceDeclaration using a fluent API is definitely something interesting. In addition, as you said, we should be able to withdraw the declaration using the API. We can probably reuse the API we use in @Configuration, extended for the withdrawn case.

Do we need the same for types and extensions ?

Clement

",08/Feb/14 07:28;sauthieg;I'll do some prototyping.,"11/Feb/14 18:03;sauthieg;I'm wondering if the created InstanceDeclaration should be modifiable after creation ?
Like renaming, changing properties, ...

","13/Feb/14 13:26;sauthieg;I've pushed some preliminary work around instance creation declaration in my github fork:
https://github.com/sauthieg/felix/commit/f66d6a30c8975a5b711e33ba85d80143a0185269

Take a look at https://github.com/sauthieg/felix/blob/bug/FELIX-4419/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/extender/DeclarationBuilderService.java#L22 for API usage example in the javadoc.

WDYT ?","24/Feb/14 13:23;sauthieg;Pushed in trunk
Please close if satisfied","24/Feb/14 13:40;clement.escoffier;That's great, thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update maven-scr-plugin to use standard OSGi annotations,FELIX-4413,12692665,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,alex.blewitt,alex.blewitt,01/Feb/14 16:29,23/Apr/15 13:32,14/Mar/19 02:48,12/Nov/14 13:40,maven-scr-plugin 1.15.0,,,,,,maven-scr-plugin 1.20.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"The maven-scr-1.15.0 plugin complains when org.apache.felix.scr.annotations is missing, and even when present appears to ignore components registered with the standard OSGi annotations in the OSGi Enterprise 5.0 specification.

This class generates the maven scr data:

import org.apache.felix.scr.annotations.Component;
//import org.osgi.service.component.annotations.Component;
@Component(name = ""Test"")
public class Test implements Runnable {
	public void run() {
	}
}

This one does not:

//import org.apache.felix.scr.annotations.Component;
import org.osgi.service.component.annotations.Component;
@Component(name = ""Test"")
public class Test implements Runnable {
	public void run() {
	}
}

This was compiled with the following dependencies set:

	<dependencies>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.scr.annotations</artifactId>
			<version>1.9.6</version>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.enterprise</artifactId>
			<version>5.0.0</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-scr-plugin</artifactId>
				<version>1.15.0</version>
				<executions>
					<execution>
						<id>generate-scr-scrdescriptor</id>
						<goals>
							<goal>scr</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-12 13:40:36.38,,,no_permission,,,,,,,,,,,,371260,,,Wed Nov 12 13:40:36 UTC 2014,,,,,,0|i1rzg7:,371563,,,,,,,,"01/Feb/14 16:47;alex.blewitt;Hmm... it seems that this does work if I put this on the dependency list instead:

<dependency>
    <groupId>org.apache.felix</groupId>
    <artifactId>org.apache.felix.scr.ds-annotations</artifactId>
    <version>1.2.0</version>
</dependency>


However I discovered this by accident rather than from the documentation:

http://felix.apache.org/documentation/subprojects/apache-felix-maven-scr-plugin/apache-felix-maven-scr-plugin-use.html

It would be good to update the documentation to reflect on how to generate standard data, or why it's necessary if the osgi.enterprise (or other JAR with the annotations) is on the build dependencies.",12/Nov/14 13:40;cziegeler;This is documented now,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Provide-Capability for declarative services bundle,FELIX-4412,12692659,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,djencks,alex.blewitt,alex.blewitt,01/Feb/14 14:19,11/Aug/15 05:09,14/Mar/19 02:48,21/Jul/15 18:06,scr-1.8.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),Specification compliance,,,,,2,,,,,,"To allow bundles to declare that they need declarative services, a Provide-Capability should be defined on the DS bundle such that clients can depend on it, for example:

Provide-Capability: osgi.extender;osgi.extender=""osgi.service.component"";version:=1.1.0

This would allow clients to require that there be a Declarative Services bundle without actually declaring a package dependency:

Require-Capability: osgi.extender;filter:=""(&(osgi.extender=osgi.service.component"")(version>1.0.0))""

The name of the declarative services component isn't well defined but osgi.service.component or osgi.declarative.services might be used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-03 08:00:36.723,,,no_permission,,,,,,,,,,,,371254,,,Tue Jul 21 18:06:15 UTC 2015,,,,,,0|i1rzev:,371557,,,,,,,,01/Feb/14 14:20;alex.blewitt;See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=427191 - ideally there should be a consistent name amongst the OSGi implementations,"03/Feb/14 08:00;fmeschbe;As BJ Hargrave wrote in the Eclipse bug, the extender will be defined as part of the DS update. See https://github.com/osgi/design/blob/master/rfcs/rfc0190/rfc-0190-Declarative_Services_Enhancements.pdf for the current state, particularly section 5.5.

I would suggest to wait with implementing this Capability until the RFC is finalized.",06/Aug/14 04:27;djencks;Pretty much all of rfc 190 is implemented and we can't release until the spec is released so I went ahead and added the header now.,17/Oct/14 19:10;djencks;Along with adding the header we have to check that if a bundle has a Require-Capability for DS it is wired to us not some other DS extender.,05/Feb/15 14:27;bosschaert;I also added the osgi.implementation capability which DS 1.3 implementations will need to have too.,16/Mar/15 17:18;djencks;I attempted to implement the wiring check but could only figure out how to test that the wire exists when it should.  I don't see a reasonable way to write a test that shows we don't extend a bundle wired to another extender. rev 1667030,21/Jul/15 07:58;cziegeler;[~djencks] Is there anything to be done for a first release?,21/Jul/15 18:06;djencks;Unless someone can figure out how to write a test I guess we should resolve this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions during rollback are not always properly handled,FELIX-4410,12691644,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,marrs,marrs,28/Jan/14 14:53,01/Apr/14 12:45,14/Mar/19 02:48,03/Feb/14 13:14,deploymentadmin-0.9.5,,,,,,deploymentadmin-0.9.6,,,,,,,Deployment Admin,,,,,,0,,,,,,"In DeploymentSessionImpl.call(...) there are a couple of locations that trigger a rollback. It is currently possible for the rollback itself to create an exception. Not all commands that participate in the rollback currently catch all such exceptions. The spec describes in 114.7.1 that the rollback should always do its best to reverse all effects, and log any problems it ran into. We should make a better effort to do so. Therefore I suggest a review of all those commands where we explicitly check thrown exceptions and deal with them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-03 13:14:54.718,,,no_permission,,,,,,,,,,,,370389,,,Mon Feb 03 13:14:54 UTC 2014,,,,,,0|i1ru87:,370710,,,,,,,,"03/Feb/14 13:14;jajans;Refactored the commit/rollback actions by introducing an AbstractAction that properly handles checked and unchecked exceptions, making the implementations a little more resilient against unexpected situations. All thrown exceptions are now properly handled. See rev #1563873.

[~marrs]: please retest & close if you're satisfied with the solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CaseInsensitiveDictionary is platform/locale dependant,FELIX-4408,12691316,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,tripod,tripod,27/Jan/14 05:49,17/Mar/15 06:44,14/Mar/19 02:48,27/Jan/14 08:08,configadmin-1.8.0,,,,,,configadmin-1.8.2,,,,,,,Configuration Admin,,,,,,0,,,,,,"The CaseInsensitiveDictionary [0] can behave wrongly for non english locales. see reasoning in COLLECTIONS-294 and [1].

[0] https://svn.apache.org/repos/asf/felix/trunk/configadmin/src/main/java/org/apache/felix/cm/impl/CaseInsensitiveDictionary.java
[1] http://mattryall.net/blog/2009/02/the-infamous-turkish-locale-bug

A fix similar to the 2nd patch in COLLECTIONS-294 probably solves the problem.",,,,,,,,,,,,,,,,,,,,27/Jan/14 06:10;tripod;FELIX-4408-r1558196.patch;https://issues.apache.org/jira/secure/attachment/12625326/FELIX-4408-r1558196.patch,27/Jan/14 06:03;tripod;FELIX-4408-test-r1558196.patch;https://issues.apache.org/jira/secure/attachment/12625325/FELIX-4408-test-r1558196.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-01-27 08:08:50.446,,,no_permission,,,,,,,,,,,,370061,,,Mon Jan 27 08:08:50 UTC 2014,,,,,,0|i1rs4n:,370363,,,,,,,,27/Jan/14 06:03;tripod;attaching test case that highlights the problem.,27/Jan/14 06:10;tripod;suggested patch using {{toLowerCase(Locale.ENGLISH)}},"27/Jan/14 08:08;fmeschbe;Thanks for providing the patch. I have applied it slightly modified in Rev. 1561599: Instead of calling the String.toLowerCase(Locale) method in each place, I created a new helper method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] [R6/rfc190] support 1.3 namespace,FELIX-4406,12690408,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Jan/14 21:11,11/Aug/15 05:09,14/Mar/19 02:48,06/Aug/14 02:29,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,Support parsing and interpreting the xml descriptor namespace http://www.osgi.org/xmlns/scr/v1.3.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,369360,,,2014-01-22 21:11:15.0,,,,,,0|i1rntz:,369663,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] [R6rfc190] support prototype scope,FELIX-4405,12690380,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Jan/14 21:08,11/Aug/15 05:09,14/Mar/19 02:48,04/Feb/15 09:42,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"DS will support the R6 concept of prototype scope where each service request returns a different instance.  We need to support this in the get service side providing new instances and in references that use prototype scope services, including supporting new event method parameters and modifying the behavior of locateService",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-04 09:42:47.003,,,no_permission,,,,,,,,,,,,369333,,,Wed Feb 04 09:42:47 UTC 2015,,,,,,0|i1rnnz:,369636,,,,,,,,"03/Aug/14 19:31;djencks;implemented in revs 1604454, 1615440, 1615441, 1615442 ","18/Aug/14 06:27;djencks;The code to determine the parameter types in a bind method had a bug whereby two (or more) threads could add all the correct values to the parameter type list, resulting in multiple copies and a list that is too long.  Fixed in r1618546",21/Nov/14 22:09;djencks;Spec has added a ComponentServiceObjects class that we need to supply to bind methods instead of ServiceObjects.,04/Feb/15 09:42;cziegeler;Resolving this as the ComponentServiceObjects is handled in FELIX-4769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] [R6/rfc190] implement additional event method signature single Map,FELIX-4404,12690379,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Jan/14 21:05,11/Aug/15 05:09,14/Mar/19 02:48,03/Aug/14 19:33,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,Map by itself can occur as an event method parameter.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,369332,,,Sun Aug 03 19:33:51 UTC 2014,,,,,,0|i1rnnr:,369635,,,,,,,,03/Aug/14 19:33;djencks;Implemented as part of 4405.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] [R6/rfc190] implement configuration through annotation instances,FELIX-4403,12690377,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Jan/14 21:00,11/Aug/15 05:09,14/Mar/19 02:48,06/Aug/14 02:30,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Rfc190 includes a new system for typed configuration based on annotation instances.  The annotation definition can supply default values, and at runtime an annotation instance is supplied with the values from config admin (or newInstance)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,369330,,,Wed Aug 06 02:30:04 UTC 2014,,,,,,0|i1rnnb:,369633,,,,,,,,06/Aug/14 02:30;djencks;I believe rtc 190 specified support is complete.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] [R6/rfc190] implement multiple pid support,FELIX-4402,12690375,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Jan/14 20:57,11/Aug/15 05:09,14/Mar/19 02:48,03/Aug/14 19:34,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,DS needs to be able to merge configuration from multiple pids at most one of which is a factory pid,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,369328,,,Sun Aug 03 19:34:40 UTC 2014,,,,,,0|i1rnmv:,369631,,,,,,,,03/Aug/14 19:34;djencks;I believe this is completely implemented,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] [R6/rfc190] Implement runtime/introspection/console based on DTOs,FELIX-4401,12690369,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Jan/14 20:30,11/Aug/15 05:09,14/Mar/19 02:48,24/Mar/15 00:33,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"The new spec has a DTO tree to expose the state of DS components.  We need to supply this.

I think we should rewrite the console commands to expose this info.  It is significantly different from the current console commands since it separates components specified in the xml from instances that may be multiple from config admin factory configurations (or component factories).",,,,,,,,,,,,,,,,,,FELIX-2530,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,369322,,,Tue Mar 24 00:33:37 UTC 2015,,,,,,0|i1rnlj:,369625,,,,,,,,06/Aug/14 23:13;djencks;There has been an update to the rfc190 dto classes.,24/Mar/15 00:33;djencks;Code is currently up to date with current spec classes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] for factory components, configuration changes should affect existing instances",FELIX-4396,12689533,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,17/Jan/14 18:18,11/Aug/15 05:09,14/Mar/19 02:48,06/Aug/14 02:31,scr-1.8.0,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Discussion on the expert group revealed that if you have a factory component configured through config admin, modifying the configuration is supposed to modify all the existing instances created through newInstance.  If there is no modify method or this results in  the instance becoming unsatisfied then the instance should be disposed of (permanently)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,368500,,,2014-01-17 18:18:39.0,,,,,,0|i1rijj:,368804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DependencyManager Configuration Dependency does not clone some class fields,FELIX-4395,12689500,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,17/Jan/14 14:17,22/Jul/14 08:04,14/Mar/19 02:48,06/Jul/14 22:05,dependencymanager-3.1.0,,,,,,dependencymanager-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"In the ConfigurationDependencyImpl(ConfigurationDependencyImpl prototype) constructor, some attributes are not cloned and I think they should be copied (m_propagateCallbackInstance, and propagateCallbackMethod, m_metaType fields).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,368467,,,Sun Jul 06 22:05:38 UTC 2014,,,,,,0|i1ric7:,368771,,,,,,,,06/Jul/14 22:05;pderop;Committed a fix in rv 1608306.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race problems in DependencyManager Configuration Dependency,FELIX-4394,12689499,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,17/Jan/14 14:12,19/Mar/15 06:00,14/Mar/19 02:48,24/Oct/14 23:37,dependencymanager-3.1.0,,,,,,org.apache.felix.dependencymanager-r1,,,,,,,Dependency Manager,,,,,,0,,,,,,"There are some synchronization issues in the ConfigurationDependencyImpl:

1) in the stop(DependencyService service) method, if the current size of the ""m_services"" list is greater than 1, then the 'service' method parameter to be removed is not removed from the internal ""m_services"" list. 

Also, if the list size is 1, then the service is removed from the list, but outside the synchronized block.

2) in the updated(Dictionary settings) method: the service list (m_services) is iterated outside a synchronized block.

3) the ensureActive method should be synchronized since it checks the m_services list size.

4) I'm sometimes seeing the following WARN message logged from the ConfigurationDependencyImpl.updated class:

                    m_logger.log(Logger.LOG_ERROR, ""Service "" + ds + "" with configuration dependency "" + this + "" could not be instantiated."");",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,368466,,,Fri Oct 24 23:37:18 UTC 2014,,,,,,0|i1ribz:,368770,,,,,,,,17/Jan/14 14:14;pderop;attached patch.,24/Oct/14 23:37;pderop;All the mentioned synchronization issues have been fixed in DM4 (but the patch attached to this issue has not been applied since DM4 has been totally revamped using a new single thread model).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] R6/rfc190 Support <refname>.cardinality.minimum configuration property,FELIX-4391,12689119,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,15/Jan/14 23:16,11/Aug/15 05:09,14/Mar/19 02:48,24/Jan/14 01:36,scr-1.8.2,,,,,,scr-2.0.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"rfc190 section 5.10 introduces the ability to set the minimum cardinality of a reference in configuration properties through a <refname>.cardinality.minimum property.

This can be supported right now since it doesn't involve any schema or interface changes, just looking for a new config property.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-15 23:53:33.935,,,no_permission,,,,,,,,,,,,368086,,,Fri Jan 24 01:36:28 UTC 2014,,,,,,0|i1rfzz:,368391,,,,,,,,"15/Jan/14 23:53;fmeschbe;I would still only support this for a higher Descriptor Namespace version due to the potential collision with a configuration property the same name used for something else (however unlikely, though).","16/Jan/14 21:16;djencks;I believe the current rfc 190 draft does not mention restricting the application of this property to 1.3 namespaces, and I don't really think it should.  Maybe if you do you should comment on osgi https://www.osgi.org/members/bugzilla/show_bug.cgi?id=2573","24/Jan/14 01:36;djencks;Implemented with test in r1560874.

Discussion on the CPEG indicates that this is indeed intended to apply to all namespaces, not just 1.3.  The spec is likely to explicitly reserve property names starting with a <refname> to avoid any potential similar name collisions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Login modules registered via LMF not updated if LMF service config changes,FELIX-4390,12689074,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,tripod,tripod,15/Jan/14 19:45,16/Jan/14 19:00,14/Mar/19 02:48,16/Jan/14 00:30,jaas-0.0.2,,,,,,jaas-0.0.2,,,,,,,JAAS,,,,,,0,,,,,,"The configuration entries of LoginModules registered via a LoginModuleFactory service are not updated, if the LMF service changes its configuration.",,,,,,,,,,,,,,,,,,,,15/Jan/14 19:50;tripod;felix-4390-r1558508.patch;https://issues.apache.org/jira/secure/attachment/12623204/felix-4390-r1558508.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-16 00:30:57.549,,,no_permission,,,,,,,,,,,,368041,,,Thu Jan 16 19:00:53 UTC 2014,,,,,,0|i1rfr3:,368347,,,,,,,,"15/Jan/14 19:50;tripod;attached patch that fixes this issue.

note: the patch overrides the patch provided in FELIX-4389, as it also modifies the lines with the ranking property.",16/Jan/14 00:30;fmeschbe;Thanks for providing the patch. I have applied it in Rev. 1558624,16/Jan/14 19:00;tripod;issue fixed. thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Initial start level not considered when bundle.start() is called,FELIX-4388,12689061,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,cziegeler,cziegeler,15/Jan/14 18:57,27/Apr/15 07:04,14/Mar/19 02:48,15/Jan/14 19:21,framework-4.2.0,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,"If a start level service is available, and the initial start level is set to a higher level than the current one, a call to bundle.start() of a bundle which has no start level defined, results in the bundle being immediately started.
However, according to the spec it should only be started when the initial start level is reached.

I think this is a bug in BundleImpl as it is returning -1 if no start level is set for the bundle instead of the default level. This patch should fix this:

Index: src/main/java/org/apache/felix/framework/BundleImpl.java
===================================================================
--- src/main/java/org/apache/felix/framework/BundleImpl.java	(Revision 1558397)
+++ src/main/java/org/apache/felix/framework/BundleImpl.java	(Arbeitskopie)
@@ -861,7 +861,12 @@
     {
         try
         {
-            return m_archive.getStartLevel();
+            int level = m_archive.getStartLevel();
+            if ( level == -1 )
+            {
+                level = defaultLevel;
+            }
+            return level;
         }
         catch (Exception ex)
         {
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-15 19:16:21.089,,,no_permission,,,,,,,,,,,,368028,,,Wed Jan 15 19:21:48 UTC 2014,,,,,,0|i1rfof:,368335,,,,,,,,"15/Jan/14 19:16;rickhall;Yes, I think you are correct. This code used to be correct back in the day were we had separate files in the bundle cache for a saved start level. In that case, if the bundle didn't have a set start level, then it would get an exception when it tried to open the file. A while ago we switched to a single file for all bundle persisted information which breaks the existing logic.","15/Jan/14 19:21;cziegeler;Thanks Richard, I've applied the patch.

Yes, this used to work in previous versions (3.x)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAAS config fields are initialized too late in the ConfigSpiOsgi constructor,FELIX-4387,12689060,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,tripod,tripod,15/Jan/14 18:55,16/Jan/14 19:01,14/Mar/19 02:48,16/Jan/14 00:25,jaas-0.0.2,,,,,,jaas-0.0.2,,,,,,,JAAS,,,,,,0,,,,,,"The {{originalConfig}} and {{proxyConfig}} fields are initialized after the service registration, which is a problem in the {{update()}} call triggered by the config admin.",,,,,,,,,,,,,,,,,,,,15/Jan/14 18:57;tripod;felix-4387-r1558508.patch;https://issues.apache.org/jira/secure/attachment/12623192/felix-4387-r1558508.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-16 00:25:02.442,,,no_permission,,,,,,,,,,,,368027,,,Thu Jan 16 19:01:15 UTC 2014,,,,,,0|i1rfo7:,368334,,,,,,,,15/Jan/14 18:57;tripod;suggested patch moves the initialization of those fields right before the config update and service registration.,16/Jan/14 00:25;fmeschbe;Thanks for providing the patch. I have applied in in Rev. 1558623,16/Jan/14 19:01;tripod;issue fixed. thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock while creating composite instances programatically,FELIX-4386,12689053,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,clement.escoffier,patricio78,patricio78,15/Jan/14 18:17,07/Mar/14 08:27,14/Mar/19 02:48,18/Jan/14 08:46,ipojo-composite-1.8.4,,,,,,ipojo-runtime-1.11.1,,,,,,,iPOJO,,,,,,0,,,,,,"DEADLOCK DETECTED:
==================

[deadlocked thread] [iPOJO] pool-1-thread-1:
-------------------------------------------
Thread '[iPOJO] pool-1-thread-1' is waiting to acquire lock 'org.apache.felix.ipojo.composite.CompositeFactory@4b61f9d9' that is held by thread '[ACTIVE] ExecuteThread: '2'

Stack trace:
------------
	org.apache.felix.ipojo.IPojoFactory.getComponentDescription(IPojoFactory.java:371)
	org.apache.felix.ipojo.composite.instance.InstanceHandler.__M_bindFactory(InstanceHandler.java:179)
	org.apache.felix.ipojo.composite.instance.InstanceHandler.bindFactory(InstanceHandler.java)
	sun.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	java.lang.reflect.Method.invoke(Method.java:597)
	org.apache.felix.ipojo.util.Callback.call(Callback.java:260)
	org.apache.felix.ipojo.handlers.dependency.DependencyCallback.callOnInstance(DependencyCallback.java:303)
	org.apache.felix.ipojo.handlers.dependency.Dependency.invokeCallback(Dependency.java:340)
	org.apache.felix.ipojo.handlers.dependency.Dependency.onObjectCreation(Dependency.java:290)
	org.apache.felix.ipojo.handlers.dependency.DependencyHandler.__M_onCreation(DependencyHandler.java:524)
	org.apache.felix.ipojo.handlers.dependency.DependencyHandler.onCreation(DependencyHandler.java)
	org.apache.felix.ipojo.HandlerManager.start(HandlerManager.java:132)
	org.apache.felix.ipojo.composite.CompositeManager.start(CompositeManager.java:355)
	org.apache.felix.ipojo.composite.CompositeFactory.createInstance(CompositeFactory.java:146)
	org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:319)
	org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:240)
	foo.activator.DeployInstanceActivator$1.addingService(DeployInstanceActivator.java:43)
	org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932)
	org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864)
	org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
	org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:894)
	org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
	org.apache.felix.framework.Felix.registerService(Felix.java:3423)
	org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	org.apache.felix.ipojo.IPojoFactory.start(IPojoFactory.java:686)
	org.apache.felix.ipojo.extender.internal.linker.ManagedType$ExtensionSupport$1.call(ManagedType.java:229)
	org.apache.felix.ipojo.extender.internal.linker.ManagedType$ExtensionSupport$1.call(ManagedType.java:216)
	org.apache.felix.ipojo.extender.internal.queue.JobInfoCallable.call(JobInfoCallable.java:114)
	java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	java.util.concurrent.FutureTask.run(FutureTask.java:138)
	java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	java.lang.Thread.run(Thread.java:662)

[deadlocked thread] [ACTIVE] ExecuteThread: '2'
--------------------------------------------------------------------------------------------------
Thread '[ACTIVE] ExecuteThread: '2' waiting to acquire lock 'org.apache.felix.ipojo.composite.CompositeFactory@d5a3c39' that is held by thread '[iPOJO] pool-1-thread-1'

Stack trace:
------------
	org.apache.felix.ipojo.IPojoFactory.getComponentDescription(IPojoFactory.java:371)
	org.apache.felix.ipojo.composite.instance.InstanceHandler.__M_bindFactory(InstanceHandler.java:179)
	org.apache.felix.ipojo.composite.instance.InstanceHandler.bindFactory(InstanceHandler.java)
	sun.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	java.lang.reflect.Method.invoke(Method.java:597)
	org.apache.felix.ipojo.util.Callback.call(Callback.java:260)
	org.apache.felix.ipojo.handlers.dependency.DependencyCallback.callOnInstance(DependencyCallback.java:303)
	org.apache.felix.ipojo.handlers.dependency.Dependency.invokeCallback(Dependency.java:340)
	org.apache.felix.ipojo.handlers.dependency.Dependency.onObjectCreation(Dependency.java:290)
	org.apache.felix.ipojo.handlers.dependency.DependencyHandler.__M_onCreation(DependencyHandler.java:524)
	org.apache.felix.ipojo.handlers.dependency.DependencyHandler.onCreation(DependencyHandler.java)
	org.apache.felix.ipojo.HandlerManager.start(HandlerManager.java:132)
	org.apache.felix.ipojo.composite.CompositeManager.start(CompositeManager.java:355)
	org.apache.felix.ipojo.composite.CompositeFactory.createInstance(CompositeFactory.java:146)
	org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:319)
	org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:240)
	foo.activator.DeployInstanceActivator$1.addingService(DeployInstanceActivator.java:43)
	org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932)
	org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864)
	org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:317)
	org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)
	foo.activator.DeployInstanceActivator.start(DeployInstanceActivator.java:74)
	org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
	org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
	org.apache.felix.framework.Felix.updateBundle(Felix.java:2404)
	org.apache.felix.framework.BundleImpl.update(BundleImpl.java:973)
	...

> 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-18 08:46:55.66,,,no_permission,,,,,,,,,,,,368020,,,Sat Jan 18 08:46:55 UTC 2014,,,,,,0|i1rfmn:,368327,,,,,,,,"15/Jan/14 18:23;patricio78;The problem seems to be in org.apache.felix.ipojo.composite.instance.InstanceHandler. The handler is tracking all iPOJO Factories by the bind method bindFactory.
Inside the bindFactory there is a call to factory.getComponentDescription(), which is synchronized. That other factory lock is held by another thread creating a composite instance. Both threads hold a lock on their respective factories, and both receive a bindFactory call with the other's thread Factory.
I'm running in a system with hundred of bundles, each containing a composite metadata.xml. Another set of bundles take care of creating/disposing composite instances programatically, by tracking on their respective composite factory bundle.
I also see a performance and memory footprint degradation as the InstanceHandler is actually tracking all Factories in the system, without any filtering.","18/Jan/14 08:46;clement.escoffier;I've fixed it in the trunk.

The description field does not need to have synchronized accesses.

Could you check ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in Configuration Admin Service when deleting configuration,FELIX-4385,12688998,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,15/Jan/14 12:49,17/Mar/15 06:44,14/Mar/19 02:48,03/Feb/14 15:26,configadmin-1.8.2,,,,,,configadmin-1.8.2,,,,,,,Configuration Admin,,,,,,0,,,,,,"While writing a test for Apache Felix DependencyManager, I came across the following exception from ConfigAdmin 1.8.0 (under high load):

{code}
ERROR - CM Configuration Updater (Delete: pid=Aspect2.pid23) : Unexpected problem providing configuration Aspect2.pid23 to service [org.osgi.service.cm.ManagedService, id=117, bundle=26/local] - java.lang.NullPointerException
        at java.lang.StringBuffer.<init>(StringBuffer.java:120)
        at org.apache.felix.cm.impl.ConfigurationManager.getTargetedConfiguration(ConfigurationManager.java:523)
        at org.apache.felix.cm.impl.ConfigurationManager$ConfigurationProvider.provideReplacement(ConfigurationManager.java:1666)
        at org.apache.felix.cm.impl.ConfigurationManager$DeleteConfiguration.run(ConfigurationManager.java:1816)
        at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:103)
        at java.lang.Thread.run(Thread.java:722)
{code}

I suspect that this NPE occurs in the following scenario:

1- one ManagedService listening to a given configuration pid is being unregistered (from one thread)
2- concurrently, another thread is deleting the Configuration for the same PID the ManagedService was registered for.

I never wrote some test cases for configuration admin sub-project but I will try to write one in order to reproduce the issue.

For now, I'm using the attached patch, which seems to fix the problem.",,,,,,,,,,,,,,,,,,,,18/Jan/14 23:42;pderop;FELIX-4385-integrationtest.tgz;https://issues.apache.org/jira/secure/attachment/12623836/FELIX-4385-integrationtest.tgz,19/Jan/14 00:05;pderop;FELIX-4385.patch;https://issues.apache.org/jira/secure/attachment/12623838/FELIX-4385.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-01-31 14:45:54.847,,,no_permission,,,,,,,,,,,,367965,,,Mon Feb 03 15:26:35 UTC 2014,,,,,,0|i1rfan:,368272,,,,,,,,15/Jan/14 12:50;pderop;Attached the proposed patch.,"18/Jan/14 23:37;pderop;Attached a proposed integration test which seems to reproduce the problem.

The test uses an executor for concurrently creating some ManagedServices and for each MS, a configuration is created. When all MS are updated with the configuration, then the ManagedServices are unregistered from the OSGI registry (concurrently) and the associated configurations are also deleted.
The test uses a special org.apache.felix.cm.integration.helper.Log class, which implements an OSGi LogService: this service just tracks if some warnings are logged (the configuration admin logs exceptions using OSGi Log Service).

The test is successful if no warns have been detected, and fails if some warns have been logged (like NullPointerExceptions).

Notice that using this test, a different stack trace occurs than the one initially reported in this issue:

ERROR - CM Configuration Updater (Update: pid=pid.2-80) : Unexpected problem executing task - java.lang.NullPointerException
        at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1726)
        at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:103)
        at java.lang.Thread.run(Thread.java:744)
","18/Jan/14 23:42;pderop;Updated the integration test with more comments, and also added missing license header.",18/Jan/14 23:55;pderop;Updated the initially proposed patch in order to avoid the NPE line 1726.,19/Jan/14 00:05;pderop;Updated the proposed patch with some DEBUG logs when a managed service is detected as being unregistered at the same time the configuration is updating.,"31/Jan/14 14:14;pderop;Hi,

Does anybody had a chance to take a look at the attached patch ?
I am tempted to commit the patch and also the integration test, but it would be great if someone else could double check if the issue is valid and/or if the patch is satisfying ?

thanks;
/Pierre","31/Jan/14 14:45;jajans;Patch looks sound to me. 

The only things I saw in your itest was that the {{parallelism}} variable will always least 10? I'd suspect it would be at least all of the available processors?","31/Jan/14 15:13;pderop;Thanks for reviewing Jan-Willem; 

Regarding the parallelism, I think it is ok because the intent is to use at least 10 parallel threads if the available processors is lower than 10, or all available processors if the number of processors is greater than 10:

         int parallelism = Math.max(10, Runtime.getRuntime().availableProcessors());

So, on my cluster, this allows to execute the test with 32 threads (I have 32 cpus), and on my laptop I'm using 10 threads even if I'm only having 4 cpus.

Thanks;","03/Feb/14 15:26;pderop;I committed the proposed patch in rv 1563946, and also added a comment regarding the ""parallelism"" parameter in the FELIX4385_StressTest.
I think the issue can be resolved now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Metatype generation should use component name (and not classname),FELIX-4383,12688549,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,cziegeler,cziegeler,13/Jan/14 15:14,16/Mar/14 10:05,14/Mar/19 02:48,13/Jan/14 15:16,maven-scr-plugin 1.15.0,scr ant task 1.9.0,scr generator 1.8.2,,,,maven-scr-plugin 1.16.0,scr ant task 1.10.0,scr generator 1.9.0,,,,,SCR Tooling,,,,,,0,,,,,,"If the metatype information is inlined, a metatype.properties file is generated. However the key contains the class name and not the component name. In most cases this is identical, however if not, the component name should be used instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,367568,,,2014-01-13 15:14:04.0,,,,,,0|i1rcvb:,367876,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Properties, references and services from inherited classes are only used if the class has the component annotation",FELIX-4379,12688203,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,10/Jan/14 09:08,16/Mar/14 10:05,14/Mar/19 02:48,10/Jan/14 09:09,maven-scr-plugin 1.15.0,scr ant task 1.9.0,scr generator 1.8.2,,,,maven-scr-plugin 1.16.0,scr ant task 1.10.0,scr generator 1.9.0,,,,,SCR Tooling,,,,,,0,,,,,,"FELIX-4170 introduced a regression: before the change properties, references and services from all super classes where used (if inheritance of such information was enabled) regardless whether the class had a component annotation or not. FELIX-4170 restricted this to classes having the annotation.
We should support the old behaviour for compatibility",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,367222,,,Fri Jan 10 09:09:25 UTC 2014,,,,,,0|i1rar3:,367531,,,,,,,,10/Jan/14 09:09;cziegeler;Fixed by reverting the changed introduced with FELIX-4170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Repair request header buffer size configuration,FELIX-4377,12687856,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,dpfister,dpfister,08/Jan/14 13:51,01/Aug/15 09:22,14/Mar/19 02:48,08/Jan/14 20:02,http-2.2.1,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"With FELIX-3162, the default request header size was augmented to 16KB. Unfortunately, with a later revision (1346763), this change was lost again and we should re-add it.",,,,,,,,,,,,,,,,,,,,08/Jan/14 16:43;dpfister;patch.txt;https://issues.apache.org/jira/secure/attachment/12621997/patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-08 20:02:56.476,,,no_permission,,,,,,,,,,,,366862,,,Wed Jan 08 20:02:56 UTC 2014,,,,,,0|i1r8jj:,367173,,,,,,,,"08/Jan/14 16:43;dpfister;Attaching patch, that sets request and response header size to the value configured.",08/Jan/14 20:02;fmeschbe;Thank you very much for supplying the patch. I have committed it in Rev. 1556621,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error when reading gosh_profile from stream,FELIX-4375,12687420,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,tverbele,tverbele,06/Jan/14 10:24,14/Jun/18 14:12,14/Mar/19 02:48,19/Jan/16 13:49,gogo.shell-0.10.0,,,,,,,,,,,,,Gogo Shell,,,,,,0,,,,,,"An error occurs when ""gosh_profile"" is read from a stream without knowing the lenght upfront. In that case, method `CharSequence readScript(URI script)` from `Shell.java` causes an error, since it does not correctly handle the case when the length is -1. In that case, a large size buffer is allocated (fixed on 10240 atm), and thus as the buffer will not be completely filled, one cannot use `cbuf.rewind()`, but use `cbuf.flip()` instead.



",Error occurred using Gogo shell on top op Concierge OSGi runtime.,,,,,,,,,,,,,FELIX-5869,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-01-19 13:49:41.293,,,no_permission,,,,,,,,,,,,366421,,,Tue Jan 19 14:41:45 UTC 2016,,,,,,0|i1r5tb:,366732,,,,,,,,"06/Jan/14 10:26;tverbele;Instead of using a large buffer when the stream length is unknown upfront, one could also use a StringBuffer :

{code:java}
    private CharSequence readScript(URI script) throws Exception
    {
        URLConnection conn = script.toURL().openConnection();
        int length = conn.getContentLength();

        StringBuffer sbuf = new StringBuffer();
        
        CharBuffer cbuf;
        if(length == -1)
        	cbuf = CharBuffer.allocate(1024);
        else
        	cbuf = CharBuffer.allocate(length);
        
        InputStream in = conn.getInputStream();
        Reader reader = new InputStreamReader(in);
        
        while(reader.read(cbuf) > 0){
        	cbuf.flip();
        	sbuf.append(cbuf);
        	cbuf.clear(); 
        }
        in.close();
       
        return sbuf;
     }
{code}",19/Jan/16 13:49;jajans;Applied a slightly different version of your proposed patch in rev #1725519.,19/Jan/16 14:41;tverbele;Thanks for fixing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IPOJO: ConcurrentModificationException in ProvidedService,FELIX-4374,12687405,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,klasch42@gmail.com,klasch42@gmail.com,06/Jan/14 08:03,07/Mar/14 08:27,14/Mar/19 02:48,06/Jan/14 10:43,ipojo-runtime-1.11.0,,,,,,ipojo-runtime-1.11.1,,,,,,,iPOJO,,,,,,0,,,,,,"I have a problem with a ManagedServices and IPOJO. 
We have a service that provides externally configured properties. We want to use the managed service approach to get automatic refreshs of changed properties. The properties are read from a file {karaf}/etc/na.default.properties containing ~500 properties and are injected into the service by @Updated, see code below. 
Basically the code works fine, but from time to time the service startup fails with a ConcurrentModificationException in class ProvidedService. The exception does not show always, but it is reproducible by starting and stopping the bundle various times. The code has been stripped down to be very simple and the problem could still be reproduced. 

IPOJO version is 1.11.0, Karaf version 2.3.3 

Short stacktrace: 
{code}
2014-01-03 16:17:41,357 | INFO  |  pool-1-thread-1 | product-properties-services      | ?                                   ? | 64 - product-properties-services - 0.0.1.SNAPSHOT | [INFO] com.nextaudience.clustor.product.properties.services.DefaultPropertiesResolverService : An error occurred when creating an instance of com.nextaudience.clustor.product.properties.services.DefaultPropertiesResolverService 
java.util.ConcurrentModificationException 
        at java.util.TreeMap$PrivateEntryIterator.nextEntry(TreeMap.java:1115)[:1.7.0_45] 
        at java.util.TreeMap$ValueIterator.next(TreeMap.java:1160)[:1.7.0_45] 
        at org.apache.felix.ipojo.handlers.providedservice.ProvidedService.getServiceProperties(ProvidedService.java:447)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.handlers.providedservice.ProvidedService.registerService(ProvidedService.java:357)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.handlers.providedservice.ProvidedServiceHandler.__M_stateChanged(ProvidedServiceHandler.java:484)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.handlers.providedservice.ProvidedServiceHandler.stateChanged(ProvidedServiceHandler.java)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:536)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:418)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:179)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:319)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:240)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:312)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:306)[55:org.apache.felix.ipojo:1.11.0] 
        at org.apache.felix.ipojo.extender.internal.queue.JobInfoCallable.call(JobInfoCallable.java:114)[55:org.apache.felix.ipojo:1.11.0] 
        at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_45] 
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_45] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_45] 
        at java.lang.Thread.run(Thread.java:744)[:1.7.0_45] 
2014-01-03 16:17:41,357 | ERROR |  pool-1-thread-1 | product-properties-services      | ?                                   ? | 64 - product-properties-services - 0.0.1.SNAPSHOT | [ERROR] com.nextaudience.clustor.product.properties.services.DefaultPropertiesResolverService : null 
{code}

Our service: 

{code
@Component(managedservice = ""na.default.properties"", publicFactory = false) 
@Instantiate 
@Provides 
public class DefaultPropertiesResolverService implements ObservablePropertiesResolver { 

    private static final Logger LOG = LoggerFactory.getLogger(DefaultPropertiesResolverService.class); 

    @ServiceController 
    private boolean ready; 
    private Dictionary<String, String> properties; 
    
    @Validate 
    synchronized private void startService() { 
        LOG.info(""startService start...""); 
        if (getProperties() == null) { 
            LOG.warn(""No properties for "" + getClass().getName()); 
            return; 
        } 
        if (getProperties().isEmpty()) { 
            LOG.warn(""Empty properties for "" + getClass().getName()); 
            return; 
        } 
        ready = true; 
        LOG.info(DefaultPropertiesResolverService.class.getName() + ""::Start""); 
    } 

    @Invalidate 
    synchronized private void stopService() { 
        ready = false; 
        LOG.info(DefaultPropertiesResolverService.class.getName() + ""::Stop""); 
    } 

    synchronized public Dictionary<String, String> getProperties() { 
        return properties; 
    } 
    
    @Updated 
    synchronized public void updateLocalProperties(Dictionary<String, String> cfgProperties) { 
        LOG.info(""DefaultProperties: updateLocalProperties start...""); 
        properties = cfgProperties; 
        LOG.info(""DefaultProperties: updateLocalProperties end""); 
    } 
} 
{code",Karaf 2.3.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-06 10:43:25.083,,,no_permission,,,,,,,,,,,,366406,,,Fri Jan 17 08:23:54 UTC 2014,,,,,,0|i1r5pz:,366717,,,,,,,,"06/Jan/14 10:43;clement.escoffier;I've committed a fix in the trunk, could you try it ?","17/Jan/14 08:23;klasch42@gmail.com;Sorry for the late response. Meanwhile I have build a snapshot based on trunk containing your fix and I can confirm that I do not see the ConcurrentModificationExceptions anymore. Anyway, we still see weird unstable behavior with our managed services, that read properties via @Updated. Right it looks like the service sometimes gets stalled (or deadlocked). We have no reproducible scenario yet, it just happens from time to time. After restarting the service or restarting Karaf the problem disappears, but shows up again randomly.
We will keep an eye on this issue and come back as sonn as we have some more hints to reproduce it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support OSGi Repository 1.0 Specification,FELIX-4368,12686986,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,02/Jan/14 16:17,17/Mar/15 06:53,14/Mar/19 02:48,02/May/14 14:00,bundlerepository-1.6.6,,,,,,bundlerepository-2.0.2,,,,,,,Bundle Repository (OBR),,,,,,1,,,,,,"While logically similar, the Felix OBR does not yet support the OSGi Repository Specification, chapter 132 in the Enterprise R5 spec (http://www.osgi.org/Download/Release5)

This is a holder issue for this functionality.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-09 11:41:29.912,,,no_permission,,,,,,,,,,,,365981,,,Fri May 02 14:00:16 UTC 2014,,,,,,0|i1r33b:,366288,,,,,,,,09/Apr/14 11:41;gnt;Wouldn't it make sense to set up a separate repository sub-project instead ?,"09/Apr/14 11:51;bosschaert;> Wouldn't it make sense to set up a separate repository sub-project instead ?

No, I don't think so. The current OBR has semantically a lot in common with the OSGi Repository API. The APIs are just different. So I think it makes more sense to add the spec-compliant APIs to the existing OBR, which effectively gives it two ways of interacting with it: the OBR-proprietary way and the OSGi spec-compliant way.
But regardless of how you access it, the content is only stored once.",09/Apr/14 12:48;gnt;Isn't the xml different too ?,"09/Apr/14 13:00;bosschaert;The format is different, but it can feed into a common model. 
I think that over time we might see that the proprietary OBR APIs and formats may become used less and the spec-compliant forms become used more. I think that having the main OBR implementation support both formats allows such an evolution better than splitting the spec-compliant API off in a separate project.","02/May/14 14:00;bosschaert;With commit http://svn.apache.org/viewvc?view=revision&revision=1591880 the main work for this issue is done. All of the Repository 1.0 CT tests pass, the OSGi org.osgi.service.repository.Repository Service is now available alongside the org.apache.felix.bundlerepository.RepositoryAdmin.

Both services work on the same data model. The repository XML parser can deal with both old-style OBR XML as well with spec-compliant XML. The API for parsing the XML is the same. If the document being parsed has the namespace http://www.osgi.org/xmlns/repository/v1.0 it is assumed to be a spec-compliant XML, otherwise it is assumed to be old-style OBR xml.

I'm sure that there are little loose ends here and there, but they should be filed as separate bugs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Input stream not properly closed on org.apache.felix.framework.Felix.getFrameworkVersion,FELIX-4365,12685836,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,snybril,snybril,20/Dec/13 15:40,20/Dec/13 16:10,14/Mar/19 02:48,20/Dec/13 16:00,,,,,,,framework-4.4.0,,,,,,,Framework,Main Distribution,,,,,0,,,,,,"Dalvik CloseGard detects that an ImputStrem is not properly closed on org.apache.felix.framework.Felix.getFrameworkVersion

Stack Trace :
W/System  ( 3466): A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.
W/System  ( 3466): java.lang.Throwable: Explicit termination method 'end' not called
W/System  ( 3466): 	at dalvik.system.CloseGuard.open(CloseGuard.java:184)
W/System  ( 3466): 	at java.util.zip.Inflater.<init>(Inflater.java:82)
W/System  ( 3466): 	at java.util.zip.ZipFile.getInputStream(ZipFile.java:270)
W/System  ( 3466): 	at java.util.jar.JarFile.getInputStream(JarFile.java:388)
W/System  ( 3466): 	at libcore.net.url.JarURLConnectionImpl.getInputStream(JarURLConnectionImpl.java:226)
W/System  ( 3466): 	at java.net.URL.openStream(URL.java:462)
W/System  ( 3466): 	at java.lang.ClassLoader.getResourceAsStream(ClassLoader.java:436)
W/System  ( 3466): 	at java.lang.Class.getResourceAsStream(Class.java:1114)
W/System  ( 3466): 	at org.apache.felix.framework.Felix.getFrameworkVersion(Felix.java:4484)
W/System  ( 3466): 	at org.apache.felix.framework.Felix.initializeFrameworkProperties(Felix.java:4459)
W/System  ( 3466): 	at org.apache.felix.framework.Felix.<init>(Felix.java:353)
W/System  ( 3466): 	at org.apache.felix.framework.FrameworkFactory.newFramework(FrameworkFactory.java:28)
W/System  ( 3466): 	at org.apache.felix.main.Main.main(Main.java:287)
W/System  ( 3466): 	at dalvik.system.NativeStart.main(Native Method)
W/System  ( 3466): A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.
W/System  ( 3466): java.lang.Throwable: Explicit termination method 'end' not called
W/System  ( 3466): 	at dalvik.system.CloseGuard.open(CloseGuard.java:184)
W/System  ( 3466): 	at java.util.zip.Inflater.<init>(Inflater.java:82)
W/System  ( 3466): 	at java.util.zip.ZipFile.getInputStream(ZipFile.java:270)
W/System  ( 3466): 	at org.apache.felix.framework.util.WeakZipFileFactory$WeakZipFile.getInputStream(WeakZipFileFactory.java:264)
W/System  ( 3466): 	at org.apache.felix.framework.cache.JarContent.getEntryAsStream(JarContent.java:198)
W/System  ( 3466): 	at org.apache.felix.framework.BundleRevisionImpl.getInputStream(BundleRevisionImpl.java:603)
W/System  ( 3466): 	at org.apache.felix.framework.URLHandlersBundleURLConnection.connect(URLHandlersBundleURLConnection.java:150)
W/System  ( 3466): 	at org.apache.felix.framework.URLHandlersBundleURLConnection.getInputStream(URLHandlersBundleURLConnection.java:161)
W/System  ( 3466): 	at org.apache.felix.framework.BundleImpl.getCurrentLocalizedHeader(BundleImpl.java:431)
W/System  ( 3466): 	at org.apache.felix.framework.Felix.getBundleHeaders(Felix.java:1575)
W/System  ( 3466): 	at org.apache.felix.framework.BundleImpl.getHeaders(BundleImpl.java:335)
W/System  ( 3466): 	at org.apache.felix.framework.BundleImpl.getHeaders(BundleImpl.java:317)
W/System  ( 3466): 	at org.apache.felix.main.AutoProcessor.isFragment(AutoProcessor.java:395)
W/System  ( 3466): 	at org.apache.felix.main.AutoProcessor.processAutoDeploy(AutoProcessor.java:186)
W/System  ( 3466): 	at org.apache.felix.main.AutoProcessor.process(AutoProcessor.java:78)
W/System  ( 3466): 	at org.apache.felix.main.Main.main(Main.java:292)
W/System  ( 3466): 	at dalvik.system.NativeStart.main(Native Method)",android dalvik (4.2.2),120,120,,0%,120,120,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-20 16:00:28.125,,,no_permission,,,,,,,,,,,,365314,,,Fri Dec 20 16:10:13 UTC 2013,,,,,,0|i1qytr:,365616,,,,,,,,20/Dec/13 16:00;rickhall;I just committed a patch to close the input stream. Thanks for reporting this issue; please close it if satisfied.,"20/Dec/13 16:10;snybril;should be ok,
 Thanks !",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Security ConfigAdmin permissions are inherited on the stack,FELIX-4362,12685388,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,fmeschbe,gnt,gnt,18/Dec/13 14:26,17/Mar/15 06:45,14/Mar/19 02:48,03/Mar/15 11:19,configadmin-1.8.0,,,,,,configadmin-1.8.2,,,,,,,Configuration Admin,,,,,,0,,,,,,"It seems to cause lots of issues for me when testing.
For example, I end up with lots of exceptions like:
[CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.fileinstall])] ERROR org.apache.felix.configadmin - [org.osgi.service.cm.ManagedServiceFactory, id=233, bundle=7/mvn:org.apache.felix/org.apache.felix.fileinstall/3.2.6]: Unexpected problem updating configuration org.apache.felix.fileinstall.c0eba252-35f7-4ab6-bc11-ad11e131711c
java.security.AccessControlException: access denied (""java.util.PropertyPermission"" ""java.io.tmpdir"" ""read"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)
	at java.security.AccessController.checkPermission(AccessController.java:559)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1302)
	at java.lang.System.getProperty(System.java:708)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.<init>(DirectoryWatcher.java:109)
	at org.apache.felix.fileinstall.internal.FileInstall.updated(FileInstall.java:246)
	at org.apache.felix.fileinstall.internal.FileInstall$ConfigAdminSupport$Tracker.updated(FileInstall.java:422)
	at org.apache.felix.cm.impl.helper.ManagedServiceFactoryTracker.provideConfiguration(ManagedServiceFactoryTracker.java:88)
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceFactoryUpdate.provide(ConfigurationManager.java:1605)
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceFactoryUpdate.run(ConfigurationManager.java:1548)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:103)
	at java.lang.Thread.run(Thread.java:744)
I think if we want to allow such a permissions file, we also need to ensure that all access to bundles are not conditioned by it.
In the above stack trace and when running with a security manager, the call to service.updated() should be done inside a priviledged action I think:
{code}
  return AccessController.doPrivileged(new PrivilegedAction<Object>() {
    public Object run() { service.updated( configPid.toString(), props ); }
  }, accessControlContext);
{code}
so that permissions of ConfigAdmin bundle are not inherited by other bundles.",,,,,,,,,,,,,,KARAF-2636,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-28 20:15:36.372,,,no_permission,,,,,,,,,,,,364465,,,Sat Dec 28 20:15:36 UTC 2013,,,,,,0|i1qtl3:,364765,,,,,,,,"28/Dec/13 20:15;fmeschbe;Implemented calling the ManagedService[Factory] methods as privileged actions if a SecurityManager is installed in Rev. 1553904.

As for the AccessControlContext required: I am not really sure, what AccessControlContext we should use here, so an AccessControlContext is created using the called service's ProtectionDomain. For sure, the AccessControlContext from AccessControll.getContext() cannot be used because that is based on the ConfigurationAdmin bundle's protection domain.

The trunk build currently passes our own tests as well as OSGi CT tests.

Please check, whether a trunk build of the Configuration Admin bundle fixes your issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible ConcurrentModificationException in DependencyManager.getComponents(),FELIX-4361,12685339,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,marrs,paulbakker,paulbakker,18/Dec/13 08:48,22/Jul/14 08:11,14/Mar/19 02:48,22/Jul/14 08:11,dependencymanager-3.1.0,,,,,,dependencymanager-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"DependencyManager.getComponents() returns a unmodifiableList created as follows:

{code}
Collections.unmodifiableList(m_components);
{code}

However, this does not provide safe iteration on the result of calling this method. E.g. the following can fail with a ConcurrentModificationException:

{code}
List<ComponentDeclaration> components = dm.getComponents();
for (ComponentDeclaration c : components) {
  //do something
}
{code}

This is possible because the underlaying collection can be modified during iteration. Wrapping it in an unmodifiable list doesn't prevent this, because the modifications are done on the original list.

This can be fixed by copying the list to a new collection before returning. This is more expensive, but the only way to be safe.

Patch and test provided.",,,,,,,,,,,,,,,,,,,,18/Dec/13 08:51;paulbakker;FELIX-4361.patch;https://issues.apache.org/jira/secure/attachment/12619278/FELIX-4361.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-18 10:06:31.528,,,no_permission,,,,,,,,,,,,364416,,,Tue Jul 22 08:11:00 UTC 2014,,,,,,0|i1qta7:,364716,,,,,,,,"18/Dec/13 10:06;sandermak;One trivial improvement to the patch would be to allocate an ArrayList of the correct capacity, to avoid resizing overhead:

> List copyComponents = new ArrayList(m_components.size());

or even let the list copy itself without for loop in the synchronized block

>  List copyComponents = new ArrayList(m_components);",07/Jan/14 22:03;marrs;Applied the patch.,22/Jul/14 08:11;pderop;reopen in order to set fix version to 3.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure ordered property values in configurations,FELIX-4360,12685336,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,18/Dec/13 08:05,17/Mar/15 06:45,14/Mar/19 02:48,28/Dec/13 18:31,configadmin-1.8.0,,,,,,configadmin-1.8.2,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"Older Configuration Admin Service specifications allowed multi-value properties to be stored as either arrays or Vector objects. Recently the specification was changed to support Collection objects.

The problem is that vectors are sorted, much like lists, while collections do not define an order.

The upcoming specification release of the Configuration Admin Service will clarify that configuration properties provided in a Collection object supporting ordering (e.g. Vector or List) must maintain their order when persisted and provided back.

For our implementation this should not be a problem since we are internally using ArrayLists. Still we might want to cross check and implement a unit or integration test to validate the claim.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,364413,,,Sat Dec 28 18:31:36 UTC 2013,,,,,,0|i1qt9j:,364713,,,,,,,,"28/Dec/13 18:31;fmeschbe;Added a test case validating value order of collection properties in Rev. 1553885

Internally all collection type properties are handled with Vector instances. Therefore order is always preserved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Core R5] org.osgi.test.cases.framework.launch OSGi CT test failure,FELIX-4355,12684186,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,bosschaert,bosschaert,12/Dec/13 09:28,20/Jan/14 21:30,14/Mar/19 02:48,20/Jan/14 21:26,,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,"The org.osgi.test.cases.framework.launch OSGi CT test suite has 1 test failure:

org.osgi.test.cases.framework.launch.junit.ExtensionBundleTests
testFrameworkExtensionDefault(org.osgi.test.cases.framework.launch.junit.ExtensionBundleTests)
junit.framework.AssertionFailedError: expected framework extension bundle to be resolved
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at org.osgi.test.cases.framework.launch.junit.ExtensionBundleTests.testFrameworkExtensionDefault(ExtensionBundleTests.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at aQute.junit.Activator.test(Activator.java:226)
	at aQute.junit.Activator.automatic(Activator.java:118)
	at aQute.junit.Activator.run(Activator.java:59)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-20 20:57:46.519,,,no_permission,,,,,,,,,,,,363258,,,Mon Jan 20 21:30:48 UTC 2014,,,,,,0|i1qm7j:,363564,,,,,,,,"20/Jan/14 20:57;rickhall;This failure appears to result from the fact that the Felix framework assumes the ""extension"" directive is mandatory for extension bundles, but the R5 CT now appears to treat it as optional with a default value of ""framework"". Trying to determine if this is a spec change or CT error.","20/Jan/14 21:26;rickhall;I've modified the manifest parser to assume ""framework"" is the default for the ""extension"" directive in the Fragment-Host header of extension bundles. It is not clear if this was specifically agreed upon during the spec process, but we've agreed that it is reasonable and will clarify it in the spec. Please close if satisfied.",20/Jan/14 21:30;bosschaert;Thanks Richard!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Core R5] ResolverHookTests OSGi CT test failures,FELIX-4354,12684183,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,12/Dec/13 09:17,27/Apr/15 07:05,14/Mar/19 02:48,29/Jan/14 12:51,,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,"Of the OSGi CT ResolverHookTests, 2 tests are failing

org.osgi.test.cases.framework.junit.hooks.resolver.ResolverHookTests
testHookErrors01(org.osgi.test.cases.framework.junit.hooks.resolver.ResolverHookTests)
junit.framework.AssertionFailedError: Wrong number of end called expected:<3> but was:<0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:198)
	at org.osgi.test.cases.framework.junit.hooks.resolver.ResolverHookTests.checkTestResolverHookError(ResolverHookTests.java:380)
	at org.osgi.test.cases.framework.junit.hooks.resolver.ResolverHookTests.testHookErrors01(ResolverHookTests.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at aQute.junit.Activator.test(Activator.java:226)
	at aQute.junit.Activator.automatic(Activator.java:118)
	at aQute.junit.Activator.run(Activator.java:59)

testHookErrors02(org.osgi.test.cases.framework.junit.hooks.resolver.ResolverHookTests)
junit.framework.AssertionFailedError: Wrong number of end called expected:<2> but was:<3>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:198)
	at org.osgi.test.cases.framework.junit.hooks.resolver.ResolverHookTests.testHookErrors02(ResolverHookTests.java:365)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at aQute.junit.Activator.test(Activator.java:226)
	at aQute.junit.Activator.automatic(Activator.java:118)
	at aQute.junit.Activator.run(Activator.java:59)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,363255,,,Wed Jan 29 12:51:17 UTC 2014,,,,,,0|i1qm6v:,363561,,,,,,,,29/Jan/14 11:15;bosschaert;I am currently working on a solution for this...,29/Jan/14 12:51;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1562428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Core R5] BundleWiringTests OSGi CT test failures,FELIX-4353,12684182,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,12/Dec/13 09:13,27/Apr/15 07:05,14/Mar/19 02:48,31/Jan/14 08:59,,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,"Of the OSGi CT BundleWiringTests, 3 tests are failing:

org.osgi.test.cases.framework.junit.wiring.BundleWiringTests
testGetWiring(org.osgi.test.cases.framework.junit.wiring.BundleWiringTests)
junit.framework.AssertionFailedError: Resource does not equal revision expected:<null> but was:<505.0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.assertResourceEqualsRevision(BundleWiringTests.java:359)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.assertResourceEqualsRevision(BundleWiringTests.java:355)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.checkBundleWiring(BundleWiringTests.java:566)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.testGetWiring(BundleWiringTests.java:389)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at aQute.junit.Activator.test(Activator.java:226)
	at aQute.junit.Activator.automatic(Activator.java:118)
	at aQute.junit.Activator.run(Activator.java:59)

testRequiredExecutionEnvironment(org.osgi.test.cases.framework.junit.wiring.BundleWiringTests)
junit.framework.AssertionFailedError: Wrong number of ee wires: org.osgi.test.cases.framework.wiring.ee.tb1 [523] expected:<1> but was:<0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:198)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.checkOSGiEEWiring(BundleWiringTests.java:1205)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.testRequiredExecutionEnvironment(BundleWiringTests.java:1191)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at aQute.junit.Activator.test(Activator.java:226)
	at aQute.junit.Activator.automatic(Activator.java:118)
	at aQute.junit.Activator.run(Activator.java:59)

testDynamicImportPackage(org.osgi.test.cases.framework.junit.wiring.BundleWiringTests)
junit.framework.AssertionFailedError: Wrong provider expected:<null> but was:<553.0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.checkBundleWire(BundleWiringTests.java:955)
	at org.osgi.test.cases.framework.junit.wiring.BundleWiringTests.testDynamicImportPackage(BundleWiringTests.java:1812)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at aQute.junit.Activator.test(Activator.java:226)
	at aQute.junit.Activator.automatic(Activator.java:118)
	at aQute.junit.Activator.run(Activator.java:59)
",,,,,,,,,,,,,,,,,,,,24/Jan/14 16:17;bosschaert;remove-bree-handling.patch;https://issues.apache.org/jira/secure/attachment/12625060/remove-bree-handling.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-20 20:33:42.443,,,no_permission,,,,,,,,,,,,363254,,,Fri Jan 31 08:59:02 UTC 2014,,,,,,0|i1qm6n:,363560,,,,,,,,"20/Jan/14 20:33;rickhall;The first exception was simply that BundleWiring.getResource() was not implemented (it was returning null rather than the associated revision); I've fixed that one.

The second exception appears to simply be that the Bundle-RequiredExecutionEnvironment header needs to be converted into requirements and added to the bundle's requirement list inside of ManifestParser. I did not fix this one, but I'm happy to review a patch.

The last one I am not seeing. I could be related to my fix above or it could be a timing issue, which does happen every now and then (although typically around events).","20/Jan/14 20:55;bosschaert;Thanks Richard - I'll try to come up with a solution for the second one, and will double check on the last one.","22/Jan/14 11:34;bosschaert;I committed a fix that fixes the testRequiredExecutionEnvironment() failure: http://svn.apache.org/viewvc?view=revision&revision=1560317
Richard, do let me know if you think the fix could be improved.

There are two additional remarks to be made about this.
1. Since the BREE matching is now done via generic capabilities and requirements, the special BREE handling code can probably be removed from the ResolveContextImpl? Richard, if you agree I can look into removing that stuff.
2. My fix causes an new OSGi CT failure: DivTests.testEERequirement() I *think* that this is a CT problem and have filed a bug with the OSGi CT for this.
","22/Jan/14 14:37;bosschaert;{quote}
2. My fix causes an new OSGi CT failure: DivTests.testEERequirement() I think that this is a CT problem and have filed a bug with the OSGi CT for this.
{quote}
This is indeed an issue with the CT and has since been fixed in the OSGi CT code. We can expect this test to pass in the Core R6 CT.","24/Jan/14 16:17;bosschaert;In the remove-bree-handling.patch I've removed the explicit handling of the Bundle-RequiredExecutionEnvironment from the code. 
This is not necessary any more since the BREE requirements are now handled as ordinary generic capabilities, so the special-casing can be dropped as in this patch.

I'd be happy to apply the patch myself, but it would be good if someone could take a quick look to make sure that this is actually ok.

BTW the OSGi R5 CT still passed with this change.",31/Jan/14 08:59;bosschaert;Since there are no further comments on the remove-bree-handling.patch and I think it's the right cleanup to do I've committed it in r1563091.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component wrongly activated,FELIX-4350,12683572,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,gnt,gnt,09/Dec/13 10:41,06/Aug/14 02:21,14/Mar/19 02:48,12/Dec/13 18:52,,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,09/Dec/13 10:46;gnt;karaf.log;https://issues.apache.org/jira/secure/attachment/12617807/karaf.log,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-10 01:21:27.243,,,no_permission,,,,,,,,,,,,362645,,,Wed Aug 06 02:21:51 UTC 2014,,,,,,0|i1qie7:,362939,,,,,,,,"09/Dec/13 10:46;gnt;The problem seems to happen between 2013-12-09 11:34:09,210 and 2013-12-09 11:34:09,238.

The GitHttpServerRegistrationHandler component is bound to an HttpService in a stopped state (this service uses a ServiceFactory and the state is changed when the service is ungot, which usually means that this service is not registered anymore in the OSGi registry).
","09/Dec/13 12:37;gnt;It seems that when tracking the httpService, SIngleStaticCustomizer#removedService() is called between the calls to prebind() and getRefs(), but the refPair field isn't set to null.

I wonder if a call to refPair.setFailed() in the removedService() call would help.","09/Dec/13 15:35;gnt;I have written a junit test that shows the problem.
It's basically the following:

{code}
    @Test
    public void test_unbind_while_activating()
    {
        final Component main = findComponentByName(""org.apache.felix.scr.integration.components.Felix4350Component"");
        TestCase.assertNotNull(main);

        ServiceRegistration dep1Reg = bundleContext.registerService(SimpleComponent.class.getName(),
                new ServiceFactory() {
                    public Object getService(Bundle bundle, ServiceRegistration registration) {
                        return new SimpleComponent();
                    }
                    public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {
                    }
                }, null);
        ServiceRegistration dep2Reg = bundleContext.registerService(SimpleComponent2.class.getName(),
                new ServiceFactory() {
                    public Object getService(Bundle bundle, ServiceRegistration registration) {
                        delay(1000);
                        return new SimpleComponent2();
                    }
                    public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {
                    }
                }, null);

        main.enable();
        delay(300);
        dep1Reg.unregister();
        delay(2000);

        ComponentInstance mainCompInst = main.getComponentInstance();

        TestCase.assertNull(mainCompInst);
    }
{code}

Where the Felix4350Component is defined with:
{code}
<components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.1.0"">

    <scr:component xmlns:scr='http://www.osgi.org/xmlns/scr/v1.1.0'
                   enabled='false' name='org.apache.felix.scr.integration.components.Felix4350Component'
                   activate='start' deactivate='stop'>
        <implementation
                class='org.apache.felix.scr.integration.components.Felix4350Component' />
        <reference name='component1'
                   interface='org.apache.felix.scr.integration.components.SimpleComponent'
                   cardinality='1..1' bind='bindComponent1' unbind='unbindComponent1' policy='static' />
        <reference name='component2'
                   interface='org.apache.felix.scr.integration.components.SimpleComponent2'
                   cardinality='1..1' bind='bindComponent2' unbind='unbindComponent2' policy='static' />
    </scr:component>

</components>
{code}

The explanation is the following:
  * the 2 dependencies are registered
  * main is enabled
  * it will go into the prebind() phase and call the first dependency factory, and the second one
  * while the second while is waiting, the first dependency is unregistered
  * the component is created and bound to an unregistered service

I'll now work on a fix.
",09/Dec/13 16:37;gnt;It seems that all customizers suffer from the same problem ...,"09/Dec/13 20:20;gnt;I've committed the integration test (disabled), but not sure how to fix it.
The attempts I've made so far cause other tests to fail :-(

Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	A	scr/src/test/java/org/apache/felix/scr/integration/Felix4350Test.java
	A	scr/src/test/java/org/apache/felix/scr/integration/components/Felix4350Component.java
	A	scr/src/test/resources/integration_test_FELIX_4350.xml
Committed r1549666
","10/Dec/13 01:21;djencks;I committed a fix for this that I think is OK but exposes another problem.  My fix adds a ""deleted"" field to RefPair and checks that a RefPair is not deleted before trying to bind it.  So if a removedService event comes in before starting to open a dependency manager on an instance object, the ref pair will be marked deleted and binding wont happen, and if it comes in after the open starts the open latch should prevent anything happening until after the bind is complete. (rev 1549723)

However, with this change I get a consistent NPE in Felix3680Test where the service tracker is calling removedService will a null tracking object.  I think I introduced a bug in untrack in that a remove event may come in before initial is populated.  Restoring the ""if tracked object is null return"" should fix this. (rev 1549728)

Can you review this and look for problems?","10/Dec/13 16:57;gnt;Thanks for the patch.  I've tested it and unfortunately, my use case isn't solved.
I've extended the integration test to cover that.

As indicated by the test, it seems the component can not recover properly when the dependency is registered after a missed attempt to activate.

Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	scr/src/test/java/org/apache/felix/scr/integration/Felix4350Test.java
Committed r1549890
",11/Dec/13 01:33;djencks;That was harder :-) but I got the test passing again.  Review and more tests would be great.,06/Aug/14 02:21;djencks;closing remaining 1.8.2 resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Synchronization issue in ComponentRegistry,FELIX-4349,12683430,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,08/Dec/13 19:42,06/Aug/14 02:21,14/Mar/19 02:48,08/Dec/13 20:25,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Investigating an issue in some of our integration test, we found that the ComponentRegistry#m_missingDependencies field is wrongly synchronized.

Two methods are accessing this Map, registerMissingDependency and missingServicePresent, but only the first one is synchronized.

Patch proposed:
{code}
diff --git a/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java b/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java
index 9b307a9..c40ab5f 100644
--- a/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java
+++ b/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java
@@ -660,7 +660,7 @@ public class ComponentRegistry implements ScrService, ServiceListener
         }
     }
 
-    public void missingServicePresent( final ServiceReference serviceReference, ComponentActorThread actor )
+    public synchronized void missingServicePresent( final ServiceReference serviceReference, ComponentActorThread actor )
     {
         final List<Entry> dependencyManagers = m_missingDependencies.remove( serviceReference );
         if ( dependencyManagers != null )
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-08 20:06:17.818,,,no_permission,,,,,,,,,,,,362599,,,Wed Aug 06 02:21:51 UTC 2014,,,,,,0|i1qi3z:,362893,,,,,,,,08/Dec/13 20:06;djencks;This looks good.  Could I ask what problem this caused?  A concurrent modification exception or a circular dependency that didn't consistently get eventually resolved (or something else)?,"08/Dec/13 20:20;gnt;The state I end in is weird: one component has a dependency which seems outdated, i.e. it's not registered anymore.  Another service has been registered in place of that one, but it seems this change has been missed somehow.  The reason I know that, is that the service uses a ServiceFactory and when the service is unbound, the service internal state is changed and I've been able to inspect the variables in that failing state.

I'm not sure this actually fixes my issue, but while investigating the SCR code, Ioannis discovered this problem.  

I'll commit a fix asap.
","08/Dec/13 20:25;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java
Committed r1549206
",09/Dec/13 03:52;djencks;I doubt very much this fixes your issue.  If you have a debug level log for DS for when the problem occurred and can send it to me I'll take a look.,09/Dec/13 10:46;gnt;I've raised FELIX-4350 to cover my initial problem and attached a log with some SCR debug statements.,06/Aug/14 02:21;djencks;closing remaining 1.8.2 resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] locateService calls race with component reconfiguration,FELIX-4348,12683183,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,06/Dec/13 19:30,24/Jan/14 08:04,14/Mar/19 02:48,24/Jan/14 08:04,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"If a locateService call comes in while a dependency manager is changing it's target filter you get a stack trace like:

Stack Dump = java.lang.NullPointerException
	at org.apache.felix.scr.impl.manager.DependencyManager.getRefPair(DependencyManager.java:1281)
	at org.apache.felix.scr.impl.manager.DependencyManager.getService(DependencyManager.java:1299)
	at org.apache.felix.scr.impl.manager.ComponentContextImpl.locateService(ComponentContextImpl.java:107)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,362435,,,Fri Jan 24 08:04:49 UTC 2014,,,,,,0|i1qh3r:,362729,,,,,,,,28/Dec/13 01:05;djencks;The first attempted fix causes deadlocks.  The read-write lock cannot extend over service registration/deregistration.  I had a similar deadlock without locateService that was solved in a similar way.,24/Jan/14 08:04;djencks;Finally fixed in rev  1556079 with a test in rev  1556078,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 should ignore inner classes that are assigned to static fields,FELIX-4347,12683095,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,d.de.wit,d.de.wit,06/Dec/13 10:31,08/Apr/14 12:22,14/Mar/19 02:48,11/Dec/13 14:23,ipojo-manipulator-1.11.0,,,,,,ipojo-manipulator-1.11.1,,,,,,,iPOJO,,,,,,0,,,,,,"The iPOJO manipulator also instruments static inner classes that don't have any iPOJO annotations.
For example:
{code}
private static final Function<String, String> TRIM = new Function() {
    public String apply(String input) {
        return input.trim();
    }
};
{code}

results in the following:

{code}
private static final Function<String, String> TRIM = new Function()
  {
    public String apply(String paramAnonymousString)
    {
      if (!this.this$0.__M1___apply$java_lang_String) {
        return super.__M_apply(paramAnonymousString);
      }
      String str;
      try
      {
        this.this$0.__IM.onEntry(this, ""1___apply$java_lang_String"", new Object[] { paramAnonymousString });
        str = super.__M_apply(paramAnonymousString);
        this.this$0.__IM.onExit(this, ""1___apply$java_lang_String"", str);
      }
      catch (Throwable localThrowable)
      {
        this.this$0.__IM.onError(this, ""1___apply$java_lang_String"", localThrowable);
        throw localThrowable;
      }
      return str;
    }
    
    public String __M_apply(String input)
    {
      return input.trim();
    }
  };
{code}

This fails at runtime with NoSuchFieldError for this.this$0",,,,,,,,,,,,,,FELIX-4480,,,,,,10/Dec/13 16:38;d.de.wit;repro-project.zip;https://issues.apache.org/jira/secure/attachment/12618060/repro-project.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-06 18:58:16.699,,,no_permission,,,,,,,,,,,,362347,,,Wed Dec 11 14:34:48 UTC 2013,,,,,,0|i1qgk7:,362641,,,,,,,,06/Dec/13 18:58;clement.escoffier;Static inner classes should not be manipulated in iPOJO Manipulator 1.11.0. Could you let me know how your are building your bundle ?,"06/Dec/13 21:02;d.de.wit;We build using the maven ipojo plugin. Also note that above example is not just a static inner class, it is a static field that we initialize with an anonymous inner class.","07/Dec/13 07:58;clement.escoffier;Oh, sorry, misread the code.

I've added a test with:

{code}
private static final Callable<Integer> callable = new Callable<Integer>() {
        public Integer call() {
            return 1;
        }
    };
{code}

If I look inside the manipulated bundle, I've:

{code}
  private static final Callable<Integer> callable = new Callable() {
    public Integer call() {
      return Integer.valueOf(1);
    }
  };
{code}

Which version of the plugin are you using ?",10/Dec/13 16:36;d.de.wit;We found that this problem only occurs when the aspectj-maven-plugin is used in combination with the maven-ipojo-plugin. I attached a sample project that reproduces this issue.,"10/Dec/13 18:24;clement.escoffier;Thanks for the project, it will definitely help ! I will have a look tomorrow.","11/Dec/13 10:12;clement.escoffier;Got it ! Was a bit more tricky that what I was thinking. But I'm testing an initial fix, will come back to you Today.","11/Dec/13 14:13;clement.escoffier;I confirm, it is related to aspectj making the inner class non-static (while it initially is).","11/Dec/13 14:20;d.de.wit;That's strange, since it is actually static in the byte code. So something restores the inner class back to static.",11/Dec/13 14:23;clement.escoffier;Fixed in trunk.,"11/Dec/13 14:34;d.de.wit;Great, thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Substitution is dependent on the order of the map,FELIX-4342,12682657,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,04/Dec/13 11:20,17/Mar/15 06:48,14/Mar/19 02:48,04/Dec/13 11:33,,,,,,,utils-1.4.2,,,,,,,Utils,,,,,,0,,,,,,,,,,,,,,,,,,,,FELIX-4332,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,361914,,,Wed Dec 04 11:33:54 UTC 2013,,,,,,0|i1qdw7:,362209,,,,,,,,"04/Dec/13 11:21;gnt;The following test fails:

{code}
    public void testSubstitutionOrder()
    {
        LinkedHashMap<String, String> map1 = new LinkedHashMap<String, String>();
        map1.put(""a"", ""$\\\\{var}"");
        map1.put(""ab"", ""${a}b"");
        map1.put(""abc"", ""${ab}c"");
        InterpolationHelper.performSubstitution(map1);

        LinkedHashMap<String, String> map2 = new LinkedHashMap<String, String>();
        map2.put(""a"", ""$\\\\{var}"");
        map2.put(""abc"", ""${ab}c"");
        map2.put(""ab"", ""${a}b"");
        InterpolationHelper.performSubstitution(map2);

        assertEquals(map1, map2);
    }
{code}","04/Dec/13 11:33;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	utils/src/main/java/org/apache/felix/utils/properties/InterpolationHelper.java
	M	utils/src/test/java/org/apache/felix/utils/properties/InterpolationHelperTest.java
	M	utils/src/test/java/org/apache/felix/utils/properties/PropertiesTest.java
Committed r1547767
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Properties object does not follow the spec wrt spaces,FELIX-4341,12682655,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,04/Dec/13 11:11,17/Mar/15 06:48,14/Mar/19 02:48,04/Dec/13 11:19,,,,,,,utils-1.4.2,,,,,,,Utils,,,,,,0,,,,,,,,,,,,,,,,,,,,FELIX-4332,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,361912,,,Wed Dec 04 11:19:01 UTC 2013,,,,,,0|i1qdvr:,362207,,,,,,,,"04/Dec/13 11:19;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	utils/src/main/java/org/apache/felix/utils/properties/Properties.java
	M	utils/src/test/java/org/apache/felix/utils/properties/PropertiesTest.java
Committed r1547764
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flex iPOJO online manipulator error if metadata.xml file not supplied,FELIX-4340,12682616,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,wayen.zhang@263.net,wayen.zhang@263.net,04/Dec/13 05:05,07/Mar/14 08:28,14/Mar/19 02:48,07/Dec/13 07:13,ipojo-manipulator-1.11.0,,,,,,ipojo-manipulator-1.11.1,,,,,,,iPOJO,,,,,,0,,,,,,"iPOJO online manipulator will throw NullPointer exception if no metadata.xml file supplied, by URL or in the jar:

g! start ipojo:file:./example9.jar
Processing URL : ipojo:file:./example9.jar
Extracted URL : file:./example9.jar
1834 bytes copied
Metadata file not found, use annotations only.
I Apache Felix iPOJO Manipulator - 1.11.0
org.osgi.framework.BundleException: Unable to cache bundle: ipojo:file:./example9.jar
        at org.apache.felix.framework.Felix.installBundle(Felix.java:2870)
        at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:165)
        at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:138)
        at org.apache.felix.gogo.command.Basic.start(Basic.java:724)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
        at org.apache.felix.gogo.shell.Console.run(Console.java:62)
        at org.apache.felix.gogo.shell.Shell.console(Shell.java:203)
        at org.apache.felix.gogo.shell.Shell.gosh(Shell.java:128)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
        at org.apache.felix.gogo.shell.Activator.run(Activator.java:75)
        at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NullPointerException
        at org.apache.felix.ipojo.online.manipulator.IPOJOURLHandler.__M_openConnection(IPOJOURLHanler.java:144)
        at org.apache.felix.ipojo.online.manipulator.IPOJOURLHandler.openConnection(IPOJOURLHandlerjava)
        at org.apache.felix.framework.URLHandlersStreamHandlerProxy.openConnection(URLHandlersStreaHandlerProxy.java:271)
        at java.net.URL.openConnection(Unknown Source)
        at org.apache.felix.framework.cache.JarRevision.initialize(JarRevision.java:150)
        at org.apache.felix.framework.cache.JarRevision.<init>(JarRevision.java:77)
        at org.apache.felix.framework.cache.BundleArchive.createRevisionFromLocation(BundleArchive.ava:878)
        at org.apache.felix.framework.cache.BundleArchive.reviseInternal(BundleArchive.java:550)
        at org.apache.felix.framework.cache.BundleArchive.<init>(BundleArchive.java:153)
        at org.apache.felix.framework.cache.BundleCache.create(BundleCache.java:277)
        at org.apache.felix.framework.Felix.installBundle(Felix.java:2866)
        ... 32 more
java.lang.NullPointerException

It should be optional, since metadata can be defined by annotations.

Workaround is supply an empty metadata.xml file with content:

<ipojo/>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-07 07:13:38.343,,,no_permission,,,,,,,,,,,,361873,,,Sat Dec 07 07:13:38 UTC 2013,,,,,,0|i1qdn3:,362168,,,,,,,,"07/Dec/13 07:13;clement.escoffier;Fixed in trunk,

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect overwriting of properties that have not been changed,FELIX-4338,12682092,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,rodehav,rodehav,02/Dec/13 09:59,17/Mar/15 06:56,14/Mar/19 02:48,04/Dec/13 11:42,fileinstall-3.2.6,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,"Fileinstall sometimes, incorrectly, believes that a property has been changed and thus overwrites it (if FileInstall is configured to write back configration changes) in the configuration file.

This is because the configuration file is parsed differently on the original reading of the configuration file compared with the reading when a configuration has been updated.

This has been described in more detail in the following conversation on the Felix user mailing list:

http://www.mail-archive.com/users@felix.apache.org/msg14804.html
",,,,,,,,,,,,,,,,,FELIX-4342,FELIX-4332,,02/Dec/13 10:03;rodehav;ConfigInstaller.java.patch;https://issues.apache.org/jira/secure/attachment/12616525/ConfigInstaller.java.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-04 11:42:30.831,,,no_permission,,,,,,,,,,,,361349,,,Wed Dec 04 11:42:30 UTC 2013,,,,,,0|i1qafz:,361648,,,,,,,,"02/Dec/13 10:03;rodehav;Changes the setConfig() method to parse the configuration file the same way that the method configurationEvent() does. This ensures that properties are always evaluated the same way.

The only drawback is that configuration files in XML format is not supported. On the other hand, they cannot have been supported before either since the setConfig() method didn't support them.","04/Dec/13 11:42;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/pom.xml
Committed r1547770
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The use of inheritable thread locals in ThreadIO can cause problems,FELIX-4336,12681898,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,29/Nov/13 14:22,17/Mar/15 07:06,14/Mar/19 02:48,29/Nov/13 15:31,,,,,,,gogo.runtime-0.12.0,,,,,,,Gogo Runtime,,,,,,0,,,,,,"The main problem is that if threads outlive the console that owns the stream, those threads will always read out write to closed streams.
The use of inherited thread local is fine but should be smarter.",,,,,,,,,,,,,,KARAF-2594,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,361159,,,Fri Nov 29 16:45:30 UTC 2013,,,,,,0|i1q99r:,361458,,,,,,,,"29/Nov/13 15:31;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/threadio/Marker.java
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/threadio/ThreadIOImpl.java
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/threadio/ThreadInputStream.java
	M	gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/threadio/ThreadPrintStream.java
Committed r1546581
","29/Nov/13 16:45;gnt;URL: http://svn.apache.org/r1546592
Log:
[FELIX-4336] Fix unit tests
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertyDescription does not allow retrieving the current value of the represented property,FELIX-4335,12681893,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,29/Nov/13 13:49,07/Mar/14 08:27,14/Mar/19 02:48,29/Nov/13 13:52,ipojo-runtime-1.11.0,,,,,,ipojo-runtime-1.11.1,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,361154,,,Fri Nov 29 13:52:12 UTC 2013,,,,,,0|i1q98n:,361453,,,,,,,,29/Nov/13 13:52;clement.escoffier;Fix in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceDependency properties change callback issue,FELIX-4334,12681813,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,28/Nov/13 22:16,21/Jul/14 22:43,14/Mar/19 02:48,29/Nov/13 11:13,dependencymanager-3.1.0,,,,,,dependencymanager-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"Xander found out that sometimes, some Dependency ""change"" callbacks are not invoked.

For instance, assuming the following scenario with three components A,B,C:

1. B adapts A and in it’s init adds an instance bound required dependency to C. 
2. Now someone modifies the service properties of A
3. As a result of that C (which somehow has a required dependency to something requiring A) becomes unavailable
4. B becomes unregistered because it’s dependency to C is no longer satisfied
5. Because there’s a check on ds.isRegistered() in the change method in _modifiedService B will never get notified of the new service properties

in step 5, B is not notified in B.changed(A) because B is in the ""waiting for required (instantiated)"" state. So, fixing this problem consists in calling ds.isInstantiated() instead of ds.isRegistered() method in ServiceDependencyImpl.doModified().

Other kind of dependencies might also have the same kind of problem. For example: BundleDependencyImpl.

",,,,,,,,,,,,,,,,,,,,28/Nov/13 22:18;pderop;AdapterWithModifiedInstanceBoundDependencyTest.java;https://issues.apache.org/jira/secure/attachment/12616315/AdapterWithModifiedInstanceBoundDependencyTest.java,28/Nov/13 23:38;pderop;ModifiedBundleDependencyTest.java;https://issues.apache.org/jira/secure/attachment/12616320/ModifiedBundleDependencyTest.java,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,361077,,,Fri Nov 29 11:13:58 UTC 2013,,,,,,0|i1q8rj:,361376,,,,,,,,28/Nov/13 22:18;pderop;Attached a testcase for the issue.,28/Nov/13 23:38;pderop;attached testcase for BundleDependency.,"29/Nov/13 11:13;pderop;Committed a patch in revision 1546540.
Also added the following integration tests:

- org.apache.felix.dm.test.integration.api.ModifiedBundleDependencyTest.java
- org.apache.felix.dm.test.integration.api.AdapterWithModifiedInstanceBoundDependencyTest",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect evalution of variables,FELIX-4332,12681758,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,rodehav,rodehav,28/Nov/13 12:58,17/Mar/15 06:56,14/Mar/19 02:48,05/Dec/13 16:51,fileinstall-3.2.6,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,"When using variables (${}) in configuration files in combination with the escape character (\), the variables are sometimes evaluated when they shall not. This can also fool FileInstall into believing that a property has been changed and therefore incorrectly modify the configuration file.

This has been described in more detail in the following conversation on the Felix user mailing list:

http://www.mail-archive.com/users@felix.apache.org/msg14804.html
","Apache Karaf 2.3.3
Windows 7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,361022,,,2013-11-28 12:58:00.0,,,,,,0|i1q8fb:,361321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Core R5] Support BundleContext and Framework adaptations,FELIX-4331,12681246,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,bosschaert,bosschaert,26/Nov/13 11:58,27/Apr/15 07:05,14/Mar/19 02:48,10/Dec/13 02:44,,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,"When running the Felix core through the R5 OSGi CT I noticed that two types of adapt() arguments were not yet supported:
* BundleContext.class
* Framework.class
This causes the following CT failures:
  BundleAdaptTests.testBundleContextAdapt()
  BundleAdaptTests.testFrameworktAdapt()",,,,,,,,,,,,,,,,,,,,26/Nov/13 12:11;bosschaert;adapt.patch;https://issues.apache.org/jira/secure/attachment/12615824/adapt.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-10 02:44:23.389,,,no_permission,,,,,,,,,,,,360511,,,Tue Dec 10 02:44:23 UTC 2013,,,,,,0|i1q5af:,360810,,,,,,,,26/Nov/13 12:11;bosschaert;The adapt.patch file fixes this issue. I have confirmed that it resolves the two mentioned CT failures.,"10/Dec/13 02:44;cziegeler;Thanks for your patch David, it's applied in rev 1549750",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[HTTP SSL Filter] Make SSL header(s) configurable,FELIX-4330,12681019,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,fmeschbe,fmeschbe,25/Nov/13 12:25,23/Nov/17 15:00,14/Mar/19 02:48,20/May/14 15:11,http-2.2.1,,,,,,http.sslfilter-0.1.0,http-2.3.0,,,,,,HTTP Service,,,,,,0,,,,,,"The request header indicating a proxy terminating an HTTPS connection is currently hard coded to be ""X-Forwarded-SSL"" with the only value supported to be ""on"" -- based on the assumption of this being the most commonly used header value.

It looks that Amazon's Elastice Load Balancer uses a different header and value: X-Forwarded-Proto whose value is the actual protocol by which the client talks to the load balancer. The filter should kick in if the protocol is https (or maybe if it is just not the same as the one which the servlet container reports).

[1] http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/TerminologyandKeyConcepts.html#x-forwarded-proto",,,,,,,,,,,,,,,,,,,,01/May/14 21:57;fmeschbe;FELIX-4330-fme.patch;https://issues.apache.org/jira/secure/attachment/12642928/FELIX-4330-fme.patch,03/May/14 19:41;fmeschbe;FELIX-4330-fme2.patch;https://issues.apache.org/jira/secure/attachment/12643226/FELIX-4330-fme2.patch,20/Jan/14 17:55;ianeboston;FELIX-4330.patch;https://issues.apache.org/jira/secure/attachment/12623973/FELIX-4330.patch,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2014-01-20 17:55:47.206,,,no_permission,,,,,,,,,,,,360284,,,Tue May 20 14:50:32 UTC 2014,,,,,,0|i1q3wf:,360583,,,,,,,,"20/Jan/14 17:55;ianeboston;Patch to address this issue.

It doesn't add configuration properties, it hard codes the headers used by ELB SSL Termination as per the AWS documentation and continues to support mod_ssl termination.

nginX recommends setting a header see question at https://code.djangoproject.com/ticket/14597

Other proxies that can be configured will probably take the same approach. ELB is probably the only one with no configuration capability.","20/Jan/14 17:56;ianeboston;Please note, I have not tested the patch against a live ELB instance, but it it is acceptable I can cut an internal release and get it tested.","01/May/14 21:57;fmeschbe;Proposing a slightly more complicated version which allows configuration of the header value and property.

WDYT ?","02/May/14 08:07;ianeboston;lgtm, except, imho it would be better to support the major SSL terminations by default so that for 80% of those deploying it works out the box and they don't have to debug, read the docs or find this jira issue.

I think that list should include
mod_ssl
AWS ELB
nginX

The real problem with AWS ELB is that there is that its not possible to configure what the headers are. They are hard coded and the only interface is a web page/web service. Most others (including mod_ssl and nginX)  there is a ""set request header"" directive of some form. TBH, its possible to work round this by putting a HAProxy behind the ELB SSL termination.","03/May/14 19:36;fmeschbe;This really *is* a mess: I found mentions of four headers:

* {{X-Forwarded-SSL: on}} &ndash; the currently hard coded default value
* {{X-Forwarded-Proto: https}} &ndash; [Amazon ELBs hard coded header|http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/TerminologyandKeyConcepts.html#x-forwarded-proto] and in an Nginx Wiki page on [SSL-Offload|http://wiki.nginx.org/SSL-Offloader]. Also listed on Wikipedia's [List of HTTP header fields|http://en.wikipedia.org/wiki/List_of_HTTP_header_fields] as a quasi standard.
* {{X-Forwarded-Protocol: https}} &ndash; Alternative to X-Forwarded-Proto
* {{Front-End-Https: on}} &ndash; Microsoft header, see [Helping to Secure Communication: Client to Front-End Server|http://technet.microsoft.com/en-us/library/aa997519%28v=exchg.65%29.aspx]. Also listed on Wikipedia's [List of HTTP header fields|http://en.wikipedia.org/wiki/List_of_HTTP_header_fields]

I fear we have to provide support for all.",03/May/14 19:41;fmeschbe;Updated patch supporting all four listed headers.,"08/May/14 07:16;jajans;I've taken a look at the latest patch of [~fmeschbe] and was wondering why we want to limit the possible values that are allowed in {{SslFilter}}. We now would have to update our code for each new header that is proposed in the future.

I'd propose to just allow the {{SslFilter}} to obtain two configuration values: one for the forward header name and one for the expected value of the header and not do the parsing of values at all.

The above mentioned values could be a good start for the documentation on the website, so your work isn't lost ;)

Another remark: shouldn't we propagate the header as configured? Now we always use the {{X-Forwarded-SSL}} header for that purpose, which might be not the most obvious for users using another vendor...","16/May/14 07:06;cziegeler;[~jajans] I basically agree with you. So you suggest to replace the current option property from Felix patch with two string props, right? Could you update the patch? Maybe we could add the known configuration setups to the description, so people see right away in the web console how they can configure it?","20/May/14 12:52;jajans;I've taken the liberty to directly commit the updated version, see rev. #1596230. Aside splitting the ssl-forward header into a key/value configuration property, I also made the forwarded client certificate header configurable, as found at least two different headers are used in the wild. Documentation of the configuration object is added by means of a metatype definition.

[~cziegeler]: with these changes I think we can close this issue now?
","20/May/14 14:50;cziegeler;[~jajans] Perfect, thanks - yes we can close this one",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible Invalid BundleContext exception when shutting down the extender,FELIX-4326,12680515,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,21/Nov/13 12:57,04/Sep/14 08:03,14/Mar/19 02:48,21/Nov/13 13:55,,,,,,,scr-1.8.2,utils-1.4.2,,,,,,Utils,,,,,,0,,,,,,"Due to concurrency, the extender can receive bundle events raised by the framework after the extender has been stopped.
The reason is that the framework internal event listener lists can be obtained before the extender is stopped, but iterated and called after the extender is stopped.
We need to guard against that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,359780,,,Mon Nov 25 14:55:34 UTC 2013,,,,,,0|i1q0sv:,360079,,,,,,,,"21/Nov/13 13:55;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	utils/src/main/java/org/apache/felix/utils/extender/AbstractExtender.java
Committed r1544179

Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	scr/pom.xml
Committed r1544181
","25/Nov/13 14:55;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	utils/src/main/java/org/apache/felix/utils/extender/AbstractExtender.java
Committed r1545309
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Synchronization issue when activating component,FELIX-4325,12680235,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,20/Nov/13 09:48,06/Aug/14 02:21,14/Mar/19 02:48,20/Nov/13 09:52,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,," When activating a component, the AbstractComponentManager#activateInternal method checks some properties, then grab the lock and actually activate the component, leaving a gap between the check and the lock being acquired, which can result in the component being deactivated in the mean time, ultimately leading to NPE because m_tracker has been nulled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-06 02:21:51.466,,,no_permission,,,,,,,,,,,,359498,,,Wed Aug 06 02:21:51 UTC 2014,,,,,,0|i1pz2n:,359797,,,,,,,,"20/Nov/13 09:49;gnt;{code}
ERROR: Bundle org.fusesource.fabric.fabric-git [80] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.scr.impl.manager.DependencyManager$MultipleDynamicCustomizer.prebind(DependencyManager.java:376)
	at org.apache.felix.scr.impl.manager.DependencyManager.prebind(DependencyManager.java:1392)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.collectDependencies(AbstractComponentManager.java:1099)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.getServiceInternal(SingleComponentManager.java:804)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:827)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:907)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:871)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1477)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1398)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.trackAdding(ServiceTracker.java:1210)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.track(ServiceTracker.java:1148)


ERROR: Bundle org.fusesource.fabric.fabric-zookeeper [48] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.prebind(DependencyManager.java:954)
	at org.apache.felix.scr.impl.manager.DependencyManager.prebind(DependencyManager.java:1392)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.collectDependencies(AbstractComponentManager.java:1099)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.getServiceInternal(SingleComponentManager.java:804)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:827)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:907)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:871)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1477)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1398)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.trackAdding(ServiceTracker.java:1210)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.track(ServiceTracker.java:1148)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1429)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:934)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:795)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4666)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3674)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:347)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
	at org.apache.felix.cm.impl.ConfigurationManager.start(ConfigurationManager.java:318)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.doActivateBundle(Felix.java:2387)
	at org.apache.felix.framework.Felix$7.call(Felix.java:2325)
	at org.apache.felix.framework.Felix$6.call(Felix.java:2208)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
{code}","20/Nov/13 09:51;gnt;Proposed patch to implement the double-check-locking pattern to close the gap.  The use of this pattern is valid because the 3 properties checked are all flagged as volatile.

{code}
diff --git a/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java b/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.
index dacad1b..a3322bd 100644
--- a/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java
+++ b/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java
@@ -807,6 +807,24 @@ public abstract class AbstractComponentManager<S> implements Component, SimpleLo
         obtainActivationReadLock( ""activateInternal"" );
         try
         {
+            // Double check conditions now that we have obtained the lock
+            if ( m_disposed )
+            {
+                log( LogService.LOG_DEBUG, ""ActivateInternal: disposed"",
+                        null );
+                return;
+            }
+            if ( m_activated ) {
+                log( LogService.LOG_DEBUG, ""ActivateInternal: already activated"",
+                        null );
+                return;
+            }
+            if ( !isEnabled() )
+            {
+                log( LogService.LOG_DEBUG, ""Component is not enabled; not activating component"",
+                        null );
+                return;
+            }
             // Before creating the implementation object, we are going to
             // test if all the mandatory dependencies are satisfied
             if ( !verifyDependencyManagers() )
{code}","20/Nov/13 09:52;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java
Committed r1543743
",06/Aug/14 02:21;djencks;closing remaining 1.8.2 resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ScrService.getComponents may return a null array element,FELIX-4323,12680129,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,20/Nov/13 08:19,06/Aug/14 02:21,14/Mar/19 02:48,21/Nov/13 04:00,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"If a bundle is stopped in the middle of calling getComponents, the array from ScrService.getComponents() may include a null element from the single component manager from a holder.  The in ConfigurableComponentHolder can be simplified by making CCH .getComponents(boolean clear) return a complete list including the single component if present, possibly solving other similar issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,359486,,,Wed Aug 06 02:21:50 UTC 2014,,,,,,0|i1pyzz:,359785,,,,,,,,21/Nov/13 04:00;djencks;rev 1543735,06/Aug/14 02:21;djencks;closing remaining 1.8.2 resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Prevent activation attempts until all dependency managers are set up with trackers,FELIX-4322,12680059,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,19/Nov/13 23:06,06/Aug/14 02:08,14/Mar/19 02:48,06/Aug/14 02:08,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Problem found by Guillaume Nodet while working on FELIX-4313.  dm.isSatisified will return true if the ref is optional even before the tracker is set up, so attempts to activate will run into a NPE as documented in that issue.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,359416,,,Wed Aug 06 02:08:40 UTC 2014,,,,,,0|i1pykf:,359715,,,,,,,,06/Aug/14 02:08;djencks;Actually fixed in 1.8.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Start apache-felix 4.2.1 with iPOJO on Android,FELIX-4315,12679414,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,Giorgi,Giorgi,15/Nov/13 15:52,16/Nov/13 21:41,14/Mar/19 02:48,16/Nov/13 21:41,framework-4.2.1,ipojo-runtime-1.11.0,,,,,,,,,,,,Framework,iPOJO,,,,,0,,,,,,"I try to start apache-felix 4.2.1 with iPOJO 1.11.0 on Android 4.+.

config.properties standard with added:

org.osgi.framework.system.packages.extra= \
android, \
android.accessibilityservice, \
...
android.support.v4.view.accessibility, \
android.support.v4.widget

start command:

/system/bin/dalvikvm -Xbootclasspath:/system/framework/core.jar -classpath bin/felix.jar org.apache.felix.main.Main

After start it write:

Problem creating boot delegation class loader: java.lang.reflect.InvocationTargetException

When start Apache Felix iPOJO (1.11.0) throws error:

! ERROR: Bundle org.apache.felix.ipojo [14] Error starting file:/data/local/feli
x/felix-framework-4.2.1a/bundle/org.apache.felix.ipojo-1.11.0.jar (org.osgi.fram
ework.BundleException: Activator start error in bundle org.apache.felix.ipojo [1
4].)
java.lang.NoClassDefFoundError: org.apache.felix.ipojo.util.Logger$ConsoleLogSer
vice
        at org.apache.felix.ipojo.util.Logger.<clinit>(Logger.java:51)
        at org.apache.felix.ipojo.extender.internal.Extender.start(Extender.java
:123)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAct
ion.java:645)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)

        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStart
LevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:841)

Then dexing have warning, but not for ConsoleLogService warning.

dx --dex --output=./classes.dex ./org.apache.felix.ipojo-1.11.0.jar:

warning: Ignoring InnerClasses attribute for an anonymous inner class
(org.osgi.service.cm.ConfigurationPermissionCollection$1) that doesn't come with
 an
associated EnclosingMethod attribute. This class was probably produced by a
compiler that did not target the modern .class file format. The recommended
solution is to recompile the class from source, using an up-to-date compiler
and without specifying any ""-target"" type options. The consequence of ignoring
this warning is that reflective operations on this class will incorrectly
indicate that it is *not* an inner class.

See details:
http://stackoverflow.com/questions/19892520/start-apache-felix-4-2-1-with-ipojo-on-android","Android: 4.0, 4.2, 4.2, 4.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-16 07:30:45.811,,,no_permission,,,,,,,,,,,,358774,,,Sat Nov 16 21:41:44 UTC 2013,,,,,,0|i1puiv:,359064,,,,,,,,"16/Nov/13 07:30;clement.escoffier;The issue comes from a redefinition of classes. Dalvik does not support having classes define twice (even in two different bundles or classloaders). That means you can't follow the good practice rules of OSGi you generally use:

* each class must be defined once and only once
* each exported package must be defined only once (regardless its version)

I suppose you have another bundle exporting the configuration admin package or the log service package (such as the OSGi Compendium, or an implementation of these services). In this case you need to transform a bit the iPOJO bundle by removing the export of these packages as well as the included classes. If you can package iPOJO yourself, open the pom file and remove:

    <!-- Compendium packages -->
    org.osgi.service.cm; version=1.3,
    org.osgi.service.log; version=1.3

","16/Nov/13 21:41;Giorgi;The issue comes from a redefinition of classes. Dalvik does not support having classes define twice (even in two different bundles or classloaders). That means you can't follow the good practice rules of OSGi you generally use:

each class must be defined once and only once
each exported package must be defined only once (regardless its version)
I suppose you have another bundle exporting the configuration admin package or the log service package (such as the OSGi Compendium, or an implementation of these services). In this case you need to transform a bit the iPOJO bundle by removing the export of these packages as well as the included classes. If you can package iPOJO yourself, open the pom file and remove:

<!-- Compendium packages -->
org.osgi.service.cm; version=1.3,
org.osgi.service.log; version=1.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Split service registration to solve visibility issue in autoconf,FELIX-4314,12679363,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,marrs,marrs,15/Nov/13 09:38,01/Apr/14 12:48,14/Mar/19 02:48,15/Nov/13 13:48,,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"The current implementation of autoconf registers itself as both a ResourceProcessor and EventHandler. The first because, obviously, it is a resource processor. The second because it wants to know when the deployment session ends, which is signalled through an event.

This creates an interesting visibility issue, especially when bootstrapping an OSGi framework by installing a deployment package containing ""everything"".

Initially this means there is just some management agent available. Through DeploymentAdmin the agent installs the deployment package which contains bundles and configuration data. The bundles that are included contain EventAdmin and ConfigurationAdmin.

Let's also assume that the management agent has no dependency on EventAdmin, not even its API, because a) it does not want to depend on it (through an ImportPackage) and b) it does not want to provide and depend on it either (because it tries to isolate itself as much as possible from the rest of the framework).

This creates an interesting problem: because autoconf registers as both a ResourceProcessor and EventHandler, and EventHandler is not visible to the agent, it will *not* see the resource processor either. Therefore the deployment will fail in a way that is hard to debug (if you inspect the registry, the service is there, it's just that the agent is not allowed to see it).

The easiest solution is to split the registration into two. First just register as a ResourceProcessor and then, separately, also register as an EventHandler. In fact, in this case, we can defer the latter a bit until we are actually interested in the event.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,358725,,,Fri Nov 15 13:48:26 UTC 2013,,,,,,0|i1pu7z:,359015,,,,,,,,15/Nov/13 13:48;marrs;Implemented.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad synchronization in scr where a lock is held while ungetting a service,FELIX-4313,12678984,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,gnt,gnt,gnt,13/Nov/13 10:13,06/Aug/14 02:21,14/Mar/19 02:48,20/Nov/13 09:55,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,The problem is located in DependencyManeger$SingleStaticCustomizer.close(),,,,,,,,,,,,,,FELIX-4325,FELIX-4322,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-13 17:20:51.945,,,no_permission,,,,,,,,,,,,358349,,,Wed Aug 06 02:21:50 UTC 2014,,,,,,0|i1prwf:,358639,,,,,,,,"13/Nov/13 10:13;gnt;Proposed patch (under test)

{code}
diff --git a/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java b/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java
index 99a87cf..c78f69b 100644
--- a/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java
+++ b/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java
@@ -979,15 +979,17 @@ public class DependencyManager<S, T> implements Reference
 
         public void close()
         {
+            RefPair<T> ref;
             synchronized ( getTracker().tracked() )
             {
-                if ( refPair != null )
-                {
-                    ungetService( refPair );
-                }
+                ref = refPair;
                 refPair = null;
-                getTracker().deactivate();
             }
+            if ( ref != null )
+            {
+                ungetService( ref );
+            }
+            getTracker().deactivate();
         }
 
         public Collection<RefPair<T>> getRefs( AtomicInteger trackingCount )
{code}",13/Nov/13 17:20;djencks;I'm pretty sure the getTracker().deactivate() needs to be in the synchronized block.  I think moving the ungetService out might be OK.,"14/Nov/13 07:38;gnt;All the other implementations of AbstractCustomizer do not hold any lock while calling getTracker().deactivate(), so if a lock is needed, we'd have to fix them all.
In addition, the getTracker() and deactivate() methods seems thread safe at first glance, as they access variables flagged as volatile and the deactivate method has itself an internal synchronization block.  It follows the same pattern as lots of other methods in the ServiceTracker, i.e. get the volatile tracked object, check for null, and process the real call while holding a lock on this object.
","18/Nov/13 09:21;gnt;I still don't think deactivate needs to be synchronized, however I've hit the following NPEs, which seems to indicate that the m_tracker property can be null while the code doesn't really support it.  

{code}
ERROR: Bundle org.fusesource.fabric.fabric-git [80] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.scr.impl.manager.DependencyManager$MultipleDynamicCustomizer.prebind(DependencyManager.java:376)
	at org.apache.felix.scr.impl.manager.DependencyManager.prebind(DependencyManager.java:1392)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.collectDependencies(AbstractComponentManager.java:1099)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.getServiceInternal(SingleComponentManager.java:804)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:827)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:907)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:871)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1477)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1398)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.trackAdding(ServiceTracker.java:1210)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.track(ServiceTracker.java:1148)


ERROR: Bundle org.fusesource.fabric.fabric-zookeeper [48] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.prebind(DependencyManager.java:954)
	at org.apache.felix.scr.impl.manager.DependencyManager.prebind(DependencyManager.java:1392)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.collectDependencies(AbstractComponentManager.java:1099)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.getServiceInternal(SingleComponentManager.java:804)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:827)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:907)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:871)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1477)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1398)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.trackAdding(ServiceTracker.java:1210)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.track(ServiceTracker.java:1148)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1429)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:934)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:795)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4666)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3674)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:347)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
	at org.apache.felix.cm.impl.ConfigurationManager.start(ConfigurationManager.java:318)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.doActivateBundle(Felix.java:2387)
	at org.apache.felix.framework.Felix$7.call(Felix.java:2325)
	at org.apache.felix.framework.Felix$6.call(Felix.java:2208)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
{code}","18/Nov/13 09:43;djencks;I'll look into this.  Can you tell if the dependency managers that are experiencing the NPEs are 
- optional
- ""after"" the SingleStatic reference that causes the activation?","18/Nov/13 18:48;djencks;My theory about what is causing this would be fixed by the following patch:

diff --git a/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java b/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager
index 99a87cf..87f846c 100644
--- a/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java
+++ b/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java
@@ -165,12 +165,16 @@ public class DependencyManager<S, T> implements Reference
 
         public boolean isSatisfied()
         {
+            ServiceTracker<T, RefPair<T>> tracker = getTracker();
+            if ( tracker == null)
+            {
+                return false;
+            }
             if (isOptional())
             {
                 return true;
             }            
-            ServiceTracker<T, RefPair<T>> tracker = getTracker();
-            return !(tracker == null) && !tracker.isEmpty();
+            return !tracker.isEmpty();
         }
 
         protected ServiceTracker<T, RefPair<T>> getTracker()


I think we need to prevent any attempt to activate until all the m_trackers are set.  Can you see if this fixes the problem?",19/Nov/13 23:18;djencks;I opened FELIX-4322 for this NPE and plan to commit the patch soon.,20/Nov/13 09:53;gnt;Also raised FELIX-4325 which I've fixed. I'll close this one.,"20/Nov/13 09:55;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java
Committed r1543745
",06/Aug/14 02:21;djencks;closing remaining 1.8.2 resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuring Jetty causes pointless service interruptions,FELIX-4312,12678557,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,jajans,jajans,jajans,11/Nov/13 12:07,01/Aug/15 09:22,14/Mar/19 02:48,11/Nov/13 12:15,,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"The Jetty service can be reconfigured through ConfigAdmin and restarts itself after a configuration has been provisioned. However, if nothing is changed in the configuration, the restart is a little pointless and causes unnecessary service interruptions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,357924,,,Mon Nov 11 12:15:50 UTC 2013,,,,,,0|i1ppa7:,358214,,,,,,,,11/Nov/13 12:15;jajans;Committed a fix in rev #1540691.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Log real Jetty version number,FELIX-4311,12678516,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,jajans,jajans,jajans,11/Nov/13 08:27,27/Feb/18 14:41,14/Mar/19 02:48,27/Feb/18 14:41,,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"In the current HTTP service logs, Jetty reports itself as {{7.x.y-SNAPSHOT}}, which is confusing, as people might think it uses an non-released version of Jetty.

The originating cause is that Jetty uses its Manifest for its version report, but those headers are lost when Jetty is embedded in the HTTP service.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,357883,,,Mon Nov 11 11:58:04 UTC 2013,,,,,,0|i1pp13:,358173,,,,,,,,11/Nov/13 11:58;jajans;The bundles (the all-in-one and Jetty) now log the correct version number of Jetty upon startup.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP Cometd bundle references incorrect version of Jetty,FELIX-4310,12678457,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,10/Nov/13 14:14,01/Aug/15 09:22,14/Mar/19 02:48,10/Nov/13 14:42,,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"The POM for the cometd project still references to Jetty 7.6.3, which is not inline with the one used for the HTTP-Jetty project. 

It would be better if the HTTP parent POM provides some constants for the used versions of libraries...
",,,,,,,,,,,,,,FELIX-4282,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,357832,,,Sun Nov 10 14:42:41 UTC 2013,,,,,,0|i1popr:,358122,,,,,,,,"10/Nov/13 14:15;jajans;Due to this incorrect version, the http.bundle contains classes from two different Jetty versions.","10/Nov/13 14:42;jajans;Fixed in rev #1540479. Upgraded to the cometd 2.7.0 as this one uses Jetty 7.6.13, which is now also used for the other projects as well.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR leaves some components in DISABLED state,FELIX-4309,12678228,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,08/Nov/13 13:48,06/Aug/14 02:21,14/Mar/19 02:48,20/Nov/13 09:44,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"When running some load testing (involving refresh and restarts) on bundles, I end up with the following exceptions:

{code}
2013-11-08 13:20:00,234 | ERROR | xFrameworkWiring | fabric-core                      | ?                                   ? | 61 - org.fusesource.fabric.fabric-core - 7.3.0.redhat-SNAPSHOT | [org.fusesource.fabric.portservice.zookeeper] Cannot register Component
java.lang.IllegalStateException: Invalid BundleContext.
	at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.BundleContextImpl.getBundle(BundleContextImpl.java:112)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.scr.impl.ComponentRegistry.checkComponentName(ComponentRegistry.java:357)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:253)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:153)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:115)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:235)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.scr.impl.Activator.access$000(Activator.java:44)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.scr.impl.Activator$1.start(Activator.java:169)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.utils.extender.AbstractExtender.createExtension(AbstractExtender.java:256)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.utils.extender.AbstractExtender.modifiedBundle(AbstractExtender.java:229)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:479)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:414)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:232)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:443)[74:org.apache.felix.scr:1.8.0.redhat-610147]
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:870)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:791)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:515)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4580)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.Felix$4.run(Felix.java:2115)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.Felix.runInContext(Felix.java:2139)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2113)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.Felix$RefreshHelper.restart(Felix.java:5099)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.Felix.refreshPackages(Felix.java:4303)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:178)[org.apache.felix.framework-4.0.3.redhat-610147.jar:]
	at java.lang.Thread.run(Thread.java:722)[:1.7.0_12-ea]
{code}

The end result is that I end up with lots of components in DISABLED state while the bundles are fully started
{code}
FuseFabric:karaf@root> scr:list
   ID   State             Component Name
[-1  ] [DISABLED        ] org.fusesource.fabric.placholder.resolver.port
[-1  ] [DISABLED        ] org.fusesource.fabric.profile.urlhandler
[-1  ] [DISABLED        ] org.fusesource.fabric.container.registration.karaf
[-1  ] [DISABLED        ] org.fusesource.fabric.placholder.resolver.versionprop
[-1  ] [DISABLED        ] org.fusesource.fabric.placholder.resolver.crypt
[-1  ] [DISABLED        ] org.fusesource.fabric.portservice.zookeeper
[-1  ] [DISABLED        ] org.fusesource.fabric.placholder.resolver.zookeeper
[-1  ] [DISABLED        ] org.fusesource.fabric.placholder.resolver.env
[-1  ] [DISABLED        ] org.fusesource.fabric.placholder.resolver.profileprop
[-1  ] [DISABLED        ] org.fusesource.fabric.mbeanserver.listener
[-1  ] [DISABLED        ] org.fusesource.fabric.service
[46  ] [UNSATISFIED     ] org.fusesource.fabric.configadmin.bridge
[93  ] [UNSATISFIED     ] org.fusesource.fabric.api.jmx.ClusterBootstrapManager
[94  ] [UNSATISFIED     ] org.fusesource.fabric.api.jmx.ClusterServiceManager
[95  ] [UNSATISFIED     ] org.fusesource.fabric.api.jmx.MQManager
[96  ] [UNSATISFIED     ] org.fusesource.fabric.zookeeper.config.builder
[97  ] [REGISTERED      ] org.fusesource.fabric.lock.service
[98  ] [UNSATISFIED     ] org.fusesource.fabric.zookeeper.cluster.bootstrap
[99  ] [UNSATISFIED     ] org.fusesource.fabric.zookeeper.cluster.service
[100 ] [REGISTERED      ] org.fusesource.fabric.placholder.resolver.checksum
[101 ] [UNSATISFIED     ] org.fusesource.fabric.container.provider.child
[102 ] [UNSATISFIED     ] org.fusesource.fabric.placholder.resolver.container
[103 ] [ACTIVE          ] org.fusesource.datastore.manager
[164 ] [UNSATISFIED     ] org.fusesource.fabric.features
[202 ] [ACTIVE          ] org.fusesource.fabric.extender.listener.blueprint
[203 ] [ACTIVE          ] org.fusesource.fabric.extender.listener.spring
[205 ] [ACTIVE          ] org.fusesource.fabric.jaas
[206 ] [REGISTERED      ] org.fusesource.fabric.jaas.zookeeper.backingengine
[207 ] [UNSATISFIED     ] org.fusesource.fabric.web
[208 ] [ACTIVE          ] org.fusesource.fabric.zookeeper.acl
[209 ] [ACTIVE          ] org.fusesource.fabric.zookeeper
[210 ] [ACTIVE          ] org.fusesource.fabric.zookeeper.urlhandler
[216 ] [ACTIVE          ] org.fusesource.fabric.maven
[217 ] [UNSATISFIED     ] org.fusesource.fabric.git.hawtio
[218 ] [UNSATISFIED     ] org.fusesource.fabric.datastore
[219 ] [ACTIVE          ] org.fusesource.fabric.git.service
[220 ] [UNSATISFIED     ] org.fusesource.fabric.git.master.listener
[221 ] [UNSATISFIED     ] org.fusesource.fabric.git.server
FuseFabric:karaf@root> 
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-08 19:43:48.036,,,no_permission,,,,,,,,,,,,357603,,,Wed Aug 06 02:21:51 UTC 2014,,,,,,0|i1pnb3:,357893,,,,,,,,08/Nov/13 19:43;djencks;Can you comment on how many threads are involved?  Offhand it looks to me as if a new version of a bundle is started before the old one is stopped.  If this is all in one thread then obviously I need to look harder.,"12/Nov/13 09:51;gnt;We have definitely a few threads involved in the process ;-)
I'm actually running a load test on bundles start / stop / refresh / update.
The framework itself does not allow concurrent access on a bundle (at least if the bundle and extenders do act synchronously).
Given SCR extends the felix AbstractExtender, it will synchronize correctly as much as possible, but there are always cases where the bundle can be stopped while the extender is processing the bundle.  The abstract extender correctly handles that (i.e. it will wait for the processing to finish, then destroy the extension), but it seems something is missing anyway.

After looking a bit more at the code, the problem may just come from the fact that the extension start / stop methods are not synchronized.  I think extending the SimpleExtension from felix utils would help in fixing this issue.
I can actually try and see if it helps.
","12/Nov/13 09:54;gnt;Testing the following patch:
{code}
diff --git a/scr/src/main/java/org/apache/felix/scr/impl/Activator.java b/scr/src/main/java/org/apache/felix/scr/impl/Activator.java
index 24fdf65..552aa3e 100644
--- a/scr/src/main/java/org/apache/felix/scr/impl/Activator.java
+++ b/scr/src/main/java/org/apache/felix/scr/impl/Activator.java
@@ -28,6 +28,7 @@ import org.apache.felix.scr.impl.config.ScrConfiguration;
 import org.apache.felix.scr.impl.metadata.ComponentMetadata;
 import org.apache.felix.utils.extender.AbstractExtender;
 import org.apache.felix.utils.extender.Extension;
+import org.apache.felix.utils.extender.SimpleExtension;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
@@ -162,14 +163,14 @@ public class Activator extends AbstractExtender
     @Override
     protected Extension doCreateExtension(final Bundle bundle) throws Exception
     {
-        return new Extension()
+        return new SimpleExtension(bundle)
         {
-            public void start() throws Exception
+            public void doStart() throws Exception
             {
                 loadComponents( bundle );
             }
 
-            public void destroy() throws Exception
+            public void doDestroy() throws Exception
             {
                 disposeComponents( bundle );
             }
{code}","12/Nov/13 10:05;gnt;It seems to help a bit, as I now end up in a slightly better state:
{code}
[93  ] [UNSATISFIED     ] org.fusesource.fabric.features
[96  ] [UNSATISFIED     ] org.fusesource.fabric.configadmin.bridge
[179 ] [UNSATISFIED     ] org.fusesource.fabric.web.api
[180 ] [UNSATISFIED     ] org.fusesource.fabric.web
[181 ] [ACTIVE          ] org.fusesource.fabric.zookeeper.acl
[182 ] [ACTIVE          ] org.fusesource.fabric.zookeeper
[183 ] [ACTIVE          ] org.fusesource.fabric.zookeeper.urlhandler
[185 ] [ACTIVE          ] org.fusesource.fabric.extender.listener.blueprint
[186 ] [ACTIVE          ] org.fusesource.fabric.extender.listener.spring
[187 ] [ACTIVE          ] org.fusesource.fabric.jaas
[188 ] [REGISTERED      ] org.fusesource.fabric.jaas.zookeeper.backingengine
[209 ] [UNSATISFIED     ] org.fusesource.fabric.api.jmx.ClusterBootstrapManager
[210 ] [UNSATISFIED     ] org.fusesource.fabric.api.jmx.ClusterServiceManager
[211 ] [UNSATISFIED     ] org.fusesource.fabric.api.jmx.MQManager
[212 ] [REGISTERED      ] org.fusesource.fabric.lock.service
[213 ] [UNSATISFIED     ] org.fusesource.fabric.zookeeper.cluster.service
[214 ] [REGISTERED      ] org.fusesource.fabric.placholder.resolver.checksum
[215 ] [UNSATISFIED     ] org.fusesource.fabric.container.provider.child
[216 ] [UNSATISFIED     ] org.fusesource.fabric.placholder.resolver.container
[217 ] [REGISTERED      ] org.fusesource.fabric.placholder.resolver.crypt
[218 ] [REGISTERED      ] org.fusesource.fabric.placholder.resolver.env
[219 ] [UNSATISFIED     ] org.fusesource.fabric.mbeanserver.listener
[220 ] [UNSATISFIED     ] org.fusesource.fabric.service
[221 ] [UNSATISFIED     ] org.fusesource.fabric.container.registration.karaf
[222 ] [UNSATISFIED     ] org.fusesource.fabric.placholder.resolver.port
[223 ] [UNSATISFIED     ] org.fusesource.fabric.placholder.resolver.profileprop
[224 ] [UNSATISFIED     ] org.fusesource.fabric.profile.urlhandler
[225 ] [UNSATISFIED     ] org.fusesource.fabric.placholder.resolver.versionprop
[226 ] [REGISTERED      ] org.fusesource.fabric.placholder.resolver.zookeeper
[227 ] [REGISTERED      ] org.fusesource.fabric.portservice.zookeeper
[228 ] [UNSATISFIED     ] org.fusesource.fabric.git.server
[229 ] [UNSATISFIED     ] org.fusesource.fabric.git.hawtio
[230 ] [UNSATISFIED     ] org.fusesource.fabric.datastore
[231 ] [ACTIVE          ] org.fusesource.fabric.git.service
[232 ] [UNSATISFIED     ] org.fusesource.fabric.git.master.listener
[234 ] [ACTIVE          ] org.fusesource.fabric.maven
{code}

which may be correct in my use case (where I have blueprint bundles in a failed state which may cause the unsatisfied scr components).","12/Nov/13 16:16;gnt;I'm not sure I like the above patch, even though it seems to work, for the reason that it's a bad idea to hold java locks while executing code that calls the OSGi API.  In this case, activating components calls uncontrolled code, so it should be avoided.
I'll work on a less simple patch that will avoid holding a lock, but the stop() method will have to synchronize on something anyway to at least wait for the start() to finish.","12/Nov/13 17:27;gnt;I have the following patch which looks good to me:
{code}
diff --git a/scr/src/main/java/org/apache/felix/scr/impl/Activator.java b/scr/src/main/java/org/apache/felix/scr/impl/Activator.java
index 24fdf65..5a01b9a 100644
--- a/scr/src/main/java/org/apache/felix/scr/impl/Activator.java
+++ b/scr/src/main/java/org/apache/felix/scr/impl/Activator.java
@@ -23,11 +23,13 @@ import java.io.PrintStream;
 import java.text.MessageFormat;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.FutureTask;
 
 import org.apache.felix.scr.impl.config.ScrConfiguration;
 import org.apache.felix.scr.impl.metadata.ComponentMetadata;
 import org.apache.felix.utils.extender.AbstractExtender;
 import org.apache.felix.utils.extender.Extension;
+import org.apache.felix.utils.extender.SimpleExtension;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
@@ -162,18 +164,31 @@ public class Activator extends AbstractExtender
     @Override
     protected Extension doCreateExtension(final Bundle bundle) throws Exception
     {
-        return new Extension()
-        {
-            public void start() throws Exception
-            {
-                loadComponents( bundle );
-            }
+        return new ScrExtension(bundle);
+    }
 
-            public void destroy() throws Exception
-            {
-                disposeComponents( bundle );
-            }
-        };
+    protected class ScrExtension implements Extension {
+
+        private final Bundle bundle;
+        private final FutureTask<Void> startFuture;
+
+        public ScrExtension(Bundle bundle) {
+            this.bundle = bundle;
+            startFuture = new FutureTask<Void>(new Runnable() {
+                public void run() {
+                    loadComponents( ScrExtension.this.bundle );
+                }
+            }, null);
+        }
+
+        public void start() throws Exception {
+            startFuture.run();
+        }
+
+        public void destroy() throws Exception {
+            startFuture.get();
+            disposeComponents( bundle );
+        }
     }
 
     /**
{code}
","12/Nov/13 17:51;djencks;In terms of blocking, how does this differ from synchronizing on start and destroy?

Would it be worth considering waiting on a latch with a timeout?  

","13/Nov/13 07:47;gnt;Yes, I agree it doesn't change much.  I've rewritten the patch with a latch and timeout instead as suggested, which enables the wait to timeout at least.
The main reason for avoiding a real lock is that I'm investigating a small change in felix to detect OSGI Api calls while holding java locks, and I'd like to avoid having scr reporting issues on that ;-)

Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	scr/src/main/java/org/apache/felix/scr/impl/Activator.java
Committed r1541409
","13/Nov/13 07:58;djencks;I like this better.  All the other timeouts are configured, what would you think of making this one configured too, perhaps 10 or12 times m_configuration.lockTimeout()? (default is 5000 milliseconds)",18/Nov/13 09:16;gnt;Reopened to make the timeout configurable somehow,"20/Nov/13 09:44;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	scr/src/main/java/org/apache/felix/scr/impl/Activator.java
	M	scr/src/main/java/org/apache/felix/scr/impl/config/ScrConfiguration.java
Committed r1543739
",06/Aug/14 02:21;djencks;closing remaining 1.8.2 resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DependencyManager ComponentImpl should not assume all service properties are stored in a Hashtable,FELIX-4304,12677759,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,uiterlix,herko_ter_horst,herko_ter_horst,06/Nov/13 12:27,19/Mar/15 06:00,14/Mar/19 02:48,24/Oct/14 23:32,dependencymanager-3.1.0,,,,,,org.apache.felix.dependencymanager-r1,,,,,,,Dependency Manager,,,,,,0,,,,,,"In org.apache.felix.dm.impl.ComponentImpl.getServiceProperties() a copy of the internal field m_serviceProperties is created by casting to Hashtable and calling clone(). However, as clients are allowed to call setServiceProperties(Dictionary properties) which assigns the parameter value to the field, it is very possible for m_serviceProperties to contain some other Dictionary implementation.

The attached patch solves this problem in getServiceProperties() by making a copy by enumerating over all keys and putting them in a newly created Hashtable.

Alternatively (or in addition), setProperties() could be changed to ensure the parameter value isn't directly assigned to the field.",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,06/Nov/13 12:31;herko_ter_horst;ComponentImpl.java.patch;https://issues.apache.org/jira/secure/attachment/12612364/ComponentImpl.java.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-10-24 23:32:56.903,,,no_permission,,,,,,,,,,,,357134,,,Fri Oct 24 23:32:56 UTC 2014,,,,,,0|i1pkev:,357424,,,,,,,,24/Oct/14 23:32;pderop;The patch has been applied in DM4 (currently in the sandbox),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Config Admin can create illegal names on windows,FELIX-4302,12677525,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,pkriens,pkriens,05/Nov/13 08:09,29/Feb/16 09:25,14/Mar/19 02:48,29/Dec/13 21:28,configadmin-1.8.0,,,,,,configadmin-1.8.2,,,,,,,Configuration Admin,,,,,,0,,,,,,"The following names are not allowed to be used in a path on Windows:

CON, PRN, AUX, CLOCK$, NUL, COM1 ... COM9, LPT1 ... LPT9.

If the last part of the PID is one of these names then an exception results. I guess adding an extension (.cfg) to this file would prevent this clash. There might actually 

java.io.IOException: Het systeem kan het opgegeven pad niet vinden
    at java.io.WinNTFileSystem.createFileExclusively(Native Method)
    at java.io.File.createNewFile(File.java:1006)
    at java.io.File.createTempFile(File.java:1989)
    at org.apache.felix.cm.file.FilePersistenceManager._store(FilePersistenceManager.java:621)
    at org.apache.felix.cm.file.FilePersistenceManager.store(FilePersistenceManager.java:582)
    at org.apache.felix.cm.impl.CachingPersistenceManagerProxy.store(CachingPersistenceManagerProxy.java:173)
    at org.apache.felix.cm.impl.ConfigurationImpl.update(ConfigurationImpl.java:387)
    at org.apache.felix.cm.impl.ConfigurationAdapter.update(ConfigurationAdapter.java:131)
    at aQute.impl.configurer.Configurer.configure(Configurer.java:147)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-28 21:25:08.146,,,no_permission,,,,,,,,,,,,356900,,,Mon Feb 29 09:25:37 UTC 2016,,,,,,0|i1pizb:,357190,,,,,,,,"28/Dec/13 21:25;fmeschbe;This really is nasty: If any of the PID segments starts with one of those special names storing the configuration fails.

The list of such names can be found at http://support.microsoft.com/kb/74496/en-us.

Approach to fix: After generating the File in the getFile method, all segments are checked whether they are prefixed with one of the reserved device names. This would of course only take place on windows platforms.","29/Dec/13 21:25;fmeschbe;I hope this is fixed in Rev. 1554073:

Configuration PIDs are encoded to be used as path names for configuration files. On Windows platforms each segment in the path must not start with one of the Windows device special names such as LPT, COM, etc. Improved the encodePid method to encode the first character of a segment name if it starts with one of the special names.

Windows platform is identified by the os.name system property starting with the string ""Windows"". Looking at the OpenJDK 8 source code it looks like all values for the os.name system property on any Windows platform starts with that string.",29/Dec/13 21:28;fmeschbe;Quickly tested the build on a Windows 7 platform and it looks like it works.,"30/Jul/15 13:17;githubbot;GitHub user balazs-zsoldos opened a pull request:

    https://github.com/apache/felix/pull/32

    Escape pid segment names only when truly necessary

    FELIX-4302: Escape only folder names that are truly reserved.
    
    Fixing incompatibility issues that were raised by the solution of FELIX-4302.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/balazs-zsoldos/felix felix-4945

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/32.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #32
    
----
commit 2cfce76e6de5f18e91656ab58e63e40468f98146
Author: Balazs Zsoldos <balazs.zsoldos@everit.biz>
Date:   2015-07-30T13:07:49Z

    Escape pid segment names only when truly necessary

----
","29/Feb/16 09:25;githubbot;Github user balazs-zsoldos closed the pull request at:

    https://github.com/apache/felix/pull/32
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Updated configuration is transmitted as query string to the request URL instead of POST payload,FELIX-4301,12677382,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,04/Nov/13 14:48,06/Feb/14 18:11,14/Mar/19 02:48,04/Nov/13 16:11,webconsole-4.2.0,,,,,,webconsole-4.2.2,,,,,,,Web Console,,,,,,0,,,,,,"When updating configuration in the Configuration Manager screens, the updated configuration is supplied as query string to the request URL, albeit in a POST request.

This is bad on multiple accounts: data is transmitted as URLs and thus may be logged and there is a natural limit in the size of request URLs.

We must make sure such configuration updates are actually transmitted as payload to the POST requests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,356757,,,Mon Nov 04 16:11:44 UTC 2013,,,,,,0|i1pi3j:,357047,,,,,,,,"04/Nov/13 14:56;fmeschbe;The problem seems to be in the save button function:

$.post(pluginRoot + '/' + $(this).attr('__pid') + '?' + $(this).find('form').serialize(), function() {
			// reload on success - prevents AJAX errors - see FELIX-3116
			document.location.href = pluginRoot; 
		});

Here the form is serialized and appended to the request URL. This is wrong. The serialized form must be transmitted as part of the request body.","04/Nov/13 16:11;fmeschbe;Fixed in Rev. 1538661

This not only affected saving configuration but also deleting and unbinding configuration. Fixed all three instances sending the POST parameters as request body instead of URL query string",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support hashed password,FELIX-4299,12677036,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,01/Nov/13 10:39,06/Feb/14 18:11,14/Mar/19 02:48,01/Nov/13 10:44,webconsole-4.2.0,,,,,,webconsole-4.2.2,,,,,,,Web Console,,,,,,0,,,,,,"While the Web Console supports extension of its access authentication, the default authentication is just a simple username/password match where the password is part of the configuration and may be flying around in plaintext.

To prevent the password from being stored in plain text in the configuration, the Web Console should support simple hashing of the password. A hashed password is of the form

  {hashCode}base64-encoded-hashed-password

where hashCode is the hash algorithm used and base64-encoded-hashed-password is the hashed password encoded in base64.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,356412,,,Fri Nov 01 10:44:58 UTC 2013,,,,,,0|i1pfyn:,356700,,,,,,,,01/Nov/13 10:44;fmeschbe;Implemented hashed password support in Rev. r1537892,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] timing hole in opening a dependency manager,FELIX-4297,12676191,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,28/Oct/13 18:35,04/Sep/14 08:04,14/Mar/19 02:48,28/Oct/13 23:08,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Pierre de Rop saw this running the integration tests:

test_concurrent_injection_with_bundleContext(org.apache.felix.scr.integration.Felix3680_2Test)  Time elapsed: 36.597 sec  <<< ERROR!
java.lang.NullPointerException
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeUnbindMethod(DependencyManager.java:1710)
        at org.apache.felix.scr.impl.manager.SingleComponentManager.invokeUnbindMethod(SingleComponentManager.java:387)
        at org.apache.felix.scr.impl.manager.DependencyManager$MultipleDynamicCustomizer.removedService(DependencyManager.java:355)
        at org.apache.felix.scr.impl.manager.DependencyManager$MultipleDynamicCustomizer.removedService(DependencyManager.java:290)
        at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:1503)
        at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:1398)
        at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.untrack(ServiceTracker.java:1258)
        at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1437)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.access$000(Felix.java:74)
        at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
        at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148)
        at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
        at org.apache.felix.scr.integration.components.felix3680_2.Main$RegistrationHelper$2.run(Main.java:136)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:722)


The problem is that a service is being removed between the time the component instance is being created and the time the dependency manager is opened, and there is no open latch yet.  I see that the EdgeInfos are never reused, so the fix appears to be to:
1. set up all the edgeInfos in the ComponentContextImpl constructor, avoiding a race (not observed AFAIK) in getEdgeInfo
2. make the open latch and close latch in EdgeInfo final
3. in DependencyManager.invokeUnbind and invokeUpdated make sure open is complete before checking outOfRange.
4. distinguish between out of range before and after.",,,,,,,,,,,,,,,,,,,,29/Oct/13 16:13;pderop;stacktrace.log;https://issues.apache.org/jira/secure/attachment/12610827/stacktrace.log,29/Oct/13 22:28;pderop;stacktrace2.log;https://issues.apache.org/jira/secure/attachment/12610935/stacktrace2.log,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-29 16:13:20.875,,,no_permission,,,,,,,,,,,,355688,,,Wed Oct 30 10:15:59 UTC 2013,,,,,,0|i1pbi7:,355976,,,,,,,,28/Oct/13 23:08;djencks;Should be fixed in rev 1536550,"29/Oct/13 16:13;pderop;While testing, I got two ""timeount on latch"" logs, following by some stacktraces.

For simplicity, I changed the current dumpThreads method in order to log in WARN, instead of DEBUG, in order to reproduce the problem without having too much logs.

Also: should this dumpstack be logged in WARN instead of DEBUG ? 
","29/Oct/13 18:47;djencks;Added one possible fix for the latch timeout in rev 1536844

I'm slightly reluctant to make all dumpThreads log at WARN since it's also called from the circular dependency detection, which does not necessarily indicate an error.  Rather than making the log level configurable I'm tempted to leave it as is and ask people who find bugs to turn up the log level.  (hopefully we'll fix all these bugs soon :-)","29/Oct/13 22:28;pderop;Ok, in fact, I did not know that it was intentional to log this dump stack in debug , and I have no problem with this. Now, I know it :-)

I have tested the fix in rv 1536844, but I'm still having the two ""timeout on latch"" logs , including the stacktraces in debug.

I have attached stacktrace2.log to this issue.
In this log, I also joined every DS debug logs, in case it may help.

let me know if you need more informations.","30/Oct/13 08:11;djencks;Looking hard at the new logs I found what I think the problem is, I added a test case demonstrating.

Component FactoryClient has references to a factory component (ComponentFactory) and also a multiple reference to the service the component factory creates with newInstance.  The ComponentFactory reference is first in the xml descriptor so is opened first.  The setFactory method calls newInstance on the factory, creating a service which results in a service event for the other bind method.  Since we're still in the first bind method for the factory, the edgeInfo for the 2nd reference hasn't even had the open tracking count set, and can't possibly get it's open latch counted down... that happens later when the 2nd dependency manager is opened.

The solution is to notice that if the open tracking count is not set, then the tracking count from the service event must be out of range since the tracker has recorded it and sometime later the open will be set to the highest tracking count the tracker has recorded.

rev 1536996","30/Oct/13 10:15;pderop;I confirm that the fix works ! I don't have anymore the """"timeount on latch"" error messages.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot deactivate service interface detection in DS annotations,FELIX-4296,12676095,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,bhillou,bhillou,28/Oct/13 10:11,31/Jul/14 13:13,14/Mar/19 02:48,24/Jul/14 13:18,scr ds annotations 1.2.4,scr generator 1.10.0,,,,,maven-scr-plugin 1.19.0,scr ant task 1.13.0,scr ds annotations 1.2.8,scr generator 1.12.0,,,,SCR Tooling,,,,,,0,,,,,,"I am trying to use DS annotations to declare an extender, and I have the following annotation and class definition in order to prevent declaring a service with a SynchronousBundleListener interface : 

@Component(service={})
public class ExtenderBundleListener implements SynchronousBundleListener {

According to the DS annotation specification this is value, as is illustrated from the javadoc :

	/**
	 * The types under which to register this Component as a service.
	 *
	 * <p>
	 * If no service should be registered, the empty value
	 * <code>&#x7B;&#x7D;</code> must be specified.
	 *
	 * <p>
	 * If not specified, the service types for this Component are all the
	 * <i>directly</i> implemented interfaces of the class being annotated.
	 *
	 * @see ""The service element of a Component Description.""
	 */
	Class< ? >[] service() default {};

Unfortunately this doesn't work, as it seems that the annotation parser transforms the {} value into ""null"" so the following code in the DS annotation processor doesn't work as expected : 

        final List<String> listedInterfaces = new ArrayList<String>();
        if (cad.getValue(""service"") != null) {
            final String[] interfaces = (String[]) cad.getValue(""service"");
            for (final String t : interfaces) {
                listedInterfaces.add(t);
            }
        } else {
            // scan directly implemented interfaces
            this.searchInterfaces(listedInterfaces, scannedClass.getScannedClass());
        }

This is a bit problematic to solve because we would need to differentiate between the null and empty case, but it seems that this is somehow not supported by the annotations parser ?

For the moment I worked around the problem by using the following annotation, but it's rather ugly since it still generates a service that is not needed :

@Component(service={ExtenderBundleListener.class}, immediate = true) // ideally we would like to not specify any service but it's seems that due to a bug in the DS annotation processor this is not possible so we use the immediate setting instead
public class ExtenderBundleListener implements SynchronousBundleListener {
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-07-23 14:02:42.221,,,no_permission,,,,,,,,,,,,355592,,,Thu Jul 24 13:18:58 UTC 2014,,,,,,0|i1pawv:,355880,,,,,,,,"23/Jul/14 14:02;cziegeler;I think the problem lies in the ClassScanner.parseAnnotation - it discards empty arrays as it can't do a type conversion
[~bhillou] do you have a simple test project to share?",24/Jul/14 13:18;cziegeler;I've added a check distinguishing between the empty array and not providing a value in rev 1613113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] logic error in handling configuration LOCATION_CHANGED event,FELIX-4293,12675904,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,25/Oct/13 22:44,04/Sep/14 08:04,14/Mar/19 02:48,26/Oct/13 07:41,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Pierre de Rop found this with a stack trace like:

ava.lang.NullPointerException
      at
org.apache.felix.scr.impl.manager.ComponentFactoryImpl.getProperties(ComponentFactoryImpl.java:226)
      at
org.apache.felix.scr.impl.manager.ComponentFactoryImpl.configurationUpdated(ComponentFactoryImpl.java:396)
      at
org.apache.felix.scr.impl.config.ConfigurationSupport.configurationEvent(ConfigurationSupport.java:390)
      at

The problem occurs because I didn't adapt the code well enough to broken config admin implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,355402,,,Sat Oct 26 16:30:15 UTC 2013,,,,,,0|i1p9qv:,355690,,,,,,,,"26/Oct/13 07:41;djencks;rev 1535941

I basically reversed many of the changes in felix-3651 rev 1480108 except now extracting the info we need from the Configuration before ungetting the config admin instance.  This makes the logic flow a little clearer.",26/Oct/13 16:30;djencks;Pierre reports the problem is still there.  It looks like CM_LOCATION_CHANGE events are supposed to be sent out even before there are any properties set.  In rev 1536005 I added some code to ignore these events.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Issue with factory components with required configuration,FELIX-4290,12675482,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,pderop,pderop,24/Oct/13 13:05,04/Sep/14 08:04,14/Mar/19 02:48,25/Oct/13 07:05,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"This issue is related to the dev post at http://www.mail-archive.com/dev@felix.apache.org/msg31209.html

While doing some non regression tests on the scr/trunk (before doing 1.8 release, I came across some problems with some of our applications using declarative service.

What am I observing is that many factory components are unsatisfied and our application is not coming up at all (It was working fine with scr 1.6.2).

Now, I have joined to this issue an integration test which seems to reproduce the problem, and also a candidate fix.

The ComponentFactoryWithTargetFiltersTest test is using the integration_test_targetfilter_factory_components.xml and does the following:

1) it enables the ""factory.component.reference.targetfilter"" component.
This component has a required configuration, is a factory component, and has a dynamic reference 1..1 on a SlmpleService instance.

2) Then we instantiate two SimpleService instances: The first one contains a ""value=service1"" service property, and the second one contains the ""value=service2"" service property.

3) at this point, we create the configuration for the component factory.
Notice that at this point, the factory component should transit from STATE_UNSATISFIED to STATE_FACTORY. but it seems that this is not the case and we see in logs:

log level: 3 D=14:55:12,837 T=Thread[Configuration Updater,5,main]: [factory.component.reference.targetfilter(0)] Configuration PID updated for Component Factory
log level: 3 D=14:55:12,837 T=Thread[Configuration Updater,5,main]: [factory.component.reference.targetfilter(0)] Current ComponentFactory state=4
log level: 4 D=14:55:12,837 T=Thread[Configuration Updater,5,main]: [factory.component.reference.targetfilter(0)] Attempting to activate unsatisfied component
log level: 4 D=14:55:12,837 T=Thread[Configuration Updater,5,main]: [factory.component.reference.targetfilter(0)] ActivateInternal
log level: 4 D=14:55:12,837 T=Thread[Configuration Updater,5,main]: [factory.component.reference.targetfilter(0)] Activating component from state 4
log level: 4 D=14:55:12,837 T=Thread[Configuration Updater,5,main]: [factory.component.reference.targetfilter(0)] Dependency not satisfied: ref
log level: 4 D=14:55:12,837 T=Thread[Configuration Updater,5,main]: [factory.component.reference.targetfilter(0)] Not all dependencies satisfied, cannot activate


4) Then we lookup the ComponentFactory for the ""factory.component.reference.targetfilter"" component, and we pass to the CF.newInstance() method a Hashtable with the following target filter:

""ref.target=""(value=service2)"")

4) and finally, we expect the component to be bound to SimpleService2 (because we have configured the target filter (ref) to ""(value=service2)"".

Initially, i though that the problem was coming from target filters. But it seems that the problem comes from the fact that the factory component stays unsatisfied, event if we provide the configuration and even when the two SImpleService instances are registered.

And the test fails like this:

junit.framework.AssertionFailedError: expected:<64> but was:<4>
        at junit.framework.Assert.fail(Assert.java:57)
        at junit.framework.Assert.failNotEquals(Assert.java:329)
        at junit.framework.Assert.assertEquals(Assert.java:78)
        at junit.framework.Assert.assertEquals(Assert.java:234)
        at junit.framework.Assert.assertEquals(Assert.java:241)
        at junit.framework.TestCase.assertEquals(TestCase.java:409)
        at org.apache.felix.scr.integration.ComponentFactoryWithTargetFiltersTest.test_component_factory(ComponentFactoryWithTargetFiltersTest.java:82)


Now, if I apply the proposed attached patch, then the integration test is successful and my application is also coming up correctly.

(I did not have time to try to follow what David is suggesting in the dev post, regarding a potential issue in SingleComponentManager.reconfigure() and a missing check regarding  m_factoryProperties).",,,,,,,,,,,,,,,,,,,,24/Oct/13 13:08;pderop;FELIX-4290.patch;https://issues.apache.org/jira/secure/attachment/12610082/FELIX-4290.patch,24/Oct/13 13:09;pderop;FELIX-4290.test.tgz;https://issues.apache.org/jira/secure/attachment/12610083/FELIX-4290.test.tgz,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-25 07:05:55.748,,,no_permission,,,,,,,,,,,,355059,,,Mon Jun 23 17:12:37 UTC 2014,,,,,,0|i1p7mn:,355347,,,,,,,,24/Oct/13 13:08;pderop;attached proposed patch,24/Oct/13 13:09;pderop;Attached integration test,"25/Oct/13 07:05;djencks;r1535647

I found a slightly less invasive place to call setTargets(getProperties()), in the ComponentFactoryImpl.  I moved your very nice test into the existing ComponentFactory test.

many thanks!","23/Jun/14 17:12;kmart216;for clarification, the affects version is 1.6.2 and fix is 1.8.0, currently listing is incorrect",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spaces within values are removed for default values,FELIX-4289,12675473,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,24/Oct/13 12:30,18/Jan/14 19:43,14/Mar/19 02:48,24/Oct/13 12:34,metatype-1.0.8,,,,,,metatype-1.0.10,,,,,,,Metatype Service,,,,,,0,,,,,,"The current behavior of removing spaces from default values is wrong, spaces should only be removed at the beginning and at the end of a
value (section 105.13.3.21) - and only if not escaped.
Currently all spaces are removed, e.g if the default value is ""Hello World"", this will be changed to ""HelloWorld""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,355050,,,Thu Oct 24 12:34:42 UTC 2013,,,,,,0|i1p7kn:,355338,,,,,,,,24/Oct/13 12:34;cziegeler;I've fixed this in rev 1535353. Spaces are only removed if not escaped and only at the beginning and end of a value,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] NPE when calling ComponentInstance.dispose after bundle shut down,FELIX-4287,12674902,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,21/Oct/13 21:45,22/Oct/13 23:17,14/Mar/19 02:48,22/Oct/13 00:05,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"There are no checks in the call sequence from ComponentInstance.dispose that the component has not already been disposed.  This often causes no problems but if the bundle has been shut down and the ComponentInstance is stale this can cause an NPE such as (thanks to Pierre de Rop):

java.lang.NullPointerException
      at
org.apache.felix.scr.impl.BundleComponentActivator.unregisterComponentId(BundleComponentActivator.java:500)
      at
org.apache.felix.scr.impl.manager.AbstractComponentManager.clear(AbstractComponentManager.java:1157)
      at
org.apache.felix.scr.impl.manager.SingleComponentManager.clear(SingleComponentManager.java:109)
      at
org.apache.felix.scr.impl.manager.AbstractComponentManager.disposeInternal(AbstractComponentManager.java:890)
      at
org.apache.felix.scr.impl.manager.AbstractComponentManager.dispose(AbstractComponentManager.java:576)
      at
org.apache.felix.scr.impl.manager.AbstractComponentManager.dispose(AbstractComponentManager.java:561)
      at
org.apache.felix.scr.impl.manager.ComponentContextImpl$ComponentInstanceImpl.dispose(ComponentContextImpl.java:226)
      at
....

I'm going to eliminate the direct cause of the NPE by not unsetting the field in BCA but also simplify the deactivate/dispose methods to make the control flow clearer and put a disposed check at the top.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,354524,,,Tue Oct 22 23:17:29 UTC 2013,,,,,,0|i1p4c7:,354814,,,,,,,,22/Oct/13 00:05;djencks;r1534395,22/Oct/13 23:17;djencks;Pierre reports the problem is fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] improve some now-misleading class names,FELIX-4286,12674205,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,16/Oct/13 22:00,20/Nov/13 08:10,14/Mar/19 02:48,20/Nov/13 08:10,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"DelayedComponentManager can be removed.
ImmediateComponentManager to be renamed SingleComponentManager
ImmediateComponentHolder to be renamed ConfigurableComponentHolder",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,353827,,,Wed Nov 20 08:10:35 UTC 2013,,,,,,0|i1p02v:,354119,,,,,,,,20/Nov/13 08:10;djencks;rev 1532922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
actually throw exception if method not found,FELIX-4283,12673582,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,rickhall,dbrosius,dbrosius,13/Oct/13 06:31,15/Oct/13 02:02,14/Mar/19 02:48,14/Oct/13 20:24,framework-4.2.0,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,"code create exception, but doesn't throw it. patch throws it.

against trunk",,,,,,,,,,,,,,,,,,,,13/Oct/13 06:32;dbrosius;4283.txt;https://issues.apache.org/jira/secure/attachment/12608187/4283.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-14 20:24:19.778,,,no_permission,,,,,,,,,,,,353205,,,Mon Oct 14 20:24:19 UTC 2013,,,,,,0|i1ow8n:,353492,,,,,,,,"14/Oct/13 20:24;rickhall;I applied your patch, please close if satisfied. Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP Bundle 2.2.1 has and incorrect embedded Jetty instance,FELIX-4282,12673537,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,brucej,brucej,12/Oct/13 08:08,01/Aug/15 09:22,14/Mar/19 02:48,11/Nov/13 12:18,,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,2,,,,,,"I've recently downloaded the latest version of the http bundle 2.2.1 which
contains the update to Jetty 7. This seems to have a problem, perhaps
because the Jetty version is a snapshot.

java.lang.NoSuchMethodError:
org.eclipse.jetty.util.QuotedStringTokenizer.unquoteOnly(Ljava/lang/String;
)Ljava/lang/String;
	at
org.eclipse.jetty.server.CookieCutter.parseFields(CookieCutter.java:284)
	at org.eclipse.jetty.server.CookieCutter.getCookies(CookieCutter.java:64)
	at org.eclipse.jetty.server.Request.getCookies(Request.java:499)
	at
org.eclipse.jetty.server.session.SessionHandler.checkRequestedSessionId(Ses
sionHandler.java:260)
	at
org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java
:155)
	at
org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java
:978)
	at
org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:13
5)
	at
org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHan
dlerCollection.java:255)
	at
org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:
116)
	at org.eclipse.jetty.server.Server.handle(Server.java:369)
	at
org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpC
onnection.java:486)
	at
org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttp
Connection.java:933)
	at
org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComple
te(AbstractHttpConnection.java:995)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)
	at
org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.jav
a:82)
	at
org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint
.java:606)
	at
org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.
java:46)
	at
org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java
:603)
	at
org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:
538)
	at java.lang.Thread.run(Thread.java:724)


If I build the bundle manually with the 7.4.16 Jetty-all, I don't see this
problem.

I'm using the released HTTP Bundle from the felix download site. If I
manually remove the classes from the exploded jar and replace them with
the contents of the latest release Jetty all build (which is
jetty-all-server-7.6.13.v20130916) then I no longer see this problem.

I suspect that the reason that we see this is that we are using Jetty 7
continuations (looking at the stack trace, this seems to be an async
operation) and so if you're not using them, you may never have encountered
this problem.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-03 10:32:46.39,,,no_permission,,,,,,,,,,,,353160,,,Mon Nov 11 12:25:51 UTC 2013,,,,,,0|i1ovyn:,353447,,,,,,,,"03/Nov/13 10:32;wolfgang.glas@ev-i.at;The title of this issue is misleading, because the actual affected version of HTTP Bundle is 2.2.1 and not 2.1.1, that's why I reported a duplicate.

Please, please bring forward a working HTTP service release 2.2.2 with a stable jetty under the hood,

  Best regards and TIA, Wolfgang","03/Nov/13 10:48;marrs;Out of curiosity, how do you determine that the Jetty version we've used in the release is a snapshot version, and not an official release? As far as I can see, we've used an official release that was announced [1] by the Jetty community. Granted, there might still be a bug in there, but the text implies that we did something wrong by including a snapshot release and I don't think that is actually true.

Also, feel free to provide patches and/or extra tests if you feel strongly about this issue as both will obviously help us provide a new release sooner.

[1] http://dev.eclipse.org/mhonarc/lists/jetty-announce/msg00052.html","03/Nov/13 10:57;brucej;When jetty starts, the CombinedActivator extracts the version string from inside Jetty. This shows as: Started jetty 7.x.y-SNAPSHOT

Of course, that might be an error in either the code around Jetty or in Jetty itself. However, the missing class is present in the Jetty release:

jetty-all-server-7.6.13.v20130916.jar","03/Nov/13 11:15;wolfgang.glas@ev-i.at;All I can see, is that felix-http depends on on jetty-7.6.12.v20130726 as per the included pom.xml:

$ unzip -p org.apache.felix.http.jetty-2.2.1.jar META-INF/maven/org.apache.felix/org.apache.felix.http.jetty/pom.xml | grep '<jetty.version>'
    	<jetty.version>7.6.12.v20130726</jetty.version>

Please also note, that we are faced with a missing method and not a missing class, hence the refrenced jetty version seems to be inconsistent in its self....","03/Nov/13 13:21;wolfgang.glas@ev-i.at;I can confirm, that switching to jetty-7.6.13.v20130916 in jetty/pom.xml fixes the problem.

Please consider releasing a 2.2.2 update including the mentioned jetty upgrade.

  Best regards, Wolfgang","04/Nov/13 12:13;jajans;Fixing the used version of Jetty is easy enough, but is anybody able to provide me with a use-case to test the (in)correct behaviour? ","04/Nov/13 13:07;wolfgang.glas@ev-i.at;Install the following bundles alongside with felix.http in a blueprint-enabled felix (aries blueprint might be needed), we use apache-karaf-2.2 or 2.3:

http://repo2.maven.org/maven2/org/apache/geronimo/specs/geronimo-jpa_2.0_spec/1.1/geronimo-jpa_2.0_spec-1.1.jar
http://repo2.maven.org/maven2/commons-codec/commons-codec/1.4/commons-codec-1.4.jar
http://maven.clazzes.org/org/clazzes/util/aop-util/1.6.0/aop-util-1.6.0.jar
http://maven.clazzes.org/org/clazzes/util/clazzes-util/1.3.0/clazzes-util-1.3.0.jar
http://maven.clazzes.org/org/clazzes/util/http-util/1.7.4/http-util-1.7.4.jar
http://maven.clazzes.org/org/clazzes/login/jaas-login-service/1.2.0/jaas-login-service-1.2.0.jar
http://maven.clazzes.org/org/clazzes/login/http-login-adapter/1.3.0/http-login-adapter-1.3.0.jar

...and try to access the supplied login facility under

http://localhost:8080/http-login/org.clazzes.login.jaas/login

(port may vary according to your felix.http configuration...)

The service set it's own cookie LOGIN_SESSION_ID when logged in to the jaas-Domain given in the use name field as 'domain/user'.
Hopefully, this works for you, most notable, you will not have a configured jaas domain if not using karaf....

felix.http-2.2.0 works, felix.http-2.2.1 fails, felix-http-2.2.1 with update jetty-7.6.13.v20130916 works again.

  Best regards, Wolfgang","09/Nov/13 13:14;jajans;[~wolfgang.glas@ev-i.at] & [~brucej], I'm *not* able to reproduce this issue?! What I've done is the following (I've repeated it several times):

# unpacked an Apache Karaf 2.3.3;
# installed the features eventadmin & spring-aspects;
# copied Felix HTTP 2.2.1 and the list of bundles you specified to the ""deploy"" folder of Karaf;
# opened http://localhost:8080/http-login/org.clazzes.login.jaas/login, which opened without any errors (I believe here the error should expose itself already?!);
# entered ""karaf""/""karaf"";
# was greeted with a ""login successful"" message and a logout button.

Upon further investigation, I've unpacked the HTTP 2.2.1 bundle and ran the QuotedStringTokenizer class through {{javap}} (relevant lines only):

{code}
  public static java.lang.String unquoteOnly(java.lang.String);
  public static java.lang.String unquoteOnly(java.lang.String, boolean);
{code}

So, it does seem the necessary methods are properly inlined and available...

{color:blue}edited the title to reflect correct version of HTTP bundle{color}","09/Nov/13 13:41;wolfgang.glas@ev-i.at;Hello J.W. Nansen,

  What you are describing is the correct behaviour of our login service, thanks for trying to reproduce out problem ;-)

  In our setup, the example fails at the very first HTTP request with jetty-7.6.12.v20130726 and succeeds with jetty-7.6.13.v20130916 

  We are BTW currently using a patched version felix.http.jetty, which is created by upgrading the jetty dependency to jetty-7.6.13.v20130916:

  http://maven.clazzes.org/org/apache/felix/org.apache.felix.http.jetty/2.2.1-clazzes1/org.apache.felix.http.jetty-2.2.1-clazzes1.jar

  Honestly, I have no clue why our example fails in our installation - which is quite similar to yours - and why you are succeeding :-/

  The conclusion is, that felix.http with jetty-7.6.13.v20130916 under the hood seems to be more robust to subtle differences in the OSGi environment and we have two options:

 a) release felix.http-2.2.2 with jetty-7.6.13.v20130916 
 b) find a strategy to find out even more about the issue.
  
  Best regards,

   Wolfgang","09/Nov/13 16:36;jajans;Performing a comparison using MD5 hashes on the differences between Jetty 7.6.12 & 7.6.13 reveals that the classes {{CookieCutter}} and {{QuotedStringTokenizer}} are *exactly* the same in both releases (only 17 of the 564 classes are different between these two releases). So, merely from a byte-code perspective this can not be the solution for the original problem. Why an upgrade to Jetty 7.6.13 appears to solve your issue is beyond me. 
I therefore do not directly share your opinion that upgrading Jetty to 7.6.13 should be done for ""more robustness"". Instead, I'd try to find out why it fails in your particular situation. In addition, I would opt for upgrading directly to Jetty 9.x (as is already done in SVN) as to benefit from the latest features provided by it, and to allow working on [RFC-189|https://github.com/osgi/design/raw/master/rfcs/rfc0189/rfc-0189-Http_Service_Updates.pdf]. The only downside of this would be that Jetty 9 requires Java 7 (but I do not think that is that of a major issue for most people).

","09/Nov/13 19:17;wolfgang.glas@ev-i.at;For my part, we have a workaround for this issue and hence I won't put more efforts in drilling down the exact reason of the original exception.

Does Bruce Jackson, the original reporter, have new insights? ","09/Nov/13 19:27;brucej;In our case, we only discovered the problem because we were using the continuations feature of Jetty 7. Regular synchronous servlets worked fine, but asynchronous ones did not. Its hard to give you a specific test case as the one we have is somewhat convoluted, however that was the cause.","09/Nov/13 20:02;wolfgang.glas@ev-i.at;OK, I think, I've found the smoking gun. I unpacked both, org.apache.felix.http.bundle-2.2.1.jar and org.apache.felix.http.jetty-2.2.1.jar and discovered,that the QuotedStringTokenizer classes differ in both bundles.

So, this seems to be a packaging problem of org.apache.felix.http.bundle. In my case, I really had the problem with org.apache.felix.http.bundle and not with org.apache.felix.http.jetty.

-------------------- felix.http.jetty --------------------
wglas@wheezy-amd64:~/tmp/org.apache.felix.http.jetty-2.2.1/org/eclipse/jetty/util$ javap QuotedStringTokenizer.class 
Compiled from ""QuotedStringTokenizer.java""
public class org.eclipse.jetty.util.QuotedStringTokenizer extends java.util.StringTokenizer {
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean, boolean);
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean);
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String);
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String);
  public boolean hasMoreTokens();
  public java.lang.String nextToken() throws java.util.NoSuchElementException;
  public java.lang.String nextToken(java.lang.String) throws java.util.NoSuchElementException;
  public boolean hasMoreElements();
  public java.lang.Object nextElement() throws java.util.NoSuchElementException;
  public int countTokens();
  public static java.lang.String quoteIfNeeded(java.lang.String, java.lang.String);
  public static java.lang.String quote(java.lang.String);
  public static void quote(java.lang.Appendable, java.lang.String);
  public static boolean quoteIfNeeded(java.lang.Appendable, java.lang.String, java.lang.String);
  public static java.lang.String unquoteOnly(java.lang.String);
  public static java.lang.String unquoteOnly(java.lang.String, boolean);
  public static java.lang.String unquote(java.lang.String);
  public static java.lang.String unquote(java.lang.String, boolean);
  public boolean getDouble();
  public void setDouble(boolean);
  public boolean getSingle();
  public void setSingle(boolean);
  static {};
}
wglas@wheezy-amd64:~/tmp/org.apache.felix.http.jetty-2.2.1/org/eclipse/jetty/util$ md5sum QuotedStringTokenizer.class 
1e73fc8a419d8ad696a9710f61bf788a  QuotedStringTokenizer.class
wglas@wheezy-amd64:~/tmp/org.apache.felix.http.jetty-2.2.1/org/eclipse/jetty/util$ 
-------------------- end of felix.http.jetty --------------------

-------------------- felix.http.bundle --------------------
wglas@wheezy-amd64:~/tmp/org.apache.felix.http.bundle-2.2.1/org/eclipse/jetty/util$ javap QuotedStringTokenizer.class 
Compiled from ""QuotedStringTokenizer.java""
public class org.eclipse.jetty.util.QuotedStringTokenizer extends java.util.StringTokenizer {
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean, boolean);
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean);
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String);
  public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String);
  public boolean hasMoreTokens();
  public java.lang.String nextToken() throws java.util.NoSuchElementException;
  public java.lang.String nextToken(java.lang.String) throws java.util.NoSuchElementException;
  public boolean hasMoreElements();
  public java.lang.Object nextElement() throws java.util.NoSuchElementException;
  public int countTokens();
  public static java.lang.String quoteIfNeeded(java.lang.String, java.lang.String);
  public static java.lang.String quote(java.lang.String);
  public static void quote(java.lang.Appendable, java.lang.String);
  public static boolean quoteIfNeeded(java.lang.Appendable, java.lang.String, java.lang.String);
  public static java.lang.String unquote(java.lang.String);
  public boolean getDouble();
  public void setDouble(boolean);
  public boolean getSingle();
  public void setSingle(boolean);
  static {};
}
wglas@wheezy-amd64:~/tmp/org.apache.felix.http.bundle-2.2.1/org/eclipse/jetty/util$ md5sum QuotedStringTokenizer.class 
bb539da5cafc8648f1e33a083f3182e5  QuotedStringTokenizer.class
wglas@wheezy-amd64:~/tmp/org.apache.felix.http.bundle-2.2.1/org/eclipse/jetty/util$ 
-------------------- end of felix.http.bundle --------------------
","10/Nov/13 14:12;jajans;Ok, thanks for the smoking gun, [~wolfgang.glas@ev-i.at]! I am finally able to reproduce this problem now, using v2.2.1 of  {{org.apache.felix.http.bundle}}. I tracked the problem down to the cometd project, which still references an old version of Jetty. That bundle is inlined first, causing the incorrect {{QuotedStringTokenizer}} class to be inlined in the bundle.

If you (and [~brucej]) aren't depending on Cometd, I suggest you to use the {{org.apache.felix.http.jetty}} and {{org.apache.felix.http.whiteboard}} bundles instead of the combined {{org.apache.felix.http.bundle}}...
","10/Nov/13 14:43;jajans;Committed a fix for this (and FELIX-4310) in rev #1540479. According to my local tests, the issue no longer manifests itself...
","10/Nov/13 14:49;wolfgang.glas@ev-i.at;Hello J.W. Hansen,

  Thanks for your efforts to further sort his one out ;-)

  The problem is, that the documentation of the HTTP service clearly states, that org.apache.felix.http.bundle is the bundle of choice and that the user should forget about the other bundles in most situations.

  I'd really love to have a felix-http-2.2.2 release with jetty-7.6.13 and cleaned up dependencies in  org.apache.felix.http.bundle.

  While everyone loves to see [RFC-189|https://github.com/osgi/design/raw/master/rfcs/rfc0189/rfc-0189-Http_Service_Updates.pdf] implemented, some users might have problems upgrading to java7 right now and given how long we've been waiting for an upgrade of felix-http-2.2.0 a *really* stable 2.2.2 version is highly appreciated.

  Best regards,

    Wolfgang","11/Nov/13 12:03;rombert;+1, would be great to see a 2.2.2 follow-up release.","11/Nov/13 12:18;jajans;I've verified all the POMs and updated them to use the correct Jetty version. Now, all resulting bundles use the same version, solving this issue once and for all...
","11/Nov/13 12:25;wolfgang.glas@ev-i.at;Hello J.W. Hansen,

Thanks for fixing this one ;-)

Can you please provide us with a fix version and  a tentative date, when a fix will appear on the download page?

  TIA, Wolfgnag",,,,,,,,,,,,,,,,,,,,,,,
Security Warning: Felix with Java Web Start,FELIX-4281,12673474,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,karlpauls,bilaco,bilaco,11/Oct/13 18:50,30/Jul/14 07:16,14/Mar/19 02:48,09/Jul/14 14:36,,,,,,,framework-4.4.1,,,,,,,,,,,,,1,,,,,,"Since the release of Java 7 update 40 the following warning occurs when you try to execute a signed (with valid certificate) Java Web Start application: 

-----------------------------
Security Warning

Do you want to run this application?
An unsigned application from the location below is requesting permission to run.

http://......

Running unsigned applications like this will be blocked in a future
release because it is potentially unsafe and a security risk
-----------------------------

Although the Java recognizes the certificate in the first dialog, it shows the warning message when the Felix's init method is invoked.

I have tested a same application over Java 7 update 21 and everything is ok.","Windows 7 with Java 7 update 40, 64 bits",,,,,,,,,,,,,,,,,,,27/Oct/13 10:18;nroduit;message.zip;https://issues.apache.org/jira/secure/attachment/12610469/message.zip,06/Jun/14 08:35;walkerr;sec_action.patch;https://issues.apache.org/jira/secure/attachment/12648615/sec_action.patch,23/Oct/13 20:18;nroduit;viewer.jnlp;https://issues.apache.org/jira/secure/attachment/12609914/viewer.jnlp,05/Jun/14 20:29;karlpauls;webstart.patch;https://issues.apache.org/jira/secure/attachment/12648542/webstart.patch,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-10-23 20:18:39.786,,,no_permission,,,,,,,,,,,,353097,,,Tue Jun 24 20:41:39 UTC 2014,,,,,,0|i1ovkn:,353384,,,,,,,,"23/Oct/13 20:18;nroduit;The viewer.jnlp file show the security message with JRE 1.7.0_45.

The strange thing is when you click cancel on the dialog, the application continues to load correctly!

... And in command line, the funny thing:
javaws viewer.jnlp (=> shows the security message)
javaws -verbose viewer.jnlp (=> don't show the security message)","23/Oct/13 21:09;bilaco;thanks, Nicolas



","24/Oct/13 08:35;nroduit;There are new specifications:
https://blogs.oracle.com/java-platform-group/entry/7u45_caller_allowable_codebase_and

I haven't read it carefully yet.","27/Oct/13 10:44;nroduit;I made a very simple test case (see message.zip in attachment) which try to load a class that doesn't exist with different classloaders:
1) mvn clean package  -Djarsigner.alias=""your alias"" -Djarsigner.storepass=""your pwd"" -Djarsigner.keystore=""/your_path/keystore.jks""
2) javaws /path/launcher.jnlp (=> don't show the security message)

But with Felix Framework Distribution 4.2.1 (or  4.3):
1) Download distribution
2) Edit the manifest to add the new required attributes:
Codebase=*
Permissions=all-permissions
Trusted-Only=true
Application-Name=Felix
2) sign jars
3) Adapt launcher.jnlp
4) javaws /path/launcher.jnlp (=> show the security message, when it tries to get the class ""dalvik.system.DexFile"")","25/Mar/14 19:33;nroduit;http://www.mail-archive.com/users%40felix.apache.org/msg14643.html
http://www.mail-archive.com/users%40felix.apache.org/msg14670.html

Would it be possible to have an option for not using framework extension.","05/Jun/14 14:58;walkerr;Just hit the exact same problem - very ugly since our app is otherwise 100% correct, proper manifest entries, and properly signed.

As an interim, can I propose a new System property which allows this code to be skipped e.g. felix.DexFile.skip

Default would be to process as present if the property is set absent or not set to true.","05/Jun/14 19:35;walkerr;Still digging into this one. 

In fact adding the property check as I suggested above does cure the initial problem, which also has a fuller investigation described here:

http://mail-archives.apache.org/mod_mbox/felix-users/201310.mbox/%3C526CFA1E.3060009@jmicrovision.com%3E

But it moves the problem on to a second case, which is the URLHandlers issue, also noted in the above:

http://www.mail-archive.com/users%40felix.apache.org/msg14643.html

I don't believe the System property check workaround I proposed is the right model. I'd say something better would be to test whether we're on Android (the first case) or JNLP (the second case) and avoid the errant code if so, always assuming there's no actual wa to code more defensively around the issue.

FWIW - the use of a static initializer in BundleWiringImpl also feels a poor choice. Anything that can cause issues such as this might be more gracefully handled in a method that was explicitly called (or not as the case may be).


","05/Jun/14 19:39;karlpauls;I don't think this issue has to do with the dexfile stuff. That is just a symptom of the problem namely, if you hit the urlclassloader that loaded felix with a request for a class it can't find it'll hit the fake url we add to it to make framework extensions work. Due to the problematic change in how the jvm is doing this security check that is what makes the issue appear - hence, it will not really help you to skip the dexfile loading. We would have to make it so that we don't register the framework extension url.","05/Jun/14 19:58;walkerr;Karl

It goes a little deeper than that I believe. The dexfile stuff is one instance of the root problem. If you patch around that code (which I have) you hit the next instance of the same problem, which occurs when registering URLHandlers.

Both of these cases use Class.forName() calls - which are documented in several articles as problematic in a JNLP environment where the JNLP classloader is being used. 

So at present, I now have 2 cases which cause the same problem. What I've yet to find is a common solution. The 1st one (the dexfile case) can be gotten around with a simple property check - even though I don't believe that's the right solution. The second one I'll dig more into tomorrow - getting late here!

_Edit:_ I should add, I don't believe the dexfle case goes back into the felix extension url handling, I think it's a standalone case. The stack trace (below) shows no Felix classes after BundleWiringImpl.

That said, I think the URLHandlers one is the nastier and trickier one to try and deal with

===
""Thread-15"" #51 prio=6 os_prio=0 tid=0x000000002ba37000 nid=0x228c in Object.wait() [0x000000002a89a000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Unknown Source)
	at com.sun.javaws.ui.JavawsSysRun.delegate(Unknown Source)
	- locked <0x00000005c0f987e8> (a java.lang.Object)
	at com.sun.deploy.util.DeploySysRun.execute(Unknown Source)
	at com.sun.deploy.util.DeploySysRun$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.deploy.util.DeploySysRun.executePrivileged(Unknown Source)
	at com.sun.deploy.ui.UIFactory.showPublisherInfo(Unknown Source)
	at com.sun.deploy.uitoolkit.impl.awt.ui.UIFactoryImpl.showPublisherInfo(Unknown Source)
	at com.sun.deploy.security.SandboxSecurity.showBlockedDialog(Unknown Source)
	- locked <0x00000005c141c9e0> (a java.lang.Object)
	at com.sun.deploy.security.SandboxSecurity.checkRunUntrusted(Unknown Source)
	at com.sun.deploy.security.SandboxSecurity.checkUnsignedSandboxSecurity(Unknown Source)
	- locked <0x00000005c142ebe0> (a com.sun.deploy.util.SessionProperties)
	at com.sun.deploy.security.SandboxSecurity.isPermissionGranted(Unknown Source)
	at com.sun.javaws.security.AppPolicy.grantRestrictedAccess(Unknown Source)
	at com.sun.javaws.security.AppPolicy.addPermissions(Unknown Source)
	at com.sun.jnlp.JNLPClassLoader.getTrustedCodeSources(Unknown Source)
	at com.sun.deploy.security.CPCallbackHandler$ParentCallback.strategy(Unknown Source)
	at com.sun.deploy.security.CPCallbackHandler$ParentCallback.openClassPathElement(Unknown Source)
	- locked <0x00000005c0f1f390> (a com.sun.deploy.security.CPCallbackHandler$ParentCallback)
	at com.sun.deploy.security.DeployURLClassPath$UrlLoader.<init>(Unknown Source)
	at com.sun.deploy.security.DeployURLClassPath$3.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.deploy.security.DeployURLClassPath.getLoader(Unknown Source)
	at com.sun.deploy.security.DeployURLClassPath.getLoader(Unknown Source)
	- locked <0x00000005c0f1f160> (a com.sun.deploy.security.DeployURLClassPath)
	at com.sun.deploy.security.DeployURLClassPath.getResource(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	- locked <0x00000005c0f1dfc0> (a com.sun.jnlp.JNLPClassLoader)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	- locked <0x00000005c0f1df48> (a com.sun.jnlp.JNLPClassLoader)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Unknown Source)
	at org.apache.felix.framework.BundleWiringImpl.<clinit>(BundleWiringImpl.java:1339)
	at org.apache.felix.framework.StatefulResolver.markResolvedRevisions(StatefulResolver.java:990)
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:429)
	at org.apache.felix.framework.Felix.init(Felix.java:692)
	at com.ascert.vt.launch.VtLauncher.launchFelix(VtLauncher.java:1011)
	at com.ascert.vt.launch.VtLauncher.launchProfile(VtLauncher.java:983)
	at com.ascert.vt.launch.VtLauncher.start(VtLauncher.java:675)
	at com.ascert.vt.launch.VersionCheckLaunchPanel$2.run(VersionCheckLaunchPanel.java:161)
	at java.lang.Thread.run(Unknown Source)
===

","05/Jun/14 20:24;karlpauls;Really, what we need to do is to introduce a felix.extensions.disable property which makes it so that we don't register our extension url. That should fix the issue.",05/Jun/14 20:29;karlpauls;Allow to disable extensions.,05/Jun/14 20:30;karlpauls;Ok. I attached a patch to this issue which hopefully makes this work if you set felix.extensions.disable=true. Can you please test it for me? If it does work I'll commit it to trunk (we should have a release soon now anyways so I could make it part of that as well). ,"06/Jun/14 05:14;walkerr;Thanks Karl - will give it a try today. I suspect the Extension manager may actually be a 3rd instance of the same forName() case rather than the underlying root cause, but it will be quick to test with your patch thanks.

Have the day set aside to dig further into this - will report back. Coincidentally, last time I was this deep in the Sun source code for Java was about 10 years ago working with Richard on a classloader issue on a little project called Oscar ... ;)","06/Jun/14 05:50;nroduit;Thanks Karl, I also think that having an option to disable the extension framework seems to be the only way to fix the issue at the moment.","06/Jun/14 08:34;walkerr;Patch does work Karl, thanks. There are some adaptations needed (noted below) ... guess it goes to prove that I don't understand how the ExtensionManager code works or rather what it clashes with in a JNLP!

If we assume people will only ever use Felix embedded, the mod will work provided they use setProperty to force this property set before launching Felix. But if we want to allow that new property in a JNLP file, we also need to support the required syntax which is that properties in there must be prefixed ""jnlp."" to be accessible as System properties e.g.

{noformat}
   <resources>
   ...
      <property name=""jnlp.felix.extensions.disable"" value=""true""/> 
   </resources>
{noformat}

I've attached a patch with one implementation approach for this - a mod to SecureAction to check for a ""jnlp,"" version of a property before falling back to System properties or the supplied default.

An alternative would be additional init code in Felix or FelixConstants to test each property that we wish to expose to JNLP files and push any non-null value into System properties. This would be more transparent, but also more maintenance whenever new FelixConstants are added.

An observations I found along the way was that you can launch javaws from the command line with a -silent option. This bypasses the dialog box much like -verbose / -noWebJava but without any other prompting. I don't think this helps much at this stage, but it definitely shows there is some inner switch that the lower code is testing before putting up the dialog.

I'm still troubled that I don't understand exactly what happens lower down in the JNLP classes/classloaders to cause it to decide to put up a blocking dialog rather than just throwing a CNFE. So I may carry on digging to see if I can figure it out for myself. I'd like to believe there may be some other more seamless solution in terms of combinations of attributes, signing and/or built in code checks. We could definitely detect the presence of a JNLP class loader - trouble there is that it's a com.sun class, and hence implementation dependent. It could differ in other Java implementations I guess.",06/Jun/14 08:35;walkerr;Patch to SecureAction to test JNLP form of system properties,"06/Jun/14 13:10;walkerr;Well I got to a better understanding, even if that didn't lead me (yet) to a more graceful solution

We hit the issue in this part of JNLPClassLoader

{noformat}
//----------------------------------------------------------------------
    // CPCallbackClassLoaderIf methods
    //
    public CodeSource[] getTrustedCodeSources(CodeSource[] sources) {
        List list = new ArrayList();

        Policy policy = (Policy) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                return Policy.getPolicy();
            }
        });

        for (int i=0; i < sources.length; i++) {
            CodeSource cs = sources[i];
            boolean trusted = false;
            PermissionCollection perms;

            perms = policy.getPermissions(cs);
            /* Get permissions based on JNLP file that defines code resource */
            try {
                trusted = _appPolicy.addPermissions(JNLPClassLoader.getInstance(), perms, cs, true);
{noformat}

That last part I think is trying to add/check a permission for the Extension url we added to the classpath of the URLClassLoader. This fails because ""http://felix.extensions:9/"" is not a trusted location. I tried seeing if adding that to the permitted sites configured in Java Control would remove the error - half expected it would, but for some reason it did not.

Without some way of either marking that URL as trusted, or allowing it's use untrusted, I suspect our only option is to skip around the Extension manager as per Karl's mod - with some form of jnlp specific property handling as noted above. 

In passing, I did notice that SecureAction uses a fixed URLClassLoader.class in the reflection call. This struck me as possibly incorrect. In the JNLP case I wondered if it would result in the super addUrl() method and not any overloaded method being called. I'm not exactly sure how using Reflection to overcome protected method access works - whether it would call the subclass method as per normal overloading, or just call the super class one.

I adapted the code as follows:
{noformat}
                case ADD_EXTENSION_URL_ACTION:
                    if (arg2 instanceof URLClassLoader)
                    {
                        Method addURL = arg2.getClass().getDeclaredMethod(""addURL"", new Class[] {URL.class});
                        addURL.setAccessible(true);
                        addURL.invoke(arg2, new Object[]{arg1});
                    }
                    return null;
{noformat}

I had hoped it may alter the behaviour for this case, but sadly not. Depending on the reflection handling though, it may be safer coding. JNLPClassLoader does overload this method in some small way:

{noformat}
    protected void addURL(URL url)
    {
        if (_jclParent != null) {
            /* Also in parent... */
            _jclParent.addURL(url);
        }
        super.addURL(url);
    }
{noformat}

Whilst this has no major effect, there could be other cases of sub-classes of URLClassLoader where this would matter.","06/Jun/14 13:18;walkerr;One other curiosity - a Q for Karl.

In the patched code, I noticed the following:

{noformat}
            Felix.m_secureAction.addURLToURLClassLoader(Felix.m_secureAction.createURL(
                Felix.m_secureAction.createURL(null, ""http:"", extensionManager),
                ""http://felix.extensions:9/"", extensionManager),
                Felix.class.getClassLoader());

                extensionManager = new ExtensionManager();
{noformat}

Was curious why the extensionManager  is only set non-null after the addURLToURLClassLoader() call. In the original version this would not have been a null value, the new ExtensionManager() would have been supplied to this call.

Is there a specific reason to pass null for extensionManager into addURLToURLClassLoader()?",06/Jun/14 16:51;nroduit;I agree that it would be necessary to have the property jnlp.felix.extensions.disable to be compliant with the new Java Web Start restrictions. It could be both: felix.extensions.disable  and jnlp.felix.extensions.disable,"06/Jun/14 20:55;karlpauls;I commited a modified version of my patch to trunk (to deal with the null value that Rob pointed out - thanks) in r1601009. Please close this issue if it works for you.

Regarding the jnlp prefix for the property I don't think we should deal with that inside the framework - the launcher of the framework can deal with it or the jnlp file has to be signed (to make insecure properties work). Regardless, however, even if we have to support something like that please open another issue and propose it there.","06/Jun/14 21:06;karlpauls;@Rob: this is what the javadoc has to say (hence, we don't need to worry): 

""If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, Second Edition, section 15.12.4.4; in particular, overriding based on the runtime type of the target object will occur.""

","07/Jun/14 06:15;walkerr;Will test it when back Monday Karl - sure it's all good, functionally same as what I was running yesterday which works fine.

New JIRA raised for JNLP properties:

https://issues.apache.org/jira/browse/FELIX-4528

","09/Jun/14 11:02;walkerr;Working my side.

Nicolas do you want to do any more tests before we close this one?

I'll leave FELIX-4528 open for a week or two for comments/feedback, and if no objections will commit that also since without it Felix is still not really WebStart friendly.",24/Jun/14 19:27;nroduit;It is OK for me. I let Cesar Souza close the issue.,"24/Jun/14 20:41;bilaco;thank you, guys",,,,,,,,,,,,,,,,,
The maven-scr-plugin generates false warnings when using @SlingServlet,FELIX-4277,12673238,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,rombert,rombert,10/Oct/13 14:34,16/Mar/14 10:06,14/Mar/19 02:48,05/Mar/14 13:29,scr annotations 1.9.6,,,,,,scr annotations 1.9.8,,,,,,,SCR Tooling,,,,,,0,,,,,,"I have a class which is annotated with 

@SlingServlet(resourceTypes = ""slingDemo/conferenceSchedule"", selectors = ""rss"", methods = ""GET"", extensions = ""xml"")

In Eclipse and also using the CLI, I get warnings that
	- Property sling.servlet.methods in class de.adaptto.conference_schedule.RssFeedServlet is set as private. This is redundant as no metatype will be generated. (org.apache.felix:maven-scr-plugin:1.15.0:scr:generate-scr-descriptor:process-classes)
	- Property sling.servlet.extensions in class de.adaptto.conference_schedule.RssFeedServlet is set as private. This is redundant as no metatype will be generated. (org.apache.felix:maven-scr-plugin:1.15.0:scr:generate-scr-descriptor:process-classes)
	- Property sling.servlet.selectors in class de.adaptto.conference_schedule.RssFeedServlet is set as private. This is redundant as no metatype will be generated. (org.apache.felix:maven-scr-plugin:1.15.0:scr:generate-scr-descriptor:process-classes)
	- Property sling.servlet.resourceTypes in class de.adaptto.conference_schedule.RssFeedServlet is set as private. This is redundant as no metatype will be generated. (org.apache.felix:maven-scr-plugin:1.15.0:scr:generate-scr-descriptor:process-classes)

I guess the SlingAnnotationProcessor should not set the propertyPrivate flag if metatype = false, but I'm not sure that this is the correct change.",,,,,,,,,,,,,,,,,,,,04/Mar/14 16:32;rombert;FELIX-4277-1.patch;https://issues.apache.org/jira/secure/attachment/12632528/FELIX-4277-1.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-10 07:31:32.454,,,no_permission,,,,,,,,,,,,352861,,,Wed Mar 05 13:29:38 UTC 2014,,,,,,0|i1ou4f:,353148,,,,,,,,"10/Dec/13 07:31;cziegeler;Yepp, I think that would be the correct solution",28/Feb/14 09:59;cziegeler;[~rombert] Could you please provide a patch ? :),"28/Feb/14 21:09;rombert;Yes, but there will be a delay :-)

_Edit_: fixed a typo","04/Mar/14 16:32;rombert;The attached [^FELIX-4277-1.patch] works for me. Warnings are no longer generated when  building, and the descriptor is the same.","05/Mar/14 13:29;cziegeler;Thanks for the patch, Robert. It's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicated name errors always happen when there are 2 factories with the same name,FELIX-4268,12672096,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,03/Oct/13 07:53,03/Oct/13 11:50,14/Mar/19 02:48,03/Oct/13 11:50,,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"iPOJO always throw an Exception about already used generated instance name when we create 2 instances from 2 different factories that have the same name. This can happen if you have private factories for example, and iPOJO doesn't complain when factory name is not unique.

This is probably a regression introduced during the NameGenerator refactoring (my bad).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,351722,,,2013-10-03 07:53:44.0,,,,,,0|i1on4n:,352010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when an instance is declared without a configuration using the @ConfigurationTracker,FELIX-4261,12671588,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,01/Oct/13 14:32,08/Oct/13 17:17,14/Mar/19 02:48,01/Oct/13 14:34,,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"The following configuraiton throws an NPE:

{code:java}
@Configuration
public class SimpleConfiguration {

    // Declare an instance of MyComponent named myInstance
    Instance myInstance = instance().of(MyComponent.class)
            .named(""foo"");
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,351298,,,Tue Oct 01 14:34:28 UTC 2013,,,,,,0|i1okjj:,351590,,,,,,,,01/Oct/13 14:34;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The @Bind annotation should use Class instead of String,FELIX-4251,12671097,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,28/Sep/13 17:46,08/Oct/13 17:17,14/Mar/19 02:48,03/Oct/13 14:09,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,350926,,,Thu Oct 03 14:09:58 UTC 2013,,,,,,0|i1oi8v:,351217,,,,,,,,03/Oct/13 14:09;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Specification deduction broken when the method does not start with the 'bind' prefix,FELIX-4250,12671096,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,28/Sep/13 17:41,08/Oct/13 17:17,14/Mar/19 02:48,30/Sep/13 09:35,,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"It was reported an error when detecting the service specification on the following code:

{code:java}
Set<MyServiceInterface> myServices;

@Bind(optional=true, aggregate=true)

addMyService(MyServiceInterface newService) {

 myServices.add(newService);

}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,350925,,,Mon Sep 30 09:35:33 UTC 2013,,,,,,0|i1oi8n:,351216,,,,,,,,30/Sep/13 09:35;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceUsage ThreadLocal removal,FELIX-4248,12670932,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,sauthieg,sauthieg,27/Sep/13 13:13,08/Oct/13 17:17,14/Mar/19 02:48,04/Oct/13 12:43,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"Currently, ServiceUsage is never removed from the ThreadLocal.
So we have references to iPOJO classes around even after bundle uninstall.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-30 09:51:28.125,,,no_permission,,,,,,,,,,,,350761,,,Fri Oct 04 12:39:28 UTC 2013,,,,,,0|i1oh87:,351052,,,,,,,,27/Sep/13 13:19;sauthieg;The current code also have {{m_usage.set(usage)}} that should not be required.,"30/Sep/13 09:51;clement.escoffier;This instruction was required for Dalvik (in 2008), we should test on newer Android version.","30/Sep/13 11:29;clement.escoffier;In the trunk version, the thread local objects are removed.",04/Oct/13 12:39;clement.escoffier;We will investigate the `m_uage.set(x)` in the next version (1.11.1),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak with ServiceUsage and inner class (Listener style),FELIX-4247,12670931,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,sauthieg,sauthieg,27/Sep/13 13:11,08/Oct/13 17:17,14/Mar/19 02:48,02/Oct/13 07:16,ipojo-runtime-1.10.1,,,,,,ipojo-manipulator-1.11.0,ipojo-runtime-1.11.0,,,,,,iPOJO,,,,,,0,,,,,,"Assume that you have a @Component using a swing-like technology with a load of Listeners and callbacks.
You'll probably write something like:
{code:java}
button.addClickListener(new ClickListener() {
   // boilerplate code
   myDependency.useIt();
});
{code}

Where myDependency is a @Requires field.

When the listener is executed, it is used from outside of the component (from iPOJO POV), its method is not intercepted and a reference is kept in ServiceUsage$Usage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-30 09:46:54.443,,,no_permission,,,,,,,,,,,,350760,,,Wed Oct 02 07:16:06 UTC 2013,,,,,,0|i1oh7z:,351051,,,,,,,,30/Sep/13 09:46;clement.escoffier;To fix the leak we must introduce the same interception we do in component class. I'm going to create a couple of subtasks required to fix it.,01/Oct/13 16:17;clement.escoffier;I think the leak is circumvented. I need to implement a test to be avoid regressions.,"02/Oct/13 07:16;clement.escoffier;Fixed in trunk.

I've added a test a check the fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR and Metatype descriptor files get deleted on subsequent (incremental) eclipse build,FELIX-4246,12670897,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,egli,egli,27/Sep/13 09:59,04/Oct/13 14:10,14/Mar/19 02:48,27/Sep/13 11:48,maven-scr-plugin 1.14.0,,,,,,maven-scr-plugin 1.15.0,scr generator 1.8.2,,,,,,SCR Tooling,,,,,,0,,,,,,"There's a regression bug introduced in maven-scr-plugin 1.14.0 which *worked fine in 1.13.0*. Consider the following scenario:

 * a project is setup in eclipse/m2eclipse using the maven-scr-plugin 1.14.0 and contains java classes annotated with @Service and/or @Components
 * the project is cleaned ('clean project') and built ('build project')
 -> the descriptor .xml files are created as expected

 * when the project is built again (incrementally, eg manually triggering another 'build project'), the descriptor .xml files are deleted


Some debugging narrows the problem down to the MavenProjectScanner.getSourcesForScanKind, where the buildContext.newScanner is invoked. The scanner returned there is of type EclipseBuildContext (set by m2eclipse) when doing a build right after a clean - and in this case the scanner finds java files, sets those via project.setSources and MetaTypeIO.generateDescriptors correctly generates the descriptors.

In the incremental(-eclipse)-build case though, the buildContext.newScanner returns an EclipseIncrementalBuildContext - which results in an empty set of sources being passed to project.setScanner, hence later down the call-stack MetaTypeIO.generateDescriptors gets an empty list of components, thus *thinks it's a good idea to go through the metatype directory and delete 'obsolete' metatype files* - when in fact they are not quite obsolete..

Maybe it would be better to hook into the 'clean' method for deleting/cleaning up?","Eclipse, m2eclipse",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-27 11:01:17.808,,,no_permission,,,,,,,,,,,,350726,,,Fri Sep 27 11:51:05 UTC 2013,,,,,,0|i1oh0f:,351017,,,,,,,,"27/Sep/13 11:01;cziegeler;Thanks for reporting. I see two solutions, the simplest would be to check the type of the build context, if it's incremental don't delete things.
Is there some better way to find out whether a java file has been deleted?","27/Sep/13 11:42;cziegeler;Both descriptor files are affected - the plugin deletes all of them if there is no source. This looks like a wrong behaviour in the case of an incremental build.
As a first fix, I'Ve added an incremental flag to the options which is set by the maven plugin and in that case no descriptor files are removed.
In the ant case everything is removed (like before) - and a mvn clean should remove the whole target directory. So this should work","27/Sep/13 11:51;egli;FYI: Tested and verified, the files dont get deleted anymore with the latest fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unnecessary re-initialization of PersistenceManagers in configadmin,FELIX-4238,12670471,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,mroeckl,mroeckl,25/Sep/13 12:06,28/Sep/13 15:26,14/Mar/19 02:48,25/Sep/13 13:55,configadmin-1.6.0,,,,,,configadmin-1.8.0,,,,,,,Configuration Admin,,,,,,0,patch,,,,,"Brief description: If the PersistenceManager is replaced during runtime (e.g. after registering, unregistering and registering again), the ConfigurationManager always re-initializes its list of PersistenceManagers. Thus, no caching is possible and configurations are loaded unnecessarily.

Details: In the ConfigurationManager line 818 getTrackingCount() on the service tracker for PersistenceManagers is called. If the number returned is different to the number of currently known PersistenceManagers, then the list of PersistenceManagers is re-initialized. This works fine as long as the list of PersistenceManager increases. But if a PersistenceManager is unregistered, getTrackingCount() returns an increased number but the number of known PersistenceManagers is decreased. Thus, the if-condition in line 819 is always true, which causes a re-initialization of the list of known PersistenceManagers.","MacOSX 10.8.5, Java 1.6.0_51, org.eclipse.osgi 3.9.0",1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-25 12:52:27.111,,,no_permission,,,,,,,,,,,,350300,,,Sat Sep 28 15:26:59 UTC 2013,,,,,,0|i1oeen:,350593,,,,,,,,"25/Sep/13 12:52;fmeschbe;I am not sure, whether I understand your problem -- or your solution.

getTrackingCount() is increased whenever something happens to tracked services: a service is added or removed or modified. So this number is ever increasing with service events from tracked service types.

Consequently whenever a service disappears and re-appears the internal list of persistence managers -- CachingPersistenceManagerProxy[] - is recreated thus flushing all cached data and thus reloading on next access.

While this accounts for changes to persistence managers, I suspect (and hope) persistence managers will only come and go or change rarely, so the overhead of reading configuration multiple times might be neglectable.","25/Sep/13 13:24;mroeckl;Thanks, Felix, for the quick reply. You understood my problem correct. The problem is that after a persistence manager changes (come or go) the internal list of persistence managers is recreated always although there was no further change.

Whenever a persistence manager disappears and re-appears, the if-condition in line 819 is always true and, thus, the internal list of persistence managers is recreated whenever the method getPersistenceManagers() is called. That means each time the getConfiguration() method is called, the internal list of persistence managers is recreated which can be annoying because then the cache of CachingPersistenceManagerProxy has to be re-read. In my case properties are loaded from a remote server which takes some time, which then requires ca. 20 seconds to load 10 configurations.

To make it clear, let me give you an example:
(1) First call of getConfiguration(): No custom persistence manager, only default FilePersistenceManager --> currentPmtCount=1, pmtCount=0 --> recreation of internal list of persistence managers
(2) Every consecutive call of getConfiguration(): currentPmtCount=1, pmtCount=1 --> no recreation of internal list of persistence managers
(3) Registration of custom persistence manager
(4) First call of getConfiguration(): currentPmtCount=2, pmtCount=1 --> recreation internal list of persistence managers
(5) Every consecutive call of getConfiguration() --> currentPmtCount=2, pmtCount=2 --> no recreation of internal list of persistence managers
(6) Deregistration of custom persistence manager
(7) Every consecutive call of getConfiguration() --> currentPmtCount=3, pmtCount=1 --> recreation of internal list of persistence managers
(*) From now on, every call of getConfiguration() will trigger a recreation of the internal list of persistence managers","25/Sep/13 13:51;fmeschbe;Woot ! You found a really stupid mistake of comparing apples to oranges. Thank you very much !

The fix is as simple as:

{noformat}
Index: ConfigurationManager.java
===================================================================
--- ConfigurationManager.java	(Revision 1524907)
+++ ConfigurationManager.java	(Arbeitskopie)
@@ -848,7 +848,7 @@
                 pm = ( PersistenceManager[] ) pmList.toArray( new PersistenceManager[pmList.size()] );
             }
 
-            pmtCount = pm.length;
+            pmtCount = currentPmtCount;
             persistenceManagers = pm;
         }
 
{noformat}
",25/Sep/13 13:55;fmeschbe;Applied the proposed patch in Rev. 1526179,28/Sep/13 15:26;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unvalued properties should be part of the instance's architecture,FELIX-4236,12669864,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,22/Sep/13 17:22,08/Oct/13 17:17,14/Mar/19 02:48,26/Sep/13 17:43,,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,Unvalued properties are not described in the instance description. They should be there with the 'unvalued' special value.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,349762,,,Thu Sep 26 17:43:07 UTC 2013,,,,,,0|i1ob47:,350060,,,,,,,,26/Sep/13 17:43;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in dependency manager runtime SerialExecutor,FELIX-4233,12669336,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,18/Sep/13 21:31,22/Jul/14 08:13,14/Mar/19 02:48,18/Sep/13 21:36,,,,,,,dependencymanager.runtime-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"There is a race condition in the serial executor used by the dependency manager runtime bundle: two threads can start taking items from the serial queue.

notice that currently, the serial executor in the runtime bundle is copied from the dm core, and it would be better to share this class between the two bundles. 
The race condition has already been fixed in the serial executor inside the dm core.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,349268,,,Wed Sep 18 21:36:24 UTC 2013,,,,,,0|i1o82f:,349566,,,,,,,,18/Sep/13 21:36;pderop;fixed in revision 1524584.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a way to obtain the component's BundleContext (other than constructor injection),FELIX-4229,12668961,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,sauthieg,sauthieg,17/Sep/13 08:23,12/Mar/14 08:23,14/Mar/19 02:48,09/Mar/14 19:44,,,,,,,ipojo-runtime-1.11.2,,,,,,,iPOJO,,,,,,0,,,,,,"Currently, the only common way to get the component's BundleContext is to use constructor injection.
If we need a no-arg constructor, this is not possible to use that feature.

It is also possible to be the BundleContext though @PostRegistration annotation, but it's only usable if your component provides a service.

I need another way to get my BundleContext.

Maybe something like:
{code}
@Requires / @Inject
private BundleContext bundleContext;
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-09 19:44:17.973,,,no_permission,,,,,,,,,,,,348893,,,Wed Mar 12 08:23:45 UTC 2014,,,,,,0|i1o5rb:,349191,,,,,,,,"17/Sep/13 08:44;sauthieg;Other options:
{code:java}
    @Context            // same as @Context(COMPONENT)
    @Context(INSTANCE)  // Bundle that declared the instance
    @Context(COMPONENT) // bundle that contains the component's factory
    @Context(PARENT)    // (in composite) parent bundle context
    @Context(HANDLER)   // (in handler) bundle containing the handler factory
    private BundleContext bundleContext;
{code}
",09/Mar/14 19:44;clement.escoffier;Fixed in trunk,12/Mar/14 08:23;clement.escoffier;iPOJO Runtime and Manipulator 1.11.2 release process has started.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compile error on FileInstall.java,FELIX-4225,12668183,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,cvgaviao,cvgaviao,12/Sep/13 00:53,17/Mar/15 06:57,14/Mar/19 02:48,05/Dec/13 23:06,,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,"I've imported the org.apache.felix.fileinstall project version 3.3.0-SNAPSHOT into an Eclipse Kepler workspace with JDK 1.7.

I'm getting the following compile error on org.apache.felix.fileinstall/src/main/java/org/apache/felix/fileinstall/internal/FileInstall.java (line 425):

""The field context is defined in an inherited type and an enclosing scope""
",MacOSx with JDK 1.7 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-05 23:06:19.319,,,no_permission,,,,,,,,,,,,348117,,,Thu Dec 05 23:06:19 UTC 2013,,,,,,0|i1o0z3:,348413,,,,,,,,"05/Dec/13 23:06;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/FileInstall.java
Committed r1548324
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Dependency manager can be active but not have m_bindMethods set,FELIX-4224,12668145,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,11/Sep/13 21:12,15/Oct/13 23:54,14/Mar/19 02:48,15/Oct/13 23:54,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We've seen an NPE from m_bindMethods being null in this code:

        public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPair, int trackingCount )
        {
            m_componentManager.log( LogService.LOG_DEBUG, ""dm {0} tracking {1} MultipleDynamic added {2} (enter)"", new Object[] {getName(), trackingCount, serviceReference}, null );
        	boolean tracked = false;
            if ( getPreviousRefMap().remove( serviceReference ) == null )
            {
                if (isActive())
                {
                    getServiceObject( m_bindMethods.getBind(), refPair );


(DependencyManager.MultipleDynamicCustomizer, around line 314)

After some investigation I can't see any way this can occur except from m_bindMethods not being volatile.  I'll see if this reoccurs after making it volatile.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,348079,,,Tue Oct 15 23:54:44 UTC 2013,,,,,,0|i1o0qn:,348375,,,,,,,,15/Oct/13 23:54;djencks;m_bindMethods was made volatile in a commit for FELIX-4223,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] DependencyManager filter should be set up in enable, not activate, to avoid race conditions",FELIX-4223,12667946,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,10/Sep/13 23:09,15/Oct/13 23:46,14/Mar/19 02:48,15/Oct/13 23:45,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Currently target filters on DependencyManager are set during activation.  This can cause a race condition between a thread on which a service dependency is registered and a thread requesting a service.  A simple solution to this is to set up the filters during enable (and of course modify them on configuration updates).  This makes sense to me since activation can never by itself change the target filter.

The symptoms we saw of the race condition were

Caused by: java.lang.NullPointerException
	at org.apache.felix.scr.impl.manager.DependencyManager.open(DependencyManager.java:1454)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:266)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:123)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:800)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getServiceInternal(ImmediateComponentManager.java:767)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:706)
	at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:141)

In this code base the NPE is from trackerRef.get() == null.

I don't entirely understand how the NPE occurs, it appears to require the jvm to reorder some instructions that don't look to me reorderable, but there is obviously a problem with concurrent access to setTarget if a second thread calls it while the first thread is in this block:

        customizer.setTracker( tracker );
        registered = true;
//first thread parked here
        tracker.open( m_componentManager.getTrackingCount() );
        customizer.setTrackerOpened();

the second thread will use the registered flag to not actually open the tracker, there is a code block earlier that exits if registered == true and there is no filter change.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,347882,,,2013-09-10 23:09:46.0,,,,,,0|i1nzj3:,348179,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BundleException type is always set to 0 ,FELIX-4220,12667307,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,bosschaert,rol,rol,06/Sep/13 12:51,30/Jul/14 07:16,14/Mar/19 02:48,29/May/14 15:05,framework-4.2.1,,,,,,framework-4.4.1,,,,,,,Framework,,,,,,0,,,,,,"I got a BundleException ""Cannot start bundle xyz because its start level is 3, which is greater than the framework's start level of 1."". After the exception was thrown I checked the Exception-type and I got 0 but I expected START_TRANSIENT_ERROR which is 10.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-29 15:05:59.818,,,no_permission,,,,,,,,,,,,347244,,,Thu May 29 15:05:59 UTC 2014,,,,,,0|i1nvlz:,347543,,,,,,,,29/May/14 15:05;bosschaert;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1598317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Variables named not stored in bytecode for constructors during manipulation,FELIX-4219,12667271,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,06/Sep/13 08:07,08/Oct/13 17:17,14/Mar/19 02:48,06/Sep/13 08:38,,,,,,,ipojo-manipulator-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"When manipulating constructors, the process does not keep the variables names. They should be copied as for methods.

In practice, that means that local variables of the var 0 and for all constructors needs to be written in the bytecode of the constructor. Original names are retrieved by the class checker.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,347208,,,Fri Sep 06 08:38:13 UTC 2013,,,,,,0|i1nvdz:,347507,,,,,,,,06/Sep/13 08:38;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE with field annotated with both @Property and @ServiceProperty,FELIX-4218,12667114,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,sauthieg,sauthieg,05/Sep/13 14:22,08/Oct/13 17:17,14/Mar/19 02:48,22/Sep/13 17:28,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"I know this seems wrong to have a field annotated like this:

{code:java}
@Property(name=""toto"")
@ServiceProperty(name=""toto"")
private String toto;
{code}

Anyway, I've seen this...
And when I try to see instance details using the gogo command 'instance', I got a NPE (sorry don't have the stacktrace at hand)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-06 08:40:05.553,,,no_permission,,,,,,,,,,,,347051,,,Sun Sep 22 17:26:46 UTC 2013,,,,,,0|i1nuf3:,347350,,,,,,,,"06/Sep/13 08:40;clement.escoffier;Actually, it's not wrong. I'm having a look.","06/Sep/13 09:15;clement.escoffier;Hi,

I can't reproduce the issue.

I've tried in integration-tests and in the Felix Gogo shell.

My component is:

{code}
@Component
@Provides
@Instantiate
public class CheckProviderWithPropertyAndServiceProperty implements CheckService {

    @Property(name=""toto"")
    @ServiceProperty(name=""toto"")
    private String toto;

    @Override
    public boolean check() {
        return toto != null;
    }

    @Override
    public Properties getProps() {
        Properties props = new Properties();
        props.put(""toto"", toto);
        return props;
    }
}
{code}

In the integration-test I retrieve the architecture and check the toto value.
In the Felix shell, I dump the instance architecture

Can you give me more details ?","06/Sep/13 09:52;sauthieg;Here is the sample
{code}
@Component(propagation=true)
@Instantiate
@Provides(specifications=Probe.class)
public class Probe implements Runnable  {

    @Property(name=""smarthing-uri"", mandatory=true)
    @ServiceProperty(name=""smarthing-uri"", mandatory=true)
    private String smartThingUri;

    @Property(name=""interval"", mandatory=true)
    @ServiceProperty(name=""interval"", mandatory=true)
    private long interval;
}
{code}",06/Sep/13 15:33;clement.escoffier;Going to try with your new code. Probably related to the propagation.,22/Sep/13 17:26;clement.escoffier;Can you try with the version from trunk ? I was not able to reproduce it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cache in BundleResources works only for a single metatype properties file per bundle,FELIX-4214,12666596,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,cziegeler,cziegeler,02/Sep/13 15:49,27/Jan/14 15:09,14/Mar/19 02:48,02/Sep/13 16:23, metatype-1.0.6,,,,,,metatype-1.0.8,,,,,,,Metatype Service,,,,,,0,,,,,,"In some cases, the static cache in BundleResources is not updated correctly when a bundle is updated. It seems this is especially a problem, if there is more than one resource file for metatype information. In my case I experienced the problem with the following setup:
I'm using the scr plugin to generate the metatype information and this generates an xml for each metadata with a localization attribute set to the base of a custom properties file containing i18n translations, so something like localization=OSGI-INF/metatype/myservice
And I have a properties file at OSGI-INF/metatype/myservice.properties

In most cases, it seems this properties file is not found/read - however, after N updates of my bundle containing this, it starts to work and the properties file is picked up. Restarting the framework makes it fail again, until another couple of bundle updates.
If the default file OSGI-INF/metatype/metatype is specified in the localization field, this file (metatype.properties) is always picked up.

Disabling the static cache resourcesByBundle in BundleResources solves the problem",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,346534,,,Mon Sep 02 16:23:37 UTC 2013,,,,,,0|i1nr8v:,346835,,,,,,,,02/Sep/13 16:04;cziegeler;I think the problem is that the cache is not taking the basename into account and as soon as there is more than one metatype file the first one used is returned for all basenames,02/Sep/13 16:23;cziegeler;Solved by adding the basename to the cache key,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporal handler broken with iPOJO 1.10.1,FELIX-4213,12666586,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,tilen,tilen,02/Sep/13 14:06,03/Sep/13 11:01,14/Mar/19 02:48,03/Sep/13 08:50,ipojo-runtime-1.10.1,,,,,,ipojo-temporal-dependency-handler-1.8.0,,,,,,,iPOJO,,,,,,0,,,,,,"Trying to use Temporal Service Dependency handler with iPOJO 1.10.1 results in the following error (works fine with 1.10.0):

java.lang.NoSuchMethodError: org.apache.felix.ipojo.util.DependencyModel.loadSpecification(Ljava/lang/String;Lorg/osgi/framework/BundleContext;)Ljava/lang/Class;
	at org.apache.felix.ipojo.handler.temporal.TemporalHandler.__configure(TemporalHandler.java:248)
	at org.apache.felix.ipojo.handler.temporal.TemporalHandler.configure(TemporalHandler.java)
	at org.apache.felix.ipojo.HandlerManager.init(HandlerManager.java:73)
	at org.apache.felix.ipojo.InstanceManager.configure(InstanceManager.java:203)
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:177)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:309)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:236)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:290)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:284)
	at org.apache.felix.ipojo.extender.internal.queue.JobInfoCallable.call(JobInfoCallable.java:100)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:680)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-03 08:50:30.126,,,no_permission,,,,,,,,,,,,346524,,,Tue Sep 03 11:01:06 UTC 2013,,,,,,0|i1nr6n:,346825,,,,,,,,"03/Sep/13 08:50;sauthieg;Changes pushed in trunk (r1519602).
Snapshots should be uploaded in a couple of hours.
Please make a try and close if satisfied","03/Sep/13 11:01;tilen;Tested OK with latest snapshot.
Thank you.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ipojo @Component with propagation set to true doesn't propagate properties,FELIX-4207,12666263,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,gdelafosse,gdelafosse,30/Aug/13 07:59,08/Oct/13 17:17,14/Mar/19 02:48,04/Sep/13 08:29,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,annotations,component,propagation,,,"I use config admin to instantiate my component and I want its property to be deployed with its registered service as a service property.
According to the documentation, I have to set the flag propagation to true to do so. So my code is like :

@Component(name=""component"", propagation=true)
@Provides
public class MyComponent implements MyService
{
    @Property(name=""p"")
    private String p;
    
}

Then I look to my instance details and I don't see the property attached to the service, it's just attached to the component instance :
instance name=""component.16d0dcc1-ae65-49b9-a7fe-17f6723997db"" state=""valid"" bundle=""8"" component.type=""component""
	handler name=""org.apache.felix.ipojo:properties"" state=""valid""
		property name=""p"" value=""1""
	handler name=""org.apache.felix.ipojo:provides"" state=""valid""
		provides specifications=""[test.ipojo.MyService]"" state=""registered"" service.id=""50""
			property name=""service.pid"" value=""component.16d0dcc1-ae65-49b9-a7fe-17f6723997db""
			property name=""service.factoryPid"" value=""component""
			property name=""factory.name"" value=""component""
			property name=""instance.name"" value=""component.16d0dcc1-ae65-49b9-a7fe-17f6723997db""
	handler name=""org.apache.felix.ipojo:architecture"" state=""valid""


Then I tried to add the @ServiceProperty on my property field and I also removed the propgation flag. So my code is now like :

@Component(name=""component"")
@Provides
public class MyComponent implements MyService
{
    @Property(name=""p"")
    @ServiceProperty
    private String p;
    
}

and if I look to my instance details I can see the property attached to both my component and my service :
instance name=""component.c4ee23a1-14c3-447c-93f8-78caf65a8304"" state=""valid"" bundle=""8"" component.type=""component""
	handler name=""org.apache.felix.ipojo:properties"" state=""valid""
		property name=""p"" value=""1""
	handler name=""org.apache.felix.ipojo:provides"" state=""valid""
		provides specifications=""[test.ipojo.MyService]"" state=""registered"" service.id=""52""
			property name=""service.pid"" value=""component.c4ee23a1-14c3-447c-93f8-78caf65a8304""
			property name=""service.factoryPid"" value=""component""
			property name=""p"" value=""1""
			property name=""factory.name"" value=""component""
			property name=""instance.name"" value=""component.c4ee23a1-14c3-447c-93f8-78caf65a8304""
	handler name=""org.apache.felix.ipojo:architecture"" state=""valid""


Is it a but with the propagation flag or is the documentation wrong?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-04 08:29:24.571,,,no_permission,,,,,,,,,,,,346202,,,Wed Sep 04 08:29:24 UTC 2013,,,,,,0|i1np7j:,346503,,,,,,,,04/Sep/13 08:29;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Service Dependencies with a callback without a type attribute must be rejected,FELIX-4204,12665428,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,25/Aug/13 17:44,08/Oct/13 17:17,14/Mar/19 02:48,25/Aug/13 17:55,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"Service dependencies defining a callback must specify its type (bind, unbind, modified). The current parser does not ensure that this attribute is provided.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,345368,,,Sun Aug 25 17:55:59 UTC 2013,,,,,,0|i1nk2f:,345669,,,,,,,,25/Aug/13 17:55;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigAdmin plugin does not return json,FELIX-4203,12665393,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,24/Aug/13 21:44,30/Jan/15 09:37,14/Mar/19 02:48,29/Dec/14 14:14,webconsole-4.2.0,,,,,,webconsole-4.2.6,,,,,,,Web Console,,,,,,0,,,,,,"Requesting json for a single configuration, does always return the emtpy []:

For example:

http://localhost:4502/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin.json

The call to:

                    final Map services = ca.getServices( pid, pidFilter, locale, false );

always returns null
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,345333,,,Mon Dec 29 14:14:48 UTC 2014,,,,,,0|i1njun:,345634,,,,,,,,28/Jan/14 08:36;cziegeler;Removing from schedule,"29/Dec/14 14:14;cziegeler;It seems the whole logic for returning json was broken, I replaced this with a new logic which directly gets configurations from config admin instead.
Fixed in 1648347",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only the last iPOJO Tracking interceptor is modifying the reference,FELIX-4200,12665038,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,22/Aug/13 13:10,08/Oct/13 17:17,14/Mar/19 02:48,22/Aug/13 13:24,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"When opening the tracking on a dependency having several service tracking interceptor, only the modification of the last interceptor are handled. All interceptors should be able to modify the service reference.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,344979,,,Thu Aug 22 13:24:56 UTC 2013,,,,,,0|i1nhof:,345280,,,,,,,,22/Aug/13 13:24;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The filter based service tracking interceptor should always be created,FELIX-4199,12664999,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,22/Aug/13 08:08,08/Oct/13 17:17,14/Mar/19 02:48,22/Aug/13 13:24,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,The Filter based service tracking interceptor needs to be created every time even if the filter is null. This arises from the potential re-implementation of the match method in the dependency implementation. It must be the last interceptor as the chain ends on the filter matching.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,344940,,,Thu Aug 22 13:24:09 UTC 2013,,,,,,0|i1nhfr:,345241,,,,,,,,22/Aug/13 13:24;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[CM] Always check permission on Configuration.get/setBundleLocation,FELIX-4197,12664311,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,19/Aug/13 07:47,28/Sep/13 15:27,14/Mar/19 02:48,19/Aug/13 08:25,configadmin-1.6.0,,,,,,configadmin-1.8.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"If the Configuration.getBundleLocation or Configuration.setBundleLocation is called, the permission is only checked if the current (or new) location is not the same as the calling bundle's own location. This is assumption is derived from 104.11.1 (Configuration Admin in Compendium Spec):

> Every bundle has the implicit right to receive and configure configurations
> with a location that exactly matches the Bundle’s location or that is null.

Yet this assumption is wrong because this would allow bundles to actually circumvent the permissions set on the Bundle.getLocation() method requiring AdminPermission[this,METADATA] and to allow bundles to get to their locations without permission checking.

The correct assumption is, that only CRUD configuration (properties) itself is allowed but not CRUD on the configuration's location binding.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,344312,,,Sat Sep 28 15:27:00 UTC 2013,,,,,,0|i1ndkn:,344612,,,,,,,,19/Aug/13 08:25;fmeschbe;Fixed in Rev. 1515315: permissions are now always checked for Configuration.get/setBundleLocation.,28/Sep/13 15:27;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
If proxy or SSL Offloader already sends https urls the SSLFilter wil created a httpss URL,FELIX-4196,12664013,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,sumerion,sumerion,16/Aug/13 08:05,28/Sep/13 17:40,14/Mar/19 02:48,19/Aug/13 13:01,http.sslfilter-0.1.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"Hi,

If proxy or SSL Offloader already sends https urls the SSLFilter wil created a httpss URL

See code in https://fisheye6.atlassian.com/browse/felix/trunk/http/sslfilter/src/main/java/org/apache/felix/http/sslfilter/internal/SslFilterRequest.java?r=1394715

{code}
   public StringBuffer getRequestURL()
   {
       if (this.requestURL == null) {
           // insert an 's' after the http scheme
           StringBuffer tmp = super.getRequestURL();
           tmp.insert(4, 's');
           this.requestURL = tmp.toString();
       }
 
       return new StringBuffer(this.requestURL);
   }
{code}

A replace of ""http://"" to ""https://"" will be less buggy.

Furthermore an option to not rewrite from http to https would be good as in some cases this is not desirable.


Kind regards,
Kris.",,,,,,,,,,,,,,FELIX-3693,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-19 07:42:02.398,,,no_permission,,,,,,,,,,,,344014,,,Mon Aug 19 13:01:26 UTC 2013,,,,,,0|i1nbqv:,344316,,,,,,,,"19/Aug/13 07:42;fmeschbe;Thanks for reporting. But, I do not completely understand the issue:

> A replace of ""http://"" to ""https://"" will be less buggy. 

I do not see how ? The code

  String tmp = ""https"".concat(super.getRequestURL().substring(4));

sounds exactly the same, right ?

The only way to make this less buggy would be to first check whether the URL startsWidth(""http://"").

Or am I completely on the wrong track ?","19/Aug/13 11:28;sumerion;Hi Felix,

Yes I think it's best to be sure no other part of the infrastructure or code has done the same.

What I mean with replace was something like 

String tmp = StringUtils.replace(super.getRequestURL(), ""http://"", ""https://);


We have now (to not add additional dependencies):

{code}
...
    public static final String HTTP = ""http://"";

...
        if (this.requestURL == null && super.getRequestURL().indexOf(HTTP) == 0) {
            // insert an 's' after the http scheme
            StringBuffer tmp = super.getRequestURL();
            tmp.insert(4, 's');
            this.requestURL = tmp.toString();
        }
...
{code}

Meanwhile we have discovered that it was another part (not investigated which) of an AEM 5.6.1 deployment that already checked on the X-Forwarded-SSL and changed to URL.
With the code above we are sure it doesn't get done twice.

Kind regards,
Kris.
","19/Aug/13 11:40;fmeschbe;Ok. Thanks for the clarification.

This makes sense.

> Meanwhile we have discovered that it was another part (not investigated which) of an AEM 5.6.1
> deployment that already checked on the X-Forwarded-SSL and changed to URL.

Please check with Adobe on this issue. Thanks.","19/Aug/13 13:01;fmeschbe;Fixed in Rev. 1515389 adding the check before changing the StringBuffer value.

For completeness, added some unit tests in Rev. 1515392",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR Generator fails with a NPE in case a class level Reference doesn't define a referenceInterface,FELIX-4192,12663079,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,dkuffner,dkuffner,11/Aug/13 08:17,04/Oct/13 14:10,14/Mar/19 02:48,27/Sep/13 11:44,scr generator 1.8.0,,,,,,maven-scr-plugin 1.15.0,scr ant task 1.9.0,scr generator 1.8.2,,,,,SCR Tooling,,,,,,0,,,,,,"
Consider following simple component:
{code}
@Component
@Reference(name=""a"", bind=""setA"", unbind=""unsetA"")
public class MyJavaClass {
}
{code}

the generator will fail with a NPE (see stacktrace). It would be preferable if the generator will fail with a usfull error message.

Stacktrace:
{code}
java.lang.NullPointerException
	at java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:332)
	at java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1144)
	at java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:462)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:403)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
	at org.apache.felix.scrplugin.helper.Validator.findMethod(Validator.java:568)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.processReferences(SCRDescriptorGenerator.java:647)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.createComponent(SCRDescriptorGenerator.java:384)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:161)
	at net.chilicat.felixscr.intellij.build.scr.AbstractScrProcessor.executeImpl(AbstractScrProcessor.java:86)
	at net.chilicat.felixscr.intellij.build.scr.AbstractScrProcessor.execute(AbstractScrProcessor.java:42)
	at net.chilicat.felixscr.intellij.build.ScrProcessingItem.execute(ScrProcessingItem.java:39)
	at net.chilicat.felixscr.intellij.build.ScrCompiler.process(ScrCompiler.java:108)
	
{code}





",JDK7,,,,,,,,,,,,,,,,,,,11/Aug/13 16:43;dkuffner;FELIX-4192-test-case.diff;https://issues.apache.org/jira/secure/attachment/12597356/FELIX-4192-test-case.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-11 14:43:47.028,,,no_permission,,,,,,,,,,,,343080,,,Wed Aug 14 05:52:51 UTC 2013,,,,,,0|i1n5zr:,343384,,,,,,,,"11/Aug/13 14:43;cziegeler;Thanks for reporting, I just committed a potential fix to trunk, maybe you can give it a try?

We changed the order in the generator and now validate after method signatures are check, resulting in above problem. With my patch method signatures and methods generation is skipped if no interface name is set. And this should then fail during validation",11/Aug/13 16:42;dkuffner;Seems like that the issue is not fixed. I have created a test case (see attached patch file).,"14/Aug/13 05:52;cziegeler;Thanks for the test case, yes I actually overlooked one place :(
Should be fixed now, I've also added your tests",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The framework should not hold any lock while calling ServiceFactory#unget,FELIX-4190,12661400,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,02/Aug/13 13:20,27/Apr/15 07:05,14/Mar/19 02:48,12/Mar/14 20:08,,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,,,,,,,,,,,,,,,,,,FELIX-3687,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-02 14:51:32.522,,,no_permission,,,,,,,,,,,,341589,,,Wed Mar 12 20:08:21 UTC 2014,,,,,,0|i1mwtr:,341896,,,,,,,,"02/Aug/13 14:51;rickhall;Reiterating a comment from email:

Technically, I think this patch is not correct.

We specifically allow for bundles that already hold the service reference to acquire the service object while a service is being unregistered (see comments in ServiceRegistry.unregisterService()). This means that a bundle that already holds the service reference could, technically, acquire the unregistering service just after you call getUsingBundles(), thus we wouldn't be forcing it to unget.

The only way I think we can do what you want is to somehow acquire the registry lock (i.e., this) again and put us into some new state that doesn't allow any more bundles to acquire the unregistering service...or perhaps by adding something to the service registration to put it into a new state where it won't return anything from getService. Then we could release the registry lock and continue with what you have. ",02/Aug/13 15:34;rickhall;We probably need some discussion about the issue I raised before closing this bug.,"02/Aug/13 20:52;gnt;I suggest you revert the patch if you want until further discussed as I'll be in vacation for the next weeks and won't be able to actually do anything nor discuss that further.

Another option might be to duplicate the loop after having invalidated the registration to get rid of possible new references acquired while processing the ServiceEvent.UNREGISTERING or just before the service registration has been invalidated.  That would avoid grabbing the lock again I think.","02/Aug/13 21:08;rickhall;I won't revert it, since I don't expect it will cause any issues in normal usage. We can just think about how to fix it when you are back. It is a little tricky, though.",06/Aug/13 21:51;djencks;I agree with Richard that this is not a satisfactory patch.  This is a duplicate of FELIX-3687 where I proposed another unsatisfactory patch and determined that Richard's suggestion wouldn't work.  I have a further proposal there that I still think might work.,"24/Feb/14 14:03;gnt;So I come back to my earlier proposal which is to duplicate the loop at the end after having invalidted the registration.
I.e. 

{code}
        // Now forcibly unget the service object for all stubborn clients.
        Bundle[] clients = getUsingBundles(reg.getReference());
        for (int i = 0; (clients != null) && (i < clients.length); i++)
        {
            while (ungetService(clients[i], reg.getReference()))
                ; // Keep removing until it is no longer possible
        }
        ((ServiceRegistrationImpl) reg).invalidate();
        for (int i = 0; (clients != null) && (i < clients.length); i++)
        {
            while (ungetService(clients[i], reg.getReference()))
                ; // Keep removing until it is no longer possible
        }
{code}

The call to getUsingBundles does not need to be synchronized, as the method itself synchronizes on this.
At this point, no new bundles can acquire a service reference, so we can keep the list of bundles and iterator on it safely.
Then, we do a first pass on ungetService which should remove most of the references, except if a bundle is re-acquiring the service.
We then invalidate the registration, which will prevent any further call to getService.
We iterate another time on the bundles in case a bundle has acquired the service during the first loop.
","11/Mar/14 12:48;rickhall;I believe duplicating the loop would work. The first loop tries to be friendly, then the call to invalidate() makes it impossible to get the service object again, and then finally the second loop deals more harshly with clients who won't let go.","11/Mar/14 19:23;djencks;I'm ok with the duplicated loop.
","12/Mar/14 20:08;gnt;Sending        framework/src/main/java/org/apache/felix/framework/ServiceRegistry.java
Transmitting file data .
Committed revision 1576875.

https://svn.apache.org/viewvc?view=revision&revision=1576875",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] DS should not hold any lock while calling bundleContext#getService,FELIX-4189,12661399,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,02/Aug/13 13:16,15/Oct/13 23:44,14/Mar/19 02:48,02/Aug/13 15:26,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-07 00:26:33.127,,,no_permission,,,,,,,,,,,,341588,,,Wed Aug 07 00:26:33 UTC 2013,,,,,,0|i1mwtj:,341895,,,,,,,,"07/Aug/13 00:26;djencks;Does this fix a deadlock you observed or do you just think it's a good idea?  If you saw a deadlock I'd like to see stack traces for it.

Would it be a good idea to use an AtomicReference for the service object?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] If a bundle is stopped while the SCR extender is being stopped, the callback for the STOPPING event returns before full deactivation",FELIX-4188,12661349,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,02/Aug/13 08:15,15/Oct/13 23:44,14/Mar/19 02:48,02/Aug/13 15:26,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"This can cause errors when actually deactivating components because the classloader and bundle context aren't valid anymore.
I'll provide a fix using the AbstractExtender from felix utils instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-02 14:48:51.704,,,no_permission,,,,,,,,,,,,341538,,,Fri Aug 02 18:08:54 UTC 2013,,,,,,0|i1mwif:,341845,,,,,,,,"02/Aug/13 14:48;fmeschbe;I don't think we should build a hard external dependency into SCR. If such a thing would be needed it should be embedded in the SCR bundle during build time.

Can you come up with a test showing the problem and proving the the problem solved ? Thanks.","02/Aug/13 18:08;gnt;The 3 needed classes are embedded already, I agree there should be no external dependency.

I've added an integration test to demonstrate the problems.
On the old code, the first assertion about the timeout will fail and one of the two last assertions (i.e. one of the component throw an exception when accessing the bundle context).
With the new code, the components deactivation occurs concurrently with the bundle being stopped and the two components can deactivate without any failures.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration Plugin does a POST to get configuration details,FELIX-4187,12660893,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,31/Jul/13 12:16,06/Feb/14 18:11,14/Mar/19 02:48,28/Jan/14 08:19,webconsole-4.2.0,,,,,,webconsole-4.2.2,,,,,,,Web Console,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,341082,,,Mon Oct 21 11:13:14 UTC 2013,,,,,,0|i1mtrj:,341400,,,,,,,,"31/Jul/13 12:17;cziegeler;If a configuration detail view is opened from the configuration list, a POST request is done to display the details. This should actually be a GET request","31/Jul/13 12:49;cziegeler;It seems the reasoning behind the post is the ""create"" parameter where a configuration placeholder is created if the configuration actually doesn't exist (yet)
Changing the POST into a GET is not that simple as the response json is different as well","21/Oct/13 11:13;cziegeler;I've added a first workaround with rev 1534095 which basically uses a GET instead of a POST but adds a special request parameter to detect this case.
I fear that doing it right would mean a major rewrite of some things which I would like to avoid atm",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in DependencyManager Logger,FELIX-4186,12660055,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,bramk,bramk,26/Jul/13 13:28,22/Jul/14 08:08,14/Mar/19 02:48,15/Sep/13 21:22,dependencymanager-3.1.0,,,,,,dependencymanager-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"Logger line 191 is missing a null check on m_logRef

{code}
ERROR: Bundle com.lopexs.arl.gadgets.mastercontrol [34] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.dm.impl.Logger.serviceChanged(Logger.java:191)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
	at org.apache.felix.framework.Felix.access$000(Felix.java:74)
	at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at org.apache.felix.framework.ServiceRegistry.unregisterServices(ServiceRegistry.java:191)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2386)
	at org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:980)
	at org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:967)
	at org.apache.felix.deploymentadmin.spi.StopBundleCommand.execute(StopBundleCommand.java:57)
	at org.apache.felix.deploymentadmin.spi.DeploymentSessionImpl.call(DeploymentSessionImpl.java:73)
	at org.apache.felix.deploymentadmin.DeploymentAdminImpl.installDeploymentPackage(DeploymentAdminImpl.java:214)
	at org.apache.ace.deployment.deploymentadmin.DeploymentAdminDeployer.install(DeploymentAdminDeployer.java:51)
	at org.apache.ace.deployment.service.impl.DeploymentServiceImpl.installVersion(DeploymentServiceImpl.java:120)
	at org.apache.ace.deployment.task.DeploymentUpdateTask.run(DeploymentUpdateTask.java:57)
	at org.apache.ace.scheduler.Executer.run(Executer.java:92)
	at java.util.TimerThread.mainLoop(Timer.java:555)
	at java.util.TimerThread.run(Timer.java:505)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-15 21:19:08.216,,,no_permission,,,,,,,,,,,,340247,,,Mon Sep 16 06:38:08 UTC 2013,,,,,,0|i1momn:,340565,,,,,,,,"15/Sep/13 21:19;pderop;Thanks for reporting;

Just committed a fix for the Logger NullPointerException in revision 1523504.",15/Sep/13 21:22;pderop;issue resolved.,16/Sep/13 06:38;bramk;Looks fine to me. Thanks Pierre!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporary resolver errors while updating bundles with deploymentadmin,FELIX-4184,12659751,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,marrs,marrs,25/Jul/13 09:30,01/Apr/14 12:48,14/Mar/19 02:48,15/Nov/13 18:02,deploymentadmin-0.9.4,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"When you use the system property to not stop the world during an update, updating a running bundle might cause a (temporary) resolver error (I've seen it throw exceptions related to uses constraints). According to the spec, if we get an exception here, we should rollback. If you stop the world, this never happens, but here such temporary exceptions are probably resolved when we refresh packages at the end. That does not happen though, since we never get there. We should consider covering this use case, letting the deployment continue and deal with errors when resolving (and maybe then rolling back).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-25 09:57:25.787,,,no_permission,,,,,,,,,,,,339943,,,Fri Nov 15 18:02:04 UTC 2013,,,,,,0|i1mmr3:,340261,,,,,,,,"25/Jul/13 09:57;jajans;We're already deviating from the DA spec by stopping only ""affected"" bundles. 

Wouldn't it be an idea to split out the commands of the current implementation to a sort of SPI in which we could plug in new/replace existing commands?","25/Jul/13 12:47;bramk;Alternatively, could we not make the definition of 'affected' smarter? AFAICS the current heuristic looks at bsn only. What about if the bundle transitively imports any package that is included in the superset of exported packages in the dp?","25/Jul/13 13:21;marrs;I'm hesitant to go that way Bram, as ultimately it would have to exactly simulate what the resolver does. In the case I had, it was a uses constraint that failed. Also, unlike what Jan Willem said, we're currently NOT stopping any bundles. We leave everything running and invoke update on the active bundles.","25/Jul/13 13:47;jajans;Unlike to what Marcel said, DA *is* stopping affected bundles, at least, it should do that if I read the StopBundleCommand#omitBundleStop() method correctly. 

However, that method contains a flaw, as it retrieves the bundle information *twice from the same* (source) DP, instead of once from the source DP and once from the target DP. Hence, the ""sameVersion"" boolean always equals to ""true"", causing *none* of the affected bundles to be stopped. This might explain the resolver problems (partly). 

If we would fix this issue, then the affected bundles will be stopped during the installation of a DP, but I'm not sure yet whether this would also prevent any resolver issues...","15/Nov/13 14:49;marrs;Following up. Jan Willem correctly mentions that, due to a flaw, we currently don't stop *affected* bundles at all, but attempt to update them while running. This causes the resolve issues mentioned above. An example:

Say we update a bundle that implements some API, and the bundle containing it, because the API has been changed. If we first update the implementation without stopping it, it will try to resolve against the new API and fail because that has not yet been installed. Stopping both bundles first, then updating, refreshing and then starting again solves that issue nicely.

So that's what we need to do here!",15/Nov/13 18:02;marrs;Added test and fix for the issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong Javadoc of TrackerCustomizer addingService method,FELIX-4183,12659731,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,speedytblob,speedytblob,25/Jul/13 07:44,08/Oct/13 17:17,14/Mar/19 02:48,21/Aug/13 09:17,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"Method return type does not match the javadoc return type.

/**
     * A service is being added to the Tracker object.
     * This method is called before a service which matched the search parameters of the Tracker object is added to it. This method should return the service object to be tracked for this ServiceReference object.
     * The returned service object is stored in the Tracker object and is available from the getService and getServices methods.
     * @param reference the Reference to service being added to the Tracker object.
     * @return The service object to be tracked for the ServiceReference object or null if the ServiceReference object should not be tracked.
     */
    boolean addingService(ServiceReference reference);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-21 09:17:15.247,,,no_permission,,,,,,,,,,,,339923,,,Wed Aug 21 09:17:15 UTC 2013,,,,,,0|i1mmmn:,340241,,,,,,,,21/Aug/13 09:17;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issues with package space consistency check,FELIX-4182,12659599,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,tjwatson,tjwatson,24/Jul/13 15:36,24/Apr/14 14:15,14/Mar/19 02:48,24/Apr/14 14:06,resolver-1.0.0,,,,,,resolver-1.2.0,,,,,,,Resolver,,,,,,0,,,,,,"There are two issues here.  I could separate this into two reports but I need them both fixed at the same time and will be providing a patch shortly that addresses both of the following issues:

1) ResolverImpl.resolve(ResolveContext) fails hard if a consistent class space cannot be found for all optional resources being resolved.  It would be nice of the resolve process could eliminate some optional resources that are the 'roots' that caused the inconsistent class space and try again.

2) There is a case where a false positive inconsistency is reported for require-bundle and split packages.  Here is the scenario

Bundle uses.a
Export-Package: 
 uses1; uses:=""uses2""; A=""split""; mandatory:=""A"",
 uses2; A=""split""; mandatory:=""A""

Bundle uses.b
Export-Package: 
 uses1; uses:=""uses2""; B=""split""; mandatory:=""B"",
 uses2; B=""split""; mandatory:=""B""

Bundle uses.d
Require-Bundle: uses.a, uses.b

In this scenario, if an attempt is made to resolve uses.d then checkDynamicPackageSpaceConsistency method will detect that uses2 is inconsistent for resource uses.d because it gets it from two different sources uses.a and uses.b.  You get something like the following error message:

Uses constraint violation. Unable to resolve resource uses.d [osgi.identity; osgi.identity=""uses.d""; type=""osgi.bundle""; version:Version=""1.0.0""] because it is exposed to package 'uses2' from resources uses.a [osgi.identity; osgi.identity=""uses.a""; type=""osgi.bundle""; version:Version=""1.0.0""] and uses.b [osgi.identity; osgi.identity=""uses.b""; type=""osgi.bundle""; version:Version=""1.0.0""] via two dependency chains.

Chain 1:
  uses.d [osgi.identity; osgi.identity=""uses.d""; type=""osgi.bundle""; version:Version=""1.0.0""]
    require: (osgi.wiring.bundle=uses.a)
     |
    provide: osgi.wiring.bundle: uses.a
  uses.a [osgi.identity; osgi.identity=""uses.a""; type=""osgi.bundle""; version:Version=""1.0.0""]

Chain 2:
  uses.d [osgi.identity; osgi.identity=""uses.d""; type=""osgi.bundle""; version:Version=""1.0.0""]
    require: (osgi.wiring.bundle=uses.b)
     |
    provide: osgi.wiring.bundle: uses.b
  uses.b [osgi.identity; osgi.identity=""uses.b""; type=""osgi.bundle""; version:Version=""1.0.0""]

The issue is in the check for isCompatible.  This method attempts to address split packages, but only for the provider of the split package, it does not aggregate the split sources for clients using require-bundle to gather all the sources of the split package.",All,,,,,,,,,,,,,,,,,,,24/Jul/13 17:52;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12593986/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-24 14:06:21.361,,,no_permission,,,,,,,,,,,,339792,,,Thu Apr 24 14:15:41 UTC 2014,,,,,,0|i1mltr:,340111,,,,,,,,"24/Jul/13 17:52;tjwatson;Possible fix.

Fix for retry with less optional resources:

Methods changed:

ResolverImpl.resolve(ResolveContext)

When rethrow!=null there was some code to try and look at the requirements from the rethrow and see if any of them came from optional resources and if so to remove them.  This has issues because in most cases the ResolutionException is not getting populated with the requirements (another bug I thing).  But this also has certain issues because the rethrow only holds the very last instance of rethrow for the last permutation checked.  That may not really be the resource you want to throw out.

This patch takes different approach by recording each 'root' resource that results in an inconsistent class space exception for a given solution.  As each solution is checked it is determined if the solution results in less root resources causing inconsistencies (faultyResources).  At the end if no consistent solution is found then we throw out all optional resources that are contained in the faultyResources with the assumption that the faultyResources is the smallest collection possible and that removing them as root resources will result in a possible solution for the remaining optional and mandatory resources.  It is still possible that the resources removed could get pulled back in for the next attempt, but then we will not be able to remove them again and it should cause the resolve loop to end.

-----------------------------------------
Fix for split package class space consistency check:

Methods changed:

ResolverImpl.getPackageSourcesInternal)
With split packages it is possible to get duplicate sources added to the list.  This change just checks for duplicates to avoid that

ResolverImpl.isCompatible
Changed it to take a List<Blame> for the currentBlames since multiple bundle-requirements may lead to multiple blames for the same package name (multiple sources)

If there are multiple then package sources for each 'root' source is gathered for a complete list of sources for the package.  This is important for cases where a bundle requires one or more bundles that provide the same package so that we can get a proper list of package sources from the perspective of the requiring bundle.

ResolverImpl.checkDynamicPackageSpaceConsistency

The changes are around the calls to isCompatible.  Instead of looping over each requirement Blame (from either a single Import-Package or a list of Require-Bundle) the patch now considers the List<Blame> as one when calling isCompatible with the usedBlame

If the List<Blame> turns out to cause a consistency issue then the code iterates over each req from the List<Blame> and sees if it can permutate it (not 100% sure if this is the right approach).  Before would only permutate the first req that caused the issue, but now that we consider them all as contributing to the issue I decided to attempt to permutate all of them.
","24/Jul/13 17:54;tjwatson;To cross reference, this bug caused me issues in Eclipse bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=413537","24/Apr/14 14:06;rickhall;Applied supplied patch to align with work done by Tom Watson at Equinox: http://git.eclipse.org/c/equinox/rt.equinox.framework.git/commit/?id=a7bb93e965ee40f221a1eaeb77a94aba955820e8

Please close if satisfied, thanks.",24/Apr/14 14:15;tjwatson;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scr.ant task does not provide scanClasses option,FELIX-4175,12658946,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,dkuffner,dkuffner,21/Jul/13 09:06,12/Mar/14 08:55,14/Mar/19 02:48,22/Jul/13 11:08,scr ant task 1.7.0,,,,,,scr ant task 1.8.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"
I need to generate a service component xml for a project with mixed java and groovy classes.
We use gradle to build the project. Our gradle build uses the SCR ant task.

I found that the SCR Maven plugin supports a flag to scan classes (scanClasses) instead of  source files which would be a nice workaround/fix for this issue.

",,,,,,,,,,,,,,,,,,,,21/Jul/13 09:08;dkuffner;scan-classes.diff;https://issues.apache.org/jira/secure/attachment/12593395/scan-classes.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-22 11:08:56.116,,,no_permission,,,,,,,,,,,,339139,,,Tue Jul 23 07:54:47 UTC 2013,,,,,,0|i1mht3:,339459,,,,,,,,21/Jul/13 09:08;dkuffner;Patch to enable ant task to scan classes.,"22/Jul/13 11:08;cziegeler;Thanks for your patch, Daniel - it's applied in revision 1505656
We'll release a new version of the ant task in the near future","23/Jul/13 07:54;daniel.kuffner@gmail.com;thanks Carsten.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] possible DependencyManager NPE during cleanup after failure to activate a component,FELIX-4171,12658422,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,18/Jul/13 00:22,04/Sep/14 08:04,14/Mar/19 02:48,23/Oct/13 21:28,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Thanks to Adam Purkiss for finding and reporting this problem.

If a component has more than one dependency, and a non-last dependency cannot actually be obtained during activation, we'll try to close the non-opened dependency managers: their EdgeInfo wont have the openLatch set (they aren't open) and the attempt to use the latch during close will cause an NPE.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,338616,,,Wed Oct 23 21:28:51 UTC 2013,,,,,,0|i1mekv:,338936,,,,,,,,23/Oct/13 20:24;djencks;Original fix was rev 1504336 but this is not a complete fix.,"23/Oct/13 21:28;djencks;Typical stack trace from a moderately recent build is

Caused by: java.lang.NullPointerException
    at org.apache.felix.scr.impl.manager.DependencyManager.invokeUnbindMethod(DependencyManager.java:1727)
    at org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:1487)
    at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:290)
    at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:127)
    at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:855)
    at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getServiceInternal(ImmediateComponentManager.java:822)
    at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:761)
",23/Oct/13 21:28;djencks;NPE in comment fixed by r1535180,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeploymentAdmin tries to start/stop fragment bundles,FELIX-4167,12657419,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,jajans,jajans,12/Jul/13 08:33,01/Apr/14 12:48,14/Mar/19 02:48,19/Jul/13 11:47,,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"Deployment Admin currently tries to start all bundles in a deployment package, including fragment bundles. Although this fails, the installation of the deployment package still succeeds. Nevertheless, it is sloppy to do this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-18 14:35:45.031,,,no_permission,,,,,,,,,,,,337641,,,Fri Jul 19 11:47:12 UTC 2013,,,,,,0|i1m8l3:,337964,,,,,,,,"18/Jul/13 14:35;azachar;Hello Apache Ace!

We had a similar problem and I patched the code, here is the implementation:



Index: src/main/java/org/apache/felix/deploymentadmin/spi/StopBundleCommand.java
===================================================================
--- src/main/java/org/apache/felix/deploymentadmin/spi/StopBundleCommand.java	(revision 1493938)
+++ src/main/java/org/apache/felix/deploymentadmin/spi/StopBundleCommand.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.felix.deploymentadmin.BundleInfoImpl;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleException;
+import org.osgi.framework.Constants;
 import org.osgi.service.deploymentadmin.BundleInfo;
 import org.osgi.service.deploymentadmin.DeploymentException;
 import org.osgi.service.log.LogService;
@@ -49,6 +50,10 @@
             String symbolicName = bundleInfos[i].getSymbolicName();
 			Bundle bundle = target.getBundle(symbolicName);
             if (bundle != null) {
+                boolean isFragment = bundle.getHeaders().get(Constants.FRAGMENT_HOST) != null;
+                if (isFragment) {
+                    continue;
+                } 
         		if (""false"".equalsIgnoreCase(stopUnaffectedBundle) && omitBundleStop(session, symbolicName)) {
         			continue;
         		}
Index: src/main/java/org/apache/felix/deploymentadmin/spi/StartBundleCommand.java
===================================================================
--- src/main/java/org/apache/felix/deploymentadmin/spi/StartBundleCommand.java	(revision 1493938)
+++ src/main/java/org/apache/felix/deploymentadmin/spi/StartBundleCommand.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.felix.deploymentadmin.BundleInfoImpl;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleException;
+import org.osgi.framework.Constants;
 import org.osgi.framework.FrameworkEvent;
 import org.osgi.framework.FrameworkListener;
 import org.osgi.service.log.LogService;
@@ -51,11 +52,16 @@
             if(!bundleInfoImpl.isCustomizer()) {
                 Bundle bundle = source.getBundle(bundleInfoImpl.getSymbolicName());
                 if (bundle != null) {
-                    try {
-                        bundle.start();
-                    }
-                    catch (BundleException be) {
-                        log.log(LogService.LOG_WARNING, ""Could not start bundle '"" + bundle.getSymbolicName() + ""'"", be);
+                    boolean isFragment = bundle.getHeaders().get(Constants.FRAGMENT_HOST) != null;
+                    if (isFragment) {
+                        log.log(LogService.LOG_INFO, ""Skipping starting fragment bundle '"" + bundleInfoImpl.getSymbolicName() + ""'"");
+                    } else {
+                        try {
+                            bundle.start();
+                        }
+                        catch (BundleException be) {
+                            log.log(LogService.LOG_WARNING, ""Could not start bundle '"" + bundle.getSymbolicName() + ""'"", be);
+                        }
                     }
                 }
                 else {
","18/Jul/13 15:03;jajans;Thanks for sharing your commit; are you ok if I use your patch as attempt to fix this issue?
","18/Jul/13 15:52;azachar;Hello J.W. Janssen!
Feel Free to apply it.

Best regards,
Andrej


","19/Jul/13 11:47;jajans;Thanks Andrej, I've committed a fix in revision #1504843, and an integration test in revision #1504847.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Removing required dependency before component is created leaves service registered,FELIX-4166,12657175,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,10/Jul/13 23:39,15/Oct/13 23:42,14/Mar/19 02:48,15/Oct/13 23:42,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Scenario: delayed component with a required service.  Start with the required service registered, and enable the component.  It will move to registered state, and create a service registration.  Now remove the dependency before obtaining the service from the service registration.  The component remains in the Registered state and the service remains registered even though the component is in fact now unsatisfied.

I think this is a problem with all mandatory dependencies (1..1, 1..n, static, dynamic).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,337398,,,2013-07-10 23:39:57.0,,,,,,0|i1m733:,337721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FilePersistenceManager fails to rename configuration file,FELIX-4165,12656623,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,lichtin,lichtin,08/Jul/13 15:36,28/Sep/13 15:27,14/Mar/19 02:48,14/Aug/13 08:14,configadmin-1.6.0,,,,,,configadmin-1.8.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"Quite frequently a file move fails. The symptom is:

java.io.IOException: Failed to rename configuration file from 'C:\Users\mli\nuc\env\master\karaf\karaf\karaf-deploy-std\target\karaf\data\cache\bundle5\data\config\org_apache_felix_cm_impl_DynamicBindings.config2019338524809240991.tmp' to 'C:\Users\mli\nuc\env\master\karaf\karaf\karaf-deploy-std\target\karaf\data\cache\bundle5\data\config\org_apache_felix_cm_impl_DynamicBindings.config
	at org.apache.felix.cm.file.FilePersistenceManager._store(FilePersistenceManager.java:640)[5:org.apache.felix.configadmin:1.6.0]
	at org.apache.felix.cm.file.FilePersistenceManager.store(FilePersistenceManager.java:582)[5:org.apache.felix.configadmin:1.6.0]
	at org.apache.felix.cm.impl.DynamicBindings.putLocation(DynamicBindings.java:116)[5:org.apache.felix.configadmin:1.6.0]
	at org.apache.felix.cm.impl.ConfigurationManager.setDynamicBundleLocation(ConfigurationManager.java:461)[5:org.apache.felix.configadmin:1.6.0]
	at org.apache.felix.cm.impl.ConfigurationImpl.setDynamicBundleLocation(ConfigurationImpl.java:281)[5:org.apache.felix.configadmin:1.6.0]
	at org.apache.felix.cm.impl.ConfigurationImpl.tryBindLocation(ConfigurationImpl.java:304)[5:org.apache.felix.configadmin:1.6.0]
	at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1705)[5:org.apache.felix.configadmin:1.6.0]
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:103)[5:org.apache.felix.configadmin:1.6.0]
	at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]

Perhaps the file exists and cannot be deleted (could report return value of the delete() on line 634).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-14 07:56:44.671,,,no_permission,,,,,,,,,,,,336846,,,Sat Sep 28 15:27:00 UTC 2013,,,,,,0|i1m3ov:,337169,,,,,,,,"12/Jul/13 12:47;lichtin;I wanted to work around the issue, but unfortunately the exception is swallowed in ConfigurationImpl.java:

    private void updateFactory() throws IOException {
        String factoryPid = getFactoryPidString();
        if ( factoryPid != null )
        {
            Factory factory = getConfigurationManager().getOrCreateFactory( factoryPid );
            if ( factory.addPID( getPidString() ) )
            {
                // only write back if the pid was not already registered
                // with the factory
                try
                {
                    factory.store();
                }
                catch ( IOException ioe )
                {
                    getConfigurationManager().log( LogService.LOG_ERROR,
                        ""Failure storing factory {0} with new configuration {1}"", new Object[]
                            { factoryPid, getPidString(), ioe } );
                }
            }
        }
    }

Could you either re-throw or perhaps not catch the exception at all if you don't know how to handle it?","14/Aug/13 07:56;fmeschbe;Thanks for reporting the issue.

I have added a check for the result of the delete operation in Rev. 1513753. Unfortunately Java just reports success or failure. So, the only thing that can be done at that level is to throw an IOException and fail the store operation.

The reason for failure to delete a file (or rename a file by that matter) on windows is generally related to the file still being open. Both should not be the case to the best of my knowledge here.

As for your follow-up comment: The code extract is unrelated to the original report. But you mention, that an IOException should be thrown here instead of catching and logging it. I disagree in this context because the factory.store() operation is an internal maintenance task not related to the actual creation of a factory configuration. As such me thinks this exception should not exposed to the consumer because the consumer can do even less. In addition, regardless of the success or failure in this particular situation, the task of the consumer (creating a factory configuration) has been done.","14/Aug/13 08:07;lichtin;Thanks for having a look and the check.

As mentioned elsewhere, it is likely related to Windows and a virus scanner (Kaspersky in my case).
I excluded the Karaf run directories from getting scanned by KAV and don't see the issue since then (fingers crossed).
","14/Aug/13 08:14;fmeschbe;Thanks to the quick feedback.

So I resolve this issue for now. You may want to create a new one (relating to this) if the issue occurs again.",28/Sep/13 15:27;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Instance / Component matching regression,FELIX-4164,12656365,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,05/Jul/13 12:03,08/Oct/13 17:20,14/Mar/19 02:48,05/Jul/13 12:46,ipojo-runtime-1.10,ipojo-runtime-1.10.1,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"The extender implementation has been refactored in 1.10 version.
Before, when trying to match instances to factories, the name AND classname of the factory was used to match against the instance provided component attribute.
It is no more the case starting from 1.10.

So components (annotated with @Component AND overriding the default name) manipulated with an old manipulator (not containing the FELIX-4052 fix) will not work on iPOJO runtime superior to 1.10.",,,,,,,,,,,,,,,,,,FELIX-4052,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,336588,,,Fri Jul 05 12:46:45 UTC 2013,,,,,,0|i1m23r:,336912,,,,,,,,05/Jul/13 12:46;sauthieg;Pushed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error when declaring a multivalued property using the OSGi 4.3 Annotation DS standard,FELIX-4159,12656035,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cvgaviao,cvgaviao,03/Jul/13 15:04,02/Aug/13 07:29,14/Mar/19 02:48,05/Jul/13 05:49,scr ds annotations 1.2.2,,,,,,scr ds annotations 1.2.4,,,,,,,SCR Tooling,,,,,,0,,,,,,"When trying to declare a DS component with a property with multiple values like this:

@Component(name = ""My commands"", property={""foo:Integer=1"",""foo:Integer=2"",""foo:Integer=3""})
Class MyCommandsComponent

I'm getting the following error:

> Duplicate definition for property foo in class MyCommandsComponent (org.apache.felix:maven-scr-plugin:1.13.0:scr:generate-scr-scrdescriptor:process-classes)

I'm using this dependency:

        <dependency>
            <groupId>org.apache.felix</groupId>
<artifactId>org.apache.felix.scr.ds-annotations</artifactId>
        </dependency> ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-03 16:45:55.823,,,no_permission,,,,,,,,,,,,336310,,,Fri Jul 05 00:09:46 UTC 2013,,,,,,0|i1m0dz:,336634,,,,,,,,"03/Jul/13 16:45;cziegeler;Thanks for reporting, I've committed a potential fix - could you please try the latest ds-annotations from svn trunk?","03/Jul/13 18:08;cvgaviao;Unfortunately I removed the svn from my machine, as soon as the git mirror is updated I will try it.
thanks.","05/Jul/13 00:09;cvgaviao;Carsten, I checked the snapshot version and I confirmed that the changes fixed the problem.
thanks a lot.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
package conflict with ipojo-annotations and ipojo-runtime,FELIX-4139,12653451,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,torito,torito,18/Jun/13 14:25,08/Oct/13 17:17,14/Mar/19 02:48,27/Jun/13 16:12,ipojo-runtime-1.10,ipojo-runtime-1.10.1,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"The annotations and the ipojo-runtime bundle both contains a package named org.apache.felix.ipojo.extender.

This split-package could cause some conflicts.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-24 09:57:58.884,,,no_permission,,,,,,,,,,,,333729,,,Thu Jun 27 16:12:44 UTC 2013,,,,,,0|i1lkjb:,334057,,,,,,,,24/Jun/13 09:57;clement.escoffier;A solution would be to embeds annotation in a regular jar instead of a bundle.,"27/Jun/13 16:12;clement.escoffier;Fixed in trunk,

The annotations jar is not a bundle anymore.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeDeclaration calls factory.dispose() even if it already has been disposed (externally),FELIX-4138,12653409,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,pierre.bourret,pierre.bourret,18/Jun/13 09:59,08/Oct/13 17:20,14/Mar/19 02:48,01/Jul/13 15:15,ipojo-manipulator-1.10.1,ipojo-runtime-1.10,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"In some tests, I manually destroy an iPOJO factory by calling IPojoFactory.dispose()

However, on framweork shutdown, the associated type declaration tries to call the same method again, without checking the factory actual state. It may also be possible that the TypeDeclaration is not unbound despite the fact the factory is not active anymore.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-18 11:11:13.562,,,no_permission,,,,,,,,,,,,333687,,,Mon Jul 01 15:15:23 UTC 2013,,,,,,0|i1lk9z:,334015,,,,,,,,"18/Jun/13 10:00;pierre.bourret;Stack trace:
ERROR: Bundle org.apache.felix.ipojo [13] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.ipojo.IPojoFactory.removeFactoryStateListener(IPojoFactory.java:518)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$ExtensionSupport.removedService(ManagedType.java:241)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:956)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:864)
	at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
	at org.osgi.util.tracker.ServiceTracker.close(ServiceTracker.java:375)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType.stop(ManagedType.java:167)
	at org.apache.felix.ipojo.extender.internal.linker.DeclarationLinker.removedService(DeclarationLinker.java:107)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:956)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:864)
	at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
	at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:902)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4401)
	at org.apache.felix.framework.Felix.access$000(Felix.java:74)
	at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:151)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at org.apache.felix.ipojo.extender.internal.AbstractService.stop(AbstractService.java:73)
	at org.apache.felix.ipojo.extender.internal.processor.ComponentsBundleProcessor$ComponentsAndInstances.stop(ComponentsBundleProcessor.java:223)
	at org.apache.felix.ipojo.extender.internal.processor.ComponentsBundleProcessor.deactivate(ComponentsBundleProcessor.java:112)
	at org.apache.felix.ipojo.extender.internal.processor.ChainedBundleProcessor.deactivate(ChainedBundleProcessor.java:100)
	at org.apache.felix.ipojo.extender.internal.Extender$1.removedBundle(Extender.java:173)
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:491)
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:414)
	at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
	at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:449)
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4385)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2508)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1297)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:679)",18/Jun/13 11:11;clement.escoffier;Shouldn't the declaration beeing notified of the factory disposal and be unbound ?,"27/Jun/13 10:54;sauthieg;I agree that no exceptions should be thrown at all if factory is already disposed/closed.
We can achieve this in multiple ways:
* Check the state of the factory before calling dispose()
* Or better Factory.dispose() check its internal state before doing anything
* Or being notified of state changes through a listener

Anyway, I assume that the creator of the factory and the caller of dispose() should be the same (I create, I dispose, not I create, you dispose).
Seems a weird use case for me
WDYT ?
","27/Jun/13 12:31;clement.escoffier;> I agree that no exceptions should be thrown at all if factory is already disposed/closed.
> We can achieve this in multiple ways:
> * Check the state of the factory before calling dispose()
> * Or better Factory.dispose() check its internal state before doing anything
> * Or being notified of state changes through a listener
> 
> Anyway, I assume that the creator of the factory and the caller of dispose() should be the same (I create, I dispose, not I create, you dispose).
> Seems a weird use case for me
> WDYT ?

I'm in favor of the second solution, the safer I would say. 

Even if the 'I create, I dispose' is the most comme use case, we can't be totally sure that 'I create, you dispose' won't happen sometimes.","01/Jul/13 15:15;sauthieg;I pushed a fix in the trunk
Please make a try",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Modified not working on Equinox,FELIX-4132,12653081,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,16/Jun/13 19:06,08/Oct/13 17:20,14/Mar/19 02:48,25/Jun/13 17:19,ipojo-runtime-1.10.1,,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,Integration tests are detected a regression on th e@Modified callback on Equinox (and only Equinox). This is probably due to the refactoring of the dependency model.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,333404,,,Tue Jun 25 17:19:37 UTC 2013,,,,,,0|i1lij3:,333732,,,,,,,,"25/Jun/13 17:19;clement.escoffier;Fix in trunk,

Was just an issue in the equals method of TransformedServiceReferenceImpl",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot change the optionality of a dependency,FELIX-4129,12652919,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,14/Jun/13 17:13,17/Jun/13 05:47,14/Mar/19 02:48,14/Jun/13 17:30,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"When a dependency is started, it should be possible to change if it's optional or not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,333242,,,Fri Jun 14 17:30:57 UTC 2013,,,,,,0|i1lhj3:,333570,,,,,,,,14/Jun/13 17:30;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration tracker bug when starting and stopping iPOJO successively,FELIX-4127,12652863,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,14/Jun/13 11:45,17/Jun/13 05:47,14/Mar/19 02:48,14/Jun/13 17:14,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"The configuration tracker is not correclty released after having stopped iPOJO. As a consequence, stoping and starting iPOJO triggers an exception:

g! lb
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (4.2.1)
    1|Active     |    1|Apache Felix Bundle Repository (1.6.6)
    2|Active     |    1|Apache Felix Gogo Command (0.12.0)
    3|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
    4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
    5|Active     |    1|Apache Felix iPOJO (1.10.1.SNAPSHOT)
    6|Active     |    1|Apache Felix iPOJO Gogo Command (1.10.1.SNAPSHOT)
g! stop 5
g! start 5
g! stop 5
ERROR: Bundle org.apache.felix.ipojo [5] Error stopping bundle. (java.lang.IllegalStateException: Service already unregistered.)
java.lang.IllegalStateException: Service already unregistered.
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:123)
	at org.apache.felix.ipojo.ConfigurationTracker.dispose(ConfigurationTracker.java:81)
	at org.apache.felix.ipojo.ConfigurationTracker.shutdown(ConfigurationTracker.java:69)
	at org.apache.felix.ipojo.extender.internal.Extender.stop(Extender.java:194)
	at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2530)
	at org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:991)
	at org.apache.felix.gogo.command.Basic.stop(Basic.java:786)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
	at org.apache.felix.gogo.shell.Console.run(Console.java:62)
	at org.apache.felix.gogo.shell.Shell.console(Shell.java:203)
	at org.apache.felix.gogo.shell.Shell.gosh(Shell.java:128)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
	at org.apache.felix.gogo.shell.Activator.run(Activator.java:75)
	at java.lang.Thread.run(Thread.java:680)
java.lang.IllegalStateException: Service already unregistered.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,333186,,,Fri Jun 14 17:14:54 UTC 2013,,,,,,0|i1lh6n:,333514,,,,,,,,14/Jun/13 17:14;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in DependencyModel.getService() when @Bind method throws an exception,FELIX-4115,12652036,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,pierre.bourret,pierre.bourret,10/Jun/13 14:35,08/Oct/13 17:20,14/Mar/19 02:48,27/Jun/13 16:09,ipojo-runtime-1.10,ipojo-runtime-1.10.1,,,,,ipojo-runtime-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"When a service binding callback throws an exception, the associated DependencyModel fails with an NPE.

In the following log, the first exception is provoked. However, the second one is a bug inside the DependencyModel (m_tracker is null).

2013.06.10 16:28:23 ERROR - Bundle: bugs.bug - [ERROR]  : The method bindInstance in the implementation class bugs.NaughtyBinder throws an exception : E ≠ mc² - java.lang.NullPointerException: E ≠ mc²
	at bugs.NaughtyBinder.__M_bindInstance(NaughtyBinder.java:14)
	at bugs.NaughtyBinder.bindInstance(NaughtyBinder.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:260)
	at org.apache.felix.ipojo.handlers.dependency.DependencyCallback.callOnInstance(DependencyCallback.java:309)
	at org.apache.felix.ipojo.handlers.dependency.Dependency.invokeCallback(Dependency.java:330)
	at org.apache.felix.ipojo.handlers.dependency.Dependency.onObjectCreation(Dependency.java:282)
	at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.__M_onCreation(DependencyHandler.java:702)
	at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.onCreation(DependencyHandler.java)
	at org.apache.felix.ipojo.InstanceManager.getPojoObject(InstanceManager.java:934)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__M_stateChanged(LifecycleCallbackHandler.java:156)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:536)
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:418)
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:178)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:307)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:234)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:285)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:279)
	at org.apache.felix.ipojo.extender.internal.queue.JobInfoCallable.call(JobInfoCallable.java:100)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:679)
2013.06.10 16:28:23 ERROR - Bundle: bugs.bug - [ERROR] bugs.NaughtyBinder : null - java.lang.NullPointerException
	at org.apache.felix.ipojo.util.DependencyModel.getService(DependencyModel.java:948)
	at org.apache.felix.ipojo.util.DependencyModel.getService(DependencyModel.java:938)
	at org.apache.felix.ipojo.handlers.dependency.Dependency.onObjectCreation(Dependency.java:280)
	at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.__M_onCreation(DependencyHandler.java:702)
	at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.onCreation(DependencyHandler.java)
	at org.apache.felix.ipojo.InstanceManager.getPojoObject(InstanceManager.java:934)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__M_stateChanged(LifecycleCallbackHandler.java:156)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:536)
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:418)
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:178)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:307)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:234)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:285)
	at org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport$1.call(ManagedType.java:279)
	at org.apache.felix.ipojo.extender.internal.queue.JobInfoCallable.call(JobInfoCallable.java:100)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:679)

","Linux 3.5.0-32-generic #53-Ubuntu SMP Wed May 29 20:23:04 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
java version ""1.6.0_27""
OpenJDK Runtime Environment (IcedTea6 1.12.5) (6b27-1.12.5-0ubuntu0.12.10.1)
OpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)
",,,,,,,,,,,,,,,,,,,10/Jun/13 14:42;pierre.bourret;bug-project.zip;https://issues.apache.org/jira/secure/attachment/12587073/bug-project.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-27 16:09:43.166,,,no_permission,,,,,,,,,,,,332360,,,Thu Jun 27 16:09:43 UTC 2013,,,,,,0|i1lc3r:,332689,,,,,,,,"10/Jun/13 14:42;pierre.bourret;Attached here : a simple project to reproduce the bug

It creates an instance of a component that throws a NullPointerException in its bindInstance method (the provoked exception).",27/Jun/13 16:09;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO ProvidedServiceDescription does not expose policy & CreationStrategy,FELIX-4114,12652027,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,pierre.bourret,pierre.bourret,10/Jun/13 13:11,17/Jun/13 05:47,14/Mar/19 02:48,12/Jun/13 12:20,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"The provided service handler description (ProvidedServiceDescription) allows to retrieve some useful info about the provided service, but the service factory policy and/or the creation strategy are hidden.

It would be nice to access both of these properties :
- the policy : SINGLETON_STRATEGY, SERVICE_STRATEGY, STATIC_STRATEGY or INSTANCE_STRATEGY
- the CreationStrategy implementation class.",N/A,,,,,,,,,,,,,,,,,,,10/Jun/13 13:19;pierre.bourret;FELIX-4114_iPOJO_ProvidedServiceDescription_does_not_expose_policy_and_CreationStrategy.patch;https://issues.apache.org/jira/secure/attachment/12587060/FELIX-4114_iPOJO_ProvidedServiceDescription_does_not_expose_policy_and_CreationStrategy.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-12 12:20:25.252,,,no_permission,,,,,,,,,,,,332351,,,Fri Jun 14 15:24:14 UTC 2013,,,,,,0|i1lc1r:,332680,,,,,,,,"10/Jun/13 13:19;pierre.bourret;Attached patch defines getPolicy() and getCreationStrategy() in both ProvidedService and ProvidedServiceDescription classes.

A new virtual policy has been defined, CUSTOM_POLICY, that means that the service providing has a customized creation strategy.",12/Jun/13 12:20;clement.escoffier;Patch applied in trunk,"14/Jun/13 15:24;pierre.bourret;Great! Thanks

It seems fine to close this issue as soon as changes are released.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Factories not disposed when the extension provider is leaving,FELIX-4113,12651982,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,clement.escoffier,clement.escoffier,10/Jun/13 06:41,17/Jun/13 05:47,14/Mar/19 02:48,10/Jun/13 13:55,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"When an extension is leaving, type declaration are not unboud and the created factories are not disposed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-10 07:52:55.429,,,no_permission,,,,,,,,,,,,332306,,,Mon Jun 10 13:55:28 UTC 2013,,,,,,0|i1lbrr:,332635,,,,,,,,"10/Jun/13 07:52;sauthieg;Looks like we're missing tests around the declarations handling.
Is it possible to bootstrap some Unit tests ?","10/Jun/13 13:55;sauthieg;Should be fixed now
Please close if satisfied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@ServiceProperty and @StaticServiceProperty are missing the immutable attribute,FELIX-4110,12651660,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,07/Jun/13 10:14,07/Jun/13 12:12,14/Mar/19 02:48,07/Jun/13 12:12,,,,,,,ipojo-manipulator-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,331986,,,Fri Jun 07 12:12:13 UTC 2013,,,,,,0|i1l9t3:,332315,,,,,,,,07/Jun/13 12:12;sauthieg;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentTypeDescription.addProperty() ignore immutable parameter,FELIX-4109,12651658,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,07/Jun/13 10:11,07/Jun/13 12:11,14/Mar/19 02:48,07/Jun/13 12:11,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,331984,,,Fri Jun 07 12:11:49 UTC 2013,,,,,,0|i1l9sn:,332313,,,,,,,,07/Jun/13 12:11;sauthieg;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in the new extender,FELIX-4108,12651648,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,clement.escoffier,clement.escoffier,07/Jun/13 09:07,17/Jun/13 05:47,14/Mar/19 02:48,07/Jun/13 12:06,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"Here is the deadlock trace:

State: BLOCKED on org.apache.felix.ipojo.InstanceManager@31f94 owned by: FelixStartLevel
Total blocked: 2  Total waited: 1

Stack trace: 
 org.apache.felix.ipojo.InstanceManager.getState(InstanceManager.java:585)
org.apache.felix.ipojo.IPojoFactory.stop(IPojoFactory.java:568)
   - locked org.apache.felix.ipojo.ComponentFactory@59a6b5
org.apache.felix.ipojo.IPojoFactory.dispose(IPojoFactory.java:591)
   - locked org.apache.felix.ipojo.ComponentFactory@59a6b5
org.apache.felix.ipojo.extender.internal.linker.ManagedType.stop(ManagedType.java:167)
org.apache.felix.ipojo.extender.internal.linker.DeclarationLinker.removedService(DeclarationLinker.java:107)
org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:956)
org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:864)
org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:902)
org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
org.apache.felix.framework.Felix.access$000(Felix.java:74)
org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:401)
org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:151)
org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
org.apache.felix.framework.ServiceRegistry.unregisterServices(ServiceRegistry.java:196)
org.apache.felix.framework.Felix.stopBundle(Felix.java:2555)
org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:991)
org.apache.felix.fileinstall.internal.DirectoryWatcher.stopTransient(DirectoryWatcher.java:1103)
org.apache.felix.fileinstall.internal.DirectoryWatcher.installOrUpdateBundle(DirectoryWatcher.java:954)
org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:877)
org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:790)
org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:428)
org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:245)

END OF FIRST TRACE
---------------------------------------------------------------------------------------------------------
Name: FelixStartLevel
State: BLOCKED on org.apache.felix.ipojo.ComponentFactory@59a6b5 owned by: fileinstall-/home/torito/workspace/iCasa/iCasaPlatform/tests/core-platform-tests/distributions-test/icasa-distribution-test/target/distribution/icasa.platform.distribution/load
Total blocked: 65  Total waited: 55

Stack trace: 
 org.apache.felix.ipojo.IPojoFactory.disposed(IPojoFactory.java:724)
org.apache.felix.ipojo.InstanceManager.dispose(InstanceManager.java:497)
   - locked org.apache.felix.ipojo.InstanceManager@31f94
org.apache.felix.ipojo.extender.internal.linker.ManagedType$InstanceSupport.removedService(ManagedType.java:346)
org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:956)
org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:864)
org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:902)
org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
org.apache.felix.framework.Felix.access$000(Felix.java:74)
org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:401)
org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:151)
org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
org.apache.felix.ipojo.extender.internal.AbstractService.stop(AbstractService.java:73)
org.apache.felix.ipojo.extender.internal.processor.ComponentsBundleProcessor$ComponentsAndInstances.stop(ComponentsBundleProcessor.java:220)
org.apache.felix.ipojo.extender.internal.processor.ComponentsBundleProcessor.deactivate(ComponentsBundleProcessor.java:112)
org.apache.felix.ipojo.extender.internal.processor.ForwardingBundleProcessor.deactivate(ForwardingBundleProcessor.java:42)
org.apache.felix.ipojo.extender.internal.processor.ChainedBundleProcessor.deactivate(ChainedBundleProcessor.java:100)
org.apache.felix.ipojo.extender.internal.Extender$1.removedBundle(Extender.java:173)
org.osgi.util.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:491)
org.osgi.util.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:414)
org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
org.osgi.util.tracker.BundleTracker.close(BundleTracker.java:192)
org.apache.felix.ipojo.extender.internal.Extender.stop(Extender.java:189)
org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
org.apache.felix.framework.Felix.stopBundle(Felix.java:2530)
org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1309)
org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
java.lang.Thread.run(Thread.java:662)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-07 09:49:35.966,,,no_permission,,,,,,,,,,,,331974,,,Fri Jun 07 12:06:50 UTC 2013,,,,,,0|i1l9qn:,332303,,,,,,,,"07/Jun/13 09:49;sauthieg;So, on 1 thread, we have the iPOJO bundle that is stopping, so it deactivate all known bundles.
On the other thread, we have fileInstall that decide to undeploy a bundle.

Question, do you remove a bundle from the deploi directory of fileinstall during the shutdown sequence ?
Or is this FI that, during it's stop process, perform an asynchronous uninstall ?","07/Jun/13 12:06;sauthieg;I just pushed some changes
I hope that it will fix your issue",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Defensive service registration and update,FELIX-4106,12651124,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,05/Jun/13 14:23,17/Jun/13 05:47,14/Mar/19 02:48,10/Jun/13 06:30,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,Avoid registering or updating a service when the bundle is stopping.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,331450,,,Mon Jun 10 06:30:19 UTC 2013,,,,,,0|i1l6iv:,331782,,,,,,,,10/Jun/13 06:30;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Factories not disposed when their bundle is leaving,FELIX-4105,12651123,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,sauthieg,clement.escoffier,clement.escoffier,05/Jun/13 14:23,17/Jun/13 05:47,14/Mar/19 02:48,12/Jun/13 12:08,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,The factories are not disposed when their bundle is leaving.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,331449,,,Wed Jun 12 12:08:29 UTC 2013,,,,,,0|i1l6in:,331781,,,,,,,,"12/Jun/13 12:08;clement.escoffier;Fixed in trunk.

Fix also confirmed by user.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing dependencies in scr-ant-task,FELIX-4102,12650828,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,daniel-faber,daniel-faber,04/Jun/13 07:13,02/Aug/13 07:30,14/Mar/19 02:48,02/Aug/13 07:25,scr ant task 1.6.0,,,,,,scr ant task 1.8.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"The SCR ant task throws a NoClassDefFoundError:

BUILD FAILED
[...]/build.xml:13: java.lang.NoClassDefFoundError: org/osgi/service/component/annotations/Component
	at org.apache.felix.scrplugin.ds.DSAnnotationProcessor.process(DSAnnotationProcessor.java:69)
	at [...]

This even happens with a minimal project consisting of a single empty component class:

import org.apache.felix.scr.annotations.Component;
@Component
public class C { }

The easiest workaround is to add org.osgi.compendium-4.3.1.jar to the taskdef classpath:

<taskdef resource=""scrtask.properties"" classpath=""org.apache.felix.scr.ant-1.6.0.jar;${user.home}/.m2/repository/org/osgi/org.osgi.compendium/4.3.1/org.osgi.compendium-4.3.1.jar"" />

If it's supposed to work like this please update the docs at https://cwiki.apache.org/FELIX/apache-felix-scr-ant-task-use.html

If not please embed missing dependencies into the ant task jar file. For the above minimal project it's enough to add org/osgi/service/component/annotations/Component.class and org/osgi/service/component/ComponentContext.class from org.osgi.compendium-4.3.1.jar, but I don't know if this is sufficient in all cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-02 07:25:03.226,,,no_permission,,,,,,,,,,,,331155,,,Fri Aug 02 07:25:03 UTC 2013,,,,,,0|i1l4pj:,331488,,,,,,,,"02/Aug/13 07:25;cziegeler;Thanks for reporting, yes the dependency is missing in the docs. I'Ve updated the docs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when retrieve required and missing handler on a disposed factory,FELIX-4096,12650574,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,03/Jun/13 08:02,17/Jun/13 05:47,14/Mar/19 02:48,03/Jun/13 15:58,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"When the factory is stopped, the required handler list is set to null avoiding retrieving the required handlers without getting an NPE.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,330901,,,Mon Jun 03 15:58:26 UTC 2013,,,,,,0|i1l35b:,331234,,,,,,,,03/Jun/13 15:58;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependency is ignored if @Bind does not respect naming pattern,FELIX-4093,12650466,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,01/Jun/13 18:59,01/Jun/13 19:32,14/Mar/19 02:48,01/Jun/13 19:32,ipojo-manipulator-1.10.0,ipojo-manipulator-1.8.6,,,,,ipojo-manipulator-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,FELIX-4094,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,330793,,,Sat Jun 01 19:02:00 UTC 2013,,,,,,0|i1l2hb:,331126,,,,,,,,"01/Jun/13 19:02;sauthieg;Specification should be used as default identifier is method name does not follow the recognized patterns (bind/unbind and set/unset).
If specification cannot be found (either in annotation's attribute or in method signature), an error should be reported to the user and dependency ignored.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bnd iPOJO Plugin only browse classes annotated with some iPOJO annotations,FELIX-4091,12650119,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,30/May/13 10:38,30/May/13 13:12,14/Mar/19 02:48,30/May/13 13:12,ipojo-manipulator-1.10.0,,,,,,ipojo-manipulator-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"This is inconsistent with other plugins (maven, ant, ...) that are handling all classes (iPOJO annotated or not)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,330446,,,Thu May 30 13:12:11 UTC 2013,,,,,,0|i1l0cf:,330780,,,,,,,,30/May/13 13:12;sauthieg;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ActivateMethod.ACTIVATE_TYPES_DS11 and ACTIVATE_TYPES_DS10 should be static final,FELIX-4090,12650017,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,djencks,bkail,bkail,29/May/13 21:05,15/Oct/13 23:42,14/Mar/19 02:48,29/May/13 22:24,,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-29 22:24:13.77,,,no_permission,,,,,,,,,,,,330344,,,Wed May 29 22:24:13 UTC 2013,,,,,,0|i1kzpz:,330678,,,,,,,,"29/May/13 22:24;djencks;Fixed in r1487656, many thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extender do not deactivate managed components when stopped,FELIX-4089,12649998,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,29/May/13 20:13,17/Jun/13 05:47,14/Mar/19 02:48,30/May/13 10:35,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,330325,,,Thu May 30 10:35:21 UTC 2013,,,,,,0|i1kzlr:,330659,,,,,,,,"30/May/13 10:35;sauthieg;Waiting for some jenkins integration tests with other frameworks to really close that issue
[~clement.escoffier], when you'll have the info, please tell me :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] NPE from SCR service unregistration,FELIX-4088,12649966,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,timothyjward,timothyjward,29/May/13 17:39,06/Aug/14 02:35,14/Mar/19 02:48,06/Aug/14 02:35,framework-4.2.0, scr-1.6.0,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),Framework,,,,,0,,,,,,"When uninstalling a set of bundles I get the following exception.

ERROR: Bundle com.paremus.dosgi.topologymanager [101] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.framework.util.Util.getWire(Util.java:335)
	at org.apache.felix.framework.ServiceRegistrationImpl$ServiceReferenceImpl.isAssignableTo(ServiceRegistrationImpl.java:493)
	at org.apache.felix.framework.util.Util.isServiceAssignable(Util.java:280)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:916)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4401)
	at org.apache.felix.framework.Felix.access$000(Felix.java:74)
	at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:151)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at com.paremus.frameworkintercept.DelegatingServiceRegistration.unregister(DelegatingServiceRegistration.java:37)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:470)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1074)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:338)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.reconfigure(ImmediateComponentManager.java:414)
	at org.apache.felix.scr.impl.config.ConfiguredComponentHolder.configurationDeleted(ConfiguredComponentHolder.java:152)
	at org.apache.felix.scr.impl.config.ConfigurationComponentRegistry.configurationEvent(ConfigurationComponentRegistry.java:247)
	at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:1832)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
	at java.lang.Thread.run(Thread.java:722)
ERROR: Bundle org.cauldron.newton.management.monitor [85] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.framework.util.Util.getWire(Util.java:335)
	at org.apache.felix.framework.ServiceRegistrationImpl$ServiceReferenceImpl.isAssignableTo(ServiceRegistrationImpl.java:493)
	at org.apache.felix.framework.util.Util.isServiceAssignable(Util.java:280)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:916)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4401)
	at org.apache.felix.framework.Felix.access$000(Felix.java:74)
	at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:151)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at com.paremus.frameworkintercept.DelegatingServiceRegistration.unregister(DelegatingServiceRegistration.java:37)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:470)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1074)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:338)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.reconfigure(ImmediateComponentManager.java:414)
	at org.apache.felix.scr.impl.config.ConfiguredComponentHolder.configurationDeleted(ConfiguredComponentHolder.java:152)
	at org.apache.felix.scr.impl.config.ConfigurationComponentRegistry.configurationEvent(ConfigurationComponentRegistry.java:247)
	at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:1832)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
	at java.lang.Thread.run(Thread.java:722)

One of the bundles is an extender, that publishes a Configuration using Config Admin. This configuration is picked up by DS to create a new Service using a ManagedServiceFactory.

At some point in the teardown I seem to be in the state where:

1. The configuration is being deleted because the target bundle is being uninstalled
2. The Bundle containing the SCR component is being uninstalled
3. SCR is attempting to unregister the managed service because of the asynchronous notification from config admin.

I'm not sure whether the fault lies with the core framework or with scr, or with config admin. My guess is that SCR is at fault for trying to unregister a service for an uninstalled bundle, but that the framework shouldn't be blowing up either. Config Admin is probably an innocent bystander. ",MacOSX 8 processors; Felix Configuration Admin 1.2.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-29 18:38:32.349,,,no_permission,,,,,,,,,,,,330293,,,Wed Aug 06 02:35:34 UTC 2014,,,,,,0|i1kzen:,330627,,,,,,,,"29/May/13 18:38;djencks;1. can you try using the current 1.8.0-SNAPSHOT ds?  1.6.0 isn't going to have anything fixed.
2. It looks like you've interposed some paremus code in between DS and the felix framework (at com.paremus.frameworkintercept.DelegatingServiceRegistration.unregister(DelegatingServiceRegistration.java:37) ).  Can this be causing the problem?  For instance maybe the bundle stopping event isn't getting propagated correctly to DS due to wrapping.
3. do you really mean ""This configuration is picked up by DS to create a new Service using a ManagedServiceFactory""?  Or do you mean the configuration has a pid or factory pid matching a DS component so DS uses the configuration to configure a component, sort of like a MSF?

From your description I'd expect that the bundle stopping event (synchronous) would be seen by DS and that would unregister the services for the bundle so that by the time the async configuration deleted event arrived there would be no more services for the bundle.  Can you make sure you have ds.loglevel=DEBUG and look in your logs to see if there's evidence of this happening?","29/May/13 19:45;timothyjward;1. I'll have a go with the latest snapshot and see what happens.

2. The Paremus code doesn't do anything much beyond logging the call and then delegating. I don't see a way in which it could be introducing a thread switch, a delay, or that it could filter the event from DS. I'll make sure to keep an eye on it while continuing to debug.

3. The configuration has a factory pid matching the name of the DS component, and the DS component has a configuration-policy of require:

<scr:component xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.1.0"" name=""com.paremus.packager.demos.derby.guard"" configuration-policy=""require"" activate=""activate"">

I'll try to collect some useful logs.

Even if this does turn out to be fixed in a more recent SCR release it still might be worth putting a null check in the core framework. I was quite surprised to be able to get something so deep in the core to NPE!","29/May/13 20:14;timothyjward;It looks like it probably is a threading problem...

I see the same error using the 1.7.0-SNAPSHOT build from this morning, but only sometimes.

Most of the time I see the following instead:

ERROR: [com.paremus.packager.demos.derby.guard(53)] Bundle is shut down for dependency driverHosting to (&(database.driver=derby)(version=10.9.1.0))
*ERROR* Unexpected problem delivery configuration event to [org.osgi.service.cm.ConfigurationListener, id=199, bundle=158]
java.lang.NullPointerException
	at org.apache.felix.scr.impl.config.ConfigurationSupport.configureComponentHolder(ConfigurationSupport.java:113)
	at org.apache.felix.scr.impl.config.ConfigurationSupport.configurationEvent(ConfigurationSupport.java:246)
	at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:1832)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
	at java.lang.Thread.run(Thread.java:722)


If I turn on debug trace then I no longer see the problem at all, if I turn on info trace then I occasionally see the problem. Sorry, I know this isn't the most helpful of debug information!
","29/May/13 20:52;djencks;I fixed the immediate problem in DS in your last stack trace, rev 1487635, have not tried again to upload a snapshot.  There might be further NPEs or problems in DS, if you could test that would be great :-).

I think there is also a race in the framework between unregistering the service and shutting down the bundle.  I'm hoping a more-framework-expert will take a look at this.","03/Jun/13 17:16;timothyjward;Hi [~djencks] - I have run the scenario again with a local build of the latest SCR code and I'm no longer seeing errors. Previously they were occurring about 75% of the time, and I've run through 10 times since the update. This obviously doesn't guarantee that there isn't another race condition in the framework, but the fix you added has definitely improved things.","14/Aug/13 07:59;fmeschbe;I think this is not related to Config Admin 1.2.8. Do you mind if I move the reference from the ""affects"" field to the ""environment"" field ?",14/Aug/13 09:42;timothyjward;That's fine with me.,14/Aug/13 09:45;fmeschbe;Thanks [~timothyjward]. Done.,06/Aug/14 02:35;djencks;need to set fix version,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationPrinterAdapter.getMethod should not only consider implementation class,FELIX-4078,12649638,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,28/May/13 07:51,06/Feb/14 18:13,14/Mar/19 02:48,28/May/13 07:57,inventory-1.0.0,,,,,,inventory-1.0.2,,,,,,,Inventory,,,,,,0,,,,,,"As part of FELIX-3963 the ConfigurationPrinterAdapter.getMethod was modified to not scan the class hierarchy to reflectively find methods to call, such as getTitle, printConfiguration, etc.

While this is fine for most cases, in the particular case of the service implementing the ConfigurationPrinter service, which declares some methods, the class hierarchy should be searched. This would also be in line with Web Console 4 where the method was retrieved from the service interface and not the implementation class.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,329965,,,Tue May 28 07:57:15 UTC 2013,,,,,,0|i1kxdz:,330300,,,,,,,,28/May/13 07:57;fmeschbe;Fixed in Rev. 1486804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix documentation urls in maven projects,FELIX-4077,12649617,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,28/May/13 04:33,17/Jun/13 05:47,14/Mar/19 02:48,28/May/13 04:38,ipojo-manipulator-1.10.0,ipojo-runtime-1.10,,,,,ipojo-eventadmin-handler-1.8.2,ipojo-manipulator-1.10.1,ipojo-runtime-1.10.1,ipojo-temporal-dependency-handler-1.8.0,ipojo-whiteboard-pattern-handler-1.8.0,,,iPOJO,,,,,,0,,,,,,The urls are still pointing on the old site.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,329944,,,Tue May 28 04:38:12 UTC 2013,,,,,,0|i1kx9b:,330279,,,,,,,,28/May/13 04:38;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Useless locking on getRequiredHandler,FELIX-4076,12649616,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,28/May/13 04:31,17/Jun/13 05:47,14/Mar/19 02:48,28/May/13 04:38,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,329943,,,Tue May 28 04:38:44 UTC 2013,,,,,,0|i1kx93:,330278,,,,,,,,28/May/13 04:38;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup InventoryPrinter generated file names in the ZIP file,FELIX-4075,12649347,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,24/May/13 16:01,06/Jun/13 15:34,14/Mar/19 02:48,27/May/13 12:50,,,,,,,inventory-1.0.0,,,,,,,Inventory,,,,,,0,,,,,,"Generating the ZIP creates files whose names are actually the value of the InventoryPrinter names, aka URL labels, instead of the printer titles previously used. Also the files are not numbered any more.

I pretty much like the numbering and it makes sure the files are unique (should two or more InventoryPrinter services use the same title but different names). ",,,,,,,,,,,,,,,,,,,,27/May/13 07:42;fmeschbe;FELIX-4075.patch;https://issues.apache.org/jira/secure/attachment/12584898/FELIX-4075.patch,27/May/13 07:42;fmeschbe;configuration-status-20130527-074003.zip;https://issues.apache.org/jira/secure/attachment/12584899/configuration-status-20130527-074003.zip,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-05-24 16:14:48.2,,,no_permission,,,,,,,,,,,,329674,,,Thu Jun 06 15:34:56 UTC 2013,,,,,,0|i1kvlb:,330009,,,,,,,,"24/May/13 16:14;cziegeler;The number one reason for using the names as the file name was for automated processing of a configuration zip, especially if json is generated. The name is pretty much stable which title and definitely the numbering are not.
I guess there are different solutions for this, what about adding an additional file to the zip which contains json in the form
{
    ""pluginX-name"" : [array of generated files for this plugin],
    ...
    ""pluginY-name"" : [array of generated files for this plugin]
}
and if this file has a well defined file name, automated tooling could process this file first and from there read the plugin files it's interested it
","24/May/13 16:15;cziegeler;The above list of files would of course include all files, json, txt etc. - the tool can pick out the right one for a plugin by looking at the extension","25/May/13 14:57;fmeschbe;This sounds like an interesting approach (kind of like a directory).

I would even extend it to include the format, such as:

  {
     ""plugin-name"": {
            ""text"": ""file"";
            ""json"": ""file"";
            ""attachements"": [ ... ""file"" ... ]
     }
  }","25/May/13 15:57;cziegeler;+1, and that's even extensible

So maybe we could call the file index.json","27/May/13 07:42;fmeschbe;Proposed patch to fix this:

* Moved ConfigurationWriter classes into a separate helper package (out of the AbstractWebConsolePlugin class)
* Created a super-simple SimpleJson class helping to write JSON files
* an index.json file is generated which maps the InventoryPrinter names to the actual files generated. This includes all text, json, and attachment files from the respective Inventory Printer as well as its title. This allows tools to easily extract the information.
* Add ZIP file generation timestamps in both plain text and JSON formats.

Also attached a sample configuration ZIP file generated from a current Sling Launchpad build.","27/May/13 12:36;fmeschbe;Applied a slightly modified patch in Rev. 1486594:

- Consolidate ConfigurationWriter classes into a new helpers package (out of the AbstractWebConsolePlugin)
- Create a dead-simple SimpleJson helper class to generate the configuration ZIP index.json file
- Create an index.json file providing the timestamp and the files provided by the plugins
- Use ""<pre>"" formatting for plain text and JSON output in the HTML (Browser) context

The timestamp file(s) are now collapsed into the index.json file. Tools may read the index.json file (which will always be the last file in the ZIP) to get the formatted and raw timestamp of the time of ZIP file generation as well as the files generated by the InventoryPrinter services ""indexed"" by the printer names.",27/May/13 12:50;fmeschbe;Resolving this as fixed to cut the release,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Plugin class name changed for config manager plugin, might be disabled on update",FELIX-4074,12649302,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,24/May/13 10:55,06/Jun/13 15:34,14/Mar/19 02:48,24/May/13 14:21,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"The class of the config manager plugin changed from org.apache.felix.webconsole.internal.compendium.ConfigManager
to
org.apache.felix.webconsole.internal.configuration.ConfigManager

while this is an implementation detail, it is unfortunately also used to disable plugins through a configuration for the OsgiManager.
If now a configuration is available for the OSGiManager which lists enabled plugins including the old class name, updating the web console will lead to disabling the config manager plugin

Easiest fix would be to revert the name change
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-06 15:34:59.095,,,no_permission,,,,,,,,,,,,329629,,,Thu Jun 06 15:34:59 UTC 2013,,,,,,0|i1kvbb:,329964,,,,,,,,24/May/13 12:58;cziegeler;Or we add some upgrade code which checks the plugin property for the old value and replaces it with the new value,"24/May/13 14:06;cziegeler;Suggest patch: the patch simply checks whether the old class was in the list of enabled plugins and replaces it with the new class.

Index: src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java
===================================================================
--- src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java	(revision 1486055)
+++ src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java	(working copy)
@@ -171,6 +171,9 @@
      */
     static final String DEFAULT_MANAGER_ROOT = ""/system/console""; //$NON-NLS-1$
 
+    private static final String OLD_CONFIG_MANAGER_CLASS = ""org.apache.felix.webconsole.internal.compendium.ConfigManager""; //$NON-NLS-1$
+    private static final String NEW_CONFIG_MANAGER_CLASS = ""org.apache.felix.webconsole.internal.configuration.ConfigManager""; //$NON-NLS-1$
+
     static final String[] PLUGIN_CLASSES = {
             ""org.apache.felix.webconsole.internal.configuration.ConfigurationAdminConfigurationPrinter"", //$NON-NLS-1$
             ""org.apache.felix.webconsole.internal.compendium.PreferencesConfigurationPrinter"", //$NON-NLS-1$
@@ -182,7 +185,7 @@
             ""org.apache.felix.webconsole.internal.misc.ThreadPrinter"", }; //$NON-NLS-1$
 
     static final String[] PLUGIN_MAP = {
-            ""org.apache.felix.webconsole.internal.configuration.ConfigManager"", ""configMgr"", //$NON-NLS-1$ //$NON-NLS-2$
+            NEW_CONFIG_MANAGER_CLASS, ""configMgr"", //$NON-NLS-1$ //$NON-NLS-2$
             ""org.apache.felix.webconsole.internal.compendium.LogServlet"", ""logs"", //$NON-NLS-1$ //$NON-NLS-2$
             ""org.apache.felix.webconsole.internal.core.BundlesServlet"", ""bundles"", //$NON-NLS-1$ //$NON-NLS-2$
             ""org.apache.felix.webconsole.internal.core.ServicesServlet"", ""services"", //$NON-NLS-1$ //$NON-NLS-2$
@@ -963,6 +966,14 @@
         // get enabled plugins
         String[] plugins = ConfigurationUtil.getStringArrayProperty(config, PROP_ENABLED_PLUGINS);
         enabledPlugins = null == plugins ? null : new HashSet(Arrays.asList(plugins));
+        // check for moved config manager class
+        if ( enabledPlugins != null )
+        {
+            if ( enabledPlugins.remove(OLD_CONFIG_MANAGER_CLASS) )
+            {
+                enabledPlugins.add(NEW_CONFIG_MANAGER_CLASS);
+            }
+        }
         initInternalPlugins();
 
         // might update HTTP service registration
",24/May/13 14:21;cziegeler;I've applied the patch,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
onGet and onSet methods do not provide the reference on the pojo object,FELIX-4072,12648456,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,20/May/13 16:28,17/Jun/13 05:47,14/Mar/19 02:48,21/May/13 08:59,ipojo-runtime-1.10,,,,,,ipojo-runtime-1.10.1,,,,,,,iPOJO,,,,,,0,,,,,,"When the instance manager call the onGet and onSet methods on fields interceptors, the pojo object parameter is set to `null`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,328811,,,Tue May 21 08:59:20 UTC 2013,,,,,,0|i1kqbr:,329153,,,,,,,,21/May/13 08:59;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in DirectoryWatcher.bundleChanged,FELIX-4071,12648435,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,tomnelson178,tomnelson178,20/May/13 13:29,17/Mar/15 06:57,14/Mar/19 02:48,06/Dec/13 11:04,fileinstall-3.2.6,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,Seems to be a variation of FELIX-3416 which is declared fixed but that seems not the case.  Occurred while removing files from the directory.  currentManagedArtifacts is a shared resource in a HashMap  perhaps ConcurrentHashMap should be used.,Red Hat 6.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-06 11:04:23.698,,,no_permission,,,,,,,,,,,,328790,,,Fri Dec 06 11:04:23 UTC 2013,,,,,,0|i1kq73:,329132,,,,,,,,"06/Dec/13 11:04;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java
Committed r1548487
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Reduce or eliminate use of States in command pattern,FELIX-4070,12648335,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,19/May/13 06:15,15/Oct/13 23:40,14/Mar/19 02:48,15/Oct/13 23:39,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"While it initially seems like a good idea, the idea of the state using the command pattern doesn't work very well as the states don't actually exist.  For instance a component can be disabled but active after you call disable but before the asynchronous deactivate happens.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,328691,,,2013-05-19 06:15:24.0,,,,,,0|i1kplb:,329034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ConcurrentModificationException in ServiceFactoryComponentManager,FELIX-4069,12648244,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,ajpurkiss,ajpurkiss,17/May/13 20:15,15/Oct/13 23:39,14/Mar/19 02:48,19/May/13 01:59,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"During startup of our application that is heavily dependant on DS and felix we occasionally see the following error:

ERROR: Bundle DwsCoreImpl.DwsCoreLogProviderImpl [37] EventDispatcher: Error during dispatch. (java.util.ConcurrentModificationException)
java.util.ConcurrentModificationException
        at java.util.IdentityHashMap$IdentityHashMapIterator.nextIndex(IdentityHashMap.java:732)
        at java.util.IdentityHashMap$KeyIterator.next(IdentityHashMap.java:822)
        at org.apache.felix.scr.impl.manager.ServiceFactoryComponentManager.invokeBindMethod(ServiceFactoryComponentManager.java:204)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:402)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3423)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:660)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:644)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:688)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1481)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:550)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:261)
        at org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:328)
        at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:158)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:113)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:261)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:179)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:722)
FrameworkEvent ERROR
java.util.ConcurrentModificationException
        at java.util.IdentityHashMap$IdentityHashMapIterator.nextIndex(IdentityHashMap.java:732)
        at java.util.IdentityHashMap$KeyIterator.next(IdentityHashMap.java:822)
        at org.apache.felix.scr.impl.manager.ServiceFactoryComponentManager.invokeBindMethod(ServiceFactoryComponentManager.java:204)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:402)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3423)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:660)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:644)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:688)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1481)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:550)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:261)
        at org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:328)
        at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:158)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:113)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:261)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:179)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:722)


Looking at the ServiceFactoryComponentManager we see there is no protection around the iteration over components which makes it no surprise that the code is not thread safe and is suffering from concurrent modification. Although most of our system seems to be working this exception at startup is cause for wider concern on how thread safe the code is and if later on when we have even more services we will start seeing bigger issues that mean ditching scr and using some other solution.",Windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-19 01:59:57.187,,,no_permission,,,,,,,,,,,,328600,,,Thu May 23 18:12:15 UTC 2013,,,,,,0|i1kp1b:,328944,,,,,,,,"19/May/13 01:59;djencks;This should be fixed in rev 1484207.  Please try it out and let us know.

We don't have any tests for the ServiceFactory functionality -- I haven't figured out a good way to create enough bundles to test it -- so any feedback you can give would be really useful.","21/May/13 19:27;ajpurkiss;The error does not seem to occur and things seem ok at the moment although we will continue testing with this, I have not looked at the full change list from 1.6.2 to this so I am assuming all should be good else where. Is there a eta on when this might make it to an official update? On a side not I had to skip the unit tests on my dev box when doing the build as I got a build failure during the tests . I have not looked into the test failure to see what is going on but for your information my dev box was saying:

[org.apache.felix.scr.integration.components.concurrency.C] (exit)
log level: 4 D=13:20:10,796 T=Thread[Thread-4,5,main]: [org.apache.felix.scr.int
egration.components.concurrency.C(21310)] Unset and deconfigured implementation
object for component org.apache.felix.scr.integration.components.concurrency.C i
n deleteComponent for reason Component disabled
log level: 4 D=13:20:10,796 T=Thread[Thread-4,5,main]: [org.apache.felix.scr.int
egration.components.concurrency.C(21310)] Deactivating dependency managers
log level: 4 D=13:20:10,796 T=Thread[Thread-4,5,main]: [org.apache.felix.scr.int
egration.components.concurrency.C(21310)] Disabling dependency managers

Results :

Tests run: 17, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8:16.128s
[INFO] Finished at: Tue May 21 13:27:10 EDT 2013
[INFO] Final Memory: 12M/247M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-failsafe-plugin:2.
12:integration-test (default) on project org.apache.felix.scr: Execution default
 of goal org.apache.maven.plugins:maven-failsafe-plugin:2.12:integration-test fa
iled: The forked VM terminated without saying properly goodbye. VM crash or Syst
em.exit called ? -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e swit
ch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please rea
d the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutio
nException","23/May/13 18:12;ajpurkiss;build failure was tracked down to not providing maven with enough memory

thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid warnings when using @SlingServlet and @SlingFilter annotations,FELIX-4063,12647301,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,jsedding,jsedding,13/May/13 14:01,06/Jun/13 11:20,14/Mar/19 02:48,14/May/13 11:16,scr annotations 1.9.2,,,,,,scr annotations 1.9.4,,,,,,,SCR Tooling,,,,,,0,,,,,,"FELIX-4033 introduced build-time warning messages for private properties defined for components with metatype = false.

The @SlingServlet and @SlingFilter annotations set several properties to be private, thus causing warnings like the following to be reported if metatype = false (the default value).

[WARNING] /path/TheServlet.java [0:0]: Property sling.servlet.methods in class TheServlet is set as private. This is redundant as no metatype will be generated.",,,,,,,,,,,,,,,,,,,,13/May/13 14:02;jsedding;FELIX-4063.patch;https://issues.apache.org/jira/secure/attachment/12582930/FELIX-4063.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-13 15:34:10.767,,,no_permission,,,,,,,,,,,,327657,,,Tue May 14 11:16:07 UTC 2013,,,,,,0|i1kj7r:,328001,,,,,,,,13/May/13 14:02;jsedding;The attached patch makes properties private only if metatype = true. This avoids warnings to be generated.,"13/May/13 15:34;cziegeler;Thanks for your patch, Julian
I think, if no component should be generated by @SlingServert/SlingFilter than the properties should be set to private as otherwise, when applying this patch this will be public
In that case of course, if the additional component is not setting metatype to true, the warning will be printed. - We could also check for a component tag in that case, but that would only work if the component tag is scanned before these two and that would add some uncertainty.","14/May/13 06:28;cziegeler;I've applied a modified version of your patch, which takes into account whether the component information is generated or not. WDYT?","14/May/13 11:07;jsedding;Your change is slightly better than my patch, this looks good to me.

I think this will still create warnings for the following:
@SlingServlet(generateComponent = false, resourceTypes = { ""foo/bar"" })
@Component(metatype = false)

In order to get around this, I think we would need to put more logic into ClassDescription and delay the descision whether properties are made private or not.

Anyway, I think this is good enough for now. Thanks for the quick resolution.","14/May/13 11:16;cziegeler;Yes, this will still generate a warning and yes this would need some more logic; I was thinking of adding a marker flag on a property if it is auto-generated; but I think it's not really worth the effort now as this would require API additions etc.
Thanks for your feedback, I'll set this to resolved",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertyType password has a wrong type (passwort),FELIX-4058,12646606,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,08/May/13 13:00,06/Jun/13 11:19,14/Mar/19 02:48,08/May/13 13:04,maven-scr-plugin-1.11.0,maven-scr-plugin-1.12.0,scr ant task 1.5.0,scr ant task 1.6.0,scr generator 1.5.0,scr generator 1.6.0,maven-scr-plugin 1.13.0,scr ant task 1.7.0,scr generator 1.7.0,,,,,SCR Tooling,,,,,,0,,,,,,The enum for the password has a type which leads to an error if is this type is used in an annotation,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,326964,,,Wed May 08 13:04:57 UTC 2013,,,,,,0|i1kenr:,327308,,,,,,,,08/May/13 13:04;cziegeler;Corrected the typo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] Use Findbugs, and fix located problems",FELIX-4057,12646556,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,08/May/13 05:11,15/Oct/13 23:38,14/Mar/19 02:48,15/Oct/13 23:38,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,Lets use the findbugs plugin and fix the problems it finds.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,326914,,,2013-05-08 05:11:38.0,,,,,,0|i1kecv:,327259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Component instance unset but remains in Active state,FELIX-4055,12646481,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,07/May/13 19:06,15/Oct/13 23:37,14/Mar/19 02:48,15/Oct/13 23:37,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We observed something very odd with rev 1467353.  We have a delayed component that is no longer used, so (I believe) the framework calls ungetService and we dispose of the implementation object.  However it looks like the component remains in the active state and subsequent calls to getService return null.

Evidence from the logs:

(using component): Deactivating dependency managers
(peculiar component) getting deactivate: deactivate
...
Unset and deconfigured implementation object for component *** in deleteComponent for reason Unspecified
... 500 milliseconds later ...
This thread collected dependencies
getService won collecting dependencies, proceed to creating object. (returns null).

AFAICT the ungetService goes through this code:

        void ungetService( ImmediateComponentManager dcm )
        {
            dcm.deleteComponent( ComponentConstants.DEACTIVATION_REASON_UNSPECIFIED );
            if ( dcm.enabled )
            {
                dcm.changeState( Registered.getInstance() );
            }
        }

which suggests that perhaps the enabled state is false.  This should have produced a state change and in particular a service unregistration, and there is no code that would be disabling any of the components.

However we got into this state, there appears to be an over-reliance on states in getService that is easy to fix and appears to be harmless, if there is no implementation object we can just use Registered.getInstance() to create it rather than state().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,326839,,,2013-05-07 19:06:25.0,,,,,,0|i1kdw7:,327184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use current factory version to generate instance name if required,FELIX-4054,12646271,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,06/May/13 18:59,28/May/13 04:12,14/Mar/19 02:48,06/May/13 19:01,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"When two factories of different versions are installed, the unique name generation should use the factory version if a conflict is detected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-06 22:23:30.377,,,no_permission,,,,,,,,,,,,326629,,,Tue May 28 04:12:22 UTC 2013,,,,,,0|i1kclr:,326974,,,,,,,,06/May/13 19:01;clement.escoffier;Fixed in trunk,"06/May/13 22:23;pierre.bourret;Fix confirmed (trunk r1479678) :

Got 2 factories with the same name ""BarImpl"" and 2 different versions : null (no version set) and ""2.0.0""

First instance created with ""null"" factory is named : ""BarImpl-0""
First instance created with ""2.0.0"" factory is named ""BarImpl-0-2.0.0""
(No instance name is provided for these 2 creations, to force name generation)

Before the fix, the second instance creation failed because of a generated name conflict (both were ""BarImpl-0"")",28/May/13 04:12;clement.escoffier;Fixed in the iPOJO 1.10.0 runtime,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid @StaticServiceProperty to be used on classes,FELIX-4053,12646211,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,06/May/13 13:19,28/May/13 04:12,14/Mar/19 02:48,06/May/13 13:26,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"The @StaticServiceProperty annotation is made to be used like this:


    @Component
    @Provides(properties = {
         @StaticServiceProperty(name=""property"", value=""value"", type = ""java.lang.String"")
    })
    @Instantiate(name=""instanceWithProperties"")
    public class MyComponent { 
        //...
    }

It cannot be used on classes directory (as it's attached to a provided service). To avoid this mistake, we should set the `target` of the annotation to {}.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,326569,,,Tue May 28 04:12:21 UTC 2013,,,,,,0|i1kc8f:,326914,,,,,,,,"06/May/13 13:26;clement.escoffier;Fixed in trunk.
The @StaticServiceProperty annotation is now set to be only using in complex type.",28/May/13 04:12;clement.escoffier;Fixed in the iPOJO 1.10.0 runtime,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Instance declaration not created correctly when using @Instantiate if the @Component specifies a name,FELIX-4052,12646201,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,06/May/13 12:24,05/Jul/13 12:47,14/Mar/19 02:48,06/May/13 12:29,ipojo-manipulator-1.8.6,,,,,,ipojo-manipulator-1.10.0,,,,,,,iPOJO,,,,,,0,,,,,,"The instance declaration is incorrect when a component is using the ""name"" attribute and an instance is declared using the @Instantiate annotation such as in:

    @Component(name=""my-custom-name)
    @Instantiate
    public class MyComponent {
        //...
    }

The instance is declared by is looking for a factory with the component's classname (the default) as factory name, and so the declaration is never bound. In this case the instance must look for the factory with the specified name.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,326559,,,Tue May 28 04:10:21 UTC 2013,,,,,,0|i1kc67:,326904,,,,,,,,06/May/13 12:29;clement.escoffier;Fixed in trunk,28/May/13 04:10;clement.escoffier;Fixed in the 1.10.0 release of the iPOJO manipulator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Named dependencies are not injected if new dependencies are added at init phase.,FELIX-4050,12646186,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,tuomas_kiviaho,tuomas_kiviaho,06/May/13 09:46,22/Jul/14 08:12,14/Mar/19 02:48,22/Jul/14 08:12,dependencymanager-3.1.0,,,,,,dependencymanager.runtime-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"Spec says that ""In the Init method, you are yet allowed to add some additional dependencies (but using the API).""

I guess this means that I am allowed to call Component.add(). This leads to state transition for instance when new service dependency is added since it's started right away because component is already instantiated at this point. Component.dependencyAvailable() is called if service tracker finds a match right away and this in turn starts the state change calculation.

Problem is that State uses components current instantiated status to determinate whether it is bound or not and not the status what the component was given to the activateService() method. State change calculation transitions to bound state prematurely because component is now instantiated. All required dependencies are available, because component is still unaware of forthcoming named dependencies at this point.

I suggest that some sort of placeholder dependencies are used which the named dependencies will replace when they are created/configured. This also approach also preserves the order in which dependencies were actually added to the component. In the future there could be a new is/SetActive property to DependencyActivation which could be used to turn on/off an already added dependencies. Then named dependencies could be used as such instead of placeholders and user could even configure them directly.",,,,,,,,,,,,,,,,,,,,23/May/13 07:03;pderop;FELIX-4050.patch;https://issues.apache.org/jira/secure/attachment/12584451/FELIX-4050.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-13 17:12:12.03,,,no_permission,,,,,,,,,,,,326544,,,Tue Jul 22 08:12:08 UTC 2014,,,,,,0|i1kc2v:,326889,,,,,,,,"08/May/13 05:30;tuomas_kiviaho;I did some proof-of-concept an found out that current implementations themselves could function as placeholder thus turning it to a dependency that has been added to the component prematurely. There dependencies only track components calling such methods as start/stop (and invokeAdded/invokeRemoved) in order to postpone activation until appropriate time when named dependency is fully configured (finally figured out what setInstanceBound was actually for :-) ). 

I had to mark these components available until activation occurs so that init phase would not be blocked from being triggered. Other that that the state machine seemed to cope well. One curious thing is that when component goes from zero to max in one state transition, it seems to skip startTrackingRequired and go straight to activateService. This effectively skips calls to dependency activation start but luckily invokeAdded is called so that I could use it to keep track on interesting parties.","13/May/13 17:12;pderop;I'm not sure I fully understand the described issue.
May be you could attach a sample code reproducing the exact problem you are describing ?

In the mean time, here is more information about the @Init annotation, and also about the @ServiceDependency used with a ""name"" attribute:

1- @Init annotation:
==============

From the method annotated with @Init, you are allowed to dynamically add dependencies using the API.
For instance, assuming that S depends on S1/S2/S3, you can then declare ""S"" as in the following example:

@Component
public class S {
    
    // required dependency on service ""S1""
    @ServiceDependency
    S1 _s1;
    
    // S2, which dependency is dynamically added in init() method
    S2 _s2;

    // S3, which dependency is dynamically added in init() mehtod
    S3 _s3;
    
    // Inject the API, used by our init() method
    @Inject
    org.apache.felix.dm.Component _c;
    
    // Atomically adds dependencies on S2/S3
    @Init
    void init() {
        List l = new ArrayList();
        l.add(_c.getDependencyManager().createServiceDependency()
                .setService(S2.class)
                .setRequired(true)
                .setAutoConfig(""_s2"")
                .setInstanceBound(true));
        l.add(_c.getDependencyManager().createServiceDependency()
                .setService(S3.class, ""(foo=bar)"")
                .setRequired(true)
                .setAutoConfig(""_s3"")
                .setInstanceBound(true));
        
         _c.add(l);
    }
    
    @Start
    void start() {
       System.out.println(""started: s2="" + _s2 + "", s3="" + _s3); 
    }
}


In the init() method, notice the following important points:

- S2/S3 dependencies are added atomically, using Component.add(List) method. 
When more than one dependency is added from the init() method, it is better to add them using a List, because List of Dependencies are
added atomically: doing so prevent the @Start method to be called if the first dependency (S2) is available before we add the last dependency S3.

Here, the @Start method will be called only after S2 and S3 dependencies have been added and are available.

- the S2/S3 extra dependencies are ""instance bound"": it means that even if S2 and/or S3 are not available, then ""S"" component won't be
destroyed immediately.

You can refer to the following post, where Marcel explains ""instance bound"" dependencies:

   http://www.mail-archive.com/users@felix.apache.org/msg09314.html

2- Named @ServiceDependencies
=========================

Now, let's describe when to declare a @ServiceDependency with a ""name"" attribute:

""named"" dependencies are only available using the annotations, not using the API.
When you declare a @ServiceDependency with a ""name"" attribute, you can configure its 'required' flag and its filter by returning a Map from the @Init method.

For instance, assuming that you want to configure the S2 'required' flag and also its filter from ConfigAdmin, then you can do it like this:

@Component
public class S {
    // Config Admin properties, where the S2 'required' flag and filter is configured
    private Dictionary config; 
    
    // Inject our configuration
    @ConfigurationDependency(pid=""MyPid"")
    void configure(Dictionary config) {
         this.config = config;
    }

    // S2 dependency, whose 'required' flag and filter is dynamically configured from init() method.
    @ServiceDependency(name=""S2"")
    S2 s2;
    
    /**
     * Configure our ""S2"" dependency, using the already injected configuration.
     * The returned Map will be used to configure our ""S2"" Dependency (see above).
     * The convention is: each Map keys must be prefixed with a dependency name, and must then
     * be suffixed with either ""filter"" (for the dependency filter) or ""required"" (for the dependency 'required' flag).
     */
    @Init
    Map init() {
        return new HashMap() {{
            put(""S2.filter"", m_config.get(""filter""));
            put(""S2.required"", m_config.get(""required""));
        }};
    }

    @Start
    void start() {
       System.out.println(""started: s2="" + _s2 + "", s3="" + _s3); 
    }
}

You can refer to the following documentation for more information about named dependencies:

       http://felix.apache.org/site/apache-felix-dependency-manager-using-annotations-lifecycle.html

Please, check ""Dynamic Dependency Configuration"" section.


by the way, I just saw that dependencymanager documentation is somewhat broken from URL:
   http://felix.apache.org/documentation/subprojects/apache-felix-dependency-manager/apache-felix-dependency-manager-using-annotations.html

Please refer to the old site for dm annotation documentation:
   http://felix.apache.org/site/apache-felix-dependency-manager-using-annotations.html

(I will fix the doc from http://felix.apache.org/documentation asap).
","14/May/13 10:48;tuomas_kiviaho;Thanks for the tips and quick response,

I've worked around this case already, but in any case here's a formal example (which is combination of both use cases) that will break as explained above. 

public class S {

    @Inject
    org.apache.felix.dm.Component _c;

    S2 _s2;

    private Dictionary config; 
    
    @ConfigurationDependency(pid=""MyPid"")
    void configure(Dictionary config) { this.config = config; }

    @ServiceDependency(name=""S#"")
    S3 s3;

    @Init
    Map init() {
        _c.add((_c.getDependencyManager().createServiceDependency()
                .setService(S2.class)
                .setRequired(true)
                .setAutoConfig(""_s2"")
                .setInstanceBound(true));
        return new HashMap() {{
                put(""S3.filter"", m_config.get(""filter""));
                put(""S3.required"", m_config.get(""required""));
        }};
    }

}

Here the a state change calculation will occur at _c.add(...) which will transition in turn transition the state prematurely from TRACKING_OPTIONAL to BOUND because name dependency because named dependencies are added behind the scenes after init() method completes. This only happens when all required dependencies are available at the time of state change calculation. 

I could also be mess up similarly the state change calculation of the first use case just by separating the one _c.add(...) call to two separate calls.","23/May/13 06:54;pderop;Ah Ok ! thanks; I understand now.

The component state calculation is messing up if init adds some *available* dependencies using the API and if init also returns a map for configuring other named annotated dependencies. 
It may even also mess up if no map is returned and if several dependencies are added using the API, but not atomically (using separate Component.add(Dependency) method calls). But in the latter case, multiple dependencies should be added atomically using Component.add(List) single method call. 

Anyway, as you explained, adding the dependencies with the API may change the state to BOUND state *before* the runtime possibly configures named dependencies after the init method is called (see ServiceLifecycleHandler.java, in the runtime).

All this is an edge case I did not expect, because dependencies are usually declared either using annotations or using the programmatic API, but not using a mix of annotations + code using directly the API (Component.add() method).

Ok, I think the easiest way to fix this issue with minimal impact consists in adding an hidden ""toggle"" dependency, which allows to activate all dependencies *after* init method is called and also *after* all named dependencies are possibly configured.

The patch is ready and seems to work, but I prefer to write and commit a test about this issue because applying the patch.
",23/May/13 07:03;pderop;Added a patch (in the dm runtime) which seems to resolve this issue. Will commit it after having committed a test case for this issue.,"24/May/13 17:48;pderop;Committed a testcase in  src/test/java/org/apache/felix/dm/test/annotation/Felix4050Test.java
Also Committed a candidate fix for this issue in the runtime (revision r1486131).
","24/May/13 17:49;pderop;I think the issue can be closed (feel free to reopen if necessary).
",22/Jul/14 08:12;pderop;reopen in order to set fix-for version to 3.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR-Plugin creates invalid manifest-header on incremental-build (eclipse-IDE-integration),FELIX-4049,12645977,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,tnarake,tnarake,03/May/13 14:52,06/Jun/13 11:21,14/Mar/19 02:48,14/May/13 06:30,maven-scr-plugin-1.12.0,,,,,,maven-scr-plugin 1.13.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"With FELIX-4023 fixed, we're still seeing bogus behavior of the scr-plugin when running in the context of m2e.
Steps to reproduce:

- create a maven project using bundle-plugin und scr-plugin 1.12 in eclipse/m2e
- create two @Component annotated classes
- check that ""Build automatically"" is enabled in eclipse workspace
- force a clean rebuild of the project (Project menu -> Clean...) and check the generated manifest file
-- Service-Component header references both component descriptor files
- modify one of the @Component classes and safe
-- this triggers an incremental build of the project
- check the manifest file again
-- Service-Component header only references the descriptor xml of the modified class

Thus, the manifest file is broken after the incremental build.",Eclipse 4.2.2 w/ m2e 1.3.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-05 14:46:18.28,,,no_permission,,,,,,,,,,,,326336,,,Sun May 05 14:46:18 UTC 2013,,,,,,0|i1kasn:,326681,,,,,,,,"05/May/13 14:46;cziegeler;I've committed a potential fix in rev 1479334 - instead of using the list from scr generator which contains only the descriptors for the changed files, the plugin now simply scans the output directory and takes all available .xml files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Requires handler does not fail when no specification can be found,FELIX-4048,12645965,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,sauthieg,sauthieg,03/May/13 13:43,28/May/13 04:12,14/Mar/19 02:48,06/May/13 18:00,,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"The requires handler is designed to track services using their service interfaces (specification).
If no specification is found, there is no failure at deploy time, but nothing happen during execution.
that's a silent failure :)

iPOJO should throw an Exception and express the fact that the configuration is invalid
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-06 18:00:05.056,,,no_permission,,,,,,,,,,,,326324,,,Tue May 28 04:12:22 UTC 2013,,,,,,0|i1kapz:,326669,,,,,,,,06/May/13 18:00;clement.escoffier;Fixed in trunk,28/May/13 04:12;clement.escoffier;Fixed in the iPOJO 1.10.0 runtime,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to create empty or single valued String array property,FELIX-4047,12645958,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,ethomasjoseph,ethomasjoseph,03/May/13 12:37,06/Jun/13 11:20,14/Mar/19 02:48,14/May/13 06:29,maven-scr-plugin-1.12.0,maven-scr-plugin-1.8.0,,,,,scr annotations 1.9.4,,,,,,,SCR Tooling,,,,,,0,,,,,,"There is no way that I can declare an empty or a single valued String array property.

@Property(label=""Multivalued Property"", value={""only-single-value""})
private static final String MV_PROPERTY= ""multivalued.property"";


OR

@Property(label=""Multivalued Property"", value={""only-single-value""}, unbounded=PropertyUnbounded.ARRAY)
private static final String MV_PROPERTY= ""multivalued.property"";

OR

@Property(label=""Multivalued Property"", value={""only-single-value""}, cardinality=N)
private static final String MV_PROPERTY= ""multivalued.property"";

All would generate the same DS XML file as:
<property name=""multivalued.property"" value=""only-single-value""/>


As of now the only workaround is to declare an array with at-least two entries:

@Property(label=""Multivalued Property"", value={""only-single-value"", """"})
private static final String MV_PROPERTY= ""multivalued.property"";

OR

@Property(label=""Multivalued Property"", value={"""", """"})
private static final String MV_PROPERTY= ""multivalued.property"";",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-05 14:53:29.223,,,no_permission,,,,,,,,,,,,326317,,,Sun May 05 14:53:29 UTC 2013,,,,,,0|i1kaof:,326662,,,,,,,,"05/May/13 14:53;cziegeler;I've committed a potential fix in revision 1479335, 

@Property(label=""Multivalued Property"", value={""only-single-value""}, cardinality=N) (with N > 1)
or
@Property(label=""Multivalued Property"", value={""only-single-value""}, unbounded=PropertyUnbounded.ARRAY)

should work now",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inner class manipulation fails with expanded frames,FELIX-4046,12645860,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,02/May/13 19:16,02/May/13 19:48,14/Mar/19 02:48,02/May/13 19:48,,,,,,,ipojo-manipulator-1.10.0,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,FELIX-3539,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,326219,,,Thu May 02 19:18:44 UTC 2013,,,,,,0|i1ka2n:,326564,,,,,,,,"02/May/13 19:18;sauthieg;Same issue, same fix",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Properties starting with . should not be propagated,FELIX-4041,12645230,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,29/Apr/13 13:24,28/May/13 04:12,14/Mar/19 02:48,06/May/13 13:27,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"To be conform with the configuration admin, properties starting with . should not be propagated to the service registrations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,325592,,,Tue May 28 04:12:21 UTC 2013,,,,,,0|i1k67j:,325937,,,,,,,,06/May/13 13:27;clement.escoffier;Fixed in trunk,28/May/13 04:12;clement.escoffier;Fixed in the iPOJO 1.10.0 runtime,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.felix.http.host ignored,FELIX-4038,12644947,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,paulbakker,paulbakker,26/Apr/13 21:49,01/Aug/15 09:22,14/Mar/19 02:48,11/Nov/13 12:46,http-2.2.0,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"It looks like the org.apache.felix.http.host property is ignored, both when passed as system property and using config admin.

For example the following configuration should set both the host and the port. The exception shows the port being set correctly, but the host trying to bind to 0.0.0.0.

I can't really explain why this happens when looking at the code (the property should be picked up as far as I can see), so it might be something broken in Jetty itself for example.

{code}
java -Dorg.osgi.service.http.port=8082 -Dorg.apache.felix.http.host=127.4.144.129 -jar example.jar

013.04.26 17:32:36 WARNING - Bundle: org.apache.felix.http.jetty - failed Server@1c0d32e: java.net.SocketException: Permission denied
2013.04.26 17:32:36 WARNING - Bundle: org.apache.felix.http.jetty - failed SelectChannelConnector@0.0.0.0:8082: java.net.SocketException: Permission denied
2013.04.26 17:32:36 INFO - Bundle: org.apache.felix.http.whiteboard - Detected extended HttpService. Filters enabled.
2013.04.26 17:32:36 INFO - Bundle: org.apache.felix.http.jetty - [org.osgi.service.http.HttpService, org.apache.felix.http.api.ExtHttpService] - ServiceEvent REGISTERED
2013.04.26 17:32:36 INFO - Bundle: org.apache.felix.http.jetty - [org.osgi.service.http.HttpService, org.apache.felix.http.api.ExtHttpService] - ServiceEvent UNREGISTERING
2013.04.26 17:32:34 ERROR - Bundle: org.apache.felix.http.jetty - Exception while initializing Jetty. - java.net.SocketException: Permission denied
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:344)
	at sun.nio.ch.Net.bind(Net.java:336)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:199)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)
	at org.mortbay.jetty.nio.SelectChannelConnector.open(SelectChannelConnector.java:216)
	at org.mortbay.jetty.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:315)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.Server.doStart(Server.java:235)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.apache.felix.http.jetty.internal.JettyService.initializeJetty(JettyService.java:164)
	at org.apache.felix.http.jetty.internal.JettyService.startJetty(JettyService.java:115)
	at org.apache.felix.http.jetty.internal.JettyService.run(JettyService.java:290)
	at java.lang.Thread.run(Thread.java:722)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-11 12:46:08.601,,,no_permission,,,,,,,,,,,,325309,,,Mon Nov 11 12:46:08 UTC 2013,,,,,,0|i1k4gn:,325654,,,,,,,,"11/Nov/13 12:46;jajans;I think this might already be resolved in the HTTP v2.2.1 release. I've tested it with the trunk version (the upcoming v2.2.2) and with this version, Jetty correctly binds to the requested host/IP address.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URL parsing is not compatible with ConfigurationRender plugin,FELIX-4037,12644793,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,26/Apr/13 08:46,06/Jun/13 15:35,14/Mar/19 02:48,26/Apr/13 09:03,,,,,,,inventory-1.0.0,,,,,,,Inventory,,,,,,0,,,,,,"The url parsing is not compatible to the ConfigurationRender plugin which was previously responding to all requests.
Requests like /config/{something}{.txt|.nfo|.zip} where handled like this:
If {something} was a valid label of a plugin, only this plugin was rendered
If not, all plugins where rendered.

Currently the new behaviour is:
All plugins are rendered except if .nfo is used, then a 404 is thrown

For backwards compatibility we should support the old way as well",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-06 15:35:00.405,,,no_permission,,,,,,,,,,,,325156,,,Thu Jun 06 15:35:00 UTC 2013,,,,,,0|i1k3iv:,325501,,,,,,,,"26/Apr/13 09:03;cziegeler;Fixed in revision 1476116

Like with the old plugin from the web console, a request to config/{something}.nfo return the html output of that status printer. If none with the name exists 404 is returned.
For all other extensions (txt and zip), either the result of the specified printer is returned or if it doesn't exist, the output for all is returned.",06/Jun/13 15:35;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UPnP Plugin small refactoring,FELIX-4032,12644303,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,24/Apr/13 07:56,05/Jan/15 09:47,14/Mar/19 02:48,24/Apr/13 08:06,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,"UPnP Plugin needs small refactoring because now it's hard to read, and not efficient. Details:

- ControlServlet.hex should go as Hex.encode()
- static methods ControlServlet.<something>ToJson should go in separate Serializer class
- now only icons are cached, we should also cache devices, now to render all device you do a loop through all service references. And when you open the plugin page, all devices are rendered. So if you have 80 devices you have 80 * 80 loops!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,324670,,,Mon Jan 05 09:47:47 UTC 2015,,,,,,0|i1k0iv:,325015,,,,,,,,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Respond better to InterruptedException,FELIX-4031,12644183,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,23/Apr/13 19:43,15/Oct/13 23:36,14/Mar/19 02:48,07/May/13 05:03,scr-1.8.0,scr ds annotations 1.2.2,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Most of the locks in ds have a timeout.  After reading about interruption and thinking I think that the proper response to an InterruptedException is to keep waiting for the timeout to expire, but give up if interrupted a second time.  The interruption is supposed to be a hint to not continue forever, but the timeout is already doing that for us.

We could track the time when we start the lock and only wait until the original timeout would have expired, but I think this would slow down normal operations too much for very minimal gain.

In any case we should reset the interrupted flag.  (already done in rev 1470394)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,324550,,,Tue May 07 05:03:11 UTC 2013,,,,,,0|i1jzs7:,324895,,,,,,,,07/May/13 05:03;djencks;Fixed in rev 1471172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated metatype file contains all metatype infos,FELIX-4030,12644076,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,23/Apr/13 09:33,29/Apr/13 09:33,14/Mar/19 02:48,23/Apr/13 09:39,maven-scr-plugin-1.11.0,scr ant task 1.5.0,scr generator 1.5.0,,,,maven-scr-plugin-1.12.0,scr ant task 1.6.0,scr generator 1.6.0,,,,,SCR Tooling,,,,,,0,,,,,,"When a separate file for each metatype is generated (default), each file contains all metatype info",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,324443,,,Tue Apr 23 09:39:08 UTC 2013,,,,,,0|i1jz4f:,324788,,,,,,,,23/Apr/13 09:39;cziegeler;Fixed in revision 1470863 - the write method was iterating over all descriptions instead of using the provided filtered list,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The iPOJO Ant task requires org.objectweb.asm.tree,FELIX-4027,12643921,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,22/Apr/13 12:08,28/May/13 04:10,14/Mar/19 02:48,24/Apr/13 14:49,ipojo-manipulator-1.8.6,,,,,,ipojo-manipulator-1.10.0,,,,,,,iPOJO,,,,,,0,,,,,,We should embed this new dependency within the Ant task,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,324288,,,Tue May 28 04:10:21 UTC 2013,,,,,,0|i1jy6f:,324633,,,,,,,,24/Apr/13 14:49;clement.escoffier;Fixed in trunk,28/May/13 04:10;clement.escoffier;Fixed in the 1.10.0 release of the iPOJO manipulator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InventoryPrinter must run on Java 1.4 plattforms (for embedded use),FELIX-4026,12642877,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,17/Apr/13 06:56,06/Jun/13 15:34,14/Mar/19 02:48,17/Apr/13 13:53,,,,,,,inventory-1.0.0,,,,,,,,,,,,,0,,,,,,"The new InventoryPrinter module currently compiles with the standard platform setup and uses Java 5 API. This prevents this bundle to run on Java 1.4 plattforms which are typically used on embedded systems.

We have to setup the module as follows:
  - compile for Java 1.4
  - make sure only Java 1.4 API is used",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,323290,,,Thu Jun 06 15:34:58 UTC 2013,,,,,,0|i1js0n:,323635,,,,,,,,"17/Apr/13 13:53;fmeschbe;Implemented the Java 1.4 API check and Java 1.4 class file generation in Rev. 1468913

Also replaced all non-Java 1.4 API use by Java 1.4 API.",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR-Plugin not working reliably in m2e 1.3.1,FELIX-4023,12642257,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,tnarake,tnarake,12/Apr/13 15:39,23/Apr/15 13:30,14/Mar/19 02:48,15/Apr/13 06:45,maven-scr-plugin-1.11.0,,,,,,maven-scr-plugin-1.12.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"The default lifecycle-mapping assumed by m2e changed in version 1.3. see [1]. The default for runOnIncremental is now false and as the scr-plugin does not specify otherwise in it's embedded lifecycle-mapping descriptor, it no longer is invoked when the user edits source files inside eclipse. Only when a complete rebuild of the project is triggered the plugin is executed.

The embedded lifecycle-mapping should be changed to:
{code}
<action>
  <execute>
    <runOnIncremental>true</runOnIncremental>
  </execute>
</action>
{code}


[1] https://bugs.eclipse.org/bugs/show_bug.cgi?id=395433",Eclipse 4.2.2 w/ m2e 1.3.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-15 06:45:22.45,,,no_permission,,,,,,,,,,,,322671,,,Mon Apr 15 06:45:22 UTC 2013,,,,,,0|i1jo7b:,323016,,,,,,,,"15/Apr/13 06:45;cziegeler;Thanks for your patch, Timo - it's applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Deleting a configuration is supposed to deactivate the component unconditionally,FELIX-4022,12642071,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,11/Apr/13 17:03,06/Aug/14 02:21,14/Mar/19 02:48,03/May/14 01:12,scr-1.8.0,,,,,,scr-1.8.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Spec 112.7.1 says if a configuration is deleted the component it configures must be deactivated (and presumably attempt reactivation if it's still satisfied).  Doesn't make sense to me, but there it is.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-12 05:23:48.038,,,no_permission,,,,,,,,,,,,322485,,,Wed Aug 06 02:21:50 UTC 2014,,,,,,0|i1jn1z:,322830,,,,,,,,"12/Apr/13 05:23;fmeschbe;Yes, it says that in the first section and it sounds wrong.

I think it is more like that configuration deletion should be handled like configuration update which may involve reactivation of the component without the configuration. See the last sentence in the section:

""SCR must attempt to satisfy the component configuration with the updated component properties.""

Unless the current implementation is completely wrong, I doubt we should do anything.

If at all, you might create an OSGi bug asking for clarification or an errata.","12/Apr/13 06:03;djencks;there's a tck test for this behavior which is how I caught it (first I thought the tck was wrong, and it does have a problem but not this).  I think the required behavior is dumb and probably due to lack of thought about wording in the spec.  I think an osgi bug might be a good idea.","07/May/13 04:58;djencks;Discussion in an osgi bug indicates our behavior is probably correct and the spec misleading, incomplete, or wrong.","15/Oct/13 23:51;djencks;Our behavior is correct, the spec needs to be clarified.","17/Jan/14 19:01;djencks;The spec committee now appears to think that the ""correct"" behavior is only for namespace >= 1.3 and the ""wrong"" behavior is needed for namespace 1.1. and 1.2.  I plan to add a DS configuration flag that can turn on ""correct"" behavior for namespace 1.1. and 1.2.",03/May/14 01:09;djencks;I see Felix already changed the behavior once on this.,"03/May/14 01:12;djencks;Now spec compliant.  Silly deactivate-reactivate behavior for pre 1.3 namespaces unless you use the felix extension attribute
deleteCallsModify=true.   rev  1591423.",06/Aug/14 02:21;djencks;closing remaining 1.8.2 resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven-ipojo-plugin fails on WAR packaging,FELIX-4021,12642015,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,dellekappa,dellekappa,11/Apr/13 11:09,08/Oct/13 17:19,14/Mar/19 02:48,04/Jul/13 14:33,ipojo-manipulator-1.8.2,ipojo-manipulator-1.8.4,ipojo-manipulator-1.8.6,,,,ipojo-manipulator-1.11.0,,,,,,,iPOJO,,,,,,0,,,,,,"This is the pom.xml:

<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>
   
    <groupId>it.codin.test.osgi</groupId>
    <artifactId>service-gui</artifactId>
    <packaging>war</packaging>

    <name>service-gui WAB OSGi Bundle</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        ...
        <dependency>
            <groupId>org.apache.felix</groupId>
            <artifactId>org.apache.felix.ipojo.annotations</artifactId>
            <version>1.8.4</version>
        </dependency>
        ...
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>2.3.7</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>bundle-install</id>
                        <phase>install</phase>
                        <goals>
                            <goal>install</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                        <supportedProjectType>ejb</supportedProjectType>
                        <supportedProjectType>war</supportedProjectType>
                    </supportedProjectTypes>
                    <manifestLocation>${project.build.directory}/bundle</manifestLocation>
                    <instructions>
                        <Bundle-ClassPath>.,WEB-INF/classes,{maven-dependencies}</Bundle-ClassPath>
                        <!--Embed-Directory>WEB-INF/lib</Embed-Directory-->
                        <Embed-Dependency>*;scope=compile|runtime</Embed-Dependency>
                        <Embed-Transitive>true</Embed-Transitive>
                        <Export-Package/>
                        <Web-ContextPath>/wab</Web-ContextPath>
                    </instructions>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                    <configuration>
                        <archive>
                            <manifestFile>${project.build.directory}/bundle/MANIFEST.MF</manifestFile>
                        </archive>
                        <webResources>
                            <resource>
                                <directory>src/main/webapp</directory>
                            </resource>
                        </webResources>
                    </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-ipojo-plugin</artifactId>
                <version>1.8.4</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>ipojo-bundle</goal>
                            </goals>
                        </execution>
                    </executions>
            </plugin>
        </plugins>
    </build>

</project>


and this is the error produced:

Failed to execute goal org.apache.felix:maven-ipojo-plugin:1.8.4:ipojo-bundle (default) on project service-gui: Execution default of goal org.apache.felix:maven-ipojo-plugin:1.8.4:ipojo-bundle failed: Path 'META-INF/MANIFEST.MF' do not start with 'WEB-INF/classes/' -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-ipojo-plugin:1.8.4:ipojo-bundle (default) on project service-gui: Execution default of goal org.apache.felix:maven-ipojo-plugin:1.8.4:ipojo-bundle failed: Path 'META-INF/MANIFEST.MF' do not start with 'WEB-INF/classes/'
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default of goal org.apache.felix:maven-ipojo-plugin:1.8.4:ipojo-bundle failed: Path 'META-INF/MANIFEST.MF' do not start with 'WEB-INF/classes/'
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:110)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: java.lang.IllegalArgumentException: Path 'META-INF/MANIFEST.MF' do not start with 'WEB-INF/classes/'
	at org.apache.felix.ipojo.manipulator.store.mapper.WABResourceMapper.externalize(WABResourceMapper.java:42)
	at org.apache.felix.ipojo.manipulator.store.JarFileResourceStore.getExternalName(JarFileResourceStore.java:137)
	at org.apache.felix.ipojo.manipulator.store.JarFileResourceStore.accept(JarFileResourceStore.java:131)
	at org.apache.felix.ipojo.manipulator.metadata.AnnotationMetadataProvider.getMetadatas(AnnotationMetadataProvider.java:55)
	at org.apache.felix.ipojo.manipulator.metadata.CompositeMetadataProvider.getMetadatas(CompositeMetadataProvider.java:52)
	at org.apache.felix.ipojo.manipulator.Pojoization.pojoization(Pojoization.java:291)
	at org.apache.felix.ipojo.manipulator.Pojoization.pojoization(Pojoization.java:198)
	at org.apache.felix.ipojo.plugin.ManipulatorMojo.execute(ManipulatorMojo.java:236)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	... 20 more


the plugin fails too on version 1.8.2 and 1.8.6 but works fine on version 1.8.0 with the same configuration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-02 08:46:11.799,,,no_permission,,,,,,,,,,,,322429,,,Thu Jul 04 14:33:50 UTC 2013,,,,,,0|i1jmpj:,322774,,,,,,,,02/Jul/13 08:46;chrisie;Is there any workaround for this issue until it is fixed? It is actually a blocking issue when using WAR packaging since it affects all versions after 1.8.0 and we cannot use version 1.8.0 due to issue 2825 (https://issues.apache.org/jira/browse/FELIX-2825) which is marked as fixed in 1.8.2.,"02/Jul/13 10:21;sauthieg;Fixed in trunk
1.10.2-SNAPSHOT versions will contains the fix, please try and close if satisfied",02/Jul/13 12:07;chrisie;Thank you Guillaume. Could you please let me know when the next build of version 1.10.2-SNAPSHOT will be available on the maven repository?,"02/Jul/13 14:10;clement.escoffier;> Thank you Guillaume. Could you please let me know when the next build of version 1.10.2-SNAPSHOT will be available on the maven repository?

The new snapshot is deployed on apache.snapshots:
https://repository.apache.org/content/groups/snapshots/org/apache/felix/maven-ipojo-plugin/1.10.2-SNAPSHOT/","02/Jul/13 14:40;chrisie;I tested with the 1.10.2-SNAPSHOT version and the configuration described by Giulio in the issue description and now I get a NullPointerException when the ipojo plugin is executed. The stacktrace I get if I enable maven's debug output is the following:

[ERROR] Failed to execute goal org.apache.felix:maven-ipojo-plugin:1.10.2-SNAPSHOT:ipojo-bundle (default) on project webdesktop-impl: Execution default of goal org.apache.felix:maven-ipojo-plugin:1.10.2-SNAPSHOT:ipojo-bundle failed. NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-ipojo-plugin:1.10.2-SNAPSHOT:ipojo-bundle (default) on project webdesktop-impl: Execution default of goal org.apache.felix:maven-ipojo-plugin:1.10.2-SNAPSHOT:ipojo-bundle failed.
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default of goal org.apache.felix:maven-ipojo-plugin:1.10.2-SNAPSHOT:ipojo-bundle failed.
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:110)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: java.lang.NullPointerException
	at java.io.FilterOutputStream.write(FilterOutputStream.java:97)
	at org.apache.felix.ipojo.manipulator.store.JarFileResourceStore.close(JarFileResourceStore.java:179)
	at org.apache.felix.ipojo.manipulator.visitor.writer.ManipulatedResourcesWriter.visitEnd(ManipulatedResourcesWriter.java:76)
	at org.apache.felix.ipojo.manipulator.visitor.ManipulationAdapter.visitEnd(ManipulationAdapter.java:49)
	at org.apache.felix.ipojo.manipulator.Pojoization.pojoization(Pojoization.java:315)
	at org.apache.felix.ipojo.manipulator.Pojoization.pojoization(Pojoization.java:194)
	at org.apache.felix.ipojo.plugin.ManipulatorMojo.execute(ManipulatorMojo.java:236)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	... 20 more","04/Jul/13 12:37;sauthieg;Still not fixed, reopened","04/Jul/13 14:33;sauthieg;I used the provided POM as TestCase and finally got it working.
Snapshots should be published soon
Hopefully, you'll be able to try it tomorrow at last.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] A reference being unregistered between checking for references available and actual binding may get bound anyway,FELIX-4020,12641976,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,11/Apr/13 04:20,15/Oct/13 23:36,14/Mar/19 02:48,07/May/13 05:04,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I think the order of events is:
t1: collect dependencies to make sure component can be activated
t2. unregister required service in a single static reference
t1. create object binding the removed service object.

I don't know if this happens with other reference cardinalities/policies.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,322390,,,Tue May 07 05:04:55 UTC 2013,,,,,,0|i1jmgv:,322735,,,,,,,,07/May/13 05:04;djencks;Fixed in revs 1470393-1470397,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory Management Plugin does not handle unknown values properly,FELIX-4019,12641633,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,fmeschbe,fmeschbe,09/Apr/13 14:49,28/Feb/18 16:56,14/Mar/19 02:48,28/Feb/17 07:37,webconsole-memoryusage-plugin-1.0.4,,,,,,webconsole-memoryusage-plugin-1.0.8,,,,,,,Web Console,,,,,,0,,,,,,"Maximum and committed memory use of the Memory MBeans may return -1 if the value is unknown. The max value is used to calculate usage percentages which leads to wrong values if max is -1.

The plugin should account for -1 values as to be unknown and not calculate the percentages in these cases.",,,,,,,,,,,,,,,,,,,,09/Apr/13 14:50;fmeschbe;npr-2748.png;https://issues.apache.org/jira/secure/attachment/12577806/npr-2748.png,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-02-28 07:37:52.406,,,no_permission,,,,,,,,,,,,322049,,,Tue Feb 28 07:37:52 UTC 2017,,,,,,0|i1jkd3:,322394,,,,,,,,09/Apr/13 14:50;fmeschbe;Screenshot of wrong values,28/Feb/17 07:37;cziegeler;Fixed in rev 1784697,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"@ProviderType does not work (bnd ""provide:=true"" annotation?)",FELIX-4017,12641264,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,andrei.pozolotin,andrei.pozolotin,07/Apr/13 17:54,12/Jun/13 23:46,14/Mar/19 02:48,07/Apr/13 18:11,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"bnd needs update to 2.0 for @ProviderType to work.

see thread here: bnd ""provide:=true"" annotation?

https://groups.google.com/forum/?fromgroups=#!searchin/bndtools-users/bndtools%7Csort:date/bndtools-users/9fFwt0cNMpY/AoLQmhRRkckJ
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-07 18:11:17.454,,,no_permission,,,,,,,,,,,,321680,,,Sun Apr 07 18:52:11 UTC 2013,,,,,,0|i1ji33:,322025,,,,,,,,07/Apr/13 18:11;mcculls;Change already made several weeks ago in trunk - use 2.4.0-SNAPSHOT from https://repository.apache.org/content/repositories/snapshots/ or build from source.,"07/Apr/13 18:52;andrei.pozolotin;confirmed to work in private build, thank you.

https://github.com/barchart/barchart-maven-bundle-plugin",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
handleAspectAwareRemoved in ServiceDependencyImpl can cause a possible deadlock,FELIX-4014,12640724,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,uiterlix,uiterlix,uiterlix,04/Apr/13 08:41,22/Jul/14 08:05,14/Mar/19 02:48,03/Jun/13 11:56,,,,,,,dependencymanager-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"the handleAspectAwareRemoved invokes a callback method within a synchronization block. Since we don't know what will be going there this can cause (and in our case does cause) concurrency issues.

The fix would be to move the invoke out of the sync block.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,321183,,,Mon Jun 03 11:56:35 UTC 2013,,,,,,0|i1jf13:,321528,,,,,,,,03/Jun/13 11:56;uiterlix;fixed by moving the callback outside of the synchronized block.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect usage of ServiceTracker.size() in UPnP Plugin,FELIX-4013,12640516,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,03/Apr/13 13:53,05/Jan/15 09:47,14/Mar/19 02:48,03/Apr/13 13:55,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,"There seems to be a small problem with the tracking code especially with the following line (Activator.java):

if (tracker.size() <= 1 && plugin != null)

...
ServiceTrackerCustomizer.removedService() is supposed to be called AFTER the service is no longer tracked. So in that method the size must be already decremented. The code above will unregister the plugin if only one UPnP device left in the system and it wouldn't be accessible through the web console.

The correct code is:

if (tracker.size() == 0 && plugin != null)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,320976,,,Mon Jan 05 09:47:48 UTC 2015,,,,,,0|i1jdq7:,321317,,,,,,,,03/Apr/13 13:55;v_valchev;fixed in rev.1464014,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sometimes the UPnP plugin fails to start due to device being removed from network,FELIX-4012,12640509,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,03/Apr/13 13:29,05/Jan/15 09:47,14/Mar/19 02:48,03/Apr/13 13:55,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,"Since OSGi r4.3 it he methdod UPnPDevice.getIcons() may throw IllegalStateException if you keep reference to device that has been removed from the network.

During startup the ServiceTracker will notify the plugin for all previously registered UPnP devices. While processing them, a device can be removed and the reference becomes obsolete. Then the getIcons() method will throw exception which is not caught and will cause the BundleActivator.start() to fail. So the bundle stays in resolved state.

Here is stack trace of the problem:
{code}
java.lang.IllegalStateException: The UPnP Device was removed from the network. Device UDN: uuid:e516cbe4-35fd-4cf9-a862-886969e13050
	at com.prosyst.mbs.impl.services.upnp.cp.api.UPnPDeviceImpl.checkState(UPnPDeviceImpl.java:477)
	at com.prosyst.mbs.impl.services.upnp.cp.api.UPnPDeviceImpl.getIcons(UPnPDeviceImpl.java:316)
	at org.apache.felix.webconsole.plugins.upnp.internal.ControlServlet.addingService(ControlServlet.java:543)
	at org.apache.felix.webconsole.plugins.upnp.internal.Activator.addingService(Activator.java:88)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:909)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:184)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:349)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:283)
	at org.apache.felix.webconsole.plugins.upnp.internal.Activator.start(Activator.java:48)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,320969,,,Mon Jan 05 09:47:47 UTC 2015,,,,,,0|i1jdon:,321310,,,,,,,,03/Apr/13 13:55;v_valchev;fixed in rev.1464003,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] code refactoring/simplification,FELIX-4011,12640388,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,02/Apr/13 21:45,15/Oct/13 23:35,14/Mar/19 02:48,07/May/13 05:08,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,I think we can simplify the code a bit by e.g. having only one map of component instances to stuff related to the component and keeping the edge infos and component instance in the component context impl.  I found some bugs too... ReadOnlyDictionary copying a non-hashtable didn't work.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,320851,,,Tue May 07 05:08:22 UTC 2013,,,,,,0|i1jcyf:,321192,,,,,,,,"07/May/13 05:08;djencks;Fixed in revs 1463767-1463771, 1463820, 1465203, and 1467353",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR Plugin aborts when scanning a Java 8 class file,FELIX-4010,12640259,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,fmeschbe,fmeschbe,02/Apr/13 09:44,04/Oct/13 14:10,14/Mar/19 02:48,27/Sep/13 11:16,maven-scr-plugin-1.11.0,,,,,,maven-scr-plugin 1.15.0,scr ant task 1.9.0,scr generator 1.8.2,,,,,SCR Tooling,,,,,,0,,,,,,"It looks like the ASM library referred to by the SCR plugin is not compatible with Java 8 class file version 52.

How to reproduce: Use Java 8 to run a maven based project build where at least one of the @Component annotated classes extend (or implement) a Java 8 runtime provided class, e.g. java.io.Serializable, in class file version 52.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-29 05:49:48.742,,,no_permission,,,,,,,,,,,,320722,,,Fri Sep 27 11:16:02 UTC 2013,,,,,,0|i1jc5r:,321063,,,,,,,,02/Apr/13 09:46;fmeschbe;In Rev. 1463466 implemented an exception handler to at least write a sensible error message if the class file format is not supported.,"26/Apr/13 18:23;fmeschbe;Currently the SCR annotations assume class extension support: That is, if a @Component annotated class extends another class, that super class is scanned for annotations.

We could introduce a @Component boolean attribute ""scanSuper"" which defaults to true. If the attribute is set to false, a base class will not be scanned.","29/Apr/13 05:49;cziegeler;We already have the ""inherit"" flag, which could be used for this. We could also stop scanning, if the package of a super class starts with ""java."".

Maybe we should rethink this inheritence anyway, as long as the super class is in the same bundle, everything is fine as the tool knows at build time how the class really looks like. However as soon as the class is not within the bundle anymore, the class used as deployment time might be different. And the scr plugin can't tell whether a class is within the bundle or not (the packaging is done at a later stage). The OSGi annotations from DS do not support inheritance at all, and this is one of the main reasons for this.","29/Apr/13 10:30;fmeschbe;> inherit

Ah right. That's the one I was looking for before. So this could be used as a workaround in certain situations.","27/Sep/13 11:16;cziegeler;I'm excluding ""java."" and ""javax."" now from scanning",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[resolver]: NPE in toStringBlame,FELIX-4008,12640011,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,njbartlett,njbartlett,31/Mar/13 21:58,04/Apr/13 21:14,14/Mar/19 02:48,04/Apr/13 14:34,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"Affects resolver 2.1.0 (svn revision 1463059)

ResolverImpl.toStringBlame() throws NPE on line 2011.

This line of code assumes all Capabilities have an attribute that has the same name as the Capability namespace. While this is true for many namespaces (e.g. osgi.wiring.package), it is not universally true. For example the following is a valid Capability according to the R5 spec and results in the NPE:

    Provide-Capability: osgi.service; objectClass=org.example.Foo
",,,,,,,,,,,,,,,,,,,,31/Mar/13 22:22;njbartlett;FELIX-4008.patch;https://issues.apache.org/jira/secure/attachment/12576305/FELIX-4008.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-04 14:34:04.912,,,no_permission,,,,,,,,,,,,320479,,,Thu Apr 04 21:14:12 UTC 2013,,,,,,0|i1janr:,320820,,,,,,,,31/Mar/13 22:22;njbartlett;Proposed patch,"04/Apr/13 14:34;rickhall;I've applied this patch, please close if satisfied. Thanks.","04/Apr/13 21:14;njbartlett;Fixed, thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] While disposing a component, it's possible to unbind a reference that wasn't bound.",FELIX-4006,12639972,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,31/Mar/13 06:30,15/Oct/13 23:33,14/Mar/19 02:48,10/Apr/13 17:50,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"When we dispose of a implementation object, in the ImmediateComponentHandler, 
(1) t1 we set m_implementationObject to null
(2) t2 Any bind operation will now not succeed since the impl object is not available, but we track it
(3) t1 the dependency manager gets the tracked objects and proceeds to unbind them.

I'm thinking about a different solution to FELIX-3754 as part of this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,320440,,,Wed Apr 10 17:50:55 UTC 2013,,,,,,0|i1jaf3:,320781,,,,,,,,10/Apr/13 17:50;djencks;rev 1463766 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Maven Bundle Plugin fails with ArrayIndexOutOfBoundsException, ""Invalid Class File"" errors with Java 8 features",FELIX-4005,12639930,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,,beamerblvd,beamerblvd,30/Mar/13 13:59,12/Jun/13 23:46,14/Mar/19 02:48,01/Apr/13 22:54,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"I have the POM file attached. Its parent is ""com.fasterxml:oss-parent"" version 8 (which can be found in central repository). The module I'm creating is a Mapping Jackson plugin that supports the Java 8 Date & Time API. It uses lambda expressions and method references as well. The Maven Bundle Plugin, it would seem, does not like this. I cannot build (which is kind of a big deal). The classes compile fine as you can see, so there isn't a problem with my Java code. Just the plugin.

Here is the output from the build process:

{code}
[WARNING] Command line option -npr is deprecated and will be removed in future Maven versions.
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Jackson-Datatype-JSR310 2.2.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.1.1:enforce (enforce-java) @ jackson-datatype-jsr310 ---
[INFO] 
[INFO] --- replacer:1.5.2:replace (process-packageVersion) @ jackson-datatype-jsr310 ---
[INFO] Replacement run on 1 file.
[INFO] 
[INFO] --- build-helper-maven-plugin:1.7:add-source (add-generated-sources) @ jackson-datatype-jsr310 ---
[INFO] Source directory: C:\Users\Nicholas\Desktop\jackson-datatype-jsr310\target\generated-sources added.
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ jackson-datatype-jsr310 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\Nicholas\Desktop\jackson-datatype-jsr310\src\main\resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.0:compile (default-compile) @ jackson-datatype-jsr310 ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 21 source files to C:\Users\Nicholas\Desktop\jackson-datatype-jsr310\target\classes
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:manifest (bundle-manifest) @ jackson-datatype-jsr310 ---
java.lang.ArrayIndexOutOfBoundsException: 18
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:448)
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:369)
	at aQute.lib.osgi.Clazz.parseClassFileWithCollector(Clazz.java:359)
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:349)
	at aQute.lib.osgi.Analyzer.analyzeJar(Analyzer.java:1725)
	at aQute.lib.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:1595)
	at aQute.lib.osgi.Analyzer.analyze(Analyzer.java:124)
	at aQute.lib.osgi.Builder.analyze(Builder.java:306)
	at aQute.lib.osgi.Analyzer.calcManifest(Analyzer.java:301)
	at org.apache.felix.bundleplugin.ManifestPlugin.getAnalyzer(ManifestPlugin.java:206)
	at org.apache.felix.bundleplugin.ManifestPlugin.getManifest(ManifestPlugin.java:114)
	at org.apache.felix.bundleplugin.ManifestPlugin.execute(ManifestPlugin.java:69)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:264)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:255)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:487)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:487)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
java.lang.ArrayIndexOutOfBoundsException: 18
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:448)
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:369)
	at aQute.lib.osgi.Clazz.parseClassFileWithCollector(Clazz.java:359)
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:349)
	at aQute.lib.osgi.Analyzer.analyzeJar(Analyzer.java:1725)
	at aQute.lib.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:1595)
	at aQute.lib.osgi.Analyzer.analyze(Analyzer.java:124)
	at aQute.lib.osgi.Builder.analyze(Builder.java:306)
	at aQute.lib.osgi.Analyzer.calcManifest(Analyzer.java:301)
	at org.apache.felix.bundleplugin.ManifestPlugin.getAnalyzer(ManifestPlugin.java:206)
	at org.apache.felix.bundleplugin.ManifestPlugin.getManifest(ManifestPlugin.java:114)
	at org.apache.felix.bundleplugin.ManifestPlugin.execute(ManifestPlugin.java:69)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:264)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:255)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:487)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:487)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
java.lang.ArrayIndexOutOfBoundsException: 18
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:448)
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:369)
	at aQute.lib.osgi.Clazz.parseClassFileWithCollector(Clazz.java:359)
	at aQute.lib.osgi.Clazz.parseClassFile(Clazz.java:349)
	at aQute.lib.osgi.Analyzer.analyzeJar(Analyzer.java:1725)
	at aQute.lib.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:1595)
	at aQute.lib.osgi.Analyzer.analyze(Analyzer.java:124)
	at aQute.lib.osgi.Builder.analyze(Builder.java:306)
	at aQute.lib.osgi.Analyzer.calcManifest(Analyzer.java:301)
	at org.apache.felix.bundleplugin.ManifestPlugin.getAnalyzer(ManifestPlugin.java:206)
	at org.apache.felix.bundleplugin.ManifestPlugin.getManifest(ManifestPlugin.java:114)
	at org.apache.felix.bundleplugin.ManifestPlugin.execute(ManifestPlugin.java:69)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:264)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:255)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:487)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:487)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
[ERROR] Manifest com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.2.0-SNAPSHOT : Exception: 18
[ERROR] Manifest com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.2.0-SNAPSHOT : Invalid class file: com/fasterxml/jackson/datatype/jsr310/deser/InstantDeserializer.class
[ERROR] Manifest com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.2.0-SNAPSHOT : Exception: 18
[ERROR] Manifest com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.2.0-SNAPSHOT : Invalid class file: com/fasterxml/jackson/datatype/jsr310/deser/JSR310StringParsableDeserializer.class
[ERROR] Manifest com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.2.0-SNAPSHOT : Exception: 18
[ERROR] Manifest com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.2.0-SNAPSHOT : Invalid class file: com/fasterxml/jackson/datatype/jsr310/ser/InstantSerializer.class
[ERROR] Error(s) found in manifest configuration
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.790s
[INFO] Finished at: Sat Mar 30 08:57:34 CDT 2013
[INFO] Final Memory: 21M/179M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.felix:maven-bundle-plugin:2.3.7:manifest (bundle-manifest) on project jackson-datatype-jsr310: Error(s) found in manifest configuration -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{code}",,,,,,,,,,,,,,,,,,,,30/Mar/13 14:01;beamerblvd;pom.xml;https://issues.apache.org/jira/secure/attachment/12576232/pom.xml,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-01 22:54:21.737,,,no_permission,,,,,,,,,,,,320398,,,Fri Jun 07 08:59:01 UTC 2013,,,,,,0|i1ja5r:,320739,,,,,,,,"30/Mar/13 14:01;beamerblvd;Why is formatting disabled on this JIRA? The bug description is unreadable.

My POM file is attached. You'll need to reference the parent POM as well.","30/Mar/13 14:05;beamerblvd;I should note the following:

1) The three class files it's complaining about are the only three class files using lambda expressions and method references.
2) You can download the entire source and attempt to build for yourself from https://github.com/FasterXML/jackson-datatype-jsr310.",01/Apr/13 22:54;mcculls;Fixed in latest 2.4.0-SNAPSHOT that uses bndlib 2.0.0.20130123-133441,"10/Apr/13 12:44;beamerblvd;Do you have an ETA on when 2.4.0 will be released? Obviously I don't expect a firm timeline, but I'd like to know if it's going to be ""next week"" versus ""in six months.""","10/Apr/13 12:53;mcculls;It won't be next week, more likely to be a month or so - there are a few patches to review and apply and I'm also waiting for bndlib 2.1 which includes some other fixes.","10/Apr/13 13:05;beamerblvd;Okay. I have temporarily switched to using the snapshot and confirmed that my build IS working now, so I look forward to the release. Thanks!","07/Jun/13 08:59;jponge;The Golo project is also in need for a new release with a bnd tool that correctly supports post-Java 7 bytecode.

https://github.com/golo-lang/golo-lang/pull/47",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ConcurrentModificationException in DependencyManager.open(),FELIX-4004,12639889,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,29/Mar/13 22:02,15/Oct/13 23:33,14/Mar/19 02:48,31/Mar/13 05:49,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Caused by: java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at java.util.AbstractCollection.toString(AbstractCollection.java:421)
	at java.text.MessageFormat.subformat(MessageFormat.java:1246)
	at java.text.MessageFormat.format(MessageFormat.java:836)
	at java.text.Format.format(Format.java:140)
	at java.text.MessageFormat.format(MessageFormat.java:812)
	at org.apache.felix.scr.impl.BundleComponentActivator.log(BundleComponentActivator.java:571)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.log(AbstractComponentManager.java:922)
	at org.apache.felix.scr.impl.manager.DependencyManager.open(DependencyManager.java:1331)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:274)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:124)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Registered.getService(AbstractComponentManager.java:1685)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:752)


The list of RefPairs returned by customizer.getRefs() has changed during the log statement.

I think this means a MultipleStaticReluctantCustomizer is being closed concurrent with being opened, although it might be opened on two threads.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,320358,,,Sun Mar 31 05:49:56 UTC 2013,,,,,,0|i1j9wv:,320699,,,,,,,,29/Mar/13 23:39;djencks;Log analysis shows the MultipleStaticReluctantCustomizer is being opened on two threads.,31/Mar/13 05:49;djencks;Fixed in rev 1462799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentStateListener.started is invoked twice when the listener is added in the start method.,FELIX-4002,12639584,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,abroekhuis,abroekhuis,28/Mar/13 14:07,22/Jul/14 08:04,14/Mar/19 02:48,02/Jul/14 12:27,dependencymanager-3.1.0,,,,,,dependencymanager-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"When a ComponentStateListener is added in the start lifecycle method of a component the started method is called twice. Once immediately, once if the start is returned. 

The first call is unexpected and should not happen?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-28 14:26:11.094,,,no_permission,,,,,,,,,,,,320053,,,Wed Jul 02 12:27:47 UTC 2014,,,,,,0|i1j813:,320394,,,,,,,,28/Mar/13 14:26;marrs;The testDynamicComponentStateListingLifeCycle2 test in org.apache.felix.dm.test.ComponentLifeCycleTest demonstrates this issue. It is currently failing.,02/Apr/13 09:04;tuomas_kiviaho;removeStateListener behaviour seem to inconsistent with addStateListener. There might be situations where starting+start are called but stopping+stopped are not.,"02/Jul/14 12:27;pderop;committed a patch in rv 1607341; the ComponentLifeCycleTest.testDynamicComponentStateListingLifeCycle2() test is now passing OK.

The addStateListener/removeStateListener are now scheduling a runnable in the component's executor. This allows to avoid complex synchronizations code and the listener is now called with the missed events.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR should depend on released version of animal-sniffer-annotations,FELIX-4001,12639542,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,djencks,rombert,,28/Mar/13 10:23,04/Sep/14 08:04,14/Mar/19 02:48,07/May/13 05:01,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,There's no reason to depen on 1.10-SNAPSHOT when 1.9 works just fine and is available outside of the Apache snapshot repo.,,,,,,,,,,,,,,,,,,,,28/Mar/13 10:24;FELIX-4001-1.patch;https://issues.apache.org/jira/secure/attachment/12575859/FELIX-4001-1.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-07 05:01:18.882,,,no_permission,,,,,,,,,,,,320011,,,Tue May 07 05:01:18 UTC 2013,,,,,,0|i1j7rr:,320352,,,,,,,,07/May/13 05:01;djencks;I ran into the same problem and fixed this in rev 1465203 before I saw your issue or patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ConcurrentModificationException in AbstractComponentManager iterating through m_dependencyManagers,FELIX-4000,12639428,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,27/Mar/13 19:19,15/Oct/13 23:34,14/Mar/19 02:48,31/Mar/13 05:49,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.updateTargets(AbstractComponentManager.java:1002)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.reconfigure(ImmediateComponentManager.java:580)
	at org.apache.felix.scr.impl.config.ImmediateComponentHolder.configurationDeleted(ImmediateComponentHolder.java:249)
	at org.apache.felix.scr.impl.config.ConfigurationSupport.configurationEvent(ConfigurationSupport.java:232)


m_dependencyManagers is initialized in the constructor and the only other place it changes is in clear() where it's cleared.  My first idea is to just not try to help the GC and not actually clear the m_dependencyManagers list.  Otherwise we'll have to add a lot of locking to make sure that no threads disable the component while any other thread is doing anything.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,319898,,,Sun Mar 31 05:49:14 UTC 2013,,,,,,0|i1j72n:,320239,,,,,,,,31/Mar/13 05:49;djencks;No apparent ill effects from not clearing m_dependencyManagers.  Rev 1462798,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Updating JAAS config leads to registration of duplicate LoginModules,FELIX-3998,12639094,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,chetanm,chetanm,chetanm,26/Mar/13 13:24,17/Feb/14 07:53,14/Mar/19 02:48,26/Mar/13 14:06,,,,,,,jaas-0.0.2,,,,,,,JAAS,,,,,,0,,,,,,If the JAAS Config is updated then LoginModules backed by older config are not deregistered. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,319564,,,Mon Feb 17 07:53:10 UTC 2014,,,,,,0|i1j50f:,319905,,,,,,,,26/Mar/13 14:06;chetanm;Fixed with rev 1461129. The previous service is now deregistered upon config update,17/Feb/14 07:53;chetanm;Closing the issue as 0.0.2 release is done,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing options in Bind annotation,FELIX-3995,12638871,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,gvega,gvega,25/Mar/13 12:58,10/Apr/13 13:46,14/Mar/19 02:48,10/Apr/13 12:33,iPOJO-1.8.0,ipojo-annotations-1.8.4,,,,,ipojo-manipulator-1.10.0,ipojo-runtime-1.10,,,,,,iPOJO,,,,,,0,,,,,,"The Bind annotation doesn't accept all the options available in the Require annotation.

In particular, it is not possible to specify @Bind(proxy=false) to request that service object be injected directly.

Workaround: define a dummy field, and use a @Require with the same Id as the @Bind to set the missing options.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-10 12:33:13.971,,,no_permission,,,,,,,,,,,,319341,,,Wed Apr 10 12:33:13 UTC 2013,,,,,,0|i1j3mv:,319682,,,,,,,,10/Apr/13 12:33;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader access outside of a privileged block,FELIX-3992,12638712,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,karlpauls,romain.dubois,romain.dubois,24/Mar/13 10:45,27/Apr/15 07:06,14/Mar/19 02:48,19/Mar/14 20:37,framework-4.2.0,,,,,,framework-4.4.0,,,,,,,Framework,,,,,,0,security,,,,,"In method org.apache.felix.framework.ServiceRegistrationImpl.isClassAccessible(Class), there is an access to the registered ServiceFactory classloader (lines 163:169 in v4.2.1):

        if ((m_factory != null)
            && (m_factory.getClass().getClassLoader() instanceof BundleReference)
            && !((BundleReference) m_factory.getClass()
                .getClassLoader()).getBundle().equals(m_bundle))
        {
            return true;
        }

If a bundle registers a service through a ServiceFactory and if there is an active ServiceListener matching this service, those lines are executed inside the registering bundle's protection domain.

If this bundle does not have the (java.util.RuntimePermission 'getClassloader') privilege, the getClassLoader invocation throws a SecurityException and the listener is always called because the exception is catched at line 526 (isAssignableTo) of the same class.
The comment inside the catch block does not seem to justify this case.

I think a simple privileged block around the bundle comparison is harmless and should fix this. It could be something like :
        if (m_factory != null)
        {
            Bundle bundle = null;
            if (System.getSecurityManager() == null)
            {
                if ((m_factory.getClass().getClassLoader() instanceof BundleReference) {
                    bundle = ((BundleReference) m_factory.getClass().getClassLoader()).getBundle(); 
                }
            }
            else
            {
                bundle = AccessController.doPrivileged(new PrivilegedAction<Bundle>() {
                    public Bundle run() {
                        if ((m_factory.getClass().getClassLoader() instanceof BundleReference) {
                            return ((BundleReference) m_factory.getClass().getClassLoader()).getBundle(); 
                        }       
                        return null;
                    }
                });
            }
            
            if (bundle != null && bundle.equals(m_bundle)) {
                return true;
            }
        }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-25 11:44:20.79,,,no_permission,,,,,,,,,,,,319187,,,Mon Mar 25 11:44:20 UTC 2013,,,,,,0|i1j2on:,319528,,,,,,,,"25/Mar/13 11:44;karlpauls;Looks like something like your patch would make sense. Thanks, I'll try to get to it soon...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] component deactivation may not complete properly with enough threads,FELIX-3991,12638700,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,24/Mar/13 05:26,15/Oct/13 23:34,14/Mar/19 02:48,24/Mar/13 06:11,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I didn't think through the return values from RegistrationManager correctly.  The result was that if a required dependency was removed while service registration was taking place, the deactivation code thought another thread was doing the deactivation and did nothing further.  The dependency managers were then left in an inconsistent state.  For instance a SingleStaticCustomizer was left with the original refPair even though it was removed (the cause of the deactivation).  This would prevent subsequent activation of the component.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,319175,,,Sun Mar 24 06:11:42 UTC 2013,,,,,,0|i1j2lz:,319516,,,,,,,,"24/Mar/13 06:11;djencks;Fixed in rev 1460261.  I added quite a bit of logging until I understood where the problem was.  Fixed, javadoced, and logged the RegistrationManager return values.  I also did a bit of method renaming and log clarification.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FilterHandler does not handle return of context.handleSecurity() correctly,FELIX-3988,12638265,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,kvgunten,kvgunten,21/Mar/13 15:53,27/Feb/18 14:46,14/Mar/19 02:48,27/Feb/18 14:46,http-2.2.0,,,,,,http-2.3.0,,,,,,,HTTP Service,,,,,,0,,,,,,"This is somewhat similar to FELIX-2768, but not resolved.

The JavaDoc for HttpContext.handleSecurity states: 

* When this method returns false, the Http Service will send the response back to the client, thereby
* completing the request. When this method returns true, the Http Service will proceed with servicing the 
* request.

The current FilterHandler impl is as follows:

if (!getContext().handleSecurity(req, res)) {
  res.sendError(HttpServletResponse.SC_FORBIDDEN);
} else {
  this.filter.doFilter(req, res, chain);
}

1) This does not comply to the above doc, because the context might have set a status/error code and prepared everything correctly to be returned. Sending an error will overwrite the prepared headers and status.

2) Some context implementations are a bit eager and already send the response back before they return ""false"" from the above method. The current implementation will then lead to an IllegalStateException, because the response has already been committed. In order to be more robust, there should be a if(!res.isCommitted())-block around the handling of the ""false"" return value.

I attached a patch for the second aspect of the issue, but couldn't resolve the first part, because - as it is at the moment - there seems to be no way to check if there is already a status set on the resource (no getStatus() or isStatusSet() method).

Ideally the fix should be something like:

if (!res.isCommitted() && !res.isStatusSet()) {
  res.sendError(SC_FORBIDDEN);
}


",,,,,,,,,,,,,,,,,,,,21/Mar/13 15:58;kvgunten;FilterHandler.patch;https://issues.apache.org/jira/secure/attachment/12574817/FilterHandler.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-13 08:44:45.464,,,no_permission,,,,,,,,,,,,318741,,,Thu Feb 13 10:36:07 UTC 2014,,,,,,0|i1izxj:,319082,,,,,,,,"21/Mar/13 15:58;kvgunten;Suggested patch to make handling of false return value by context.handleSecurity() more robust.

This patch is only a partial solution to the issue, see description.","13/Feb/14 08:44;jajans;Changed your proposed patch with:

{code}
if (!res.isCommitted() && res.getStatus() == SC_OK) {
    res.sendError(SC_FORBIDDEN);
}
{code}

As of Servlet 3.0, you can query the current status of a response. Jetty, by default, initialises the status code to {{SC_OK}}, allowing us to make the following rule: 

either the {{HttpContext#handleSecurity}}
 # committed its own response, or;
 # set a non-default status code.

in which case we *won't* send the {{SC_FORBIDDEN}} code. In case of an uncommitted response with a default status code, we send an {{SC_FORBIDDEN}} error.
","13/Feb/14 08:53;fmeschbe;I am not really sure, that proposed fix is a good one, since the handleSecurity could expressely set SC_OK for any one reason (e.g. sending an HTML form to enter credentials) but not commit the response. In this case sending back FORBIDDEN is wrong.

Maybe we could setStatus(SC_FORBIDDEN) before calling handleSecurity and if that returns false the response is just terminated (committed if needed). Otherwise (handleSecurity returns true) setStatus(SC_OK) is called and the request continues.

WDYT ?","13/Feb/14 09:18;jajans;In case of filters, always setting the status to {{SC_FORBIDDEN}} prior to calling {{HttpContext#handleSecurity}} is also wrong in my opinion, as we're not sure that there is only *one* filter present in the chain. It could be that another filter already set a ""non default"" status code which we would overwrite in that case.

To send an HTML form to enter user credentials with a status code of {{SC_OK}}, I think it is ""defendable"" to state that an {{HttpContext#handleSecurity}} should commit its own response. Perhaps this could be addressed to the JavaDoc of {{HttpContext}} or in the HTTP service update?
","13/Feb/14 09:24;fmeschbe;Will the filters be called during handleSecurity at all ? I thought requests are processed like this:

1. handleSecurity
2. REQUEST scoped filters
3. Servlet
4. more filters and servlet as per RequestDispatcher","13/Feb/14 09:42;jajans;I could be wrong, but that is not how I understand (and read) the code: the current dispatcher first dispatches the request through all available filters, which, when matching the request, all individually call {{handleSecurity}} and proceeds by dispatching the request to the first matching servlet, which will also call {{handleSecurity}} prior to handling the request.

","13/Feb/14 10:36;fmeschbe;Oh, you are right ! each filter is registered with an HttpContext and the handleSecurity of each of these context's is called.

I have the impression, this is not how it should be. In fact, this raises a very interesting question: Should only filters be called for a servlet where all HttpContexts are the same ? Not going into this one here.

So, ok, lets keep it as you proposed and reconsider later if needed.

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceServlet sets content-length header too late,FELIX-3987,12638258,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,kvgunten,kvgunten,21/Mar/13 15:33,01/Aug/15 09:22,14/Mar/19 02:48,11/Nov/13 14:24,http-2.2.0,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"The ResourceServlet.handle(..) implementation sets content-type and last-modified headers, then goes on and copies the specified resource's content onto the response's output stream. When it is done, it sets the content-length header to the # of written bytes.

This is just wrong, because all headers should be present before content is written. The implementation gets away with it, because most content probably fits into the internal buffers and content-length is set before flush/close is called, but with large content this will cause problems.

Suggestion: determine content-length in handle (analogous to last-modified) BEFORE calling copy(). I attached a suggested patch for the v2.2.0 ResourceServlet.",,,,,,,,,,,,,,,,,,,,21/Mar/13 15:34;kvgunten;ResourceServlet.patch;https://issues.apache.org/jira/secure/attachment/12574813/ResourceServlet.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-11 14:24:15.092,,,no_permission,,,,,,,,,,,,318734,,,Mon Nov 11 14:24:15 UTC 2013,,,,,,0|i1izvz:,319075,,,,,,,,21/Mar/13 15:34;kvgunten;Suggested Patch,11/Nov/13 14:24;jajans;Committed the proposed solution in rev #1540739.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadDumper comparators are not correctly implemented,FELIX-3986,12638252,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,21/Mar/13 15:06,06/Jun/13 15:34,14/Mar/19 02:48,21/Mar/13 15:08,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"The ThreadComparator and ThreadGroupComparator do not handle correctly null values. In embedded java SE 7 it might cause the following exception:

 java.lang.IllegalArgumentException: Comparison method violates its general contract!
        at java.util.TimSort.mergeHi(TimSort.java:868)
        at java.util.TimSort.mergeAt(TimSort.java:485)
        at java.util.TimSort.mergeCollapse(TimSort.java:408)
        at java.util.TimSort.sort(TimSort.java:214)
        at java.util.TimSort.sort(TimSort.java:173)
        at java.util.Arrays.sort(Arrays.java:659)
        at org.apache.felix.webconsole.internal.misc.ThreadDumper.printThreadGroup(ThreadDumper.java:161)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-06 15:34:57.673,,,no_permission,,,,,,,,,,,,318728,,,Thu Jun 06 15:34:57 UTC 2013,,,,,,0|i1izun:,319069,,,,,,,,21/Mar/13 15:08;v_valchev;fixed in rev.1459347,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigSpiOsgi should be registered by default ,FELIX-3985,12638200,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,chetanm,chetanm,chetanm,21/Mar/13 09:59,17/Feb/14 07:53,14/Mar/19 02:48,21/Mar/13 11:23,,,,,,,jaas-0.0.2,,,,,,,JAAS,,,,,,0,,,,,,ConfigSpiOsgi does not registers the Configuration unless a configuration is explicitly provided for it. Instead it should register by default with a default config. If config is updated it should update itself,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,318676,,,Mon Feb 17 07:53:09 UTC 2014,,,,,,0|i1izj3:,319017,,,,,,,,"21/Mar/13 11:23;chetanm;Fixed with rev 1459226

Now the spi registers upon activation and assumes some default config. That config can be overriden via BundleContext properties.",17/Feb/14 07:53;chetanm;Closing the issue as 0.0.2 release is done,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Property: ArrayIndexOutOfBoundsException empty array default value,FELIX-3977,12637919,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,fmeschbe,fmeschbe,20/Mar/13 08:58,23/Apr/15 13:30,14/Mar/19 02:48,09/Apr/13 12:12,scr annotations 1.7.0,scr annotations 1.9.0,,,,,scr annotations 1.9.2,,,,,,,SCR Tooling,,,,,,0,,,,,,"The following setup fails the SCR Plugin with an ArrayIndexOutOfBoundsException:

>    private static final String PROP = ""prop"";
>    @Property(name = PROP)
>    private static final String[] PROP_DEFAULT = {};

Stacktrace from SCR Plugin 1.11.0:

Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.reflect.Array.get(Native Method)
	at org.apache.felix.scrplugin.processing.SCRAnnotationProcessor.createProperties(SCRAnnotationProcessor.java:399)
	at org.apache.felix.scrplugin.processing.SCRAnnotationProcessor.process(SCRAnnotationProcessor.java:174)
	at org.apache.felix.scrplugin.helper.AnnotationProcessorManager.process(AnnotationProcessorManager.java:98)
	at org.apache.felix.scrplugin.helper.ClassScanner.processClass(ClassScanner.java:213)
	at org.apache.felix.scrplugin.helper.ClassScanner.process(ClassScanner.java:161)
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:146)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:149)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:248)


Workaround is to define without a default value like this:

>    @Property(unbounded = PropertyUnbounded.ARRAY)
>    private static final String PROP = ""prop"";
>    private static final String[] PROP_DEFAULT = {};
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-09 12:12:46.568,,,no_permission,,,,,,,,,,,,318399,,,Tue Apr 09 12:12:46 UTC 2013,,,,,,0|i1ixtj:,318740,,,,,,,,09/Apr/13 12:12;cziegeler;Fixed by doing the type detection on the field class instead of trying to get the first element of the array,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Give ParseException cause to move out of the stone age,FELIX-3975,12637831,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,19/Mar/13 21:48,15/Oct/13 23:34,14/Mar/19 02:48,24/Mar/13 06:13,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"no longer the stone age, we can use the general getCause() bits of exceptions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,318311,,,Sun Mar 24 06:13:40 UTC 2013,,,,,,0|i1ix9z:,318652,,,,,,,,21/Mar/13 03:04;djencks;fixed in rev 1459140,"24/Mar/13 05:41;djencks;Fixed in rev 1460261.  I added quite a bit of logging until I understood where the problem was.  Fixed, javadoced, and logged the RegistrationManager return values.  I also did a bit of method renaming and log clarification.","24/Mar/13 06:13;djencks;Last comment applies to FELIX-3991, not this issue.",24/Mar/13 06:13;djencks;but this one is still resolved.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Properties cannot be set as immutable using annotations,FELIX-3974,12637726,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,19/Mar/13 09:03,28/May/13 04:10,14/Mar/19 02:48,19/Mar/13 11:27,ipojo-runtime-1.8.6,,,,,,ipojo-manipulator-1.10.0,ipojo-runtime-1.10,,,,,,iPOJO,,,,,,0,,,,,,The immutable attribute for properties is missing in the Property annotation and in the core XML schema.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,318206,,,Tue May 28 04:10:21 UTC 2013,,,,,,0|i1iwmn:,318547,,,,,,,,19/Mar/13 11:27;clement.escoffier;fixed in trunk,28/May/13 04:10;clement.escoffier;Fixed in the 1.10.0 release of the iPOJO manipulator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exclusion from {local-packages} doesn't work anymore,FELIX-3973,12637434,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,tuomas_kiviaho,tuomas_kiviaho,17/Mar/13 13:17,12/Jun/13 23:46,14/Mar/19 02:48,07/Jun/13 22:21,,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,patch,,,,,"I've been using Export-Package: !org.apache.jsp.*, {local-packages} to exclude jspc compilers output, but with BND 2.0.0 this stopped working completely (although until now I was getting a bunch of warnings).

BND currently gives a second chance to non matching packages. This feature will rended !org.apache.jsp.* useless since {local-packages} is expanded to clause that contains org.apache.jsp prefixed packages.

A fix would be to pre-filter the {local-packages} against Export/Private-Package clauses",bnd 2.0.0.x,,,,,,,,,,,,,,,,,,,27/Mar/13 22:29;tuomas_kiviaho;FELIX-3973.diff;https://issues.apache.org/jira/secure/attachment/12575783/FELIX-3973.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-25 12:46:57.43,,,no_permission,,,,,,,,,,,,317925,,,Fri Jun 07 22:21:27 UTC 2013,,,,,,0|i1iuw7:,318266,,,,,,,,"17/Mar/13 13:32;tuomas_kiviaho;Here's a patch that fits everything to addLocalPackages by using functionality provided by BND itself.

Downsize is that there's still a bit of reflection involved due to https://github.com/bndtools/bnd/issues/319",21/Mar/13 16:20;tuomas_kiviaho;I removed the patch after Peter pointer out that I was doing-it-wrong. Proper way of doing it would be to use macros but alas they don't seem to be working with {local-packages}. I noticed also that split packages clause is only applied to the last of the local package. I'll deliver a new patch soon.,25/Mar/13 10:24;tuomas_kiviaho;Here's the patch again in such form that doesn't use BND internals via reflection but instead BND postpones macro evaluation after {local-packages} has been replaced. Now I can use ${filterout;{local-packages};org\\.apache\\.jsp.*} macro to solve my problem,"25/Mar/13 12:46;mcculls;Thanks for the updated patch, I'll try to get round to applying it over the Easter break.","26/Mar/13 06:56;tuomas_kiviaho;Reattaching once more. I reverted unnecessary modifications from the code while fixing one bug that I accidentally introduced. Sorry about the inconvenient GIT diff format.

Key of this patch is to retrieve properties without waking up BND macros at this point.

I also use BNDs PackageRef instead of direct string manipulation to ensure that delimiter is compatible with BND macros and list notation (, instead of ;). I'll repatch the FELIX-3381 also so that macros can be allied to sources and resources

PS. I don't recollect reading a documentation about automatic split package which I think is great considering that plugin takes care of classpath already. For some reason it was only applied to the last package which I don't believe being intentional.",27/Mar/13 22:29;tuomas_kiviaho;Fixed the diff a bit yet again. Why didn't I just write a test in the first place,07/Jun/13 22:21;mcculls;Applied in r1490854 - thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] SingleDynamicCustomizer doesn't respond correctly to configuration update events.,FELIX-3971,12637349,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,16/Mar/13 01:25,16/Oct/13 00:04,14/Mar/19 02:48,16/Oct/13 00:04,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"SingleDynamicCustomizer.addedService only processes events if they were not in the previous satisfied set for the old config.  But the config may have changed which service satisfies the filter.  We need different logic here.


            if ( getPreviousRefMap().remove( serviceReference ) == null )
works for multipleDynamicCustomizer, but not the single one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,317841,,,Wed Oct 16 00:04:14 UTC 2013,,,,,,0|i1iudj:,318182,,,,,,,,"18/Mar/13 21:28;djencks;The main issue is fixed with tests for everything except factory components in revs 1457985-1457988.

I made the dependencyManager customizer final and just replace the tracker since it's too hard to move state between an old and new customizer.

I don't understand what should happen with factory component updates and asked on the dev list.",16/Oct/13 00:04;djencks;I'm going to close this issue and consider further discussions about factory components since I think this is the tip of the iceberg as far as factory component problems.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
web console shows invalid bundle symbolic name,FELIX-3969,12636769,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,13/Mar/13 12:46,06/Jun/13 15:34,14/Mar/19 02:48,13/Mar/13 12:57,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"If you have a bundle with
Bundle-SymbolicName: com.company.pkg; singleton=true

The web console will show that the bundle symbolic name is ""com.company.pkg; singleton=true"", which is incorrect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-06 15:34:59.756,,,no_permission,,,,,,,,,,,,317261,,,Thu Jun 06 15:34:59 UTC 2013,,,,,,0|i1iqsn:,317602,,,,,,,,13/Mar/13 12:57;v_valchev;fixed in rev.1455922,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringIndexOutOfBoundsException in packageadmin plugin,FELIX-3968,12636596,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,12/Mar/13 15:59,23/Sep/15 12:56,14/Mar/19 02:47,12/Mar/13 16:02,webconsole-packageadmin-plugin 1.0.0,,,,,,webconsole-packageadmin-plugin 1.0.2,,,,,,,Web Console,,,,,,0,,,,,,"To reproduce:
# open the web console
# go to packages tab
# as a package name type ""org.""
# click on Filter

kitman>$ [ERROR]8 : [HTTP] Problem while making answer to request /system/console/depfinder from client address null
java.lang.StringIndexOutOfBoundsException: String index out of range: 4
        at java.lang.String.charAt(String.java:658)
        at org.apache.felix.webconsole.plugins.packageadmin.internal.WebConsolePlugin.getPackageNames(WebConsolePlugin.java:285)
        at org.apache.felix.webconsole.plugins.packageadmin.internal.WebConsolePlugin.doFindDependencies(WebConsolePlugin.java:160)
        at org.apache.felix.webconsole.plugins.packageadmin.internal.WebConsolePlugin.doPost(WebConsolePlugin.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:815)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:493)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:418)
        at com.prosyst.mbs.impl.services.http.ServletProperties.service(ServletProperties.java:109)
        at com.prosyst.mbs.impl.services.http.Response.defaultResponse(Response.java:370)
        at com.prosyst.mbs.impl.services.http.FiltersManagerImpl.dispatch(FiltersManagerImpl.java:186)
        at com.prosyst.mbs.impl.services.http.FiltersFactory.dispatch(FiltersFactory.java:38)
        at com.prosyst.mbs.impl.services.http.Response.makeAnswer(Response.java:172)
        at com.prosyst.mbs.impl.services.http.ThreadProcess.run(ThreadProcess.java:114)
        at com.prosyst.util.impl.tpt.threadpool.ExecutorImpl.run(ExecutorImpl.java:191)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,317088,,,Wed Sep 23 12:56:33 UTC 2015,,,,,,0|i1ipq7:,317429,,,,,,,,12/Mar/13 16:02;v_valchev;fixed in rev.1455592,23/Sep/15 12:56;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] NPE in DependencyManager$AbstractCustomizer.isSatisfied,FELIX-3967,12636527,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,12/Mar/13 07:12,15/Oct/13 23:27,14/Mar/19 02:48,12/Mar/13 07:18,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We set the customizer before installing the tracker in the customizer, so 
        public boolean isSatisfied()
        {
            return isOptional() || !tracker.isEmpty();
        }
can give an NPE like this:


 java.lang.NullPointerException
>	at org.apache.felix.scr.impl.manager.DependencyManager$AbstractCustomizer.isSatisfied(DependencyManager.java:183)
>	at org.apache.felix.scr.impl.manager.DependencyManager.isSatisfied(DependencyManager.java:1254)
>	at org.apache.felix.scr.impl.manager.AbstractComponentManager.verifyDependencyManagers(AbstractComponentManager.java:1034)
>	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1465)
>	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:643)
>	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:822)
>	at org.apache.felix.scr.impl.manager.DependencyManager$SingleStaticCustomizer.addedService(DependencyManager.java:795)
>	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1474)
>	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1398)
>	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.trackAdding(ServiceTracker.java:1210)
>	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.track(ServiceTracker.java:1148)
>	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1429)

Presumably setting the tracker before making the customizer available will fix the problem
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,317019,,,Tue Mar 12 07:18:15 UTC 2013,,,,,,0|i1ipb3:,317360,,,,,,,,12/Mar/13 07:18;djencks;Should be fixed in rev 1455425,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
threads configuration status generates invalid results,FELIX-3965,12636356,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,11/Mar/13 12:39,06/Jun/13 15:35,14/Mar/19 02:48,11/Mar/13 12:40,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"I'm quite surprised, that nobody noticed that ""Threads"" tab in Configuration Status generates invalid result.

There are two problems:

1. The number of reported threads in the status is incorrect.
The reason is that we are enumerating all threads in all thread groups. However in some JVMs enumerating the root thread group will return *all* threads. So we count the threads at least twice - once being enumerated from the root group, and once - from their own thread group.

2. Some threads are not printed at all.
Our comparators doesn't guarantee that the null elements in the array will always get at the end of the array. So occasionally we can get a sorted array with nulls in front. Then, if we print one the first N (the actual thread count) from the array. Nulls are skipped, but the counter is increased, so finally some threads remain unprinted.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-11 13:01:03.801,,,no_permission,,,,,,,,,,,,316848,,,Thu Jun 06 15:35:00 UTC 2013,,,,,,0|i1io9b:,317190,,,,,,,,11/Mar/13 13:01;fmeschbe;Nice catch !,06/Jun/13 15:35;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong signature for non-service InventoryPrinter services,FELIX-3964,12636317,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,11/Mar/13 08:38,06/Jun/13 15:34,14/Mar/19 02:48,11/Mar/13 09:17,inventory-1.0.0,,,,,,inventory-1.0.0,,,,,,,Inventory,,,,,,0,,,,,,"InventoryPrinter services may be registered with just the properties with any service type as long as a specific method signature is implemteded. The idea is to implement this signature:

  print(String, PrintWriter, boolean)

Currently, the signature selection is for ""Boolean.class"" as the last parameter where it should be Boolean.TYPE to refer to the primitive boolean type.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,316809,,,Thu Jun 06 15:34:59 UTC 2013,,,,,,0|i1io0n:,317151,,,,,,,,"11/Mar/13 09:17;fmeschbe;Fixed in Rev. 1455065:

- replace Boolean.class by Boolean.type in the signature
- Create constants
- Add unit tests ",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Properly handle method resolution through reflection,FELIX-3963,12636314,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,11/Mar/13 08:29,06/Jun/13 15:35,14/Mar/19 02:48,27/Mar/13 19:08,inventory-1.0.0,,,,,,inventory-1.0.0,,,,,,,Inventory,,,,,,0,,,,,,"An InventoryPrinter can be registered as an InventoryPrinter service implementing the interface or it can be registered as service of any type as long as a particular method signature is implemented (along with a number of service registration properties required in both cases).

The method signature is similar to the InventoryPrinter method is:

   void print(String mode, PrinterWriter writer, boolean isZip)

Previously the ConfigurationPrinter support in Web Console 4.0 supported the same mechanism (with a slightly different signature, of course).

The question is, how is the method found:

(1) Use the service implementation class only to find any declared method. This is how Web Console 4.0 supports ConfigurationPrinter discovery.

(2) Use the service implementation class hierarchy to find a properly declared method. This is the current intent of the InventoryPrinter.

I think for the backwards compatibility use case (ConfigurationPrinter signatures) we should implement the ""implementation-class-only"" variant (1).

For new InventoryPrinter services we might consider variant (2). Yet I am not sure, whether this really is usefull: Does such a one-off InventoryPrinter service really support inheritance and method selection through the class hierarchy ? In such cases implementing the InventoryPrinter might make more sense.

See also the discussion at http://felix.markmail.org/thread/rtkogb7uukyt6gky",,,,,,,,,,,,,,,,,,,,11/Mar/13 10:21;fmeschbe;FELIX-3963-get.patch;https://issues.apache.org/jira/secure/attachment/12573059/FELIX-3963-get.patch,11/Mar/13 10:21;fmeschbe;FELIX-3963-search.patch;https://issues.apache.org/jira/secure/attachment/12573058/FELIX-3963-search.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,316806,,,Thu Jun 06 15:35:00 UTC 2013,,,,,,0|i1inzz:,317148,,,,,,,,"11/Mar/13 10:21;fmeschbe;Providing two patches implementing the two approaches:

-get : only use implementation class
-search: use class hierarchy for InventoryPrinter but implementation class for ConfigurationPrinter","27/Mar/13 14:46;fmeschbe;After discussion on the list, none of the patches will be applied. Rather we don't use reflection for InventoryPrinter at all and for ConfigurationPrinter we support the backwards compatible mechanism of only looking for the method in the class of the registered service object and expect the method to be public.

The solution to prevent eager API binding is to use dynamic imports and ServiceFactory as explained in the FAQ http://felix.apache.org/documentation/tutorials-examples-and-presentations/apache-felix-osgi-faq.html#how-to-provide-optional-services","27/Mar/13 16:52;fmeschbe;In Rev. 1461705 implemented:

(1) InventoryPrinter only accepted as a service implementing the API (using ServiceFactory and dynamic import fixes static dependency issues better)
(2) ConfigurationPrinter supported through reflection for backwards compatibility (only public method in the service object class itself)
(3) Removing test case checking for proper reflection support of the InventoryPrinter (not needed any longer)",27/Mar/13 19:07;fmeschbe;Also removed the obsolete ClassUtils class in Rev 1461806,27/Mar/13 19:08;fmeschbe;This is done now,06/Jun/13 15:35;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
exception in the event plugin,FELIX-3960,12636065,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,v_valchev,v_valchev,v_valchev,08/Mar/13 16:12,02/Aug/13 14:52,14/Mar/19 02:48,08/Mar/13 16:14,webconsole-event-plugin-1.0.2,,,,,,webconsole-event-plugin-1.1.0,,,,,,,Web Console,,,,,,0,,,,,,"The event plugin doesn't render all the received events. Occasionally we see the following stack trace in the log files:


java.lang.ClassCastException: [B cannot be cast to [Ljava.lang.Object;
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.eventJson(PluginServlet.java:361)
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.renderJSON(PluginServlet.java:183)
	at org.apache.felix.webconsole.plugins.event.internal.PluginServlet.doGet(PluginServlet.java:207)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:702)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:815)
	at org.apache.felix.webconsole.internal.WebConsolePluginAdapter.renderContent(WebConsolePluginAdapter.java:123)
	at org.apache.felix.webconsole.AbstractWebConsolePlugin.doGet(AbstractWebConsolePlugin.java:163)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:702)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:815)
	at org.apache.felix.webconsole.internal.WebConsolePluginAdapter.service(WebConsolePluginAdapter.java:211)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:493)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:418)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,316557,,,Fri Mar 08 16:14:16 UTC 2013,,,,,,0|i1imgn:,316899,,,,,,,,08/Mar/13 16:14;v_valchev;fixed in rev.1454445,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] service events can go missing resulting in hang,FELIX-3952,12635445,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,05/Mar/13 21:59,15/Oct/13 23:26,14/Mar/19 02:48,09/Mar/13 04:55,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,I got a thread dump showing a hang on AbstractComponentManager.waitForTracked.  To start with I'm going to change this to use a lock and condition object so we can detect timeouts and exit with an error logged.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,315938,,,Sat Mar 09 04:55:49 UTC 2013,,,,,,0|i1iinb:,316281,,,,,,,,"09/Mar/13 04:53;djencks;This was caused by a rather pathological situation, but we can avoid the deadlock anyway.

DS delayed service 1 registered under interface A

DS service 2 used a SingleDynamic greedy reference to bind 1 as A, causing 1 to be instantiated and activated.

The activate registered the same service under A.  This caused replacement of the binding in 2, so we unbound 1.  However we didn't register the event tracking number, say 6, until after the ungetService.

Now 1 has no references so it can be deactivated.... unregistering the just bound service and shutting down 2 with tracking number 7.  Deactivate waits for the tracking number 6 which never arrives.... 7 has to complete first.

The solution is to track before ungetting the service.",09/Mar/13 04:55;djencks;fixed r1454656,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassDefNotFoundError in Inventory bundle setup if Servlet API cannot be wired,FELIX-3947,12635086,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,04/Mar/13 08:12,06/Jun/13 15:34,14/Mar/19 02:48,04/Mar/13 08:18,inventory-1.0.0,,,,,,inventory-1.0.0,,,,,,,Inventory,,,,,,0,,,,,,"If the Servlet API cannot be wired to the Inventory bundle because it is missing, the bundle starts but the Activator throws a ClassDefNotFoundError because the Web Console plugin service cannot be created and registered.

It makes sense to dynamically bind the Servlet API to not prevent this bundle from starting. But then the Web Console plugin class must not be loaded to register the service factory service. Otherwise the API is still ""statically"" required and the bundle fails to properly start if not available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,315579,,,Thu Jun 06 15:34:55 UTC 2013,,,,,,0|i1igfj:,315922,,,,,,,,"04/Mar/13 08:18;fmeschbe;Fixed in Rev. 1452205

* Move Web Console Plugin registration from DefaultWebConsolePlugin class (static method with DefaultWebConsolePlugin creation) to InventoryPrinterManagerImpl
* Define constants for the DefaultWebConsolePlugin in ConsoleConstants to prevent loading the class
",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in BundleServlet.bundleDetails when not called through HTTP,FELIX-3946,12635084,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,04/Mar/13 07:52,06/Jun/13 15:34,14/Mar/19 02:48,04/Mar/13 08:04,webconsole-4.2.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"With the introduction of the Inventory bundle and the migration of ConfigurationStatusPrinter to InventoryPrinter, these services may be called through other channels than through the Web Console over HTTP.

Thus the appRoot and pluginRoot parameters to the BundleServlet.writeJSON method may be null and therefore the following code in the bundleDetails method throws a NullPointerException:

> bundleInfoDetails(jw, bundle, pluginRoot.substring(0, pluginRoot.lastIndexOf(""/"")), locale);

A number of fixes are required:

* Prevent NPE at this code location
* Clarify BundleInfoProvider interface that webConsoleRoot may be null
* Fix ServicesUsedInfoProvider to create VALUE type BundleInfo if webConsoleRoot is null",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,315577,,,Thu Jun 06 15:34:57 UTC 2013,,,,,,0|i1igf3:,315920,,,,,,,,"04/Mar/13 08:04;fmeschbe;Fixed as indicated in the initial description in Rev. 1452202:

In addition the ""nfo"" information generated by the BundleInfoProvider services is now also properly rendered in the printConfiguration output: For each block of BundleInfo objects the block key is printed as well as the BundleInfo.name fields. For example the services used by a bundle are printed like this:

>    Used Services: 
>        Service #1 of type(s) [org.osgi.service.packageadmin.PackageAdmin]
>        Service #45 of type(s) [org.apache.felix.webconsole.bundleinfo.BundleInfoProvider]
>        Service #41 of type(s) [org.osgi.service.http.HttpService, org.apache.felix.http.api.ExtHttpService]
>        Service #2 of type(s) [org.osgi.service.startlevel.StartLevel]
",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependency to annotations should not be in the plugin,FELIX-3941,12634760,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,01/Mar/13 06:50,06/Mar/13 12:59,14/Mar/19 02:48,01/Mar/13 06:55,maven-scr-plugin-1.10.0,,,,,,maven-scr-plugin-1.11.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"The dependency to the annotations should not be part of the maven project as this makes overriding the dependency error prone. If a project wants to use a newer version, it has to change the dependencies of the plugin and not for the project! Otherwise the hard coded dependency is still used from the maven plugin",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,315253,,,2013-03-01 06:50:17.0,,,,,,0|i1iefj:,315597,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Abstract class is not detected,FELIX-3940,12634758,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,01/Mar/13 06:45,12/Mar/14 08:55,14/Mar/19 02:48,01/Mar/13 06:46,scr annotations 1.8.0,,,,,,scr annotations 1.9.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"If a class is abstract like
@Component
public abstract class Hello

this is not detected as an abstract class and therefore validation fails",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,315251,,,2013-03-01 06:45:09.0,,,,,,0|i1ief3:,315595,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven-ipojo-plugin does not behave as bnd-ipojo-plugin,FELIX-3938,12634613,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,torito,torito,28/Feb/13 14:22,28/May/13 04:10,14/Mar/19 02:48,10/Apr/13 11:56,ipojo-manipulator-1.8.6,,,,,,ipojo-manipulator-1.10.0,,,,,,,iPOJO,,,,,,0,,,,,,"The iPOJO trunk version (1.9.0-SNAPSHOT), has the feature to use customized annotations to describe for example handlers  (without naming conventions as before). 
However, the behavior is not the same using maven-ipojo-plugin and bnd-ipojo-plugin. This new feature only works with the bnd-ipojo-plugin and it should work for both.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-10 11:55:48.383,,,no_permission,,,,,,,,,,,,315106,,,Tue May 28 04:10:20 UTC 2013,,,,,,0|i1idiv:,315450,,,,,,,,"10/Apr/13 11:55;clement.escoffier;After discussing with Issac directly, we realized that the issue is the visitor made by Issac.

The visitor must declare itself as 'root' and to ask the manipulator to manipulate the class (by setting an attribute called 'classname').",28/May/13 04:10;clement.escoffier;Fixed in the 1.10.0 release of the iPOJO manipulator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
osgi.identity capabilities from fragments can cause problems when resolving multiple fragments,FELIX-3934,12634166,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,26/Feb/13 14:52,07/Mar/13 19:48,14/Mar/19 02:48,04/Mar/13 21:31,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"If you are resolving multiple fragments against the same host at the same time then the osgi.identity capabilities provided by fragments can cause the wiring result to be miscalculated because a wrapped host is not used to populate the wires.  Here is a simple scenario:

Bundle-SymbolicName: A

Bundle-SymbolicName: F1
Fragment-Host: A

Bundle-SymbolicName: F2
Fragment-Host: A

Bundle-SymbolicName: B
Require-Capability: osgi.identity; filter:=""(osgi.identity=F2)""

During the final phase of resolution when calling populateWireMap, if the first Resource target is B then it will cause a recursive call to populateWireMap using the raw resouce of F2 since it provides the identity capability required by B.  This ultimately will result in another recursive call to populateWireMap using the raw resource of A since it provides the host capability required by F2.  This is wrong, we must ensure only wrappedResources for the host of a resolving fragment resource are passed to populateWireMap.

All other namespaces besides osgi.identity are considered payload capabilities from fragments.  This results in proper wrapping of the capabilities provided by fragments which then results in proper calls to populateWireMap since capabilities coming from fragments will be properly wrapped with their hosting resource.  But in the case of osgi.identity no wrapping is done for the capability so we are left with the raw capability when resolving a required wire to the osgi.identity.  

I will provide a patch with a potential fix.  The fix is probably not the most elegant approach.  It basically spacial cases the osgi.identity namespace in the recursive call to populateWireMap to check if the providing resource is a fragment and if so then find the target wrapped host for proper calls to populateWireMap
",All,,,,,,,,,,,,,,,,,,,26/Feb/13 14:59;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12570987/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-04 21:31:04.221,,,no_permission,,,,,,,,,,,,314659,,,Thu Mar 07 19:48:36 UTC 2013,,,,,,0|i1iarj:,315003,,,,,,,,26/Feb/13 14:59;tjwatson;Here is the possible fix.  I also added the scenario to Main (scenario 7).  When things go wrong you will see that the wiring result does not provide any wires for fragment F1.  I could not find an easy way to force the situation.  You basically have to try and force resource B to be the first resource to call populateWireMap.  If any other resource is first then the proper wrapped resource of A is used to populate the wire map.,"04/Mar/13 21:31;rickhall;I applied the patch with minor modifications, please close if satisfied. Thanks.",07/Mar/13 19:48;tjwatson;Thanks for release the fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creation Strategy does not work on KF3,FELIX-3920,12634106,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,26/Feb/13 10:39,26/Feb/13 13:13,14/Mar/19 02:48,26/Feb/13 13:12,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"On KF, the iPOJO's service creation strategy must implement `hashCode`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,314599,,,Tue Feb 26 13:12:15 UTC 2013,,,,,,0|i1iae7:,314943,,,,,,,,26/Feb/13 13:12;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO Proxies strategy cannot be configured dynamically on Equinox and KF,FELIX-3919,12634104,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,26/Feb/13 10:35,26/Feb/13 13:14,14/Mar/19 02:48,26/Feb/13 13:12,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"As equinox and KF takes a snapshots of the system properties before the startup of the framework, it's not possible to configure the proxies strategy of iPOJO dynamically using a system property using BundleContext.getProperty. An explicit call on System.getProperty has to be done.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,314597,,,Tue Feb 26 13:12:41 UTC 2013,,,,,,0|i1iadr:,314941,,,,,,,,26/Feb/13 13:12;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO Logger cannot be dynamically configured on Equinox and KF,FELIX-3918,12634103,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,26/Feb/13 10:33,26/Feb/13 13:14,14/Mar/19 02:48,26/Feb/13 13:13,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"As equinox and KF takes a snapshots of the system properties before the startup of the framework, it's not possible to configure the log level of iPOJO dynamically using a system property using BundleContext.getProperty. An explicit call on System.getProperty has to be done.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,314596,,,Tue Feb 26 13:13:12 UTC 2013,,,,,,0|i1iadj:,314940,,,,,,,,26/Feb/13 13:13;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bind/unbind methods are not generated,FELIX-3917,12633894,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,25/Feb/13 12:00,06/Mar/13 12:59,14/Mar/19 02:48,25/Feb/13 12:02,maven-scr-plugin-1.10.0,scr ant task 1.4.0,scr generator 1.4.0,,,,maven-scr-plugin-1.11.0,scr ant task 1.5.0,scr generator 1.5.0,,,,,SCR Tooling,,,,,,0,,,,,,"From the mailing list:

I just updated to maven-scr-plugin:1.10.0 and org.apache.felix.scr.annotations:1.8.0 and I have this component:

@Component(name = ""org.example.component"", immediate = true, policy = ConfigurationPolicy.IGNORE)
public final class ContextRegistrator {

    @Reference
    HttpService httpService;

}

I didn't have the bind/unbind method but the plugin generated the names and put them into the Descriptor. The build was success but then it didn't work because SCR didn't find the non existing methods so I added the generateAccessors property to the plugin:

                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-scr-plugin</artifactId>
                    <version>1.10.0</version>
                    <configuration>
                        <generateAccessors>false</generateAccessors>
                    </configuration>
                </plugin>

When I build the project now it fails with this exception.

Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.10.0:scr failed. NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.10.0:scr (generate-scr-scrdescriptor) on project openidm-httpcontext: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.10.0:scr failed.
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.10.0:scr failed.
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:110)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        ... 19 more
Caused by: java.lang.NullPointerException
        at org.apache.felix.scrplugin.helper.Validator.validateMethod(Validator.java:523)
        at org.apache.felix.scrplugin.helper.Validator.validateReference(Validator.java:465)
        at org.apache.felix.scrplugin.helper.Validator.validate(Validator.java:189)
        at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:214)
        at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:248)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        ... 20 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-01 07:14:54.166,,,no_permission,,,,,,,,,,,,314388,,,Fri Mar 01 07:14:54 UTC 2013,,,,,,0|i1i93j:,314733,,,,,,,,01/Mar/13 07:14;fmeschbe;Can you elaborate on what the problem was ? Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Full ZIP file has wrong file indices,FELIX-3916,12633764,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,fmeschbe,fmeschbe,23/Feb/13 19:36,06/Jun/13 15:34,14/Mar/19 02:48,24/Feb/13 14:04,inventory-1.0.0,,,,,,inventory-1.0.0,,,,,,,Inventory,,,,,,0,,,,,,"When downloading the full inventory ZIP file (previously called Configuration Status ZIP), all entries have indices where attachements are named and should have the same index as the output of the InventoryPrinter.

For example the ""Log Files"" printer has index 12, the attached files are expected to have the same index, e.g.

  012-Log Files
  012-Log Files.txt

In reality the entries are:

   011-Log Files
   012-Log Files.txt

Looks like index handling increments the index incorrectly when adding the attachements.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,314259,,,Thu Jun 06 15:34:58 UTC 2013,,,,,,0|i1i8av:,314604,,,,,,,,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Timing hole between ComponentHolder initial config and registration,FELIX-3915,12633738,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,23/Feb/13 07:14,15/Oct/13 23:26,14/Mar/19 02:48,23/Feb/13 07:28,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Right now when we create a component holder we first try to configure it with any existing configurations and then register it to obtain configuration events for it's pid.  Thus there is a timing hole after the query for existing configurations and before the registration when configuration events will be dropped.

I'm doing the initial configuration after adding the holder to the by-pid map.  Instead of missing the configuration entirely, it will be possible that the component would get configured twice.  I don't think this can cause any harm.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,314233,,,Mon Feb 25 04:39:36 UTC 2013,,,,,,0|i1i853:,314578,,,,,,,,23/Feb/13 07:28;djencks;Fixed in rev 1449277.,"23/Feb/13 20:08;djencks;I thought of a way to avoid possible double configuration on startup, rev 1449401.","25/Feb/13 04:39;djencks;Previous commit still has a timing hole, although it's small.  Patch has a way to use the R5 getChangeCount to eliminate the hole, and uses pretty much the same idea as r 1449401 for R4.  I can't find a R5 compendium in maven right now, so I'm using reflection.  Hoping to improve things...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Felix Event Admin documentation does not state its configuration PID,FELIX-3913,12633582,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,fmeschbe,angelovds,angelovds,22/Feb/13 09:56,27/Mar/13 20:49,14/Mar/19 02:48,27/Mar/13 14:11,,,,,,,,,,,,,,Event Admin,,,,,,0,,,,,,"The documentation for Event Admin on http://felix.apache.org/site/apache-felix-event-admin.html states that it can be configured using a Configuration Admin, but omits the PID of the service to configure.",,,,,,,,,,,,,,,,,,,,22/Feb/13 09:58;angelovds;FELIX-3913-Included-the-Event-Admin-PID-in-its-documentation.patch;https://issues.apache.org/jira/secure/attachment/12570454/FELIX-3913-Included-the-Event-Admin-PID-in-its-documentation.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-27 14:11:37.74,,,no_permission,,,,,,,,,,,,314077,,,Wed Mar 27 20:49:52 UTC 2013,,,,,,0|i1i76f:,314422,,,,,,,,22/Feb/13 09:58;angelovds;I've included a patch for the site which includes this information.,"27/Mar/13 14:11;fmeschbe;Thanks for providing the patch.

I have applied it in Rev. 1461588 and published the site.","27/Mar/13 20:49;angelovds;Right, the PID looks okay.

However, did you notice there is still some work to be done on the rest of that section? (For instance, the table still needs to be ported.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race conditions in DependencyManager,FELIX-3910,12633190,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,20/Feb/13 13:30,21/Jul/14 22:41,14/Mar/19 02:48,21/Jul/14 22:40,dependencymanager-3.0.0,,,,,,dependencymanager-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"In a multi threaded context, where dependencies are injected concurrently from different threads, we  came across some exceptions which seem to take place from dependencymanager.

I have tried to reproduce the problems using a paxexam test which I will commit.
Not all exceptions are reproduced by the test case, but I think that the testcase really reproduces a problem. 

I also have a candidate patch, which I will submit to this jira issue.


Here are the exceptions we have seen:

first stacktrace seen:
===============

ERROR: Bundle test.dm [21] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
        at org.apache.felix.dm.impl.dependencies.ServiceDependencyImpl.addedService(ServiceDependencyImpl.java:481)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1325)
        at org.apache.felix.dm.tracker.AbstractTracked.trackAdding(AbstractTracked.java:290)
        at org.apache.felix.dm.tracker.AbstractTracked.track(AbstractTracked.java:236)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChangedHideAspects(ServiceTracker.java:1206)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1101)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
        at test.dm.race.RaceTest$RegistrationHelper$1.run(RaceTest.java:104)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)


second exceptions:
==============

ERROR: EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
        at org.apache.felix.dm.impl.ComponentImpl.invokeCallbackMethod(ComponentImpl.java:686)
        at org.apache.felix.dm.impl.dependencies.ServiceDependencyImpl.invoke(ServiceDependencyImpl.java:704)
        at org.apache.felix.dm.impl.dependencies.ServiceDependencyImpl.invokeRemoved(ServiceDependencyImpl.java:666)
        at org.apache.felix.dm.impl.dependencies.ServiceDependencyImpl.removedService(ServiceDependencyImpl.java:520)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:1351)
        at org.apache.felix.dm.tracker.AbstractTracked.untrack(AbstractTracked.java:359)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChangedHideAspects(ServiceTracker.java:1285)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1101)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:878)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:732)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:662)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3587)
        at org.apache.felix.framework.Felix.access$000(Felix.java:40)
        at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:625)
        at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:117)
        at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:128)
        at org.apache.felix.dm.test.RaceTest$AFactory$2.run(RaceTest.java:151)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)

","jdk1.6, jdk1.7, linux fc16",,,,,,,,,,,,,,,,,,,20/Feb/13 13:59;pderop;FELIX-3910-patch;https://issues.apache.org/jira/secure/attachment/12570125/FELIX-3910-patch,24/May/13 18:00;pderop;FELIX-3910.patch.2;https://issues.apache.org/jira/secure/attachment/12584730/FELIX-3910.patch.2,03/Jun/13 20:57;pderop;FELIX-3910.patch.3;https://issues.apache.org/jira/secure/attachment/12585942/FELIX-3910.patch.3,25/Sep/13 11:11;pderop;FELIX-3910.patch.4;https://issues.apache.org/jira/secure/attachment/12604996/FELIX-3910.patch.4,10/Oct/13 10:25;pderop;FELIX-3910.patch.5.tgz;https://issues.apache.org/jira/secure/attachment/12607777/FELIX-3910.patch.5.tgz,25/Oct/13 17:42;pderop;FELIX-3910.patch.6.tgz;https://issues.apache.org/jira/secure/attachment/12610351/FELIX-3910.patch.6.tgz,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2013-02-28 19:21:50.846,,,no_permission,,,,,,,,,,,,313686,,,Fri Oct 25 18:50:18 UTC 2013,,,,,,0|i1i4rj:,314031,,,,,,,,"20/Feb/13 13:50;pderop;Committed a testcase (src/test/java/org/apache/felix/dm/test/RaceTest.java) in revision 1448165.

The testcase seems to reproduces some of the exceptions mentioned above, but the test is currently incomplete because it relies on the fact that the framework is firing a FrameworkEvent, when it catches some exceptions from 'service changed' service listener callback. But the pax exam version we are currently using is an old one, and uses an old version of Felix which is not firing events on service listeners exceptions ...


","20/Feb/13 13:59;pderop;Attached a proposed patch, which seems to resolve the issue.
Notice that the other dependencies (ConfigurationDependency, etc ...) might have to be patched in a similar way.

Mainly, the patch is located in the ServiceDependencyImpl.java and is simply reusing the SerialExecutor of the components the ServiceDependency is attached to. 

I would appreciate if some DM committers could take a look at this patch; may be I have missed something and there is another way to go ?

thanks. 
/pierre","28/Feb/13 19:21;marrs;I quickly glanced over the patch. I am a bit worried about the huge ""synchronized (this) {}"" blocks. Are you sure you're not invoking any other services, callbacks or framework methods while holding such a lock? I admit, I have to take a closer look later.","01/Mar/13 15:40;pderop;Thanks for looking at the patch;

I do agree, the synchronize block might be problematic. Initially, I did not think about any problems because I'm executing the serial executor outside the synchronized block.
But one of the components may execute its serial executor, and in this case some runnables may be executed while still holding the lock ...

I did this synchronization in order to avoid a race condition when multiple services are registered concurrently (when the ServiceDependencyImpl.addedService is called concurrently).
Indeed, If many services are registered concurrently, then we have to ensure that we always call ""ds.dependencyAvailable(ServiceDependencyImpl.this);"" before ""ds.dependencyChanged(ServiceDependencyImpl.this);"" ...







","24/May/13 17:59;pderop;If this may help, here is another patch (in FELIX-3910.patch.2), which avoid the problem from the first proposed patch: 
The addedService/modifiedService/removedService methods are now executed outside a synchronized block,
in a serial executor owed by the ServiceDependency instance.

The patch also concerns invokeRemoved method: the array of Tupple is retrieved from the synchronization lock, not outside.

I don't know if using a serial executor is the best way to resolve this issue, but It looks like the RaceTest is now running without any errors. Also checked that all tests are still successful.




",24/May/13 18:00;pderop;attached the second proposed patch.,"03/Jun/13 20:57;pderop;Attached an third version of the patch (FELIX-3910.patch.3), which has been aligned with recent commit made by Xander, in revision r1488970.","23/Sep/13 07:38;uiterlix;Ik just reviewed the patch. I see it introduces a SerialExecutor to prevent race conditions. With revision r1488970 I introduced a guarded block to guarantee execution of callback methods in the correct order. See the enqueueCallback, waitForCallbackLock, execute and releaseCallback methods. Maybe we can remove the serial executor introduced in the patch and use this mechanism for the non-aspect aware callbacks as well ?","25/Sep/13 11:10;pderop;I tried to follow your suggestion by reusing the same aspect locking mechanism for non aspect callbacks.

The patch is not finished but I prefer to attach it now (see FELIX-3910.patch.4) so you can take a look at.

patch description
=================

- if I understand correctly, the locking methods used by the aspect aware methods allow to serialize the execution of tasks, and other concurrent tasks are blocked until the currently executing task is done.
So, I have added the following method which I call from other methods needing to be serialized:

	private void executeExclusivelyOrBlock(Runnable task) {
		enqueueCallback(task);
		waitForCallbackLock(task);
		try {
			execute(task);
		} finally {
			releaseCallback(task);
		}
	}

- in the waitForCallbackLock, I did a minor optimization and replaced ""indexOf"" usage by this:

    private synchronized void waitForCallbackLock(Runnable runnable) {
    	while (m_injectionQueue.size() > 0 && m_injectionQueue.get(0) != runnable) {
    		try {
				wait();
			} catch (InterruptedException e) {
			}
    	}
    }

I think this might improve performance, especially when there is a high number of dependency services.
But perhaps, this optimization might be done later ...

- while doing the patch, I came across another synchronization hole that I did not notice and fix in the previous FELIX-3910.patch.3 patch: Indeed, there is a subtle issue in the addedService(ServiceReference ref, Object service) and removed(ServiceReference ref, Object service) methods, which I think have to be entirely serialized (by reusing your guarded methods): The race condition concerns the call to makeAvailable(), makeUnavailable() methods ...

So, in the FELIX-3910.patch.4: the addedService/removedService are serialized using the call to executeExclusivelyOrBlock method. I also serialized the modifiedService, but I am not sure for now if this is necessary:

    public void addedService(final ServiceReference ref, final Object service) {
    	executeExclusivelyOrBlock(new Runnable() {
			public void run() {
				addedServiceExclusively(ref, service);
			}
		});
    }
    
    private void addedServiceExclusively(ServiceReference ref, Object service) {
       // same code as in addedService, before the patch.
       ...
    }

    public void modifiedService(final ServiceReference ref, final Object service) {
    	executeExclusivelyOrBlock(new Runnable() {
			public void run() {
				modifiedServiceExclusively(ref, service);
			}
		});
    }
    
    private void modifiedServiceExclusively(ServiceReference ref, Object service) {
       // same code as in modifiedService, before the patch.
       ...
    }

    public void removedService(final ServiceReference ref, final Object service) {
    	executeExclusivelyOrBlock(new Runnable() {
			public void run() {
				removedServiceExclusively(ref, service);
			}
		});
    }
    
    private void removedServiceExclusively(ServiceReference ref, Object service) {
       // same code as in removedService, before the patch.
       ...
    }

With these patches, the ""RaceTest"" test seems to pass seamlessly. I ran it on a multi-core machine with 32 cores.


Comments/Questions:
==================

1) since the three addedService/modifiedService/removedService are now serialized, I wonder if the locking blocks are still necessary in the handleAspectAwareAdded methods ?
I think we shall remove the locking blocks from this method because we would then have a deadlock, since the addedService/removedService are already holding locks (using the executeExclusivelyOrBlock method).

Do you agree with this ? (I will provide FELIX-3910.patch.5 which does this, if you are OK).

2) in the handleAspectAwareAdded method, I may miss something but I wonder why the
tasks are executed while holding a lock on the ""rankings"" variable ?

		if (callbackRunnable != null) {
			waitForCallbackLock(callbackRunnable);
			synchronized (rankings) {
				releaseCallback(callbackRunnable);
				execute(callbackRunnable);
			}
		}

Could it be possible to have a deadlock if the callback blocks on a synchronization lock ?
In this case, then why not doing the following: 

		if (callbackRunnable != null) {
			waitForCallbackLock(callbackRunnable);
                        try {
		            execute(callbackRunnable);
			} finally {
	                    releaseCallback(callbackRunnable);
                        }			
		}
3) I'm currently wondering if the invokeAdded(DependencyService service) and invokeRemoved(DependencyService service) methods shall (or not) also also serialized ? I'm not sure for now ... what do you think ?

4) I have to modify the ""RaceTest"" test in order to use aspects as well.

thanks again for your feedback; feel free to propose another patch if you think I'm not on the right direction ...

/Pierre
","25/Sep/13 11:11;pderop;attached the new patch, which is using the locking blocks from the aspect aware dependencies.","08/Oct/13 10:07;pderop;Before submitting a patch, I need a better integration test than the RaceTest I committed in test/ submodule. I also need the latest pax exam, as well as latest felix framework.

So, as discussed with Marcel privately, I committed in revision 1530206., a new ""test2"" subproject, based on pax exam 3.0.0 and latest Felix framework. 

In that new test2 project, I committed an ""AspectRaceTest"" which reproduces some race conditions when aspect-aware services are concurrently registered/unregistered.

I also started to migrate the old api test ""test/src/test/java/org/apache/felix/dm/test/AspectBaseTest.java"", and moved it to test2/src/test/java/org/apache/felix/dependencymanager/test2/integration/api/AspectBaseTest.java

The work is in progress, and the intent is to progressively migrate all our existing tests from test/* into test2/*.  And once all is migrated, we'll finally remove old ""test"" module and rename new ""test2"" module into ""test"".

To run the tests, the ""mvn clean install"" command has to be executed (because tests are run in the integration phase, after the test phase. I need this in order to be able to generate some annotated components before executing tests.

Basically, migrating an old api test seems simple: the test has to extend TestBase, which already has a @Configuration annotation. If one maven dependency is missing, just add it to the TestBase class.
Notice that with the new pax exam 3.0.0, all testXXX methods must not take the BundleContext in parameter (but the super class has a ""context"" BundleContext class attribute, which can be reused by all existing tests).


The test2 module is organized like this:

* src/main/java/org/apache/felix/dependencymanager/test2/components/

This package contains some components used by integration tests. Most of the components from this package are meant to be used by only annotations tests, except  the ""Ensure"" helper, which is used by all integration tests.

*  src/test/java/org/apache/felix/dependencymanager/test2/integration/*

this package contains all integration tests

* src/test/java/org/apache/felix/dependencymanager/test2/integration/api/*

this package contains all API integration tests. For now, I have migrated the old test/.../AspectBaseTest.java into test2/src/test/java/org/apache/felix/dependencymanager/test2/integration/api/AspectBaseTest.java

There is also the new AspectRaceTest in the api package.

* src/test/java/org/apache/felix/dependencymanager/test2/integration/annotations/*

this package contains all Annotations integration tests. For now, I migrated the old test/.../SimpleAnnotationsTest.java into test2/src/test/java/org/apache/felix/dependencymanager/test2/integration/annotations//SimpleAnnotationsTest.java


I will now cleanup the patch and will submit it to this issue a bit later.

/Pierre","10/Oct/13 10:24;pderop;I have attached the patch candidate (FELIX-3910.patch.5.tgz).

can you please check if it works in your environment ?
All tests are passing, except the two following tests:

1) testDynamicComponentStateListingLifeCycle2(org.apache.felix.dm.test.ComponentLifeCycleTest)

I think this is a pending issue, and the test also fails without the patch

2)   testServiceRegistrationAndConsumption(org.apache.felix.dm.test.AspectAwareServiceDependencyTest)

This test also fails without the patch: I looked into it quickly and think that the pb might come from the dependency of the ""ServiceConsumerCallbacks"" component, which is optional and the swap method is called twice (the second swap call occurs when the ""ServiceConsumerCallbacks"" component is removed because the dependency is optional ... but this can be discussed in another jira issue.

patch description:
-----------------------

- Added a new ""BlockingSerialExecutor"" class which basically contains most of the logic that is currently done in the enqueueCallback, waitForCallbackLock, execute and releaseCallback methods: this class ensures that a single leader thread is executing a given task, and other threads are blocked until the leader thread is done. Additionally, I had to allow this new executor to be reentrant: when one executing task reschedule a new sub-task: then we need to execute the subtask immediately. This is required for instance when the serialized ""addedService(ServiceReference ref, Object service)"" method calls ""ds.dependencyAvailable(this)"", which then calls the serialized ""invokeAdded(final DependencyService service)"" method ... see the patch for more details.

I added this new class because I think we need to reuse it in other kind of dependencies, which may have also some concurrency issues.

- I then reworked a little the ServiceDependencyImpl class like this:

* all public methods are regrouped in the beginning of the class file, then comes the protected methods, and then the private methods

* serialized some public methods, in order to fix the race conditions.

* made protected the getService() method, which also impacts some minor modifs in the TemporalServiceDependencyImpl class.

* made volatile or final some attributes in the ServiceDependencyImpl / ComponentImpl / TemporalServiceDependencyImpl classes: Using pax-exam 3.0.0 (in test2), I came across some subtle problems regarding some attributes which are modified from a synchronized block, but read from unsynchronized blocks. So, to fix the problem, I had to use volatile or final ...

* did a small patch in the ServiceDependencyImpl.makeUnavailable method: 

    private synchronized boolean makeUnavailable() {
        if ((isAvailable()) && (m_isStarted == false || !m_tracker.hasReference())) {
            m_isAvailable = false;
            return true;
        }
        return false;
    }

Here, the ""m_isStarted"" flag must be checked in order to avoid a potential NPE, when m_tracker is null. The m_tracker can be null when many service dependencies are unregistered concurrently (it's tricky and difficult to explain ...).

Please notice that since most of the public methods in the ServiceDependencyImpl class are now serialized, it's now making sense to remove many synchronized blocks. 
However, I did not do it because I prefer to play safe for now, and we can probably do it in a next step. I prefer for now to minimize code modifications. The only synchronized blocks I had to comment are in the  handleAspectAwareAdded/handleAspectAwareRemoved methods: Indeed, these methods are now fully serialized; and since they invoke swap callbacks,  I prefer  to not hold any locks during swap callback invocations.

Let me know if this is not breaking anything from your side and if you are ok for a commit.
thanks;


",10/Oct/13 10:25;pderop;attached the patch for FELIX-3910,"25/Oct/13 17:42;pderop;Updated patch (FELIX-3910.patch.6.tgz) with the recent debugLog modifications committed today in ServiceDependencyImpl.java.

Also made volatile the m_isInstanceBound attribute in the DependencyBase class.
","25/Oct/13 18:50;pderop;commited the fix in revisions: 1535805, 1535807, 1535808, 1535809.",,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in BundleWiringImpl when m_disposed is true.,FELIX-3907,12632926,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,jnaous,jnaous,19/Feb/13 02:58,10/Mar/13 14:14,14/Mar/19 02:48,05/Mar/13 21:19,framework-4.2.0,,,,,,framework-4.2.1,,,,,,,Framework,,,,,,0,,,,,,"NullPointerException caused by lines 1472-1474 of {{org.apache.felix.framework.BundleWiringImpl}} when {{this.m_disposed == true}}. I don't know why {{this.m_disposed}} is true, but I'm guessing it's some sort of race condition. Stack trace follows:

{noformat}
(  Thread-5) [DEBUG] ntegration.NeratiDeployer java.lang.NullPointerException: null
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1472) ~[felix.jar:na]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75) ~[felix.jar:na]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1923) ~[felix.jar:na]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.lang.ClassLoader.loadClass(ClassLoader.java:247) ~[na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.lang.Class.getDeclaredFields0(Native Method) ~[na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.lang.Class.privateGetDeclaredFields(Class.java:2291) ~[na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.lang.Class.getDeclaredField(Class.java:1880) ~[na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at com.nerati.agent.events.RuntimeRecording.getClassId(RuntimeRecording.java:156) ~[agent-main-0.0.5-SNAPSHOT.jar:0.0.5-SNAPSHOT]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at com.nerati.agent.events.RuntimeRecording.writeAsJson(RuntimeRecording.java:118) ~[agent-main-0.0.5-SNAPSHOT.jar:0.0.5-SNAPSHOT]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at com.nerati.agent.client.ControllerClient.processRequest(ControllerClient.java:160) ~[agent-main-0.0.5-SNAPSHOT.jar:0.0.5-SNAPSHOT]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at com.nerati.agent.client.ControllerClient.putData(ControllerClient.java:131) ~[agent-main-0.0.5-SNAPSHOT.jar:0.0.5-SNAPSHOT]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at com.nerati.agent.client.ControllerManager.putData(ControllerManager.java:177) ~[agent-main-0.0.5-SNAPSHOT.jar:0.0.5-SNAPSHOT]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at com.nerati.agent.client.ControllerSendTask.run(ControllerSendTask.java:119) ~[agent-main-0.0.5-SNAPSHOT.jar:0.0.5-SNAPSHOT]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_37]
(  Thread-5) [DEBUG] ntegration.NeratiDeployer  at java.lang.Thread.run(Thread.java:662) [na:1.6.0_37]
{noformat}
",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-28 14:47:23.95,,,no_permission,,,,,,,,,,,,313422,,,Sun Mar 10 14:14:47 UTC 2013,,,,,,0|i1i34v:,313767,,,,,,,,"28/Feb/13 14:47;rickhall;Yes, I think this is essentially a race condition, but I think it is a valid race condition. We really don't hold any locks while class loading, so it is possible for threads to be trying to class load while other threads are performing lifecycle operations on the bundle. If someone refreshed your bundle while you were trying to load a class from it, this could cause it to be disposed, which means it no longer has a class loader. While the NPE isn't pretty in this case, the only other thing we could do here is check for null and throw a different exception (e.g., CNFE).","28/Feb/13 18:18;jnaous;Unfortunately, I think a CNFE can be just as (if not more) confusing. If I'm holding a reference to a class, how can the class suddenly become not found? Shouldn't the classloader disappear or become inaccessible only when we are certain that no other thread will access the class again (i.e. no thread has a reference to the class and ultimately the classloader)?","28/Feb/13 18:25;rickhall;Even if we allowed the class loader to remain accessible, this just leads to other errors. For example, if you invoke a method on a held instance that causes it to try to load another class from the bundle (one that hasn't been loaded yet), then it will fail with some sort of zip file not open exception (it may have even already been deleted).

In other words, once you are in this state everything is really fragile. If you have threads that are still trying to do stuff, this is generally a sign that someone is either a) not stopping threads when they should (i.e., when their creating bundle is stopped) or b) not releasing objects obtained from stale bundles.

You cannot expect class loading to continue normally for a refreshed bundle.","28/Feb/13 18:34;jnaous;I see. Would it be difficult to make it such that things continue to operate normally for loaded classes, but if a thread tries to do anything for a new class, then we get a CNFE? I agree this is kind of weird, and something bad is happening. I'm just thinking about what can be done to minimize diversion from what is expected to happen with normal classloaders...","28/Feb/13 18:53;rickhall;We could create an internal method that continues to return the class loader in this case, but this is really just trying to address the symptoms rather than the cause. The fact that you have threads still running and expecting proper behavior from classes on a refreshed (possibly uninstalled) bundle is a major bug you need to resolve.

Regarding throwing a ""good"" exception, I've looked into trying to throw a ""good"" exception in these situations and it turned out to be more difficult than it sounds, which is why we still don't do it.

","28/Feb/13 19:26;jnaous;Agreed, we should not hold onto to classes and we know exactly where the issue in our application is arising from. I am not actually thinking about my application, but just in general. Wouldn't we want the behavior to match what happens in a non-osgi environment as much as possible? I maybe unclear here on what OSGI requires, but shouldn't all resources related to a classloader (e.g the jar file, which I assume throws the zip exception) and the related object graph remain available, but just unused to instantiate new classes from other bundles until all references to the old classloader are GC'ed and only then do we make other related resources disappear (such as closing jars, deleting files, etc)?

Re ""good"" exception, maybe there should be a check for m_disposed at the beginning of every method call in BundleClassLoader that throws an exception (maybe ClassLoaderNoLongerAvailableException or BundleInaccessibleException) if m_disposed is true? Or is that what you say is difficult?","28/Feb/13 20:06;rickhall;The degree of ""closeness"" just depends on the particular scenario. If a thread has already loaded all classes it will ever need, it may never notice that a refreshed bundle is gone. On the other hand, a thread that still has plenty of class loads it needs to do will immediately run into ""differences"". There is a complete spectrum of possibilities and we can't do anything to paper over what happens when a thread stumbles into the situation.

Regarding what the spec requires, let's be clear, we are talking about a situation where the bundle has been refreshed, not simply in some potential limbo state like after an update or uninstall. The whole point of ""refreshing"" is that this is when the framework let's go of everything that is currently in a limbo state. So, in short, no it won't nor can it keep stuff around (e.g., if you uninstall and refresh a bundle, it is gone, period).

Regarding a ""good"" exception, the issue really is that there are race conditions all over the place since we don't hold any locks, plus there are abstractions in place that hide knowledge we need. So, it is just difficult. Granted, we've refactored a bit since I last looked into this, so perhaps it would be possible to simply check the disposed status before trying to get any new bytes for a given class loader and simply fail at that point with a CNFE.

That'd be about the best we could do, perhaps. And again, to be clear, this would not eliminate weird exceptions since there is a race condition of checking the disposed state and someone else disposing of the bundle. Perhaps it makes them less likely, though.",28/Feb/13 20:10;jnaous;Thanks for the clarifications!,"05/Mar/13 21:19;rickhall;Ok, I committed a patch that will allow misbehaving threads to continue to issue class loads on disposed class loaders for existing classes; however, if they try to load a class from it that hasn't already been loaded, they will get a CNFE. Not sure how much help (or if any) this will be, but it is probably the best we can do without a major effort. Please close if satisfied. Thanks.","05/Mar/13 22:33;jnaous;Looks good. Just a few comments from looking at the change.

- There might be a time-of-check-to-time-of-use bug between getClassLoader() and getClassLoaderInternal(). You probably want to check if m_disposed == true again in getClassLoaderInternal() and return null if so.
- Another reason for the check: the internal code is using getClassLoaderInternal, which doesn't seem to return null if m_disposed is true (actually, I don't know what will be stored in m_classloader if m_disposed is true at that point). Don't we want to check inside that internal call for m_disposed = true again and return false?

Thanks.","06/Mar/13 00:00;rickhall;There is another check of m_disposed inside of getClassLoaderInternal()...

The getClassLoader() method is spec and is supposed to return null if the wiring is disposed. That's what was causing the NPE for you. The whole point of this patch is to introduce an internal method that will return a non-null class loader if one exists, that's what getClassLoaderInternal() does. The only time it still returns null is if the class loader hasn't been created yet and the wiring is already disposed, which I believe can happen since we defer bundle class loader creation until someone actually loads a class from a bundle.

But, in general, getClassLoaderInternal() should always return non-null and getClassLoader() will return non-null if the wiring hasn't been disposed. The wiring internals now use getClassLoaderInternal() so that classes can continue to be loaded, even after disposal of the wiring. Of course, this only applies to classes that the class loader has already loaded, any attempts to load new bytes will result in a hopefully more meaningful exception message.","06/Mar/13 19:10;jnaous;ok, but the tocttou bug remains in getClassLoader(). If m_disposed is false, m_disposed should be checked again in a synchronized block before calling getClassLoaderInternal() so that it returns null. Otherwise, right after the first unsynched check, and before calling getClassLoaderInternal(), another thread may cause m_disposed to become true, at which point we would be returning the classloader instead of null.","08/Mar/13 01:42;rickhall;Technically, you are correct, but that race condition is no different than if we serialize and a second thread disposes of the bundle wiring just after a first thread exits getClassLoaderInternal() but before it returns to the first caller. There is no way to differentiate between the two cases, so in effect it doesn't make a difference.",08/Mar/13 02:59;jnaous;I see. Thanks.,"10/Mar/13 06:46;ceefour;does the fix display the requested class to be loaded? This will help resolution of #FELIX-3477, #FELIX-3763 and #ARIES-951.","10/Mar/13 14:14;rickhall;If you look at the patch associated with this issue, you can see the exception looks like this:

1996                    throw new ClassNotFoundException(
1997	                    ""Unable to load class '""
1998	                    + name
1999	                    + ""' because the bundle wiring for ""
2000	                    + m_wiring.m_revision.getSymbolicName()
2001	                    + "" is no longer valid."");
2002	 ",,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration of Http Service context path broken after upgrade to Jetty 7,FELIX-3906,12632723,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,rombert,,16/Feb/13 22:16,28/Sep/13 17:40,14/Mar/19 02:48,27/Mar/13 14:15,http-2.2.2,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,Revision 1346763 updated the Jetty server to 7.6.3 but removed the support for custom context paths.,,,,,,,,,,,,,,,,,,,,16/Feb/13 22:17;FELIX-3906-1.diff;https://issues.apache.org/jira/secure/attachment/12569691/FELIX-3906-1.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-16 22:17:32.307,,,no_permission,,,,,,,,,,,,313219,,,Wed Mar 27 14:15:50 UTC 2013,,,,,,0|i1i1vz:,313565,,,,,,,,16/Feb/13 22:17;rmuntean;Trivial patch which restores context path support.,27/Mar/13 14:15;fmeschbe;Thanks for providing the patch. I have applied it in Rev. 1461591.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Single dynamic mandatory reference problem on target filter update,FELIX-3902,12632513,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,15/Feb/13 01:54,04/Sep/14 08:04,14/Mar/19 02:48,15/Feb/13 02:35,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"situation:  MANDATORY single dynamic reference with a target filter that has 2 services that satisfy it.
Remove one service. (reference correctly updates to the other one)
Now change the filter so the second service still satisfies the new filter.  Nothing should happen, we have already bound the correct service.  However, the service is unbound.

The problem is that we didn't update the set of ""old matches"" by removing the new matches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,313009,,,Fri Feb 15 02:35:38 UTC 2013,,,,,,0|i1i0lb:,313355,,,,,,,,"15/Feb/13 02:35;djencks;test in rev 1446432
fix in rev 1446433",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@HandlerDeclaration do not convert DOM Attributes to iPOJO Attributes correctly,FELIX-3900,12632339,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,14/Feb/13 09:17,28/May/13 04:10,14/Mar/19 02:48,25/Apr/13 13:55,ipojo-manipulator-1.8.6,,,,,,ipojo-manipulator-1.10.0,,,,,,,iPOJO,,,,,,0,,,,,,"The following xml declaration is incorrectly transformed:
@HandlerDeclaration(""<sh:command xmlns:sh='org.ow2.shelbie' sh:type='stateful'/>"")

Transformed metadata:
org.ow2.shelbie:command { $http://www.w3.org/2000/xmlns/:xmlns:sh=""org.ow2.shelbie"" $org.ow2.shelbie:sh:type=""stateful""}

Notice the double ':', the prefix is printed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-25 13:55:21.996,,,no_permission,,,,,,,,,,,,312835,,,Tue May 28 04:10:20 UTC 2013,,,,,,0|i1hzin:,313181,,,,,,,,25/Apr/13 13:55;clement.escoffier;Fixed in trunk,28/May/13 04:10;clement.escoffier;Fixed in the 1.10.0 release of the iPOJO manipulator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Null reference are injected with @Bind(optional=false) method on iPOJO components,FELIX-3896,12631935,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,benoitf,benoitf,12/Feb/13 12:35,08/Mar/13 09:05,14/Mar/19 02:48,03/Mar/13 18:09,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"There are two components in the attached sample

One constructor is failing
This results in providing ""null"" reference to the other component which is requiring an instance of the given interface.
We shouldn't send ""null"" reference for a component that requires a valid instance of the component.",,,,,,,,,,,,,,,,,,,,12/Feb/13 12:35;benoitf;ipojobug.tgz;https://issues.apache.org/jira/secure/attachment/12568969/ipojobug.tgz,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-26 14:23:26.925,,,no_permission,,,,,,,,,,,,312431,,,Fri Mar 08 09:05:09 UTC 2013,,,,,,0|i1hx0n:,312777,,,,,,,,12/Feb/13 12:35;benoitf;Sample to reproduce the issue,26/Feb/13 14:23;clement.escoffier;iPOJO should check that we never inject null within bind methods.,03/Mar/13 18:09;clement.escoffier;Fixed in trunk. Please check and close the issue.,08/Mar/13 09:05;benoitf;thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"iPOJO instance is not shown (with the ""arch"" commands) if constructor is failing",FELIX-3895,12631933,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,benoitf,benoitf,12/Feb/13 12:32,13/May/13 08:06,14/Mar/19 02:48,08/May/13 17:00,ipojo-runtime-1.8.6,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"Here is a sample with two iPOJO components
There is an invalid constructor so the instance is not shown instead of being flagged as Invalid

Note that by commenting out dependency on the Printer component (disable @Bind and @Unbind) of the DefaultPrintService allows to show the instance by using ""arch commands"".

So if a constructor is failing, the component should be still available but in an invalid state",,,,,,,,,,,,,,,,,,,,12/Feb/13 12:33;benoitf;ipojobug.tgz;https://issues.apache.org/jira/secure/attachment/12568968/ipojobug.tgz,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-08 17:00:32.184,,,no_permission,,,,,,,,,,,,312429,,,Mon May 13 08:06:15 UTC 2013,,,,,,0|i1hx07:,312775,,,,,,,,12/Feb/13 12:33;benoitf;Sample to reproduce the issue,08/May/13 17:00;clement.escoffier;Fixed in trunk,13/May/13 08:06;sauthieg;I can now see STOPPED instances when I list instances.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] synchronization around registerService can create deadlocks,FELIX-3891,12630816,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,05/Feb/13 07:11,04/Sep/14 08:04,14/Mar/19 02:48,19/Mar/13 21:46,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We've found a deadlock from the synchronization around the service registration.  This particular one comes from two threads trying to activate the service concurrently.  The losing thread came from PackageAdmin refresh bundles thread, whereas the winning thread triggered another component creation whose activate method calls Package admin to do some work.  (this is eclipse package admin, not sure if felix has the same problem).

Thinking about it some more I don't think we need to synchronize, it doesn't matter which thread wins the service registration as long as it's registered soon.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,311312,,,Tue Mar 19 21:46:55 UTC 2013,,,,,,0|i1hq47:,311658,,,,,,,,"10/Feb/13 08:05;djencks;rev 1444488, 1444489, 1444490, 1444492, 1444493",02/Mar/13 05:32;djencks;original solution really doesn't work for concurrent register/unregister requests.,03/Mar/13 08:04;djencks;New fix in rev 1452019.  This one keeps a deque of concurrent registration state change requests and uses the first thread to process all of them.  It also discards requests that duplicate the previous state change request.,"03/Mar/13 19:50;djencks;Use in real software reveals something is wrong.... get stuff like registration change queue [unregistered, unregistered, unregistered] whereas consecutive elements are supposed to be different.",19/Mar/13 21:46;djencks;Last set of fixes seem to work OK,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] We might try to unbind a service we couldn't get and didn't bind,FELIX-3890,12630813,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,05/Feb/13 06:49,04/Sep/14 08:04,14/Mar/19 02:48,10/Feb/13 08:04,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We get the matching service references, and if the component is satisfied we then try to get the services, but only bind the services we actually get.  But the unbind logic unbinds all the service references whether or not we ever got the service.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,311309,,,Sun Feb 10 08:04:22 UTC 2013,,,,,,0|i1hq3j:,311655,,,,,,,,10/Feb/13 08:04;djencks;rev 1444487,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException during resolution of Require-Bundle: system.bundle,FELIX-3887,12630498,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,rickhall,njbartlett,njbartlett,02/Feb/13 02:57,04/Feb/13 22:22,14/Mar/19 02:48,04/Feb/13 22:22,framework-4.0.3,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"During resolution the following exception is seen:

java.lang.ClassCastException: [Ljava.lang.String; cannot be cast to java.lang.Comparable
java.lang.ClassCastException: [Ljava.lang.String; cannot be cast to java.lang.Comparable
        at org.apache.felix.framework.resolver.CandidateComparator.compare(CandidateComparato
r.java:50)
        at org.apache.felix.framework.resolver.CandidateComparator.compare(CandidateComparato
r.java:28)
        at java.util.TreeMap.compare(TreeMap.java:1188)
        at java.util.TreeMap.put(TreeMap.java:531)
        at java.util.TreeSet.add(TreeSet.java:255)
        at org.apache.felix.framework.StatefulResolver$ResolverStateImpl.getCandidates(Statef
ulResolver.java:1309)
        at org.apache.felix.framework.resolver.Candidates.populateRevision(Candidates.java:27
5)
        at org.apache.felix.framework.resolver.Candidates.populate(Candidates.java:158)
        at org.apache.felix.framework.resolver.ResolverImpl.resolve(ResolverImpl.java:89)
        at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:168)
        at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3819)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:944)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:931)

This occurs when resolving a bundle that has ""Require-Bundle: system.bundle"". By debugging the framework, I see that the osgi.wiring.bundle attribute of the osgi.wiring.bundle capability of the System Bundle has a value which is a String array: ""[org.apache.felix.framework, system.bundle]"". The cast on line 50 of CandidateComparable is therefore invalid in this one particular case.

On Java 1.6 this line of code is never reached; I'm not yet sure why.","java version ""1.7.0_03"" OpenJDK Runtime Environment (IcedTea7 2.1.1pre) (7~u3-2.1.1~pre1-1ubuntu2)
OpenJDK Client VM (build 22.0-b10, mixed mode, sharing)

DOES NOT affect Java 1.6
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-02 03:48:40.395,,,no_permission,,,,,,,,,,,,310992,,,Mon Feb 04 22:22:42 UTC 2013,,,,,,0|i1ho4v:,311337,,,,,,,,"02/Feb/13 03:48;rickhall;I remember someone else mentioning this bug a little while back and I even remember looking into it, but I cannot find a bug report, nor can I see a commit message that says it addresses this. However, it does appear to work on trunk:

g! lb
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (4.1.0.SNAPSHOT)
    1|Active     |    1|Apache Felix Bundle Repository (1.6.6)
    2|Active     |    1|Apache Felix Gogo Command (0.12.0)
    3|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
    4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
    5|Installed  |    1|require.system.bundle.test (0.0.0)
g! headers 5

Bundle 5
--------
Bundle-ManifestVersion = 2
Bundle-SymbolicName = require.system.bundle.test
Created-By = 1.6.0_37 (Apple Inc.)
Manifest-Version = 1.0
Require-Bundle = system.bundle
g! start 5
DEBUG: WIRE: [5.0] osgi.wiring.bundle; (osgi.wiring.bundle=system.bundle) -> [0]
g! 

So maybe it is fixed. Could you try trunk?","02/Feb/13 03:53;rickhall;I deployed new 4.1.0-SNAPSHOTs for framework, main, and main.distribution.","02/Feb/13 19:35;njbartlett;Richard: confirmed, this is working in trunk. Many thanks.","04/Feb/13 22:22;rickhall;I will assign this to 4.2.0 since it is fixed in trunk, even though I can't seem to find the exact fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve error message for empty *.java-File,FELIX-3886,12630400,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,js@cedarsoft.com,js@cedarsoft.com,01/Feb/13 17:13,18/Feb/13 08:05,14/Mar/19 02:48,05/Feb/13 15:22,maven-scr-plugin-1.9.0,,,,,,maven-scr-plugin-1.10.0,scr ant task 1.4.0,scr generator 1.4.0,,,,,SCR Tooling,,,,,,0,,,,,,"I have an empty file within my sources dir: ""TrpRunner.java"". This contains no java source code (everything commented out).
The scp-plugin fails with the following error message:

Unable to load compiled class: com.cedarsoft.deger.ui.TrpRunner -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.9.0:scr (generate-scr-scrdescriptor) on project DEGERsoft: Unable to load compiled class: com.cedarsoft.deger.ui.TrpRunner
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:213)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.MojoFailureException: Unable to load compiled class: com.cedarsoft.deger.ui.TrpRunner
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:263)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: org.apache.felix.scrplugin.SCRDescriptorFailureException: Unable to load compiled class: com.cedarsoft.deger.ui.TrpRunner
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:154)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:149)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:248)
	... 21 more
Caused by: java.lang.ClassNotFoundException: com.cedarsoft.deger.ui.TrpRunner
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:141)
	... 23 more


",Linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-01 20:32:51.007,,,no_permission,,,,,,,,,,,,310895,,,Tue Feb 05 15:22:31 UTC 2013,,,,,,0|i1hnjj:,311240,,,,,,,,"01/Feb/13 20:32;cziegeler;Just curious, what is the use case for an empty Java file?","01/Feb/13 21:47;js@cedarsoft.com;Well, there is no real use case. I am using the scr-plugin in a lot of projects and never found this bug until today.
But sometimes it happens that one is commenting out all code. Don't know exactly why. One should think that today in the ages of VCS, those tools should solve that situations....

I think my main concern is the bad/misleading error message. It took me quite some time to find the problem, since my IDE could't jump to that class.","05/Feb/13 05:18;cziegeler;Thanks for the info - well, you could workaround this my setting <scanClasses>true</scanClasses> for the configuration of the maven SCR plugin.

Other than that, I agree that the error message is missleading, I've changed the message a little bit. What do you think?",05/Feb/13 10:45;js@cedarsoft.com;Well. Improved error message is sufficient for me.,05/Feb/13 15:22;cziegeler;Thanks - setting this to fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Move OS and processor aliases to configuration properties,FELIX-3883,12630205,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bobpaulin,rickhall,rickhall,31/Jan/13 20:15,27/Apr/15 07:03,14/Mar/19 02:48,09/Jan/15 03:04,framework-4.2.0,,,,,,framework-4.6.0,,,,,,,Framework,,,,,,0,,,,,,"Currently, we hard code our OS and processor aliases for matching native code libraries. This is bad since it requires us to edit source code to add aliases. It would be better if we moved these to configuration properties, something like this:

    felix.native.os.[normalname] = alias1, alias2, etc.
    felix.native.arch.[normalname] = alias1, alias2, etc.

More concretely:

    felix.native.os.win32 = Windows 8, Windows 7, Windows Vista
    felix.native.arch.x86 = i386, i486, i586

We could then use the properties to define as many ""normal names"" as we want and associate all their known aliases, so at run time all names could be normalized.

We can include a default set of normal names and aliases in default.properties, but allow people to override any of them (or add new normal names/aliases) in config.properties.",,,,,,,,,,,,,,FELIX-4757,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-09 03:04:40.783,,,no_permission,,,,,,,,,,,,310701,,,Fri Jan 09 03:04:40 UTC 2015,,,,,,0|i1hmcf:,311046,,,,,,,,09/Jan/15 03:04;bobpaulin;Addressed with rev 1650432,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"iPOJO @JMXProperty(rights="".."") bug",FELIX-3881,12630123,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,kaufholdr,kaufholdr,31/Jan/13 11:44,28/May/13 04:14,14/Mar/19 02:48,28/Feb/13 18:27,iPOJO-1.8.0,,,,,,,,,,,,,iPOJO,,,,,,0,,,,,,"A null point exception is thrown when the JMXProprty Annotation is specified with a incorrect rights (example @JMXProperty(rights=""rw"")).

 ",,,,,,,,,,,,,,,,,,,,31/Jan/13 11:45;kaufholdr;ipojo-annotations-JMX-defaultrights.txt;https://issues.apache.org/jira/secure/attachment/12567349/ipojo-annotations-JMX-defaultrights.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-28 18:27:57.599,,,no_permission,,,,,,,,,,,,310619,,,Thu Feb 28 18:27:57 UTC 2013,,,,,,0|i1hlu7:,310964,,,,,,,,31/Jan/13 11:45;kaufholdr;This resolves the bug.,28/Feb/13 18:27;clement.escoffier;Fixed in trunk. Please close if it's ok for you.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] After configuration changes target filter on optional ref, matching services are not bound",FELIX-3875,12629646,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,29/Jan/13 06:50,04/Sep/14 08:13,14/Mar/19 02:48,03/Feb/13 01:57,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Given an optional reference in a component, and a created component instance, if you change the target filter with a config admin configuration change, newly matching services are not bound.

The problem is that the new ServiceTracker is not activated.

There's a related problem that no-longer-matching services are not unbound.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,310142,,,Sun Feb 03 01:57:24 UTC 2013,,,,,,0|i1hiwf:,310487,,,,,,,,03/Feb/13 01:57;djencks;Fixed with rev 1439755 (test) and 1439756 (fix),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make the reference to json.org consistent in DM artifacts,FELIX-3873,12629491,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,marrs,marrs,28/Jan/13 08:35,22/Jul/14 08:17,14/Mar/19 02:48,22/Jul/14 08:17,,,,,,,dependencymanager.annotations-3.2.0,,,,,,,Dependency Manager,,,,,,0,,,,,,"As Karl mentioned in the vote:

""It seems that the json.org dependency is somewhat inconsistently mentioned
sometimes inside the NOTICE and sometimes only in the dependencies. That
should probably be made consistent.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-01 17:31:23.416,,,no_permission,,,,,,,,,,,,309987,,,Tue Jul 22 08:17:30 UTC 2014,,,,,,0|i1hhxz:,310332,,,,,,,,"01/Feb/13 17:31;pderop;thanks for reporting. I did the following fixes:

- added a missing mention to json in annotation/NOTICE

- removed the json reference in the ""Used"" section of annotation/DEPENDENCIES, since json is
already mentioned in the first ""Included"" section of this file.

- also fixed copyright dates in runtime/DEPENDENCIES, and annotation/DEPENDENCIES

",01/Feb/13 17:32;pderop;Closing this issue. Please reopen if I have missed something.,22/Jul/14 08:17;pderop;reopened issue to set the fix-version.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] confusing logic around determining if modified method can be called on config update,FELIX-3870,12629236,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,25/Jan/13 08:11,04/Sep/14 08:13,14/Mar/19 02:48,07/Feb/13 07:35,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"There are some logic problems in the code deciding if the modified method can be called.  We're seeing deactivation/reactivation if a config update happens while a component instance is being created.  Also the target filters are reset before we compare whether they have changed in a way to allow dynamic update.

First step is to straighten out the logic.

Second step will be to assure that the spec constraint that activate/modify/deactivate cannot be called concurrently is satisfied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,309203,,,Thu Feb 07 07:35:20 UTC 2013,,,,,,0|i1e5fj:,290809,,,,,,,,07/Feb/13 07:35;djencks;fixed by 1438383 and 1438607,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Drop support for JDK 1.4 completely,FELIX-3867,12628890,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,23/Jan/13 12:55,18/Feb/13 08:05,14/Mar/19 02:48,23/Jan/13 12:56,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,maven-scr-plugin-1.10.0,scr ant task 1.4.0,scr generator 1.4.0,,,,,SCR Tooling,,,,,,0,,,,,,"The plugin and the generator already use Java 5 as the base, however the IOUtils class still contains compat code for broken XML serializers in JDK 1.4.x versions.
We can safely remove this code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,308372,,,Wed Jan 23 12:56:17 UTC 2013,,,,,,0|i1c0uv:,278269,,,,,,,,23/Jan/13 12:56;cziegeler;Dropped the special namespace handling detection,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Deadlock when service is removed during activation,FELIX-3862,12628644,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Jan/13 00:39,04/Sep/14 08:13,14/Mar/19 02:48,25/Jan/13 08:06,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"There's a chance to fail to obtain a write lock when there's a component with at least two references and one is unregistered during activation.  The symptoms are that one thread says it's waiting for the tracked events to all complete and another thread can't get a lock.

log:
thread that is trying to activate and discovers one of the dependencies went away:
waitForTracked trackingCount: 26 ceiling: 27 missing: [24]

Thread trying to deal with removed dependency:
 Component deactivation threw an exception Bundle:XXXXX(id=111) java.lang.IllegalStateException: Could not obtain lock

end of thread dumps:
  LockInfo: java.util.TreeSet@d04962e LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.Object.wait(Object.java:167)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.waitForTracked(AbstractComponentManager.java:251)
  org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:1366)
  org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:281)
  org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:121)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1527)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:619)
  org.apache.felix.scr.impl.manager.DependencyManager$SingleDynamicCustomizer.addedService(DependencyManager.java:660)
  org.apache.felix.scr.impl.manager.DependencyManager$SingleDynamicCustomizer.addedService(DependencyManager.java:614)
  org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1472)
  org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerAdded(ServiceTracker.java:1396)
  org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.trackAdding(ServiceTracker.java:1208)
  org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.track(ServiceTracker.java:1146)
  org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1427)
  org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:107)

------------------
java.lang.IllegalStateException: Could not obtain lock
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.obtainWriteLock(AbstractComponentManager.java:177)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1323)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1608)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:624)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleDynamicCustomizer.removedService(DependencyManager.java:720)
	at org.apache.felix.scr.impl.manager.DependencyManager$SingleDynamicCustomizer.removedService(DependencyManager.java:614)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:1498)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:1396)
	at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.untrack(ServiceTracker.java:1256)
	at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1435)
	at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:107)


----------
I haven't been able to figure out how to reproduce this in an integration test but the problem seems to be that the some of the customizer added() methods track their tracking count after they try to activate rather than before.  Changing this seems to result in fixing the problem.  My evidence is that before the change I got 3 failures in 100 test runs and after the change 0.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,307134,,,Fri Jan 25 08:06:27 UTC 2013,,,,,,0|i1a5hj:,267355,,,,,,,,"25/Jan/13 08:06;djencks;fixed by rev 1437107 (logging), 1437108 (actual fix)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Service descriptor written in wrong encoding,FELIX-3858,12628528,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,mirko@zeiban.de,mirko@zeiban.de,21/Jan/13 10:12,12/Mar/14 08:55,14/Mar/19 02:48,23/Jan/13 12:19,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,maven-scr-plugin-1.10.0,scr ant task 1.4.0,scr generator 1.4.0,,,,,SCR Tooling,,,,,,0,,,,,,If a Java source file contains a service.description @Property annotation with UTF-8 chars the resulting XML descriptor in invalid.,UTF-8 Sourcefile Encoding,,,,,,,,,,,,,,,,,,,21/Jan/13 10:15;mirko@zeiban.de;IOUtils.diff;https://issues.apache.org/jira/secure/attachment/12565760/IOUtils.diff,21/Jan/13 10:14;mirko@zeiban.de;scr-utf8.zip;https://issues.apache.org/jira/secure/attachment/12565759/scr-utf8.zip,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-23 12:19:41.99,,,no_permission,,,,,,,,,,,,306612,,,Wed Jan 23 12:19:41 UTC 2013,,,,,,0|i19wzj:,265978,,,,,,,,21/Jan/13 10:14;mirko@zeiban.de;Project demonstrating the Problem.,21/Jan/13 10:15;mirko@zeiban.de;Patch to resolve the issue.,"23/Jan/13 12:19;cziegeler;Many thanks for your patch, Mirko - I'Ve applied it to trunk",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InstallBundle throws ClassCastException: java.util.jar.Attributes$Name cannot be cast to java.lang.String,FELIX-3852,12628062,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,rickhall,sahoo,sahoo,17/Jan/13 16:22,31/Jan/13 15:27,14/Mar/19 02:48,31/Jan/13 15:27,framework-4.2.0,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"Caused by: org.osgi.framework.BundleException: Could not create bundle object.
    at org.apache.felix.framework.Felix.installBundle(Felix.java:2885)
    at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:165)
    at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:138)
    at org.glassfish.extras.osgicontainer.OSGiDeployer.installBundle(OSGiDeployer.java:114)
    ... 47 more
Caused by: java.lang.ClassCastException: java.util.jar.Attributes$Name cannot be cast to java.lang.String
    at org.apache.felix.framework.util.StringMap.putAll(StringMap.java:89)
    at org.apache.felix.framework.util.StringMap.<init>(StringMap.java:43)
    at org.apache.felix.framework.cache.DirectoryRevision.getManifestHeader(DirectoryRevision.java:92)
    at org.apache.felix.framework.BundleImpl.createRevision(BundleImpl.java:1188)
    at org.apache.felix.framework.BundleImpl.<init>(BundleImpl.java:95)
    at org.apache.felix.framework.Felix.installBundle(Felix.java:2832)
    ... 50 more
",,,,,,,,,,,,,,,,,,,,24/Jan/13 18:07;rickhall;FELIX-3852-updated.txt;https://issues.apache.org/jira/secure/attachment/12566335/FELIX-3852-updated.txt,17/Jan/13 16:28;sahoo;Felix-3852.patch;https://issues.apache.org/jira/secure/attachment/12565342/Felix-3852.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-23 00:31:29.482,,,no_permission,,,,,,,,,,,,304913,,,Thu Jan 31 15:27:24 UTC 2013,,,,,,0|i17wuf:,254290,,,,,,,,17/Jan/13 16:28;sahoo;Please review the patch.,"23/Jan/13 00:31;rickhall;Yeah, I think that was the intent to begin with, so go ahead and commit your patch.",23/Jan/13 04:40;sahoo;svn #1437269,"24/Jan/13 14:37;rickhall;I believe there is an issue with this patch. The StringMap not only converts keys to strings, but it always deals with case insensitivity of keys too. That is why we override all of the methods. To make matters worse, we not only deal with case insensitivity, we also maintain the original key so that the user gets back the keys in the case they put them with.

I think we need to revert to what we had, but modify putAll() to call toString() on the keys it is putting.","24/Jan/13 15:15;rickhall;It looks like we no longer handle the case sensitivity, but the rest of what I said was valid.

Proposed patch. Sahoo, can you check that this still works for you.

Technically, I still don't think this is 100% correct if this was compiled with target jsr14 for older smaller VMs. I guess it depends on how smart the compiler is when compiling for jsr14.","24/Jan/13 16:40;sahoo;Richard,

I am getting lots of compilation errors with your patch even after I updated my workspace?

[ERROR] /space/ss141213/WS/felix/trunk/framework/src/main/java/org/apache/felix/framework/BundleImpl.java:[340,21] error: no suitable constructor found for StringMap(Map,boolean)
[ERROR] constructor StringMap.StringMap(Map<? extends Object,? extends Object>) is not applicable
[ERROR] (actual and formal argument lists differ in length)

Do you have any other change in your workspace that's a prerequisite for using this patch? It seems so.

Sahoo","24/Jan/13 18:07;rickhall;Sorry, my mistake. I changed the constructor and forgot to edit where it was being used. I've updated the patch.","24/Jan/13 18:09;rickhall;The main issue that needs to be addressed here is that this code also has to work safely when used in jsr14 mode, which means that we get no type safety. So, we just need to make sure that all entry points will convert keys to strings, I guess.","25/Jan/13 03:57;sahoo;Yes, your latest patch works. I will reassign the issue to you now. Thanks.","31/Jan/13 15:27;rickhall;Applied patch, marking as closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Felix + Felix HTTP Jetty causes IllegalStateException during start up,FELIX-3846,12627578,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,pyrolistical,pyrolistical,15/Jan/13 02:28,28/Sep/13 17:40,14/Mar/19 02:48,15/Aug/13 12:47,framework-4.0.3,http-2.2.0,,,,,http-2.2.1,,,,,,,Framework,HTTP Service,,,,,8,,,,,,"There is a race condition during the activation of the felix http jetty bundle when used within a felix container.

During the activation of the felix http jetty bundle you will intermittently see:
java.lang.IllegalStateException: Can only register services while bundle is active or activating.
	at org.apache.felix.framework.Felix.registerService(Felix.java:3209) ~[na:na]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346) ~[na:na]
	at org.apache.felix.http.base.internal.HttpServiceController.register(HttpServiceController.java:135) ~[org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.apache.felix.http.base.internal.DispatcherServlet.init(DispatcherServlet.java:48) ~[org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:140) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.jetty.Server.doStart(Server.java:224) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.apache.felix.http.jetty.internal.JettyService.initializeJetty(JettyService.java:164) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.apache.felix.http.jetty.internal.JettyService.startJetty(JettyService.java:115) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at org.apache.felix.http.jetty.internal.JettyService.run(JettyService.java:290) [org.apache.felix.http.jetty_2.2.0.jar:na]
	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_37]

I debugged into line Felix.java:3209 and discovered the cause by is thrown by Felix.java:4875 which is:
throw new IllegalStateException(""Unable to acquire bundle lock, thread interrupted."");

I dug around and discovered the thread which acquired the lock was the one created on JettyService.java:75

Looking at usages of the thread field, I think I discovered the source of the interrupt on line JettyService.java:75.

What I think is happening is this:
1. felix container starts jetty bundle
2. jetty activator is run which creates a new jetty service
3. jetty service creates a new thread and initializes jetty
4. jetty attempts to register the http service to the felix container and obtains the felix bundle lock (Felix.java:4871)
5. at the same time something calls JettyService.update(Dictionary) which interrupts the thread in attempts to restart the jetty server
6. this causes the felix bundle lock to be interrupted and IllegalStateException is thrown

At which point the http service is not registered and we sob quietly.

To fix this issue I think the thread jetty service creates should never leave the jetty space.  When it needs to register the http service a new thread should be created so it doesn't allow the possibility of the jetty service thread to obtain a lock it shouldn't.

Alternatively in stop using interrupt() to signal change as it is dangerous!  Use a java 5 concurrent lock object.

Repo case:
I can repo this case within my own system by restarting bundle ""Apache Felix Http Jetty (2.2.0)"" again and again, but I don't know if there is a smaller repo case.","Java version: 1.6.0_37, vendor: Apple Inc.

All operating systems",,,,,,,,,,,,,ACE-348,,,,,,15/Jan/13 22:09;pyrolistical;felix-http-jetty-2.2.0-fix-illegal-state-exception.patch;https://issues.apache.org/jira/secure/attachment/12565022/felix-http-jetty-2.2.0-fix-illegal-state-exception.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-25 21:27:37.733,,,no_permission,,,,,,,,,,,,304362,,,Thu Aug 15 12:47:22 UTC 2013,,,,,,0|i17m13:,252538,,,,,,,,"15/Jan/13 19:20;pyrolistical;Here is a patch with one way of fixing this issue.

I replaced the wait/interrupt calls with a CyclicBarrier of size 2.

After applying this patch I could not reproduce the problem.

What wait/interrupt is really doing is sending a signal to the jetty thread to resume it so it can restarted.

Therefore I created methods that reflect this understanding.  The usage of the restart barrier can actually be extracted into its own class.
","25/Jul/13 21:27;twunden;Hi, I can easily reproduce the issue by starting in one shell the following code:

> while :; do curl -I -X GET http://localhost:8080 ; done""

which will be hammering port 8080 on localhost with HTTP requests and then start Felix with the http bundle enabled. I have found that I was not able to reproduce the issue without clearing the bundle cache first, but that may simply be a timing artifact.

It would be great to see this fixed, because once that condition is met, the http service will not recover again.","25/Jul/13 21:29;drewz;Due to a heavy travel schedule, i'll have limited email access over the month of July. Please direct urgent inquiries for sales to your account executive. Product inquiries can be directed to Ivan or Klaus.
","14/Aug/13 16:08;jajans;I'm not sure that the proposed fix is even necessary with the upgrade to Jetty 7. I am able to reproduce the problem with Jetty 6, but never with Jetty 7. Can somebody confirm this?
","15/Aug/13 07:02;walkerr;We altered our startup sequence to avoid some flavour of this one. I'd say if you are able to reproduce in 6, and don't see it in 7 then it can be closed.","15/Aug/13 07:12;twunden;All, thanks for your comments. Do you mind suggesting how I can test with Jetty 7? All builds of the http service seem to be using Jetty 6.","15/Aug/13 07:17;bramk;[~jajans] Looks like this solves it. I was able to reproduce this every third try or so with a pre-existing http configuration in the bundle cache and another getting deployed at startup. With trunk this no longer happens and I actually see it restarting without problem.
[~twunden] You need to build the http project in trunk",15/Aug/13 12:47;jajans;Issue seems to be fixed by upgrading to Jetty7.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Native bundles cannot be installed on Windows 8 and Windows Server 2012,FELIX-3844,12626849,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,nroduit,nroduit,09/Jan/13 21:09,02/Feb/13 11:09,14/Mar/19 02:48,31/Jan/13 20:06,framework-4.0.3,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,patch,,,,,"""osname=win32"" in the Bundle-NativeCode entry doe not work, this exception is thrown:org.osgi.framework.BundleException: Unresolved constraint in bundle native-lib-windows-x86 [6]: No matching native libraries found.

This osname alias needs to be added to the felix framework. I made some changes according to the OSGI specifications at http://www.osgi.org/Specifications/Reference .

Here is the patch:

Index: src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java
===================================================================
--- src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(revision 1431008)
+++ src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(working copy)
@@ -140,11 +140,13 @@
             || currentOSName.equals(""windowsnt"")
             || currentOSName.equals(""windows2000"")
             || currentOSName.equals(""windows2003"")
-            || currentOSName.equals(""windows2008"")
+            || currentOSName.equals(""windowsserver2008"")
             || currentOSName.equals(""windowsxp"")
             || currentOSName.equals(""windowsce"")
             || currentOSName.equals(""windowsvista"")
-            || currentOSName.equals(""windows7""));
+            || currentOSName.equals(""windows7"")
+            || currentOSName.equals(""windows8"")
+            || currentOSName.equals(""windowsserver2012""));
 
         for (int i = 0; (osnames != null) && (i < osnames.length); i++)
         {
@@ -381,7 +383,11 @@
             }
             else if (value.indexOf(""2008"") >= 0)
             {
-                os = ""windows2008"";
+                os = ""windowsserver2008"";
+            }
+            else if (value.indexOf(""2012"") >= 0)
+            {
+                os = ""windowsserver2012"";
             }
             else if (value.indexOf(""xp"") >= 0)
             {
@@ -396,10 +402,15 @@
                 os = ""windowsvista"";
             }
             // will need better test here if any future Windows version has a 7 in it!
-            else if (value.indexOf(""7"") >= 0)
+            else if (value.indexOf("" 7"") >= 0 || value.equals(""win7""))
             {
                 os = ""windows7"";
             }
+            else if (value.indexOf("" 8"") >= 0 || value.equals(""win8""))
+            {
+                os = ""windows8"";
+            }
+
             return os;
         }
         else if (value.startsWith(""linux""))
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-31 20:06:30.129,,,no_permission,,,,,,,,,,,,303539,,,Sat Feb 02 11:09:19 UTC 2013,,,,,,0|i17c7z:,250948,,,,,,,,10/Jan/13 07:57;nroduit;I think Windows 9 could be added as it should be available this year.,"20/Jan/13 09:52;nroduit;New patch:

Index: src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java
===================================================================
--- src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(revision 1431008)
+++ src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(working copy)
@@ -134,17 +134,7 @@
 
     private boolean checkOSNames(String currentOSName, String[] osnames)
     {
-        boolean win32 = currentOSName.startsWith(""win"") &&
-            (currentOSName.equals(""windows95"")
-            || currentOSName.equals(""windows98"")
-            || currentOSName.equals(""windowsnt"")
-            || currentOSName.equals(""windows2000"")
-            || currentOSName.equals(""windows2003"")
-            || currentOSName.equals(""windows2008"")
-            || currentOSName.equals(""windowsxp"")
-            || currentOSName.equals(""windowsce"")
-            || currentOSName.equals(""windowsvista"")
-            || currentOSName.equals(""windows7""));
+        boolean win32 = currentOSName.startsWith(""win"") && !currentOSName.equals(""windowsce"");
 
         for (int i = 0; (osnames != null) && (i < osnames.length); i++)
         {
@@ -381,7 +371,11 @@
             }
             else if (value.indexOf(""2008"") >= 0)
             {
-                os = ""windows2008"";
+                os = ""windowsserver2008"";
+            }
+            else if (value.indexOf(""2012"") >= 0)
+            {
+                os = ""windowsserver2012"";
             }
             else if (value.indexOf(""xp"") >= 0)
             {
@@ -395,11 +389,19 @@
             {
                 os = ""windowsvista"";
             }
-            // will need better test here if any future Windows version has a 7 in it!
-            else if (value.indexOf(""7"") >= 0)
+            else if (value.indexOf("" 7"") >= 0 || value.equals(""win7""))
             {
                 os = ""windows7"";
             }
+            else if (value.indexOf("" 8"") >= 0 || value.equals(""win8""))
+            {
+                os = ""windows8"";
+            }
+            else if (value.indexOf("" 9"") >= 0 || value.equals(""win9""))
+            {
+                os = ""windows9"";
+            }
+            
             return os;
         }
         else if (value.startsWith(""linux""))
","31/Jan/13 20:06;rickhall;I really think we should move our OS aliases to configuration properties, but I don't have time to do that right now so I am applying this patch (i'll open an issue for future work). Please close if you are satisfied. Thanks.","02/Feb/13 11:09;nroduit;Thanks, 

With this patch, we consider that Windows is a win32 system with some exceptions, like Windows CE or Windows RT (but still no JVM available and runs on ARM processor).
Now it would possible to install a win32 lib on future Windows systems without explicitly naming it  (e.g. osname=""windows 8"";) in pom.xml, inside Bundle-NativeCode tag. It will be enough to have ""osname=win32;"". ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException when listing service properties of a non-ComponentFactory Factory service,FELIX-3843,12626734,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,sauthieg,sauthieg,09/Jan/13 10:01,03/Feb/13 10:56,14/Mar/19 02:48,03/Feb/13 10:56,ipojo-core-1.8.4,,,,,,ipojo-runtime-1.10,,,,,,,iPOJO,,,,,,0,,,,,,"Here is the stack trace :

java.lang.ClassCastException: org.ow2.shelbie.core.internal.extension.CommandFactory cannot be cast to org.apache.felix.ipojo.ComponentFactory
        at org.apache.felix.ipojo.architecture.ComponentTypeDescription.getDescription(ComponentTypeDescription.java:256)[57:org.apache.felix.ipojo:1.8.4]
        at org.apache.felix.ipojo.architecture.ComponentTypeDescription.toString(ComponentTypeDescription.java:83)[57:org.apache.felix.ipojo:1.8.4]
        at org.apache.karaf.shell.osgi.ListBundleServices.getValueString(ListBundleServices.java:162)[39:org.apache.karaf.shell.osgi:2.3.0]
        at org.apache.karaf.shell.osgi.ListBundleServices.printProperties(ListBundleServices.java:101)[39:org.apache.karaf.shell.osgi:2.3.0]
        at org.apache.karaf.shell.osgi.ListBundleServices.printServices(ListBundleServices.java:80)[39:org.apache.karaf.shell.osgi:2.3.0]
        at org.apache.karaf.shell.osgi.ListBundleServices.doExecute(ListBundleServices.java:47)[39:org.apache.karaf.shell.osgi:2.3.0]
        at org.apache.karaf.shell.osgi.BundlesCommand.doExecute(BundlesCommand.java:37)[39:org.apache.karaf.shell.osgi:2.3.0]
        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[14:org.apache.karaf.shell.console:2.3.0]
        at org.apache.karaf.shell.console.jline.Console.run(Console.java:175)[14:org.apache.karaf.shell.console:2.3.0]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-09 10:48:55.353,,,no_permission,,,,,,,,,,,,303350,,,Sun Feb 03 10:56:59 UTC 2013,,,,,,0|i17amn:,250690,,,,,,,,"09/Jan/13 10:48;hudson;Integrated in Felix iPOJO Runtime #10 (See [https://builds.apache.org/job/Felix%20iPOJO%20Runtime/10/])
    FELIX-3843 ClassCastException when listing service properties of a non-ComponentFactory Factory service

* Remove un-needed cast to ComponentFactory (Revision 1430762)

     Result = SUCCESS
guillaume : http://svn.apache.org/viewvc/?view=rev&rev=1430762
Files : 
* /felix/trunk/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/architecture/ComponentTypeDescription.java
",03/Feb/13 10:56;sauthieg;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in LocalRepositoryImpl,FELIX-3842,12626571,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,jnaous,jnaous,08/Jan/13 16:13,11/Feb/13 14:02,14/Mar/19 02:48,08/Jan/13 18:03,bundlerepository-1.6.6,,,,,,bundlerepository-2.0.2,,,,,,,Bundle Repository (OBR),,,,,,0,,,,,,"NPE due to time-of-check-to-time-of-check kind of bug. By the time {{LocalRepositoryImpl.serviceChanged}} gets called, the bundle may have been uninstalled, it seems. A patch for version 1.6.7-SNAPSHOT follows below the stack trace.

ERROR: Bundle org.apache.felix.bundlerepository [29] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
        at org.apache.felix.bundlerepository.impl.LocalRepositoryImpl.serviceChanged(LocalRepositoryImpl.java:71)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4346)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3356)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.ipojo.IPojoFactory.start(IPojoFactory.java:615)
        at org.apache.felix.ipojo.Extender.createAbstractFactory(Extender.java:520)
        at org.apache.felix.ipojo.Extender.parse(Extender.java:301)
        at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:237)
        at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
        at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:772)
        at java.lang.Thread.run(Thread.java:662)

Index: bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/LocalRepositoryImpl.java
===================================================================
--- bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/LocalRepositoryImpl.java  (revision 1430286)
+++ bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/LocalRepositoryImpl.java  (working copy)
@@ -68,7 +68,7 @@
     public void serviceChanged(ServiceEvent event)
     {
         Bundle bundle = event.getServiceReference().getBundle();
-        if (bundle.getState() == Bundle.ACTIVE && event.getType() != ServiceEvent.MODIFIED)
+        if (bundle != null && bundle.getState() == Bundle.ACTIVE && event.getType() != ServiceEvent.MODIFIED)
         {
             synchronized (this)
             {
",Tried on v1.6.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-08 18:03:00.452,,,no_permission,,,,,,,,,,,,303178,,,Mon Feb 11 14:02:16 UTC 2013,,,,,,0|i178h3:,250341,,,,,,,,"08/Jan/13 18:03;rickhall;This is actually related to FELIX-3806, since technically service events are synchronous so the service reference bundle shouldn't be null. However, we try to be good and not invoke callbacks while holding locks, so we actually release the bundle lock before sending the event (actually, as of FELIX-3761, we don't even get the bundle lock when registering).

In short, it is not clear what is the best thing here in the framework, but I'd rather error on the side of holding fewer locks than more.

I committed the null check in bundle repository because it is otherwise harmless. Please close if satisfied. Thanks.",08/Jan/13 18:30;jnaous;It would be good to do a quick check to see where ServiceReference.getBundle() gets called without a lock and add null checks there to avoid such NPEs.,10/Feb/13 18:23;jwross@us.ibm.com;Is there a release or snapshot version in maven containing this fix? I see release 1.6.6 and snapshot 1.6.7-SNAPSHOT at https://repository.apache.org.,11/Feb/13 04:13;jnaous;It's already in 1.6.7-SNAPSHOT.,11/Feb/13 14:02;jwross@us.ibm.com;But have the changes been pushed to a maven repo? All of the 1.6.7-SNAPSHOT bundlerepository jars I see on https://repository.apache.org have dates prior to when this fix was committed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSS issues in IE with Web Console menus,FELIX-3841,12626544,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,08/Jan/13 12:52,06/Jun/13 15:34,14/Mar/19 02:48,12/Jan/13 21:04,webconsole-4.2.0,,,,,,webconsole-4.2.0,,,,,,,,,,,,,0,,,,,,The new menus in the Web Console work nicely in Firefox and Chrome but display strangely in IE.,,,,,,,,,,,,,,,,,,,,08/Jan/13 12:55;fmeschbe;webconsole_ff.PNG;https://issues.apache.org/jira/secure/attachment/12563746/webconsole_ff.PNG,08/Jan/13 12:55;fmeschbe;webconsole_ie10.PNG;https://issues.apache.org/jira/secure/attachment/12563747/webconsole_ie10.PNG,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,303151,,,Thu Jun 06 15:34:58 UTC 2013,,,,,,0|i178b3:,250314,,,,,,,,08/Jan/13 12:55;fmeschbe;Screenshots of correct display in Firefox and wrong display in IE 10,"12/Jan/13 21:04;fmeschbe;Fixed in Rev. 1432511:

Prevent the caret on the top-level menu from being displayed. This caret
is actually confusing and causes IE9 display to break.
Also we don't set the submenu icon pointing south; the default sounds
correct for now.",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO deadlocks on a bundle refresh,FELIX-3839,12626345,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,jnaous,jnaous,07/Jan/13 13:08,04/Feb/13 12:34,14/Mar/19 02:48,07/Jan/13 15:45,ipojo-core-1.8.4,ipojo-runtime-1.8.6,,,,,ipojo-runtime-1.8.6,,,,,,,iPOJO,,,,,,0,,,,,,"iPOJO grabs a number of locks during synchronous callbacks from the framework, some in InstanceCreator and some in IPojoFactory. This can cause a repeatable deadlock situation during service registration (which attempts to grab the global felix framework lock, fixed in FELIX-3761) or during class resolution (still a problem). iPOJO should not be grabbing any locks during callbacks from the framework because those callbacks may be holding framework locks, and if another thread invokes the framework while holding the same lock, a deadlock will result. Below are stack traces two deadlock situations.

Here's the stack trace that causes the deadlock in the first situation, which happens before FELIX-3761, but really shouldn't happen with or without that fix:

Daemon Thread [Thread-1] (Suspended)	
	Object.wait(long) line: not available [native method]	
	Object[](Object).wait() line: 485	
	Felix.acquireBundleLock(BundleImpl, int) line: 4871	
	Felix.registerService(BundleImpl, String[], Object, Dictionary) line: 3205	
	BundleContextImpl.registerService(String[], Object, Dictionary) line: 346	
	IPojoContext.registerService(String[], Object, Dictionary) line: 385	
	ProvidedService.registerService() line: 362	
	ProvidedServiceHandler.__M_stateChanged(int) line: 509	
	ProvidedServiceHandler.stateChanged(int) line: not available	
	InstanceManager.setState(int) line: 536	
	InstanceManager.start() line: 418	
	ComponentFactory.createInstance(Dictionary, IPojoContext, HandlerManager[]) line: 179	
	ComponentFactory(IPojoFactory).createComponentInstance(Dictionary, ServiceContext) line: 310	
	ComponentFactory(IPojoFactory).createComponentInstance(Dictionary) line: 239	
	InstanceCreator$ManagedInstance.create(IPojoFactory) line: 355	
	InstanceCreator.addInstance(Dictionary, long) line: 89	
	Extender.parse(Bundle, String) line: 306	
	Extender.startManagementFor(Bundle) line: 237	
	Extender.access$600(Extender, Bundle) line: 52	
	Extender$CreatorThread.run() line: 769	
	Thread.run() line: 662	

Daemon Thread [FelixFrameworkWiring] (Suspended)	
	InstanceCreator.removeInstancesFromBundle(long) line: 116	
	Extender.closeManagementFor(Bundle) line: 171	
	Extender.bundleChanged(BundleEvent) line: 153	
	EventDispatcher.invokeBundleListenerCallback(Bundle, EventListener, EventObject) line: 868	
	EventDispatcher.fireEventImmediately(EventDispatcher, int, Map, EventObject, Dictionary) line: 789	
	EventDispatcher.fireBundleEvent(BundleEvent, Framework) line: 514	
	Felix.fireBundleEvent(int, Bundle) line: 4244	
	Felix.stopBundle(BundleImpl, boolean) line: 2351	
	Felix$RefreshHelper.stop() line: 4629	
	Felix.refreshPackages(Collection, FrameworkListener[]) line: 3951	
	FrameworkWiringImpl.run() line: 172	
	Thread.run() line: 662

Here's the stack trace for the other situation caused by class resolution in the framework:

Name: Thread-2
State: WAITING on [Ljava.lang.Object;@4a018e1b
Total blocked: 38,871,649  Total waited: 38,871,650

Stack trace: 
 java.lang.Object.wait(Native Method)
java.lang.Object.wait(Object.java:485)
org.apache.felix.framework.Felix.acquireGlobalLock(Felix.java:5033)
org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:451)
org.apache.felix.framework.BundleWiringImpl.searchDynamicImports(BundleWiringImpl.java:1578)
org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1478)
org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1882)
java.lang.ClassLoader.loadClass(ClassLoader.java:247)
org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1356)
org.apache.felix.framework.ServiceRegistrationImpl$ServiceReferenceImpl.isAssignableTo(ServiceRegistrationImpl.java:548)
org.apache.felix.framework.util.Util.isServiceAssignable(Util.java:280)
org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:916)
org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4346)
org.apache.felix.framework.Felix.registerService(Felix.java:3356)
org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
org.apache.felix.ipojo.IPojoFactory.start(IPojoFactory.java:613)
   - locked org.apache.felix.ipojo.ComponentFactory@468034b6
org.apache.felix.ipojo.Extender.createAbstractFactory(Extender.java:520)
org.apache.felix.ipojo.Extender.parse(Extender.java:301)
org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:237)
org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:769)
java.lang.Thread.run(Thread.java:662)

Name: FelixFrameworkWiring
State: BLOCKED on org.apache.felix.ipojo.ComponentFactory@468034b6 owned by: Thread-2
Total blocked: 7  Total waited: 1

Stack trace: 
org.apache.felix.ipojo.IPojoFactory.removeFactoryStateListener(IPojoFactory.java:511)
org.apache.felix.ipojo.InstanceCreator.removeFactory(InstanceCreator.java:199)
org.apache.felix.ipojo.Extender.closeManagementFor(Extender.java:180)
org.apache.felix.ipojo.Extender.bundleChanged(Extender.java:153)
org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4330)
org.apache.felix.framework.Felix.stopBundle(Felix.java:2451)
org.apache.felix.framework.Felix$RefreshHelper.stop(Felix.java:4715)
org.apache.felix.framework.Felix.refreshPackages(Felix.java:4037)
org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:178)
java.lang.Thread.run(Thread.java:662)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-07 15:45:31.373,,,no_permission,,,,,,,,,,,,302935,,,Tue Jan 08 20:07:55 UTC 2013,,,,,,0|i176n3:,250044,,,,,,,,07/Jan/13 15:45;clement.escoffier;I did a first attempt to fix it. Could you check against the trunk ? ,"07/Jan/13 16:14;jnaous;Thanks for the quick turnaround. iPOJO doesn't deadlock anymore (btw, I'm testing against felix framework 4.1.0-SNAPSHOT), but it's creating two instances of each service, and I get a NPE in the logs:

ERROR: Bundle org.apache.felix.bundlerepository [29] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
        at org.apache.felix.bundlerepository.impl.LocalRepositoryImpl.serviceChanged(LocalRepositoryImpl.java:71)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4346)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3356)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.ipojo.IPojoFactory.start(IPojoFactory.java:615)
        at org.apache.felix.ipojo.Extender.createAbstractFactory(Extender.java:520)
        at org.apache.felix.ipojo.Extender.parse(Extender.java:301)
        at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:237)
        at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
        at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:772)
        at java.lang.Thread.run(Thread.java:662)
",07/Jan/13 16:15;jnaous;Should I reopen this issue or create a new one?,"08/Jan/13 13:03;jnaous;Looking at the changes you made, there is still the possibility of deadlock. Locks really should be completely removed from the synchronous callback paths... Finer grained locks are only make it less probable the deadlock will arise, but this will also make it harder to debug deadlocks when they arise because they will be more difficult to reproduce.","08/Jan/13 14:08;jnaous;Also, I fixed the NPE raised. It was a bug in the bundlerrepository implementation (or so it seems). Opening another bug report for that. That also resolves the multiple instances of components.","08/Jan/13 20:07;jnaous;And actually, it turns out that the duplicate instances problem is still there...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Race condition in ImmediateComponentHolder,FELIX-3838,12625933,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,gmarcy@us.ibm.com,gmarcy@us.ibm.com,03/Jan/13 22:57,04/Sep/14 08:04,14/Mar/19 02:48,15/Jan/13 20:01,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"There is a race condition where one thread is running the BundleComponentActivator
and calling enableComponents on the ImmediateComponentHolder when another thread
is running that has called configurationUpdated.  The first thread is executing
this:

        m_enabled = true;
        final ImmediateComponentManager[] cms = getComponentManagers( false );
        ...
            for ( ImmediateComponentManager cm : cms )
            {
                cm.enable( async );
            }

The second thread is executing this:

                // enable the component if it is initially enabled
                if ( m_enabled && getComponentMetadata().isEnabled() )
                {
                    newIcm.enable( false );
                    ...
                }

                // store the component in the map
                putComponentManager( pid, newIcm );

The failing sequence is this:

The second thread executes the test of m_enabled and it is false, so it will not
enable the component manager expecting that it will be enabled by enableComponents
later when it is called.  The first thread then sets m_enabled to true and gets a
copy of the entries in the map of component managers in order to enable them.  The
second thread puts the component manager into that map, but after the first thread
has already made a copy of the managers in that map, so the component manager the
second thread created will not be enabled at all.
",,,,,,,,,,,,,,,,,,,,03/Jan/13 23:09;gmarcy@us.ibm.com;felix-scr.89998-patch.txt;https://issues.apache.org/jira/secure/attachment/12563187/felix-scr.89998-patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-15 20:01:28.218,,,no_permission,,,,,,,,,,,,302515,,,Tue Jan 15 20:01:28 UTC 2013,,,,,,0|i173of:,249563,,,,,,,,"03/Jan/13 23:09;gmarcy@us.ibm.com;Attached is a patch with changes for two files:

1) BundleComponentActivator
    The changes here are only to add LOG_DEBUG messages which were used to help understand what was happening in the thread which would call enableComponents.  These were a help in tracking down the bug so wanted to make them available in case they were helpful to others.

2) ImmediateComponentHolder
    These changes contain a fix for the defect.  The basic issue was that while there were synchronized ( m_components ) blocks within the code, they were only protecting access to that field at a very fine grained level.  The changes expand the scope of such blocks to account for the fact that changes to that map also need to be consistent with changes to the m_enabled and m_singleComponent fields as well.
","15/Jan/13 20:01;djencks;Applied patch with minor reformatting.  Thanks, nice catch!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when calling InstanceDescription.getDescription() ; //  HandlerDescription is missing for org.apache.felix.ipojo.handlers.event:subscriber handler,FELIX-3836,12625621,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,cazauxj,cazauxj,01/Jan/13 17:21,24/Dec/14 16:23,14/Mar/19 02:48,10/Dec/14 07:44,,,,,,,ipojo-runtime-1.12.1,,,,,,,iPOJO,,,,,,0,,,,,,"java.lang.NullPointerException
	at org.apache.felix.ipojo.architecture.InstanceDescription.getDescription(InstanceDescription.java:164)
	at org.apache.felix.ipojo.PrimitiveInstanceDescription.getDescription(PrimitiveInstanceDescription.java:165)

NPE when executing this line in the InstanceDescription :    instance.addElement(m_handlers[i].getHandlerInfo()); 

My component has 4 handlers : [org.ow2.jonas.ipojo.interceptor:interceptor, org.apache.felix.ipojo:provides, org.apache.felix.ipojo.handlers.event:subscriber, org.apache.felix.ipojo:architecture]

cazauxj@jonas$ inspect service capability 103
JOnAS :: Services :: JOnAS report :: Extensions :: Deployables (103) provides services:
---------------------------------------------------------------------------------------
component.class = org.ow2.jonas.report.extensions.deployables.internal.DeployablesReportExtension
component.description = factory name=""DeployablesReportExtension"" bundle=""103"" state=""valid"" implementation-class=""org.ow2.jonas.report.extensions.deployables.internal.DeployablesReportExtension""
        requiredhandlers list=""[org.ow2.jonas.ipojo.interceptor:interceptor, org.apache.felix.ipojo:provides, org.apache.felix.ipojo.handlers.event:subscriber, org.apache.felix.ipojo:architecture]""
        missinghandlers list=""[]""
        provides specification=""org.ow2.jonas.report.api.IReportExtension""
        property name=""namespace"" type=""java.lang.String"" value=""http://jonas.ow2.org/report/deployables/1.0""
        property name=""event.topics"" type=""java.util.Dictionary"" value=""{}""
        property name=""event.filter"" type=""java.util.Dictionary"" value=""{}""
        inherited interfaces=""[org.ow2.jonas.report.api.IReportExtension]"" superclasses=""[]""
component.properties = [Lorg.apache.felix.ipojo.architecture.PropertyDescription;@19c59085
component.providedServiceSpecifications = org.ow2.jonas.report.api.IReportExtension
factory.name = DeployablesReportExtension
factory.state = 1
objectClass = org.apache.felix.ipojo.Factory, org.osgi.service.cm.ManagedServiceFactory
service.id = 299
service.pid = DeployablesReportExtension
----
factory.name = DeployablesReportExtension
instance.name = DeployablesReportExtension-0
namespace = http://jonas.ow2.org/report/deployables/1.0
objectClass = org.ow2.jonas.report.api.IReportExtension
service.id = 303


When debugging, it looks like that the array of HandlerDescription does contain the correct number of element (4) but the element with index 2 is NULL. So the HandlerDescription is missing for org.apache.felix.ipojo.handlers.event:subscriber handler. However, all HandlerManager  are available from the InstanceManager (the HandlerManager associated to the subscriber handler is not null). I have attached a picture to illustrate this.

",,,,,,,,,,,,,,,,,,,,01/Jan/13 17:22;cazauxj;bug.png;https://issues.apache.org/jira/secure/attachment/12562849/bug.png,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-26 14:14:55.328,,,no_permission,,,,,,,,,,,,302168,,,Wed Dec 10 07:44:57 UTC 2014,,,,,,0|i16z5r:,248831,,,,,,,,26/Feb/13 14:14;clement.escoffier;Will have a look ASAP.,"04/Jul/13 15:46;sauthieg;Browsing the code yesterday, I think I found a good suspect: InstanceManager.getHandler()
When something goes wrong (Exception thrown) in an instance's handler creation, this method log the error and return null.
The null value is then stored in the handler's array and the process continue ...
",10/Dec/14 07:44;clement.escoffier;[~sauthieg] is right. Fixing it right now.,10/Dec/14 07:44;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console Home Page,FELIX-3830,12625170,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,wim.jongman@gmail.com,wim.jongman@gmail.com,24/Dec/12 10:29,02/Mar/16 12:28,14/Mar/19 02:48,02/Mar/16 12:28,,,,,,,,,,,,,,Web Console,,,,,,0,,,,,,Please consider updating your homepage.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-24 13:57:52.548,,,no_permission,,,,,,,,,,,,301712,,,Fri Dec 28 14:12:04 UTC 2012,,,,,,0|i16vwn:,248301,,,,,,,,"24/Dec/12 13:57;fmeschbe;What do think is outdated, wrong or missing ? Thanks","24/Dec/12 15:42;wim.jongman@gmail.com;About 6 months ago I tried the install instructions on the home page [1] and today I tried it again.  The homepage suggests that all you have to do is [2]. The file that is pointed to does not exist. It is easy to fix that and install 4.0.0 but then the installed bundle complains about a bunch of missing dependencies where the homepage clearly states that there a no dependencies. 

Conclusion: for newcomers it is a frustrating experience. 

[1] http://felix.apache.org/site/apache-felix-web-console.html
[2] install http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole-2.0.6.jar
","28/Dec/12 13:30;fmeschbe;Thanks. Will update the site soon.

(We are in the process of moving the site source and thus this may take some time)","28/Dec/12 14:12;wim.jongman@gmail.com;Thanks. I figured it out in the mean time and wrote a little how-to.

http://industrial-tsi-wim.blogspot.nl/2012/12/running-apache-felix-webconsole-from.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when creating configuration with multi-value password properties,FELIX-3829,12625133,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,23/Dec/12 07:44,06/Jun/13 15:34,14/Mar/19 02:48,23/Dec/12 07:46,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"If a configuration is created which has a multi-value password property, a NullPointerException is thrown in the toList method because there is no existing configuration property and toList assumes a non-null argument:

java.lang.NullPointerException
	at org.apache.felix.webconsole.internal.compendium.ConfigManager.toList(ConfigManager.java:1186)
	at org.apache.felix.webconsole.internal.compendium.ConfigManager.setPasswordProps(ConfigManager.java:1209)
	at org.apache.felix.webconsole.internal.compendium.ConfigManager.applyConfiguration(ConfigManager.java:901)
	at org.apache.felix.webconsole.internal.compendium.ConfigManager.doPost(ConfigManager.java:169)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,301669,,,Thu Jun 06 15:34:55 UTC 2013,,,,,,0|i16vev:,248221,,,,,,,,23/Dec/12 07:46;fmeschbe;Fixed in Rev. 1425431 by not calling toList from setPasswordProps if the props parameter is null,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error in bbd-ipojo-plugin of manipulating jar with embedded dependencies with maven bundle plugin + bnd-ipojo-plugin,FELIX-3827,12624824,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sauthieg,benoitf,benoitf,20/Dec/12 14:39,04/Feb/13 12:34,14/Mar/19 02:48,07/Jan/13 17:32,ipojo-manipulator-1.8.6,,,,,,ipojo-manipulator-1.10.0,,,,,,,iPOJO,,,,,,0,,,,,,"If a bundle using maven bundle plugin+ipojo plugin embed dependencies on another bundle and that the embedded bundle contains ipojo annotations there is a failure :

[WARNING] Bundle org.ipojo.bug:component2:bundle:1.0-SNAPSHOT : Cannot read content of org/ipojo/bug/component1/MyComponent1.class
[ERROR] Bundle org.ipojo.bug:component2:bundle:1.0-SNAPSHOT : Cannot compute annotations from org/ipojo/bug/component1/MyComponent1.class : Empty file


In my case I don't care of annotations that are on the embedded jars.
",Missing component and version in the JIRA list ?,,,,,,,,,,,,,,,,,,,20/Dec/12 14:40;benoitf;ipojo.bug.tgz;https://issues.apache.org/jira/secure/attachment/12561901/ipojo.bug.tgz,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-20 14:48:56.647,,,no_permission,,,,,,,,,,,,301332,,,Mon Jan 07 17:32:58 UTC 2013,,,,,,0|i16rqf:,247625,,,,,,,,20/Dec/12 14:40;benoitf;Maven project used to reproduce the issue,20/Dec/12 14:48;sauthieg;Reproduced with ipojo-bnd-plugin version 1.8.6 (using manipulator 1.8.6),"03/Jan/13 15:17;sauthieg;Thinking aloud ...

We may implement 2 policies to manage that issue:
  1. Always ignore annotated classes from embed dependencies
  2. Use them whenever possible

#2 is a little bit more complex and broke down into 3 cases (AFAIU)
  a. dep is a simple jar file. that looks like an error case where an iPOJO components is packaged into a non-bundle archive
  b. dep is a regular bundle archive, but not manipulated by iPOJO (classes not modified, no IPOJO-Components header in the manifest). In that case, we can manipulate the classes and store the modified bytecode in the root archive (having '.' in the bundle-classpath will make sure that we'll load the modified classes). But we can choose also to ignore them :)
  c. dep is a regular AND manipulated bundle. We should ignore the annotated classes since they are already manipulated. But we should ""merge"" its computed IPOJO-Components within the current Manifest result of this Bnd execution",07/Jan/13 11:30;sauthieg;Proposed fix: https://github.com/sauthieg/felix/commit/83532d53d37a726f9b174020bf3736d8c30dde9e,"07/Jan/13 13:08;clement.escoffier;For traceability, here is a copy of my comment on the commit:

{quote}
Looks good to me except that I would disable this behavior by default and let people understanding the concept of embedded dependencies enable it. Feel free to change this behavior and push your change on the trunk.
{quote}","07/Jan/13 15:43;sauthieg;Ok, I'll made that behavior off by default.","07/Jan/13 17:32;sauthieg;Fixed in trunk

Enable the embed dependency support with the ""include-embed-bundles"" property of the bnd plugin",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] race in enabling components with factory pid,FELIX-3826,12624375,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,18/Dec/12 00:06,04/Sep/14 08:04,14/Mar/19 02:48,20/Dec/12 04:57,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"ImmediateComponentHolder.enableComponents has a race condition.  It sets the holder's m_enabled state last after enabling all the components it finds when it starts.  However other threads from config admin could be adding components during this time, and they will never get enabled.  Calling enable on a component twice shouldn't cause a problem, so moving setting m_enabled to the start of enableComponents should fix this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,299214,,,2012-12-18 00:06:47.0,,,,,,0|i160av:,243181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] make logging more useful by including component ID when known,FELIX-3825,12624142,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,15/Dec/12 21:08,04/Sep/14 08:04,14/Mar/19 02:48,20/Dec/12 04:56,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,It's easy and useful to modify our logging to include the component ID when known.  Then makes it a lot easier to figure out which instance is doing stuff when you have a factory configuration.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,298515,,,2012-12-15 21:08:23.0,,,,,,0|i15t3z:,242016,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigAdmin should explicitely unregister services,FELIX-3823,12623916,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,gnt,gnt,14/Dec/12 09:16,28/Sep/13 15:26,14/Mar/19 02:48,14/Dec/12 10:24,configadmin-1.6.0,,,,,,configadmin-1.8.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"It's really a minor issue, but it's cleaner to have bundles explicitly unregister its own services, in case other bundles want to react before the BundleContext is invalidated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-14 10:03:44.044,,,no_permission,,,,,,,,,,,,297814,,,Sat Sep 28 15:26:59 UTC 2013,,,,,,0|i14ve7:,236551,,,,,,,,"14/Dec/12 10:03;fmeschbe;The only service not explicitly unregistered is the FilePersistenceManager. While I am ok with explicitly unregistering it, I doubt this is used by other bundles ...

Plus: Doesn't the framework make sure the bundle's services are all unregistered before rendering the bundle context invalid ?","14/Dec/12 10:10;gnt;No, the framework unregisters services *after* the context has been invalidated, because services can still be registered while the bundle is stopping.
I agree i doubt it will be used by anyone, but I'm doing some robustness load testing on Karaf and it helps diagnosing problems when bundles cleanly unregister services.",14/Dec/12 10:24;fmeschbe;Fixed in Rev. 1421783,28/Sep/13 15:26;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInstall should unregister its services,FELIX-3822,12623801,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,gnt,gnt,gnt,13/Dec/12 19:30,17/Mar/15 06:57,14/Mar/19 02:48,14/Dec/12 16:27,,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,"Even though it's not required, it's cleaner, especially as when services are automatically registered, the bundle context is already invalidated, so no operations can be performed anymore.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,297521,,,Fri Dec 14 16:27:11 UTC 2012,,,,,,0|i14r5b:,235863,,,,,,,,14/Dec/12 16:27;gnt;Fixed in http://svn.apache.org/viewvc?rev=1421963&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInstall does not support correctly ConfigAdmin being shut down,FELIX-3821,12623788,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,13/Dec/12 17:26,17/Mar/15 06:57,14/Mar/19 02:48,14/Dec/12 16:26,,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,297488,,,Fri Dec 14 16:26:55 UTC 2012,,,,,,0|i14p1b:,235521,,,,,,,,14/Dec/12 16:26;gnt;Fixed in http://svn.apache.org/viewvc?rev=1421963&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible NPE in ConfigAdmin after shutting down when accessed by bad behaving bundles,FELIX-3820,12623787,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,gnt,gnt,13/Dec/12 17:25,28/Sep/13 15:26,14/Mar/19 02:48,31/Dec/12 19:47,configadmin-1.6.0,,,,,,configadmin-1.8.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"When a bundle accesses the ConfigAdmin service while or after it has been stopped, NPE can occur because the internal ConfigurationAdminImpl#configurationManager field has been nulled.
While this is a minor issue, it would be better to throw a nicer exception indicating the COnfigAdmin service has been stopped.
This is mostly for bad behaving bundles that do not react to the service being unregistered though, so it's really a minor issue
{code}
	  at org.apache.felix.cm.impl.ConfigurationAdminImpl.listConfigurations(ConfigurationAdminImpl.java:166)
	  at org.apache.felix.fileinstall.internal.ConfigInstaller.findExistingConfiguration(ConfigInstaller.java:346)
	  at org.apache.felix.fileinstall.internal.ConfigInstaller.getConfiguration(ConfigInstaller.java:320)
	  at org.apache.felix.fileinstall.internal.ConfigInstaller.setConfig(ConfigInstaller.java:245)
	  at org.apache.felix.fileinstall.internal.ConfigInstaller.install(ConfigInstaller.java:84)
	  at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:929)
	  at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:857)
	  at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:483)
	  at org.apache.felix.fileinstall.internal.DirectoryWatcher.start(DirectoryWatcher.java:224)
	  at org.apache.felix.fileinstall.internal.FileInstall.updated(FileInstall.java:252)
	  at org.apache.felix.fileinstall.internal.FileInstall.start(FileInstall.java:139)
	  at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	  at org.apache.felix.framework.Felix.doActivateBundle(Felix.java:2259)
	  at org.apache.felix.framework.Felix$7.call(Felix.java:2197)
	  at org.apache.felix.framework.Felix$6.call(Felix.java:2141)
	  at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	  at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	  at java.lang.Thread.run(Thread.java:722)
{code}",,,,,,,,,,,,,,FELIX-3821,,,,,,14/Dec/12 15:41;gnt;FELIX-3820.patch;https://issues.apache.org/jira/secure/attachment/12560986/FELIX-3820.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-31 19:47:43.59,,,no_permission,,,,,,,,,,,,297487,,,Sat Sep 28 15:26:59 UTC 2013,,,,,,0|i14p13:,235520,,,,,,,,"14/Dec/12 15:41;gnt;Proposed patch to fix this issue, but I'm going to see if I reproduce the issue after having fixed FELIX-3821","31/Dec/12 19:47;fmeschbe;Thanks for the patch.

I have applied a slightly modified version (using a local variable to prevent repeated checks) in Rev. 747165 and added integration tests. In addition  I extended the guard for the permission checks.",28/Sep/13 15:26;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The export directive of iPOJO is wrong,FELIX-3819,12623760,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,13/Dec/12 15:05,04/Feb/13 12:33,14/Mar/19 02:48,13/Dec/12 15:07,ipojo-core-1.8.4,,,,,,ipojo-runtime-1.8.6,,,,,,,iPOJO,,,,,,0,,,,,,The export clause of the iPOJO core bundle contains all handlers but those packages are not in the bundle. This leads to issue such as NoClassDefFoundError.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,297459,,,Thu Dec 13 15:07:03 UTC 2012,,,,,,0|i14ouf:,235490,,,,,,,,13/Dec/12 15:07;clement.escoffier;Directive fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Form parameters might clash with configuration parameters,FELIX-3817,12623739,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,cziegeler,cziegeler,13/Dec/12 12:41,16/Mar/15 08:17,14/Mar/19 02:48,20/Oct/14 07:48,webconsole-4.0.0,,,,,,webconsole-4.2.4,,,,,,,Web Console,,,,,,0,,,,,,"If a configuration has a property named ""delete"" or ""propertylist"" (and maybe there are more) then this clashes with the form parameter names of the configuration web console plugin and editing such a configuration is not possible.
We should use more unique names, maybe namespaced somehow to reduce the potential of a name clash",,,,,,,,,,,,,,,,,,,,17/Oct/14 10:40;v_valchev;webconsole-FELIX-3817.patch;https://issues.apache.org/jira/secure/attachment/12675461/webconsole-FELIX-3817.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-28 15:22:22.396,,,no_permission,,,,,,,,,,,,297438,,,Mon Oct 20 07:48:50 UTC 2014,,,,,,0|i14oof:,235463,,,,,,,,"28/Dec/12 15:22;fmeschbe;Started work on this issue by defining and using Java constants for request parameters which are not used as configuration properties (Rev. 1426546). Also enhanced the client side JavaScript to make use of those constants (leveraging the variable resolver).

I am not 100% sure whether we should change these values, though, because this would break existing scripts making use of the existing HTTP-based API (even though this has not been documented and is not officially supported).",28/Dec/12 15:23;fmeschbe;Unscheduling from 4.0.2 release,"28/Jan/13 18:54;cziegeler;For compatiblity: we could first check if the new parameters are set - (we can make sure the detection works by using some hidden form parameter which is always sent), if not we fall back to the old ones

I think we really should fix this in the next release :)","29/Jan/13 15:00;fmeschbe;As discussed.

I suggest we first document the existing API at http://felix.apache.org/documentation/subprojects/apache-felix-web-console/web-console-restful-api.html#configuration-admin-plugin before changing anything.

My impression is we should just check the parameters in two steps: new value then old value.",28/Jan/14 08:36;cziegeler;Defering open issues to the next release,"17/Oct/14 10:40;v_valchev;The attached patch fixes the problem while the REST API are still compatible.

Anyway, external applications, that would like to set a configuration that has one of the following properties:
action, apply, delete, propertylist should prepend their names with dolar sign '$'. E.g:

apply=true; // REST API
$apply=""Configuration Value""

What do you think about that solution?","17/Oct/14 11:29;cziegeler;[~v_valchev] That would work I agree. People using the api need to be aware of the special parameters in order to prefix their configuration values correctly.
What if we do it the other way round? Unless you have a name class, everything stays as is - if you have a class, you prefix the command parameters to $, so the configuration name would still be appy=""Configuration Value"" but $apply=true for the rest api.","17/Oct/14 12:41;v_valchev;IMHO the REST API should stay constant. If we say you 'apply' your data, you should never say '$apply' my data.
It's the data, that should be changed.

But if we want to do it right, it's probably better to have the data (configuration properties) serialized not as request parameters but POSTed as JSON body content. Unfortunately this will completely break the compatibility.","17/Oct/14 13:14;cziegeler;[~v_valchev] Ok, I agree with you - let's do it as you suggested",20/Oct/14 07:48;v_valchev;fixed in svn rev. 1633064,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Maven SCR Plugin does not correctly set specVersion to 1.1 if bind method with two parameters are used (OSGi Comp 4.2 $112.3.1),FELIX-3815,12623525,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,12/Dec/12 11:11,18/Feb/13 08:05,14/Mar/19 02:48,23/Jan/13 14:36,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,maven-scr-plugin-1.10.0,scr ant task 1.4.0,scr generator 1.4.0,,,,,SCR Tooling,,,,,,0,,,,,,"The following code leads to an error in Eclipse

@Component()
public class DummyService {

    @Reference(referenceInterface = ResourceResolverFactory.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE, policy = ReferencePolicy.DYNAMIC)
    List<ResourceResolverFactory> factories;

    protected void bindFactories(final ResourceResolverFactory factory, final Map properties) {

    }

    protected void unbindFactories(final ResourceResolverFactory factory) {

    }
}

The following error will appear in Eclipse:
@Reference : Missing method bind for reference factories (org.apache.felix:maven-scr-plugin:1.9.0:scr:generate-scr-descriptor:process-classes)

Only if specVersion=1.1 is explicitly set the error vanishes.
If built with Maven, the error will not appear and the maven-scr-plugin will automatically create the XML with the right specVersion 1.1
Seems that the version detection mechanism differs in regular Maven build and built triggered from m2e.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-23 14:36:40.758,,,no_permission,,,,,,,,,,,,297234,,,Wed Jan 23 14:36:40 UTC 2013,,,,,,0|i14n9b:,235233,,,,,,,,"23/Jan/13 14:36;cziegeler;I rewrote the spec version handling, it now also checks the method signature to detect the correct version",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javascript error when directly invoking a configuration with IE8,FELIX-3814,12623414,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,11/Dec/12 17:25,06/Jun/13 15:35,14/Mar/19 02:48,11/Dec/12 17:47,webconsole-3.1.8,webconsole-4.0.0,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"When requesting a specific configuration directly using IE8 like:
http://localhost:8080/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.LockManager

this results in a javascript error.

I'Ve traced this a little bit down (or tried to) and it seems that this call in config.js:
    $.post(create ? uri + '?create=1' : uri, null, displayConfigForm, 'json');
does a GET on IE8 which in turn doesn't return JSON and that results in a parsing error

(but might also be something completely different)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-11 17:53:44.263,,,no_permission,,,,,,,,,,,,297111,,,Thu Jun 06 15:35:00 UTC 2013,,,,,,0|i14lg7:,234939,,,,,,,,"11/Dec/12 17:43;cziegeler;It seems we're hitting this problem:
http://stackoverflow.com/questions/1551001/jquery-post-update-not-working-in-ie/1739409#1739409

",11/Dec/12 17:47;cziegeler;added a cache killer,"11/Dec/12 17:53;alexander.klimetschek;Setting ""cache: false"" in the advanced options of jquery post() or ajax() will add a timestamp-based cache killer automatically. http://api.jquery.com/jQuery.ajax/

I am only wondering why $.post does a GET request?",06/Jun/13 15:35;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect request buffer size in JettyConfig,FELIX-3813,12623400,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,jajans,adietrich,adietrich,11/Dec/12 15:43,01/Aug/15 09:22,14/Mar/19 02:48,11/Nov/13 13:17,,,,,,,http-2.2.2,,,,,,,HTTP Service,,,,,,0,,,,,,"The ""requestBufferSize"" in JettyConfig is initialized to ""8 * 014"", which should be ""8 * 1024"". The default value in ""metatype.xml"" is correct.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-11 13:17:02.261,,,no_permission,,,,,,,,,,,,297097,,,Mon Nov 11 13:17:02 UTC 2013,,,,,,0|i14lcn:,234923,,,,,,,,11/Nov/13 13:17;jajans;Solved in r1540508.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@org.osgi.service.component.annotations.Component configurationPolicy attribute not processed correctly by DSAnnotationProcessor,FELIX-3810,12623172,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,stephen.flynn@jftechnology.com,stephen.flynn@jftechnology.com,10/Dec/12 17:05,12/Mar/14 08:55,14/Mar/19 02:48,20/Dec/12 12:25,scr ds annotations 1.2.0,,,,,,scr ds annotations 1.2.2,,,,,,,SCR Tooling,,,,,,0,,,,,,Non default (OPTIONAL) values of the configurationPolicy attribute are ignored by DSAnnotationProcessor. I think this is a trivial fix - patch attached.,,,,,,,,,,,,,,,,,,,,10/Dec/12 17:07;stephen.flynn@jftechnology.com;DSAnnotationProcessor.java.patch;https://issues.apache.org/jira/secure/attachment/12560209/DSAnnotationProcessor.java.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-20 12:25:17.229,,,no_permission,,,,,,,,,,,,296779,,,Thu Dec 20 12:25:17 UTC 2012,,,,,,0|i14h8v:,234257,,,,,,,,"20/Dec/12 12:25;cziegeler;Thanks for your patch, I've applied it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JS Error in Configuration Status printing,FELIX-3795,12618700,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,04/Dec/12 08:08,06/Jun/13 15:35,14/Mar/19 02:48,04/Dec/12 08:26,webconsole-4.2.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"Apparently with the update to JQuery UI 1.9.2, the tabs paging plugin does not properly work anymore. 

Upon setting up the paging, the destroy() method in ui.tabs.paging.js breaks because the ""self.lis"" property is not defined. This causes the tabs setup to abort and thus the Text and ZIP download buttons to not be properly setup.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,295909,,,Thu Jun 06 15:35:01 UTC 2013,,,,,,0|i142x3:,231935,,,,,,,,04/Dec/12 08:26;fmeschbe;Fixed in Rev. 1416811 by updating the tabs paging plugin to the latest version (which includes support for JQuery UI 1.9),06/Jun/13 15:35;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Property of type Character must use unicode value,FELIX-3793,12618301,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,30/Nov/12 10:41,07/Dec/12 10:25,14/Mar/19 02:48,30/Nov/12 11:00,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,,SCR Tooling,,,,,,0,,,,,,"Currently a character is written as a char into the descriptor file, according to the spec this must be the unicode value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,292932,,,2012-11-30 10:41:48.0,,,,,,0|i0sghj:,164148,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Services may not be bound if the events arrive during component instantiation.,FELIX-3790,12618087,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,28/Nov/12 23:44,04/Sep/14 08:04,14/Mar/19 02:48,07/Feb/13 07:31,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"This is similar to FELIX-3754, but there is still a timing window where service events that arrive between the time the dependencies are collected and the time the temp implementation object is set, get ignored.  It's pretty easy to narrow down this timing window to between when the dependencies are collected and when the dependency map is set, but there is still a short window with this solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,292693,,,Thu Feb 07 07:31:26 UTC 2013,,,,,,0|i0sbcf:,163314,,,,,,,,29/Nov/12 23:56;djencks;Simple fix in r1415462.  As noted in the description there's still a window when events will be dropped.  I think FELIX-3729 (imitate serviceTracker) will be the best solution longer-term.,"07/Feb/13 07:31;djencks;This was fixed by 3729, using a service-tracker like strategy.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock due to synchronization on INSTANCE_NAME,FELIX-3789,12618020,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,seb64,seb64,28/Nov/12 17:35,04/Feb/13 12:34,14/Mar/19 02:48,18/Dec/12 08:49,ipojo-core-1.8.4,,,,,,ipojo-runtime-1.8.6,,,,,,,iPOJO,,,,,,0,,,,,,"iPojo sometimes locks up during component instanciation in our application.
After analysis, the lockup occurs since the fix in FELIX-3548 was applied.

The problem is that createComponentInstance in the class IPojoFactory is pseudo-recursive (through a call to getHandler), that is it can call recursively itself on a different factory instance.
Since createComponentInstance synchronizes itself on the factory first (local lock) and on INSTANCE_NAME second (global lock), sometimes it will try to call createComponentInstance on a different factory while holding the global lock and while another threads holds that factory's local lock and is trying to acquire the global lock (I hope what I wrote makes sense).

Stack trace of the problem :
Daemon Thread [Thread-1] (Suspended)
 	owns: ComponentFactory  (id=5717)
 	owns: ArrayList<E>  (id=5708)	<==============
 	owns: HandlerManagerFactory  (id=5718)
 	waiting for: HandlerManagerFactory  (id=5709)	<==============
 	HandlerManagerFactory(IPojoFactory).createComponentInstance(Dictionary,
 ServiceContext) line: 258
 	ComponentFactory(IPojoFactory).getHandler(IPojoFactory$RequiredHandler,
 ServiceContext) line: 830
 	ComponentFactory(IPojoFactory).createComponentInstance(Dictionary,
 ServiceContext) line: 306
 	ComponentFactory(IPojoFactory).createComponentInstance(Dictionary)
 line: 239
 	InstanceCreator$ManagedInstance.create(IPojoFactory) line: 343
 	InstanceCreator.onValidation(IPojoFactory) line: 202
 	InstanceCreator.stateChanged(Factory, int) line: 243
 	ComponentFactory(IPojoFactory).computeFactoryState() line: 766
 	ComponentFactory.addedService(ServiceReference) line: 414
 	Tracker$Tracked.trackAdding(ServiceReference) line: 725
 	Tracker$Tracked.track(ServiceReference) line: 686
 	Tracker$Tracked.serviceChanged(ServiceEvent) line: 642
 	FilteredServiceListener.serviceChanged(ServiceEvent) line: 107
 	BundleContextImpl.dispatchEvent(Object, Object, int, Object) line: 861
 	EventManager.dispatchEvent(Set, EventDispatcher, int, Object) line: 
 230
 	ListenerQueue.dispatchEventSynchronous(int, Object) line: 148
 	ServiceRegistry.publishServiceEventPrivileged(ServiceEvent) line: 819
 	ServiceRegistry.publishServiceEvent(ServiceEvent) line: 771
 	ServiceRegistrationImpl.register(Dictionary) line: 130
 	ServiceRegistry.registerService(BundleContextImpl, String[], Object,
 Dictionary) line: 214
 	BundleContextImpl.registerService(String[], Object, Dictionary) line: 
 433
 	HandlerManagerFactory(IPojoFactory).start() line: 613
 	Extender.createAbstractFactory(Bundle, Element) line: 520
 	Extender.parse(Bundle, String) line: 301
 	Extender.startManagementFor(Bundle) line: 237
 	Extender.access$600(Extender, Bundle) line: 52
 	Extender$CreatorThread.run() line: 769
 	Thread.run() line: 662


 Daemon Thread [Thread-7] (Suspended)
 	owns: HandlerManagerFactory  (id=5709)		<==============
 	owns: ComponentFactory  (id=5710)
 	owns: Tracker  (id=5711)
 	owns: Dependency[]  (id=5712)
 	waiting for: ArrayList<E>  (id=5708)		<==============
 	HandlerManagerFactory(IPojoFactory).createComponentInstance(Dictionary,
 ServiceContext) line: 283
 	ComponentFactory(IPojoFactory).getHandler(IPojoFactory$RequiredHandler,
 ServiceContext) line: 830
 	ComponentFactory(IPojoFactory).computeDescription() line: 721
 	ComponentFactory(IPojoFactory).computeFactoryState() line: 757
 	ComponentFactory.addedService(ServiceReference) line: 414
 	Tracker$Tracked.trackAdding(ServiceReference) line: 725
 	Tracker$Tracked.trackInitialServices() line: 610
 	Tracker.open() line: 210
 	ComponentFactory.starting() line: 262
 	ComponentFactory(IPojoFactory).start() line: 605
 	PrimitiveComponentType.createFactory() line: 441
 	PrimitiveComponentType.initializeFactory() line: 198
 	PrimitiveComponentType.getFactory() line: 171
 	PrimitiveComponentType(ComponentType).ensureFactory() line: 185
 	PrimitiveComponentType(ComponentType).ensureAndGetFactory() line: 177
 	PrimitiveComponentType(ComponentType).createInstance() line: 79
 	COI_Starter.__M_coiBuildler(COI_ConfigLoader) line: 176
 	COI_Starter.coiBuildler(COI_ConfigLoader) line: not available
 	COI_Starter.__M_startOSGI() line: 97
 	COI_Starter.startOSGI() line: not available
 	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not  available [native method]
 	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
 	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
 	Method.invoke(Object, Object...) line: 597
 	Callback.call(Object[]) line: 233
 	Callback.call() line: 193
 	LifecycleCallback.call() line: 86
 	LifecycleCallbackHandler.__M_stateChanged(int) line: 162
 	LifecycleCallbackHandler.stateChanged(int) line: not available
 	InstanceManager.setState(int) line: 535
 	InstanceManager.stateChanged(ComponentInstance, int) line: 1401
 	HandlerManager(InstanceManager).setState(int) line: 560
 	HandlerManager.stateChanged(ComponentInstance, int) line: 239
 	DependencyHandler(Handler).setValidity(boolean) line: 174
 	DependencyHandler.__M_checkContext() line: 186
 	DependencyHandler.checkContext() line: not available
 	DependencyHandler.__M_validate(DependencyModel) line: 149
 	DependencyHandler.validate(DependencyModel) line: not available
 	Dependency(DependencyModel).validate() line: 642
 	Dependency(DependencyModel).computeDependencyState() line: 310
 	Dependency(DependencyModel).manageArrival(ServiceReference) line: 399
 	Dependency(DependencyModel).addedService(ServiceReference) line: 335
 	Tracker$Tracked.trackAdding(ServiceReference) line: 725
 	Tracker$Tracked.track(ServiceReference) line: 686
 	Tracker$Tracked.serviceChanged(ServiceEvent) line: 647
 	FilteredServiceListener.serviceChanged(ServiceEvent) line: 107
 	BundleContextImpl.dispatchEvent(Object, Object, int, Object) line: 861
 	EventManager.dispatchEvent(Set, EventDispatcher, int, Object) line: 
 230
 	ListenerQueue.dispatchEventSynchronous(int, Object) line: 148
 	ServiceRegistry.publishServiceEventPrivileged(ServiceEvent) line: 819
 	ServiceRegistry.publishServiceEvent(ServiceEvent) line: 771
 	ServiceRegistrationImpl.register(Dictionary) line: 130
 	ServiceRegistry.registerService(BundleContextImpl, String[], Object,
 Dictionary) line: 214
 	BundleContextImpl.registerService(String[], Object, Dictionary) line: 
 433
 	BundleContextImpl.registerService(String, Object, Dictionary) line: 
 451
 	IPojoContext.registerService(String, Object, Dictionary) line: 404
 	StartupSequencerImpl$SequenceThread.launchStartupPhase(StartupPhase)
 line: 309
 	StartupSequencerImpl$SequenceThread.runStartup() line: 389
 	StartupSequencerImpl$SequenceThread.run() line: 262
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-29 11:17:45.452,,,no_permission,,,,,,,,,,,,292622,,,Tue Dec 18 08:49:17 UTC 2012,,,,,,0|i0s9qv:,163055,,,,,,,,"29/Nov/12 11:17;sauthieg;As far as I understand the issue, there is 1 thread creating a component instance (from the iPOJO extender), it takes a lock when creating a handler instance.
And there is another Thread (is StartupSequencer a class of yours ?) that register a service that ends up starting a component instance that in turn creates and start a new PrimitiveComponentType that also wants to create a Handler instance (from the same handler type). Here is the dead lock.

As a workaround, is it possible to move the PrimitiveComponentType startup outside of the @Validate method?
If possible, does this solve the issue?

","29/Nov/12 14:01;seb64;StartupSequencerImpl is one of my classes.

I tried to run the PrimitiveComponentType startup from another thread and it did not solve the problem. The same deadlock still occasionally happens.

New stack trace:

Daemon Thread [Thread-9] (Suspended)	
	owns: ComponentFactory  (id=59)	
	owns: ArrayList<E>  (id=60)	
	waiting for: HandlerManagerFactory  (id=58)	
	HandlerManagerFactory(IPojoFactory).createComponentInstance(Dictionary, ServiceContext) line: 258	
	ComponentFactory(IPojoFactory).getHandler(IPojoFactory$RequiredHandler, ServiceContext) line: 830	
	ComponentFactory(IPojoFactory).createComponentInstance(Dictionary, ServiceContext) line: 306	
	ComponentFactory(IPojoFactory).createComponentInstance(Dictionary) line: 239	
	PrimitiveComponentType(ComponentType).createInstance() line: 79	
	COI_Starter$1.run() line: 191	


Daemon Thread [Thread-1] (Suspended)	
	owns: HandlerManagerFactory  (id=58)	
	owns: ComponentFactory  (id=61)	
	owns: HandlerManagerFactory  (id=62)	
	waiting for: ArrayList<E>  (id=60)	
	HandlerManagerFactory(IPojoFactory).createComponentInstance(Dictionary, ServiceContext) line: 283	
	ComponentFactory(IPojoFactory).getHandler(IPojoFactory$RequiredHandler, ServiceContext) line: 830	
	ComponentFactory(IPojoFactory).computeDescription() line: 721	
	ComponentFactory(IPojoFactory).computeFactoryState() line: 757	
	ComponentFactory.addedService(ServiceReference) line: 414	
	Tracker$Tracked.trackAdding(ServiceReference) line: 725	
	Tracker$Tracked.track(ServiceReference) line: 686	
	Tracker$Tracked.serviceChanged(ServiceEvent) line: 642	
	FilteredServiceListener.serviceChanged(ServiceEvent) line: 107	
	BundleContextImpl.dispatchEvent(Object, Object, int, Object) line: 861	
	EventManager.dispatchEvent(Set, EventDispatcher, int, Object) line: 230	
	ListenerQueue.dispatchEventSynchronous(int, Object) line: 148	
	ServiceRegistry.publishServiceEventPrivileged(ServiceEvent) line: 819	
	ServiceRegistry.publishServiceEvent(ServiceEvent) line: 771	
	ServiceRegistrationImpl.register(Dictionary) line: 130	
	ServiceRegistry.registerService(BundleContextImpl, String[], Object, Dictionary) line: 214	
	BundleContextImpl.registerService(String[], Object, Dictionary) line: 433	
	HandlerManagerFactory(IPojoFactory).start() line: 613	
	Extender.createAbstractFactory(Bundle, Element) line: 520	
	Extender.parse(Bundle, String) line: 301	
	Extender.startManagementFor(Bundle) line: 237	
	Extender.access$600(Extender, Bundle) line: 52	
	Extender$CreatorThread.run() line: 769	
	Thread.run() line: 662	
","18/Dec/12 08:49;clement.escoffier;Guillaume Sauthier proposed a patch changing how we compute the instance name. This should fixed the deadlock. 

However, we now must ensure that factory names are unique. As factory names are used as service pid (of the Factory service), they should have already been unique but it was not enforced. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"specVersion incorrectly determined, depends on class order",FELIX-3788,12617955,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,foghina,foghina,28/Nov/12 09:31,07/Dec/12 10:25,14/Mar/19 02:48,28/Nov/12 10:48,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,,SCR Tooling,,,,,,0,,,,,,"When running the generate-scr-scrdescriptor goal the scr-plugin will not properly detect what specVersion to use. I have not explicitly specified the specVersion to use (either in pom.xml or in the @Component annotation) and yet it tries to use version 1.1, because the first class that it finds is compatible with it. However, the next classes use 1.2 features (e.g. ReferencePolicyOption.GREEDY), so the build fails.

This becomes quite the heisenbug when the build works for some users (e.g. Jenkins), but doesn't for others, because the order in which it processes classes is different.","Linux 3.5.0-18-generic (Ubuntu 12.10) x64, Oracle Java 1.6.0_31, Apache Maven 3.0.4 (r1232337)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-28 10:46:52.097,,,no_permission,,,,,,,,,,,,292553,,,Wed Nov 28 10:46:52 UTC 2012,,,,,,0|i0s907:,162935,,,,,,,,"28/Nov/12 10:46;cziegeler;Thanks for reporting, it seems there is some statement missing. I'll fix this",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE on reference update,FELIX-3787,12617774,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,dpishchukhin,dpishchukhin,27/Nov/12 12:05,04/Sep/14 08:04,14/Mar/19 02:48,27/Nov/12 13:13,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I defined reference with annotation:
    @Reference(referenceInterface = Controller.class, cardinality = ReferenceCardinality.MANDATORY_UNARY, policyOption = ReferencePolicyOption.GREEDY)
    protected Controller controller;

when I install a new service I got an error:
java.lang.NullPointerException
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:383)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-27 12:25:51.407,,,no_permission,,,,,,,,,,,,292337,,,Tue Nov 27 13:13:29 UTC 2012,,,,,,0|i0rxa7:,161036,,,,,,,,"27/Nov/12 12:25;fmeschbe;Thanks for reporting.

Would you mind providing us with the component declaration which led to this issue ?

NB: I have seen this before but was not able to reproduce.","27/Nov/12 12:30;dpishchukhin;<?xml version=""1.0"" encoding=""UTF-8""?>
<components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.2.0"">
    <scr:component name=""com.acme.foo.agent"">
        <implementation class=""com.acme.foo.agent.impl.AgentImpl""/>
        <service servicefactory=""false"">
            <provide interface=""com.acme.foo.agent.Agent""/>
        </service>
        <property name=""com.acme.foo.agent.prop1.value"" value=""val 1""/>
        <property name=""service.pid"" value=""com.acme.foo.agent""/>
        <reference name=""context"" interface=""com.acme.foo.api.Provider"" cardinality=""1..1"" policy=""static"" target=""(com.acme.foo.provider.name=provider.archive)"" bind=""bindContext"" unbind=""unbindContext""/>
        <reference name=""controller"" interface=""com.acme.foo.api.Controller"" cardinality=""1..1"" policy=""static"" bind=""bindController"" unbind=""unbindController"" policy-option=""greedy""/>
    </scr:component>
</components>
","27/Nov/12 12:36;dpishchukhin;some additional info for the issue:

- there are 1+ Controller service. The difference is only SERVICE_RANK property.
- Component is in active state when only 1 Controller service is available. Component is in registered state when 2 Controller services are registered and in WebConsole I see that ""No Services bound"" for all references, but state is ""Satisfied"". After some time the Component state changes to active  ","27/Nov/12 13:13;fmeschbe;Thanks.

I can reproduce it now.

The issue occurs because this is a delayed component which is *not* activated yet and so the internal dependency map has not been setup, thus is null and the statement:

  Map bound = ( Map ) m_componentManager.getDependencyMap().get( this );

is expected to throw an NPE in this case.

Turns out it is nasty (and unneeded logging only) because the component has never been activated. Consequently this situation has no adverse consequences on operations (despite the logging).

Fixing this in Rev. 1414168 by guarding against missing dependencies map.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration Admin tab not working when Metatype Service API is missing,FELIX-3784,12617568,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,26/Nov/12 06:46,06/Jun/13 15:34,14/Mar/19 02:48,25/Dec/12 20:13,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"When the MetaType Service API is missing the Web Console Configuration Admin tab is non-operational:

* displaying the ""configMgr"" label instead of a title
* sending 404/NOT FOUND when accessed
* logging an error message (see at the bottom)

The ConfigurationAdmin plugin should be refactored such, that:

  * It operates without the MetaType Service API available
      (already copes with missing MetaType Service instance)
  * It properly handles missing Configuration Admin API
      (same as for missing Configuration Admin Service instance)

[ERROR] Failed to instantiate plugin org.apache.felix.webconsole.internal.compendium.ConfigManager
java.lang.NoClassDefFoundError: org/osgi/service/metatype/ObjectClassDefinition
	at java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2404)
	at java.lang.Class.getConstructor0(Class.java:2714)
	at java.lang.Class.newInstance0(Class.java:343)
	at java.lang.Class.newInstance(Class.java:325)
	at org.apache.felix.webconsole.internal.servlet.PluginHolder$InternalPlugin.doGetConsolePlugin(PluginHolder.java:748)
	at org.apache.felix.webconsole.internal.servlet.PluginHolder$Plugin.getConsolePlugin(PluginHolder.java:535)
	at org.apache.felix.webconsole.internal.servlet.PluginHolder$Plugin.doGetTitle(PluginHolder.java:522)
	at org.apache.felix.webconsole.internal.servlet.PluginHolder$Plugin.getTitle(PluginHolder.java:512)
	at org.apache.felix.webconsole.internal.servlet.PluginHolder.getLocalizedLabelMap(PluginHolder.java:248)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:470)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:418)
	at org.apache.felix.http.base.internal.handler.ServletHandler.doHandle(ServletHandler.java:96)
	at org.apache.felix.http.base.internal.handler.ServletHandler.handle(ServletHandler.java:79)
	at org.apache.felix.http.base.internal.dispatch.ServletPipeline.handle(ServletPipeline.java:42)
	at org.apache.felix.http.base.internal.dispatch.InvocationFilterChain.doFilter(InvocationFilterChain.java:49)
	at org.apache.felix.http.base.internal.dispatch.HttpFilterChain.doFilter(HttpFilterChain.java:33)
	at org.apache.felix.http.base.internal.dispatch.FilterPipeline.dispatch(FilterPipeline.java:48)
	at org.apache.felix.http.base.internal.dispatch.Dispatcher.dispatch(Dispatcher.java:39)
	at org.apache.felix.http.base.internal.DispatcherServlet.service(DispatcherServlet.java:67)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:926)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:549)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:410)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
Caused by: java.lang.ClassNotFoundException: org.osgi.service.metatype.ObjectClassDefinition not found by org.apache.felix.webconsole.all [10]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1460)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:72)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1843)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
	... 34 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,292068,,,Thu Jun 06 15:34:57 UTC 2013,,,,,,0|i0rrd3:,160077,,,,,,,,"25/Dec/12 20:13;fmeschbe;Refactored support for Configuration Admin Service in Rev. 1425765

For Web Console configuration the ConfigurationSupport class is split into the pure ManagedService implementation and an extension also implementing the MetatypeProvider interface for Metatype Service support. Depending on API available one or the other class is instantiated.

The ConfigManager and ConfigurationAdminConfigurationPrinter classes are moved to a new ""configuration"" package and split. The goal is to reduce and separate dependencies on Configuration Admin and Metatype Service API and to prevent exceptions and and ""uncontrolled"" behavior in the absence of the API.",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationAdminConfigurationPrinter failing if Configuration Admin API not bound,FELIX-3783,12617567,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,26/Nov/12 06:36,06/Jun/13 15:35,14/Mar/19 02:48,26/Nov/12 06:40,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,If the Configuration Admin Service API is not available the Configuration Admin Configuration Printer does not note about the missing service but a ClassNotFoundError due not not finding the ConfigurationAdmin class.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,292067,,,Thu Jun 06 15:35:01 UTC 2013,,,,,,0|i0rrcv:,160076,,,,,,,,26/Nov/12 06:40;fmeschbe;Fixed in Rev. 1413487,06/Jun/13 15:35;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InterpolationHelperTest.testBasicSubstitution fails with JDK7 on Windows,FELIX-3779,12617371,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,djencks,janstey,janstey,22/Nov/12 19:15,22/Oct/13 23:33,14/Mar/19 02:48,22/Oct/13 23:33,,,,,,,,,,,,,,Utils,,,,,,0,,,,,,Noticed that testBasicSubstitution fails on some platforms (like win + JDK7) because it does not start with a clean set of system properties. The value2 system property is left over from another test that ran before and affects the outcome of this test. Simple patch coming...,,,,,,,,,,,,,,,,,,,,22/Nov/12 19:15;janstey;FELIX-3779.patch;https://issues.apache.org/jira/secure/attachment/12554694/FELIX-3779.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-22 23:33:43.802,,,no_permission,,,,,,,,,,,,259590,,,Tue Oct 22 23:33:43 UTC 2013,,,,,,0|i0lry7:,125179,,,,,,,,22/Nov/12 19:15;janstey;Patch to fix test.,"22/Oct/13 23:33;djencks;r1534849.

I elaborated your patch to also clear the system properties that get set at the end of the tests to avoid the possibility of breaking other tests in a similar way.

Many thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven-bundle-plugin does not scan blueprint in workspace outside default location,FELIX-3772,12617078,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,rigas.grigoropoulos,rigas.grigoropoulos,21/Nov/12 10:16,12/Jun/13 23:46,14/Mar/19 02:48,22/Nov/12 01:27,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"maven-bundle-plugin will not scan blueprint xml files in the workspace during a Maven build, unless the blueprint file is located at OSGI-INF/blueprint/ and an instruction ""Bundle-Blueprint: OSGI-INF/blueprint"" is provided.

The bug is in org.apache.felix.bundleplugin.BlueprintPlugin and in method analyzeJar.
Original code:

        String bpHeader = analyzer.getProperty( ""Bundle-Blueprint"", ""OSGI-INF/blueprint"" );
        Map<String, Map<String, String>> map = Processor.parseHeader( bpHeader, null );
        for ( String root : map.keySet() )
        {
            Jar jar = analyzer.getJar();
            Map<String, Resource> dir = jar.getDirectories().get( root );
            if ( dir == null || dir.isEmpty() )
            {
                Resource resource = jar.getResource( root );
                if ( resource != null )
                    process( analyzer, root, resource, headers );
                return false;
            }

This code reads a custom location from the Bundle-Blueprint instruction, locates the resource in the classpath and does the processing, but then just returns false.
Changing as follows fixes the problem:
           if ( resource != null )
                    process( analyzer, root, resource, headers );
                continue;","Windows 7, Maven 3.0.4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-22 01:17:32.732,,,no_permission,,,,,,,,,,,,259012,,,Thu Nov 22 01:27:16 UTC 2012,,,,,,0|i0l88n:,121985,,,,,,,,22/Nov/12 01:17;mcculls;May also be related to FELIX-3602 (fixed in trunk and deployed in latest 2.4.0-SNAPSHOT),22/Nov/12 01:27;mcculls;Fixed in r1412405 please test latest 2.4.0-SNAPSHOT from https://repository.apache.org/content/groups/snapshots/ or build plugin locally,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
servicediagnostics plugin should properly handle service properties,FELIX-3767,12616706,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,apanday,apanday,19/Nov/12 10:35,04/Jul/13 21:54,14/Mar/19 02:48,04/Jul/13 21:54,,,,,,,,,,,,,,Web Console,,,,,,0,,,,,,"when the same service is registered by multiple implementations using different service properties, the service diagnostics plugin doesn't differentiate them properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,258563,,,Thu Jul 04 21:54:02 UTC 2013,,,,,,0|i0kuy7:,119832,,,,,,,,04/Jul/13 21:54;apanday;implemented in version 0.1.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in UpdateConfiguration#run,FELIX-3762,12616405,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,cziegeler,cziegeler,16/Nov/12 13:11,28/Sep/13 15:26,14/Mar/19 02:48,20/Nov/12 10:56,configadmin-1.6.0,,,,,,configadmin-1.8.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"During startup I sometimes see a set of these NPE's :
16.11.2012 04:48:47.004 *ERROR* [CM Configuration Updater (Update: pid=org.apache.sling.servlets.resolver.SlingServletResolver)] org.apache.felix.configadmin Service [org.apache.felix.cm.ConfigurationAdmin,48] Unexpected problem executing task (java.lang.NullPointerException) java.lang.NullPointerException
	at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1701)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:103)
	at java.lang.Thread.run(Thread.java:662)
16.11.2012 04:48:47.005 *INFO* [FelixStartLevel] org.apache.felix.configadmin BundleEvent STARTED

Looking at the code, it seems the configuration update thread is started before managedServiceTracker or managedServiceFactoryTracker are set in the start() method of the ConfigurationManager",,,,,,,,,,,,,,,,,,,,16/Nov/12 17:54;fmeschbe;FELIX-3762.patch;https://issues.apache.org/jira/secure/attachment/12553806/FELIX-3762.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-16 16:55:02.283,,,no_permission,,,,,,,,,,,,258186,,,Sat Sep 28 15:26:59 UTC 2013,,,,,,0|i0knmn:,118645,,,,,,,,"16/Nov/12 13:25;cziegeler;Looking more into the code, I'm really wondering how this could happen?","16/Nov/12 16:55;fmeschbe;This is probably what happens:

1 Thread created (not started)
2 ConfigurationAdmin service is registered and a ServiceListener is creating or updating configuration
3 An UpdateTask is created which sets the ""helper"" field in the constructor
4 The managedService[Factory]Trackers are created
5 The threads are started and the UpdateTask executed

The problem is step 3 where the helper field is set as a reference to the appropriate managedService[Factory]Tracker. Since this is still null, this fails.","16/Nov/12 17:54;fmeschbe;Proposing to set the helper on-demand when the task is executed, which will always be after the trackers have been set and started.

WDYT ?","17/Nov/12 13:50;cziegeler;Yes, looks good to me - so far I couldn't reproduce the problem just saw it once,","18/Nov/12 18:03;fmeschbe;Applied the patch in Rev. 1410944.

Tests and CT still pass.

> so far I couldn't reproduce the problem just saw it once

Other concurrency issues only showed up on Linux systems, maybe this is a similar case ?",20/Nov/12 10:56;fmeschbe;I think this can be resolved.,28/Sep/13 15:26;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MetaType AD.validate() cannot deal with multi-valued cardinality,FELIX-3758,12616236,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,15/Nov/12 13:33,17/Sep/13 12:53,14/Mar/19 02:48,15/Nov/12 16:49, metatype-1.0.6,,,,,,metatype-1.0.8,,,,,,,Metatype Service,,,,,,0,,,,,,"If an attribute has a cardinality != 0, then the validate will fail to take this into consideration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,257993,,,Thu Nov 15 16:49:32 UTC 2012,,,,,,0|i0klr3:,118341,,,,,,,,"15/Nov/12 16:49;jajans;Committed a fix + testcase in rev #1409877. 

Please review...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"MetaType AD.validate() ignored mandatory fields without min, max or optionValues",FELIX-3757,12616233,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,jajans,jajans,jajans,15/Nov/12 13:14,17/Sep/13 12:53,14/Mar/19 02:48,16/Nov/12 10:19, metatype-1.0.6,,,,,,metatype-1.0.8,,,,,,,Metatype Service,,,,,,0,,,,,,"If an attribute is required, but does not define its min, max or optionValues parameters, the validate() regards absent data as valid.
",,,,,,,,,,,,,,,,,,,,16/Nov/12 07:26;fmeschbe;FELIX-3757.patch;https://issues.apache.org/jira/secure/attachment/12553751/FELIX-3757.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-16 07:14:10.407,,,no_permission,,,,,,,,,,,,257990,,,Fri Nov 16 10:43:58 UTC 2012,,,,,,0|i0klqf:,118338,,,,,,,,"15/Nov/12 16:49;jajans;Committed a fix + testcase in rev #1409877. 

Please review...","16/Nov/12 07:14;fmeschbe;Since you committed a single patch for three issues, I don't exactly know which part of the patch applies to which fix. So I just open this one..

After applying this patch, the OSGi CT fails for the following reasons:

(1) ADValidator.validateNumericValue does value.compareTo(Object) for min and max. Both min and max are Integer objects while the value may be any type extends Number. If value happens to not be Integer, this comparison fails with a ClassCastException.

Example failure:
>   java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long
>           at java.lang.Long.compareTo(Long.java:50)
>           at org.apache.felix.metatype.ADValidator.validateNumericValue(ADValidator.java:302)

(2) Floating point number validation fails: ADValidator.validateNumericValue assumes the min and max values to be Integer values which is wrong. Instead the min and max values for numeric attributes is expected to be of the same type as the value type. Hence parsing those into an Integer is inherently wrong.

The fix to both issues is to actually parse the min and max values with the same parsing as parsing the value to be checked.","16/Nov/12 07:26;fmeschbe;Proposed patch.

Please also note that the formatting does not comply with the Felix formatting style: opening brackets are on the new line and we use spaces instead of tabs for indentation. Thanks. (my patch does not fix this for clarity)","16/Nov/12 10:19;jajans;I've applied the correct code formatting rules (sorry about that) and applied your proposed fix for the min/max validation. 

The changes are in rev #1410279.

Thanks for reviewing my changes!
",16/Nov/12 10:43;fmeschbe;Thanks. test cases and CT now pass.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MetaType AD.validate() regards invalid input as absent input,FELIX-3756,12616232,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,jajans,jajans,jajans,15/Nov/12 13:07,17/Sep/13 12:53,14/Mar/19 02:48,15/Nov/12 16:49, metatype-1.0.6,,,,,,metatype-1.0.8,,,,,,,Metatype Service,,,,,,0,,,,,,"If an attribute is not mandatory, the validate() method of its AttributeDefinition will regard an invalid input the same as absent input. 

For example, consider an optional integer attribute. For an input ""abc"", its validate() method returns """". This is a bit unfortunate as it can cause invalid data to be fed into the system.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,257989,,,Thu Nov 15 16:49:43 UTC 2012,,,,,,0|i0klq7:,118337,,,,,,,,"15/Nov/12 16:49;jajans;Committed a fix + testcase in rev #1409877. 

Please review...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Services registered from within the activate method may not be bound,FELIX-3754,12615977,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,13/Nov/12 23:23,04/Sep/14 08:04,14/Mar/19 02:48,16/Nov/12 06:56,scr-1.6.2,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"The Sling POST Servlet registers a number of services in the activate method and expects these services to be bound to itself. With SCR 1.6.0 this worked because each component instance had its dependency managers configured with its component instance.

As of SCR 1.6.2 the DependencyManager instances are shared amongst all component instances and thus don't have a reference to the component instances. Instead actually bind, unbind and update services the DependencyManager instances call the respective component manager which then dispatches to the component instances.

At the point in time when the activate method is called (in the ImmediateComponentManager.createComponentInstance method) the actual component instance is not ""registered"" with the component manager yet and thus a bind call while the activate method is called cannot be satisfied.

To fix this, the component instance must be ""registered"" with the component manager before calling the activate method. If the activate method fails, the instance must of course be ""unregistered"" again.",,,,,,,,,,SLING-2663,,,,,,SLING-2876,,,,15/Nov/12 14:42;fmeschbe;FELIX-3754-improved.patch;https://issues.apache.org/jira/secure/attachment/12553655/FELIX-3754-improved.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-14 00:08:36.782,,,no_permission,,,,,,,,,,,,257583,,,Sun Mar 31 06:34:40 UTC 2013,,,,,,0|i0k3dz:,115366,,,,,,,,13/Nov/12 23:41;fmeschbe;Fixed with a test case in Rev. 1409028.,14/Nov/12 00:08;djencks;Doesn't this use case violate the spec?  A getService call cannot return an instance before it's activate method has returned.,14/Nov/12 00:09;djencks;Please convince me that this use case is spec compliant.,"14/Nov/12 07:25;fmeschbe;This is not about getService. This is what happens:

  Component references Service S (0..n, dynamic)
  Component is activated (activate is called)
  During activate Service S is registered
  ServiceEvent for S is sent
  DependencyManager for Component gets event and tries to bind
  Since the DependencyManager does not know the component instance yet, it cannot bind
  ServiceEvent handling terminates
  Component terminates activation

At the end Service S registered from the Component's activation method is never bound to the Component. This is certainly not spec compliant.

See the Sling POST Servlet [1] for an example.

[1] http://svn.apache.org/repos/asf/sling/trunk/bundles/servlets/post/src/main/java/org/apache/sling/servlets/post/impl/SlingPostServlet.java","14/Nov/12 18:09;djencks;OK, now I see what you want.  I agree the behavior you want should work.  However your current implementation is unsatisfactory because it does expose the implementation object to getService before activate returns.","15/Nov/12 08:58;fmeschbe;Yes, but this gets tricky to solve, I would assume.

In the simple immediate or delayed component use case we could just introduce another field, something like ""tmpImplementationObject"" which is considered by the ImmediateComponentManager.bind/unbind/update methods.

Its getting more complicated for the service factory component case where more than one instance may exist and be ""in creation"". So we would have a tmpImplentationObjects set for the bind/unbind/update methods ?

Will try to build a patch","15/Nov/12 14:42;fmeschbe;Proposed improvement: Instead of really setting the component instances, they are placed in a temporary field. If activation succeeds, they are moved to the correct location. Otherwise they are removed again.

WDYT?","16/Nov/12 00:52;djencks;The patch looks OK to me, thanks!",16/Nov/12 06:40;fmeschbe;Thanks for the feedback. I have aapplied the patch in Rev. 1410211,"16/Nov/12 06:56;fmeschbe;Our testcases and the OSGi CT still pass, so this can be resolved.","31/Mar/13 06:34;djencks;I found a related problem in FELIX-4006 when a component is being disposed.  Thinking about this some more I don't think that any special treatment of being-created implementation objects is needed for ServiceFactoryComponentManager because the service registry will only be calling the service factory once for each bundle, and hence once for each component.  Since there are no immediate service factory components we don't have to worry about getService accessing an under-construction object in this case.

I'm considering a state flag for immediate/delayed component manager since it may make some other things simpler.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Felix crashes when embedded within Felix,FELIX-3753,12615908,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,rotty3000,rotty3000,13/Nov/12 15:34,13/Nov/12 18:51,14/Mar/19 02:48,13/Nov/12 15:50,framework-4.0.3,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"- start Glassfish
- deployed a webapp with embedded felix
- see embedded felix crash during initialization [attached log]
","Glassfish 3.1.2.2, Jonas 5.2.3, (probably others)",,,,,,,,,,,,,,,,,,,13/Nov/12 15:36;rotty3000;glassfish3.1.2.2-webapp-with-embedded-felix-4.0.3.log;https://issues.apache.org/jira/secure/attachment/12553321/glassfish3.1.2.2-webapp-with-embedded-felix-4.0.3.log,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-13 15:50:44.065,,,no_permission,,,,,,,,,,,,257488,,,Tue Nov 13 18:51:42 UTC 2012,,,,,,0|i0k2sf:,115269,,,,,,,,13/Nov/12 15:36;rotty3000;Here is the stacktrace on Glassfish 3.1.2.2,"13/Nov/12 15:50;karlpauls;I commited something in r1408793. Can you please build from trunk and see whether that makes it work for you? Please close this issue if it does, otherwise, reopen. Thanks!",13/Nov/12 15:53;rotty3000;Will do!,"13/Nov/12 17:03;rotty3000;Same problem. I do not see a change that would have solved the issue.

The code is catching java.lang.Exception, but URL.setURLStreamHandlerFactory(currentFactory); throws java.lang.Error (which is not a subclass of Exception).","13/Nov/12 17:20;karlpauls;Hm, are you sure you did svn up and rebuild correctly? It is now catching throwable at exactly where the error is raised in your stack trace...
","13/Nov/12 17:54;rotty3000;[rotty@rotty-desktop (trunk $=) framework]$ git branch -v
  4.0.3 3eacafe [maven-release-plugin] prepare for next development iteration
* trunk d272cea FELIX-3752: Remove unused com.sun import causing compilation failure on AIX
","13/Nov/12 18:04;rotty3000;Ok, the guthub mirror is a passive mirror. Will pull the recent patchs from svn and retry.",13/Nov/12 18:51;rotty3000;Issue is resolved by commit r1408793,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compilation failure in utils subproject on AIX,FELIX-3752,12615882,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,13/Nov/12 12:28,17/Mar/15 06:49,14/Mar/19 02:48,13/Nov/12 12:33,utils-1.2.0,,,,,,utils-1.4.0,,,,,,,Utils,,,,,,0,,,,,,"When building the Felix Utils subproject on AIX, you bump into this compilation failure due to an unused com.sun import in PropertiesTest

[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.0.2:testCompile (default-testCompile) on project org.apache.felix.utils: Compilation failure
[ERROR] /home/hudson/workspace/felix-utils-7.1.x.fuse-stable-platform/jdk/jdk6/label/aix5/utils/src/test/java/org/apache/felix/utils/properties/PropertiesTest.java:[26,49] package com.sun.org.apache.xerces.internal.impl.dv does not exist
[ERROR] -> [Help 1]
[ERROR]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,257367,,,Tue Nov 13 12:33:56 UTC 2012,,,,,,0|i0jy5j:,114465,,,,,,,,13/Nov/12 12:33;gertvanthienen;Fixed in http://svn.apache.org/viewvc?view=revision&revision=1408700,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Component should set implementation object before propagating changed service properties,FELIX-3744,12614675,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,04/Nov/12 00:45,20/Nov/12 10:58,14/Mar/19 02:48,06/Nov/12 23:20,scr-1.6.2,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,A component needs to set its implementation object before propagating the service property changes from the activate method.  Otherwise the new service properties could satisfy a target filter and result in a getService() request before the implementation object is set but after it has been created.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-05 06:59:24.397,,,no_permission,,,,,,,,,,,,255096,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i0ep13:,83817,,,,,,,,"05/Nov/12 06:59;fmeschbe;Is this a release blocker ?

On the implementation: This looks tricky because the properties are updated in the createImplementationObject and disposeImplementationObject methods, resp., while the fields are set in the callers -- and not all callers to the same handling.

Now, the disposeImplementationObject method could just return the service properties to be set. But the createImplementationObject returns the service object and so cannot easily return the properties.

One option would be to enhance the MethodResult object with the component reference and the methods return MethodResult. This would convey all we need but isn't this breaching some encapsulation barrier ? (Though it remains in the same classe)",06/Nov/12 23:20;djencks;r1406395  This is easy to fix and IMO a release blocker.,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential endless loop setting the active framework startlevel,FELIX-3743,12614320,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,01/Nov/12 08:27,04/Jun/14 09:55,14/Mar/19 02:48,01/Nov/12 08:39,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"We experience an issue with setting the framework startlevel in the Felix.setActiveStartLevel(int, FrameworkListener[]) method.

On line 1216 the bundle lock is acquired. If this fails with an IllegalStateException the loop just continues. But the bundle remains in the m_startLevelBundles set and is retried later. In the case of an uninstalled bundle, this situation will not change and the method is probabl going into an endless loop.

Would it make sense to remove the bundle from the m_startLevelBundles set in the catch block starting line 1223 if the bundle has been uninstalled ?

Proposed patch:

Index: Felix.java
===================================================================
--- Felix.java	(revision 1404016)
+++ Felix.java	(working copy)
@@ -1227,6 +1227,14 @@
                                Logger.LOG_ERROR,
                                ""Error locking "" + tuple.m_bundle._getLocation(), ex);
                        }
+                        else
+                        {
+                            synchronized (m_startLevelBundles)
+                            {
+                                m_startLevelBundles.remove(tuple);
+                                bundlesRemaining = !m_startLevelBundles.isEmpty();
+                            }
+                        }
                        continue;
                    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-30 05:04:09.039,,,no_permission,,,,,,,,,,,,253563,,,Fri Nov 30 05:04:09 UTC 2012,,,,,,0|i0dvjb:,79038,,,,,,,,"01/Nov/12 08:39;fmeschbe;Committed the patch in Rev. 1404499

This removes uninstalled bundles from the set of bundles to handle.

Another cause for an IllegalStateException thrown from acquiring the bundle lock is failure to get the lock. In this case the bundle remains in the set and is retried later.","30/Nov/12 05:04;rickhall;This patch looks reasonable to me too, so I'll close this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"scr-plugin: ""Annotated method {0} not found""",FELIX-3739,12613753,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,js@cedarsoft.com,js@cedarsoft.com,27/Oct/12 09:26,07/Dec/12 10:25,14/Mar/19 02:48,30/Nov/12 11:00,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,,SCR Tooling,,,,,,0,,,,,,"I run in to that[1] problem.
The method that is not found looks like that:


> @Nonnull public static <T> Entry<? extends T> create( @Nonnull T
> object,
@Nonnull >byte[] expected ) {
> }

I have debugged this and it comes to that:

in ClassScanner#237 parameters are compared. The second parameter of
my method (byte[]) has a strange difference here:

parameterTypeName: [B
signature[index].getClassName(): byte[]

So I think this might be related to the asm usage
I *think* instead of ""signature[index].getClassName()"" there should be
called
signature[index].getDescriptor()


Any idea how I could work around that problem (without changing my
method's signature)?


Thanks,

Johannes


[1]
[ERROR] Failed to execute goal
org.apache.felix:maven-scr-plugin:1.8.0:scr
(generate-scr-scrdescriptor) on project test-utils:
com.cedarsoft.serialization.test.utils.AbstractSerializerTest2 :
Annotated method create not found. -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
execute goal org.apache.felix:maven-scr-plugin:1.8.0:scr
(generate-scr-scrdescriptor) on project test-utils:
com.cedarsoft.serialization.test.utils.AbstractSerializerTest2 :
Annotated method create not found.
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at
org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at
org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at
org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at
org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.MojoExecutionException:
com.cedarsoft.serialization.test.utils.AbstractSerializerTest2 :
Annotated method create not found.
	at
org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:222)
	at
org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: org.apache.felix.scrplugin.SCRDescriptorException:
Annotated method create not found.
	at
org.apache.felix.scrplugin.helper.ClassScanner.extractAnnotation(ClassScanner.java:249)
	at
org.apache.felix.scrplugin.helper.ClassScanner.processClass(ClassScanner.java:180)
	at
org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:143)
	at
org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:154)
	at
org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:217)
	... 21 more","Linux, Maven 3, Java 7",,,,,,,,,,,,,,,,,,,26/Nov/12 13:34;FELIX-3739-its.diff;https://issues.apache.org/jira/secure/attachment/12554850/FELIX-3739-its.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-29 17:20:12.015,,,no_permission,,,,,,,,,,,,252506,,,Wed Nov 28 15:47:50 UTC 2012,,,,,,0|i0ctgf:,72716,,,,,,,,"29/Oct/12 17:20;cziegeler;Thanks for the report, I'Ve just committed a fix, could you please give it a try?","01/Nov/12 14:37;js@cedarsoft.com;Can u give me a hint where the SNAPSHOTS are deployed to?

https://repository.apache.org/content/groups/snapshots/org/apache/felix/maven-scr-plugin/ seems to be the wrong place....",02/Nov/12 10:27;cziegeler;It's the right place but I forgot to deploy the snapshots...now they're up,"21/Nov/12 15:18;js@cedarsoft.com;The same problem occurs when there is a constructor that is annotated:


 @Inject
  public DefaultSerializationService(@Nonnull EntryDescriptorProviderService entryDescriptorProviderService) {


results in: ""Annoated method <init> not found.""


--> 1.8.1-SNAPSHOT does *not* fix this issue.

I strongly suggest that this is viewed as blocker since the plugin fails for methods that are not annoated with scr-annotations. 
And I suggest that the plugin does *not* fail if a method could not be found. Instead a warning should be enough to notify the user that there might be a problem.

","26/Nov/12 13:34;rmuntean;Since I feel a bit shy about diving deep in the internals of the maven-scr-plugin without a safety net I added a couple of ITs using the maven-invoker-plugin.

- basic-build-it which contains a single annotated DS component . This IT passes.
- external-annotations-it which contains a single annotated DS component which also contains an external annotation on a constructor. This IT fails.

To make it easy to review patches, I'm submitting this first and then I will start work on actually fixing the bug.","28/Nov/12 15:47;cziegeler;Thanks for your patch, Robert - i've applied your tests

I've also added a fix which just checks whether the name of the method is ""<init>"" to detect a constructor - not sure if this is the best solution, however tests pass now :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ComponentInstance.getServices(String refName) is implemented wrong for 0..1 and 1..1 refs,FELIX-3738,12613747,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,27/Oct/12 05:30,04/Sep/14 08:04,14/Mar/19 02:48,20/Dec/12 04:56, scr-1.6.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,For 0..1 and 1..1 refs getServices is supposed to return null (no good services) or an array of one service.  Currently it returns all the services matching the filter.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,252496,,,Thu Dec 20 04:56:16 UTC 2012,,,,,,0|i0ctdj:,72703,,,,,,,,20/Dec/12 04:56;djencks;This is fixed as a side effect of fixing 3729,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpFilter service.ranking is not evaluated properly under some circumstances,FELIX-3737,12613650,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,smigfu,smigfu,26/Oct/12 12:56,28/Sep/13 17:40,14/Mar/19 02:48,14/Aug/13 13:55,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"If a Http-Filter is registered with a service.ranking of Interger.MAX_VALUE and another Http-Filter is registered with a negative service.ranking (like org.apache.sling.i18n.impl.I18NFilter which has -700) the evaluation of the sorting order (mostly) fails.

The problem is FilterHandler's compareTo method which leads to an overflow in this case:

 public int compareTo(FilterHandler other)
 {
     return other.ranking - this.ranking;
 }",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-26 13:11:39.619,,,no_permission,,,,,,,,,,,,251251,,,Wed Aug 14 13:55:23 UTC 2013,,,,,,0|i0bc33:,64070,,,,,,,,"26/Oct/12 13:11;fmeschbe;Thanks for reporting.

Fixed in Rev. 1402499. Can you confirm it works for your ? Thanks.","31/Oct/12 13:16;smigfu;Thanks, it is looking good :)","14/Aug/13 13:55;jajans;Fixed in rev.1402499, solved a failing JUnit in rev.1512329.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MetaType: NPE in ServiceTracker for fragment bundle,FELIX-3734,12613454,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,jeremias@apache.org,jeremias@apache.org,25/Oct/12 08:54,20/Nov/12 11:00,14/Mar/19 02:48,25/Oct/12 14:48,metatype-1.0.4,,,,,, metatype-1.0.6,,,,,,,Metatype Service,,,,,,0,,,,,,"An NPE occurs when calling up the ""Config"" page of Felix WebConsole 4.0.0 when there are fragment bundles:

10:20:08,839|ERROR| qtp521679231-100 | ?                                   ? | 249 | %configMgr.pluginTitle: listFactoryConfigurations: Unexpected problem encountered
java.lang.NullPointerException
        at org.osgi.util.tracker.ServiceTracker.<init>(ServiceTracker.java:197)[org.apache.felix.framework-4.0.3.jar:]
        at org.osgi.util.tracker.ServiceTracker.<init>(ServiceTracker.java:268)[org.apache.felix.framework-4.0.3.jar:]
        at org.apache.felix.metatype.internal.MetaTypeProviderTracker.<init>(MetaTypeProviderTracker.java:36)
        at org.apache.felix.metatype.internal.MetaTypeInformationImpl.<init>(MetaTypeInformationImpl.java:74)
        at org.apache.felix.metatype.internal.ServiceMetaTypeInformation.<init>(ServiceMetaTypeInformation.java:79)
        at org.apache.felix.metatype.internal.MetaTypeServiceImpl.getMetaTypeInformation(MetaTypeServiceImpl.java:130)
        at org.apache.felix.webconsole.internal.compendium.ConfigManagerBase.getObjectClassDefinitions(ConfigManagerBase.java:121)[263:org.apache.felix.webconsole:4.0.0]
        at org.apache.felix.webconsole.internal.compendium.ConfigManagerBase.getFactoryPidObjectClasses(ConfigManagerBase.java:95)[263:org.apache.felix.webconsole:4.0.0]
        at org.apache.felix.webconsole.internal.compendium.ConfigManager.listFactoryConfigurations(ConfigManager.java:437)[263:org.apache.felix.webconsole:4.0.0]
        at org.apache.felix.webconsole.internal.compendium.ConfigManager.renderContent(ConfigManager.java:375)[263:org.apache.felix.webconsole:4.0.0]
        at org.apache.felix.webconsole.AbstractWebConsolePlugin.doGet(AbstractWebConsolePlugin.java:155)[263:org.apache.felix.webconsole:4.0.0]
        at org.apache.felix.webconsole.internal.compendium.ConfigManager.doGet(ConfigManager.java:309)[263:org.apache.felix.webconsole:4.0.0]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)[32:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2]",,,,,,,,,,,,,,,,,,,,25/Oct/12 08:55;jeremias@apache.org;felix-metatype-npe-fix-for-fragments.diff;https://issues.apache.org/jira/secure/attachment/12550756/felix-metatype-npe-fix-for-fragments.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-25 09:37:56.337,,,no_permission,,,,,,,,,,,,250992,,,Tue Nov 20 11:00:51 UTC 2012,,,,,,0|i0b33r:,62615,,,,,,,,25/Oct/12 08:55;jeremias@apache.org;Attached a patch to fix the problem.,"25/Oct/12 09:37;fmeschbe;Thanks for reporting.

Looking at this a bit more in-depth, it looks like there are two issues lingering actually:

(1) The MetaTypeService.getMetaTypeInformation(Bundle) implementation should probably return null for fragments any way. Respective information provided by the fragment should be exposed through the host bundle to which the fragment binds.

(2) The MetaTypeProviderTracker should not use the MetaTypeInformation bundle's context to listen for services but the Meta Type Service implementation bundle context. Same as is done for the ServiceMetaTypeInformation listener for ManagedService[Factory] services.","25/Oct/12 14:48;fmeschbe;Fixed in Rev. 1402162:

  - Don't try to get MetaTypeInformation for fragments
  - Use the MetaTypeService implementation bundle context  instead of the MetaTypeInformation's bundle context to track MetaTypeProvider services
  - Downgrade OSGi Core Dependency to 4.0 again",20/Nov/12 11:00;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
service.pid properties of ManagedServiceFactory services must be used as factory PIDs,FELIX-3732,12613356,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,24/Oct/12 19:48,02/May/13 02:29,14/Mar/19 02:48,24/Oct/12 20:23,metatype-1.0.4,,,,,, metatype-1.0.6,,,,,,,Metatype Service,Specification compliance,,,,,0,,,,,,"If a ManagedServiceFactory service is registered which implements the MetaTypeProvider interface the service.pid property value(s) of the service are used to augement the providing bundle's MetaTypeInformation.

In the case of ManagedServiceFactory services the service.pid property must be used as factory PIDs where currently they are used as singleton service PIDs.

This may create confusion and in fact also breaks OSGi CT tests.",,,,,,,,,,,,,,,,,,,FELIX-3184,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,250854,,,Tue Nov 20 11:00:51 UTC 2012,,,,,,0|i0b20n:,62439,,,,,,,,24/Oct/12 20:21;fmeschbe;The fix for FELIX-3184 in Rev. 1401856 changed some API in the MetaTypeInformationImpl class on which the ServiceMetaTypeInformation is based.,24/Oct/12 20:23;fmeschbe;Implemented this change in Rev. 1401858,"28/Oct/12 14:31;fmeschbe;In Rev. 1402997 removed support for the service.factoryPid service property.

This support has been introduced in the initial commit to implement the MetaType Service in Rev. 527597 (for FELIX-20) under wrong assumptions. Since the factory PIDs are actually the service.pid properties of the ManagedServiceFactory services this support for service.factoryPid properties must be removed.",20/Nov/12 11:00;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AD.validate of string attributes must validate the string length,FELIX-3730,12613354,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,24/Oct/12 19:40,20/Nov/12 11:00,14/Mar/19 02:48,24/Oct/12 19:42,metatype-1.0.4,,,,,, metatype-1.0.6,,,,,,,Metatype Service,Specification compliance,,,,,0,,,,,,"The AD.validate method validates an attribute value against the requirement, min, and max values. For String typed attributes this means the length of the string must be within the configured range. Currently the string is compared against the min and max values using String.compare which makes little to no sense.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,250852,,,Tue Nov 20 11:00:52 UTC 2012,,,,,,0|i0b1zz:,62436,,,,,,,,24/Oct/12 19:42;fmeschbe;Fixed in Rev. 1401839,20/Nov/12 11:00;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Track dependencies by imitating ServiceTracker and keeping a list of actual service references all the time,FELIX-3729,12613307,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,24/Oct/12 18:15,04/Sep/14 08:04,14/Mar/19 02:48,20/Dec/12 04:55,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,After implementing a lot of mistakes I think the only way to reliably track services in the dependency managers is to imitate ServiceTracker and maintain a list of service references all the time.,,,,,,,,,,,,,,FELIX-3790,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,250803,,,2012-10-24 18:15:04.0,,,,,,0|i0b1o7:,62383,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] NPE during shutdown,FELIX-3727,12613076,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Oct/12 23:33,20/Nov/12 10:58,14/Mar/19 02:48,25/Oct/12 23:58,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"[err] Exception in thread ""SCR Component Actor""
[err] java.lang.NullPointerException
[err] 	at org.apache.felix.scr.impl.Activator.log(Activator.java:378)
[err] 	at org.apache.felix.scr.impl.ComponentActorThread.run(ComponentActorThread.java:90)
[err] 	at java.lang.Thread.run(Thread.java:736)


caused by 

            Object logger = ( m_logService != null ) ? m_logService.getService() : null;

and m_logService being unset inside the iff.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.595,,,no_permission,,,,,,,,,,,,250474,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0ayrr:,61906,,,,,,,,25/Oct/12 23:58;djencks;I didn't provide a timeout that Felix suggested in issue 3704.,25/Oct/12 23:58;djencks;rev 1402234,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reference target filters defined as component properties are ignored,FELIX-3726,12612665,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,fmeschbe,fmeschbe,fmeschbe,19/Oct/12 12:26,20/Nov/12 10:58,14/Mar/19 02:48,19/Oct/12 13:00,,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),Specification compliance,,,,,0,,,,,,"Test setup has three components:

(1) E registered as BS and TC without service properties
(2) T1 disabled by default; to be registered as TC with property p=x
(3) T2 enabled by default with ref to TC and target (p=x)

Component T2 has the target defined as part of the component definition properties as in:

   <reference name=""ref"" ... />
   <property name=""ref.target"" value=""(p=x)"" />

This is expected to not activate T2 because the reference cannot be satisfied until T1 is enabled and registered as a TC service with the property.

Currently T2 is activated because the ref.target property is ignored and thus the component is registered without a target property and thus happily binds to component E.

The AbstractComponentManager.verifyDependencyManagers method has a commented call to update the target filters. Probably because the callers of this method do the update themselves before verifying. Except the Unsatisfied.activate method, which only verifies without setting the targets.",OSGi CT for DS: testReferenceTargetProperty,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,249914,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i0an4v:,60021,,,,,,,,"19/Oct/12 13:00;fmeschbe;Fixed in Rev. 1400076.

The Unsatisfied.activate method must set the target filters on the dependency managers before verifying them. Otherwise we get false positives.

I also removed the commented call to update target filters from the verifyDependencyManagers method because this update is always done before calling the verifyDM method.

After this fix, the CT also passes.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] hidden dependency on spring junit wrapper from pax exam,FELIX-3725,12612540,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,19/Oct/12 06:51,20/Nov/12 10:58,14/Mar/19 02:48,19/Oct/12 06:55,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"pax exam 2.4.0.RC1 uses the spring wrapper for junit, which is not published to maven central.  This is pulled in through 

junitBundles() in the configuration method.

If we switch to pax exam 2.4.0 we can use the published servicemix junit wrapper.

See http://team.ops4j.org/wiki/display/paxexam/JUnit+Driver",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:18.96,,,no_permission,,,,,,,,,,,,249851,,,Tue Nov 20 10:58:18 UTC 2012,,,,,,0|i0al3b:,59690,,,,,,,,19/Oct/12 06:55;djencks;r1399981,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] concurrent getService calls may return null,FELIX-3724,12612524,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,19/Oct/12 02:31,20/Nov/12 10:58,14/Mar/19 02:48,19/Oct/12 02:37,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,Really dumb mistake where if two getService calls come in and one creates the service the other returns null.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:13.976,,,no_permission,,,,,,,,,,,,249708,,,Tue Nov 20 10:58:13 UTC 2012,,,,,,0|i0aglr:,58963,,,,,,,,19/Oct/12 02:37;djencks;r1399951,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException on ConfigurationAdmin service creating components ,FELIX-3723,12612431,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,18/Oct/12 14:26,20/Nov/12 10:58,14/Mar/19 02:48,19/Oct/12 13:23, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Consider this situation:

  * Felix SCR 1.6
        Import-Package: org.osgi.service.cm;version=[1.2,2.0);resolution:=optional
  * OSGi Enterprise R5 API bundle
        Export-Package: org.osgi.service.cm;version=1.5
  * Felix Configuration Admin 1.4.0
        Export-Package: org.osgi.service.cm;version=1.4
        Import-Package: org.osgi.service.cm;version=[1.4,1.5)
  * Component Bundle
        Import-Package: org.osgi.service.cm;version=[1.4,1.5)

A component from the ""Component Bundle"" is registered and SCR happily starts creating it. SCR uses the Component Bundle's context to get the Configuration Admin serivce. Since the Component Bundle is wired tothe Felix Configuration Admin bundle it has an appropriate service implementation and the reference can be returned.

SCR then uses the Component Bundle's BundleContext to get the service. This succeeds.

Now SCR tries to cast the service Object to a ConfigurationAdmin object. But since the SCR bundle itself is wired to another API (the Enterprise one), the ConfugurationAdmin interface class objects are not the same and the cast fails.

Consequently, since this is not expected (but should be in this case), component creation fails.

The returned service should be checked, whether it can be cast to prevent this kind of failure.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,249572,,,Tue Nov 20 10:58:18 UTC 2012,,,,,,0|i0afmn:,58805,,,,,,,,"19/Oct/12 13:23;fmeschbe;Fixed Rev. 1400089

The ConfigurationAdmin service retrieved with the component's bundle context is checked against the ConfigurationAdmin API to which the DS bundle is wired. If it is not the same a WARN message is logged. Otherwise the component is configured as expected.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration not always provided upon initial service registration,FELIX-3721,12612373,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,fmeschbe,fmeschbe,fmeschbe,18/Oct/12 06:35,23/Nov/12 15:56,14/Mar/19 02:48,18/Oct/12 09:32,configadmin-1.6.0,,,,,,configadmin-1.6.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"With the changes to implement Targeted PIDs and refactoring of the service trackers for FELIX-3577 and FELIX-3481 a race condition has been introduced which may cause ManagedService and ManagedServiceFactory services to not be called back  on initial registration.

This has been exhibited by test build of the yet unpublished OSGi CT for Configuration Admin, for example:
    (1) ManagedService PID 1 registered
    (2) ManagedService PID 2 registered
    (3) ManagedService PID 2 called back

The problem is, that before the call back to ManagedService PID 2, the call back to ManagedService PID 1 is expected.

Turns out that this race condition takes place, which may primarily be reproduced on Linux platforms, probably due to different threading implementations on the platform:

   T1: register service
   T1: call ServiceTracker.addingService
   T1: schedule service update task
   T2: run update task
   T2: terminate update task without calling the service
   T1: return from ServiceTracker.addingService returning ConfigurationMap

This is expected since the service update task in T2 expects the ConfigurationMap stored in the ServiceTracker. But this is not the case yet because the ServiceTracker.addingService method has not yet returned it for it to be stored in the ServiceTracker. Therefore T2 is not able to call back the service and thus the update call never takes place.

The fix is either to delay the task execution in T2 or to prepare the ConfigurationMap in T1 and hand it over to the task to be executed in T2. The first solution is suboptimal because we cannot find a timing value which (a) does not delay too much bug (b) still makes sure the ConfigurationMap will ultimately be available.",Java 6 on Linux platforms,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,249484,,,Fri Oct 19 18:05:11 UTC 2012,,,,,,0|i0aesf:,58669,,,,,,,,18/Oct/12 06:52;fmeschbe;Committed a fix in Rev. 1399530: The ManagedService[Factory]Update tasks are now provided with the newly created ConfigurationMap which they hand back to the service tracker to provide the configuration. This accounts for the race situation and allows the asynchronous task to start and complete before the ServiceTracker.addingService method actually ends and allows the ServiceTracker to internally store and provide the ConfigurationMap.,18/Oct/12 09:32;fmeschbe;Looks like this fix does it.,"19/Oct/12 18:05;fmeschbe;Fixed another timing issue happening in our integration tests in Rev. 1400198:

When a ManagedService[Factory] updates the service.pid property of its service registration, the new configurations may not properly be recorded for them to be later updated (or removed if deleted). This happened in the test_ManagedService_change_pid and test_ManagedServiceFactory_change_pid tests of the ConfigurationBaseTest class on Linux and Windows platforms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Designate's pid attribute is optional and not mandatory,FELIX-3720,12612370,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,alexberger,alexberger,18/Oct/12 06:05,18/Oct/12 12:43,14/Mar/19 02:48,18/Oct/12 12:32,metatype-1.0.4,,,,,, metatype-1.0.6,,,,,,,Metatype Service,Specification compliance,,,,,0,,,,,,"In class org.apache.felix.metatype.MetaDataReader method readDesignate the ""pid"" attribute of a ""Designate"" element is read as required attribute:

       designate.setPid( this.getRequiredAttribute( ""pid"" ) );  
       designate.setFactoryPid( this.getOptionalAttribute( ""factoryPid"" ) );

This is wrong as according to the Metatype Service Specification (Version 1.2) the attributes ""pid"" and ""factoryPid"" are both optional but at least one of these two must be present (either ""pid"" or ""factoryPid""). Thus the code should be changed to something like this:

        final String pid = this.getOptionalAttribute( ""pid"" );
        final String factoryPid = this.getOptionalAttribute( ""factoryPid"" );
        if ( pid == null && factoryPid == null ) {
        	missingAttribute(""pid or factoryPid"");
        }
        designate.setPid( pid );
        designate.setFactoryPid( factoryPid );

Also the class MetaData should be fixed, its addDesignate member looks like this:

    public void addDesignate( Designate designate )
    {
        if ( designate != null )
        {
            if ( designates == null )
            {
                designates = new HashMap();
            }

            designates.put( designate.getPid(), designate );
        }
    }

but should be implemented something like this:

    public void addDesignate( Designate designate )
    {
        if ( designate != null )
        {
            if ( designates == null )
            {
                designates = new HashMap();
            }
            final String factoryPid = designate.getFactoryPid();
            if ( factoryPid == null ) {
            	designates.put( designate.getPid(), designate );	
            } else {
            	designates.put( factoryPid, designate );
            }            
        }
    }

Additionally the attribute OCD/name should also be treated to be optional (see MetaDataReader's member readOCD).

And last but not least MetaTypeInformationImpl's addMetaData member should be changed like this:

                // gather pids and factory pids
                if (designate.getFactoryPid() != null) {
                    this.factoryPids.add( designate.getFactoryPid() );
                    this.addMetaTypeProvider(designate.getFactoryPid(), dmtp);
                } else {
                    this.pids.add(designate.getPid());
                    this.addMetaTypeProvider(designate.getPid(), dmtp);
                }",,,,,,,,,,,,,,,,,,,,18/Oct/12 12:21;alexberger;metatype.diff;https://issues.apache.org/jira/secure/attachment/12549681/metatype.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-18 12:13:02.455,,,no_permission,,,,,,,,,,,,249481,,,Thu Oct 18 12:42:53 UTC 2012,,,,,,0|i0aerj:,58665,,,,,,,,18/Oct/12 07:23;alexberger;A patch against trunk which should fix all the problems mentioned in this issue.,"18/Oct/12 12:13;fmeschbe;Thanks for providing the patch. 

I agree with the optionality of the pid and factoryPid attributes and with the respective changes.

Yet, I do not agree with the OCD/name attribute being optional: According to the schema, this attribute is required. Why should it not be ?","18/Oct/12 12:17;alexberger;Yes you are right OCD/name is required. I must have been looking at the wrong line in the XSD :-)
I just updated the patch (diff) file",18/Oct/12 12:32;fmeschbe;Thanks for the updated patch. I have applied it slightly modified (formatting mostly) in Rev. 1399617.,"18/Oct/12 12:42;alexberger;Ok, that was a really fast fix and it passed all my tests. Thank you very much.

regards,
Alex",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS]  disabling a dependency manager should not reset the service count,FELIX-3719,12612361,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,18/Oct/12 05:01,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:23,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Since disabling a component doesn't necessarily have much to do with what can happen to it before it is deactivated, disabling a dependency manager should not set the service count to 0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:17.366,,,no_permission,,,,,,,,,,,,249471,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i0aepb:,58655,,,,,,,,18/Oct/12 06:23;djencks;rev 1399526,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] deactivate might not move component state to unsatisfied,FELIX-3718,12612360,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,18/Oct/12 04:52,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:20,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"After deactivating, we check to see if the state changed before moving to unsatisfied:

            if ( acm.state() == this )
            {
                acm.changeState( Unsatisfied.getInstance() );
            }


But the state might have been moved from Active to Registered meanwhile, so deactivate would leave us in the Registered state.  Instead, check if the state is a satisfied state, and if so, move it to unsatisfied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:17.073,,,no_permission,,,,,,,,,,,,249470,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i0aep3:,58654,,,,,,,,"18/Oct/12 06:20;djencks;rev 1399525.  I introduced an isSatisfied method on State so if we are still in a satisfied state at the end of deactivation, we move to unsatisfied.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] unbind method might not have correct parameters,FELIX-3717,12612259,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,17/Oct/12 17:01,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:22,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"bindA(ServiceReference sr)
unbindA(A a)

unbind gets null as a parameter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.67,,,no_permission,,,,,,,,,,,,249340,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0a6zz:,57407,,,,,,,,"18/Oct/12 06:22;djencks;rev 1399527.  Changed RefPair so we always set the service object explicitly, modified BindMethod.getServiceObject to take a RefPair and (possibly) fill it in, and made the invokeUpdatedMethod and invokeUnbindMethod call the getServiceObject method.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve support for cardinality multiple,FELIX-3716,12612249,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,17/Oct/12 15:57,07/Dec/12 16:17,14/Mar/19 02:48,28/Nov/12 05:10,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"The resolver implementation currently ignores the cardinality directive.  We should try to improve this to allow a requirement to get wired to multiple providers if the cardinality directive is set to multiple.

I have been working on a fix to this but am waiting for the fix in issue 3707 to get release first so I can base the patch off that fix.",All,,,,,,,,,,,,,,,,,,,18/Oct/12 18:14;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12549722/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-28 05:10:54.063,,,no_permission,,,,,,,,,,,,249328,,,Fri Dec 07 16:17:55 UTC 2012,,,,,,0|i0a6wv:,57393,,,,,,,,"18/Oct/12 18:14;tjwatson;A possible fix to support multiple cardinality.

This fix is more involved that I would have liked.  For multiple cardinality requirements the check for consistency will remove any candidates that cause a conflict in the class space by using  a copy of the current permutation and removing them from the copy.   If there is still at least one remaining candidate for the requirement the original permutation check continues as if there is no conflict in order to verify all the remaining requirements.  If we get to the end of the consistency check with no errors then we use the copy of the permutation where we removed all the candidates that caused conflicts for multiple cardinality requirements.
","28/Nov/12 05:10;rickhall;The ""candLoop"" for-loop label isn't necessary, is it? The ""break"" should only break out of the innermost loop, right?

Otherwise, I've reviewed the patch enough to know that I can't think of a better way to do it and it is close enough to what I envisioned. The main issue I'd like to get rid of is having to put the multiple cardinality permutation on the side, but I can't see how to do it so maybe it isn't possible. Admittedly, I can't give this as much thought as I would like, so I'll commit this patch save for the above exception.

Please close if satisfied.",07/Dec/12 16:17;tjwatson;You are correct the candLoop label is no longer necessary.  Thanks for releasing the fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResolverImpl is not thread safe,FELIX-3715,12612247,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,17/Oct/12 15:54,13/Dec/12 18:43,14/Mar/19 02:48,11/Dec/12 21:21,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"The org.apache.felix.resolver.ResolverImpl class has many member fields which keep state for a single resolve operation.  But the resolve methods may be called by multiple threads which means different resolve operations could try to use the same internal state objects leading to very unpredictable behavior.

Here is a list of the current member fields that hold state:

m_usesPermutations
m_importPermutations
m_packageSourcesCache

I think we should introduce contextual class that can be used to store these state objects as well as the ResolveContext used for a particular resolve operation.  This contextual object (I suggest calling it something like ResolveOperation) would be passed around instead of the ResolveContext.

I think this approach is necessary instead of using thread local variables.  The reason is that a call back to a ResolveContext could initiate another resolve() operation using an unrelated (or sandbox) environment from the current resolve operation.  Using thread locals would not help in cases where nested resolve() operations happen.",All,,,,,,,,,,,,,,,,,,,07/Dec/12 16:45;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12559894/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-17 17:19:41.975,,,no_permission,,,,,,,,,,,,249325,,,Thu Dec 13 18:43:44 UTC 2012,,,,,,0|i0a6w7:,57390,,,,,,,,"17/Oct/12 17:19;rickhall;Sounds good.

How about ResolveSession?","17/Oct/12 20:00;tjwatson;Sure, ResolveSession is fine with me.  I can work on a patch for this after a fix for issue 3716 has been released (I am close to having something to review for that bug).","07/Dec/12 16:45;tjwatson;Here is a possible fix.  I added a ResolveSession class to ResolverImpl to hold all the state holding objects.  In most cases I pass a ResolveSession around instead of a ResolveContext now.  This makes the patch look rather large, but it is because all the lines of code which accessed state holding member variables now has to access the ResolveSession.

I added a couple of TODOs about clearing out the state in finally blocks and about checking for multiple cardinality candidates for dynamic resolution.  I think both are needed but wanted to call out to the code where I made functional changes for the reviewer of the patch.",11/Dec/12 21:21;rickhall;I've applied the patch and deployed a snapshot. Please close this issue if you are satisfied. Thanks.,13/Dec/12 13:21;benoitf;In my tests this commit fixed the problem of Thread safe,13/Dec/12 18:43;tjwatson;Thanks for releasing the fix.  Closing the issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error when when fragment bundle is updated,FELIX-3714,12612218,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,jfury,jfury,17/Oct/12 12:57,17/Mar/15 06:57,14/Mar/19 02:48,06/Dec/13 10:14,fileinstall-3.2.6,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,"On our project we have FileInstall watching a directory with bundles. One of those bundles is a fragment. 
When the fragment is modified (or deleted/created), we get the following error in the log:

2012-10-17-13:20:53.406+0400 ERROR [Thread-17] org.apache.felix.fileinstall    In main loop, we have serious trouble
java.lang.NullPointerException: null
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.findBundlesWithFragmentsToRefresh(DirectoryWatcher.java:1273) ~[na:na]
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:491) ~[na:na]
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:291) ~[na:na]

And what is more critical none of the other modified bundles becomes updated.

The source of the NPE is 
if (hostBundle.getSymbolicName().equals(path.getName()))  
because there is no check here for SymbolicName being null.

In our case the problem was in that there was a non-bundle jar inside osgi container that therefore didn't have a SymbolicName, so we just removed it and that solved the problem. 

However, I strongly believe that there should be a check for not null in the mentioned line.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-06 10:14:43.922,,,no_permission,,,,,,,,,,,,249290,,,Fri Dec 06 10:14:43 UTC 2013,,,,,,0|i0a6m7:,57345,,,,,,,,"06/Dec/13 10:14;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java
Committed r1548482
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInstall throws Interrupted exception when refreshed,FELIX-3712,12612015,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,pererik,pererik,16/Oct/12 11:22,12/Jun/15 19:29,14/Mar/19 02:48,06/Dec/13 09:49,fileinstall-3.2.4,fileinstall-3.2.6,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,2,,,,,,"FileInstall will throw exception when refreshing. It is possible there are easier ways to reproduce this but here is one way:

1) Uninstall gogo command (if available) from the osgi container.
2) Install fileinstall
3) Put gogo command in the directory watched by fileinstall

Result: Fileinstall throws

In main loop, we have serious trouble: java.lang.RuntimeException: java.lang.InterruptedException
java.lang.RuntimeException: java.lang.InterruptedException
        at org.apache.felix.fileinstall.internal.FileInstall.refresh(FileInstall.java:332)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.refresh(DirectoryWatcher.java:677)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:494)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:291)
Caused by: java.lang.InterruptedException
        at java.lang.Object.wait(Native Method)
        at org.apache.felix.fileinstall.internal.FileInstall.refresh(FileInstall.java:330)
        ... 3 more

Possible reason: Due to FELIX-3414, the refresh() method in DirectoryWatcher was changed from calling
packageAdmin#refreshPackages() directly, to using the FileInstall#refresh()
helper method. The later wraps interrupted excpetions in a runtime exception which is never caught in the directory watcher's main loop. Thus, the directory watcher will re-throw the exception, which it previously did not (since the interrupted excpetion would get caught).",,,,,,,,,,,,,,FELIX-4346,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-25 22:39:52.189,,,no_permission,,,,,,,,,,,,248960,,,Fri Jun 12 19:29:00 UTC 2015,,,,,,0|i0a2qv:,56718,,,,,,,,"25/Nov/12 22:39;rotty3000;I get the same error when using fileinstall 3.2.6 on Equinox during startup.

In main loop, we have serious trouble
java.lang.RuntimeException: java.lang.InterruptedException
	at org.apache.felix.fileinstall.internal.FileInstall.refresh(FileInstall.java:332)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.refresh(DirectoryWatcher.java:680)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:496)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:291)
Caused by: java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at org.apache.felix.fileinstall.internal.FileInstall.refresh(FileInstall.java:330)
	... 3 more","24/Sep/13 19:50;tjwatson;This issue happens when file install decides to: 

1) refresh itself or 
2) refreshes a bundle which file install is wired to

When this happens file install will be stopped while one of its directory watcher threads is waiting for a refresh package operation to complete.  Stopping file install will cause it to attempt to interrupt the directory watcher threads.  This causes the runtime exception to be thrown from FileInstall#refreshPackages like the reporter of this issue indicates.

In my environment this ultimately makes the current operation to fail, it will not proceed to start the bundles that just got installed.  When file install is restarted it does not appear to reprocess the bundles from the directory, I assume because it persisted some timestamp information on the first attempt (which failed with a runtime exception) so the bundles are not started on file install restart.  So something is off with the file install restarting logic when a stop was done while waiting for a refresh operation to complete.

This overall issue is happening if gogo command bundle is installed with file install because gogo command exports the log service package and file install optionally imports the log service package.  File install determines that a new provider of some optional import of the package is now available and decides it should refresh the file install bundle to allow it to get wired to the newly installed log service packages.

This logic seems flawed.  In my case file install was already optionally wired to another provider of the log service package but file install detected that it was an optional import and a new provider just got installed so it must need refreshed.  I don't think it is a good idea to refresh a bundle just because another provider showed up for some optional requirement that is already wired to a perfectly good provider.","06/Dec/13 09:46;gnt;I've made sure the InterruptedException is caught correctly.

Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/FileInstall.java
Committed r1548470

The logic can be changed to avoid refreshing bundles that are already wired, but this would require FELIX-3543, so I'll defer it until we do a minor/major release.","06/Dec/13 09:52;gnt;Raised FELIX-4346 for improving the logic, though I'm not even convinced yet it's a good idea.","12/Jun/15 19:29;rotty3000;FYI, this issue can be avoided in Equinox by setting the felix property:

{{felix.fileinstall.optionalImportRefreshScope=managed}}

where ""fileinstall"" is not itself being managed (i.e. is not within one of the fileinstall scanned directories). Basically this tells fileinstall to ignore all bundles that are not under it's management.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] don't try to activate for a service event for an optional reference,FELIX-3710,12611613,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,12/Oct/12 18:46,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:25,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Since an optional service cannot cause a component to become satisfied, there is no need to try to activate an unsatisfied component when a service event for an optional reference arrives.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:16.693,,,no_permission,,,,,,,,,,,,248096,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i09lf3:,53903,,,,,,,,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] use java 5,FELIX-3708,12611472,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,12/Oct/12 00:36,04/Sep/14 08:04,14/Mar/19 02:48,29/Nov/12 23:57,scr-1.8.0,,,,,,scr-1.8.0,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,Switching to java 5 to make refactoring more plausible.  If there are objections we can switch back later.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-12 13:57:46.892,,,no_permission,,,,,,,,,,,,247839,,,Thu Nov 29 23:57:44 UTC 2012,,,,,,0|i08q87:,48848,,,,,,,,"12/Oct/12 13:57;fmeschbe;I am ok with moving to Java 5

But: can we cut a release before we start tearing things apart ?","20/Oct/12 19:23;djencks;I've been wondering if DS 1.2 from cmpn 4.3 actually works on earlier java vms.  Using javap it looks like at least the DS classes are compiled for java 1.4.  Is this useful for anyone on a restricted platform?

At this point I've coded a little bit of locking code in java 5 but haven't modified old code to java 5.  I can still backport the new code to 1.4 syntax if it would do anyone any good.","22/Oct/12 06:24;fmeschbe;IIRC the 4.3 compendium jars have been compiled with the jsr14 source flag. This creates Java 1.4 class files in a manner to run on Java 1.4 through 6 but creating massive problems with Java 7.

If we do release Java 5 builds, we might want to consider extracting the source from the compendium jars and have them built during the scr build to ensure they use the same source flag (Java 5 or jsr14) as the rest of the scr code.",29/Nov/12 23:57;djencks;r1415461 does pretty much what I want at the moment.  Hope I didn't go overboard with generics.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Uses constraints not properly checked with require bundle,FELIX-3707,12611441,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,11/Oct/12 21:57,17/Oct/12 19:56,14/Mar/19 02:48,17/Oct/12 16:40,,,,,,,,,,,,,,Resolver,,,,,,0,patch,,,,,"The following set of manifests should result in require.b1 being unresolvable due to an inconsistent class space for package p1:

Bundle-ManifestVersion: 2
Bundle-SymbolicName: require.b1
Bundle-Version: 1.0.0
Require-Bundle: require.b2, require.b3

Bundle-ManifestVersion: 2
Bundle-SymbolicName: require.b2
Bundle-Version: 1.0.0
Export-Package: p1

Bundle-ManifestVersion: 2
Bundle-SymbolicName: require.b3
Bundle-Version: 1.0.0
Export-Package: p2; uses:=""p1""
Require-Bundle: require.b4

Bundle-ManifestVersion: 2
Bundle-SymbolicName: require.b4
Bundle-Version: 1.0.0
Export-Package: p1

I will attach a possible fix and testcase",All,7200,7200,,0%,7200,7200,,,,,,,,,,,,,15/Oct/12 20:15;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12549196/org.apache.felix.resolver.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-17 16:40:17.712,,,no_permission,,,,,,,,,,,,247807,,,Wed Oct 17 19:56:01 UTC 2012,,,,,,0|i08q0v:,48815,,,,,,,,11/Oct/12 21:59;tjwatson;Possible fix and the scenario,"12/Oct/12 15:00;tjwatson;The previous patch fixes part of the problem, but it only checks the current level for consistency of bundle capabilities.  This patch modifies the loop that checks for consistency on the next level down against every resource which the current resource depends on.

I did this by simply iterating over all the requirements instead of using any of the package blame maps.  This was necessary to ensure that we check every required capability resource even if that capability does not pull in packages to the class space of the current resource (i.e. generic capabilities or the rare bundle capability that does not export any packages).

As a result of this change I noticed a performance issue when attempting to resolve a large number of root resources.  The resultCache was getting discarded each time we checked package space consistency.  I changed that to only discard the resultCache when a ResolutionException occurs while checking consistency at the top level consistency check loop.","15/Oct/12 20:15;tjwatson;There was a bug in my 'performance' fix from the last patch.  The resultCache must not be cleared out each time a ResolutionException is thrown.  Instead a new HashMap resultCache should only get created each time a new permutation is attempted.

This updated patch simply removes line of code that clears the resultCache map.  The patch already creates a new resultCache map each time a new permutation is checked.",17/Oct/12 16:40;rickhall;I've applied the patch. Please close this issue if you are satisfied. Thanks!,17/Oct/12 19:56;tjwatson;Satisfied.  Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ds shutdown should wait for ComponentActorThread task queue to complete before finishing,FELIX-3704,12611056,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,09/Oct/12 20:19,20/Nov/12 10:58,14/Mar/19 02:48,25/Oct/12 23:57,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Right now Activator.stop doesn't deal with the situation of the ComponentActorThread task queue having undone actions on it.  In particular it adds the terminator task and immediately turns off logging which may have the effect of the ""component actor thread terminating"" message going to System.out.

Should we check the queue is empty before disposing the components?
How about before removing logging?",,,,,,,,,,,,FELIX-3727,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-11 08:13:20.908,,,no_permission,,,,,,,,,,,,246490,,,Tue Nov 20 10:58:14 UTC 2012,,,,,,0|i07px3:,42965,,,,,,,,"11/Oct/12 08:13;fmeschbe;Yes, we might want to make sure the queue is empty before terminating it (until recently there wasn't going on much in the queue anyway because most of the asynchronous tasks for which the queue has been built have been converted to synchronous tasks)

We should not wait (too long) for the queue to go empty before terminating it because the stop method is called synchronously and this might lead to deadlocks.

",25/Oct/12 23:56;djencks;Fixed under this duplicate issue.,25/Oct/12 23:57;djencks;resolved under felix-3727,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
can not compile scr trunk,FELIX-3702,12610634,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,andrei.pozolotin,andrei.pozolotin,05/Oct/12 21:01,07/Oct/12 20:45,14/Mar/19 02:48,07/Oct/12 20:45,,,,,,,,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"reproduce:
{code}
cd /tmp
mkdir apache
cd apache
git clone git://github.com/apache/felix.git
cd felix
cd scr
mvn clean install --define skipTests
{code}

result:
{code}
[ERROR] Failed to execute goal org.apache.rat:apache-rat-plugin:0.7:check (default) on project org.apache.felix.scr: Too many unapproved licenses: 1 -> [Help 1]
{code}
","user1@wks002:/tmp/apache/felix/scr$ java -version
java version ""1.7.0_07""
Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
Java HotSpot(TM) Server VM (build 23.3-b01, mixed mode)

user1@wks002:/tmp/apache/felix/scr$ mvn -version
Apache Maven 3.0.4 (r1232337; 2012-01-17 02:44:56-0600)
Maven home: /opt/apache/apache-maven-3.0.4
Java version: 1.7.0_07, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.2.0-30-generic-pae"", arch: ""i386"", family: ""unix""

user1@wks002:/tmp/apache/felix/scr$ uname -a
Linux wks002 3.2.0-30-generic-pae #48-Ubuntu SMP Fri Aug 24 17:14:09 UTC 2012 i686 i686 i386 GNU/Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-05 21:21:29.534,,,no_permission,,,,,,,,,,,,244076,,,Sun Oct 07 20:45:30 UTC 2012,,,,,,0|i05gtj:,29822,,,,,,,,"05/Oct/12 21:21;pderop;I confirm, and have the same problem.
However, it works with 

   mvn -Dmaven.test.skip=true clean package","05/Oct/12 21:35;andrei.pozolotin;in my case:

works:
   mvn -Dmaven.test.skip=true clean package

does not work:
   mvn -Dmaven.test.skip=true clean install
","07/Oct/12 20:45;pderop;I actually forgot to add a license header in src/test/java/org/apache/felix/scr/integration/components/felix3680/G.java

But Göktürk fixed this problem and committed the file with a valid header.

I think it works now. (I'm closing this issue. Feel free to reopen it if the problem remains).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent CNFE with embedded jars in Fragment Bundles,FELIX-3701,12610464,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,chetanm,chetanm,05/Oct/12 08:06,30/Jul/14 07:16,14/Mar/19 02:48,26/Mar/14 14:28,framework-4.0.2,,,,,,framework-4.4.1,,,,,,,Framework,,,,,,5,,,,,,"In our Sling based OSGi application we are observing intermittent ClassNotFoundException for classes which are present in a jar embedded in Fragment bundle. Below are the details about the scenario

1. Host bundle BundleA com.day.crx.sling.server [52]

2. It has two fragment bundles attached. 
- FragBundle1 - com.day.crx.crx-auth-ldap
- FragBundle2 - org.jcrutil.aws

3. FragBundle2 - Has some embedded jars referred in the classpath
- FragJar2-1 - aws-java-sdk-1.3.11.jar
- FragJar2-2 - httpclient-4.2-beta1.jar

4. There is a DS Component in BundleA which on activate tries to create an instance of class which is present in FragJar2-1

Now the issue is at times on clean start we get a CNFE at #4. On getting the Felix debug logs following things were observed

1. The logs report that INFO: Bundle BundleA [52] Class path entry not found: FragJar2-1.jar
2. The above entries are not observed if CNFE is not thrown
3. If I try to debug the code the issue goes away which indicates that its possible a race condition issue
4. In case the issue is seen and I see the fragment bundle dir in the felix folder the fragment jar is NOT exploded i.e. no bundle.jar-embedded directory
5. Once the issue is seen it does not go away in restart
6. The issue was not seen in 3.0.x releases
7. If I flatten the jars present in fragment bundles the issue is not seen
8. Exception seen is [1]

[1]
05.10.2012 12:03:19.362 *ERROR* [FelixStartLevel] com.day.crx.sling.server [com.day.crx.sling.server.impl.jmx.ManagedRepository] The activate method has thrown an exception (java.lang.NoClassDefFoundError: com/amazonaws/services/s3/model/S3ObjectSummary) java.lang.NoClassDefFoundError: com/amazonaws/services/s3/model/S3ObjectSummary
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.jackrabbit.core.config.SimpleBeanFactory.newInstance(SimpleBeanFactory.java:30)
	at org.apache.jackrabbit.core.config.BeanConfig.newInstance(BeanConfig.java:191)
	at org.apache.jackrabbit.core.config.RepositoryConfigurationParser$4.getDataStore(RepositoryConfigurationParser.java:997)
	at org.apache.jackrabbit.core.config.RepositoryConfig.getDataStore(RepositoryConfig.java:1072)
	at org.apache.jackrabbit.core.RepositoryImpl.<init>(RepositoryImpl.java:279)
	at com.day.crx.core.CRXRepositoryImpl.<init>(CRXRepositoryImpl.java:307)
	at com.day.crx.core.CRXRepositoryImpl.create(CRXRepositoryImpl.java:262)
	at com.day.crx.core.CRXRepositoryImpl.create(CRXRepositoryImpl.java:245)
	at com.day.crx.sling.server.impl.jmx.ManagedRepository.activate(ManagedRepository.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:227)
	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:38)
	at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:591)
	at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:472)
	at org.apache.felix.scr.impl.helper.ActivateMethod.invoke(ActivateMethod.java:146)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:226)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:118)
	at org.apache.felix.scr.impl.manager.DelayedComponentManager.createRealComponent(DelayedComponentManager.java:95)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Registered.getService(AbstractComponentManager.java:1296)
	at org.apache.felix.scr.impl.manager.DelayedComponentManager.getService(DelayedComponentManager.java:88)
	at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:308)
	at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
	at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:310)
	at org.apache.felix.framework.Felix.getService(Felix.java:3420)
	at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
	at org.osgi.util.tracker.ServiceTracker.addingService(ServiceTracker.java:450)
	at org.apache.aries.jmx.whiteboard.Activator$MBeanTracker.addingService(Activator.java:101)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:980)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:906)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:262)
	at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:234)
	at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:941)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:456)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:508)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1157)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:334)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:158)
	at org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:313)
	at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:241)
	at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)
	at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)
	at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:274)
	at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:192)
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1923)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.ClassNotFoundException: *** Class 'com.amazonaws.services.s3.model.S3ObjectSummary' was not found. Bundle com.day.crx.sling.server [52] does not import package 'com.amazonaws.services.s3.model', nor is the package exported by any other bundle or available from the system class loader. ***
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1857)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 62 more
Caused by: java.lang.ClassNotFoundException: com.amazonaws.services.s3.model.S3ObjectSummary not found by com.day.crx.sling.server [52]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1460)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:72)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1843)
	... 63 more",,,,,,,,,,,,,,,,,,,,26/Mar/14 12:57;jtpe@stibosystems.com;debug info.jpg;https://issues.apache.org/jira/secure/attachment/12636915/debug+info.jpg,05/Oct/12 08:12;chetanm;fragment-bug.zip;https://issues.apache.org/jira/secure/attachment/12547885/fragment-bug.zip,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-10-10 16:50:14.387,,,no_permission,,,,,,,,,,,,242652,,,Thu Mar 27 10:31:44 UTC 2014,,,,,,0|i02yhz:,15190,,,,,,,,"05/Oct/12 08:12;chetanm;Logs attached. There are two folders
- no-issue - This the logs collected when no such issue is observed. Say by starting a debug session
- issue-dated - It contains the logs when issue is observed. 

Each folder contain two files
1. error-xxx.log - This is the Sling server logs which has the CNFE
2. felix-logs-xxx.log - This the Felix Framework log

I have modified the Felix Logger class to prefix date in the logs so that one can compare the logs in error and felix log files

In felix-logs-issue-dated.log you would see entries like below. The jars are however present the classpath of fragment bundles

...
DEBUG: FRAGMENT WIRE: [61.0] osgi.wiring.host; (&(osgi.wiring.host=com.day.crx.sling.server)(bundle-version>=0.0.0)) -> [52.0]
DEBUG: FRAGMENT WIRE: [54.0] osgi.wiring.host; (&(osgi.wiring.host=com.day.crx.sling.server)(bundle-version>=0.0.0)) -> [52.0]
...
INFO: Bundle com.day.crx.sling.server [52] Class path entry not found: httpclient-4.2-beta1.jar
INFO: Bundle com.day.crx.sling.server [52] Class path entry not found: httpcore-4.2-beta1.jar
INFO: Bundle com.day.crx.sling.server [52] Class path entry not found: aws-java-sdk-1.3.11.jar
INFO: Bundle com.day.crx.sling.server [52] Class path entry not found: tika-core-0.6.jar
INFO: Bundle com.day.crx.sling.server [52] Class path entry not found: guava-13.0.jar
INFO: Bundle com.day.crx.sling.server [52] Class path entry not found: day-commons-ldapclient-1.1.6.jar",05/Oct/12 08:14;chetanm;Would try to isolate the issue and see if a reproducible setup can be created. However wanted to check if given the background is there any race condition around the way Fragment bundles are exploded and bundle is activated?,"10/Oct/12 16:50;rickhall;I doesn't seem like there should be a race condition here. Are you sure that the fragments are being attached in the case where you see failures?

Certainly a reproducible setup would be good.","11/Oct/12 03:54;chetanm;>> Are you sure that the fragments are being attached in the case where you see failures?
Yup. I forgot to mention one aspect. The code in host bundle instantiates a class (C1) using reflection which is present inline in FragBundle2 (i.e. directly present). This class in turn depends on a class C2 which is present in FragJar2-1. And CNFE is shown for C2 which confirms that C1 is found and hence the fragment is resolved

Also as mentioned in logs above the FRAGMENT WIRE logs were present. Which indicate that fragment bundle did got resolved.

>>Certainly a reproducible setup would be good. 
Would try to create one
","26/Mar/14 12:54;jtpe@stibosystems.com;We see this exact issue in our application. It a major problem for us, as our customers have problems running the JMS endpoints we provide.

I have debugged the problem extensively, and I've found the exact spot where the problem arises:

From BundleRevisionImpl#initializeContentPath():
{code}
    fragments = Util.getFragments(m_wiring);
    fragmentContents = m_wiring.getFragmentContents();
{code}

Now, in our case, two bundles A and B has been fragment hosted to C. 
A and B embed som jms-driver classes each.

further on in the code we have: 

{code}
        if (fragments != null){
            for (int i = 0; i < fragments.size(); i++){            {
                calculateContentPath(
                    fragments.get(i), fragmentContents.get(i), contentList, false);
            }
        }
{code}

The problem is, that the order of fragments and fragmentContents are not always the same, and as you see above, the index is used when calculating the content path.
The effect is that bundle A's embedded jars are used when looking for classes in bundle B.

",26/Mar/14 12:57;jtpe@stibosystems.com;Screenshot showing how the contents of bundle B is used for calculating the content path of bundle A,"26/Mar/14 14:01;rickhall;Interesting. I can't say that I fully understand the situation and/or why it occurs, but if what you are saying is the case, then yes that would be problematic and needs to be fixed.","26/Mar/14 14:28;rickhall;Ok, I've applied a patch to trunk to try to address this issue. Essentially, when we moved to R4.3 we used public API to calculate the set of attached fragments instead of internal API. However, the public API approach didn't necessarily return the fragments in the desired order. I added back an internal method to BundleWiringImpl to get the fragments, so now getFragments and getFragmentContents() should be parallel again. Please test and let me know if this resolves your issue. If so, close this bug. If not, reopen it. Thanks.","27/Mar/14 10:31;jtpe@stibosystems.com;Your fix seems to work, thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] code simplification for BundleComponentActivator.getSelectedComponents,FELIX-3698,12610005,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,02/Oct/12 23:09,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:34,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"the ComponentHolder can be obtained directly from the ComponentRegistry, we don't need to re-find it after getting it.  (this is finishing some refactoring from c. 2006).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.244,,,no_permission,,,,,,,,,,,,249487,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0aet3:,58672,,,,,,,,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] create all the components in a bundle before enabling them,FELIX-3697,12610003,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,02/Oct/12 23:06,20/Nov/12 10:58,14/Mar/19 02:48,05/Oct/12 18:44,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Since a component is supposed to be able to enable other components, we better be sure that all the components are available to be enabled before we start on one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.393,,,no_permission,,,,,,,,,,,,244046,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i05fin:,29611,,,,,,,,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When bundle filter doesn't match, the tool bars are duplicated",FELIX-3695,12609875,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,evgeni,evgeni,02/Oct/12 06:58,16/Mar/15 08:19,14/Mar/19 02:48,10/Mar/15 08:36,webconsole-4.0.0,,,,,,webconsole-4.2.8,,,,,,,Web Console,,,,,,0,,,,,,"The issue can be reproduced with the help of:
 - open Bundles tab
 - go to the filter field
 - type a filter, which doesn't match - for example ""aaaaaa""
As a result, no bundles are visualized and the tool bars are duplicated.",,,,,,,,,,,,,,,,,,,,02/Oct/12 07:01;evgeni;duplicated_toolbars.jpg;https://issues.apache.org/jira/secure/attachment/12547353/duplicated_toolbars.jpg,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-09 09:14:52.734,,,no_permission,,,,,,,,,,,,245950,,,Tue Mar 10 08:36:08 UTC 2015,,,,,,0|i07efb:,41103,,,,,,,,02/Oct/12 07:01;evgeni;Screenshot with the available issue.,"09/Oct/12 09:14;fmeschbe;I think this is not nice, but not really a bug: Said toolbar always exists twice, before and after the bundle list. Since the bundle list is empty in this case, the erroneous impression rises that the toolbar is in fact duplicate.

I think we should improve the display to indicate that no bundles match the filter (instead of having a non-existing list).","09/Oct/12 14:58;evgeni;It makes sense, if it's a general design decision.","10/Mar/15 08:36;v_valchev;Fixed as suggested by Felix in rev. 1665413
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
In some cases web console cannot edit configs without metatype,FELIX-3694,12609682,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,30/Sep/12 11:34,06/Jun/13 15:34,14/Mar/19 02:48,30/Sep/12 11:37,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"In some cases there are still exceptions like the one below, that prevents the CM plugin from editing the configurations:
[code]
java.lang.IllegalArgumentException: [MetatypeProviderImpl] Invalid OCD pid: xyz.tr069.device.DeviceModel
        at com.prosyst.mbs.impl.services.metatype.MetaTypeInformationImpl.getObjectClassDefinition(MetaTypeInformationImpl.java:65)
        at org.apache.felix.webconsole.internal.compendium.ConfigManagerBase.getObjectClassDefinition(ConfigManagerBase.java:175)
        at org.apache.felix.webconsole.internal.compendium.ConfigManagerBase.getAttributeDefinitionMap(ConfigManagerBase.java:248)
        at org.apache.felix.webconsole.internal.compendium.ConfigManager.applyConfiguration(ConfigManager.java:857)
        at org.apache.felix.webconsole.internal.compendium.ConfigManager.doPost(ConfigManager.java:167)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:815)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:493)
        at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:418)
        at com.prosyst.mbs.impl.services.http.ServletProperties.service(ServletProperties.java:109)
        at com.prosyst.mbs.impl.services.http.Response.defaultResponse(Response.java:371)
[code]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-06 15:34:59.232,,,no_permission,,,,,,,,,,,,294015,,,Thu Jun 06 15:34:59 UTC 2013,,,,,,0|i0vv07:,183996,,,,,,,,30/Sep/12 11:37;v_valchev;Fixed in rev.1392001,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Event admin requires org.osgi.util.tracker in version 1.5,FELIX-3689,12609503,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,28/Sep/12 07:40,04/Oct/12 08:53,14/Mar/19 02:48,28/Sep/12 07:57,eventadmin-1.3.0,,,,,,eventadmin-1.3.2,,,,,,,Event Admin,,,,,,0,,,,,,"The new event admin uses a service tracker, as the maven dependency references 4.3 compendium/framework, the import for the tracker requires version 1.5 or above.
Therefore this version does not work in a 4.2 framework anymore.
We should rather embed the tracker",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,240247,,,Fri Sep 28 07:57:10 UTC 2012,,,,,,0|i00yqf:,3560,,,,,,,,28/Sep/12 07:57;cziegeler;Fixed by embedding,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInstall bundle contains ConfigurationHandler.java source file,FELIX-3686,12609399,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,27/Sep/12 14:29,17/Mar/15 06:58,14/Mar/19 02:48,05/Dec/13 23:01,,,,,,,fileinstall-3.2.8,,,,,,,File Install,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,307342,,,Thu Dec 05 23:01:51 UTC 2013,,,,,,0|i1avon:,271599,,,,,,,,"05/Dec/13 23:01;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/pom.xml
Committed r1548323
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependency Manager Annotation-3.0.0 module doesn't expose OSGI meta information in MANIFEST.MF,FELIX-3682,12609224,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,,nicolae.nicora,nicolae.nicora,26/Sep/12 11:57,26/Sep/12 13:22,14/Mar/19 02:48,26/Sep/12 13:22,dependencymanager-3.0.0,,,,,,,,,,,,,Dependency Manager,,,,,,0,,,,,,"MANIFEST.MF of jar ""org.apache.felix.dependencymanager.annotation-3.0.0.jar"" contains incorrect meta information, so no exported API :

Manifest-Version: 1.0
Archiver-Version: Plexus Archiver
Created-By: Apache Maven
Built-By: marcel
Build-Jdk: 1.6.0_24",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-26 12:54:52.445,,,no_permission,,,,,,,,,,,,294037,,,Wed Sep 26 13:22:09 UTC 2012,,,,,,0|i0vwen:,184223,,,,,,,,"26/Sep/12 12:54;marrs;May I ask what you're trying to do?

This artifact really is just a compile time dependency that contains the annotations you need to write your code plus the plugins to integrate with bnd and maven. At runtime, these annotations have been parsed and ""replaced"" by a json file that is embedded in the bundle. This file contains the dependencies as described by the annotations. The ""runtime"" bundle reads those and creates the appropriate dependencies. See [1] for an example and [2] for more documentation on annotations for DM in general.

[1] http://felix.apache.org/site/apache-felix-dependency-manager-using-annotations-quick-tour.html
[2] http://felix.apache.org/site/apache-felix-dependency-manager-using-annotations.html","26/Sep/12 13:22;nicolae.nicora;I've integrated it with Karaf server, finally has worked. 
Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Dependencies are not dropped when implemention object is discarded,FELIX-3681,12609141,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,25/Sep/12 22:31,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:54,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"When a service factory or delayed component is discarded, we need to also discard the dependency map.  We just ungot the services, unless they are immediate we would be keeping references to discarded implementation objections.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:16.133,,,no_permission,,,,,,,,,,,,249492,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i0aeyf:,58696,,,,,,,,26/Sep/12 16:32;djencks;should be fixed in rev 1390591,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions in SCR using concurrent service activation/deactivation,FELIX-3680,12608845,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,pderop,pderop,24/Sep/12 09:34,31/Mar/13 06:23,14/Mar/19 02:48,31/Mar/13 06:23,,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"This issue contains a sample code which reproduces many various exceptions, using a concurrent
scenario, where some services are enabled/disabled concurrently.

I did not have time to commit an integration test about these exceptions but I will try to do.
In the meantime, I join to this issue my scenario ... 
Before trying to make an integration test, could you please run the scenario, in order to confirm the problems, and that the scenario is valid ?

To execute the scenario

1) first, since the framework is not currently using any available log service, you have to make a modification in the framework, in order to force the framework to use a log service, when displaying caught exceptions. If you don't do this, then you will get many exceptions thrown by many threads and displayed in the console; and this is then not easy to diagnose problems.

So, in the framework, in the file src/main/java/org/apache/felix/framework/Logger.java, in method setBundleContext, just uncomment the following code, which activate the fwk log service listener:

    protected void setSystemBundleContext(BundleContext context)
    {
        // TODO: Find a way to log to a log service inside the framework.
        // The issue is that we log messages while holding framework
        // internal locks -- hence, when a log service calls back into 
        // the framework (e.g., by loading a class) we might deadlock. 
        // One instance of this problem is tracked in FELIX-536.
        // For now we just disable logging to log services inside the
        // framework. 

        m_context = context;
        startListeningForLogService();
    }

-> this will make sure all logs caught by the framework are redirected to the log service, and I did not find any deadlock issue, as described in the comments.
Notice that even if you don't activate the log service listener, then the Exceptions are also taking place ...

2) next, compile the attached concurrent scenario (it's a simple maven project).

3) run the framework with the following bundles:

org.apache.felix.scr from trunk
org.apache.felix.configadmin-1.4.0.jar

4) wait for about 20 seconds, then suspend the framework, and kill it (using kill -9)
Don't do ""Ctrl-C"", because this might interrupt some locked threads and some exceptions might be generated because of the Ctlr-C ... So doing a ""Kill -9"" is better.

5) Then take a look at the produced ""./logs.txt"" file.


scenario description:
===============

here is a description of the Components used in the scenario:

A: delayed component, enabled, depending on B,C,D,E,F
B,C,D,E: delayed components, disabled, without any dependencies
F: delayed component, disabled, depending on G
G: delayed component, disabled, depending on H
I: delayed component, disabled, depending on J
J: delayed component, disabled, depending on K
Main: depends on A. 

""Main"" is the main scenario component: it uses a thread pool in order to enable B,C,D,E,F,G,H,I,J,K in parallel, randomly. 

""Main"" depends on A.

When B,C,D,E,F,G,H,I,J,K are enabled, then A becomes satisfied, provided and injected in the ""Main"" component.

Once ""A"" is bound to ""Main"", then B,C,D,E,F,G,H,I,J,K are then disabled in parallel, randomly. ""Main"" also checks that ""A"" is properly unbound.

LogService logs are written to ""./logs.txt"".

So, running the test using scr 1.6.0 runs seamlessly. But with trunk we have many various exceptions.
For example, I have noticed the three following exceptions:

1) we have some IllegalMontorStateException:
=================================

log level: 1 D=Mon Sep 24 11:07:45 CEST 2012, T=Thread-1: [F] Locking activity before IllegalMonitorStateException: 
  obtainWriteLock failure from: ImmediateComponentManager.ungetService.1 readLocks: 0 writeLocks: 0 thread: Thread[SCR Component Actor,5,main] time: 1348477665425 Could not obtain write lock.

log level: 1 D=Mon Sep 24 11:07:45 CEST 2012, T=Thread-1: [F] Thread dump


ThreadId: 59 : name: pool-1-thread-30 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 58 : name: pool-1-thread-29 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 57 : name: pool-1-thread-28 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 56 : name: pool-1-thread-27 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 55 : name: pool-1-thread-26 State: BLOCKED
  LockInfo: org.apache.felix.framework.ServiceRegistry@ae533a LockOwnerId: 15 LockOwnerName: SCR Component Actor
  org.apache.felix.framework.ServiceRegistry.getServiceReferences(ServiceRegistry.java:204)
  org.apache.felix.framework.Felix.getServiceReferences(Felix.java:3372)
  org.apache.felix.framework.Felix.getAllowedServiceReferences(Felix.java:3445)
  org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:432)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:658)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:634)
  org.apache.felix.scr.impl.manager.DependencyManager.enable(DependencyManager.java:551)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableDependencyManagers(AbstractComponentManager.java:1056)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.access$700(AbstractComponentManager.java:63)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.enable(AbstractComponentManager.java:1440)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:625)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:358)
  org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:384)
  org.apache.felix.scr.impl.BundleComponentActivator.enableComponent(BundleComponentActivator.java:395)
  org.apache.felix.scr.impl.manager.ComponentContextImpl.enableComponent(ComponentContextImpl.java:101)
  test.scr.Main$EnableManager$1.run(Main.java:66)
  java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 54 : name: pool-1-thread-25 State: BLOCKED
  LockInfo: org.apache.felix.framework.ServiceRegistry@ae533a LockOwnerId: 15 LockOwnerName: SCR Component Actor
  org.apache.felix.framework.ServiceRegistry.getServiceReferences(ServiceRegistry.java:204)
  org.apache.felix.framework.Felix.getServiceReferences(Felix.java:3372)
  org.apache.felix.framework.Felix.getAllowedServiceReferences(Felix.java:3445)
  org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:432)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:658)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:634)
  org.apache.felix.scr.impl.manager.DependencyManager.enable(DependencyManager.java:551)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableDependencyManagers(AbstractComponentManager.java:1056)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.access$700(AbstractComponentManager.java:63)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.enable(AbstractComponentManager.java:1440)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:625)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:358)
  org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:384)
  org.apache.felix.scr.impl.BundleComponentActivator.enableComponent(BundleComponentActivator.java:395)
  org.apache.felix.scr.impl.manager.ComponentContextImpl.enableComponent(ComponentContextImpl.java:101)
  test.scr.Main$EnableManager$1.run(Main.java:66)
  java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 53 : name: pool-1-thread-24 State: BLOCKED
  LockInfo: org.apache.felix.framework.ServiceRegistry@ae533a LockOwnerId: 15 LockOwnerName: SCR Component Actor
  org.apache.felix.framework.ServiceRegistry.getServiceReferences(ServiceRegistry.java:204)
  org.apache.felix.framework.Felix.getServiceReferences(Felix.java:3372)
  org.apache.felix.framework.Felix.getAllowedServiceReferences(Felix.java:3445)
  org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:432)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:658)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:634)
  org.apache.felix.scr.impl.manager.DependencyManager.enable(DependencyManager.java:551)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableDependencyManagers(AbstractComponentManager.java:1056)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.access$700(AbstractComponentManager.java:63)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.enable(AbstractComponentManager.java:1440)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:625)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:358)
  org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:384)
  org.apache.felix.scr.impl.BundleComponentActivator.enableComponent(BundleComponentActivator.java:395)
  org.apache.felix.scr.impl.manager.ComponentContextImpl.enableComponent(ComponentContextImpl.java:101)
  test.scr.Main$EnableManager$1.run(Main.java:66)
  java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 52 : name: pool-1-thread-23 State: BLOCKED
  LockInfo: org.apache.felix.framework.ServiceRegistry@ae533a LockOwnerId: 15 LockOwnerName: SCR Component Actor
  org.apache.felix.framework.ServiceRegistry.getServiceReferences(ServiceRegistry.java:204)
  org.apache.felix.framework.Felix.getServiceReferences(Felix.java:3372)
  org.apache.felix.framework.Felix.getAllowedServiceReferences(Felix.java:3445)
  org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:432)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:658)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:634)
  org.apache.felix.scr.impl.manager.DependencyManager.enable(DependencyManager.java:551)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableDependencyManagers(AbstractComponentManager.java:1056)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.access$700(AbstractComponentManager.java:63)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.enable(AbstractComponentManager.java:1440)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:625)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:358)
  org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:384)
  org.apache.felix.scr.impl.BundleComponentActivator.enableComponent(BundleComponentActivator.java:395)
  org.apache.felix.scr.impl.manager.ComponentContextImpl.enableComponent(ComponentContextImpl.java:101)
  test.scr.Main$EnableManager$1.run(Main.java:66)
  java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 51 : name: pool-1-thread-22 State: BLOCKED
  LockInfo: org.apache.felix.framework.ServiceRegistry@ae533a LockOwnerId: 15 LockOwnerName: SCR Component Actor
  org.apache.felix.framework.ServiceRegistry.getServiceReferences(ServiceRegistry.java:204)
  org.apache.felix.framework.Felix.getServiceReferences(Felix.java:3372)
  org.apache.felix.framework.Felix.getAllowedServiceReferences(Felix.java:3445)
  org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:432)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:658)
  org.apache.felix.scr.impl.manager.DependencyManager.getFrameworkServiceReferences(DependencyManager.java:634)
  org.apache.felix.scr.impl.manager.DependencyManager.enable(DependencyManager.java:551)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableDependencyManagers(AbstractComponentManager.java:1056)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.access$700(AbstractComponentManager.java:63)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.enable(AbstractComponentManager.java:1440)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:625)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:358)
  org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:384)
  org.apache.felix.scr.impl.BundleComponentActivator.enableComponent(BundleComponentActivator.java:395)
  org.apache.felix.scr.impl.manager.ComponentContextImpl.enableComponent(ComponentContextImpl.java:101)
  test.scr.Main$EnableManager$1.run(Main.java:66)
  java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 50 : name: pool-1-thread-21 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 49 : name: pool-1-thread-20 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 48 : name: pool-1-thread-19 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 47 : name: pool-1-thread-18 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 46 : name: pool-1-thread-17 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 45 : name: pool-1-thread-16 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 44 : name: pool-1-thread-15 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 43 : name: pool-1-thread-14 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 42 : name: pool-1-thread-13 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 41 : name: pool-1-thread-12 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 40 : name: pool-1-thread-11 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 28 : name: pool-1-thread-10 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 27 : name: pool-1-thread-9 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 26 : name: pool-1-thread-8 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 25 : name: pool-1-thread-7 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 24 : name: pool-1-thread-6 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 23 : name: pool-1-thread-5 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 22 : name: pool-1-thread-4 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 21 : name: pool-1-thread-3 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 20 : name: pool-1-thread-2 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 19 : name: pool-1-thread-1 State: WAITING
  LockInfo: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@15d17d7 LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
  java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
  java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 17 : name: Thread-2 State: TIMED_WAITING
  LockInfo: java.util.concurrent.CountDownLatch$Sync@ba5bdb LockOwnerId: -1 LockOwnerName: null
  sun.misc.Unsafe.park(Native Method)
  java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)
  java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1011)
  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1303)
  java.util.concurrent.CountDownLatch.await(CountDownLatch.java:253)
  test.scr.Main.run(Main.java:157)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 16 : name: Thread-1 State: WAITING
  LockInfo: java.util.ArrayList@e49dcd LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.Object.wait(Object.java:485)
  org.apache.felix.log.LogListenerThread.run(LogListenerThread.java:139)

ThreadId: 15 : name: SCR Component Actor State: RUNNABLE
  LockInfo: null LockOwnerId: -1 LockOwnerName: null
  sun.management.ThreadImpl.dumpThreads0(Native Method)
  sun.management.ThreadImpl.dumpAllThreads(ThreadImpl.java:433)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.dumpThreads(AbstractComponentManager.java:294)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.logLockingInfo(AbstractComponentManager.java:240)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.releaseReadLock(AbstractComponentManager.java:222)
  org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:706)
  org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:349)
  org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:258)
  org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:389)
  org.apache.felix.framework.Felix.ungetService(Felix.java:3494)
  org.apache.felix.framework.BundleContextImpl.ungetService(BundleContextImpl.java:486)
  org.apache.felix.scr.impl.manager.DependencyManager.ungetService(DependencyManager.java:900)
  org.apache.felix.scr.impl.manager.DependencyManager.unbind(DependencyManager.java:1138)
  org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:970)
  org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:274)
  org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:147)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Active.ungetService(AbstractComponentManager.java:1697)
  org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:692)
  org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:349)
  org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:258)
  org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:389)
  org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:158)
  org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:779)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1382)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1644)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:635)
  org.apache.felix.scr.impl.manager.DependencyManager.serviceRemoved(DependencyManager.java:375)
  org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:217)
  org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
  org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
  org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
  org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4327)
  org.apache.felix.framework.Felix.access$000(Felix.java:74)
  org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
  org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148)
  org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:779)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1382)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.deactivate(AbstractComponentManager.java:1456)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:635)
  org.apache.felix.scr.impl.manager.AbstractComponentManager$2.run(AbstractComponentManager.java:435)
  org.apache.felix.scr.impl.ComponentActorThread.run(ComponentActorThread.java:98)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 14 : name: Gogo shell State: RUNNABLE
  LockInfo: null LockOwnerId: -1 LockOwnerName: null
  java.io.FileInputStream.readBytes(Native Method)
  java.io.FileInputStream.read(FileInputStream.java:220)
  java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
  java.io.BufferedInputStream.read(BufferedInputStream.java:237)
  org.apache.felix.gogo.runtime.threadio.ThreadInputStream.read(ThreadInputStream.java:77)
  org.apache.felix.gogo.shell.Console.getLine(Console.java:117)
  org.apache.felix.gogo.shell.Console.run(Console.java:53)
  org.apache.felix.gogo.shell.Shell.console(Shell.java:203)
  org.apache.felix.gogo.shell.Shell.gosh(Shell.java:128)
  sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
  sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
  java.lang.reflect.Method.invoke(Method.java:597)
  org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
  org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
  org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
  org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
  org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
  org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
  org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
  org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
  org.apache.felix.gogo.shell.Activator.run(Activator.java:75)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 13 : name: CM Event Dispatcher State: WAITING
  LockInfo: java.util.LinkedList@13c0b53 LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.Object.wait(Object.java:485)
  org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:77)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 12 : name: CM Configuration Updater State: WAITING
  LockInfo: java.util.LinkedList@10b9279 LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.Object.wait(Object.java:485)
  org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:77)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 11 : name: FelixStartLevel State: WAITING
  LockInfo: java.util.ArrayList@bd6a5f LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.Object.wait(Object.java:485)
  org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:273)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 10 : name: FelixDispatchQueue State: WAITING
  LockInfo: java.util.ArrayList@192a848 LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.Object.wait(Object.java:485)
  org.apache.felix.framework.util.EventDispatcher.run(EventDispatcher.java:1063)
  org.apache.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:54)
  org.apache.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:101)
  java.lang.Thread.run(Thread.java:662)

ThreadId: 4 : name: Signal Dispatcher State: RUNNABLE
  LockInfo: null LockOwnerId: -1 LockOwnerName: null

ThreadId: 3 : name: Finalizer State: WAITING
  LockInfo: java.lang.ref.ReferenceQueue$Lock@16614e7 LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)
  java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)
  java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)

ThreadId: 2 : name: Reference Handler State: WAITING
  LockInfo: java.lang.ref.Reference$Lock@e66f56 LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  java.lang.Object.wait(Object.java:485)
  java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)

ThreadId: 1 : name: main State: WAITING
  LockInfo: org.apache.felix.framework.util.ThreadGate@979e8b LockOwnerId: -1 LockOwnerName: null
  java.lang.Object.wait(Native Method)
  org.apache.felix.framework.util.ThreadGate.await(ThreadGate.java:79)
  org.apache.felix.framework.Felix.waitForStop(Felix.java:983)
  org.apache.felix.main.Main.main(Main.java:299)
log level: 1 D=Mon Sep 24 11:07:45 CEST 2012, T=Thread-1: ServiceRegistrationImpl: Error ungetting service.
java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryReleaseShared(ReentrantReadWriteLock.java:363)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(AbstractQueuedSynchronizer.java:1317)
	at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.unlock(ReentrantReadWriteLock.java:745)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$JLock.unlockReadLock(AbstractComponentManager.java:1895)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.releaseReadLock(AbstractComponentManager.java:218)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:706)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:349)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:258)
	at org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:389)
	at org.apache.felix.framework.Felix.ungetService(Felix.java:3494)
	at org.apache.felix.framework.BundleContextImpl.ungetService(BundleContextImpl.java:486)
	at org.apache.felix.scr.impl.manager.DependencyManager.ungetService(DependencyManager.java:900)
	at org.apache.felix.scr.impl.manager.DependencyManager.unbind(DependencyManager.java:1138)
	at org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:970)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:274)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:147)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Active.ungetService(AbstractComponentManager.java:1697)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:692)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:349)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:258)
	at org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:389)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:158)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:779)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1382)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1644)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:635)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceRemoved(DependencyManager.java:375)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:217)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4327)
	at org.apache.felix.framework.Felix.access$000(Felix.java:74)
	at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:779)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1382)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.deactivate(AbstractComponentManager.java:1456)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:635)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$2.run(AbstractComponentManager.java:435)
	at org.apache.felix.scr.impl.ComponentActorThread.run(ComponentActorThread.java:98)
	at java.lang.Thread.run(Thread.java:662)


2) we also have this IllegalStateException:
==============================

log level: 1 D=Mon Sep 24 11:07:45 CEST 2012, T=Thread-1: ServiceRegistrationImpl: Error ungetting service.
java.lang.IllegalStateException: ungetServiceUnsatisfied
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.ungetService(AbstractComponentManager.java:1336)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:692)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:349)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:258)
	at org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:389)
	at org.apache.felix.framework.Felix.ungetService(Felix.java:3494)
	at org.apache.felix.framework.BundleContextImpl.ungetService(BundleContextImpl.java:486)
	at org.apache.felix.scr.impl.manager.DependencyManager.ungetService(DependencyManager.java:900)
	at org.apache.felix.scr.impl.manager.DependencyManager.unbind(DependencyManager.java:1138)
	at org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:970)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:274)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:147)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Active.ungetService(AbstractComponentManager.java:1697)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:692)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:349)
	at org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:258)
	at org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:389)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:158)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:779)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1382)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1644)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:635)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceRemoved(DependencyManager.java:375)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:217)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4327)
	at org.apache.felix.framework.Felix.access$000(Felix.java:74)
	at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
	at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148)
	at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:779)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1382)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Disabled.deactivate(AbstractComponentManager.java:1456)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:635)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$2.run(AbstractComponentManager.java:435)
	at org.apache.felix.scr.impl.ComponentActorThread.run(ComponentActorThread.java:98)
	at java.lang.Thread.run(Thread.java:662)


3) An exception when getting a service from a Reference:
==============================================

log level: 2 D=Mon Sep 24 11:07:45 CEST 2012, T=Thread-1: [A] Could not get service from ref [test.scr.F]



Can you please confirm that you also see these exceptions ?
Thanks.



","linux fc16, jdk1.6.032",,,,,,,,,,,,,,,,,,,16/Oct/12 23:16;djencks;FELIX-3680-concurrent-activate.diff;https://issues.apache.org/jira/secure/attachment/12549408/FELIX-3680-concurrent-activate.diff,17/Oct/12 12:11;pderop;integration_test_FELIX_3880_2.tgz;https://issues.apache.org/jira/secure/attachment/12549492/integration_test_FELIX_3880_2.tgz,01/Oct/12 21:44;pderop;logs_with_could_not_get_service_from_ref.txt.gz;https://issues.apache.org/jira/secure/attachment/12547277/logs_with_could_not_get_service_from_ref.txt.gz,20/Oct/12 21:37;pderop;serial-executor.tgz;https://issues.apache.org/jira/secure/attachment/12550153/serial-executor.tgz,24/Sep/12 09:35;pderop;test.scr.tgz;https://issues.apache.org/jira/secure/attachment/12546274/test.scr.tgz,27/Sep/12 10:43;pderop;test_with_fwk.tgz;https://issues.apache.org/jira/secure/attachment/12546842/test_with_fwk.tgz,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-09-26 17:06:24.502,,,no_permission,,,,,,,,,,,,240035,,,Sun Mar 31 06:23:06 UTC 2013,,,,,,0|i00vlz:,3053,,,,,,,,24/Sep/12 09:35;pderop;Attached the concurrent scenario,26/Sep/12 17:06;djencks;Could you provide more complete instructions on how to run the framework with the test?  I'm too used to running stuff only in servers.  Also could you verify the problems still occur after I fixed https://issues.apache.org/jira/browse/FELIX-3681?  There was a good chance that components would be holding onto disposed instances of references that are delayed components.,"27/Sep/12 10:43;pderop;The problem also occurs with recent last commits.

I have attached a second tar (test_with_fwk.tgz) which will allow you to execute the test simply, and directly.
(I improved logging so please ignore previous issue attachment).

The test_with_fwk.tgz contains the test maven project, and also the felix fwk distribution 4.0.3 with a symbolic link to the test, in felix-framework-4.0.3/bundle/test.scr-1.0.0.jar -> ../../test.scr/target/test.scr-1.0.0.jar

So, to start the test, go to /tmp, untar the tgz, and run the framework:

   cd /tmp
   tar zxvf test_with_fwk.tgz
   cd felix-framework-4.0.3/
   java -jar bin/felix.jar


I don't have recompiled the fwk in order to redirect stdout messages to the log service, so you will probably see many exceptions in the console stdout. 
But you can first have a look at ./logs.txt, which contains all messages displayed by the Logservice.

One last important remark: If the test does not seem to start, you will see after 10 seconds the following log in the console:

g! Did not get A injected timely ... see logs.txt

and in the logs.txt, you will see the states of all components at the end of the log file:


cat ./logs.txt

Level=2 D=12:20:52,413 T=pool-1-thread-1: enabling component G
Level=2 D=12:20:52,420 T=pool-1-thread-5: enabling component D
Level=2 D=12:20:52,420 T=pool-1-thread-2: enabling component I
Level=2 D=12:20:52,422 T=pool-1-thread-8: enabling component B
Level=2 D=12:20:52,422 T=pool-1-thread-10: enabling component E
Level=2 D=12:20:52,423 T=pool-1-thread-6: enabling component F
Level=2 D=12:20:52,424 T=pool-1-thread-4: enabling component K
Level=2 D=12:20:52,437 T=pool-1-thread-3: enabling component C
Level=2 D=12:20:52,422 T=pool-1-thread-9: enabling component H
Level=2 D=12:20:52,440 T=pool-1-thread-7: enabling component J
Level=2 D=12:20:52,472 T=pool-1-thread-11: disabling component D
Level=2 D=12:20:52,475 T=pool-1-thread-12: disabling component K
Level=2 D=12:20:52,486 T=pool-1-thread-13: disabling component I
Level=2 D=12:20:52,490 T=pool-1-thread-14: disabling component J
Level=2 D=12:20:52,492 T=pool-1-thread-16: disabling component H
Level=2 D=12:20:52,492 T=pool-1-thread-15: disabling component F
Level=2 D=12:20:52,493 T=pool-1-thread-17: disabling component C
Level=2 D=12:20:52,494 T=pool-1-thread-18: disabling component G
Level=2 D=12:20:52,495 T=pool-1-thread-19: disabling component E
Level=2 D=12:20:52,496 T=pool-1-thread-20: disabling component B
Level=2 D=12:20:52,497 T=pool-1-thread-21: enabling component C
Level=2 D=12:20:52,501 T=pool-1-thread-24: enabling component D
Level=2 D=12:20:52,503 T=pool-1-thread-22: enabling component B
Level=2 D=12:20:52,503 T=pool-1-thread-23: enabling component K
Level=2 D=12:20:52,503 T=pool-1-thread-25: enabling component F
Level=2 D=12:20:52,503 T=pool-1-thread-26: enabling component G
Level=2 D=12:20:52,504 T=pool-1-thread-27: enabling component I
Level=2 D=12:20:52,504 T=pool-1-thread-28: enabling component J
Level=2 D=12:20:52,504 T=pool-1-thread-29: enabling component E
Level=2 D=12:20:52,504 T=pool-1-thread-30: enabling component H

Level=1 D=12:21:02,505 T=Thread-1: enableLatch TIMEOUT
Level=2 D=12:21:02,506 T=Thread-1: A[unsatisfied] B[registered] C[registered] D[registered] E[registered] F[unsatisfied] G[unsatisfied] H[unsatisfied] I[unsatisfied] J[unsatisfied] K[registered] 


Here, no exception are thrown, but A is never satisfied while it should be (in the log above, F is unsatisfied but it should not because K is registered).

Then after restarting the test a couple of times, you should see some exceptions in stdout and ./logs.txt ...

",27/Sep/12 10:43;pderop;attached the second tar gz file with framework + test sample code.,27/Sep/12 21:33;djencks;Great test!!!  I think the major problem is FELIX-3687.  There are a bunch of minor fixes within DS I'm working on.,27/Sep/12 21:34;djencks;The cause of the write lock timeouts I see,"27/Sep/12 21:54;djencks;DS fixes for most of the little problems are in 1391231.  I see some test runs with few exceptions other than org.osgi.framework.ServiceException: Service factory returned null.
 which is expected.",28/Sep/12 00:03;djencks;I fixed the last DS problem I saw in r1391266,"28/Sep/12 08:29;pderop;Thanks David for the quick anwser and fixes, I will now manage to transform the sample code into an integration test and will commit it.

I confirm that now, with your last fixes, I don't see anymore the two following problems:

1) 

 log level: 1 D=Mon Sep 24 11:07:45 CEST 2012, T=Thread-1: ServiceRegistrationImpl: Error ungetting service.
java.lang.IllegalStateException: ungetServiceUnsatisfied
at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.ungetService(AbstractComponentManager.java:1336) 

2)

 log level: 2 D=Mon Sep 24 11:07:45 CEST 2012, T=Thread-1: [A] Could not get service from ref [test.scr.F] 


But could you please clarify to me the following points:

- Why Is the ""ServiceException:Service factory returned null"" problem expected ? Is it because of the FELIX-3687 issue ?

I'm still seeing this exception. So nothing to do in DS and we have to wait for a fix from FELIX-3687, right ?

- I still sometimes see that A is never enabled and I see the log:

Level=1 D=09:38:56,17 T=Thread-1: enableLatch TIMEOUT
Level=2 D=09:38:56,18 T=Thread-1: A[unsatisfied] B[registered] C[registered] D[registered] E[registered] F[unsatisfied] G[unsatisfied] H[unsatisfied] I[registered] J[registered] K[registered] 

Is this also related to deadlock from FELIX-3687 ? I guess yes ?

- Lastly, I also still see the following exception (I think it is also related to FELIX-3687, am I correct ?) ->

Level=1 D=09:46:35,687 T=SCR Component Actor: [F] Locking activity before IllegalMonitorStateException:
  obtainWriteLock failure from: ImmediateComponentManager.ungetService.1 readLocks: 0 writeLocks: 0 thread: Thread[SCR Component Actor,5,main] time: 1348818395686 Could not obtain write lock.
 ...
and in one of the threads dump, I then see:

ThreadId: 15 : name: SCR Component Actor State: RUNNABLE
  LockInfo: null LockOwnerId: -1 LockOwnerName: null
  sun.management.ThreadImpl.dumpThreads0(Native Method)
  sun.management.ThreadImpl.dumpAllThreads(ThreadImpl.java:433)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.dumpThreads(AbstractComponentManager.java:294)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.logLockingInfo(AbstractComponentManager.java:240)
  org.apache.felix.scr.impl.manager.AbstractComponentManager.releaseReadLock(AbstractComponentManager.java:222)
  org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:710)
  org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:349)
  org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:258)
  org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:389)
  org.apache.felix.framework.Felix.ungetService(Felix.java:3432)


","28/Sep/12 16:16;djencks;Pierre,

-- returning null from a get service call is always expected.  There's no way to be sure that the ServiceReference you have is still valid except by trying to get the service, and if you get null back, it wasn't.  For some other kind of behavior you'd have to have a way of locking the service reference to prevent any other threads from changing its state.

-- I think the FELIX-3687 problem is causing the IllegalMonitorStateExceptions and the Could not obtain write lock messages.  So far I've concentrated on reducing the exceptions rather than completely understanding what your test is doing so I'm not sure why A might not be getting enabled.","28/Sep/12 17:27;djencks;I proposed a patch for FELIX-3687 which seems to fix the deadlock.

IIUC the test runs forever until A is not bound to Main or A is not unbound from Main?   Since the test eventually terminates with A not bound I think this must mean there is still a window where a service event is not processed correctly.  Probably with debug logging we could see where this is happening.","30/Sep/12 01:14;djencks;I updated the ""try circular dependencies again later"" idea from FELIX-3557 to apply to current trunk, and thought it might be useful to have an api to determine if all the async work is done, FELIX-3692.  I think all the getService returning null exceptions are caused by the async activate/deactivate after enable/disable overlapping.  At the moment all the activate/deactivate is done on the same single thread.  Anyway I wondered what would happen if you used the proposed ScrService.waitForTasksCompleted() api either between the enable/disable and disable/enable steps in your test or just between disable/enable.  I suspect all the getService return null errors will stop.","01/Oct/12 15:49;pderop;I confirm that the ""could not obtain writelock"" exception has disappeared, after having applied the patch you proposed in FELIX-3687.

However, I still have the two remaining problems:

1) A is sometimes never satisfied with log:
Level=2 D=17:05:40,113 T=Thread-1: A[unsatisfied] B[registered] C[registered] D[registered] E[registered] F[unsatisfied] G[registered] H[registered] I[registered] J[registered] K[registered] 

2) sometimes, main.bindA method gets a null when trying to dereference A from the bundle context.

Regarding the second point, correct me if I am wrong, but I believe that the ""enabledLatch"" latch I am using should always ensure that we never get null from getService:

  @Reference(type = '*', service = A.class, unbind = ""unbindA"")
  void bindA(ServiceReference sr) {
    sr.getBundle().getBundleContext().getService(sr);
    if (_counter.incrementAndGet() != 1) {
      throw new IllegalStateException(""bindA: invalid counter value: "" + _counter);
    }
    _enabledLatch.countDown();
  }

Here, the enableLatch is decremented in order to unblock the Main.run() method, which at this point should not have deactivated  B,C,D,E,F,G,H,I,J,K.
The enableLatch is initialized to 11 (10 for the activation of B,C,D,E,F,G,H,I,J,K, plus one additional latch (10+1=11) decremented by the Main.bindA() method call.

So, to summarize, the Main.run method  does the following, in an infinite loop:

- create enabledLatch = 11
- create disableLatch = 11
- concurrently enable B,C,D,E,F,G,H,I,J,K (each decrement the enableLatch ten times,concurrently)
- when A is available, Main.bindA is called and A service is dereferenced using sr.getBundle().getBundleContext().getService(sr);
- At this point: A should be available because the Main.run() method should be blocked on the _enableLatch
- Then once Main.bindA method has dereferenced the A service, it then decrements the ""enableLatch"".
- Then at this point, the Main.run() is unblocked from the enableLatch, and B,C,D,E,F,G,H,I,J,K are disabled concurrently, and the disableLatch is decremented 10 times
- Then Main.unbindA method should be called and the disableLatch is then decremented (to 0)
- Then Main.run is unblocked from the disableLatch and the same steps are repeated in an infinite loop.

Now, I have applied the patches from FELIX-3557 and FELIX-3692, and now I have modified the Main.run method in  order to
invoke _scr.waitForTasksCompleted() before disabling  B,C,D,E,F,G,H,I,J,K:

      manager.enableComponents(exec);
      if (!_enabledLatch.await(10000, TimeUnit.MILLISECONDS)) {
         ...
      }
      _scr.waitForTasksCompleted();
      manager.disableComponents(exec);
      try {
        if (!_disabledLatch.await(10000, TimeUnit.MILLISECONDS)) {
        ...

But I am getting:

g! Exception in thread ""Thread-1"" java.lang.IllegalMonitorStateException
        at java.lang.Object.wait(Native Method)
        at java.lang.Object.wait(Object.java:485)
        at org.apache.felix.scr.impl.ComponentActorThread.waitForTasksCompleted(ComponentActorThread.java:148)
        at org.apache.felix.scr.impl.ComponentRegistry.waitForTasksCompleted(ComponentRegistry.java:707)
        at test.scr.Main.run(Main.java:148)
        at java.lang.Thread.run(Thread.java:662)

So, in ComponentActorThread, I changed the method:

    void waitForTasksCompleted()
    {
        synchronized ( tasks )
        {
            while ( !tasks.isEmpty() )
            {
                try
                {
                    wait();
                }
                catch ( InterruptedException e )
                {

                }
            }

        }
    }

to:

    void waitForTasksCompleted()
    {
        synchronized ( tasks )
        {
            while ( !tasks.isEmpty() )
            {
                try
                {
                    tasks.wait();
                }
                catch ( InterruptedException e )
                {

                }
            }

        }
    }

(I wait on the tasks instead of this)

So, no more exception but I still have sometimes null returned by getService (from Main.bindA method).

But I also noticed another exception, telling that the Main.unbindA method seems to be invoked twice (but should not):

ERROR: test.scr (8): [test.scr.Main] The unbindA method has thrown an exception
java.lang.IllegalStateException: unbindA: invalid counter value: -1
        at test.scr.Main.unbindA(Main.java:110)


(I only got this exception with the patches from  FELIX-3557 and FELIX-3692 + my fix in waitForTasksCompleted method).


","01/Oct/12 16:25;djencks;Pierre,

Thanks for catching what to wait on :-), that is obviously correct.

I think the remaining problems of main bindA getService returning null and unbindA getting called twice may be related, but I don't understand how it can be happening.  Can you try putting a call to
       _scr.waitForTasksCompleted();
after the disabled latch countdown?  At first I thought perhaps some of the disabled components had not been deactivated by the time the new set are being enabled, but since all the async actions are put in a linked list and run in a single thread I'm not sure how this could happen.



","01/Oct/12 21:42;pderop;I think that the two latches (enableLatch and disableLatch) both ensure that activation never takes place while deactivation is running.
Anyway, I added a call to the waitForTasksCompleted after the disable latch has reached 0, like this:

-> 

    while (true) {
      ++ loop;
      if ((loop % 100) == 0) {
        _logService.log(LogService.LOG_WARNING, ""Performed "" + loop + "" tests."");
      }
      _enabledLatch = new CountDownLatch(11);
      _disabledLatch = new CountDownLatch(11);
      
      EnableManager manager = new EnableManager(new String[] { ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"",
          ""K"" });
      manager.enableComponents(exec);
      
      try {
        if (!_enabledLatch.await(10000, TimeUnit.MILLISECONDS)) {
          System.out.println(""Did not get A injected timely ... see logs.txt"");
          _logService.log(LogService.LOG_ERROR, ""enableLatch TIMEOUT"");
          dumpComponents();
          System.exit(1);
        }
      } catch (InterruptedException e) {
      }
      
      _scr.waitForTasksCompleted();
      
      manager.disableComponents(exec);
      try {
        if (!_disabledLatch.await(10000, TimeUnit.MILLISECONDS)) {
          System.out.println(""Could not disable components timely ... see logs.txt"");
          _logService.log(LogService.LOG_ERROR, ""disableLatch TIMEOUT"");
          dumpComponents();
          System.exit(1);
        }
      } catch (InterruptedException e) {
      }
      
      _scr.waitForTasksCompleted();
    }

But this does not change anything. Either I see some null returned by getService, on the enableLatch timeouts because Main is never bound to A.

What is strange is that I can't reproduce the double call to Main.unbindA(A a) ...

Now, I have done another test without calling at all the scr.waitForTasksCompleted() method, but this time I configured ds.loglevel=DEBUG in  felix-framework-4.0.3/conf/config.properties. And I saw the following warns which might help to make a diagnostic:

(notice that now, I'm using your two patches from  FELIX-3557 and FELIX-3692, but I don't call the scr.waitForTasksCompleted)

->

Level=2 D=23:22:00,219 T=SCR Component Actor: [J] Could not get service from ref [test.scr.K]
Level=2 D=23:22:00,220 T=SCR Component Actor: [I] Could not get service from ref [test.scr.J]
Level=2 D=23:22:00,220 T=SCR Component Actor: [H] Could not get service from ref [test.scr.I]
Level=2 D=23:22:00,220 T=SCR Component Actor: [G] Could not get service from ref [test.scr.H]
Level=2 D=23:22:00,220 T=SCR Component Actor: [F] Could not get service from ref [test.scr.G]
Level=2 D=23:22:00,220 T=SCR Component Actor: [A] Could not get service from ref [test.scr.F]
Level=1 D=23:22:00,219 T=FelixDispatchQueue: FrameworkEvent: ERROR
org.osgi.framework.ServiceException: Service factory returned null.
        at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:341)
        at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
        at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:313)
        at org.apache.felix.framework.Felix.getService(Felix.java:3482)
        at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
        at org.apache.felix.scr.impl.helper.BindMethod.getServiceObject(BindMethod.java:562)
        at org.apache.felix.scr.impl.manager.DependencyManager.prebind(DependencyManager.java:1007)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.collectDependencies(AbstractComponentManager.java:835)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:622)
        at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:308)
        at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
        at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:313)
        at org.apache.felix.framework.Felix.getService(Felix.java:3482)
        at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
        at org.apache.felix.scr.impl.helper.BindMethod.getServiceObject(BindMethod.java:562)
        at org.apache.felix.scr.impl.manager.DependencyManager.prebind(DependencyManager.java:1007)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.collectDependencies(AbstractComponentManager.java:835)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:622)
        at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:308)
        at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
        at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:313)


So, What is the root cause of these ""Could not get service from ref ..."" warnings ?

I have attached a ""logs_with_could_not_get_service_from_ref.txt.gz"" file, which contains the logs.
Can you please take a look at it, especially at line 3236 ? 

Or you can also modify the Log.log() method in order to display every LogService log levels, and try to reproduce the problem yourself (using ds.loglevel=DEBUG in the felix config.properties) ?

  public void log(int level, String message, Throwable exception) {
    if (level <= 4) {
      ...

instead of 

  public void log(int level, String message, Throwable exception) {
    if (level <= 2) {


Anyway, I believe that now, I should work on trying to transform the sample code into an integration test ...","02/Oct/12 21:52;pderop;David, 

I have committed in r1393203 an integration test for this issue (Felix3680Test).

The test currently fails either when getService returns null or when A is never enabled.

When getService returns null, you will see the following error in TEST-org.apache.felix.scr.integration.Felix3680Test.xml:

log level: 1 D=Tue Oct 02 23:12:31 CEST 2012, T=Thread-1: FrameworkEvent ERROR
org.apache.felix.log.LogException: org.osgi.framework.ServiceException: Service factory returned null.
        at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:341)
        at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
        at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:310)
        at org.apache.felix.framework.Felix.getService(Felix.java:3420)
        at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
        at org.apache.felix.scr.integration.components.felix3680.Main.bindA(Main.java:112)
        at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:236)
        at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
        at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:613)
        at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:496)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1207)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1168)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.invokeBindMethod(ImmediateComponentManager.java:300)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:326)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:134)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:741)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:724)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:769)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1554)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:630)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:257)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:134)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:741)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:724)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:769)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1554)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:630)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$1.run(AbstractComponentManager.java:381)
        at org.apache.felix.scr.impl.ComponentActorThread.run(ComponentActorThread.java:98)
        at java.lang.Thread.run(Thread.java:662)

and when A is never bound to the ""Main"" component, you will then see the log in TEST-org.apache.felix.scr.integration.Felix3680Test.xml:

log level: 1 D=Tue Oct 02 23:11:07 CEST 2012, T=Thread-1: enableLatch TIMEOUT
log level: 2 D=Tue Oct 02 23:11:07 CEST 2012, T=Thread-1: A[unsatisfied] B[registered] C[registered] D[registered] E[registered] F[unsatisfied] G[unsatisfied] H[registered] I[registered] J[registered] K[registered] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 14.313 sec 

Notice that I also have set ds.loglevel=warn by default in ComponentTestBase, in order to maximize concurrency.
(I wonder which default value we should use ? warn or debug ?)

I Hope that the integration test will help ? Let me know if there is a problem with this test.
","02/Oct/12 23:34;djencks;I've been working with the standalone version of the test and think I'm getting closer to understanding the problem.  After adding some logging I see (filtered for G events)

Level=4 D=16:22:09,285 T=SCR Component Actor: Running task: Async Deactivate: G
Level=4 D=16:22:09,285 T=SCR Component Actor: [G] Current state: Unsatisfied, Event: deactivate (reason: 1)
Level=4 D=16:22:09,287 T=SCR Component Actor: Running task: Async Activate: G
Level=4 D=16:22:09,287 T=SCR Component Actor: [G] Activating component
Level=4 D=16:22:09,287 T=SCR Component Actor: [G] No change in target property for dependency h
Level=4 D=16:22:09,287 T=SCR Component Actor: [G] State transition : Unsatisfied -> Registered
Level=4 D=16:22:09,287 T=SCR Component Actor: [G] Existing service registration, not registering

There are two peculiar things here:

1. we are calling deactivate on an unsatisified component.  This is actually probably fine

2. when we activate G again there is already a service registration present.  This is definitely wrong.

I haven't figured out how this can happen yet.
","03/Oct/12 10:45;pderop;I have updated what I committed yesterday in order to use only static/required References in A.

Now I'm thinking about the following, and wonder if it is related to what you observed:

I realize that that when disabling components, then the disable task (that is: ComponentContext.disable method call) is done asynchronously (using the component actor thread).
Am I correct ? (I think you already explained this but I did not catch it ... sorry).

So, it is then possible that when the Main.unbind method is called, then the _disableLatch.countDown() is called while some disable tasks are not yet executed and still scheduled in the component actor thread. At this point, the Main.run method is then unblocked form the _disableLatch, and then try to re-enable components ... while the previous disable tasks are not yet executed by the component actor thread. However, since enable tasks are also scheduled in the component actor thread queue, then all pending disable tasks should be executed before the new enable tasks ...

I now start to understand why you asked me to try the (not yet committed) ScrService.waitForTasksCompleted.

So, did you try to use your ScrService.waitForTasksCompleted() method from the standalone version ?


","03/Oct/12 14:06;pderop;in revision r1393476, the latches are now called from activate/deactivate methods from B/C/D/E/F/G/H/I/J/K.

This makes sure that the latches are incremented or decremented from the component actor thread, where async enable/disable tasks are executed.

Now, it's better: I successfully ran 93 times the loop in the Main.run method.

But then after the test 94,  I'm getting null returned by getService(sr) from the Main.bindA() method, 
or sometimes, A is never injected to Main.







",03/Oct/12 19:35;djencks;I found a couple more problems that I fixed in rev 1393716.  If I run the standalone test with ds.loglevel=debug then I get OOM errors from the lock logging.  If I disable this I can run the standalone test for several minutes without errors.  The testsuite test still fails but I haven't looked at why yet.,"04/Oct/12 10:44;pderop;I confirm that now,  my standalone test goes further, and the committed integration test also goes further.
But both tests end up failing.

For instance, I have the following logs with the integration test: the Main.run method did one successful iteration, but then failed with the second one, because A is not enabled timely
(see at the end of the logs: enableLatch TIMEOUT)

...

log level: 2 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: ******* Performed 1 tests.
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] invoked deactivate: stop
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] Unset implementation object for component K in deleteComponent
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] No change in target property for dependency h
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] Registered for service events, currently 0 service(s) match the filter
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: G] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: G
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] No change in target property for dependency h
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] Dependency not satisfied: h
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [G] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [D] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [D] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [D] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: D] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: D
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [D] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [D] State transition : Unsatisfied -> Registered : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [D] registering services
log level: 3 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: ServiceEvent REGISTERED
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Adding Service org.apache.felix.scr.integration.components.felix3680.D/25
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service d registered, activate component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency b
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: b
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency c
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: c
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency d
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency e
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: e
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service d activation on other thread bound service reference [org.apache.felix.scr.integration.components.felix3680.D]
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] No change in target property for dependency j
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] Registered for service events, currently 0 service(s) match the filter
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: I] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: I
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] No change in target property for dependency j
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] Dependency not satisfied: j
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [I] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [C] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [C] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [C] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: C] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: C
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [C] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [C] State transition : Unsatisfied -> Registered : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [C] registering services
log level: 3 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: ServiceEvent REGISTERED
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Adding Service org.apache.felix.scr.integration.components.felix3680.C/26
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service c registered, activate component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency b
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: b
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency c
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency d
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency e
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: e
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service c activation on other thread bound service reference [org.apache.felix.scr.integration.components.felix3680.C]
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [B] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [B] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [B] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: B] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: B
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [B] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [B] State transition : Unsatisfied -> Registered : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [B] registering services
log level: 3 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: ServiceEvent REGISTERED
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Adding Service org.apache.felix.scr.integration.components.felix3680.B/27
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service b registered, activate component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency b
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency c
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency d
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency e
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: e
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service b activation on other thread bound service reference [org.apache.felix.scr.integration.components.felix3680.B]
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [E] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [E] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [E] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: E] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: E
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [E] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [E] State transition : Unsatisfied -> Registered : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [E] registering services
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] No change in target property for dependency g
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] Registered for service events, currently 0 service(s) match the filter
log level: 3 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: ServiceEvent REGISTERED
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: F] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Adding Service org.apache.felix.scr.integration.components.felix3680.E/28
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service e registered, activate component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency b
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency c
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency d
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency e
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] No change in target property for dependency f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency not satisfied: f
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [A] Dependency Manager: Service e activation on other thread bound service reference [org.apache.felix.scr.integration.components.felix3680.E]
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: F
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] No change in target property for dependency g
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] Dependency not satisfied: g
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [F] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: K] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] No change in target property for dependency k
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: K
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] State transition : Unsatisfied -> Registered : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [K] registering services
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] Registered for service events, currently 0 service(s) match the filter
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: J] as #1 in the queue
log level: 3 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: ServiceEvent REGISTERED
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] Enabling Component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] No change in target property for dependency i
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: J
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] Registered for service events, currently 0 service(s) match the filter
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] State transition : Disabled -> Unsatisfied : service reg: null
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] Component enabled
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] No change in target property for dependency k
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] Dependency not satisfied: k
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Adding task [Async Activate: H] as #1 in the queue
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [J] Not all dependencies satisfied, cannot activate
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: Running task: Async Activate: H
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] Activating component
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] No change in target property for dependency i
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] Dependency not satisfied: i
log level: 4 D=Thu Oct 04 11:48:04 CEST 2012, T=Thread-1: [H] Not all dependencies satisfied, cannot activate

> here, there is a timeout on  _enableLatch: ->
log level: 1 D=Thu Oct 04 11:48:14 CEST 2012, T=Thread-1: enableLatch TIMEOUT
log level: 2 D=Thu Oct 04 11:48:14 CEST 2012, T=Thread-1: A[unsatisfied] B[registered] C[registered] D[registered] E[registered] F[unsatisfied] G[unsatisfied] H[unsatisfied] I[unsatisfied] J[unsatisfied] K[registered] 

A is not enabled because F remains unsatisfied; but F should be registered because K is registered (F > G > H > I > J > K).
","05/Oct/12 06:48;djencks;I'm pretty sure that I found another problem and the test sometimes hits it.

DependencyManager.enable does this:

            ServiceReference refs[] = getFrameworkServiceReferences();
            m_size = ( refs == null ) ? 0 : refs.length;
            // register the service listener
            String filterString = ""("" + Constants.OBJECTCLASS + ""="" + m_dependencyMetadata.getInterface() + "")"";
            m_componentManager.getActivator().getBundleContext().addServiceListener( this, filterString );

In between getting the initial service references and registering the listener, other threads can register more services that will never be seen by the dependency manager.

The service tracker solves this problem by registering the service listener first.  The code to avoid duplicates is rather complicated and I don't think I can imitate it successfully.  I'm going to see about basing the dependency manager on a service tracker.  The ServiceTrackerCustomizer will return RefPairs so we can get the service later as needed.
","05/Oct/12 07:13;pderop;I have experimented the following work around, which seems to resolve many concurrency issues in the felix 1.6.0.
And I wonder if it might also be helpful or not in the trunk:

in the scr 1.6.0, I'm using the following SerialExecutor from Neil Bartlett free osgi book, and slightly adapted it in order to allow it to be reentrant, and plugged it in the DependencyManager, when getting called in the serviceChanged method.

what I like with this is that concurrent service events can be handled by the serial executor without holding any locks, but of course the serial executor also has the drawback of serializing every multi thread events in one single worker thread ...

In DependencyManager:

+++ src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java      (working copy)
@@ -31,6 +31,7 @@
 import org.apache.felix.scr.Reference;
 import org.apache.felix.scr.impl.BundleComponentActivator;
 import org.apache.felix.scr.impl.helper.BindMethod;
+import org.apache.felix.scr.impl.helper.SerialExecutor;
 import org.apache.felix.scr.impl.helper.UnbindMethod;
 import org.apache.felix.scr.impl.helper.UpdatedMethod;
 import org.apache.felix.scr.impl.metadata.ReferenceMetadata;
@@ -151,8 +152,15 @@
      * Called when a registered service changes state. In the case of service
      * modification the service is assumed to be removed and added again.
      */
-    public void serviceChanged( ServiceEvent event )
+    public void serviceChanged( final ServiceEvent event )
     {
+      SerialExecutor.INSTANCE.execute(new Runnable() {
+        public void run() {
+          _serviceChanged(event);
+        }});
+    }
+    public void _serviceChanged( ServiceEvent event ) 
+    {
          ...

and here is the adapted (reentrant) SerialExecutor:

package org.apache.felix.scr.impl.helper;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executor;

import org.apache.felix.scr.impl.Activator;
import org.osgi.service.log.LogService;

public class SerialExecutor implements Executor {
  public final static SerialExecutor INSTANCE = new SerialExecutor();
  private final List queue = new ArrayList();
  private Thread _runningThread;
  
  public void execute(Runnable command) {
    Runnable next = null;
    Thread currThread = Thread.currentThread();
    boolean runImmediately = false;
    
    synchronized (this) {
      if (_runningThread == null) {
        _runningThread = currThread;
      } else if (_runningThread == currThread) {
        runImmediately = true;
      }
      
      if (! runImmediately) {
        next = queue.isEmpty() ? command : null;
        queue.add(command);
      }
    }
    
    if (runImmediately) {
      runTask(command);
      return;
    }
    
    while (next != null) {
      runTask(next);
      synchronized (this) {
        queue.remove(0);
        next = queue.isEmpty() ? null : (Runnable) queue.get(0);
        if (next == null) {
          _runningThread = null;
        }
      }
    }
  }
  
  private void runTask(Runnable command) {
    try {
      command.run();
    } catch (Throwable t) {
      Activator.log(LogService.LOG_ERROR, null, ""Error processing tasks"", t);
    }
  }
}

Of course, this fully breaks concurrency and the SerialExecutor should also be plugged when handling configuration events, may be ...

I have tried this with felix 1.6.0 because I had many concurrency issues in the old release, but I will try this with the trunk and see how the integration test is working or not.

what do you think ?
","05/Oct/12 17:04;djencks;I'm not happy with the default situation being that service events return before the response to them is complete.  In my proposed circular dependency resolve-later scheme, when there's a problem responding to the event synchronously we try again asynchronously but I think that the default needs to be to complete the response before returning.

If we were to do this single-threading I think we could use the ComponentActorThread.  We might also consider replacing the ComponentActorThread with an injected executor which might of course bring a whole new set of problems.","05/Oct/12 21:31;pderop;FYI, I tried to plug the SerialExecutor in the trunk, but it sounds like that the problem is the same: at some point in time, A is not injected to Main.
",12/Oct/12 00:42;djencks;I found a way to use the main idea from ServiceTracker to fix the timing hole in DependencyManager without rewriting everything.  I got the test to pass once.... will look for more holes and try some more times.,"13/Oct/12 12:10;pderop;Indeed, I successfully ran the test several times. But, using a multiprocessor machine, I sometimes find the following remaining problems:
(it's difficult to reproduce, and maybe the current issue should not block anymore a release ?)
->

1) A not enabled because some dependencies are not available:

log level: 1 D=13:35:24,797, T=Thread-1: enableLatch TIMEOUT
log level: 2 D=13:35:24,797, T=Thread-1: A[unsatisfied] B[registered] C[registered] D[registered] E[registered] F[unsatisfied] G[unsatisfied] H[unsatisfied] I[disabled] J[registered] K[registered] 

2) sometimes the Main.bindA(A a) method gets null when calling getService; but since we decrement the ""enableLatch"" after calling getService, then we should never get null (am I correct or is there something wrong in the integration test ?):

log level: 2 D=13:31:21,17, T=Thread-1: [A] Could not get service from ref [org.apache.felix.scr.integration.components.felix3680.B]
log level: 1 D=13:31:21,18, T=Thread-1: FrameworkEvent ERROR
org.apache.felix.log.LogException: org.osgi.framework.ServiceException: Service factory returned null.
        at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:341)
        at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
        at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:310)
        at org.apache.felix.framework.Felix.getService(Felix.java:3420)
        at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
        at org.apache.felix.scr.impl.helper.BindMethod.getServiceObject(BindMethod.java:563)
        at org.apache.felix.scr.impl.manager.DependencyManager.prebind(DependencyManager.java:1048)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.collectDependencies(AbstractComponentManager.java:857)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:620)
        at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:308)
        at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
        at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:310)
        at org.apache.felix.framework.Felix.getService(Felix.java:3420)
        at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
        at org.apache.felix.scr.integration.components.felix3680.Main.bindA(Main.java:129)
        at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:616)
        at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:236)
        at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
        at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:613)
        at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:496)
        at org.apache.felix.scr.impl.helper.BindMethod.invoke(BindMethod.java:38)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1231)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1192)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.invokeBindMethod(ImmediateComponentManager.java:300)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:339)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:146)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:752)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:735)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:783)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1549)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:641)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:270)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:146)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:752)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:735)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:783)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1549)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:641)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$1.run(AbstractComponentManager.java:381)
        at org.apache.felix.scr.impl.ComponentActorThread.run(ComponentActorThread.java:98)
        at java.lang.Thread.run(Thread.java:679)




","13/Oct/12 16:20;djencks;With the current test code I don't expect any errors.  I committed a lot more changes that among other things don't drop any service removed or modified events.  I haven't seen any errors locally in the last 10-15 runs.  

Is your test machine multiprocessor rather than just multicore?    I wonder if that results in less cache consistency.

thanks for the logging improvements.","14/Oct/12 20:56;pderop;My mp machine is an HP G6 2*2.67GHz(2*6cores).

a I did some tests on my laptop using the latest commits and sorry butI'm still seeing some errors.

I'm Using 

    ""MAVEN_OPTS=-Xmx512M -Xms512m -server"" 

and also I modified the Felix3680Test.test_concurrent_reference_bindings() method in order to run the test during 600 seconds:

    public void test_concurrent_reference_bindings()
    {
        final Component main =
                findComponentByName(""org.apache.felix.scr.integration.components.felix3680.Main"");
        TestCase.assertNotNull(main);
        main.enable();
        delay(600);
        ...

So, I see the two following errors:

1) a new error which I never noticed so far (""Cannot disable component"")

log level: 2 D=22:15:13,303, T=Thread-1: Performed 12000 tests.
log level: 2 D=22:15:14,295, T=Thread-1: Performed 12500 tests.
log level: 1 D=22:15:15,72, T=Thread-1: [F] Cannot disable component
java.lang.IllegalStateException: disableDisabled
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.disable(AbstractComponentManager.java:1373)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.disableInternal(AbstractComponentManager.java:651)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.disable(AbstractComponentManager.java:421)
        at org.apache.felix.scr.impl.config.ImmediateComponentHolder.disableComponents(ImmediateComponentHolder.java:405)
        at org.apache.felix.scr.impl.BundleComponentActivator.disableComponent(BundleComponentActivator.java:431)
        at org.apache.felix.scr.impl.manager.ComponentContextImpl.disableComponent(ComponentContextImpl.java:107)
        at org.apache.felix.scr.integration.components.felix3680.Main$EnableManager$1.run(Main.java:87)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)

2) and after having restarted the test a second time, then after 40 seconds:

...
log level: 2 D=22:20:55,882, T=Thread-1: Performed 15000 tests.
log level: 1 D=22:21:06,150, T=Thread-1: enableLatch TIMEOUT
log level: 2 D=22:21:06,151, T=Thread-1: A[unsatisfied] B[registered] C[registered] D[registered] E[registered] F[unsatisfied] G[disabled] H[registered] I[registered] J[registered] K[registered] 

",16/Oct/12 23:16;djencks;I found a way to reliably produce test failures by replacing the single component actor thread with an executor so the activations happen concurrently. This is more similar to delayed components being activate by service events on many threads. Going to investigate....,"17/Oct/12 07:37;pderop;from my side, I have made another integration test which is using bundleContext.registerService instead of using enable/disable ...
and this new test is also reproducing some errors more reliably.

for example: I see a new error: sometimes, Main.bindA(A a) is called twice for the same ""A"" service instance. I'll attach this integration test today, and hope it will help to investigate.","17/Oct/12 12:03;pderop;I committed in the trunk a modification of the ComponentTestBase.Log inner class, in order to replace the usage of a LogListener by our own LogService 
(still implemented in ComponentTestBase, see new Log inner class).

I did this because the LogListener is handled from an internal LogService worker thread, preventing to be able to log the real thread-name of the thread which do the actual log.

Now, if you update the trunk, you will see all actual logging thread name. for instance:

log level: 4 D=14:00:02,762 T=Thread[pool-2-thread-23,5,main]: [org.apache.felix.scr.integration.components.felix3680_2.A] Dependency Manager: Removing Service org.apache.felix.scr.integration.components.felix3680_2.F/51

(the ""T=Thread[pool-2-thread-23,5,main]"" trace is now logging the correct thread which did the log; before the ""T=..."" trace was always displaying the LogService internal thread used to handle our LogListener ...).
","17/Oct/12 12:11;pderop;Attached a new test in integration_test_FELIX_3880_2.tgz, which seems to reproduce more reliably some concurrency issues.

Please update the trunk before untaring, because I use the new ComponentTestBase.Log inner class I just committed today, in order to be able to display the correct logging thread name, instead of the LogService logging thread.

Let me know if you want me to commit this new integration test.

This test uses BundleContext.registerService/unregisterService instead of using ComponentContext.enable/disable methods.

unfortunately, sometimes, I have the problem of the deadlock from the framework you recently reported, because I have some ""could not obtain lock"" logs (well, I don't know if its a new problem but I guess that this comes from the potential deadlock from the trunk).

So, when I don't have the ""could not obtain lock"" problem, I sometimes have getService returning null, or even the A service is injected twice in the Main.bindA(A a) method

","19/Oct/12 21:15;pderop;Now, I don't see anymore getService returning null because the fix from FELIX-3724 has fixed this problem (thanks).

But with integration_test_FELIX_3880_2.tgz, and with latest trunk, I sometimes reproduces a problem where the ""A"" service is injected twice in Main.bindA(A a) method.

I may be wrong, but I wonder why theDependencyManager.serviceAdded is not using a write lock, instead of a read lock ?

Because looking at the two following stacktraces, we see that DependencyManager.serviceAdded is concurrently invoked by two threads, which are registering some services on which A is depending: 
The thread Thread[pool-1-thread-30 is registering a first service from this stacktrace:

Level=1 D=22:49:27,793 T=pool-1-thread-7: Already bound A from stacktrace:
java.lang.Exception: bindA (Thread[pool-1-thread-30,5,main])
	at test.scr2.Main.bindA(Main.java:122)
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:236)
	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
	at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:613)
	at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:496)
	at org.apache.felix.scr.impl.helper.BindMethod.invoke(BindMethod.java:38)
	at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1308)
	at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1242)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.invokeBindMethod(ImmediateComponentManager.java:302)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:406)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4327)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3337)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:752)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:735)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:783)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1567)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:641)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:337)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4327)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3337)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
	at test.scr2.Main$EnableManager$1.run(Main.java:78)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

and a second thread pool-1-thread-7  is also registering (at the same time) another service on which A depends (probably an optional dependency):

 java.lang.Exception: bindA (Thread[pool-1-thread-7,5,main])
	at test.scr2.Main.bindA(Main.java:122)
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:236)
	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
	at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:613)
	at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:496)
	at org.apache.felix.scr.impl.helper.BindMethod.invoke(BindMethod.java:38)
	at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1308)
	at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1242)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.invokeBindMethod(ImmediateComponentManager.java:302)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:406)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4327)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3337)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:752)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:735)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:783)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1567)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:641)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:337)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4327)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3337)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
	at test.scr2.Main$EnableManager$1.run(Main.java:78)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

and these two threads end up calling twice Main.bindA(A a) method.

so, why don't we protect the DependencyManager.serviceAdded method , using a write lock, or a serial executor ?","20/Oct/12 00:24;djencks;I think there's a deadlock scenario if you basically synchronize on the service registration.   I don't remember the details, let me think about it.","20/Oct/12 21:37;pderop;ah ! I see ... I think you are right, we must not use a write lock in the DependencyManager.serviceAdded method because if we do this, we would then possibly register a satisfied service (that is: invoke bundleContext.registerService) while holding a write-lock ... and another thread then might be bound with that service and if this thread has a synchronized bind method, then we might have a dead lock if this thread is currently blocked on the write lock ...

Now, there is another strategy, based on a serial executor I talked about in a previous post.
I have tested it and it sounds to work well (I don't have anymore any concurrent exceptions using all the concurrent tests I have, and also extensively tested it in the previous 1.6.0 version, where I had many concurrency issues resolved by using this serial executor).

I have attached serial-executor.tgz, which is a tar gz, containing the SerialExecutor, as well as a patch.

Now, even if this seems to resolve most of the concurrency problems, I do agree that there is still a problem when using this SerialExecutor: because according to the specification, the ComponentContext.enableComponent/disableComponent methods must be asynchronous ... so I am not sure for now how we could use the SerialExecutor in the context of enableComponent/disableComponent methods ... may be the component actor thread could also be patched in order to reschedule using the serial executor ?

Another way could consist in dispatching every events to the actor thread, but in this case, the problem is that this would make component activation fully asynchronous and I think that Felix might not agree with this (in the past, components were activated asynchronously in the actor thread, but Felix changed this behavior in order to make sure that all components are started synchronously and are really available once the framework has started).

Anyway, if you have time to take a look, I would be interested what you think about ?
","20/Oct/12 22:58;djencks;I thought about it more and came to the opposite conclusion.  I think that as long as there are _different_ locks for registering the service and creating the implementation object there will be no deadlock.  Possibly the read-write lock won't be needed.

The register-service code can be gotten to by activate or by a dependency manager service added event.

Registering the service A can trigger getService on the registering thread (from a DM service added call) or a different thread (from that service happening to activate between the time the A service registration and the A service event arriving).

The get service needs to be synchronized (currently with the write lock) so only one component instance is created.  As long as these have 2 locks I don't see how a deadlock can occur.

The read lock might get in the way too... have to think more.

---

Just synchronizing the register-service code and fixing your test a bit seems to pass consistently.

Could you commit your _2 test?  I think there need to be a few changes to not always fail but I'd rather not mix up our work too much.

Still thinking, anyway....","21/Oct/12 09:54;pderop;ok, I see what you mean if we are using different locks.

I have committed the integration_test_FELIX_3880_2 test in revision 1400611.
I just tested it and got the unexpected double injection, in Main.bindA(A a) method (unless the test is itself wrong ?)

But take care about the fact that sometimes, we also come across the framework deadlock problem: (""could not obtain lock"").

When we don't have the fwk deadlock problem, then we have:

...
invoking bind: bindA
log level: 1 D=11:41:41,66 T=Thread[pool-2-thread-10,5,main]: Already bound A from stacktrace:
java.lang.Exception: bindA (Thread[pool-2-thread-10,5,main])
        at org.apache.felix.scr.integration.components.felix3680_2.Main.bindA(Main.java:156)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:236)
        at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
        at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:613)
        at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:496)
        at org.apache.felix.scr.impl.helper.BindMethod.invoke(BindMethod.java:38)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1308)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1242)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.invokeBindMethod(ImmediateComponentManager.java:302)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:406)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:752)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:735)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:783)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1567)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:641)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:337)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
        at org.apache.felix.scr.integration.components.felix3680_2.Main$RegistrationHelper$1.run(Main.java:108)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)

log level: 1 D=11:41:41,66 T=Thread[pool-2-thread-10,5,main]: Current stacktrace is:
java.lang.Exception: bindA (Thread[pool-2-thread-10,5,main])
        at org.apache.felix.scr.integration.components.felix3680_2.Main.bindA(Main.java:156)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:236)
        at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
        at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:613)
        at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:496)
        at org.apache.felix.scr.impl.helper.BindMethod.invoke(BindMethod.java:38)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1308)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1242)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.invokeBindMethod(ImmediateComponentManager.java:302)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceRemoved(DependencyManager.java:527)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:274)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.access$000(Felix.java:74)
        at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
        at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148)
        at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:760)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:735)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerComponentService(AbstractComponentManager.java:783)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1567)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:641)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:337)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:159)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
        at org.apache.felix.scr.integration.components.felix3680_2.Main$RegistrationHelper$1.run(Main.java:108)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)

thanks for your patience and for keeping to investigate this last concurrency issue.


","21/Oct/12 17:31;djencks;I have no reason to suppose this is the last concurrency issue :-)

We'll keep getting duplicate bind and unbind events until we synchronized the service registration.

Locally I've hacked away the read lock and synchronized the service registration. Most things seem to work well, including the FELIX-3680_2Test, but it has exposed some problems in the FELIX3680Test.  One problem is that waiting for the deactivations does not mean all the components are disabled, since e.g. G can be deactivated by H being deactivated.  This can result in G being disabled, G being enabled, and then G being deactivated.on a separate thread.  I think we might want to do something so that disable blocks until activation completes and enable blocks until deactivation completes.  I wonder if the spec should mention this?

BTW removing the read lock produces a dramatic speedup.  Instead of getting about 5000 runs in the _2 test I get around 50000.","25/Oct/12 23:54;djencks;With my last set of changes I haven't seen any test failures in a lot of runs.  Can you try it?

I fixed ( among other things):
- made enable and disable wait for the async bit from the other to complete
- sort of fixed the reference counting so it never goes below 0 and is no smaller than the actual number of services satisfying the filter.  It might be larger, but we don't really care.

I'm not 100% convinced the actual service tracking of bound services is entirely correct.  I opened 3729 to think about how to improve this.","26/Oct/12 15:53;pderop;Thank you David, I ran the tests several times and the problems seem to be fixed.

One point to notice: now I don't reproduce anymore the potential deadlock problem from FELIX-3687.
It also sounds like the tests are now running faster.

I will do more tests next week. So, you think that this commit might not be final and that some more work has to be done in FELIX-3729 ?

",31/Mar/13 06:23;djencks;The major problems here got fixed for 1.6.2 and Pierre's great stress tests are passing pretty consistently.  We can open more bugs as they show up.
org.apache.felix.deploymentadmin imports wrong version of org.osgi.service.deploymentadmin,FELIX-3678,12608770,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,rotty3000,rotty3000,23/Sep/12 02:47,01/Apr/14 12:46,14/Mar/19 02:48,28/May/13 10:07,deploymentadmin-0.9.0,,,,,,deploymentadmin-0.9.4,,,,,,,Deployment Admin,,,,,,0,,,,,,"Export-Package: org.osgi.service.deploymentadmin;uses:=""org.osgi.frame
 work"";version=""1.0"",org.osgi.service.deploymentadmin.spi;uses:=""org.o
 sgi.framework,org.osgi.service.deploymentadmin"";version=""1.0""

Import-Package: org.apache.felix.dm;version=""[3.0,4)"",org.osgi.framewo
 rk;version=""[1.5,2)"",org.osgi.service.deploymentadmin;version=""[1.1,2
 )"",org.osgi.service.deploymentadmin.spi;version=""[1.0,2)"",org.osgi.se
 rvice.event;version=""[1.2,2)"",org.osgi.service.log;version=""[1.3,2)"",
 org.osgi.service.packageadmin;version=""[1.2,2)""
",Any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-24 14:52:48.415,,,no_permission,,,,,,,,,,,,240204,,,Tue May 28 10:07:18 UTC 2013,,,,,,0|i00yfr:,3511,,,,,,,,24/Apr/13 14:52;marrs;Review and fix for the next release.,28/May/13 10:07;marrs;Has been fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] misleading logging on first immediate component getService call,FELIX-3676,12608723,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Sep/12 00:34,20/Nov/12 10:58,14/Mar/19 02:48,26/Sep/12 16:33,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Currently we go into a locked block and issue a misleading info level log

getService did not win collecting dependencies, try creating object anyway.

This should be debug level, and we should avoid going into the locked block if the implementation object is already created.  Testing the implementation object rather than useCount should fix it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:14.485,,,no_permission,,,,,,,,,,,,253495,,,Tue Nov 20 10:58:14 UTC 2012,,,,,,0|i0dnvr:,77798,,,,,,,,26/Sep/12 16:33;djencks;rev 1390590,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] NPE shutting down a component due to service already removed,FELIX-3675,12608722,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,22/Sep/12 00:31,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:24,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Stack trace looks like this:

>Stack Dump = java.lang.NullPointerException
>	at org.apache.felix.scr.impl.helper.BindMethod.getParameters(BindMethod.java:610)
>	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:233)
>	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
>	at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:611)
>	at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:492)
>	at org.apache.felix.scr.impl.manager.DependencyManager.invokeUnbindMethod(DependencyManager.java:1276)
>	at org.apache.felix.scr.impl.manager.DependencyManager.unbind(DependencyManager.java:1131)
>	at org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:970)
>	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:274)
>	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:147)
>	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Active.ungetService(AbstractComponentManager.java:1697)
>	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:692)


I think that one thread is ungetting a service supplied by a DS component, and another thread is removing one of the dependencies of the DS component.  The shutdown thread (a) gets all the service references and then (b) goes through and tries to unbind them.  The parameter info for a service reference can be removed if another thread removes the service reference between (a) and (b). ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.461,,,no_permission,,,,,,,,,,,,249091,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0a4pb:,57035,,,,,,,,"16/Oct/12 18:23;djencks;Original NPE fixed in rev 1381408.  There are a couple more opportunities for problems in update and unbind methods, such as

java.lang.NullPointerException
>	at org.apache.felix.scr.impl.helper.BindMethod.getParameters(BindMethod.java:610)
>	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:233)
>	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
>	at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:611)
>	at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:492)
>	at org.apache.felix.scr.impl.manager.DependencyManager.invokeUnbindMethod(DependencyManager.java:1276)
>	at org.apache.felix.scr.impl.manager.DependencyManager.unbind(DependencyManager.java:1131)
>	at org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:970)
>	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:274)
>	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:147)
>	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Active.ungetService(AbstractComponentManager.java:1697)
>	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.ungetService(ImmediateComponentManager.java:692)

these should be fixed in r1398912.",18/Oct/12 06:24;djencks;fixed,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential Concurrent Modification Exception when a bundle is stopped,FELIX-3672,12608439,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,20/Sep/12 12:49,04/Feb/13 12:33,14/Mar/19 02:48,20/Sep/12 13:03,ipojo-core-1.8.2,,,,,,ipojo-core-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"There is a potential CME when a bundle declaring instances is stopped.

The exception we see in the logs is: -
31.07.2012 14:54:10.281 *ERROR* [FelixDispatchQueue] org.apache.felix.ipojo FrameworkEvent ERROR (java.util.ConcurrentModificationException) java.util.ConcurrentModificationException
at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
at java.util.HashMap$KeyIterator.next(HashMap.java:828)
at org.apache.felix.ipojo.InstanceCreator.removeInstancesFromBundle(InstanceCreator.java:117)
at org.apache.felix.ipojo.Extender.closeManagementFor(Extender.java:147)
at org.apache.felix.ipojo.Extender.bundleChanged(Extender.java:129)


The instance deletion is not protected against concurrent access.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,294008,,,Thu Sep 20 13:03:42 UTC 2012,,,,,,0|i0vref:,183412,,,,,,,,20/Sep/12 13:03;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ControlServlet.deviceToJSON,FELIX-3669,12607908,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,evgeni,evgeni,17/Sep/12 14:27,05/Jan/15 09:47,14/Mar/19 02:48,30/Sep/12 10:34,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,"I got that exception with a click on ""Search for UPnP Devices"" after WebConsole UPnP plug-in bundle restart. The stack trace is:
java.lang.NullPointerException
	at org.apache.felix.webconsole.plugins.upnp.internal.ControlServlet.deviceToJSON(ControlServlet.java:275)
	at org.apache.felix.webconsole.plugins.upnp.internal.ControlServlet.deviceTreeToJSON(ControlServlet.java:241)
	at org.apache.felix.webconsole.plugins.upnp.internal.ControlServlet.doPost(ControlServlet.java:147)
	at org.apache.felix.webconsole.plugins.upnp.internal.WebConsolePlugin.doPost(WebConsolePlugin.java:102)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:815)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:493)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:418)",,,,,,,,,,,,,,,,,,,,17/Sep/12 14:28;evgeni;NPE_in_ControlServlet.deviceToJSON;https://issues.apache.org/jira/secure/attachment/12545419/NPE_in_ControlServlet.deviceToJSON,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-30 10:34:30.949,,,no_permission,,,,,,,,,,,,294028,,,Mon Jan 05 09:47:47 UTC 2015,,,,,,0|i0vvqv:,184116,,,,,,,,17/Sep/12 14:28;evgeni;Initial proposal for the fix.,30/Sep/12 10:34;v_valchev;Fixed in rev.1391982,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when uninstalling a bundle,FELIX-3666,12607616,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,cziegeler,cziegeler,14/Sep/12 11:50,06/Jun/13 15:34,14/Mar/19 02:48,07/Dec/12 11:47,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"When uninstalling a bundle from the bundle list, a NPE in the framework occurs - I think this starts to happen with framework 4.0.3, but I think this is not a problem of the framework but a bug in the web console.

This is the stack trace:
14.09.2012 13:44:54.858 *INFO* [0:0:0:0:0:0:0:1%0 [1347623094009] POST /system/console/bundles/108 HTTP/1.1] servletengine Servlet threw exception:  java.lang.NullPointerException
	at org.apache.felix.framework.PackageAdminImpl.getBundleType(PackageAdminImpl.java:112)
	at org.apache.felix.webconsole.internal.core.BundlesServlet.isFragmentBundle(BundlesServlet.java:715)
	at org.apache.felix.webconsole.internal.core.BundlesServlet.doPost(BundlesServlet.java:358)

Although the bundle is uninstalled, the web console tries to find out whether the bundle is a fragment to report a status in the json. I think this doesn't make sense for an uninstalled bundle",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-17 07:58:22.542,,,no_permission,,,,,,,,,,,,294009,,,Thu Jun 06 15:34:56 UTC 2013,,,,,,0|i0vrev:,183414,,,,,,,,"17/Sep/12 07:58;fmeschbe;I think this is a bug in the framework, though.

The PackageAdmin.isBundleType is defined to throw an IllegalArgumentException ""If the specified Bundle was not created by the same framework instance that registered this PackageAdmin service"". I would assume calling this method on an uninstalled bundle should just return the information because it basically just accesses the bundle headers which must remain available after the bundle has been uninstalled.

In fact the PackageAdminImpl.isBundleType does

   bundle.adapt(BundleRevision.class))

which will return null if the bundle is uninstalled. Instead it should do

   bundle.adapt(BundleRevisionImpl.class))

which never returns null and thus still provides access to the headers.","17/Sep/12 14:23;cziegeler;Ok, I agree to your conclusion - however the web console shouldn't call into the framework at all if it has uninstalled a bundle","17/Sep/12 14:31;rickhall;So, should we clone this bug for framework too?",17/Sep/12 16:28;fmeschbe;You are right. I have created FELIX-3670 for the framework.,21/Sep/12 14:31;cziegeler;I've changed the code to only check for fragment if the bundle has not the state uninstalled,07/Dec/12 10:26;fmeschbe;I think the fix is incomplete: It should be applied closer to the actual NPE cause and to also properly locate the workaround.,07/Dec/12 11:47;fmeschbe;Done in Rev. 1418285 moving the framework bug (FELIX-3670) workaround to the isFragment method.,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Java Runtime in the System Information tab appears as 'null(build null)' in Skelmir CEE-J VM,FELIX-3663,12607459,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,v_valchev,p.koev,p.koev,13/Sep/12 13:37,06/Jun/13 15:34,14/Mar/19 02:48,30/Sep/12 10:45,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,If the 'java.runtime.name' and 'java.runtime.version' are not set (they are not in the mandatory list of properties http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#getProperties%28%29) the Java Runtime information may appear as 'null (build null)'. Perhaps this can be changed to 'n/a' or something else that looks a little bit better.,Skelmir CEE-J VM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-30 10:45:14.812,,,no_permission,,,,,,,,,,,,294029,,,Thu Jun 06 15:34:56 UTC 2013,,,,,,0|i0vvr3:,184117,,,,,,,,30/Sep/12 10:45;v_valchev;Fixed in rev.1391985,06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] Share the method objects among all the dependency managers and component managers for the same class,FELIX-3659,12606536,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,djencks,djencks,07/Sep/12 06:59,20/Nov/12 10:58,14/Mar/19 02:48,29/Sep/12 01:05,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"If you have configuration-based components or a component factory, all the related component managers can share the activate/modify/deactivate/bind/updated/unbind methods since they are all from the same class.  This will at least reduce the size of debug logging as you only need to find the methods once :-)",,,,,,,,,,,,FELIX-3569,,,,,,,,07/Sep/12 07:13;djencks;FELIX-3659.diff;https://issues.apache.org/jira/secure/attachment/12544178/FELIX-3659.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:14.42,,,no_permission,,,,,,,,,,,,246095,,,Tue Nov 20 10:58:14 UTC 2012,,,,,,0|i07han:,41568,,,,,,,,"07/Sep/12 07:05;djencks;I think ComponentMetadataTest and the validation for duplicate reference names is wrong.  The spec says names have to be unique or it's an error, so I think we should fail validation in this case.  A couple of tests had duplicate reference names and this no longer works.

spec 4.3 112.4.8: This name is local to the component and can be used to locate a bound service of this reference with one of the locateService methods of ComponentContext. Each reference element within the component must have a unique name. This name attribute is optional. The default value of this attribute is the value of the interface attribute of this element. If multiple reference elements in the component use the same interface name, then using the default value for this attribute will result in duplicate reference names. In this case, this attribute must be specified with a unique name for the reference to avoid an error.",07/Sep/12 07:13;djencks;Attaching a diff since this is a pretty big change and it hasn't been discussed a lot.  It's pretty straightforward though.,29/Sep/12 01:05;djencks;No apparent problems from the implementation,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] disableing a component that is a dependency of another results in an IllegalStateException,FELIX-3658,12606521,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,07/Sep/12 02:33,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:54,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"If A refers to B and you disable B, then A gets notified and releases its dependency so B ungetService gets called.  However the B state has already changed to Disabled so the ungetService falls through to State which throws an IllegalStateException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.529,,,no_permission,,,,,,,,,,,,246093,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i07ha7:,41566,,,,,,,,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[DS] ServiceFactory problems,FELIX-3657,12606513,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,07/Sep/12 00:27,20/Nov/12 10:58,14/Mar/19 02:48,29/Sep/12 01:04,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Three problems:
1. service factory getService doesn't fetch the dependencies first
2. dependencyManager serviceRemoved should remove the reference from the dependency map, not unget service which is called from many other places
3. dependencyManagers are shared among all instances created by a ServiceFactoryComponentManager, so they shouldn't ever have a reference to the implementation object, it should be passed in.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:14.183,,,no_permission,,,,,,,,,,,,246092,,,Tue Nov 20 10:58:14 UTC 2012,,,,,,0|i07h9z:,41565,,,,,,,,07/Sep/12 00:43;djencks;rev r1381825 fixes the first two problems.  ,"07/Sep/12 04:53;djencks;third problem fixed in r1381866.

I made the various calls to bind/unbind/update from the service changed methods go through the component manager so that the component manager could apply them to all the instances it manages.","29/Sep/12 01:04;djencks;would be nice to have some tests, but writing them for factory components requires creating a bunch of bundles in the tests.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Define the ""@Reference"" annotation on class level without a ""referenceInterface"" parameter.",FELIX-3653,12606011,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,schlegel11,schlegel11,03/Sep/12 16:51,07/Dec/12 10:25,14/Mar/19 02:48,04/Sep/12 18:01,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,,SCR Tooling,,,,,,0,,,,,,"If there is no ""referenceInterface"" parameter defined by the ""@Reference"" annotation on class level, the maven-scr-plugin throws a hard ""NullPointerException"" instead of a normal error log ""SCR Descriptor parsing had failures"".

StackTrace:

Execution default-cli of goal org.apache.felix:maven-scr-plugin:1.8.0:scr failed. NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.8.0:scr (default-cli): Execution default-cli of goal org.apache.felix:maven-scr-plugin:1.8.0:scr failed.
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.apache.felix:maven-scr-plugin:1.8.0:scr failed.
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:110)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.codehaus.plexus.classworlds.realm.Entry.matches(Entry.java:98)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.getImportClassLoader(ClassRealm.java:140)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClassFromImport(ClassRealm.java:359)
	at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:38)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:244)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:230)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClassFromImport(ClassRealm.java:365)
	at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:38)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:244)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:295)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.apache.felix.scrplugin.helper.Validator.validateReference(Validator.java:403)
	at org.apache.felix.scrplugin.helper.Validator.validate(Validator.java:189)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:256)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:217)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-04 18:01:52.389,,,no_permission,,,,,,,,,,,,246094,,,Tue Sep 04 18:01:52 UTC 2012,,,,,,0|i07haf:,41567,,,,,,,,"04/Sep/12 18:01;cziegeler;Thanks for reporting, i've fixed this in trunk",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove ct.workaround property and support,FELIX-3649,12605941,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,03/Sep/12 02:11,20/Nov/12 10:58,14/Mar/19 02:48,03/Sep/12 03:08,,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),Specification compliance,,,,,0,,,,,,"To pass an earlier CT the configuration property ds.ctworkaround has been introduced in FELIX-2526.

The CT bug  expecting a writable Dictionary has been fixed in the mean time. So for this part, the work around is not required any longer.

The second reason for the workaround is the CT creating configurations bound to the test class bundle and thus not applicable to the target bundle providing the test components. The spec has been updated for multi-location binding but kept the original single-bundle location binding mechanism and thus our implementation is correct when regular bundle location binding is used in the tests",,,,,,,,,,,,,,FELIX-2526,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246035,,,Tue Nov 20 10:58:18 UTC 2012,,,,,,0|i07gnr:,41465,,,,,,,,03/Sep/12 03:08;fmeschbe;Remove the ds.ctworkaround property support in Rev. 1380118,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A component declared with DS 1.0 or DS 1.1 namespace must fail validation if Reference.updated attribute is declared,FELIX-3648,12605939,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,03/Sep/12 01:43,20/Nov/12 10:58,14/Mar/19 02:48,03/Sep/12 03:00, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),Specification compliance,,,,,0,,,,,,"DS 1.2 introduces the updated attribute to the service reference to call a method if a bound service has been updated. The specification mandates to fail descriptor validation if the updated method is declared on a DS 1.0 or DS 1.1 descriptor.

The implementation currently just logs a warn level message and otherwise accepts the declaration. This must be modified to fail validation.

NB: A component declared for DS 1.1-felix also accepts the updated declaration since we introduced that functionality with FELIX-1893.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246022,,,Tue Nov 20 10:58:13 UTC 2012,,,,,,0|i07g1z:,41367,,,,,,,,"03/Sep/12 03:00;fmeschbe;Fixed in Rev. 1380117.

Now, validation fails if a declaration namespaced with DS 1.0 or DS 1.1 declares the updated attribute on the Reference element.

Previously we only logged a WARN level message and ignored the attribute. To be spec compliant the attribute must not be present and thus validation must fail.

While this may theoretically break existing components, which previously worked, I think it is better to be specification compliant. Particularly since the updated attribute was ignored before and had no value anyway and thus would probably not be declared any way.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component modification must continue if modify method throws,FELIX-3647,12605937,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,03/Sep/12 01:11,20/Nov/12 10:58,14/Mar/19 02:48,03/Sep/12 02:56, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),Specification compliance,,,,,0,,,,,,"If the modify method of a Component throws an exception (and thus fails) the component modification must continue as if the modify method call succeeded; just an error message must be logged.

Currently, the component is deactivated and reactivated in this case thus being non-spec compliant

(See Section 112.5.13, Modified Method in the Compendium R 4.3 specification)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246052,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i07h1b:,41526,,,,,,,,"03/Sep/12 02:56;fmeschbe;Fixed in Rev. 1380116 by passing a non-null MethodResult to be used if the called method throws.

Thus null is only returned from trying to call the modified method if no such method exists and thus the regular deactivation-activation cycle has to be used.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractComponent.disposeInternal ignores reason,FELIX-3646,12605934,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,03/Sep/12 00:01,20/Nov/12 10:58,14/Mar/19 02:48,03/Sep/12 01:04,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),Specification compliance,,,,,0,,,,,,"Probably due to some refactoring work for concurrency issues, the AbstractComponentManager.disposeInternal currently ignores the passed reason thereby causing the component to be destroyed with the wrong reason (unconditionally DEACTIVATION_REASON_DISPOSED; see Satisfied.dispose).

This should be modifed such that the State.dispose method also takes the disposal/deactivation reason to be passed to the deactivate method (similar to the State.deactivate method)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246042,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i07gzr:,41519,,,,,,,,03/Sep/12 01:04;fmeschbe;Fixed in Rev. 1380104 adding the reason parameter to the State.dispose base and overwritten methods.,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR could not obtain lock in 5000 ms,FELIX-3645,12605895,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,pderop,pderop,02/Sep/12 13:44,28/Nov/12 07:15,14/Mar/19 02:48,28/Nov/12 05:51,,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I finally made an integration test and committed it in the trunk.
This test sounds to reproduce the problem described in http://www.mail-archive.com/dev@felix.apache.org/msg26360.html.

the test contains the following files:

src/test/resources/integration_test_component_concurrency.xml
src/test/java/org/apache/felix/scr/integration/ComponentConcurrencyTest.java
src/test/java/org/apache/felix/scr/integration/components/concurrency/A.java
src/test/java/org/apache/felix/scr/integration/components/concurrency/B.java
src/test/java/org/apache/felix/scr/integration/components/concurrency/C.java
src/test/java/org/apache/felix/scr/integration/components/concurrency/AFactory.java
src/test/java/org/apache/felix/scr/integration/components/concurrency/CFactory.java

I also slightly modified src/test/java/org/apache/felix/scr/integration/ComponentTestBase.java
in order to use the apache log service, and also to declare the new package from org/apache/felix/scr/integration/components/concurrency.

The test does the following:

A optionally depends on B (dynamic=true, cardinality=0..N)
B depends on C

A is a factory component and is created by the AFactory class, in an infinite loop and in a dedicated thread.
C is also a factory component and is created/disposed for ever, by the CFactory class.

the integration test uses the log service in order to track logged errors, and runs 30 seconds.
If after 30 seconds, some errors are detected, then the test fail.

It seems that we have many exceptions when the test fail, which I did not reproduced so far. (see many IllegalMonitorState Exceptions).

The initial exception discussed from the post in the @dev list is also reproduced.
For example, I attached to this post my target/failsafe-reports/TEST-org.apache.felix.scr.integration.ComponentConcurrencyTest.xml, when the problem takes place.

Please take a look starting at line 951, as well as at the corresponding dumpstack at line 713, and also the ""Locking activity before IllegalMonitorStateException"" log, line 887.

Hope this will help.
/pierre


","linux fc16, bipro, Java(TM) SE Runtime Environment (build 1.6.0_32-b05)
",,,,,,,,,,,,,,,,,,,02/Sep/12 13:45;pderop;TEST-org.apache.felix.scr.integration.ComponentConcurrencyTest.xml;https://issues.apache.org/jira/secure/attachment/12543477/TEST-org.apache.felix.scr.integration.ComponentConcurrencyTest.xml,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-05 22:19:17.341,,,no_permission,,,,,,,,,,,,246056,,,Wed Nov 28 07:15:34 UTC 2012,,,,,,0|i07h27:,41530,,,,,,,,"05/Sep/12 22:19;djencks;I made a lot of changes and think I have this problem solved.

I think your integration test can produce some expected errors and warnings as services disappear between the time we think a component is satisfied and when we actually get the service from the service reference.  Felix logs an error in this case, and we do some logging too.  So I modified the test to ignore the ""expected"" errors due to this.

I also moved the very useful logging code into the base itest so I could use it for all the other problems I was having :-)

The current state of the code is that we release all locks (including read locks) when registering the service and when collecting dependencies for a component instance.  Then we take a write lock to actually create the component instance using these collected dependencies.

I'm storing the collected dependencies in a map in AbstractComponentManager.  This now holds most of the state for the dependency managers.  I think we could move the rest of the state into this map and make the bind/unbind/updated methods even more permanent and share the dependency managers between ImmediateComponentManagers for different configurations for the same Component.","05/Sep/12 22:26;fmeschbe;Sorry, your refactoring broke functionality around service binding.

This is manifest in a CT test failure: The test declares a DS 1.0 component. DS 1.0 only allows the Service instance or the ServiceReference as an argument to the bind method. The test component, though has a method taking the Service plus a Map (service props). The test expects the component to *not* register because the bind method is not found.

The implementation (in the BindMethod) also correctly analyzes the situation and logs, that an appropriate bind method cannot be found. But later the DependencyManager.bind(Map) method just does a BindMethod.invoke and ignores the result. Thus the DependencyManager does not pass back the situation of not being able to call a missing bind method and thus the component is activated, where it shouldn't.

I would assume the DependencyManager.bind(Map) method must record whether the bind method can be called or not as it was before:

                    // success is if we have the minimal required number of services bound
                    if ( invokeBindMethod( refs[index] ) )
                    {
                        // of course, we have success if the service is bound
                        success = true;
                    }
","05/Sep/12 23:04;djencks;The functionality you describe seems reasonable but I can't find support for it in the DS 1.0 or 1.2 specs.  All I see is 

ds 1.0 112.3.1 If the method is not found or the found method is not declared protected or public, SCR must log an error message with the Log Service, if present, and ignore the method.

ds 1.2 112.3.2  If no suitable method is located, SCR must log an error message with the Log Service, if present, and there will be no bind, updated, or unbind notification.

Assuming that the cts is correct I would think we could detect this situation in initBindMethods and put the component into a state where we wouldn't try to do anything with it?",05/Sep/12 23:20;djencks;I think I restored the previous behavior.... we may want to save arguing with the CTS till later :-),"05/Sep/12 23:26;fmeschbe;Cool. Thanks. So I will rerun.

Anyway, I already started arguing ;-)",05/Sep/12 23:44;fmeschbe;Just got the CT to pass.,28/Nov/12 05:51;djencks;this was actually fixed in 1.6.2,28/Nov/12 07:15;fmeschbe;Thanks for the update. So I close this (as the release is out already) and have updated the changelog in Rev. 1414557,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SCR ""need write lock"" assertion error",FELIX-3639,12605064,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,pderop,pderop,27/Aug/12 12:24,20/Nov/12 10:58,14/Mar/19 02:48,05/Sep/12 21:32,,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"This issue is related to the post http://www.mail-archive.com/dev@felix.apache.org/msg26360.html.

Initially, the post was about an apparent deadlock, where SCR can't obtain its state lock timely.
But after having added some tracking code in SCR, we came across another (probably different) problem,
where the ""need write lock (createComponent)"" assertion fails from the ImmediateComponentManager.createComponent() method.

In order to see the full stacktrace, I have modified the ImmediateComponentManager.createComponent method with a log, like this:

    protected boolean createComponent()
    {
        if ( !isWriteLocked() )
        {
            log(LogService.LOG_ERROR, ""need write lock (createComponent)"", new Object[0], new Exception(""stacktrace"")); throw new IllegalStateException( ""need write lock (createComponent)"" );
        }
        ...
(I just added a log with a ""stacktrace"" exception, just before throwing the illegal state).

I have attached the full log to this issue, with ds.loglevel set to DEBUG.
Please take a look at line line 8143, where the assertion fails.

It's difficult to explain the whole context, but I will try to give a quick overview:

1- the ""sipagent"" component is declared like this (we are using bnd DS annotations):

@Component(name=""sipagent"",provide={com.nextenso.mux.MuxHandler.class,SipAgent.class},properties=(""protocol=sip""),configurationPolicy=ConfigurationPolicy.require,factory=""composite.sip"")
public class SipAgentActivator extends SipAgent implements ServiceListener {
...
}

Here, the SipAgentActivator class actually extends SipAgent, which extends the MuxHandler abstract class, and the MuxHandler abstract class is provided as an OSGi service, using a ""protocol=sip"" service property.

The ""sipagent"" component is also declared as a factory component (with name=""composite.sip""), and another manager is in charge of instantiating the ""sipagent"" component instances (using ComponentFactory.newInstance() method). When the sip message load increases, more sipagent component instances are created.

2- when one ""sipagent"" component instance is created, there is another tracking ""agent"" component, which has a Reference on the MuxHandler interface, provided by the ""sipagent"" component. We use a ServiceReference. Here is how the ""agent"" component defines its reference:

@Component(name = ""agent"",  configurationPolicy = ConfigurationPolicy.require)
public class Agent {

  @Reference(service = MuxHandler.class, type = '*', unbind = ""unbindMuxHandler"")
  public void bindMuxHandler(final ServiceReference<?> muxHandler) {
    _logger.info(""bound mux handler (protocol=%s)"", muxHandler.getProperty(""protocol""));
    _serial.execute(new Runnable() {
      public void run() {
        if (!_started) {
          _pendingMuxHandlers.add(muxHandler);
        } else {
           ...

Here, the ""agent"" is tracking every mux handlers, but if the ""agent"" component is not yet started, then the mux handler is simply stored in the ""pendingMuxHandlers"" temporary list. The _serial object is a serial executor, used to avoid synchronized methods.

3- The ""agent"" component also have a Reference on a ""SessionManager"" service, and when this service is injected, then then the ""agent"" component decides to handle the sip MuxHandler stored in the pendingMuxHandlers temporary list. At this point, the ""agent"" gets the MuxHandler ServiceReference from the temporary list, and directly calls BundleContext.getService(ServiceReference), in order to get the pointer to the actual MuxHandler object.

But the BundleContext.getService method returns null, and internally, the ImmediateComponentManager.createComponent has throws an IllegalStateException because the writelock has not been aquired.

See stacktrace, starting from line 8143 (it is the log I have added in the ImmediateComponentManager.createComponent method):

2012-08-27 13:07:45,909 Processing-ThreadPool-10 ERROR osgi  - [sipagent] need write lock (createComponent)

java.lang.Exception: stacktrace
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:123)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$FactoryInstance.getService(AbstractComponentManager.java:1570)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.getService(ImmediateComponentManager.java:632)
	at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:308)
	at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:219)
	at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:310)
	at org.apache.felix.framework.Felix.getService(Felix.java:3420)
	at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:468)
	at com.nextenso.agent.Agent$9.run(Agent.java:427)
	at com.alcatel.as.service.concurrent.SerialExecutor.execute(SerialExecutor.java:41)
	at com.nextenso.agent.Agent.bindSessionManager(Agent.java:362)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:226)
	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
	at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:603)
	at org.apache.felix.scr.impl.helper.BaseMethod$NotResolved.invoke(BaseMethod.java:560)
	at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:484)
	at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1086)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:328)
	at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:170)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3275)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
	at com.alcatel.as.util.osgi.DependencyActivatorHelper.registerService(DependencyActivatorHelper.java:209)
	at com.alcatel.as.session.distributed.mgr.Engine$7.run(Engine.java:1383)
	at com.alcatel.as.service.concurrent.impl.Helper.runTask(Helper.java:54)
	at com.alcatel.as.service.concurrent.impl.QueueExecutor$1.run(QueueExecutor.java:165)
	at com.alcatel.as.service.concurrent.impl.SerialQueue.run(SerialQueue.java:80)
	at alcatel.tess.hometop.gateways.concurrent.ThreadPool$3.run(ThreadPool.java:286)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:679)


Is the attached log enough with ds.loglevel=DEBUG, or do you need some more informations ?
","openjdk version ""1.6.0-OpenSCG-Build-24"", on Red Hat Enterprise Linux Server release 5.4 (Tikanga)
",,,,,,,,,,,,,,,,,,,27/Aug/12 12:25;pderop;NeedWriteLock.log;https://issues.apache.org/jira/secure/attachment/12542594/NeedWriteLock.log,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-28 00:34:21.042,,,no_permission,,,,,,,,,,,,246072,,,Tue Nov 20 10:58:14 UTC 2012,,,,,,0|i07gnj:,41464,,,,,,,,"27/Aug/12 12:25;pderop;Here is the log file, using ds.loglevel=DEBUG","28/Aug/12 00:34;djencks;I didn't see how to write a good test yet, but I think I see what is going on and I think I fixed it in rev 1377921.  Could you try it out?  I'd expect the error you saw to be very consistent so if its fixed it should be obvious.","28/Aug/12 09:38;pderop;Thank your David, your fix is working fine and I don't have the ""need write lock"" assertion error anymore.
I'm now going back to reproduce the initial deadlock issue.

Should I close this issue, or will you do it ?
",28/Aug/12 16:48;djencks;Seems to be fixed.,05/Sep/12 21:32;djencks;assign to me,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing package import for annotation default value,FELIX-3638,12604995,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,hwellmann,hwellmann,26/Aug/12 10:23,12/Jun/13 23:46,14/Mar/19 02:48,15/Jan/13 18:19,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"For the following annotation class in an OSGi bundle

@Retention(RetentionPolicy.RUNTIME)
@Target({ ElementType.TYPE, ElementType.METHOD })
public @interface Transactional
{
    @Nonbinding Class<? extends Annotation>[] qualifier() default Any.class;
}

maven-bundle-plugin fails to generate the package import for javax.enterprise.inject.Any, the default value of the annotation method.

At runtime, this leads to a non-descriptive exception 

Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy
        at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:673) ~[na:1.7.0_04]
        at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:480) ~[na:1.7.0_04]
        at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:306) ~[na:1.7.0_04]
        at java.lang.reflect.Method.getDefaultValue(Method.java:726) ~[na:1.7.0_04]
        at sun.reflect.annotation.AnnotationType.<init>(AnnotationType.java:117) ~[na:1.7.0_04]
        at sun.reflect.annotation.AnnotationType.getInstance(AnnotationType.java:84) ~[na:1.7.0_04]
        at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:221) ~[na:1.7.0_04]
        at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:88) ~[na:1.7.0_04]
        at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:70) ~[na:1.7.0_04]
        at java.lang.Class.initAnnotationsIfNecessary(Class.java:3089) ~[na:1.7.0_04]
        at java.lang.Class.getDeclaredAnnotations(Class.java:3077) ~[na:1.7.0_04]

which is hard to debug.

The problem can be solved by adding an explicit Import-Package element to the plugin configuration, but I don't see why the plugin can't figure this out by itself.

The example is taken from Apache Deltaspike. ",,,,,,,,,,,,,,,,,,,,26/Aug/12 10:27;hwellmann;FELIX-3638.zip;https://issues.apache.org/jira/secure/attachment/12542445/FELIX-3638.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-07 19:47:07.153,,,no_permission,,,,,,,,,,,,255819,,,Tue Jan 15 18:19:38 UTC 2013,,,,,,0|i0fv4n:,90641,,,,,,,,"26/Aug/12 10:27;hwellmann;Test case: Unpack attachment, run mvn install and check that javax.enterprise.inject is missing from Import-Package.",07/Nov/12 19:47;mcculls;Logged upstream as https://github.com/bndtools/bnd/issues/292 (bnd is the library that analyzes the class files and computes the generated imports) ,"15/Jan/13 18:19;mcculls;Fixed in trunk by picking up the latest bndlib code and deployed in the latest maven-bundle-plugin 2.4.0-SNAPSHOT. This plugin snapshot is available from the https://repository.apache.org/content/repositories/snapshots repository, or you can build the plugin locally. I can verify that the attached test project now produces the javax.enterprise.inject in the Import-Package.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DS bind concurrency problem,FELIX-3637,12604877,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,24/Aug/12 16:32,20/Nov/12 10:58,14/Mar/19 02:48,05/Oct/12 18:45,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"when two threads send events announcing services, the following can happen:

- thread1 sees the state as ""Unsatisfied"" so tries to activate the component, changing the state to ""Active"" while we try to complete activation. This thread gets to the point of determining that there is another missing dependency but does not yet change the state back to ""Unsatisified""
- thread 2 (with the missing service) sees the state as Active so it goes on to consider whether it should rebind the ""new"" service.  If the dependency is static and reluctant, it won't.  In other cases, since the instance is not actually created, we'd get other problems. 
- thread 1 changes the state back to ""Unsatisfied"" and exits.

This is hard to demonstrate with just DS services since they tend to run on one thread.  With blueprint services that are dependencies to a DS service, it is easier to see since each blueprint bundle has its services started asynchronously on a separate thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:18.677,,,no_permission,,,,,,,,,,,,244045,,,Tue Nov 20 10:58:18 UTC 2012,,,,,,0|i05fif:,29610,,,,,,,,05/Oct/12 18:45;djencks;This particular concurrency problem was solved although there are others.,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using @Service without @Component should log a warning,FELIX-3636,12604859,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,kwin,kwin,24/Aug/12 15:06,12/Mar/14 08:55,14/Mar/19 02:48,25/Jan/13 12:51,maven-scr-plugin-1.8.0,,,,,,maven-scr-plugin-1.10.0,scr ant task 1.4.0,scr generator 1.4.0,,,,,SCR Tooling,,,,,,0,,,,,,"If I use the annotation @Service without @Component no entry in the serviceComponents.xml will be generated and no warning is given out during build from the maven-scr-plugin.

You should either implicitly generate a component if @Service is given without @Component or an error should be logged during build, since using @Service without @Component right now has no effect at all and this is never intended by someone using @Service.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-28 19:50:29.509,,,no_permission,,,,,,,,,,,,307354,,,Fri Jan 25 12:51:03 UTC 2013,,,,,,0|i1avrb:,271611,,,,,,,,"27/Aug/12 16:11;kwin;I may have found a usecase for using @Service without @Component: Components inheriting from that service would actually use that annotation. But then you should rather include @Component(componentAbstract=true) as well to make it explicit, that you don't want to have a component created from this service.","28/Aug/12 19:50;fmeschbe;The @Component annotation not only provides information about the component but is also used as a marker annotation: Only if @Component is provided will the SCR plugin pick up the class (at least, this is how was done initially)","10/Sep/12 15:02;kwin;If you provide @Service without @Component it has an influence on the scrinfo.xml but not on the generated serviceComponents.xml. Only the latter is evaluated by the Felix SCR. That is confusing, because usually this is not intended by the developer. Rather he implicitly assumes, that the appropriate component is automatically generated, even if he only has @Service specified.

I propose the following change:
If @Service is given without @Component a warning should be given out by the maven-scr-plugin. That still assures backward compatibility for the cases, where @Service was deliberately used without @Component(see comment 1). In my mind this is a very rare use case and maybe in the future using one annotation without the other should rather lead to an error. The best solution would be, to make it configurable, whether that issue should be given out as error or as warning (default).","23/Jan/13 14:53;cziegeler;Unfortunately, we really have a mismatch here: as Felix wrote @Component is the marker, only classes with this annotation should be processed - however when the super classes of a component are processed, it's not checked whether the class have a @Component annotation and @Service, @Property, and @Reference are always processed. This shouldn't be the case, but it seems we always had this in the plugin ,so for compatibility we can't change this.

I wouldn't allow classes which have a @Service but no @Component to create a component.

So I guess, creating a warning if the project contains a class with @Service, @Property, or @Reference but no @Component is the only thing we can do
",25/Jan/13 12:51;cziegeler;A warning is now logged,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unnecessary processing in DirectoryWatcher,FELIX-3635,12604628,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gawor@mcs.anl.gov,gawor@mcs.anl.gov,23/Aug/12 15:51,17/Mar/15 06:58,14/Mar/19 02:48,28/Aug/12 13:18,fileinstall-3.2.4,,,,,,fileinstall-3.2.6,,,,,,,File Install,,,,,,0,,,,,,"When a DirectoryWatcher is setup to only watch configuration files (e.g. *.cfg), on each scan findBundlesWithOptionalPackagesToRefresh() is called. Since only configuration can change - no bundles, there is no need to call findBundlesWithOptionalPackagesToRefresh(). And the findBundlesWithOptionalPackagesToRefresh() can be expensive since it goes through all bundles in the framework looking for optional imports that can be now satisfied.
",,,,,,,,,,,,,,,,,,FELIX-2667,,23/Aug/12 16:00;gawor@mcs.anl.gov;FELIX-3635.patch;https://issues.apache.org/jira/secure/attachment/12542144/FELIX-3635.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-28 13:18:55.057,,,no_permission,,,,,,,,,,,,246054,,,Wed Sep 19 11:16:21 UTC 2012,,,,,,0|i07h1z:,41529,,,,,,,,"23/Aug/12 16:00;gawor@mcs.anl.gov;Patch for this issue that only calls findBundlesWithOptionalPackagesToRefresh() if there were any actual bundles installed, modified, or updated.
","28/Aug/12 13:18;gnt;URL: http://svn.apache.org/viewvc?rev=1378126&view=rev
","19/Sep/12 11:16;weberjn;If run on JRE 7+ better use the Watch Service API instead of polling the directory in a thread:
https://blogs.oracle.com/thejavatutorials/entry/watching_a_directory_for_changes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
User Admin Plugin - no German translation,FELIX-3633,12604271,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,21/Aug/12 20:16,16/Mar/15 08:29,14/Mar/19 02:48,10/Mar/15 09:59,webconsole-useradmin-plugin-1.0.0,,,,,,webconsole-useradmin-plugin-1.0.2,,,,,,,Web Console,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,24/Oct/12 14:53;jeremias@apache.org;bundle_de.properties;https://issues.apache.org/jira/secure/attachment/12550633/bundle_de.properties,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-24 14:53:12.503,,,no_permission,,,,,,,,,,,,250777,,,Tue Mar 10 09:59:21 UTC 2015,,,,,,0|i0b1dz:,62337,,,,,,,,24/Oct/12 14:53;jeremias@apache.org;Here's a German translation. HTH. (CLA on file),05/Jan/15 10:01;v_valchev;deferring open issues for the next release,10/Mar/15 09:59;v_valchev;fixed in rev.1665428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Parsing of delimited strings in manifest parser collapses all consecutive escapes,FELIX-3632,12604266,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,rickhall,rickhall,21/Aug/12 19:38,30/Nov/12 03:57,14/Mar/19 02:48,30/Nov/12 03:57,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,Resolver,,,,,0,,,,,,Parsing of delimited strings in the manifest parser threats any number of consecutive backslash characters as a single character. We should let the backslash character fall through if it was escaped.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,292900,,,Fri Nov 30 03:57:06 UTC 2012,,,,,,0|i0sga7:,164115,,,,,,,,30/Nov/12 03:57;rickhall;Fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Packages exported by bundle are (re)-imported with incorrect version,FELIX-3630,12603586,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,mitaes,mitaes,15/Aug/12 13:54,12/Jun/13 23:46,14/Mar/19 02:48,07/Nov/12 19:49,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"Packages exported by bundle are (re)-imported with incorrect version using the bundle version instead of the package version.

I have created an example where the bundle is version 1.2.0-SNAPSHOT and the package-version of the exported package is 1.0.0 (via *packageinfo* file)

Resulting Manifest:
Manifest-Version: 1.0
Bnd-LastModified: 1345038828923
Build-Jdk: 1.6.0_31
Built-By: u056801
Bundle-Description: maven-bundle-plugin Import Package Test
Bundle-ManifestVersion: 2
Bundle-Name: Imports Test
Bundle-SymbolicName: com.mitaes.imports
Bundle-Version: 1.2.0.SNAPSHOT
Created-By: Apache Maven Bundle Plugin
Export-Package: com.mitaes.service;version=""1.0.0""
Import-Package: com.mitaes.service;version=""[1.2,2)""
Tool: Bnd-1.50.0
",,,,,,,,,,,,,,,,,,,,15/Aug/12 13:56;mitaes;importTest.zip;https://issues.apache.org/jira/secure/attachment/12541054/importTest.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-15 14:33:55.127,,,no_permission,,,,,,,,,,,,255818,,,Wed Nov 07 19:49:55 UTC 2012,,,,,,0|i0fv4f:,90640,,,,,,,,"15/Aug/12 13:56;mitaes;Attached sample project ""importTest.zip""",15/Aug/12 14:14;mitaes;Current workaround is to configure the version range for the package to be imported inside plugin configuration or linked bnd file.,"15/Aug/12 14:33;mcculls;The attached pom.xml has an additional execution of bundle:manifest which is tied to the 'process-classes' phase:

<executions>
  <execution>
    <id>bundle-manifest</id>
    <phase>process-classes</phase>
    <goals> 
      <goal>manifest</goal>
    </goals>
  </execution>
</executions>

This ends up creating a first-pass manifest under target/classes/META-INF/MANIFEST.MF which exports the package using the bundle version. The version appears to be added to the export by bnd, it isn't in the Export-Package instruction generated by the bundle plugin during this execution (see mvn clean process-classes -X). This is likely down to the slightly different approach taken by bundle:manifest (which analyzes an existing jar/directory using instructions as a guide) and bundle:bundle (which builds a fresh bundle based on the classpath and a set of instructions) - it looks like bnd's Builder takes package-level packageinfo versions into account, but bnd's Analyzer doesn't.

After this extra execution has completed the bundle packaging lifecycle kicks in and builds the bundle - once again mvn -X suggests that the bundle plugin doesn't add any specific versions to the default instructions, but the manifest we get back from bnd has the import range based on the interim manifest generated previously (with exports versioned using the bundle-version). However, the export now uses the packageinfo version.

I've tested this project with the latest maven-bundle-plugin 2.4.0-SNAPSHOT and the incorrect versions no longer appear, so it looks like this has been fixed in trunk.

As a workaround for 2.3.7 remove the above explicit execution of bundle:manifest (it is not required when you use bundle packaging) and you should get the expected results.","15/Aug/12 14:44;mitaes;Thanks Stuart, the tip of disabling the manifest execution did the trick.

I don't remember where I picked up the part with including the executions, it just has been this way in my projects until now. Will take more care about that in the future. If this does not qualify as major issue or issue at all you can adjust the severity.

Thanks and Kind Regards,
Michael","07/Nov/12 19:49;mcculls;As mentioned in previous comment, additional executions are now properly handled in trunk.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue of felix on android 4.1,FELIX-3626,12603166,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,orga,orga,13/Aug/12 02:34,03/Sep/12 16:19,14/Mar/19 02:48,03/Sep/12 12:23,,,,,,,framework-4.2.0,,,,,,,Bundle Repository (OBR),Felix Commons,Gogo Command,Gogo Runtime,Gogo Shell,,0,features,newbie,,,,"I am trying to put apache felix to android 4.1, but all default bundles can't be installed.
At first, I follow the tutorial ""http://felix.apache.org/site/apache-felix-framework-and-google-android.html"".
Using the ""felix-framework-4.0.3"" for android 4.1 emulator. because I want to port it to Nexus 7.
then I get the error as below:

Problem creating boot delegation class loader: java.lang.reflect.InvocationTargetException
Auto-deploy install: org.osgi.framework.BundleException: Unable to cache bundle: file:/data/felix/bundle/org.apache.felix.bundlerepository-1.6.6.jar - java.net.MalformedURLException: java.lang.IllegalStateException: Unknown protocol: file
Auto-deploy install: org.osgi.framework.BundleException: Unable to cache bundle: file:/data/felix/bundle/org.apache.felix.gogo.command-0.12.0.jar - java.net.MalformedURLException: java.lang.IllegalStateException: Unknown protocol: file
Auto-deploy install: org.osgi.framework.BundleException: Unable to cache bundle: file:/data/felix/bundle/org.apache.felix.gogo.runtime-0.10.0.jar - java.net.MalformedURLException: java.lang.IllegalStateException: Unknown protocol: file
Auto-deploy install: org.osgi.framework.BundleException: Unable to cache bundle: file:/data/felix/bundle/org.apache.felix.gogo.shell-0.10.0.jar - java.net.MalformedURLException: java.lang.IllegalStateException: Unknown protocol: file

It looks like all bundles can't be installed. Are there any suggestion about this?

update:
When add property ""felix.service.urlhandlers=false"", get another exception
Problem creating boot delegation class loader: java.lang.reflect.InvocationTargetException
gogo: MalformedURLException: Unknown protocol: bundle
java.net.MalformedURLException: Unknown protocol: bundle
	at java.net.URL.<init>(URL.java:184)
	at java.net.URL.<init>(URL.java:127)
	at java.net.URI.toURL(URI.java:1357)
	at org.apache.felix.gogo.shell.Shell.readScript(Shell.java:209)
	at org.apache.felix.gogo.shell.Shell.source(Shell.java:192)
	at org.apache.felix.gogo.shell.Shell.gosh(Shell.java:109)
	at java.lang.reflect.Method.invokeNative(Native Method)
	at java.lang.reflect.Method.invoke(Method.java:511)
	at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
	at org.apache.felix.gogo.shell.Activator.run(Activator.java:75)
	at java.lang.Thread.run(Thread.java:856)


Detail step:
1.download felix-framework-4.0.3 and ""osgi-android - felix 1.4, android SDK 1.0.zip"" and extract them.
2.do dx and aapt for jar files in felix-framework-4.0.3.
3.copy felix.sh from ""osgi-android - felix 1.4, android SDK 1.0"" to felix-framework-4.0.3
4.start emulator of android 4.1
5.push felix-framework-4.0.3 to android(/data/felix)
6.adb shell and cd to /data/felix
7.sh felix.sh

More info:
I have tried different versions of android and felix.
1.""osgi-android - felix 1.4, android SDK 1.0.zip""  works normally on android 4.1 with it bundles.
2. felix-framework-4.0.3 is work on android 4.03 and 2.3.3 



",felix 4.0.3 on android 4.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-13 08:08:11.932,,,no_permission,,,,,,,,,,,,249051,,,Mon Sep 03 16:19:13 UTC 2012,,,,,,0|i0a48v:,56961,,,,,,,,13/Aug/12 08:08;karlpauls;I'll have to look into it some more - i'll try to get to it asap but it might take a while,"03/Sep/12 09:29;orga;Hi, Is there any update about this issue?","03/Sep/12 11:36;karlpauls;I'm looking into it right now. I think I can see what is going on. They renamed and moved the internal default handlers for url which in turn makes them special cases where they used to be the same as custom handlers (as it is the case for all other vms). 

I'll try to get us a workaround. ","03/Sep/12 12:23;karlpauls;I added a workaround to trunk in r1380214. Can you please try it with the current trunk and close this issue if it works for you?

The problem is that starting with 4.1 on android the built-in handlers are renamed and moved -- hence, not following the normal pattern for url handler classnames. This makes us unable to for e.g., open file/http/ftp/https/jar urls. I'm trying to special case this situation and create the handlers myself if need be. Works for me for now.","03/Sep/12 16:17;orga;I give it a try on emulator. It seems worked and I got some debug message.
The log is for you reference. Thanks your help!

log
------------------------------------------------------
# sh felix.sh
Problem creating boot delegation class loader: java.lang.reflect.InvocationTargetException
DEBUG: WIRE: [3.0] osgi.wiring.package; (osgi.wiring.package=org.osgi.framework) -> [0]
DEBUG: WIRE: [3.0] osgi.wiring.package; (osgi.wiring.package=org.osgi.util.tracker) -> [0]
DEBUG: WIRE: [1.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.4.0)(!(version>=2.0.0))) -> [0]
DEBUG: WIRE: [1.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.service.log)(version>=1.3.0)(!(version>=2.0.0))) -> [2.0]
DEBUG: WIRE: [1.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.service.url)(version>=1.0.0)(!(version>=2.0.0))) -> [0]
DEBUG: WIRE: [2.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.felix.service.command)(status=provisional)(version>=0.10.0)(!(version>=1.0.0))) -> [3.0]
DEBUG: WIRE: [2.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.5.0)(!(version>=2.0.0))) -> [0]
DEBUG: WIRE: [2.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework.wiring)(version>=1.0.0)(!(version>=2.0.0))) -> [0]
DEBUG: WIRE: [2.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.service.packageadmin)(version>=1.2.0)(!(version>=2.0.0))) -> [0]
DEBUG: WIRE: [2.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.service.startlevel)(version>=1.1.0)(!(version>=2.0.0))) -> [0]
DEBUG: WIRE: [2.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.util.tracker)(version>=1.3.0)(!(version>=2.0.0))) -> [0]
DEBUG: DYNAMIC WIRE: [2.0] osgi.wiring.package; (osgi.wiring.package=org.apache.felix.bundlerepository) -> [1.0]
DEBUG: WIRE: [4.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.felix.service.command)(status=provisional)(version>=0.10.0)) -> [3.0]
DEBUG: WIRE: [4.0] osgi.wiring.package; (osgi.wiring.package=org.osgi.framework) -> [0]
DEBUG: WIRE: [4.0] osgi.wiring.package; (osgi.wiring.package=org.osgi.service.startlevel) -> [0]
DEBUG: WIRE: [4.0] osgi.wiring.package; (osgi.wiring.package=org.osgi.util.tracker) -> [0]
____________________________
Welcome to Apache Felix Gogo

g!  felix:lb
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (4.1.0.SNAPSHOT)
    1|Active     |    1|Apache Felix Bundle Repository (1.6.6)
    2|Active     |    1|Apache Felix Gogo Command (0.12.0)
    3|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
    4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
",03/Sep/12 16:19;orga;The workaround to trunk in r1380214 fixed this issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""officially"" upgrade scr to ds 1.2 from compendium 4.3",FELIX-3625,12602532,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,09/Aug/12 16:08,20/Nov/12 10:58,14/Mar/19 02:48,02/Sep/12 23:43,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"There aren't any api changes to ds 1.2 but there is a new schema, since we support ds 1.2 we should use the right versions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-02 23:40:20.69,,,no_permission,,,,,,,,,,,,246077,,,Tue Nov 20 10:58:13 UTC 2012,,,,,,0|i07h7j:,41554,,,,,,,,"02/Sep/12 23:40;fmeschbe;In Rev. 1380096 I removed the explicit notion of the imported DS API version. This version range is deduced from the exported API version and the ""provide:=true"" directive.",02/Sep/12 23:43;fmeschbe;I think we can resolve this issue,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Two dimensional array as argument to a method in a component,FELIX-3621,12601316,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,rdruilhe,rdruilhe,03/Aug/12 07:21,04/Feb/13 12:34,14/Mar/19 02:48,20/Sep/12 09:15,iPOJO-1.8.0,,,,,,ipojo-core-1.8.4,ipojo-manipulator-1.8.6,,,,,,iPOJO,,,,,,1,,,,,,"I recently tried to pass a two dimensional array to a private method but when I start my bundle into Felix, the factory of my component is created but not the instance. Note that the compilation does not warn me.

If I comment this code, there is no more problem. I tried using the maven-ipojo 1.8.0 and 1.9.0-SNAPSHOT, same problem.","Ubuntu 11.04, Java Sun 1.6.0_26, Felix 4.1.0-SNAPSHOT, Maven iPOJO Version 1.8.0",,,,,,,,,,,,,,,,,,,19/Sep/12 16:17;magnet;felix3621.patch;https://issues.apache.org/jira/secure/attachment/12545751/felix3621.patch,03/Aug/12 07:23;rdruilhe;test.zip;https://issues.apache.org/jira/secure/attachment/12539005/test.zip,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-09-09 08:49:36.153,,,no_permission,,,,,,,,,,,,252592,,,Thu Sep 20 14:41:04 UTC 2012,,,,,,0|i0cv7r:,73001,,,,,,,,03/Aug/12 07:23;rdruilhe;I made a simple to test to resume my words (see attachment zip for further details).,"09/Sep/12 08:49;clement.escoffier;I've reproduced and spotted the issue, it's a naming issue. The flag for the method is invalid.",19/Sep/12 16:17;magnet;A patch that solves the issue. ,"19/Sep/12 16:17;magnet;I've fixed the bug and ran some tests (more extensive than the attached testcase) and it seems to work.

As Clement said, it's a name mangling problem in the flag member of methods containing multi-dimensional arrays (two or higher). My patch keeps the current mangling scheme of using underscores (_'s) in place of array brackets, but since it now supports multi-dimensional arrays there can be 4, 6, 8, .. underscores in the flag name depending of the array's dimension.  Currently the manipulator does not depend on Common Utils or a similar library that has nice String utils so there's a ugly Stringbuilder concatenating underscores in the patch, but other than that it's pretty straightforward. I am too lazy to include unit tests for this, but in the worst case scenario it will work as bad as currently ;)

Maybe for inclusion in 1.9.0?","20/Sep/12 09:13;clement.escoffier;I just fixed the issue in trunk.
Was a bit more complex as it requires changing the manipulator and the runtime (as the id computation happens twice).

Could you check ?","20/Sep/12 14:41;magnet;Seems good to me, my own tests work fine. Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""IOException: Failed to delete repository.xml while trying to rename"" in maven-bundle-plugin",FELIX-3619,12601218,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,vburdejny,vburdejny,02/Aug/12 13:46,12/Jun/13 23:46,14/Mar/19 02:48,07/Jun/13 17:33,maven-bundle-plugin-2.3.6,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"The following problem has been found in console when parallel build was used (-T command line parameter):

[INFO] — maven-bundle-plugin:2.3.6:install (default-install) @ my-bundle —
[WARNING] Exception while updating local OBR: IOException
 org.apache.maven.plugin.MojoExecutionException: IOException
 at org.apache.felix.obrplugin.ObrUpdate.writeRepositoryXml(ObrUpdate.java:293)
 at org.apache.felix.obrplugin.ObrInstall.execute(ObrInstall.java:149)
 at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
 ...

'stderr' contains the following stacktrace:

java.io.IOException: Failed to delete c:\.m2\repository.xml while trying to rename C:\Users\User\AppData\Local\Temp\repository8243840781003249024.xml
 at org.codehaus.plexus.util.FileUtils.rename(FileUtils.java:2128)
 at org.apache.felix.obrplugin.ObrUpdate.writeRepositoryXml(ObrUpdate.java:288)
 ...

Full stacktraces are provided in the attachment.

I did not find any problems that it causes for the build, but I suspect that such problems might exist. The problem itself is (I suspect) a trivial race condition.

Cloned from http://jira.codehaus.org/browse/MNG-5321",,,,,,,,,,,,,,,,,,,,02/Aug/12 13:47;vburdejny;maven-repository-xml-issue.txt;https://issues.apache.org/jira/secure/attachment/12538907/maven-repository-xml-issue.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-07 17:33:08.797,,,no_permission,,,,,,,,,,,,307360,,,Fri Jun 07 17:33:08 UTC 2013,,,,,,0|i1avsn:,271617,,,,,,,,07/Jun/13 17:33;mcculls;Fixed in r1490744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Should not allow bundles to use generic cap/req headers for osgi.wiring.* namespaces,FELIX-3618,12600655,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,magnet,magnet,30/Jul/12 13:09,06/Feb/13 13:19,14/Mar/19 02:48,31/Jan/13 21:40,framework-4.0.3,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"I think I found a bug while I playing with 4.3's Bundle Capabilities.

I tried to convert a simple Export-Package to Provide-Capability.

Core specification 5.0, §3.3.3 defines the grammar for Provide-Compatibility headers:Provide-Capability ::= capability ( ',' capability )*
capability ::= name-space 
( ’;’ directive | typed-attr )*
name-space ::= symbolic-name
typed-attr ::= extended ( ’:’ type ) ’=’ argument
type ::= scalar | list
scalar ::= ’String’ | ’Version’ | ’Long’ 
|   ’Double’ 
list ::= ’List<’ scalar ’>’


With my interpretation of the spec:

Export-Package: com.test.api; version=""1.0.0""

becomes:

Provide-Capability: osgi.wiring.package; osgi.wiring.package=com.test.api; version:Version=1.0.0

where osgi.wiring.package is both the namespace and the attribute name for the package name. Please note that the namespace is mandatory.

This is consistent with the Require-Capability statement:
osgi.wiring.package; (&(osgi.wiring.package=com.test.api)(version>=1.0.0)(!(version>=2.0.0))) resolved by:
   osgi.wiring.package; com.test.api 1.0.0 from com.test.api [41]


If I use this header and install my bundle, using Felix 4.0.3 I get:

g! inspect c * 41
com.test.api [41] provides:
-------------------------------
osgi.wiring.bundle; com.test.api 1.0.0 [UNUSED]
osgi.wiring.host; com.test.api 1.0.0 [UNUSED]
osgi.wiring.package; com.test.api 1.0.0 required by:
   com.test.consumer [36]
osgi.wiring.package; com.test.api 1.0.0 [UNUSED]
g! 

Note that the same package is advised as exported *twice* by the bundle with only the first one wired.


Now, if I use Export-Package, it is exported just once as expected,
The only way with Provide-Capability to get it exported just once is to omit the namespace, as in:

Provide-Capability: osgi.wiring.package=com.test.api; version:Version=1.0.0

However, this is not compliant with the spec, since the namespace is mandatory.

Finally, a last test where the namespace osgi.wiring.package has no attributes or directives fail with a NullPointerException, it should probably be handled gracefully. 
Provide-Capability: osgi.wiring.package

Stacktrace:
g! start 62
ERROR: Unable to resolve 62.0 (java.lang.NullPointerException)
java.lang.NullPointerException
	at org.apache.felix.framework.BundleWiringImpl.<init>(BundleWiringImpl.java:270)
	at org.apache.felix.framework.StatefulResolver.markResolvedRevisions(StatefulResolver.java:650)
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:189)
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3819)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:944)
	at org.apache.felix.gogo.command.Basic.start(Basic.java:729)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-30 13:41:32.518,,,no_permission,,,,,,,,,,,,307361,,,Wed Feb 06 13:19:36 UTC 2013,,,,,,0|i1avsv:,271618,,,,,,,,"30/Jul/12 13:41;rickhall;Actually, the real bug here is that the framework shouldn't allow you to specify any osgi.wiring.* namespace in the generic cap/req model in the bundle manifest, since the spec doesn't allow that.

We need to put a check that will either ignore such cases or throw an installation exception...I'll have to check which is the correct response. Thanks.","31/Jan/13 21:40;rickhall;Applied a patch to fail installation of any bundles using the osgi.wiring namespace in their generic capabilities and/or requirements. Please close if you are satisfied, thanks.",06/Feb/13 13:19;magnet;Fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR Plugin: build failure on wildcard imports (e.g. java.util.*),FELIX-3606,12599970,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,wastl,wastl,24/Jul/12 09:52,31/Aug/12 14:18,14/Mar/19 02:48,31/Aug/12 14:12,maven-scr-plugin-1.7.4,,,,,,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,,SCR Tooling,,,,,,0,,,,,,"When running the SCR plugin on a class that imports using a wildcard import, classes imported using the wildcard are not found and instead looked up in the java.lang package. This might be related to FELIX-2906

Exception details:

Caused by: org.apache.felix.scrplugin.SCRDescriptorException: Unable to load class
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:444)
	at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.getExternalFieldByName(QDoxJavaClassDescription.java:174)
	at org.apache.felix.scrplugin.tags.annotation.Util$1.visitAnnotationFieldRef(Util.java:412)
	... 35 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-24 09:55:36.125,,,no_permission,,,,,,,,,,,,294041,,,Fri Aug 31 14:12:50 UTC 2012,,,,,,0|i0vwrb:,184280,,,,,,,,"24/Jul/12 09:55;cziegeler;Hi,

could you please give the latest version from svn a try? (annotations and maven plugin)
",31/Aug/12 14:12;cziegeler;This has been solved in the latest release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration Status plugin has an error in IE/Compatibility View,FELIX-3605,12599849,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,v_valchev,v_valchev,v_valchev,23/Jul/12 13:48,06/Jun/13 15:34,14/Mar/19 02:48,23/Jul/12 13:49,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"When the configuration status plugin is opened with IE, using compatibility view, it generates javascript error. This makes the plugin completely unusable.",Internet Explorer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-06 15:34:55.845,,,no_permission,,,,,,,,,,,,246030,,,Thu Jun 06 15:34:55 UTC 2013,,,,,,0|i07gkf:,41450,,,,,,,,"23/Jul/12 13:49;v_valchev;fixed in svn rev.1364632
if was just an extra comma!",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect namespace in component XML for DS Annotations,FELIX-3601,12599286,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,schlegel11,schlegel11,18/Jul/12 16:10,12/Jun/13 23:46,14/Mar/19 02:48,01/Apr/13 22:59,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,maven,,,,,"BND issue reference ""https://github.com/bndtools/bnd/issues/136"":

------------------------------------------------------------------------------------------------------------------------------------
When using DS annotations, bnd will generate component description XML with invalid namespace values.

The version segment of the namespace value must start with 'v' as in

http://www.osgi.org/xmlns/scr/v1.1.0

bnd is generating them without the 'v' as in

http://www.osgi.org/xmlns/scr/1.1.0

The incorrect namespace causes DS to not recognize the generated component descriptions.
------------------------------------------------------------------------------------------------------------------------------------

Maven-Bundle-Plugin has references to the old ""bndlib 1.50.0""(why is no newer version available at the maven central repository?), which include the above issue.

Fixed in Bundle-Plugin 2.4.0-SNAPSHOT:
https://repository.apache.org/content/repositories/snapshots/org/apache/felix/maven-bundle-plugin/2.4.0-SNAPSHOT/
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-01 22:59:45.159,,,no_permission,,,,,,,,,,,,307312,,,Tue Apr 02 06:55:14 UTC 2013,,,,,,0|i1avgv:,271564,,,,,,,,01/Apr/13 22:59;mcculls;2.4.0-SNAPSHOT now uses latest bndlib so this will be fixed in the upcoming bundleplugin release,02/Apr/13 04:54;mailings@hupie.com;[~mcculls] A heads-up: we're about to release bnd & bndtools 2.1.0. Is it possible that you wait for that?,"02/Apr/13 06:55;mcculls;Don't worry, still triaging issues
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Problem with 'subservice action=""instantiate""' in ipojo composite",FELIX-3599,12599168,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,fabiolf,fabiolf,17/Jul/12 21:11,04/Feb/13 12:34,14/Mar/19 02:48,01/Aug/12 10:19,ipojo-composite-1.8.2,,,,,,ipojo-composite-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"Since version 1.8.0, there is a problem with the ipojo-composite bundle that prevents the ""subservice action=instantiate"" action to work properly. This was tested with the composite-tutorial example, downloaded from the iPOJO site. It seemed that the instance could no be created because the handler ""requires"" was not valid, meaning that the instantiate action was not able to find the right component to bind.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-01 10:19:40.64,,,no_permission,,,,,,,,,,,,246085,,,Wed Aug 01 10:19:40 UTC 2012,,,,,,0|i07ggf:,41432,,,,,,,,"17/Jul/12 21:16;fabiolf;Analyzing the ipojo-composite code, I found the lines below in the ServiceDependencyHandler.java, on the createServiceInstance method:

     while(keys.hasMoreElements()) { 
        String key = (String) keys.nextElement(); 
        if (! key.equals(""instance.name"") 
           || key.equals(""component"")) { // Remove instance.name and component 
              toAppend.put(key, conf.get(key)); 
        } 
     }

Clearly there is a problem with the code or with the comment. I guessed the problem was with the code, that I changed to:


     while(keys.hasMoreElements()) { 
        String key = (String) keys.nextElement(); 
        if (! (key.equals(""instance.name"") 
           || key.equals(""component""))) { // Remove instance.name and component 
              toAppend.put(key, conf.get(key)); 
        } 
     }

This change made the composite-tutorial work, so I guess there was a mistake at that part of the code where a pair of parenthesis was missing.

Regards,
Fabio
","01/Aug/12 10:19;clement.escoffier;Patch applied on trunk.

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Config Admin should track SynchronousConfigurationListeners,FELIX-3596,12598691,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,cziegeler,cziegeler,13/Jul/12 13:29,29/Oct/12 11:57,14/Mar/19 02:48,14/Jul/12 12:00,configadmin-1.6.0,,,,,,configadmin-1.6.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"According to the 5.0 enterprise spec (104.8) synchronous configuration listeners register themselves with the SCL interface. Verified by BJ :)

The current implementation in trunk expects them to register with the CL interface.

(Even if a SCL registers as a CL it should be treated just like a CL)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-14 08:27:28.411,,,no_permission,,,,,,,,,,,,246046,,,Sat Jul 14 12:00:45 UTC 2012,,,,,,0|i07gvb:,41499,,,,,,,,"14/Jul/12 08:27;fmeschbe;Thanks for reporting.

For reference the discussion on OSGi-dev: https://mail.osgi.org/pipermail/osgi-dev/2012-July/003530.html","14/Jul/12 12:00;fmeschbe;Fixed in Rev. 1361527 by having separate service trackers for Synchronous and regular ConfigurationListener services. Only services registered as SynchronousConfigurationListener services are called synchronously.

Also enhanced the tests to verify SynchronouseConfigurationListener implementations registered as ConfigurationListeners are called asynchronously.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ControlServlet.addingService,FELIX-3595,12598566,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,12/Jul/12 14:24,05/Jan/15 09:47,14/Mar/19 02:48,12/Jul/12 14:28,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,"There is a NPE in the UPnP plugin:
{code}
java.lang.NullPointerException
        at org.apache.felix.webconsole.plugins.upnp.internal.ControlServlet.addingService(ControlServlet.java:533)
        at org.apache.felix.webconsole.plugins.upnp.internal.Activator.addingService(Activator.java:88)
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:909)
{/code}

The problems can occur when the plugin is starting. The service tracker collects already registered UPnP devices, and then notifies the customizer.

If UPnP device is removed, while the tracker is notifying the customizer it is possible to get a 'null' service, for the reference, we are being notified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246037,,,Mon Jan 05 09:47:48 UTC 2015,,,,,,0|i07g9j:,41401,,,,,,,,12/Jul/12 14:28;v_valchev;fixed in rev.1360693,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException when using short-cut notation inside array value annotations,FELIX-3593,12598468,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,ancoron,ancoron,11/Jul/12 23:03,12/Mar/14 08:55,14/Mar/19 02:48,13/Aug/12 05:39,scr annotations 1.6.0,,,,,,scr annotations 1.7.0,,,,,,,SCR Tooling,,,,,,0,patch,,,,,"When using a short-cut notation for a array-value annotation to specify only a single value the SCR plugin fails to handle it.

Example:
@Properties(@Property(name = ""failover"", boolValue = true))

Result:
java.lang.ClassCastException: com.thoughtworks.qdox.model.Annotation cannot be cast to java.util.List
        at org.apache.felix.scrplugin.tags.annotation.defaulttag.DefaultAnnotationTagProvider.getTags(DefaultAnnotationTagProvider.java:58)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:159)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:141)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationJavaClassDescription.getTagsByName(AnnotationJavaClassDescription.java:74)
        at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:253)
        at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:192)
",,,,,,,,,,,,,,,,,,,,11/Jul/12 23:04;ancoron;scr-annotations-shortcut.patch;https://issues.apache.org/jira/secure/attachment/12536137/scr-annotations-shortcut.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-13 04:33:01.651,,,no_permission,,,,,,,,,,,,294038,,,Mon Aug 13 05:39:37 UTC 2012,,,,,,0|i0vwpr:,184273,,,,,,,,11/Jul/12 23:04;ancoron;Attached a patch that fixes the problem (at least for the default tags): [^scr-annotations-shortcut.patch],"13/Aug/12 04:33;cziegeler;Hi Ancoron, could you please try the latest version from svn?","13/Aug/12 05:39;ancoron;Ah, didn't notice the refactoring work with FELIX-3550.

With the new implementation everything works as expected. Thanx. :-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The service id link for UPnP devices doesn't work,FELIX-3589,12598327,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,11/Jul/12 07:55,05/Jan/15 09:47,14/Mar/19 02:48,11/Jul/12 07:57,webconsole-upnp-plugin-1.0.2,,,,,,webconsole-upnp-plugin-1.0.4,,,,,,,Web Console,,,,,,0,,,,,,"As a part of UPnP device info, we have service.id property. The property value is a hyperlink to UPnP Device service. Currently, that link doesn't work, because it points to:
http://localhost/system/console/services/service.id
""service.id"" should be replaced by the real identifier.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246028,,,Mon Jan 05 09:47:46 UTC 2015,,,,,,0|i07g07:,41359,,,,,,,,05/Jan/15 09:47;v_valchev;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependencies with classes or resources in the default package cannot be embedded,FELIX-3585,12597630,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,,rheinen,rheinen,05/Jul/12 18:53,12/Jun/13 23:46,14/Mar/19 02:48,05/Apr/13 16:33,maven-bundle-plugin-2.4.0,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,4,,,,,,"I'm testing the latest svn revision 1355520 (2.4.0-SNAPSHOT) of the maven-bundle-plugin in my project. A MojoExecutionException is thrown when the plugin attempts to embed dependencies that contain resources or classes in the default package. The error message that I see in the logs is ""Classes found in the wrong directory: {JDOMAbout$Info.class=long, JDOMAbout.class=long, "". Those two classes are in the default package in that version of the jdom jar.

A warning is also thrown about ""Unused Private-Package instructions, no such package(s) on the class path: [!*]"". I've included more log output after the sample POM below.

This worked without errors or warnings in release version 2.3.7, so I believe this is a bug.

Here is a minimal POM that reproduces the issue. The dependency that I am testing with is jdom 1.0, but it should apply to any jar that has content in the default package. I've reproduced this error on both maven 3.0.3 and 3.0.4.

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>jdom-wrapper</artifactId>
	<packaging>bundle</packaging>
	<name>JDOM Wrapper</name>
	<version>1.0-SNAPSHOT</version>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
				<version>2.4.0-SNAPSHOT</version>
<!--
				<version>2.3.7</version>
-->
				<configuration>
					<instructions>
						<Embed-Dependency>jdom;scope=compile</Embed-Dependency>
					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>1.0</version>
		</dependency>
	</dependencies>
</project>
{code}

The last bit of output from a mvn bundle:bundle -debug command.

{code}
[DEBUG] BND Classpath:
#-----------------------------------------------------------------------
-classpath:\
 /private/tmp/jdom/target/classes,\
 /Users/ryan/.m2/repository/jdom/jdom/1.0/jdom-1.0.jar
#-----------------------------------------------------------------------

[DEBUG] BND Manifest:
#-----------------------------------------------------------------------
Manifest-Version: 1.0
Bnd-LastModified: 1341512614042
Bundle-ClassPath: .,jdom-1.0.jar
Bundle-ManifestVersion: 2
Bundle-Name: JDOM Wrapper
Bundle-SymbolicName: com.example.jdom-wrapper
Bundle-Version: 1.0.0.SNAPSHOT
Created-By: 1.6.0_33 (Apple Inc.)
Embed-Dependency: jdom;scope=compile
Embed-Transitive: true
Embedded-Artifacts: jdom-1.0.jar;g=""jdom"";a=""jdom"";v=""1.0""
Import-Package: javax.xml.parsers,javax.xml.transform,javax.xml.transfor
 m.sax,javax.xml.transform.stream,oracle.xml.parser,oracle.xml.parser.v2
 ,org.apache.xerces.dom,org.apache.xerces.parsers,org.jaxen,org.jaxen.jd
 om,org.w3c.dom,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers
Tool: Bnd-${Bundle-Version}
#-----------------------------------------------------------------------

[DEBUG] Final Manifest:
#-----------------------------------------------------------------------
Manifest-Version: 1.0
Bnd-LastModified: 1341512614042
Build-Jdk: 1.6.0_33
Built-By: ryan
Bundle-ClassPath: .,jdom-1.0.jar
Bundle-ManifestVersion: 2
Bundle-Name: JDOM Wrapper
Bundle-SymbolicName: com.example.jdom-wrapper
Bundle-Version: 1.0.0.SNAPSHOT
Created-By: Apache Maven Bundle Plugin
Embed-Dependency: jdom;scope=compile
Embed-Transitive: true
Embedded-Artifacts: jdom-1.0.jar;g=""jdom"";a=""jdom"";v=""1.0""
Import-Package: javax.xml.parsers,javax.xml.transform,javax.xml.transfor
 m.sax,javax.xml.transform.stream,oracle.xml.parser,oracle.xml.parser.v2
 ,org.apache.xerces.dom,org.apache.xerces.parsers,org.jaxen,org.jaxen.jd
 om,org.w3c.dom,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers
Tool: Bnd-${Bundle-Version}
#-----------------------------------------------------------------------

[WARNING] Bundle com.example:jdom-wrapper:bundle:1.0-SNAPSHOT : Unused Private-Package instructions, no such package(s) on the class path: [!*]
[ERROR] Bundle com.example:jdom-wrapper:bundle:1.0-SNAPSHOT : Classes found in the wrong directory: {JDOMAbout$Info.class=long, JDOMAbout.class=long, JDOMAbout$Author.class=long}
[ERROR] Error(s) found in bundle configuration
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.796s
[INFO] Finished at: Thu Jul 05 11:23:34 PDT 2012
[INFO] Final Memory: 5M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.felix:maven-bundle-plugin:2.4.0-SNAPSHOT:bundle (default-cli) on project jdom-wrapper: Error(s) found in bundle configuration -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-bundle-plugin:2.4.0-SNAPSHOT:bundle (default-cli) on project jdom-wrapper: Error(s) found in bundle configuration
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.MojoExecutionException: Error(s) found in bundle configuration
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:407)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:264)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:255)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: org.apache.maven.plugin.MojoFailureException: Error(s) found in bundle configuration
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:356)
	... 23 more
[ERROR] 
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-15 23:00:09.798,,,no_permission,,,,,,,,,,,,307319,,,Fri Apr 05 16:33:43 UTC 2013,,,,,,0|i1avif:,271571,,,,,,,,15/Feb/13 23:00;mattbishop;This bug does not appear in plugin version 2.3.6.,"01/Apr/13 23:13;mcculls;This issue appears to be limited to classes in the default package that start with certain characters (such as J) - for some reason bndlib is checking the resource path prefix and if it sees 'J' at the very start then it interprets it as referring to a Java primitive type (ie. J==long) which then causes all sorts of confusion later on. Will check to see if this has been fixed in the latest bnd code, if so then we just need to pull in that version.",01/Apr/13 23:38;mcculls;Logged with bnd project as https://github.com/bndtools/bnd/pull/328 with potential fix,05/Apr/13 16:33;mcculls;https://github.com/bndtools/bnd/pull/328 and its follow-up https://github.com/bndtools/bnd/pull/332 have been merged and will be in the upcoming release of bnd that will be integrated with the bundleplugin before the 2.4.0 release.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
finalName not properly populated in maven-bundle-plugin with buildnumber-maven-plugin,FELIX-3582,12597363,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,jwoodrich,jwoodrich,03/Jul/12 22:36,12/Jun/13 23:46,14/Mar/19 02:48,07/Jun/13 20:01,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,patch,,,,,"If the finalName element in the build section contains elements that are dynamically populated, such as ${buildNumber}, and the packaging element is set to bundle, the literal string ""${buildNumber}"" will appear in the jar file that's produced.  I took a look at the source code and found what I believe to be the problem and applied a fix in a local copy of the source code.  In org/apache/felix/bundleplugin/BundleInfo.java:1113 there is this line of code:


String finalName = currentProject.getBuild().getFinalName();

I removed this line (1113) and added the following near the top of the class:

    /**
     * Name of the generated JAR.
     * @parameter alias=""jarName"" expression=""${jar.finalName}"" default-value=""${project.build.finalName}""
     * @required
     */
    private String finalName;

This properly populates the finalName in the jar file and all of the unit tests pass.  I'm not sure if this affects anything else but as far as I can tell it doesn't.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-07 20:01:38.248,,,no_permission,,,,,,,,,,,,307321,,,Fri Jun 07 20:01:38 UTC 2013,,,,,,0|i1aviv:,271573,,,,,,,,07/Jun/13 20:01;mcculls;Fixed in r1490801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO fails when using constructor injection and expecting BundleContext in ctor,FELIX-3576,12596391,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,ggezer,d.de.wit,d.de.wit,29/Jun/12 12:33,18/Oct/12 00:41,14/Mar/19 02:48,18/Oct/12 00:41,ipojo-core-1.8.2,,,,,,ipojo-core-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"When using constructor inject, and also expecting BundleContext to be passed into the constructor, iPOJO gives and error: The constructor parameter 0 is not managed

The constructor is defined as something like this:
public Constructor(BundleContext context, @Requires(id=""my-id"") Dependency1 dep) { /* ... */ }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-29 21:08:56.377,,,no_permission,,,,,,,,,,,,246089,,,Wed Oct 17 23:52:19 UTC 2012,,,,,,0|i07gzj:,41518,,,,,,,,"29/Jun/12 21:08;ggezer;Hi Daan,

I committed the fix. Could you please try it again on trunk, so that we can close the issue .

Thanks,",03/Jul/12 18:06;ggezer;Fixed in trunk with rev-1355560,"04/Jul/12 06:55;clement.escoffier;The fix is breaking some tests (13 tests in error):

<testcase time=""0.0040"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testLazyCreation"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testLazyCreationSingleton"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testLazyCreationSeveral"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testImmediateCreation"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testBundleContext"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testImmediateSingletonCreation"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testLazyCreationSingletonM"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testLazyCreationSeveralM"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testCustomConstuctor"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testSuperCall"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0010"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testSuperCallWithNew"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testSuperSuperCallWithNew"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>
  <testcase time=""0.0"" classname=""org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation"" name=""testSuperCallWithBC"">
    <error message=""Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed"" type=""java.lang.IllegalArgumentException"">java.lang.IllegalArgumentException: Cannot create the component instance with the given configuration:The configuration is not correct for the type ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:151)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:120)
	at org.apache.felix.ipojo.junit4osgi.helpers.IPOJOHelper.createComponentInstance(IPOJOHelper.java:268)
	at org.apache.felix.ipojo.test.scenarios.manipulation.POJOCreation.setUp(POJOCreation.java:64)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestCase.runBare(OSGiTestCase.java:81)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:120)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.OSGiTestSuite.runTest(OSGiTestSuite.java:117)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.executeTest(Junit4osgiPlugin.java:582)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.invokeRun(Junit4osgiPlugin.java:491)
	at org.apache.felix.ipojo.junit4osgi.plugin.Junit4osgiPlugin.execute(Junit4osgiPlugin.java:270)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
</error>
    <log-service>[ERROR] [ERROR] ManipulationCreation-FooProviderType-1 : The constructor parameter 1 is not managed</log-service>
  </testcase>


To run the test:
cd tests/manipulator/creation
mvn clean install

","04/Jul/12 17:00;ggezer;Bug caused by BC injection used in many constructors, some of them not contained fully with injectors.

Fixed it by doing checks on BC argument's siblings to determine whether choosen BC is our guy.","05/Jul/12 09:04;clement.escoffier;Last bit:

When we compute the methodID for constructors, we must skip the InstanceManager.","17/Oct/12 12:22;abargnesi;A similar issue is still occurring.  If I define a component with a constructor that takes another required component and a BundleContext then I receive the following stacktrace:

  [2012-10-16 16:11:11.886] ERROR iLogServiceListener@65284069 org.osgi.service.log.LogService Bundle person.impl_0.1.0, [ERROR] person.impl.DefaultPersonService : null 
        java.lang.NullPointerException: null
            at org.apache.felix.ipojo.InstanceManager.handleBCInjections(InstanceManager.java:253)
            at org.apache.felix.ipojo.InstanceManager.configure(InstanceManager.java:207)
            at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:178)
            at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:310)
            at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:239)
            at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:355)
            at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:89)
            at org.apache.felix.ipojo.Extender.parse(Extender.java:306)
            at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:237)
            at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
            at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:769)
            at java.lang.Thread.run(Thread.java:

An example component definition that reveals this issue is:

@Component
    @Provides
    @Instantiate
    public class DefaultUserService implements UserService {
        ...
    }

    @Component
    @Provides
    @Instantiate
    public class DefaultPersonService extends ObjectService implements PersonService {

        private final BundleContext ctx;

        public DefaultPersonService(BundleContext ctx,
            @Requires(nullable = false, proxy = false) UserService userService) {

            super(userService);
            this.ctx = ctx;
        }
    }","17/Oct/12 15:10;ggezer;Hi Anthony,

Thanks for reporting. Fixed in the trunk.

Could you test it and verify ?","17/Oct/12 23:52;abargnesi;Göktürk,

I verified that my situation now works.  I have a BundleContext and @Requires passed
to my service constructor.  I no longer see the NPE exception and the service works as
expected.

Thanks!
Anthony Bargnesi",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IPojo bytecode manipulation looses method argument names,FELIX-3574,12596047,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,fvaldy,fvaldy,27/Jun/12 08:12,04/Feb/13 12:34,14/Mar/19 02:48,28/Jun/12 07:53,ipojo-manipulator-1.8.6,,,,,,ipojo-manipulator-1.8.6,,,,,,,iPOJO,,,,,,0,,,,,,"When IPojo creates its wrapper methods (instead of the ones it renames with '__' prefix), it doesn't keep the local variable table information, hence loosing parameter names.
Reflection isn't impacted (as you can't access them through reflection anyway), but many tools are:
- decompilers will display proper names for prefixed (private) methods, but not on the non-prefixed ones
- IDEs won't display the names if you don't have javadoc|source attachment
- some tools that are reading bytecode won't work (http://paranamer.codehaus.org/ in my case)

Fix is pretty easy, I'll attach a patch later on:
We need to store the local variables definition on the methods (only those which correspond to a parameter, we discard those that apply to method code variables) in the MethodDescriptor.
Then when generating the wrapping code, we put them back, with a ""start label"" = 0, and ""end label"" = ""end of wrapping code"", as it seems to be the convention.

I tested the changes on 1.6.4 and they work fine, but I'll provide a patch for the trunk.

Thx",,,,,,,,,,,,,,,,,,,,27/Jun/12 09:19;fvaldy;FELIX-3574-patch.diff;https://issues.apache.org/jira/secure/attachment/12533628/FELIX-3574-patch.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-27 09:13:33.278,,,no_permission,,,,,,,,,,,,246033,,,Thu Jun 28 08:15:01 UTC 2012,,,,,,0|i07gen:,41424,,,,,,,,"27/Jun/12 09:13;clement.escoffier;Hi,

When you say `I tested the changes on 1.6.4 and they work fine, but I'll provide a patch for the trunk.` you mean 1.8.4, right ?",27/Jun/12 09:19;fvaldy;Patch to trunk attached.,"27/Jun/12 09:20;fvaldy;Nope, it wasn't a typo, I'm still using 1.6.4 :(","28/Jun/12 07:53;clement.escoffier;Applied a slightly modified version of the patch.

Please check.","28/Jun/12 08:15;fvaldy;That was quick, thx.
Again I can't yet test on the trunk, but I reviewed the commit.

Btw, I'm not sure what was the purpose of asm.tree exclusion (that I removed) in the pom.xml.
It could've been kept by introducing a new class to store the local variable information (if it had any purpose).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IPojo bytecode manipulation generates a duplicate local variable,FELIX-3573,12596046,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,fvaldy,fvaldy,27/Jun/12 08:02,04/Feb/13 12:34,14/Mar/19 02:48,28/Jun/12 07:54,ipojo-manipulator-1.8.6,,,,,,ipojo-manipulator-1.8.6,,,,,,,iPOJO,,,,,,0,,,,,,"In the following code:
http://svn.apache.org/viewvc/felix/trunk/ipojo/manipulator/manipulator/src/main/java/org/apache/felix/ipojo/manipulation/ConstructorCodeAdapter.java?revision=1327153&view=markup

The method visitLocalVariable should have a ""else"" statement like below:
if (index == 0) {
  mv.visitLocalVariable(name, desc, signature, start, end, index);
  mv.visitLocalVariable(""_manager"", ""Lorg/apache/felix/ipojo/InstanceManager;"", null, start, end, 1);
} else {
  mv.visitLocalVariable(name, desc, signature, start, end, index + 1);
}

Otherwise, when index == 0 (""this"" parameter), we'll generate 2 variables at index 1 (manager & this a second time), as shown in javap -verbose -c -private output below:

  LocalVariableTable:
   Start  Length  Slot  Name   Signature
   0      26      0    this       Lfoo/Bar;
   0      26      1    _manager       Lorg/apache/felix/ipojo/InstanceManager;
   0      26      1    this       Lfoo/Bar;

It works fine as the last one is probably ignored by everyone, but it'd be cleaner.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-28 07:54:24.065,,,no_permission,,,,,,,,,,,,246058,,,Thu Jun 28 07:54:24 UTC 2012,,,,,,0|i07gbb:,41409,,,,,,,,"28/Jun/12 07:54;clement.escoffier;Applied the proposed fix.

Please check",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Resolver is not checking package space consistency for dynamic imports,FELIX-3572,12595945,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,rickhall,rickhall,26/Jun/12 17:37,29/Jun/12 22:10,14/Mar/19 02:48,29/Jun/12 22:10,framework-4.0.2,,,,,,framework-4.0.3,,,,,,,Framework,,,,,,0,,,,,,"During a past refactoring some code was copied and a parameter to a method for checking package space consistency was inadvertently flipped from true to false, which effectively disabled package space consistency checking for dynamic imports. We need to set it back to true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,294044,,,Fri Jun 29 22:10:37 UTC 2012,,,,,,0|i0vybz:,184535,,,,,,,,"29/Jun/12 22:10;rickhall;Fixed in release candidate. This patch won't be ported to trunk, since the trunk resolver will be replaced completely by the OBR resolver which separately fixes this bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Comparison method violates general contract!"" error in maven-scr-plugin",FELIX-3571,12595722,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,jukkaz,jukkaz,24/Jun/12 15:35,24/Aug/12 11:32,14/Mar/19 02:48,28/Jun/12 12:49,maven-scr-plugin-1.7.4,,,,,,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,,SCR Tooling,,,,,,0,,,,,,"With the above environment and maven-scr-plugin version 1.7.4 the following command sequence fails:

$ svn co -r 1353284 http://svn.apache.org/repos/asf/jackrabbit/oak/trunk/oak-mk/
$ cd oak-mk
$ mvn install

The failure is triggered by some incorrect Comparator implementation in the SCR plugin. The failure stack trace is:

[ERROR] Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.4:scr (generate-scr-scrdescriptor) on project oak-mk: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.7.4:scr failed: Comparison method violates its general contract! -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.4:scr (generate-scr-scrdescriptor) on project oak-mk: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.7.4:scr failed: Comparison method violates its general contract!
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.7.4:scr failed: Comparison method violates its general contract!
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:110)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:747)
	at java.util.TimSort.mergeAt(TimSort.java:483)
	at java.util.TimSort.mergeCollapse(TimSort.java:410)
	at java.util.TimSort.sort(TimSort.java:214)
	at java.util.TimSort.sort(TimSort.java:173)
	at java.util.Arrays.sort(Arrays.java:659)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:235)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:192)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	... 20 more","Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100)
Maven home: c:\Program Files\apache-maven-3.0.4
Java version: 1.7.0_04, vendor: Oracle Corporation
Java home: c:\Program Files\Java\jdk1.7.0_04\jre
Default locale: en_GB, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-28 12:49:06.172,,,no_permission,,,,,,,,,,,,294040,,,Thu Jun 28 12:55:16 UTC 2012,,,,,,0|i0vwr3:,184279,,,,,,,,28/Jun/12 12:49;cziegeler;The sorting has been completely removed in the latest version,"28/Jun/12 12:55;jukkaz;Sweet, thanks! Any plans for a release date of maven-scr-plugin 1.8.0? I'm currently forced to downgrade my Windows environment from Java 7 to Java 6 to work around this problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Commons IO dependency issue,FELIX-3570,12595713,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,boxtelp,boxtelp,24/Jun/12 13:26,06/Jun/13 15:34,14/Mar/19 02:48,12/Jul/12 06:57,webconsole-4.0.0,,,,,,webconsole-4.2.0,,,,,,,Web Console,,,,,,0,,,,,,"When trying to use web console 4.0 it won't load because of a missing commons-io 1.4 dependency. I do have commons-io 2.x installed, because it's needed by other bundles.
At the previous version I did not have this issue. That version also had two versions; 'standard' and bare (see FELIX-2086). I guess now I only get the bare version.
Is it possible to upgrade the commons-io dependency to 2.n / widen to version range?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-12 06:57:52.683,,,no_permission,,,,,,,,,,,,246027,,,Thu Jun 06 15:34:58 UTC 2013,,,,,,0|i07fzz:,41358,,,,,,,,"12/Jul/12 06:57;v_valchev;fixed in rev.1360547

Pieter, you can try building the webconsole from the sources, if you want the change immediately. Otherwise you should wait for the next 4.0.2 release.",06/Jun/13 15:34;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.VerifyError from bundles compiled with maven-scr-plugin  (java 7),FELIX-3568,12595437,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,jhawksley,jhawksley,21/Jun/12 14:47,12/Mar/14 08:55,14/Mar/19 02:48,30/Nov/12 10:36,maven-scr-plugin-1.7.4,,,,,,maven-scr-plugin-1.9.0,scr ant task 1.3.0,scr generator 1.3.0,,,,,SCR Tooling,,,,,,1,,,,,,"A bundle compiled by javac 1.7.0, using maven-scr-plugin 1.7.4, seems to raise a VerifyError when SCR attempts to reflect out the generated constructors.

java.lang.VerifyError: Expecting a stackmap frame at branch target 13 in method com.intergral.storm.pqs.internal.PersistentQueueComponent.unbindBus(Lorg/osgi/service/event/EventAdmin;)V at offset 5
	at java.lang.Class.getDeclaredConstructors0(Native Method)[:1.7.0_04]
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2404)[:1.7.0_04]
	at java.lang.Class.getConstructor0(Class.java:2714)[:1.7.0_04]
	at java.lang.Class.newInstance0(Class.java:343)[:1.7.0_04]
	at java.lang.Class.newInstance(Class.java:325)[:1.7.0_04]
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:183)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:118)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:997)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:333)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:157)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.config.ConfiguredComponentHolder.enableComponents(ConfiguredComponentHolder.java:256)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:253)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:285)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:203)[55:org.apache.felix.scr:1.6.0]
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)[org.apache.felix.framework-3.0.9.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)[org.apache.felix.framework-3.0.9.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)[org.apache.felix.framework-3.0.9.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3761)[org.apache.felix.framework-3.0.9.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1787)[org.apache.felix.framework-3.0.9.jar:]
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1163)[org.apache.felix.framework-3.0.9.jar:]
	at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)[org.apache.felix.framework-3.0.9.jar:]
	at java.lang.Thread.run(Thread.java:722)[:1.7.0_04]


Workaround: applying the XX:-UseSplitVerifier option to the VM seems to stop this occurring.","maven-scr-plugin 1.7.4
Java(TM) SE Runtime Environment (build 1.7.0_04-b21) (oracle/mac os)
org.apache.felix.scr-1.6.0.jar
Apache Karaf (2.2.7)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-22 03:11:37.918,,,no_permission,,,,,,,,,,,,246071,,,Fri Nov 30 10:36:41 UTC 2012,,,,,,0|i07h5z:,41547,,,,,,,,"21/Jun/12 15:00;jhawksley;Another workaround seems to be coding up the bind and unbind methods manually, and specifying them in the @Reference annotation.  If this is done, the split verifier workaround is not required.","22/Jun/12 03:11;djencks;Just so I'm sure I understand, the problem occurs with bind/unbind methods generated by the maven-scr-plugin but not with methods you write in java yourself?  So the problem is with the generated bytecode?","22/Jun/12 07:06;jhawksley;David, exactly right.  When I write the bind/unbind, without the workaround, everything's fine.  When I let maven-scr-plugin add the bytecode, the problem occurs.","25/Jun/12 13:07;lucdew;Hi, it is really quite a blocker for Java7 adoption for us.
Using the XX:-UseSplitVerifier JVM option fixes the issue but we have to set it for Maven surefire plugin (so that Junit test pass) and in the startup parameters of our OSGi based servers.
Also since the UseSplitVerifier use a fallback mechanism testing first with the Java7 verifier and rolling back to Java6 verifier, it has an impact on class loading time.",25/Jun/12 13:12;jhawksley;Linked FELIX-3145 which seems to be the same issue in iPOJO.,28/Jun/12 12:45;cziegeler;It seems we have to update ASM to 3.3.1 and set some flags for the class writer: java.lang.VerifyError from bundles compiled with maven-scr-plugin (java 7),"04/Jul/12 06:36;cziegeler;Simply adding those flags and using a newer ASM version creates problems as this results in errors when the class is used (at least with Java 6). As the fix in FELIX-3145 as been reverted as well, we need to find something different","04/Jul/12 08:34;jhawksley;Ah that's frustrating :(  I would say that naturally having one-build-to-rule-them-all is the optimal solution, but as a fallback position, could you read the compile target out of the Maven pom, and generate the ""correct"" bytecode based on that?  I'm not familiar with Maven internals, so I don't know if that's possible. ","04/Jul/12 09:45;cziegeler;No, that's not possible :( Maybe we could detect that by looking at a compiled class file?
Could you try the latest version of the scr plugin from svn trunk and change line 68 in the ClassModifier class (scr generator module) to
final ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_MAXS  | ClassWriter.COMPUTE_FRAMES) {

and see if that fixes your problem with java 7 ?

I'll try this with Java 6 and report the error I get, maybe someone has an idea then what we need to change to get a single version for all java versions","04/Jul/12 10:14;jhawksley;Works with your change, Carsten - thanks for that! Hopefully someone can find a method that works for all versions... fingers crossed.","05/Jul/12 09:03;cziegeler;Thanks John.

I've updated trunk to use the latest asm (4.0) which is the first version supporting java 7 - although it results in the same problem.
I get this exception:
Caused by: java.lang.RuntimeException: JSR/RET are not supported with computeFrames option
	at org.objectweb.asm.Frame.a(Unknown Source)
	at org.objectweb.asm.MethodWriter.visitJumpInsn(Unknown Source)
	at org.objectweb.asm.tree.JumpInsnNode.accept(Unknown Source)
	at org.objectweb.asm.tree.InsnList.accept(Unknown Source)
	at org.objectweb.asm.tree.MethodNode.accept(Unknown Source)
	at org.objectweb.asm.tree.MethodNode.accept(Unknown Source)
	at org.objectweb.asm.tree.ClassNode.accept(Unknown Source)
	at org.apache.felix.scrplugin.helper.ClassModifier.addMethods(ClassModifier.java:94)

Maybe someone has an idea how to change the bytecode generation?",15/Aug/12 08:54;cziegeler;Moving to next version as we don't know a good solution yet.,"15/Aug/12 09:40;cziegeler;It seems that JSRInlineAdapter should help in this situation, not sure how to use that one....","30/Nov/12 10:36;cziegeler;I've now fixed this by looking at the version of the class file:
if it's java7 or above use ClassWriter.COMPUTE_MAXS  | ClassWriter.COMPUTE_FRAMES
otherwise 0 is used.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO Configuration Handler should not reuse the dictionary object from the configuration admin,FELIX-3567,12595425,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,21/Jun/12 12:45,04/Feb/13 12:33,14/Mar/19 02:48,22/Jun/12 07:48,ipojo-core-1.8.2,,,,,,ipojo-core-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"The configuration handler is reusing the dictionary object given by the Config Admin. However, in the latest version of the Felix config admin, it uses a custom implementation constraining the value's types (as described in the spec). So, iPOJO should not reuse this object but copy the content and create a new dictionary object.

Here is the stack trace when this bug occurred: 

[ERROR] org.ow2.chameleon.bluetooth.discovery.BluetoothDeviceDiscovery : Value [GIAC] has unsupported (base-) type class org.ow2.chameleon.bluetooth.discovery.BluetoothDeviceDiscovery$DiscoveryMode
java.lang.IllegalArgumentException: Value [GIAC] has unsupported (base-) type class org.ow2.chameleon.bluetooth.discovery.BluetoothDeviceDiscovery$DiscoveryMode
	at org.apache.felix.cm.impl.CaseInsensitiveDictionary.checkValue(CaseInsensitiveDictionary.java:342)
	at org.apache.felix.cm.impl.CaseInsensitiveDictionary.put(CaseInsensitiveDictionary.java:196)
	at org.apache.felix.ipojo.handlers.configuration.ConfigurationHandler.__M_start(ConfigurationHandler.java:331)
	at org.apache.felix.ipojo.handlers.configuration.ConfigurationHandler.start(ConfigurationHandler.java)
	at org.apache.felix.ipojo.HandlerManager.start(HandlerManager.java:136)
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:335)
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:178)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:301)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
	at org.apache.felix.ipojo.IPojoFactory.updated(IPojoFactory.java:643)
	at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1567)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
	at java.lang.Thread.run(Thread.java:680)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246057,,,Fri Jun 22 07:48:21 UTC 2012,,,,,,0|i07gs7:,41485,,,,,,,,22/Jun/12 07:48;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[DS] first register immediate components' service, then create the implementation object per spec",FELIX-3559,12560858,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,16/Jun/12 04:05,20/Nov/12 10:58,14/Mar/19 02:48,29/Aug/12 17:08, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"The ds spec (in 4.3 compendium, 112.2.2) says we should first register the service for an immediate component, then create the implementation object.  currently we do the reverse.  Following the spec means we have to use a ServiceFactory even for immediate components but it makes the delayed and immediate code much more similar.  There is one behavior change for circular references, see CircularReferenceTest.test_A11_B0n_immediate_A_first  where B gets an A reference currently and doesn't when we follow the spec.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:16.917,,,no_permission,,,,,,,,,,,,246065,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i07h3r:,41537,,,,,,,,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tests for DS circular dependency behavior,FELIX-3557,12560835,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,15/Jun/12 21:34,11/Nov/14 22:26,14/Mar/19 02:48,16/Oct/12 19:35, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,The DS spec is pretty confused about circular dependencies between DS services.  I wrote some tests to try to make better sense of the situation.,,,,,,,,,,,,,,FELIX-2450,FELIX-1824,,,,,19/Jun/12 00:14;djencks;FELIX-3557-add-missing-refs-later.diff;https://issues.apache.org/jira/secure/attachment/12532485/FELIX-3557-add-missing-refs-later.diff,30/Sep/12 01:08;djencks;FELIX-3557-circ-dep-later-2.diff;https://issues.apache.org/jira/secure/attachment/12547137/FELIX-3557-circ-dep-later-2.diff,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:13.867,,,no_permission,,,,,,,,,,,,246063,,,Tue Nov 11 22:26:36 UTC 2014,,,,,,0|i07h3b:,41535,,,,,,,,19/Jun/12 00:14;djencks;It's not too hard to track missing services and try again when they become available.  Unfortunately you have to try again in a different thread due to anti-circular-service-lookup code in felix core framework.,"30/Sep/12 01:08;djencks;Attempt to retry dependencies that could not be obtained originally when they do show up.  This is a proof of concept at this point, we need to at least only track dependencies that are DS components so we will be able to detect when they are available.","16/Oct/12 19:35;djencks;r1398942
compared with patch, added check that the service we are waiting for is actually from scr.",20/Nov/12 10:58;fmeschbe;Close after release,"11/Nov/14 21:36;cleanerx;I have a probably related case and I am unsure if this is fixed by this issue:
I have two components that both mandatory require component A. The sequence is
1. ConsumerA#bind(A)
2. Scr Instantiates A via ServiceUse#getService
3. A has no dependencies and is instantiated
4. A bundle event occurs firing newly enabled components to resolve
5. ConsumerB is immediate and synchrnously binds via ConsomerB#bind(A) since A is now available
6. Scr tries to retrieve the Service again via ServiceUse#getService
Since this all happens in the same stack, I get a circularity problem where I would not expect one.
I suspect loading this or another component triggered the bundle event causing the circularity.
Is this a new problem or is it solved by the fix ?
",11/Nov/14 22:26;cleanerx;I was under the impression that equinox used the ds implementation. I just found out that this is not the case so you can ignore my comment.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrent access during startup,FELIX-3548,12560458,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,ccasenove,ccasenove,13/Jun/12 08:11,04/Feb/13 12:34,14/Mar/19 02:48,28/Jun/12 07:52,ipojo-core-1.8.2,,,,,,ipojo-core-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"We use the configuration admin to create iPojo instances at runtime. During Felix startup, an error may happen because 2 threads (one from iPOJO Instance Creator, the other from Configuration Admin) are accessing a list at the same time:

2012-06-07 05:13:11,490 GMT+0200 DEBUG [Thread-3] (ipojo.?:?): [DEBUG] iPOJO Instance Creator : Add the factory FailureHandler
2012-06-07 05:13:11,490 GMT+0200 INFO  [CM Configuration Updater (ManagedServiceFactory Update: factoryPid=FailureHandler)] (ipojo.?:?): [INFO] requires : Instance requires-1 from factory requires created
2012-06-07 05:13:11,505 GMT+0200 INFO  [Thread-3] (ipojo.?:?): [INFO] requires : Instance requires-2 from factory requires created
2012-06-07 05:13:11,505 GMT+0200 INFO  [CM Configuration Updater (ManagedServiceFactory Update: factoryPid=FailureHandler)] (ipojo.?:?): [INFO] properties : Instance properties-1 from factory properties created
2012-06-07 05:13:11,505 GMT+0200 INFO  [CM Configuration Updater (ManagedServiceFactory Update: factoryPid=FailureHandler)] (ipojo.?:?): [INFO] provides : Instance provides-2 from factory provides created
2012-06-07 05:13:11,505 GMT+0200 ERROR [Thread-3] (ipojo.?:?): [ERROR] IPOJO-Extender : An error occurs when analyzing the content or starting the management of 99
java.lang.ArrayIndexOutOfBoundsException: 10
        at java.util.ArrayList.add(ArrayList.java:352)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:302)
        at org.apache.felix.ipojo.IPojoFactory.getHandler(IPojoFactory.java:801)
        at org.apache.felix.ipojo.IPojoFactory.computeDescription(IPojoFactory.java:695)
        at org.apache.felix.ipojo.IPojoFactory.computeFactoryState(IPojoFactory.java:731)
        at org.apache.felix.ipojo.ComponentFactory.addedService(ComponentFactory.java:394)
        at org.apache.felix.ipojo.util.Tracker$Tracked.trackAdding(Tracker.java:725)
        at org.apache.felix.ipojo.util.Tracker$Tracked.trackInitialServices(Tracker.java:610)
        at org.apache.felix.ipojo.util.Tracker.open(Tracker.java:210)
        at org.apache.felix.ipojo.ComponentFactory.starting(ComponentFactory.java:246)
        at org.apache.felix.ipojo.IPojoFactory.start(IPojoFactory.java:583)
        at org.apache.felix.ipojo.Extender.createAbstractFactory(Extender.java:439)
        at org.apache.felix.ipojo.Extender.parse(Extender.java:264)
        at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
        at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
        at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:682)
        at java.lang.Thread.run(Thread.java:662)
2012-06-07 05:13:11,505 GMT+0200 ERROR [CM Configuration Updater (ManagedServiceFactory Update: factoryPid=FailureHandler)] (configadmin.?:?): [org.apache.felix.ipojo.Factory, org.osgi.service.cm.ManagedServiceFactory, id=19, bundle=99]: Unexpected problem updating Configuration PID=FailureHandler.0bb38d10-b99b-4326-ac36-1717c48f38de, factoryPID=FailureHandler, bundleLocation=file:D:\distrib\repository\failurehandler-4.0.0-SNAPSHOT.jar
java.lang.ArrayIndexOutOfBoundsException: 10
        at java.util.ArrayList.indexOf(ArrayList.java:216)
        at java.util.ArrayList.contains(ArrayList.java:199)
        at org.apache.felix.ipojo.IPojoFactory.generateName(IPojoFactory.java:830)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:279)
        at org.apache.felix.ipojo.IPojoFactory.getHandler(IPojoFactory.java:801)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:297)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
        at org.apache.felix.ipojo.IPojoFactory.updated(IPojoFactory.java:634)
        at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceFactoryUpdate.run(ConfigurationManager.java:1366)
        at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
        at java.lang.Thread.run(Thread.java:662) ","Felix distribution 4.0.2, iPojo 1.8.2, Oracle JVM 1.6.0_29, Windows XP 32",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-22 12:33:09.105,,,no_permission,,,,,,,,,,,,246024,,,Thu Jun 28 07:52:44 UTC 2012,,,,,,0|i07g1b:,41364,,,,,,,,22/Jun/12 12:33;ggezer;I faced the same issue while creating instance using API where component has its own instance declaration too. Fixed it by synchronizing access to INSTANCE_NAME field on everywhere it is touched. I'm not sure if this is complete solution though !,"28/Jun/12 07:51;clement.escoffier;Looks to be the issue. The INSTANCE_NAME is a static member wrongly protected against concurrent accesses. Another lock (global, shared by all factories) must be used to protect the list from concurrent modification.

I've implemented a fix acquiring the lock on INSTANCE_NAME before each operation. The 'createComponentInstance' has a large part of is code synchronized too. ",28/Jun/12 07:52;clement.escoffier;Patch applied on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak when unregistering a component used by an aggregate dependency with an unbind callback,FELIX-3545,12560341,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,jmassenet,jmassenet,12/Jun/12 13:01,04/Feb/13 12:34,14/Mar/19 02:48,12/Jun/12 20:22,ipojo-core-1.8.2,,,,,,ipojo-core-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"When using aggregate dependencies in an iPojo instance, any injected dependency instance that is unbound when using an unbind callback will leak in memory.

How to reproduce using the attached sample project:
- Build the provided bundles using maven (mvn clean install)
- Start the OSGi environment, install and start the two bundle (consumer and provider)
> The consumer bundle prints: 'Binding a new service; it says 'Bonjour !''
- Uninstall the provider bundle
> The consumer bundle prints: 'Unbinding a service; it says 'Au revoir !''
- Take a heap dump using you favorite tool (VisualVM snapshot is provided)
- Search for instances of provider.french.impl.FrenchGreet
  
Expected result:
- No instances can be found
  
Actual result:
- One instance is found

Using svn revision 1349288 as the reference, here is my understanding of the issue:
  
The problem lies in the org.apache.felix.ipojo.util.DependencyModel.manageDeparture(ServiceReference, Object) method.
  
The service instance is removed from the m_serviceObjects map as the first step into the method, which is the expected behavior. Later, the onServiceDeparture method is called, which finally invokes the org.apache.felix.ipojo.handlers.dependency.Dependency.invokeCallback(DependencyCallback, ServiceReference, Object) method.
  
In this method, a call to org.apache.felix.ipojo.util.DependencyModel.getService(ServiceReference) is made, which puts back the instance in the m_serviceObjects map. This reference can never be cleared (unless the provider also goes away, in which case all instances are released), thus resulting in a leak.
","Felix distribution 4.0.2, iPojo 1.8.2, Oracle JVM 1.6.0_u31, W7x64",,,,,,,,,,,,,,,,,,,12/Jun/12 13:01;jmassenet;issue_showcase.zip;https://issues.apache.org/jira/secure/attachment/12531819/issue_showcase.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-12 20:22:01.964,,,no_permission,,,,,,,,,,,,246060,,,Thu Jun 14 08:16:51 UTC 2012,,,,,,0|i07h2n:,41532,,,,,,,,12/Jun/12 20:22;clement.escoffier;I've provided a patch in the trunk. Could you check ?,14/Jun/12 08:16;jmassenet;The issue is fixed (tried it both in my test projet and real-world one). Thanks a lot for your responsiveness !,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Escape property values used as Metatype default values,FELIX-3542,12560149,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,ankurpathela,ankurpathela,11/Jun/12 10:38,11/Jun/15 14:30,14/Mar/19 02:48,23/Apr/13 13:38,maven-scr-plugin-1.11.0,scr ant task 1.5.0,scr generator 1.5.0,,,,maven-scr-plugin-1.12.0,scr ant task 1.6.0,scr generator 1.6.0,,,,,SCR Tooling,,,,,,0,,,,,,"For a component property defined as below:
~~~~~~~~~~~~
static private final String DEFAULT_FILE_PATTERN = ""(?i)index\\.html"";

@Property(value=DEFAULT_FILE_PATTERN)
static private final String PN_FILE_PATTERN = ""file.pattern""; 
~~~~~~~~~~~~

The backslash gets eaten up in the felix web console. The default value should appear as (?i)index\.html but ends up looking like (?i)index.html. This regex has a different meaning than the one intended.

The component gets the correct initial value. But things fail when you open the property editor and save without making any changes(because the editor loaded up with an incorrect default value). Note that the property values when saved from the property editor render correctly the next time the editor loads.",,,,,,,,,,,,,,,,FELIX-4919,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-03 05:29:46.876,,,no_permission,,,,,,,,,,,,307330,,,Wed Apr 24 09:17:48 UTC 2013,,,,,,0|i1avkv:,271582,,,,,,,,03/Apr/13 05:29;tripod;debugging shows that the webconsole is doing everything ok. the problem is that the org.osgi.service.metatype.AttributeDefinition retrieved from the org.osgi.service.metatype.ObjectClassDefinition already has the wrong default values.,"03/Apr/13 08:14;fmeschbe;The problem is, that we need double escaping: Once for Java and once for the Metatype attribute's default value.

So the actual property definition in your case must be:

    static private final String DEFAULT_FILE_PATTERN = ""(?i)index\\\\.html"";

with 4 (four) backslash characters in Java to actually get 2 (two) characters in the XML file and thus finally get the single backslash in the default value from the Metatype service.

Metatype service escaping is described in the JavaDoc of the AttributeDefinition.validate(String) method (or section 105.13.3.21 of the OSGi Enterprise R5 specification):

    Commas ( ‘,’ \u002C) and spaces (‘ ‘ \u0020) and backslashes (‘\’ \u005C) can be escaped with
    another backslash. Escaped spaces must not be trimmed. For example:
          value=”  a\,b,b\,c,\ c\\,d   “ => [ “a,b”, “b,c”, “ c\”, “d” ]

Hence resolving this as not being a problem.","03/Apr/13 19:34;tripod;yes it is a problem.

the properties passed in the 'activate' method are identical to the ones specified in the annotation. so no double escaping needed. 

as ankur mentioned above: 
> The component gets the correct initial value. But things fail when you open the property editor and save without making any changes","04/Apr/13 09:59;fmeschbe;Hmm, ok, I see.

Ok, I think the SCR plugin should probably properly handle escaping: if a property value contains special characters requiring escaping in the Metatype Service, the SCR plugin should escape them when writing the metatype.xml file.

That is the value of 

> @Property(value=""sample\\ value"")

should be written as ""sample\ value"" to the DS descriptor and ""sample\\ value"" to the Metatype descriptor.",23/Apr/13 13:38;cziegeler;Fixed in 1470946 - the default value is now escaped according to the validate method,24/Apr/13 09:17;tripod;thank you. works for me.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO Manipulator failed on classes containing expanded frames,FELIX-3539,12559541,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,06/Jun/12 14:34,02/May/13 19:18,14/Mar/19 02:48,12/Jun/12 19:21,ipojo-manipulator-1.8.4,,,,,,ipojo-manipulator-1.8.6,,,,,,,iPOJO,,,,,,0,,,,,,"When a class contains expanded thread the manipulator throws an error:

{code}
ClassReader.accept() should be called with EXPAND_FRAMES flag 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246074,,,Tue Jun 12 19:21:53 UTC 2012,,,,,,0|i07gm7:,41458,,,,,,,,12/Jun/12 19:21;clement.escoffier;Fixed din trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider putting the non-spec ComponentFactory behavior in a separate class,FELIX-3536,12559309,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,05/Jun/12 01:41,20/Nov/12 10:58,14/Mar/19 02:48,05/Jun/12 23:31,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I personally find it pretty confusing to figure out which parts of CompnentFactoryImpl relate to the spec behavior and which relate to the non-spec ManagedServiceFactory-like backwards compatible behavior enabled with the ""ds.factory.enabled"" configuration flag.  I'd like to suggest putting the non-spec behavior in a separate class, see patch.",,,,,,,,,,,,,,,,,,,,05/Jun/12 01:45;djencks;FELIX-3536.diff;https://issues.apache.org/jira/secure/attachment/12530886/FELIX-3536.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-05 11:50:50.193,,,no_permission,,,,,,,,,,,,246076,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i07glr:,41456,,,,,,,,"05/Jun/12 01:45;djencks;Suggestion on how to split spec and non-spec behavior to make it clearer what is required for spec behavior.  Also includes determining which state is the satsified state by returning from the class rather than using a switch statement, which is a separate change.","05/Jun/12 11:50;fmeschbe;The one thing I don't like about the patch is that the m_componentInstances field is changed to be protected. I would really like to keep this private if possible.

> determining which state is the satsified state

I have been contemplating something along these lines, too. So I am ok with this change

So, +1 to apply this.","05/Jun/12 23:31;djencks;I made m_componentInstances private again, good idea, and committed in rev 1346660.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor DS cleanup fixes,FELIX-3535,12559305,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,05/Jun/12 00:58,20/Nov/12 10:58,14/Mar/19 02:48,18/Oct/12 06:33,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I'm opening this to attach to various small cleanup actions.  I may add more as I find them.
- fix up javadoc
- remove or deprecate use of unused state constants
- finish ServiceMetadata validation
- use Servicemix junit bundle instead of springsource",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-05 11:59:20.668,,,no_permission,,,,,,,,,,,,246050,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i07h0v:,41524,,,,,,,,"05/Jun/12 11:59;fmeschbe;Deprecation is marked as:

  > @deprecated since 7.0

This sounds wrong, somehow ;-)

How about upgrading the export micro version, thus export 1.7.1 and document 

> This transient state is not used since bundle version 1.8.0
> therefore this code is deprecated. 
> @deprecated since 1.7.1",18/Oct/12 06:33;djencks;r1399528  fixed deprecation comments in Component.,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceFactory components don't deal with ConfigurationAdmin updates properly,FELIX-3534,12559300,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,05/Jun/12 00:23,20/Nov/12 10:58,14/Mar/19 02:48,16/Oct/12 19:51, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,ImmediateComponentManager.modify doesn't deal with ServiceFactory components since it decides whether to try to update existing components by seeing if getInstance()  returns null.  A ServiceFactory component can have any number of instances and all should be updated.,,,,,,,,,,,,,,,,,,,,01/Oct/12 18:57;djencks;FELIX-3534-1.diff;https://issues.apache.org/jira/secure/attachment/12547259/FELIX-3534-1.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.307,,,no_permission,,,,,,,,,,,,249114,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0a4uv:,57060,,,,,,,,01/Oct/12 18:57;djencks;This should fix the modify problem and also make deactivate work.  I'm thinking about integration tests for service factories before committing.,"16/Oct/12 19:51;djencks;r1398958

Integration tests would be good but I'd like to get the fix in before I lose it.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Strip out . properties when a lifecycle method returns service properties,FELIX-3533,12559297,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,djencks,djencks,djencks,05/Jun/12 00:18,20/Nov/12 10:58,14/Mar/19 02:48,05/Jun/12 01:33,scr-1.8.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,If a lifecycle method returns a map of service properties we should strip out . properties like we do with the normal config properties.  This means you can just copy the ComponentContext properties and add/remove the ones you want and don't have to worry about removing the . properties yourself.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-20 10:58:15.005,,,no_permission,,,,,,,,,,,,246088,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i07h93:,41561,,,,,,,,"05/Jun/12 01:33;djencks;Filter out private . properties, and test that it works.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Source artifact is not being generated,FELIX-3532,12559010,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,01/Jun/12 21:16,29/Oct/12 11:57,14/Mar/19 02:48,01/Jun/12 22:25,configadmin-1.4.0,,,,,,configadmin-1.6.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"The source plugin is not running with the following WARNING:

[INFO] --- maven-source-plugin:2.1.2:jar (attach-sources) @ org.apache.felix.configadmin ---
[WARNING] NOT adding sources to artifacts with classifier as Maven only supports one classifier per artifact. Current artifact [org.apache.felix:org.apache.felix.configadmin:bundle:1.4.1-SNAPSHOT] has a [] classifier.


Have to check why this happens.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,246073,,,Fri Jun 01 22:25:22 UTC 2012,,,,,,0|i07ge7:,41422,,,,,,,,"01/Jun/12 22:25;fmeschbe;Fixed in Rev. 1345377

This was caused by FELIX-3058 hitting bundle plugin 2.3.5. Updating to the latest bundle plugin 2.3.7 fixes the problem",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeploymentAdmin fails on windows due to unclosed iostreams,FELIX-3526,12558617,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,bramk,bramk,30/May/12 15:09,01/Apr/14 12:48,14/Mar/19 02:48,30/May/12 16:28,deploymentadmin-0.9.0,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"DeploymentAdmin leaks a few inputstreams that cause it to fail on deletes and consequently the update. Attaching a patch that solves three possible cases:

1) ExplodingOutputtingInputStream#merge may hold a lock on the manifest file
2) UpdateCommand$UpdateBundleRunnable does not close its own stream (may be superfluous though)
3) DropBundleCommand$InstallBundleRunnable gets past an inpustream but does not close it (an may never even run). This one caused the error below.

{code}
[Error] [   ] Could not merge source fix package with target deployment package
java.io.IOException: Could not delete .\felix-cache\bundle0\packages\bram2\contents\org.amdatu.multitenant.org.ops4j.pax.useradmin.pax-useradmin-service-1.0.0-RC3.jar
        at org.apache.felix.deploymentadmin.ExplodingOutputtingInputStream.merge(ExplodingOutputtingInputStream.java:310)
        at org.apache.felix.deploymentadmin.DeploymentAdminImpl.installDeploymentPackage(DeploymentAdminImpl.java:229)
        at org.apache.ace.deployment.deploymentadmin.DeploymentAdminDeployer.install(DeploymentAdminDeployer.java:51)
        at org.apache.ace.deployment.service.impl.DeploymentServiceImpl.installVersion(DeploymentServiceImpl.java:120)
        at org.apache.ace.deployment.task.DeploymentUpdateTask.run(DeploymentUpdateTask.java:57)
        at org.apache.ace.scheduler.Executer.run(Executer.java:92)
        at java.util.TimerThread.mainLoop(Timer.java:555)
        at java.util.TimerThread.run(Timer.java:505)
[Error] [   ] Error installing update
{code}


ref: http://jira.amdatu.org/jira/browse/AMDATU-693
","Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100)
Maven home: C:\Program Files\Apache Maven\apache-maven-3.0.4
Java version: 1.7.0_02, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.7.0_02\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,30/May/12 15:13;bramk;FELIX-3526-closeStreams.patch;https://issues.apache.org/jira/secure/attachment/12530215/FELIX-3526-closeStreams.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-30 16:28:43.84,,,no_permission,,,,,,,,,,,,246032,,,Wed May 30 16:28:43 UTC 2012,,,,,,0|i07gkn:,41451,,,,,,,,30/May/12 15:13;bramk;Patch attached. Added some logging too.,30/May/12 16:28;marrs;Applied the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression related to RequireBundle and Import-Package with bundle-symbolic-name attribute,FELIX-3521,12556963,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tdiesler,tdiesler,23/May/12 06:56,28/May/12 07:57,14/Mar/19 02:48,25/May/12 18:11,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"For this test

https://github.com/tdiesler/jbosgi-resolver/blob/3.0/felix/src/test/java/org/jboss/test/osgi/resolver/RequireBundleResolverTest.java#L226

I get

Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.313 sec <<< FAILURE!
testImportBySymbolicName(org.jboss.test.osgi.resolver.RequireBundleResolverTest)  Time elapsed: 0.053 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<AbstractResource[requirebundleC:0.0.0]> but was:<AbstractResource[requirebundleB:0.0.0]>

",,,,,,,,,,,,,,,,,,,,23/May/12 06:59;tdiesler;test.log;https://issues.apache.org/jira/secure/attachment/12528707/test.log,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-23 12:38:46.037,,,no_permission,,,,,,,,,,,,246084,,,Mon May 28 07:57:03 UTC 2012,,,,,,0|i07h8f:,41558,,,,,,,,23/May/12 12:38;tjwatson;Do the capabilities in the testcase actually contain the proper attributes for the bundle-symbolic-name?  I would not think the resolver would be responsible for adding them for you.,"23/May/12 13:11;rickhall;I don't find the information in this bug report to be super helpful. Would be nice if you included an actual textual description of the scenario (without a description here, this bug becomes stale if the link ever returns something else). At a minimum, it would be nice to mention the line number where it fails. Thanks.","23/May/12 15:47;tdiesler;The test fails at the very last assertion. Please also see the log for test progress.

Here the test in prose:

        // Bundle-SymbolicName: requirebundleB
        // Export-Package: resources

        // Bundle-SymbolicName: requirebundleC
        // Export-Package: resources

resolve B,C

        // Bundle-SymbolicName: requirebundleD
        // Export-Package: org.jboss.osgi.test.classloading.export;uses:=resources
        // Import-Package: resources;bundle-symbolic-name=requirebundleC

resolve D
verify that D wires to C

        // Bundle-SymbolicName: requirebundleE
        // Require-Bundle: requirebundleD
        // Import-Package: resources

resolve E
verify that E wires to C

","25/May/12 18:11;rickhall;This was related to the original patch applied for FELIX-3465. I've since created a fix for that issue, so now this scenario is working correctly for me. Please close this issue if it works for you too.","28/May/12 07:57;tdiesler;Yes, this is fixed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up of internal javadoc,FELIX-3516,12556719,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,tjwatson,tjwatson,21/May/12 17:47,12/Oct/12 14:41,14/Mar/19 02:48,12/Oct/12 12:42,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,The Candidates class has some invalid javadoc now that some parameters have been renamed or removed.  I will attach a patch,All,,,,,,,,,,,,,,,,,,,21/May/12 17:55;tjwatson;Candidates.patch.txt;https://issues.apache.org/jira/secure/attachment/12528462/Candidates.patch.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-12 12:42:07.167,,,no_permission,,,,,,,,,,,,247949,,,Fri Oct 12 14:41:07 UTC 2012,,,,,,0|i095u7:,51378,,,,,,,,"21/May/12 17:55;tjwatson;Simple patch that clears up some javadoc issues.  FYI, this only effects me because I am looking to add this code to one of my projects where I setup strict javadoc processing and I get some errors because of this invalid javadoc.",12/Oct/12 12:42;rickhall;Applied. Please close if satisfied. Thanks.,12/Oct/12 14:41;tjwatson;Thanks. Satisfied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeploymentAdmin triggers IOException on install,FELIX-3515,12556594,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,marrs,bramk,bramk,20/May/12 15:03,21/May/12 10:33,14/Mar/19 02:48,21/May/12 08:25,,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"The commit in r1339925 introduced an IOException that will happen always, but may or may not have an effect (concurrency).

Issue it the ExplodingOutputtingInputStream#run() will always try to read an InputStream it has already closed itself. As the IOException is now also pushed to the calling thread this cause the deployment to fail.

{code}
java.io.IOException: Exception while processing the stream in the background: Pipe closed
        at org.apache.felix.deploymentadmin.ExplodingOutputtingInputStream.close(ExplodingOutputtingInputStream.java:73)
        at org.apache.felix.deploymentadmin.DeploymentAdminImpl.installDeploymentPackage(DeploymentAdminImpl.java:217)
        at org.amdatu.itest.base.impl.TestContextImpl.installDeploymentPackage(TestContextImpl.java:94)
{code}","r1339925
Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100)
Maven home: C:\Program Files\Apache Maven\apache-maven-3.0.4
Java version: 1.7.0_02, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.7.0_02\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,20/May/12 15:05;bramk;FELIX-3515_ExplodingOutputtingInputStream_DontReadFromClosedStream.java;https://issues.apache.org/jira/secure/attachment/12528331/FELIX-3515_ExplodingOutputtingInputStream_DontReadFromClosedStream.java,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-21 08:18:03.147,,,no_permission,,,,,,,,,,,,246029,,,Mon May 21 10:33:30 UTC 2012,,,,,,0|i07gf3:,41426,,,,,,,,20/May/12 15:05;bramk;Attached patch. I think simply removing the offending code solves the issue without risk.,"21/May/12 08:18;marrs;Applying the patch would re-introduce FELIX-3336, but I completely agree that the current code does not work correctly as the stream we're reading from is closed too early. I'll work on a different fix.",21/May/12 08:25;marrs;Please re-test and close if fixed for you.,21/May/12 10:33;bramk;Seems to do the trick. I can no longer reproduce it and that makes sense looking at the commit. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable support for dynamic import,FELIX-3514,12556301,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,17/May/12 20:40,12/Jul/12 13:11,14/Mar/19 02:48,01/Jul/12 22:30,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"The OSGi R5 Resolver API does not provide a way to (easily) resolve dynamic imports.  This is important if the resolver is to be used at runtime.  The current resolver implementation has a bit of disabled code commented out that could be used to implement this.  I will attach a patch that enables a new method on ResolverImpl to enable dynamic resolution.


",All,,,,,,,,,,,,,,,,,,,05/Jun/12 18:03;tjwatson;3514.txt;https://issues.apache.org/jira/secure/attachment/12530990/3514.txt,23/Jun/12 20:13;rickhall;FELIX-3514.txt;https://issues.apache.org/jira/secure/attachment/12533190/FELIX-3514.txt,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-05 18:19:23.235,,,no_permission,,,,,,,,,,,,246066,,,Thu Jul 12 13:11:28 UTC 2012,,,,,,0|i07gpz:,41475,,,,,,,,"17/May/12 20:48;tjwatson;This patch enables a bit of code to do dynamic resolution.  The patch needs plenty of review because I am not confident I got all the details correct.

For example, I did not perform a check in the resolver to see if the current host wiring has a package source for the requested package or not.  I think this could or should be something done outside of the resolver before attempting to do a dynamic resolve operation.","22/May/12 21:03;tjwatson;Previous patch was for the wrong issue.  Sorry, here is the correct patch.","05/Jun/12 18:03;tjwatson;Updated patch.  The previous patch did not correctly check for uses constraint violations for dynamic imports.  There were two issues.  
- First the call to checkPackageSpaceConsistency was not passing ""true"" to indicate this was a dynamic import resolution.  This made the check consistency call to return quickly without doing any checks for an already resolved bundle.

- Once I enabled this (by passing ""true"") I ran into another issue when permuting over the solution set based on the Blame objects found.  We are wrapping all dynamic imports for already existing dynamic import wires.  These wires add their own Blame objects with wrapped requirements.  The issue is we try to permute such Blames when in reality they cannot be permuted because the existing wires cannot modified.  At runtime this results in an NPE when we attempt to permute such blamed requirements because the Candidates object does not actually contain the wrapped requirement.  For now I just added some null checks because we seem to do that in other places where a call to Candidates.getCandidates(Requirement) is called.  But I am not sure if that is the correct solution or not.  Richard, what do you recommend here?",05/Jun/12 18:19;rickhall;I'll have to think about it. The other null checks are generally to detect optional imports that may have no candidates. I'll see if I can find a better approach.,"23/Jun/12 20:18;rickhall;Overall, this patch looks good. I've slightly modified it in my attached patch. The main thing I tried to do was eliminate the one getDynamicImportCandidates() method, since it doesn't seem to be necessary now. The one thing that is still missing is the check to make sure the dynamic import doesn't shadow an existing package source, but I think we can do this in calculatePackageSpaces(), I just need to think a little more about how precisely to do it.","01/Jul/12 22:30;rickhall;Ok, I've committed my patch with a further modification to check whether the dynamic import shadows an existing package source. If it does, I throw an IllegalArgumentException. Tom, perhaps you could look at this commit and see if it seems good to you. If it does, please close this issue since I'm resolving it as fixed. Thanks!",12/Jul/12 13:11;tjwatson;The patch looks fine and it passes my testcases.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[SCR ANT] Non java files will be processed,FELIX-3510,12555867,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,dkuffner,dkuffner,15/May/12 19:38,12/Mar/14 08:55,14/Mar/19 02:48,13/Jun/12 12:22,scr ant task 1.1.4,,,,,,scr ant task 1.2.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"The ANT SCT tool will fail if a non-java file is in the source directory.
For example I have added a test.xml into it:

 com.thoughtworks.qdox.parser.ParseException: syntax error @[1,1] in file://src/org/acme/test.txt

The list should be filtered by extension "".java"". ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-13 12:22:30.76,,,no_permission,,,,,,,,,,,,294043,,,Wed Jun 13 12:22:30 UTC 2012,,,,,,0|i0vybr:,184534,,,,,,,,13/Jun/12 12:22;cziegeler;Fixed with FELIX-3550.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[SCR ANT] Undocumented features ""strictMode"", ""parseJavadoc"" and ""processAnnotations""",FELIX-3509,12555865,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,dkuffner,dkuffner,15/May/12 19:33,12/Mar/14 08:55,14/Mar/19 02:48,13/Jun/12 13:14,,,,,,,scr annotations 1.7.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"Undocumented features ""strictMode"", ""parseJavadoc"" and ""processAnnotations"",
Please see: http://felix.apache.org/site/apache-felix-scr-ant-task-use.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-13 13:14:37.415,,,no_permission,,,,,,,,,,,,294039,,,Wed Jun 13 13:14:37 UTC 2012,,,,,,0|i0vwqf:,184276,,,,,,,,13/Jun/12 13:14;cziegeler;Thanks for reporting this. I'Ve updated the docs,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IPojo Manipulator left out 'array of enums' in generated metadata,FELIX-3508,12555269,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,ggezer,ggezer,15/May/12 01:17,04/Feb/13 12:34,14/Mar/19 02:48,17/May/12 18:23,ipojo-manipulator-1.8.4,,,,,,ipojo-manipulator-1.8.6,,,,,,,iPOJO,,,,,,0,ipojo,ipojo-manipulator,,,,"Manipulation process recognizes enums as annotation attribute in custom handler annotations. However it fails to recognize array of enums, and these arrays does not goes into generated IPojo component metadata for custom handler.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-17 18:13:52.542,,,no_permission,,,,,,,,,,,,246086,,,Thu May 17 18:23:58 UTC 2012,,,,,,0|i07ggv:,41434,,,,,,,,17/May/12 18:13;clement.escoffier;I've reproduced the issue (and wrote a test). It seems that they are just completely ignored.,17/May/12 18:23;clement.escoffier;Fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IPojo FactoryStateListener doesn't get notified while stopping factory,FELIX-3501,12554601,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,ggezer,ggezer,10/May/12 00:55,04/Feb/13 12:34,14/Mar/19 02:48,28/May/12 07:35,iPOJO-1.8.0,,,,,,ipojo-core-1.8.4,,,,,,,iPOJO,,,,,,0,ipojo,,,,,"When stopping/uninstalling bundle of some IPojo component, FactoryStateListener references don't get notified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-28 07:35:49.223,,,no_permission,,,,,,,,,,,,238851,,,Mon May 28 17:42:36 UTC 2012,,,,,,0|i07gdj:,41419,,,,,,,,"10/May/12 00:59;ggezer;There is a little bug in IPojoFactory.stop() method,

        m_state = INVALID; // Set here to avoid to create instances during the stops.
        ............................
        ...........................
        if (m_state == VALID) {
            for (int i = 0; i < m_listeners.size(); i++) {
                ((FactoryStateListener) m_listeners.get(i)).stateChanged(this, INVALID);
            }
        }

m_state if changed to INVALID before the check for state notifications.",28/May/12 07:35;clement.escoffier;Was fixed in trunk. Waiting for confirmation.,"28/May/12 17:42;ggezer;It's fixed. 

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"InstanceManager concurrency issue: ""A methodID cannot be associated with a method from the POJO class""",FELIX-3500,12554139,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,fvaldy,fvaldy,07/May/12 10:32,11/Dec/14 15:57,14/Mar/19 02:48,12/Jun/12 19:50,ipojo-core-1.8.2,,,,,,ipojo-core-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"InstanceManager.getMethodByID(String) claims to be thread-safe (or not to require synchronization) but is not.
It results in random messages ""A methodID cannot be associated with a method from the POJO class"" (which were downgraded from ERROR to INFO), but has unknown side effect bugs (as it returns null for valid methods when that happens).

If 2 threads call this method with the same parameter:
- both won't find it in the cache (m_methods.get(methodId) == null)
- one will register it: !m_methods.containsValue(mets[i]) is true
- second thread will NOT register it (because the first one did, hence the value is in the map), and will return null <-- bug

Other issues may occur from the fact that an HashMap (unsafe) is used without synchronization, for instance a well-known infinite loop.

I think one fix (to keep the same method semantics) under J2SE 1.3 would be to:
- use Hashtable instead of HashMap (safe as the value is never null)
- replace the code within the loop by:
                if (m_methods.containsValue(mets[i]))
                {
                    method = (Method) m_methods.get(methodId);
                    if (method != null)
                    {
                        return method;
                    }
                }
                else if (MethodMetadata.computeMethodId(mets[i]).equals(methodId))
                {
                    // Store the new methodId
                    m_methods.put(methodId, mets[i]);
                    return mets[i];
                }

However I'm not sure about the purpose of the containsValue check purpose (which is also very expensive as it traverses the entire map).

Thanks.",,,,,,,,,,,,,,FELIX-4728,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-12 19:49:21.949,,,no_permission,,,,,,,,,,,,238364,,,Wed Jun 27 07:44:06 UTC 2012,,,,,,0|i07gt3:,41489,,,,,,,,12/Jun/12 19:49;clement.escoffier;Could you try the version from the trunk. I've simplified the current version and added some of your ideas.,"27/Jun/12 07:44;fvaldy;I can't (yet) try the new version (to many things to upgrade for that), but I reviewed your changes to InstanceManager and they look good to me.

Thx.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BundleInputStream is not able to handle bundles that only have a MANIFEST.MF entry,FELIX-3498,12553962,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,karlpauls,lgalfaso,lgalfaso,04/May/12 16:46,07/Aug/12 16:16,14/Mar/19 02:48,25/Jul/12 11:39,framework.security-2.0.1,,,,,,framework.security-2.2.0,,,,,,,Framework Security,,,,,,0,,,,,,"When trying to deploy a bundle that only has a MANIFEST.MF, BundleInputStream throws a stack overflow exception. The issue is that it is not able to handle the case where there are no entries besides META-INF/MANIFEST.MF

The bug can be traced back to


BundleInputStream::read()
// Stuff
if (m_content.hasMoreElements())
{
  // More stuff
}

and it should be

if (m_content.hasMoreElements())
{
  // More stuff
}
else
{
  m_output.close();
  m_output = null;
}








",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-04 19:00:06.728,,,no_permission,,,,,,,,,,,,238180,,,Tue Aug 07 16:16:26 UTC 2012,,,,,,0|i07gh3:,41435,,,,,,,,04/May/12 16:46;lgalfaso;The bundle in question is a framework fragment that exposes a package that is part of the JVM,04/May/12 19:00;karlpauls;Good catch. I'll try to get to it soon.,25/Jul/12 11:39;karlpauls;fixed in trunk r1365527. Please close if it works for you.,07/Aug/12 16:16;lgalfaso;The patch fixed the issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Wrong artifact type attached as a secondary artifact when project packaging is set to ""pom""",FELIX-3497,12553810,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,mpetrovsky,mpetrovsky,03/May/12 19:00,12/Jun/13 23:46,14/Mar/19 02:48,07/Jun/13 18:26,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,maven,maven-bundle-plugin,patch,,,"When trying to create a ${artifactid}-tests.jar in a maven project that does not produce a primary bundle the plugin attaches the ${artifactid}-tests.jar bundle as ${artifactid}-tests.pom. The plugin does not abide by the ""<packaging>jar</packaging>"" config.

I have attached both an example POM and a simple fix in the form of a patch.

Example POM:
{code}
<project>
	<groupId>foo</groupId>
	<artifactId>bar</artifactId>
	<version>1.5.1-SNAPSHOT</version>

	<packaging>pom</packaging>

	<build>
		<plugins>
			<!-- Create a Integration test bundle -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<executions>
					<execution>
						<id>bundle-tests</id>
						<phase>package</phase>
						<goals><goal>bundle</goal></goals>
					</execution>
				</executions>
				<configuration>
					<classifier>tests</classifier>
					<packaging>jar</packaging>
					<supportedProjectTypes><supportedProjectType>pom</supportedProjectType></supportedProjectTypes>
					<outputDirectory>target/test-classes</outputDirectory>
					<instructions>
						<Export-Package>com.foo.*</Export-Package>
						<Sling-Test-Regexp>.*Test</Sling-Test-Regexp>
						<Bundle-Description>Integration Tests - ${project.description}</Bundle-Description>
						<Bundle-Name>Integration Tests for ${project.name}</Bundle-Name>
						<Bundle-SymbolicName>${groupId}.${artifactId}-tests</Bundle-SymbolicName>
					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
{code}

",any,,,,,,,,,,,,,,,,,,,03/May/12 19:07;mpetrovsky;example.pom;https://issues.apache.org/jira/secure/attachment/12525497/example.pom,03/May/12 19:07;mpetrovsky;maven-bundle-fix.patch;https://issues.apache.org/jira/secure/attachment/12525496/maven-bundle-fix.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-06-07 18:26:18.143,,,no_permission,,,,,,,,,,,,238021,,,Fri Jun 07 18:26:18 UTC 2013,,,,,,0|i1avnj:,271594,,,,,,,,03/May/12 19:07;mpetrovsky;Attached is the patch and example,07/Jun/13 18:26;mcculls;Fixed in r1490772,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URLHandlers deadlock in jnlp context,FELIX-3496,12553760,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,andrei.pozolotin,andrei.pozolotin,03/May/12 14:06,24/Feb/17 12:26,14/Mar/19 02:48,24/Feb/17 12:26,framework-4.0.2,,,,,,,,,,,,,Framework,,,,,,0,,,,,,"1) we are seeing URLHandlers deadlock in jnlp context

2) this happens:

* in jnlp mode only (can not reproduce in non-jnlp)

* with frequency 1:10

* with multiple threads, both internal-felix-related and external-embedder-host-related
doing heavy downloading of url resources;

3) seeming problem area is here:

http://svn.apache.org/viewvc/felix/trunk/framework/src/main/java/org/apache/felix/framework/URLHandlers.java?view=markup

    public static Object getFrameworkFromContext()
    {
        // This is a hack. The idea is to return the only registered framework
        synchronized (m_classloaderToFrameworkLists)
        {
            if (m_classloaderToFrameworkLists.isEmpty())
            {
                synchronized (m_frameworks)
                {
                    if ((m_counter == 1) && (m_frameworks.size() == 1))
                    {
                        return m_frameworks.get(0);
                    }
                }
            }
        }

4) stack traces attached

5) the workaround is to disable URLHandlers service via
config.put(""felix.service.urlhandlers"", ""false"");

",oracle jre 1.6.0_31 x64 @ windows,,,,,,,,,,,,,,,,,,,03/May/12 14:07;andrei.pozolotin;dead_lock_0.txt;https://issues.apache.org/jira/secure/attachment/12525444/dead_lock_0.txt,03/May/12 14:07;andrei.pozolotin;dead_lock_1.txt;https://issues.apache.org/jira/secure/attachment/12525445/dead_lock_1.txt,03/May/12 14:07;andrei.pozolotin;dead_lock_2.txt;https://issues.apache.org/jira/secure/attachment/12525446/dead_lock_2.txt,03/May/12 14:07;andrei.pozolotin;dead_lock_3.txt;https://issues.apache.org/jira/secure/attachment/12525447/dead_lock_3.txt,03/May/12 14:07;andrei.pozolotin;dead_lock_4.txt;https://issues.apache.org/jira/secure/attachment/12525448/dead_lock_4.txt,03/May/12 14:07;andrei.pozolotin;dead_lock_5.txt;https://issues.apache.org/jira/secure/attachment/12525449/dead_lock_5.txt,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,2012-05-03 15:30:44.276,,,no_permission,,,,,,,,,,,,237967,,,Thu May 03 15:30:44 UTC 2012,,,,,,0|i1avnr:,271595,,,,,,,,03/May/12 14:07;andrei.pozolotin;dead lock stack traces,"03/May/12 15:30;karlpauls;I think you are running into this:

http://underlap.blogspot.de/2006/11/experimental-fix-for-sunbug-4670071.html

can you either try the workaround options given there or otherwise, try to not have the outside thread working while the framework starts up?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WireImpl needs to implement equals and probably hashcode,FELIX-3495,12553488,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,tjwatson,tjwatson,01/May/12 13:55,17/Oct/12 15:43,14/Mar/19 02:48,17/Oct/12 15:43,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,org.apache.felix.resolver.WireImpl needs to implement the equals method (and probably hashcode) according to the Wire javadoc.  The resolver CT tests for equality.  The check should be a simple check for equals on the requirer/req/provider/cap.,All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,237652,,,Wed Oct 17 15:43:31 UTC 2012,,,,,,0|i07gyf:,41513,,,,,,,,"05/Jun/12 19:35;tjwatson;FYI, I think Richard released a fix for this.  I assume it should be closed.",17/Oct/12 15:43;tjwatson;This has been fixed already.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageAdminImpl thorws NPE - File Install does not handle a bundle uninstall gracefully,FELIX-3493,12553290,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,gnt,lgalfaso,lgalfaso,29/Apr/12 21:48,17/Mar/15 06:58,14/Mar/19 02:48,11/Jun/12 15:14,fileinstall-3.2.2,framework-4.0.2,,,,,fileinstall-3.2.4,,,,,,,File Install,Framework,,,,,0,,,,,,"PackageAdminImpl throws NPE.
In the specific case that happen to me, I had to revisions of the same bundle installed using FileInstall and both where throwing on the activator and I uninstalled the bundle using the console.


The issue with File Install happens in the same case as it is not able to handle the exception on the call to PackageAdmin


This is the stack trace generated

In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.framework.PackageAdminImpl.getBundleType(PackageAdminImpl.java:112)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.isFragment(DirectoryWatcher.java:653)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundle(DirectoryWatcher.java:1225)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundles(DirectoryWatcher.java:1206)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:491)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:286)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.framework.PackageAdminImpl.getBundleType(PackageAdminImpl.java:112)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.isFragment(DirectoryWatcher.java:653)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundle(DirectoryWatcher.java:1225)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundles(DirectoryWatcher.java:1206)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:491)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:286)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException



Mark the bug as minor as the entire PackageAdmin is deprecated.
",Mac OSX (but it should not care),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-11 15:14:54.907,,,no_permission,,,,,,,,,,,,237412,,,Mon Jun 11 15:14:54 UTC 2012,,,,,,0|i07gsv:,41488,,,,,,,,"11/Jun/12 15:14;gnt;URL: http://svn.apache.org/viewvc?rev=1348898&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolver does not create wires for osgi.ee requirements from fragments,FELIX-3492,12553201,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,27/Apr/12 21:03,01/May/12 12:34,14/Mar/19 02:48,01/May/12 12:34,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"If a fragment has a requirement with osgi.ee namespace the resolver correctly discards it as payload to for the hosts the fragment gets attached to, but it also discards the wires that should be created when gather the List<Wire> for a fragment resource.  I will attach a patch.",All,,,,,,,,,,,,,,,,,,,30/Apr/12 19:28;rickhall;FELIX-3492.txt;https://issues.apache.org/jira/secure/attachment/12525094/FELIX-3492.txt,27/Apr/12 21:17;tjwatson;org.apache.felix.resolver.patch;https://issues.apache.org/jira/secure/attachment/12524923/org.apache.felix.resolver.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-30 19:28:23.82,,,no_permission,,,,,,,,,,,,237274,,,Tue May 01 12:34:23 UTC 2012,,,,,,0|i07g87:,41395,,,,,,,,27/Apr/12 21:07;tjwatson;After discussions with Richard this is the potential solution I came up with.,27/Apr/12 21:17;tjwatson;Of coarse my last patch had a bug since I did not special case the host wire enough and it was getting added multiple times.  I'm sure we could avoid the special case here.,30/Apr/12 19:28;rickhall;I've slightly re-worked your patch in an attempt to get rid of the special case of the host requirement that you mention in your comment. Let me know what you think.,"30/Apr/12 21:23;tjwatson;+1 to your reworked patch.  It is still confusing but more clear than before ;-)

It also passes my testcases I have.","01/May/12 12:34;rickhall;Applied patch, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ui-bg_glass_55_fbf9ee_1x400.png does not exist in admin_compat.css,FELIX-3485,12552683,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,25/Apr/12 15:51,23/Nov/12 06:54,14/Mar/19 02:48,25/Apr/12 15:53,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"In the CSS file /system/console/res/ui/admin_compat.css there is a reference to /system/console/res/ui/images/ui-bg_glass_55_fbf9ee_1x400.png, but the image does not exist.

Below is a code extract:

/*******************************************************************************
 * The statusline class was the predecessor to the current status line setup
 * using the JQuery UI statline and ui-state-highlight classes.
 * This backwards compatible statusline class is configured as a copy of the
 * basic theme statline/ui-state-highlight classes.
 */
div.statusline {
    margin-bottom:0.5em !important;
    margin-top:0.5em !important;
    padding:0.2em;
    background:#FBF9EE url(images/ui-bg_glass_55_fbf9ee_1x400.png) repeat-x scroll 50% 50%;
    border:1px solid #FCEFA1;
    color:#363636;
}
/******************************************************************************/

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 06:54:46.0,,,no_permission,,,,,,,,,,,,237389,,,Fri Nov 23 06:54:46 UTC 2012,,,,,,0|i07g7z:,41394,,,,,,,,25/Apr/12 15:53;v_valchev;fixed in rev.1330366,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
web console config manager plugin no longer works with J9,FELIX-3473,12552128,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,v_valchev,v_valchev,v_valchev,23/Apr/12 13:13,23/Nov/12 06:54,14/Mar/19 02:48,23/Apr/12 14:12,webconsole-4.0.0,webconsole-4.2.0,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"When started I've got the following exception:

Failed to instantiate plugin org.apache.felix.webconsole.internal.compendium.Con
figManager
java.lang.NoClassDefFoundError: java.util.regex.Pattern
at org.apache.felix.webconsole.internal.compendium.ConfigManager.<clinit
>(ConfigManager.java:98)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:206)
at java.lang.Class.newInstanceImpl(Native Method)
at java.lang.Class.newInstance(Class.java:1275)
at org.apache.felix.webconsole.internal.servlet.PluginHolder$InternalPlu
gin.doGetConsolePlugin(PluginHolder.java:748)
at org.apache.felix.webconsole.internal.servlet.PluginHolder$Plugin.getC
onsolePlugin(PluginHolder.java:535)
at org.apache.felix.webconsole.internal.servlet.PluginHolder.getPlugin(P
luginHolder.java:205)
at org.apache.felix.webconsole.internal.servlet.OsgiManager.initInternal
Plugins(OsgiManager.java:968)
at org.apache.felix.webconsole.internal.servlet.OsgiManager.updateConfig
uration(OsgiManager.java:933)
at org.apache.felix.webconsole.internal.servlet.OsgiManager.<init>(OsgiM
anager.java:318)
at org.apache.felix.webconsole.internal.OsgiManagerActivator.start(OsgiM
anagerActivator.java:42)
at com.prosyst.mbs.impl.framework.BundleImpl.startIt(BundleImpl.java:431
6)
at com.prosyst.mbs.impl.framework.BundleImpl.simpleStart(BundleImpl.java
:1750)
at com.prosyst.mbs.impl.framework.BundleImpl.start0(BundleImpl.java:1648
)
at com.prosyst.mbs.impl.framework.BundleImpl.start0(BundleImpl.java:1521
)
at com.prosyst.mbs.impl.framework.BundleImpl.start(BundleImpl.java:1356)

at com.prosyst.mbs.impl.framework.BundleImpl.start(BundleImpl.java:1066)

at com.prosyst.util.impl.parser.DefaultFrameworkPlugable.start(DefaultFr
ameworkPlugable.java:1296)


We should update the code to use case insensitive substring matching instead of regexp, which is not available on older/embedded java JVMs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 06:54:47.646,,,no_permission,,,,,,,,,,,,237399,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i07g33:,41372,,,,,,,,23/Apr/12 14:12;v_valchev;fixed in SVN rev.1329251,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Type mismatch JS error using the memoryusage plugin,FELIX-3469,12551590,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,19/Apr/12 08:57,23/Nov/12 06:54,14/Mar/19 02:48,19/Apr/12 09:00,webconsole-3.1.2,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"When showing the Memory Usage page, IE8 reports a type mismatch error in the support.js script.

For example when clicking the Heap Dump button:
   Result: Type mismatch error in http://localhost:4502/system/console/res/lib/support.js (line: 257, char: 4)
   Expected: no error, GC and heap dump to execute

Also the detail information is not properly listed.",Microsoft IE 8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,236398,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i07gy7:,41512,,,,,,,,"19/Apr/12 08:59;fmeschbe;Apparently the problem occurs in this code at the end of the createElement function:

    for (var i=0; i < children.length; i++) {
      element.appendChild( children[i] );
    }

Looks like the children.length method reports a wrong size and thus at the end an non-existing child should be added. The fix is to simply guard against non-existing array entry.",19/Apr/12 09:00;fmeschbe;Fixed in Rev. 1327875,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration is not flush back to the file,FELIX-3467,12551236,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,jbonofre,jbonofre,17/Apr/12 14:58,17/Mar/15 06:59,14/Mar/19 02:48,17/Apr/12 16:10,fileinstall-3.2.0,,,,,,fileinstall-3.2.2,,,,,,,File Install,,,,,,0,,,,,,"When a configuration is updated, the change is not flush back on the original config file.",,,,,,,,,,KARAF-1360,,,,,,,,,,17/Apr/12 15:02;jbonofre;FELIX-3467.patch;https://issues.apache.org/jira/secure/attachment/12522956/FELIX-3467.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,236100,,,2012-04-17 14:58:39.0,,,,,,0|i07gjj:,41446,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pojoization.directoryManipulation() does not take MANIFEST file location into account.,FELIX-3466,12551201,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,ggezer,ggezer,17/Apr/12 10:53,04/Feb/13 12:34,14/Mar/19 02:48,05/Jun/12 22:22,ipojo-manipulator-1.8.4,,,,,,ipojo-manipulator-1.8.6,,,,,,,iPOJO,,,,,,0,ipojo,ipojo-manipulator,,,,"Pojoization.directoryManipulation(File dir,File metadata,File manifest) method does not use the given manifest file location while saving it. Instead it uses a hard-coded ${project.output}/target/classes/META-INF/MANIFEST.MF path.

It should be modified to write back its changes to the given file when given file is not null.",,,,,,,,,,,,,,,,,,,,17/Apr/12 11:15;ggezer;org.apache.felix.ipojo.manipulator.patch;https://issues.apache.org/jira/secure/attachment/12522942/org.apache.felix.ipojo.manipulator.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-06 06:06:18.388,,,no_permission,,,,,,,,,,,,236065,,,Wed Jun 06 15:16:10 UTC 2012,,,,,,0|i07gp3:,41471,,,,,,,,"17/Apr/12 11:15;ggezer;A simple fix to also keep file location in DirectoryResourceStore and use it while updating MANIFEST.

If not supplied, then default path will be assigned by directoryPojoization()","06/Jun/12 06:06;clement.escoffier;Could you add a unit test, just to avoid I mess up everything later ?","06/Jun/12 15:16;ggezer;Sure,

I added the test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multi root resolve operations may cause duplicate blame chains to be created,FELIX-3465,12551114,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,16/Apr/12 18:40,25/May/12 18:10,14/Mar/19 02:48,25/May/12 18:10,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,Resolver,,,,,0,,,,,,"I am using the resolver as a ""multi-root"" resolver in order to resolve all my resources in one pass.  This may cause org.apache.felix.resolver.ResolverImpl.calculatePackageSpaces to be called multiple multiple times for the same resource if it is required by multiple resources in the set of resources that is being resolved.  This causes an artificial explosion of blame candidates when trying to determine a consistent class space solution.  Ultimately this leads to a very long resolution process or worse case an out of memory error.",All,,,,,,,,,,,,,,,FELIX-3521,,,,16/Apr/12 18:43;tjwatson;3465.txt;https://issues.apache.org/jira/secure/attachment/12522830/3465.txt,25/May/12 17:13;rickhall;FELIX-3465-FIX.txt;https://issues.apache.org/jira/secure/attachment/12529750/FELIX-3465-FIX.txt,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-16 19:20:05.07,,,no_permission,,,,,,,,,,,,235978,,,Fri May 25 18:10:04 UTC 2012,,,,,,0|i07fxz:,41349,,,,,,,,16/Apr/12 18:43;tjwatson;Possible fix.  I simply checked if the resourcePkgMap already contains the resource key and return immediately if so.,"16/Apr/12 19:20;rickhall;Committed the patch to both framework and resolver. This was a good catch. This performance issue was introduced in framework 4.0.0 when we moved toward the OBR resolver API which allows for multiple roots. Typically, we don't use a multi-rooted approach, so we didn't notice.","25/May/12 15:33;rickhall;Reopening because this patch has caused a regression, see FELIX-3521. Apparently, we need to be smarter.","25/May/12 17:13;rickhall;The regression is caused by the fact that the original patch not only prevents duplicate package space calculations, it also prevents valid package space calculations.

This is because we preliminarily calculate exported packages for candidates and put them into the package space map, but the associated package space isn't fully calculated yet. The original patch prevents these partially calculated packages spaces from being fully calculated.

I've attached a patch to remedy this situation by adding a boolean to the Packages object to indicate whether it is fully calculated or not. Not very elegant, but I can't think of anything better.","25/May/12 18:10;rickhall;Ok, I applied the proposed patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple hosts for a fragment that exports a package causes ArrayIndexOutOfBoundsException,FELIX-3463,12550983,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,tjwatson,tjwatson,15/Apr/12 12:19,24/Mar/15 18:01,14/Mar/19 02:48,16/Apr/12 16:00,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"Sample manifests:

Bundle-ManifestVersion: 2
Bundle-SymbolicName: h1
Bundle-Version: 1.0.0
Export-Package: 
 h1.a; version=1.0,
 h1.b; version=1.0; uses:=""h1.a""

Bundle-ManifestVersion: 2
Bundle-SymbolicName: h1
Bundle-Version: 1.1.0
Export-Package: 
 h1.a; version=1.0,
 h1.b; version=1.0; uses:=""h1.a""

Bundle-ManifestVersion: 2
Bundle-SymbolicName: f1
Bundle-Version: 1.0.0
Export-Package: 
 f1.a; version=1.0;uses:=""h1.a""
Fragment-Host: h1

Bundle-ManifestVersion: 2
Bundle-SymbolicName: b3
Bundle-Version: 1.0.0
Import-Package: f1.a

Then attempt to resolve b3.  When inserting the HostedCapabilities an attempt is made to remove the original capability from the fragment.  But it has already been removed when processing the first host.  I think you could do a simple check for -1 before attempting to remove the original capability.


java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.remove(ArrayList.java:390)
	at org.apache.felix.resolver.Candidates.prepare(Candidates.java:760)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:125)
	at org.eclipse.osgi.container.ModuleResolver$ResolveProcess.resolve(ModuleResolver.java:378)
	at org.eclipse.osgi.container.ModuleResolver.resolveDelta(ModuleResolver.java:47)
	at org.eclipse.osgi.container.ModuleContainer.resolve(ModuleContainer.java:238)
	at org.eclipse.osgi.tests.TestModuleContainer.testMultiHost(TestModuleContainer.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

",All,,,,,,,,,,,,,,,,,,,16/Apr/12 15:03;tjwatson;3463.txt;https://issues.apache.org/jira/secure/attachment/12522779/3463.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-16 16:00:18.607,,,no_permission,,,,,,,,,,,,235847,,,Tue Mar 24 18:01:02 UTC 2015,,,,,,0|i07g67:,41386,,,,,,,,16/Apr/12 15:03;tjwatson;Possible fix.,16/Apr/12 16:00;rickhall;I've applied the patch.,24/Mar/15 15:57;dnk;Could you please clarify - for which version the fix was applied?,"24/Mar/15 15:59;dnk;I have the same exception in version 4.2.1:
{noformat}
java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.elementData(ArrayList.java:400)[:1.7.0_75]
	at java.util.ArrayList.remove(ArrayList.java:477)[:1.7.0_75]
	at org.apache.felix.framework.resolver.Candidates.prepare(Candidates.java:767)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.resolver.ResolverImpl.resolve(ResolverImpl.java:122)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:403)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3967)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2037)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)[org.apache.felix.framework-4.2.1.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)[org.apache.felix.framework-4.2.1.jar:]
{noformat}","24/Mar/15 18:01;rickhall;This is an issue for the resolver subproject, not for the framework's resolver. The resolver subproject is based on the framework's resolver, but it is not the same...although there is work underway (and it was always the goal) to move the framework to the resolver subproject.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-manipulation with annotated component produces corrupted MANIFEST,FELIX-3461,12550956,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,ggezer,ggezer,14/Apr/12 21:15,04/Feb/13 12:34,14/Mar/19 02:48,17/Apr/12 16:11,,,,,,,ipojo-manipulator-1.8.6,,,,,,,iPOJO,,,,,,0,ipojo-manipulator,,,,,"As the manipulation process alters the annotations of original classes on generated ones. It leaves it in inconsistent state for re-manipulation. While re-manipulation process does not touch classes, re-manipulated bundle is unable to function because of a corrupted MANIFEST.

Broken MANIFEST is missing some handler declarations because of the filters and have entries in manipulation section those should have been hided.",,,,,,,,,,,,,,,,,,,,17/Apr/12 07:57;sauthieg;FELIX-3461-GSA.patch;https://issues.apache.org/jira/secure/attachment/12522922/FELIX-3461-GSA.patch,14/Apr/12 21:17;ggezer;org.apache.felix.ipojo.manipulator.patch;https://issues.apache.org/jira/secure/attachment/12522688/org.apache.felix.ipojo.manipulator.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-16 20:09:15.278,,,no_permission,,,,,,,,,,,,235820,,,Tue Apr 17 19:10:28 UTC 2012,,,,,,0|i07gwn:,41505,,,,,,,,"14/Apr/12 21:17;ggezer;Fix for bug.

Tested against all current ipojo annotations and custom annotations to produce same MANIFEST after re-manipulation on both directory and jar-file.",16/Apr/12 20:09;sauthieg;Why did you do some changes on ConstructorCodeAdapter.java in visitParameterAnnotation() ?,"16/Apr/12 20:37;ggezer;Method was not implemented before, i overrided it. Reason is to prevent parameter annotations(only @Property and @Requires) of original constructor to go into generated one. And i also changed ClassChecker.AnnotationCollector.visitParameterAnnotation() method to keep those parameter annotations in original constructor. By keeping injection annotations in original constructor, they are interpreted correctly at re-manipulation time without doing any harm to runtime semantics. Otherwise parameter indexes are interpreted in the context of generated cosntructor with additional InstanceManager reference, thus causing injection parameters to be assigned wrong type identifier at re-manipulation. (Injecting services and parameters still works in runtime with those changes).

While writing this, I also noticed that this fix can be implemented another way:

in ConstructorCodeAdapter.visitParameterAnnotation():

if(desc.equals(""Lorg/apache/felix/ipojo/annotations/Property;"")
        		|| desc.equals(""Lorg/apache/felix/ipojo/annotations/Requires;"")){
    		return null;
        }
    	else{
    		return super.visitParameterAnnotation(parameter+1, desc, visible);
    	}

returning super.visitParameterAnnotation with parameter index incremented by 1, because InstanceManager is added to the first position in argument list. Then we can remove the code i added to the ClassChecker.AnnotationCollector.visitParameterAnnotation() safely.","16/Apr/12 23:46;ggezer;Oh no! the second way that i proposed in my comment will not work. Incremented parameter index fixes the type of property at re-manipulation but because of the changed index, ""properties"" section will contain false constructor parameter index causing constructor registration code to fail.

I thought it may save us from modifying code at 2 place but doing it introduces problems that can not be handled nicely. So i believe we must treat constructors differently then the other methods.","17/Apr/12 07:29;sauthieg;OK, it's definitely a different issue.
Can you open a new bug for that specific issue (annotations on constructor arguments are not correctly handled) ?

I'll add a new patch soon just for this case, I clean metadata at the root (ie when they are produced), instead that fixing it at rendering time.
","17/Apr/12 07:57;sauthieg;This new patch hide the generated methods/fields from the metadata produced in the ClassChecker.

If the checker find that the class has already be manipulated, no further manipulation is done, so it should be good.

Can you try it ?

BTW, If possible, can you add a specific TestCase for your issue ?","17/Apr/12 10:48;ggezer;No the FELIX-3461-GSA.patch didn't work. And it can't work actually. By skipping all manipulated methods and fields at re-manipulation time,You are loosing all annotations those are moved to generated ones at first manipulation time. So you loose properties, transition methods, dependency ids, almost everything on both components and handlers. 

If you want to do it in ClassChecking time instead of rendering time, you have to make sure all annotations of ipojo are sticked to the original methods and fields, which clearly brokes IPojo's documented behaviour. And to do that also you have to introduce lots of custom codes into ClassCheckers and GeneratorAdaptors, because you can not do that to every annotation, you have to do that for only ipojo specific annotations.

The only bad-apple here is constructors, because they add an additional InstanceManager argument to generated constructor. To do that they must be manipulated in a way that renderer can handle them at re-manipulation time along with the others. And in case of rendering, the ManipulationMetadataFilter is not a viable solution. First of all it is searching all the attributes of all Elements against special headers, which is not performance wise. And it does not work correctly because you have to establish a match between manipulation methods and fields before blindly deleting them by looking at their method name. Also there is a TODO comment at the ManipulationMetadataFilter which depicts that. Also this is what ManipulationMetadataFixer at first patch is intended to do.

","17/Apr/12 13:27;sauthieg;Can we come back to the root of the issue ?

The ClassChecker is only here to ensure that manipulated classes are not manipulated again.
It doesn't usually care about validity of its discovered metadata.

I assume that what you observe is that an existing MANIFEST with an IPOJO-Components with multiple (ans equivalent) component {...} definitions.
Is that the problem ?","17/Apr/12 13:43;ggezer;We already are at the root !

ClassChecker is intended to to that, right. But then the metadata that ClassChecker has been collected is being used to generate MANIFEST, and that's the problem. Not also manifest by the way. ClassChecker visits the methods and while visiting, it collects the annotations and parameter annotations of the methods(including constructors) and that information is used in MethodCreator to modify constructors again. So ClassChecker's collected informations are important here, they're not just for checking whether manipulation is occured, they're used after checking process. That's why i modified ClassChecker and added exception for injection annotations. Otherwise modified constructor will not contain injection annotations. And also modified ConstructorCodeGenerator to prevent them from going into generated constructor.

Process is two step:
First we must make sure first manipulation does not leave constructor annotations in inconsistent state for second manipulation,
Secondly we fix all the manifest data in rendering step so they reflect initial component state in any manipulation attempt.

No your assumption is not the case. It results in a single component{} with corrupted values, not multiple component{} decleration.","17/Apr/12 13:54;sauthieg;Can you provide a JUnit TestCase that reproduce the issue ?
","17/Apr/12 14:12;ggezer;Unfortunately this issue is not easy to reproduce or wrap in TestCase. At least i don't know an easy way to write it. But here is the steps for you to see it in action:

* Create a simple bundle which is not manipulated with either mave-ipojo or bnd-ipojo plugin with the content:
@Component
public class TestComponent
{
  public TestComponent(@Property String hi){}
  
  @Validate
  public void validated()
}

* Manipulate that jar using Pojoization.pojoization() method.
I did it by creating seperate project under manipulator, and using Pojoization to simply do pojoization.

* Copy the MANIFEST in manipulated jar somewhere. This MANIFEST will be correct without any error.

* And then re-run pojoization on manipulated jar again.(The one manipulator extracted as <bundleName>_out.jar

* Then look into MANIFEST file of 2. manipulated jar, and you'll see ""validate"" transition is gone, and constructor argument @Property ""hi"" will be interpreted as ""ipojo.InstanceManager"" type. And you will see __M methods in manipulation section. If you try adding more annotations you'll see more errors in final MANIFEST.","17/Apr/12 14:14;sauthieg;Let me try to put it differently:
For me, we have 2 separate issues here:
#1 annotations on constructor's arguments are not correctly handled
#2 produced metadata at the end of the manipulation is somehow incorrect when resource is manipulated a second time

right ?","17/Apr/12 14:28;ggezer;Yeah, but they are heavily interconnected.

#1: yeah they are not correctly handled, because they are handled the same way with other methods, while they have seperate characteristic.
#2: Metadata is not wrong,MANIFEST also is not wrong. They are what they should be. But for second manipulation, they must be interpreted specifically.

So if #1 is solved, then #2 can be solved. Trying to solve only #2 leaves #1 and whole issue unfixed. So fixing #1 is a contribution to fixing #2.

If you perform the steps i wrote, you'll see the problem. And then re-performing with patch applied will make sense.","17/Apr/12 14:52;clement.escoffier;Hi,

I've reproduced part (all?) of the issue.
I've a class with PlentyOfAnnotations - including constructor, class, field and method annotations. It use both iPOJO core annotations but also external handler annotations.

* I extract the metadata from the class - the metadata are ok
* I manipulate the class a first time - manipulation metadata ok
* I extract a second times the metadata from the manipulated class - the metadata are not ok... the method are wrong and the index parameters are shift by 1.
* I manipulate a second time - manipulation metadata ok but including all the new methods.

My test is checking both the manipulation (and the computation of the manipulation metadata) and the metadata collected from the classes.

Do I cover everything ? 

","17/Apr/12 14:56;ggezer;Yeah those are the steps i'm taking.

If you look into second MANIFEST you'll see transition methods ""invalidate"" ""validate"" and ""properties"" section also have gone in addition to new methods and fields.","17/Apr/12 15:01;ggezer;Here is the problem list after second manipulation on MANIFEST as i saw:

* transition methods are gone(validate,invalidate)
* Bind/Unbind/Modified section on methods have gone
* Constructor property indexes are shifted by 1 causing wrong type resolution
* manipulation methods and fields have been introduced into MANIFEST","17/Apr/12 15:07;clement.escoffier;In my test I don't write the manifest as I just read the Element-Attribute structure (it's really a unit test).

I don't see the 'transition methods gone' effect. The metadata re not correct but still here:
callback transition=""validate"" method=""__M_start"", instance component=""test.PlentyOfAnnotations""

I've all the other effects. So I can now have a look to your patch and check what it is doing 'for real'.","17/Apr/12 15:09;clement.escoffier;For information here is the test: https://gist.github.com/2406634
","17/Apr/12 15:10;ggezer;Yeah but this line:

callback transition=""validate"" method=""__M_start"", instance component=""test.PlentyOfAnnotations"" 

will be discarded by ManipulateMetadataFilter in rendering step because its attribute contains MethodCreator.PREFIX , thus causing it to not go into MANIFEST file...","17/Apr/12 16:11;clement.escoffier;I've applied a mix of both patch + some spices from me.

Please check with the trunk version.

","17/Apr/12 19:10;ggezer;i confirm, issue is fixed.

Thanks,",,,,,,,,,,,,,,,,,,,,,
Resolver should populate results with wires to self,FELIX-3458,12550877,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,tjwatson,tjwatson,13/Apr/12 21:06,10/May/12 18:38,14/Mar/19 02:48,10/May/12 18:38,,,,,,,,,,,,,,Resolver,,,,,,0,,,,,,"Except for the osgi.wiring.* namespaces, I think all other namespaces should include results where the Wire has the same provider and requirer.  Currently org.apache.felix.resolver.ResolverImpl.populateWireMap() has a check omits the wire from the result if a resource requriement gets wired to its own capability.

This has to be done for osgi.wiring.package namespace because that is a case where the import got dropped in favor of the export.  But for other namespaces I am not sure that is a valid assumption.
",All,,,,,,,,,,,,,,,,,,,10/May/12 17:08;rickhall;FELIX-3458.txt;https://issues.apache.org/jira/secure/attachment/12526373/FELIX-3458.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-10 17:08:12.205,,,no_permission,,,,,,,,,,,,235741,,,Thu May 10 18:38:23 UTC 2012,,,,,,0|i07fz3:,41354,,,,,,,,10/May/12 17:08;rickhall;Suggested patch.,"10/May/12 17:57;tjwatson;The patch looks good.  Richard, as you may recall we had a discussion around require-bundle.  At one point during the R4 spec process we had debated around allowing a bundle to require itself.  I thought that may have made it into the specification, but I do not see it so I think it is safe to exclude all osgi.wiring.* namespaces in the check like you are doing.

+1
",10/May/12 18:38;rickhall;Patched committed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component ignores required static service addition when in Activating state,FELIX-3456,12550715,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,djencks,ricellis,ricellis,12/Apr/12 17:00,20/Nov/12 10:58,14/Mar/19 02:48,05/Oct/12 18:42, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I have a component with two required static service references (A and B). In my scenario A and B are registered nearly simultaneously on different threads and this causes the DependencyManager to ignore the addition of one of these two services (B). This causes the component to remain unsatisfied and never activate, since the service that was ignored is not re-registered at any time and nothing subsequently causes the component to re-activate.

This happens as follows:
12:30:59:317 Thread 1 - Registers Service B/257
12:30:59:320 Thread 2 - Registers Service A/258
12:30:59:320 Thread 2 - Dependency Manager: Adding Service A/258
12:30:59:321 Thread 2 - Dependency Manager: Service serviceA registered, activate component
12:30:59:321 Thread 2 - State transition : Unsatisfied -> Activating
12:30:59:321 Thread 2 - Activating component
12:30:59:321 Thread 1 - Dependency Manager: Adding Service B/257
12:30:59:321 Thread 2 - Dependency not satisfied: serviceB
12:30:59:321 Thread 1 - Dependency Manager: Added service serviceB is ignored for static reference <--- I believe we end up here because Thread 2 has moved the component from Unsatisfied to Activating and the reference is a static reference
12:30:59:321 Thread 2 - Not all dependencies satisified, cannot activate
12:30:59:321 Thread 2 - State transition : Activating -> Unsatisfied

Because the addition of Service B has been ignored and serviceB is a required dependency my component then never activates even though my reqiured service is present.

There is a comment in DependencyManager#serviceAdded method:
// FELIX-1413: if the dependency is static and the component is
// satisfied (active) added services are not considered until
// the component is reactivated for other reasons.

This suggests that the static service should only be ignored if the component is satisfied(active), which would be correct, but in this case the component is only activating (and will fail to activate because one of the two dependencies is not yet satisfied) and there is no check of state at this time.
A simple fix would be to check the state of the component as well as if the service is static e.g.
replace if ( m_dependencyMetadata.isStatic() )
with if ( m_dependencyMetadata.isStatic() && m_componentManager.getState() == AbstractComponentManager.STATE_ACTIVE )

This is an easy fix, but I guess may leave a small window where a static reference could get replaced while a component was still activating if another instance of the same service was registered on a different thread.
There are other fixes that could be done by synchronizing more around service additions.

Is anyone willing to make this fix or does anyone have any thoughts about this issue?
Thanks",Using org.apache.felix.scr svn rev 1298268 on Mac,,,,,,,,,,,,,,,,,,,27/Apr/12 00:32;fraenkel;FELIX-3456-1.1.diff;https://issues.apache.org/jira/secure/attachment/12524796/FELIX-3456-1.1.diff,13/Apr/12 07:15;djencks;FELIX-3456-1.diff;https://issues.apache.org/jira/secure/attachment/12522537/FELIX-3456-1.diff,18/Apr/12 01:19;djencks;FELIX-3456-3.diff;https://issues.apache.org/jira/secure/attachment/12523061/FELIX-3456-3.diff,19/Apr/12 07:41;djencks;FELIX-3456-4.diff;https://issues.apache.org/jira/secure/attachment/12523313/FELIX-3456-4.diff,15/May/12 17:48;djencks;FELIX-3456-5.diff;https://issues.apache.org/jira/secure/attachment/12527477/FELIX-3456-5.diff,15/May/12 17:48;djencks;FELIX-3456-5a.diff;https://issues.apache.org/jira/secure/attachment/12527478/FELIX-3456-5a.diff,15/May/12 17:48;djencks;FELIX-3456-5b.diff;https://issues.apache.org/jira/secure/attachment/12527479/FELIX-3456-5b.diff,22/May/12 01:04;djencks;FELIX-3456-7.diff;https://issues.apache.org/jira/secure/attachment/12528543/FELIX-3456-7.diff,22/May/12 01:04;djencks;FELIX-3456-7a.diff;https://issues.apache.org/jira/secure/attachment/12528544/FELIX-3456-7a.diff,15/Jun/12 22:41;djencks;FELIX-3456-8.diff;https://issues.apache.org/jira/secure/attachment/12532254/FELIX-3456-8.diff,19/Jun/12 00:09;djencks;FELIX-3456-8a.diff;https://issues.apache.org/jira/secure/attachment/12532484/FELIX-3456-8a.diff,18/May/12 21:46;fmeschbe;FELIX-3456-fmeschbe-6.patch;https://issues.apache.org/jira/secure/attachment/12528173/FELIX-3456-fmeschbe-6.patch,05/May/12 16:32;fmeschbe;FELIX-3456-fmeschbe.patch;https://issues.apache.org/jira/secure/attachment/12525732/FELIX-3456-fmeschbe.patch,13.0,,,,,,,,,,,,,,,,,,,2012-04-12 17:38:20.237,,,no_permission,,,,,,,,,,,,235579,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i05fj3:,29613,,,,,,,,"12/Apr/12 17:38;djencks;After a very brief look I don't understand how this would result in correct behavior.  I think that if the state is ""activating"" we would need to wait until it gets back to ""unsatisfied"" and then try activateInternal again.  Otherwise won't we be binding the service but not checking if all the activation conditions are met?  What will check and get the service to activate if all the conditions are now met?  How about if there are 3 required services and we only have 2 of them?

I think we need some thread synchronization and if the state is not unsatisified or active wait until it gets to one of those before proceeding.

As I said this is after a very brief look, please think carefully before agreeing with me :-)","12/Apr/12 17:47;ricellis;On second thoughts I'm not sure my proposed fix goes far enough because even though it allows the second service to attempt to be bound, there is no guarantee that this bind operation will complete in a timely enough fashion for the activate process triggered by the first service to complete successfully. I think some synchronization will probably be required.","12/Apr/12 17:50;ricellis;If only my browser had refreshed faster I could have agreed with you already David instead of disagreeing with myself :)
I do agree David, my hasty attempt at a fix without a full understanding of the code is not correct.",13/Apr/12 07:15;djencks;This synchronized some state changes in Componentmanager and uses an AtomicInteger for DependencyManager.size.  I realize that using modern concurrency techniques is going to require some debate :-) but I'm putting this out for review and testing.,"13/Apr/12 18:20;fmeschbe;Thanks for reporting. This is in fact an issue.

I am not against replacing the size int by an AtomicInteger; in the interest of concurrency stability this might make sense. (though this might prevent SCR from being used in pre-Java 5 setups; we still consider this requirement valid for SCR)

But I am not convinced with the state lock. This going to be dangerous for deadlocks because during activate and deactive services may be registered or unregistered, which may cause deadlocks: We currently have one single situation where we synchronize (creation of delayed component service instances) and we realize occasional deadlocks.

Thinking the other way around: We have some transient states during which events may happen which may get lost. One such transient state is the activating state. And this is such an event which may get lost. Another event may be a configuration update.

I have been contemplating some kind of event queuing and some way of processing such a queue when leaving the transient state.

In the concrete example:

T1 registers Service A, causes component into the ACTIVATING state
T2 registers Service B, enqueues event since component is ACTIVATING
T1 terminates ACTIVATING, checks queue and handles event.

The queue could be as simple as a list of Runnable on each component manager.","14/Apr/12 02:13;djencks;Just in case anyone was wondering, as I was, I checked the spec and (4.3 section 5.3) all service events must be delivered synchronously.  Thus there is definitely a possibility of deadlocks if we're not careful (more careful than my patch).

A colleague tried a completely asynchronous model for service events in scr and although start seemed to work, stopping resulted in a lot of work on stopped bundles and component objects.  I think if we can convince ourselves that it conforms to the spec this is a viable approach but it will take quite a bit of work to identify all the cases where we're working with closed stuff.

I wonder to what extent we can remove the deadlock scenarios by
(a) avoiding the synchronized block entirely when possible.  For instance the first place we found this, DependencyManager.serviceAdded, I think we can skip the block I synchronized if the dependency is not mandatory, because if its not mandatory it showing up can't result in service activation.
(b) avoiding calling out, such as the bind and unbind methods, from a synchronized block.  This might be a wacky and non-plausible idea....  We might have an internal and external state.  for instance:

thread 1 supplies service A
thread 1 gets the lock and updates internal and external state to ""activating""
thread 2 supplies service B and can't get the lock
thread 1 does the calculations in Unsatisfied.activate up to the point where it calls out to the bind methods, and then updates the internal state to ""active"" and releases the lock
thread 2 gets the lock and sees the internal state is ""active"" so it doesn't do much except release the lock
thread 1 finishes calling the bind methods and updates the external state to ""active"".
","14/Apr/12 11:15;fmeschbe;> A colleague tried a completely asynchronous model for service events in scr and although start seemed to work,
> stopping resulted in a lot of work on stopped bundles and component objects

Been there done that ... SCR was fully asynchronous at one point in time.

Stopping failed miserably because services have been gone when the component was about to be stopped and expected statically bound services to still be available.

Startup worked correctly and the spec does not favor one or the other (I think there is nothing about synchronicity in the spec). I converted to synchronous startup to have better control during system startup (namely to have all components activated when the FRAMEWORK_STARTED event is fired by the framework). In fact, it is quite nice to have all components fuly handled once the bundle's STARTED or STOPPED event is fired. (This is one of my concerns with blueprint which is asynchronous and makes it hard to reason about system state).

Overall and in hindsight it looks like synchronous startup is preferable to asynchronous startup.

BTW: The last time I checked, Equinox DS was also fully synchronous.

> We might have an internal and external state.

In your proposal thread 2 waits for the lock and thus thread 1 and thread 2 are susceptive to deadlocks. Particularly if you take another service into account .... The reason for this is, that when a service is supplied we are called back from the framework and thus have to be extremely carefull since the framework may still hold locks (for example bundle locks during bundle start)","18/Apr/12 01:19;djencks;This implementation synchronizes larger chunks of code and uses locks so that a possible deadlock will timeout.  The idea is to have a queue of work to do.  A thread will add its work to the queue and try to get the lock if it doesn't already have it.  If it succeeds within the timeout then it will run all the work items in the queue.

I believe this means that unless there is a timeout, the work will complete before the thread returns.  The work may get done on a different thread.",19/Apr/12 07:41;djencks;This uses the same idea as the previous patch but fully synchronizes the enable and disable methods and the service factory getService and ungetService methods.,"27/Apr/12 00:32;fraenkel;The first patch needs to synchronize access when retrieving the actual Service.
There is a race when a component is activated and then registers its service.  If you have multiple dependents, one of them can request the service before it completes all binds.  Logically, the transition to REGISTERED is not complete until the service has completed registration.","05/May/12 16:32;fmeschbe;Here is a patch following my earlier proposal with an added delay to give the component a chance to settle on a steady state.

This implements the activate, deactivate and disable methods in the Activating state which is the transient state active while the component is being activated in the Unsatisifed.activate method.

These implementations delay for 500ms and check the current state again (whether it is still Activating). If not, the original call is tried again on the AbstractComponentManager. If still Activating, a Runnable is enqueued which calls the original method again on the AbstractComponentManager.

The Unsatisifed.activate method checks whether there are any enqueued Runnable instances and executes them one after the other, if so.

This patch has a slight problem: It may treat reactivation (deactivate-then-activate) incorrectly in that deactivate might be enqueued while activate might be called directly. This could be solved by introducing a new reactivate method comprising both state transitions.","14/May/12 17:37;djencks;I'm afraid I don't think the approach in FELIX-3456-fmeschbe.patch is workable.   I have 3 main objections:

1. I don't think it is acceptable to return from a event that might have changed the state without doing the work.  Thus I don't think any asynchronous processing is acceptable unless specifically mandated by the spec (as for enable/disable).  One of my suggestions had a similar ""queue work we can't do right now"" approach and the results were too unpredictable.

2. A hardcoded wait time is a bad solution to the problem.  You can avoid the fixed wait by using a lock with a timeout.  Also this is a radically out of order proposal.  In the half-second the state may have gone back and forth between e.g. active and inactive and enabled and disabled many times.

3. If you replace the delayAndCheck with a lock, or regard it as a new style of lock, the locks are too small.  The locks should be around the entire event processing.  The only part of the processing that can take any time is calling out to the framework and config admin, which has to happen in the locked region anyway.  So locking the entire event processing won't take any longer and will make the effect of the code more possible to understand.","15/May/12 01:24;djencks;Here's my latest suggestion.  This involves using java 5 concurrency.  We can discuss how to handle backwards compatibility but lets decide on the code changes first.

the 5a patch removes the *ing states which won't really be visible except accidentally due to locking, and makes the enable/activate and disable/deactivate happen per spec as enable/disable immediate and activate/deactivate asynchronous.

the 5b patch uses a fair reentrant lock with timeout exception around the large-scale events that can change state.

the 5 patch combines 5a and 5b.

Since attach-file isn't working right now I've uploaded the diffs to
https://people.apache.org/~djencks/FELIX-3456-5a.diff
https://people.apache.org/~djencks/FELIX-3456-5b.diff
https://people.apache.org/~djencks/FELIX-3456-5.diff
",15/May/12 17:48;djencks;I think these are an OK solution to the concurrency problems.  They use java 5 concurrency and don't yet address pre-1.5 compatibility.,"17/May/12 13:51;fmeschbe;> makes the enable/activate and disable/deactivate happen per spec as
> enable/disable immediate and activate/deactivate asynchronous. 

As I said before, these are already asynchronous because the BundleComponentActivator.enableComponent and .disableComponent schedule the actual call to activateInternal and deactivateInternal for asynchronous execution.","17/May/12 22:31;djencks;>> makes the enable/activate and disable/deactivate happen per spec as
>> enable/disable immediate and activate/deactivate asynchronous.

>As I said before, these are already asynchronous because the BundleComponentActivator.enableComponent and .disableComponent schedule the actual call to activateInternal and deactivateInternal for asynchronous execution. 

The activate/deactivate were already asynchronous but the enable/disable were too, which is contrary to the spec and IMO a pretty bad idea.  This part of my change is to separate the enable from activate and disable from deactivate.  I think we haven't heard of problems only because no one uses this much.  But, maybe the requirement in the spec just makes no sense and I don't see why yet.
","18/May/12 21:46;fmeschbe;Modified patch 5:

* Use Doug Lea's ReentrantLock from his concurrent library. Is also embedded in the final bundle.
* The satisfied state has to be set before creating the component in the Unsatisified.activate method. Otherwise a stack overflow may happen (if the component registers services in the activator to which it has a reference).
* Slight fix to the AbstractComponentManager.getSatisfiedState method due to moved state change (see above) for ComponentFactory component instances.

I checked this patch with our application, which seems to work.

I am still not fully convinced with locking and throwing. On the other hand this gives log messages in case of concurrency issues as opposed to today, where such issues are not recognized/recorded.

In the end I think, I can live with this patch now.

Does it fix your problem ?","22/May/12 01:04;djencks;I like most of your patch and appreciate your fixing the sync enable for default-enabled components.

There are still a couple problems:
1. I'd like a fair reentrant lock, doug lea's original doesn't appear to be fair.  I tried to use the emory dcl backport-util-concurrent which does implement a fair lock but AFAICT it would require exporting sun.misc from the framework which I don't think is acceptable.  So, I implemented something I think will work where the java.util.concurrent reentrant lock is used if available and if not doug lea's unfair lock.

2. There were some problems around state change and trying to activate while binding services.  Basically the solution to 3317 is no longer relevant and we can simplify the code a bit more.  The state change to Active has to happen earlier before checking the dependency managers or you always get the component created several times, registered, and then unregistered.  We have enough locking already :-)","22/May/12 01:05;djencks;oops, 7 is the full patch, 7a is a diff from your -6 patch.","31/May/12 12:29;fmeschbe;> So, I implemented something I think will work where the java.util.concurrent
> reentrant lock is used if available and if not doug lea's unfair lock.

+1

> Basically the solution to 3317 is no longer relevant and we can simplify the code a bit more.

Right.","31/May/12 13:07;fmeschbe;I have commited the final patch 7 in Rev. 1344701

Tests still pass. Please verify in your environment. Thanks.","15/Jun/12 22:41;djencks;We're finding some deadlocks with the current code.   Following some suggestions from Michael Fraenkel, I changed to a read-write lock for creating the component instance and a CAS strategy for registering the service.  This patch is not complete, it doesn't deal with ServiceFactory or (I think) ComponentFactory and I didn't implement the backwards compatible lock wrapper yet, but I'm putting it out for comments anyway.","19/Jun/12 00:09;djencks;same result as previous patch but applies to current trunk.  I'm not sure how to functionally improve this, I'm tempted to suggest applying it.","05/Oct/12 18:42;djencks;This problem is fixed, although there are other concurrency problems remaining.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,
Framework JARs for JDK 7,FELIX-3455,12550686,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,puce,puce,12/Apr/12 14:54,02/May/13 02:30,14/Mar/19 02:48,31/Aug/12 22:25,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,Main,,,,,0,build,,,,,"In Java SE 7 projects I get the following error:
[WARNING] Signature attribute introduced in version 49.0 class files is ignored in version 48.0 class files
...
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] <some class> error: incompatible types
[ERROR]     Object

I've read about this issue here:
http://www.mail-archive.com/users@felix.apache.org/msg11574.html

and here:
http://stackoverflow.com/questions/4058661/java-compilers-target-version-jsr14-with-jdk7-8

The according JDK bug report has been closed as ""Not a Defect"": http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7078419

So this has to be fixed on Apache Felix side.

Please deploy a version to Maven Central which works with Java SE 7.",Linux Kubuntu 11.04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-12 15:19:46.438,,,no_permission,,,,,,,,,,,,235550,,,Fri Aug 31 22:25:37 UTC 2012,,,,,,0|i07guf:,41495,,,,,,,,"12/Apr/12 15:19;rickhall;I'm fine if we switch the framework to target Java 5 by default rather than jsr14, which should solve the issue, but that will have to wait for the next release.","12/Apr/12 15:35;puce;OK, great. Any timeline for this? There's not much information on the roadmap page: https://felix.apache.org/site/roadmap.html","12/Apr/12 15:39;rickhall;Not really. Until then, just recompile it yourself.",16/Jun/12 19:14;rickhall;Updated framework and main pom files to target 1.5.,31/Aug/12 21:13;puce;I'm still getting the same issue with framework-4.0.3,"31/Aug/12 22:25;rickhall;Notice the ""fix version"" on this issue, it is framework 4.2.0 not 4.0.3...i.e., it hasn't been released yet. If you want to try it out you need to build from trunk or use the latest snapshot. Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EventAdmin ignoring filters for handler which are registered for all (*) topics,FELIX-3453,12550531,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,chetanm,chetanm,11/Apr/12 13:41,18/Sep/12 20:06,14/Mar/19 02:48,11/Apr/12 14:00,eventadmin-1.3.0,,,,,,eventadmin-1.3.0,,,,,,,Event Admin,,,,,,0,,,,,,"Apache Sling has a DistributingEventHandler [1] which is registered with following properties
- event.topics=*
- event.filter=(event.distribute=*)

However at runtime the handler still gets events which does not have event.distribute property set. Looking at EventHandlerProxy.update [2] it appears that EventHandler's filter is ignored if the topic is set to *. 

Expected behavior is that EventHandlerProxy should also use the filter to determine which events are to be sent to the handler even if topic is set to '*'

[1] http://svn.apache.org/repos/asf/sling/trunk/bundles/extensions/event/src/main/java/org/apache/sling/event/impl/DistributingEventHandler.java
[2] http://svn.apache.org/viewvc/felix/trunk/eventadmin/impl/src/main/java/org/apache/felix/eventadmin/impl/handler/EventHandlerProxy.java?view=markup ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-11 14:00:05.479,,,no_permission,,,,,,,,,,,,235395,,,Wed Apr 11 16:17:44 UTC 2012,,,,,,0|i07g7r:,41393,,,,,,,,"11/Apr/12 14:00;cziegeler;Fixed in revision 1324766
The comment in the code was correct...the code was not",11/Apr/12 16:17;chetanm;That was fast!! Thanks Carsten,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Event plugin cannot send events without properties,FELIX-3449,12549855,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,06/Apr/12 09:05,02/Aug/13 14:52,14/Mar/19 02:48,06/Apr/12 09:06,webconsole-event-plugin-1.1.0,,,,,,webconsole-event-plugin-1.1.0,,,,,,,Web Console,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,234846,,,Fri Apr 06 09:06:39 UTC 2012,,,,,,0|i07g1j:,41365,,,,,,,,"06/Apr/12 09:06;v_valchev;fixed in rev.1310250

Also 
- the dialog content is not cleared after send, so you can easily send a similar event later
- added a reset dialog to clear the content",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
native2ascii doesn't work for event plugin,FELIX-3440,12549682,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,05/Apr/12 11:56,02/Aug/13 14:52,14/Mar/19 02:48,05/Apr/12 11:57,webconsole-event-plugin-1.1.0,,,,,,webconsole-event-plugin-1.1.0,,,,,,,Web Console,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,234673,,,Thu Apr 05 11:57:39 UTC 2012,,,,,,0|i07gz3:,41516,,,,,,,,05/Apr/12 11:57;v_valchev;fixed in rev.1309799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebConsole default ajax error handlers doesn't work with IE,FELIX-3433,12549504,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,v_valchev,v_valchev,v_valchev,04/Apr/12 14:15,23/Nov/12 06:54,14/Mar/19 02:48,04/Apr/12 14:16,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"When a plugin generates an error response to AJAX call, there is a default handler which will print the error message on the screen. It seems, that this doesn't work on IE 9. Instead of showing a styled dialog with the response, IE will show an error dialog and 'property not supported'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 06:54:46.72,,,no_permission,,,,,,,,,,,,234495,,,Fri Nov 23 06:54:46 UTC 2012,,,,,,0|i07gl3:,41453,,,,,,,,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AdapterImpl copies the DependencyManager.ASPECT service property when adapting an aspect.,FELIX-3423,12549331,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,uiterlix,uiterlix,uiterlix,03/Apr/12 14:15,03/Apr/12 18:24,14/Mar/19 02:48,03/Apr/12 14:29,,,,,,,,,,,,,,Dependency Manager,,,,,,0,,,,,,AdapterImpl copies the DependencyManager.ASPECT service property to the service properties of the adapter service when adapting an aspect. It should not copy this property.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-03 18:24:05.518,,,no_permission,,,,,,,,,,,,234322,,,Tue Apr 03 18:24:05 UTC 2012,,,,,,0|i07gx3:,41507,,,,,,,,03/Apr/12 14:29;uiterlix;Prevented the copy of the DependencyManager.ASPECT service property to the adapter's service properties.,03/Apr/12 18:24;marrs;Reviewed the patch. Looks good.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blocked Thread while shutting down Felix during iPojo service registration,FELIX-3421,12549280,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,dgay,dgay,03/Apr/12 06:17,21/Jan/14 18:55,14/Mar/19 02:48,11/Jul/13 10:13,iPOJO-1.8.0,,,,,,ipojo-runtime-1.10,,,,,,,Framework,iPOJO,,,,,0,block,bundle,ipojo,lock,thread,"Problem when Felix is starting up and iPojo services are still registering while and in the meantime a stop Felix is requested.
The code to stop Felix is : getBundle(0).stop()

By looking at the Thread Dump it appears that iPojo is synchronously dealing with a bundle being stopped while at the same time trying to register a service for that bundle.
Since the component framework is holding and/or needs its own internal lock when dealing with the stopped bundle and registering the service, we get into a deadlock situation, since both threads also need the bundle lock too.

ThreadDump (full TD in attachement):

""FelixStartLevel"" daemon prio=6 tid=0x0000000006d6c000 nid=0xb00 waiting for monitor entry [0x0000000007fbf000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at org.apache.felix.ipojo.IPojoFactory.removeFactoryStateListener(IPojoFactory.java:491)
                - waiting to lock <0x00000000c048c790> (a org.apache.felix.ipojo.ComponentFactory)
                at org.apache.felix.ipojo.InstanceCreator.removeFactory(InstanceCreator.java:187)
                at org.apache.felix.ipojo.Extender.closeManagementFor(Extender.java:156)
                at org.apache.felix.ipojo.Extender.bundleChanged(Extender.java:129)
                at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
                at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
                at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
                at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4245)
                at org.apache.felix.framework.Felix.stopBundle(Felix.java:2352)
                at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1215)
                at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
                at java.lang.Thread.run(Unknown Source)

""Thread-2"" daemon prio=6 tid=0x0000000007050800 nid=0x6d8 in Object.wait() [0x00000000084bd000]
   java.lang.Thread.State: WAITING (on object monitor)
                at java.lang.Object.wait(Native Method)
                - waiting on <0x00000000c029d238> (a [Ljava.lang.Object;)
                at java.lang.Object.wait(Object.java:485)
                at org.apache.felix.framework.Felix.acquireBundleLock(Felix.java:4872)
                - locked <0x00000000c029d238> (a [Ljava.lang.Object;)
                at org.apache.felix.framework.Felix.registerService(Felix.java:3206)
                at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
                at org.apache.felix.ipojo.IPojoContext.registerService(IPojoContext.java:338)
                at org.apache.felix.ipojo.handlers.providedservice.ProvidedService.registerService(ProvidedService.java:345)
                - locked <0x00000000eafc8ea0> (a org.apache.felix.ipojo.handlers.providedservice.ProvidedService)
                at org.apache.felix.ipojo.handlers.providedservice.ProvidedServiceHandler.__stateChanged(ProvidedServiceHandler.java:494)
                at org.apache.felix.ipojo.handlers.providedservice.ProvidedServiceHandler.stateChanged(ProvidedServiceHandler.java)
                at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:471)
                at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:353)
                at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:166)
                at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:301)
                - locked <0x00000000c048c790> (a org.apache.felix.ipojo.ComponentFactory)
                at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
                at org.apache.felix.ipojo.Factory$$Proxy.createComponentInstance(Unknown Source)
                at com.axway.cmp.ume.ui.internal.ComponentDefinition.__createAndStart(ComponentDefinition.java:147)
                at com.axway.cmp.ume.ui.internal.ComponentDefinition.createAndStart(ComponentDefinition.java)
                at com.axway.cmp.ume.ui.internal.ComponentDefinition.__validate(ComponentDefinition.java:85)
                at com.axway.cmp.ume.ui.internal.ComponentDefinition.validate(ComponentDefinition.java)
                at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
                at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
                at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
                at java.lang.reflect.Method.invoke(Unknown Source)
                at org.apache.felix.ipojo.util.Callback.call(Callback.java:237)
                at org.apache.felix.ipojo.util.Callback.call(Callback.java:193)
                at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86)
                at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:162)
                at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
                at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:471)
                at org.apache.felix.ipojo.InstanceManager.stateChanged(InstanceManager.java:1314)
                at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:496)
                at org.apache.felix.ipojo.HandlerManager.stateChanged(HandlerManager.java:239)
                at org.apache.felix.ipojo.Handler.setValidity(Handler.java:174)
                at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.__checkContext(DependencyHandler.java:186)
                - locked <0x00000000c048e1a8> (a [Lorg.apache.felix.ipojo.handlers.dependency.Dependency;)
                at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.checkContext(DependencyHandler.java)
                at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.__validate(DependencyHandler.java:149)
                at org.apache.felix.ipojo.handlers.dependency.DependencyHandler.validate(DependencyHandler.java)
                at org.apache.felix.ipojo.util.DependencyModel.validate(DependencyModel.java:642)
                at org.apache.felix.ipojo.util.DependencyModel.computeDependencyState(DependencyModel.java:310)
                at org.apache.felix.ipojo.util.DependencyModel.manageArrival(DependencyModel.java:399)
                at org.apache.felix.ipojo.util.DependencyModel.addedService(DependencyModel.java:335)
                at org.apache.felix.ipojo.util.Tracker$Tracked.trackAdding(Tracker.java:725)
                at org.apache.felix.ipojo.util.Tracker$Tracked.track(Tracker.java:686)
                at org.apache.felix.ipojo.util.Tracker$Tracked.serviceChanged(Tracker.java:647)
                at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
                at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
                at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
                at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4261)
                at org.apache.felix.framework.Felix.registerService(Felix.java:3276)
                at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
                at org.apache.felix.ipojo.IPojoFactory.start(IPojoFactory.java:591)
                - locked <0x00000000c048c790> (a org.apache.felix.ipojo.ComponentFactory)
                at org.apache.felix.ipojo.Extender.createAbstractFactory(Extender.java:439)
                at org.apache.felix.ipojo.Extender.parse(Extender.java:264)
                at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
                at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
                at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:682)
                at java.lang.Thread.run(Unknown Source)

",Win 7 / Java 1.6,,,,,,,,,,,,,,,,,,,03/Apr/12 06:20;dgay;threaddump-1333386501972.tdump;https://issues.apache.org/jira/secure/attachment/12521109/threaddump-1333386501972.tdump,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-15 07:25:07.961,,,no_permission,,,,,,,,,,,,234271,,,Thu Jul 11 10:13:06 UTC 2013,,,,,,0|i1av9j:,271531,,,,,,,,03/Apr/12 06:20;dgay;Full Thread Dump,"15/Apr/12 07:25;clement.escoffier;Hi,

From the thread dump, it's not clear it's related to iPOJO.

iPOJO is creating a component instance and to achieve this hold the lock on the factory (to avoid any state change while registering an instance). At the same time, Felix is stopped and so, the factory is stopped. The stopping process of the factory has to wait to acquire the factory lock. This is normal and expected.

The issue I don't get is why Felix is stucked during the service registration. As the registration is stucked, the instance creation never returns and as a consequence the lock on the factory is never released.","11/Jul/13 10:13;clement.escoffier;Should have been fixed in 1.10 as the instance creation and extender were totally refactored.

Please close if it's ok for you.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in DirectoryWatcher.findBundlesWithFragmentsToRefresh,FELIX-3416,12548991,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,msqr,msqr,01/Apr/12 08:28,17/Mar/15 06:58,14/Mar/19 02:48,11/Jun/12 15:23,fileinstall-3.2.0,,,,,,fileinstall-3.2.4,,,,,,,File Install,,,,,,0,,,,,,"I recently upgraded to File Install 3.2.0, and while testing an application came across this exception:

In main loop, we have serious trouble: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
        at java.util.HashMap$KeyIterator.next(HashMap.java:828)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.findBundlesWithFragmentsToRefresh(DirectoryWatcher.java:1247)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:475)
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:286)

Looking at the code, in the findBundlesWithFragmentsToRefresh() method, I see it iterates over a set while adding to the set, which violates the contract of the java.util.HashSet instance passed into the method:

protected void findBundlesWithFragmentsToRefresh(Set toRefresh) {
  for (Iterator iterator = toRefresh.iterator(); iterator.hasNext();) {
    ...
    toRefresh.add(hostBundle);
  }
}

Perhaps a temporary Set is needed within the iteration, so the found bundles can be added to the toRefresh set after the iteration loop?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-11 15:23:18.452,,,no_permission,,,,,,,,,,,,234064,,,Mon Jun 11 15:23:18 UTC 2012,,,,,,0|i07gq7:,41476,,,,,,,,"11/Jun/12 15:23;gnt;URL: http://svn.apache.org/viewvc?rev=1348901&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BundleException: Unable to acquire global lock for resolve,FELIX-3414,12548779,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,felix_user,felix_user,30/Mar/12 03:35,17/Mar/15 06:59,14/Mar/19 02:48,11/Jun/12 16:04,fileinstall-3.2.0,,,,,,fileinstall-3.2.4,,,,,,,File Install,,,,,,2,,,,,,"After trying to use latest org.apache.felix.fileinstall-3.2.0 I always get the following error. The bundle that fails it not always the same. It changes.Downgrading back to org.apache.felix.fileinstall-3.1.10 always works fine.

Installed C:\Users\user\install\versions\strategy-server-1.0-SNAPSHOT\instances\1-a\strategies\example-1.0-SNAPSHOT.jar
...
Error while starting bundle: file:/C:/Users/user/install/versions/strategy-server-1.0-SNAPSHOT/instances/1-a/strategies/example-1.0-SNAPSHOT.jar: org.osgi.framework.BundleException: Unable to acquire global lock for resolve.
org.osgi.framework.BundleException: Unable to acquire global lock for resolve.
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3832)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:944)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundle(DirectoryWatcher.java:1232)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundles(DirectoryWatcher.java:1206)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:491)
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.start(DirectoryWatcher.java:219)
	at org.apache.felix.fileinstall.internal.FileInstall.updated(FileInstall.java:247)
	at org.apache.felix.fileinstall.internal.FileInstall.start(FileInstall.java:150)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:641)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:1977)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1895)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
	at java.lang.Thread.run(Thread.java:662)
[2012-03-29 23:24:37,788][INFO][FelixDispatchQueue][server.osgi.StrategyEngineHost] FrameworkEvent: org.apache.felix.framework [0] PACKAGES_REFRESHED null
",Windows 7. org.apache.felix.framework:4.0.2,,,,,,,,,,,,,FELIX-3543,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-12 12:13:39.525,,,no_permission,,,,,,,,,,,,233876,,,Mon Jun 11 16:04:34 UTC 2012,,,,,,0|i07h7r:,41555,,,,,,,,"12/Apr/12 12:13;albertdevs;I believe I've seen a similar problem when I use FileInstall on Equinox.

Due to the changes in FELIX-2066 the component calls refreshPackages on a number of bundles. The refresh happens in another thread (per the OSGi spec), but the FileInstall component does not wait until the refresh is complete. Result: the bundle states are inconsistent, and the startBundle calls later on will trigger all sorts of errors.

This might be fixed by registering a FrameworkListener and then blocking the DirectoryWatcher thread untill a PACKAGES_REFRESHED event is received. This might be unpredictable though, as we don't know if this event will ever happen, just as we can't conclude that the refresh failed if an ERROR event happens because some other framework component might have failed.

The best approach is for the refresh to happen through the OSGi 4.3 FrameworkWiring service: this service allows one to pass FrameworkListeners to correctly signal if the operation completed or failed. This does break compatibility with older Felix and Equinox versions, but I believe it's either that or the improved refresh which must be thrown out.","07/May/12 06:17;adrian2k7;We've got the same problem after upgrading. We also sometimes see that bundles are ""deadlocked"" in ""stopping"" when trying to redeploy the bundle. Might this have something to do with this issue?","11/Jun/12 16:04;gnt;URL: http://svn.apache.org/viewvc?rev=1348921&view=rev

Simple workaround until we can upgrade to the osgi wiring api.
If this is not sufficient, we may want to introduce a flag to disable the refresh completely.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE and thread blocked in org.osgi.service.packageadmin.PackageAdmin#refreshPackages(Bundle[]),FELIX-3413,12548649,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,rickhall,yasuk,yasuk,29/Mar/12 11:32,30/Mar/12 04:39,14/Mar/19 02:48,29/Mar/12 16:46,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"NPE and thread is blocked, when PackageAdmin#refreshPackages(bundleArray) is called under the following conditions:

Bundle[] bundleArray = {BundleA, null, BundleB}

call PackageAdmin#refreshPackages(bundleArray)

StackTrace:
Exception in thread ""FelixFrameworkWiring"" java.lang.NullPointerException
        at org.apache.felix.framework.BundleRevisionDependencies.getDependentBundles(BundleRevisionDependencies.java:163)
        at org.apache.felix.framework.Felix.populateDependentGraph(Felix.java:4059)
        at org.apache.felix.framework.Felix.refreshPackages(Felix.java:3898)
        at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:172)
        at java.lang.Thread.run(Thread.java:595)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-29 16:14:05.878,,,no_permission,,,,,,,,,,,,233746,,,Fri Mar 30 04:39:31 UTC 2012,,,,,,0|i07gtb:,41490,,,,,,,,"29/Mar/12 16:14;rickhall;Technically, I don't think you should be passing in null there, but I suppose we can check for it.",29/Mar/12 16:46;rickhall;Committed a null check. Please close if satisfied. Thanks.,30/Mar/12 04:39;yasuk;Thank you for fixing it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The implementation of org.osgi.service.startlevel.StartLevel#setStartLevel(int) does not follow the spec,FELIX-3411,12548645,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,yasuk,yasuk,29/Mar/12 11:09,05/Mar/13 14:10,14/Mar/19 02:48,05/Mar/13 14:10,framework-4.0.2,,,,,,framework-4.2.0,framework-4.2.1,,,,,,Framework,,,,,,0,,,,,,"I think that the implementation of Changing the Active Start Level is different from Spec.

see:
OSGi Service Platform Core Specification Release 4, Version 4.3, Figure 8.2 page154

Move to requested start level R, active level is A, B is a bundle's start level

Spec:
if (A < R) 
  while (A < R) {
    A = A + 1
    Start All bundles where B = A
  }

Implementation:
if (A < R) 
  Start All bundles where B <= R
A = R

Similarly, if A > R.

Javadoc:
http://www.osgi.org/javadoc/r4v43/org/osgi/service/startlevel/StartLevel.html#setStartLevel%28int%29
http://www.osgi.org/javadoc/r4v43/org/osgi/framework/startlevel/FrameworkStartLevel.html#setStartLevel(int, org.osgi.framework.FrameworkListener...)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-29 16:11:28.527,,,no_permission,,,,,,,,,,,,233742,,,Fri Feb 08 02:05:50 UTC 2013,,,,,,0|i1avan:,271536,,,,,,,,"29/Mar/12 16:11;rickhall;Your description of the framework's behavior is not correct. If you check Felix.setActiveStartLevel() you can see that it takes a sorted snapshot of the existing bundles:

                    // Get a sorted snapshot of all installed bundles
                    // to be processed during the start level change.
                    // We also snapshot the start level here, since it
                    // may change and we don't want to consider any
                    // changes since they will be queued for the start
                    // level thread.
                    bundles = getBundles();
                    for (Bundle b : bundles)
                    {
                        m_startLevelBundles.add(
                            new StartLevelTuple(
                                (BundleImpl) b,
                                ((BundleImpl) b).getStartLevel(
                                    getInitialBundleStartLevel())));
                    }

It then processes this list (which is sorted by bundle start level and then bundle ID) in forward or reverse order depending on whether it is raising or lowering:

                    if (lowering)
                    {
                        tuple = m_startLevelBundles.last();
                    }
                    else
                    {
                        tuple = m_startLevelBundles.first();
                    }

And for each bundle processed in order it counts up or down the framework's current active start level depending upon whether we are lowering or raising, e.g.:

                            // Count up the active start level.
                            if (m_activeStartLevel != tuple.m_level)
                            {
                                m_activeStartLevel = tuple.m_level;
                            }

So, while it is possible there are some bugs, it definitely is attempting to implement the spec as described. There is the potential for a bundle to be started/stopped out of order if you are manipulating its state at the same time the start level operation is going on, but it is a small window and will still end up in the proper state.

At any rate, if you experience any bugs, would it be possible to create an example to demonstrate the issue? Thanks.","02/Apr/12 09:18;yasuk;Thank you for your comment.

I am testing exception handling using wrong bundles. 

Conditions:
  B_N is the bundle start level.
  A is an active start level.
  R is a requested start level.

  Bundle_01:
    B_01 = 1

  Bundle_02:
    B_02 = 3 
    This BundleActivator#start method throws an exception.

  Bundle_03:
    B_03 = 5

STEP1. ActiveStartLevel = 1.
   (A = 1)
   Spec and Implementation:
     Bundle_01 is ACTIVE.

STEP2. setStartLevel(3)
   (A = 1, R = 3)
   Spec and Implementation:
     Bundle_02 throws a BundleException.

STEP3. setStartLevel(5)
   (A = 3, R = 5)
  Spec:
     Bundle_03 is ACTIVE.

  Implementation:
     Bundle_02 throws a BundleException.
     Bundle_03 is ACTIVE.
  
  This point is different from Spec.

Best regards.","02/Apr/12 18:25;rickhall;So, is your issue that the framework should not attempt to start Bundle_02 again?

Perhaps so, but your original issue description didn't says something completely different. If the extra attempt to start the bundle is your concern, we should edit this issue to more clearly state that fact. Let me know. Thanks.","06/Apr/12 14:24;yasuk;> So, is your issue that the framework should not attempt to start Bundle_02 again? 
Yes. I do not want Bundle_02 to be started again.

But my issue report is not clearly. So I would like to organize and edit this issue.

Many thanks","09/Apr/12 17:18;rickhall;I have looked at the spec, but I don't see where it says bundles should be blacklisted if they throw an exception during a start level change. Could you point me to where you believe the spec says this?","13/Apr/12 05:18;yasuk;I won't say about blacklisting.

I believe that the implementation is different from the the following spec.
R4.3 spec
8.3.1 Changing the Active Start Level

If the requested start level is higher than the active start level, the Framework must increase the start 
level by one and then start all bundles that meet the following criteria:
• Bundles that are persistently marked started, and
• Bundles that have a bundle start level equal to the new active start level.
The Framework continues increasing the active start level and starting the appropriate bundles until 
it has started all bundles with a bundle start level that equals the requested start level.


For example, assume the active start level is 3 and the Framework is requested to transition to start level 
5. 
I think the framework must attempt to start all bundles that have a bundle start level 4 or 5.
So I think Bundle_02 must not be started.","13/Apr/12 13:15;rickhall;Ok, I think I understand your point now, you think it should not attempt to restart bundles that are below the current active start level (effectively blacklisting them). I'm not sure this is what the spec means. I'll investigate.","01/Feb/13 21:06;rickhall;I just committed a patch to modify start level handling such that it will not attempt to restart bundles in lower start levels if the previously didn't start when setting a new, higher framework start level. Please close if satisfied.","06/Feb/13 01:46;yasuk;Thanks for update.

I would like to you correct one point.
When bundles that have a bundle start level equal to the previous active start level, I think their Bundle#start() is not called.

--- src/main/java/org/apache/felix/framework/Felix.java
+++ src/main/java/org/apache/felix/framework/Felix.java
@@ -1267,7 +1267,8 @@
                         if (!isLowering
                             && (((tuple.m_bundle.getPersistentState() == Bundle.ACTIVE)
                                 || (tuple.m_bundle.getPersistentState() == Bundle.STARTING))
-                                && (tuple.m_level == m_activeStartLevel)))
+                                && (tuple.m_level == m_activeStartLevel)
+                                && ((tuple.m_level >= low) && (tuple.m_level <= high))))
                         {
                             try
                             {

@@ -1290,7 +1291,8 @@
                         else if (isLowering
                             && (((tuple.m_bundle.getState() == Bundle.ACTIVE)
                                 || (tuple.m_bundle.getState() == Bundle.STARTING))
-                                && (tuple.m_level == m_activeStartLevel)))
+                                && (tuple.m_level == m_activeStartLevel)
+                                && ((tuple.m_level >= low) && (tuple.m_level <= high))))
                         {
                             try
                             {
","06/Feb/13 14:23;rickhall;It is not clear to me that your patch does anything.

Currently, we calculate low and high and then we either increment active level from low to high or decrement it from high to low depending on whether we are raising or lowering, respectively. At each step, we start (or stop) bundles whose start level matches the given step.

In other words, m_activeStartLevel steps from low to high (or high to low) inclusive, so there is no need to verify that tuple.m_level is between low and high because if it is equal to m_activeStartLevel then by definition it is between low and high (inclusive).

Unless I'm missing something.","07/Feb/13 11:34;yasuk;I watched behavior in detail.

When change the framework start level,though there is m_activeStartLevel outside a range, there is a possibility that BundleActivator#start() is called.

I did a test in the following steps:
=====
step 1
  set the Framework Start Level = 1
  BundleA : Bundle Start Level = 3 <-- INSTALLED（This bundle's BundleActivator#start() throws an exception. ）
  BundleB : Bundle Start Level = 5 <-- INSTALLED

step 2
  Call the BundleA#start().
  Call the BundleB#start().

  PersistentState is ACTIVE.

step 3
  Set the Framework Start Level = 3.

  BundleA throws Exception. <-- RESOLVED

step 4
  Set the Framework Start Level = 5.

  m_activeStartLevel = 3
  low = 4
  high = 5

< loop process >
step 4-1
  StartLevelTuple <-- BundleA

  ((tuple.m_level >= low) && (tuple.m_level <= high)) is false.

  m_activeStartLevel is still 3.

  (((tuple.m_bundle.getPersistentState() == Bundle.ACTIVE)
   || (tuple.m_bundle.getPersistentState() == Bundle.STARTING))
   && (tuple.m_level == m_activeStartLevel)) is true.

  Call startBundle().
  the BundleA throws Exception. <-- I do not want to call this bundle's BundleActivator#start().

step 4-2
  StartLevelTuple <-- BundleB

  ((tuple.m_level >= low) && (tuple.m_level <= high)) is true.
  m_activeStartLevel is changed 5.

  (((tuple.m_bundle.getPersistentState() == Bundle.ACTIVE)
   || (tuple.m_bundle.getPersistentState() == Bundle.STARTING))
   && (tuple.m_level == m_activeStartLevel)) is true.

  Call startBundle().
  the BundleB is ACTIVE.
======

Best regards.
","07/Feb/13 12:04;karlpauls;I think you are right. 

When richard and I where discussing this we where assuming that m_activeStartLevel must be in-between low and high but as you point out, it doesn't have to be -- good catch. 

It looks to me like we'd have to set 

m_activeStartLevel= isLowering ? high : low;

initially. ","07/Feb/13 14:26;rickhall;Right, now I see it too. And I agree with Karl's suggestion, we need to cause the active start level to take the first step into the low/high range before we start pulling off bundles and testing them. Thanks a lot for looking closely at this!","07/Feb/13 14:33;rickhall;Ok, I committed a patch to fix the active start level initialization bug. I'll assign this to 4.4.0 for now, but we'll try to do a 4.2.1 if/when any other minor bug reports come in. Please close if satisfied. Thanks!","08/Feb/13 02:05;yasuk;Thank you very much indeed for your patch.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
ImmediateComponentManager should use any non-ignored configuration to try to activate a component.,FELIX-3410,12548561,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,djencks,djencks,28/Mar/12 21:48,20/Nov/12 10:58,14/Mar/19 02:48,31/May/12 16:53,scr-1.6.2,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"ImmediateComponentManager.reconfigure only tries to activate an unsatisfied component if the configuration is require.  However, if configuration is optional (i.e. not ignored) it could still change target properties and make the component satisfied so it can be activated.",,,,,,,,,,,,,,,,,,,,28/Mar/12 21:50;djencks;FELIX-3410.diff;https://issues.apache.org/jira/secure/attachment/12520328/FELIX-3410.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-30 10:10:41.346,,,no_permission,,,,,,,,,,,,233658,,,Tue Nov 20 10:58:18 UTC 2012,,,,,,0|i07g7b:,41391,,,,,,,,"28/Mar/12 21:50;djencks;Try to activate if configuration policy is require or optional, not just require.","30/Mar/12 10:10;fmeschbe;Oh, quite right. I missed that detail. Thanks for providing the patch.",31/May/12 16:53;fmeschbe;Thanks for providing the patch. I have applied it along with a test in Rev. 1344812,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"with permissions enabled, AbstractComponentManager.verifyDependencyManagers is wrong.",FELIX-3409,12548559,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,djencks,djencks,28/Mar/12 21:41,20/Nov/12 10:58,14/Mar/19 02:48,30/Mar/12 10:08,scr-1.6.2,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"If running with permissions and the bundle doesn't have permissions to look up services, then AbstractComponentManager.verifyDependencyManagers returns whether the _last_ DependencyManager is optional, not whether _all_ the DependencyManagers are optional.",,,,,,,,,,,,,,,,,,,,28/Mar/12 21:44;djencks;FELIX-3409.diff;https://issues.apache.org/jira/secure/attachment/12520326/FELIX-3409.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-30 10:08:07.617,,,no_permission,,,,,,,,,,,,233656,,,Tue Nov 20 10:58:18 UTC 2012,,,,,,0|i07gcn:,41415,,,,,,,,28/Mar/12 21:44;djencks;Obvious fix...,"30/Mar/12 10:08;fmeschbe;Oh my ...

Thanks for providing the patch. I have applied in Rev. 1307344.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Console date chooser shows garbage text,FELIX-3408,12548461,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,28/Mar/12 09:36,23/Nov/12 06:54,14/Mar/19 02:48,28/Mar/12 09:41,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"Steps to reproduce:
- clear cache
- restart browser
- set default browser locale to something different than english
- open web console in the browser
- use a plugin that uses the date chooser
- popup the date chooser and you will see some strange characters for the days


We tried to solve the same problem a long time ago, by adding the following code to support.js:
        var locale = getCookie(""locale"");
	if (locale) {
		if ( !$.datepicker.regional[locale] ) locale = '';
		$.datepicker.setDefaults($.datepicker.regional[locale]);
	}

The problem is when you open the web console for first time, the cookie is not set. It is set when you choose it using the flags on the top-right side of the window. 
Unfortunately from javascript we cannot read the browser locale (at least, that is not portable). So the only solution would be that the web console sets the language cookie with every request.",,,,,,,,,,,,,,,,,,,,28/Mar/12 09:39;v_valchev;chinese.JPG;https://issues.apache.org/jira/secure/attachment/12520254/chinese.JPG,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-28 10:17:03.363,,,no_permission,,,,,,,,,,,,233558,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i07h1j:,41527,,,,,,,,"28/Mar/12 09:39;v_valchev;demonstration of the problem (bulgarian, not chinese is chosen)","28/Mar/12 09:41;v_valchev;Fixed in rev.1306227. Felix, please set the fix version.",28/Mar/12 10:17;fmeschbe;This unfortunately missed the current release. Assigning to the next release.,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Imports are missed for generics,FELIX-3407,12548460,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,pergis,pergis,28/Mar/12 09:33,12/Jun/13 23:46,14/Mar/19 02:48,01/Apr/13 23:46,maven-bundle-plugin-2.3.7,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,3,,,,,,"The bundle plugin miss to add imports to classes/interfaces that are used in generic blocks due to type erasure.

Consider the following (the code is in the attached zip):

bundle-a:
package example.a.one;
public interface ExampleInterfaceA<T extends ExampleInterfaceB> {
    String getGreeting(T example);
}

package example.a.two;
public interface ExampleInterfaceB {
}


bundle-b:
package example.b.two;
import example.a.two.ExampleInterfaceB;
public interface ExampleImplementationB extends ExampleInterfaceB {
}


bundle-c:
package example.c;
import example.a.one.ExampleInterfaceA;
import example.b.two.ExampleImplementationB;
public interface ExampleExtendedInterfaceA extends ExampleInterfaceA<ExampleImplementationB> {
}

package example.c;
public class ExampleReferenceListener {
    public void register(final ExampleExtendedInterfaceA example) {
    }
    public void unregister(final ExampleExtendedInterfaceA example) {
    }
}

OSGI-INF/blueprint/services.xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
    <reference-list id=""exampleReferenceListener""
                    interface=""example.c.ExampleExtendedInterfaceA""
                    availability=""optional"">
        <reference-listener bind-method=""register"" unbind-method=""unregister"">
            <bean class=""example.c.ExampleReferenceListener""/>
        </reference-listener>
    </reference-list>
</blueprint>

bundle-d:
package example.d;
import example.b.two.ExampleImplementationB;
import example.c.ExampleExtendedInterfaceA;
public class ExampleExtendedImplementation implements ExampleExtendedInterfaceA {
    public String getGreeting(final ExampleImplementationB example) {
        return ""Hello World"";
    }
}

OSGI-INF/blueprint/services.xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
    <bean id=""exampleBean"" class=""example.d.ExampleExtendedImplementation""/>
    <service id=""exampleService"" interface=""example.c.ExampleExtendedInterfaceA"" ref=""exampleBean""/>
</blueprint>

Since the bundle plugin uses byte-code to find out which imports to add to the manifest, the bundle-c manifest look like this:

Manifest-Version: 1.0
Bnd-LastModified: 1332925553008
Build-Jdk: 1.6.0_26
Built-By: tofo01
Bundle-ManifestVersion: 2
Bundle-Name: example.bundle-c
Bundle-SymbolicName: example.bundle-c
Bundle-Version: 1.0.0.SNAPSHOT
Created-By: Apache Maven Bundle Plugin
Export-Package: example.c;uses:=""example.a.one"";version=""1.0.0.SNAPSHOT""
Import-Package: example.a.one;version=""[1.0,2)"",org.osgi.service.blueprint;version=""[1.0.0,2.0.0)""
Import-Service: example.c.ExampleExtendedInterfaceA;multiple:=true;availability:=optional
Tool: Bnd-1.50.0

The ""example.a.two"" package import is missing since type-erasure removes the generic part of ExampleInterfaceA in the bundle-c interface.

This results in a NoClassDefFondError of example.a.two.ExampleInterfaceB from bundle-c when trying to deploy bundle-d.
""Error tracking new service reference java.lang.NoClassDefFoundError: example.a.two.ExampleInterfaceB not found by example.bundle-c [159]""",,,,,,,,,,,,,,,,,,,,28/Mar/12 09:37;pergis;example.zip;https://issues.apache.org/jira/secure/attachment/12520253/example.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-10 09:18:22.317,,,no_permission,,,,,,,,,,,,233557,,,Mon Apr 01 23:46:14 UTC 2013,,,,,,0|i0l813:,121951,,,,,,,,"10/Apr/12 09:18;mcculls;There is a reference to ""example.a.two"" in the constant pool which I believe bnd should have picked up:

javap -c -verbose -private target/classes/example/c/ExampleExtendedInterfaceA
===========================================================================
Compiled from ""ExampleExtendedInterfaceA.java""
public interface example.c.ExampleExtendedInterfaceA extends example.a.one.ExampleInterfaceA
  Signature: length = 0x2
   00 05 
  SourceFile: ""ExampleExtendedInterfaceA.java""
  minor version: 0
  major version: 49
  Constant pool:
const #1 = class	#8;	//  example/c/ExampleExtendedInterfaceA
const #2 = class	#9;	//  java/lang/Object
const #3 = class	#10;	//  example/a/one/ExampleInterfaceA
const #4 = Asciz	Signature;
const #5 = Asciz	Ljava/lang/Object;Lexample/a/one/ExampleInterfaceA<Lexample/b/two/ExampleImplementationB;>;;
const #6 = Asciz	SourceFile;
const #7 = Asciz	ExampleExtendedInterfaceA.java;
const #8 = Asciz	example/c/ExampleExtendedInterfaceA;
const #9 = Asciz	java/lang/Object;
const #10 = Asciz	example/a/one/ExampleInterfaceA;

{
}
===========================================================================

This is because generic types are not always fully erased: http://www.artima.com/weblogs/viewpost.jsp?thread=208860

I've logged this on the bnd issue tracker as https://github.com/bndtools/bnd/issues/152 since it relates to bnd's bytecode analysis. 

Normally ignoring the generic signature isn't a problem, since this extra information isn't actually required to load and use the class in Java code (due to type erasure rules). The issue appears to be that blueprint attempts to load the type parameters encoded in the constant pool when analyzing the service class using reflection ( ie. with http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/ParameterizedType.html#getActualTypeArguments() ) and therefore it needs this extra information.","02/May/12 15:27;pkriens;I can't see the reference to the example.a.two package in your listing?

I looked at this and I can only see this as an error in proxy generation. It looks like they use a class loader that has not the full visibility as described in a blog http://blog.osgi.org/2008/08/classy-solutions-to-tricky-proxies.html

I would like to close this.","02/May/12 23:17;pergis;On the row starting with ""const #5"" there is a reference to example.b.two.ExampleImplementationB, this in turn extends the example.a.two.ExampleInterfaceB. Neither of those are imported in bundle-c. 

I don't know which one of the packages (or both) that must be imported for the example to work, but I can try it out if you like.","29/May/12 18:44;pkriens;It turns out that I had commented out a section due to a not understanding of the JVM spec class file format caused this.

That said, it took a long time to work out since the example is rather convoluted since it contains Blueprint and hard to parse names. The following minimal example showed the problem:

bundle a:  class a.A implements B<C> { }
bundle b:  public interface b.B<T> { }
bundle c:  public class c.C {}

It really helps if the problems are brought back to their absolute minimum since I can then create a test case without too much effort.

Anyway, this is in the next branch and will be released in about 3 weeks.","29/May/12 19:30;pergis;Perfect, thank you for taking your time to look in to it!

If I've to report any more bugs I'll try to make the example more minimalistic and without blueprint.","21/Nov/12 10:06;pergis;Is there a new version of bnd available? 

If so, when could this be available in the maven-bundle-plugin?",22/Nov/12 00:35;mcculls;The latest 2.4.0-SNAPSHOT is available from https://repository.apache.org/content/groups/snapshots/ - I regularly deploy snapshots based on the latest bnd code. Once the current development version of bnd is released and available on Maven central I can prepare a release of the maven-bundle-plugin. In the meantime please test the deployed snapshot (or build it locally) and feedback any issues.,22/Nov/12 00:36;mcculls;Specifically: https://repository.apache.org/content/groups/snapshots/org/apache/felix/maven-bundle-plugin/2.4.0-SNAPSHOT/,01/Apr/13 23:46;mcculls;2.4.0-SNAPSHOT now uses latest bndlib so this will be fixed in the upcoming bundleplugin release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Localization in Web Console doesn't work anymore,FELIX-3406,12548449,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,fmeschbe,v_valchev,v_valchev,28/Mar/12 08:04,23/Nov/12 06:54,14/Mar/19 02:48,05/Apr/12 14:11,webconsole-4.0.0,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"Seems that native2ascii task doesn't work anymore and this is with the latest SVN snapshot. (I'm using Apache Maven 3.0.3 to build)

So, when UTF-8 characters are rendered on screen they appear like random characters. This makes the web console totally unusable in Bulgarian and Russian languages.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-28 14:26:21.89,,,no_permission,,,,,,,,,,,,233546,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i07g6f:,41387,,,,,,,,28/Mar/12 14:26;fmeschbe;This could be related to my movement of the files. Has there been something failing due to that ? Or is there some UTF-8 setting missing ?,28/Mar/12 14:26;fmeschbe;Has to go in to the next release,"28/Mar/12 14:32;v_valchev;Kinda related to that one: https://issues.apache.org/jira/browse/FELIX-3268
Unfortunately the problem I've reported there wasn't really fixed.",05/Apr/12 12:29;fmeschbe;This caused the 3.2.0 release vote to be cancelled so it blocks the 3.4.0 release,"05/Apr/12 13:28;fmeschbe;Looks like the files are translated (in target/classes/...) but are packed in the final JAR file untranslated ... So the webconsole reads the ""original"" UTF-8 encoded files as if it would be ISO-8859-1 and thus, of course, cannot render properly.

This is caused by the bundle plugin which includes the source resource files instead of the processed resource files.","05/Apr/12 14:11;fmeschbe;Fixed and verified in Rev. 1309867

By explicitly including the processed resources with the Include-Resources header the translation files are properly included and show nicely again",23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in Web Console,FELIX-3405,12548441,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,28/Mar/12 07:16,23/Nov/12 06:54,14/Mar/19 02:48,28/Mar/12 07:51,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"I've created a plugin but forgot to add the template. So normally it failed, but with NPE. This shouldn't happen at all:

{code}
fw>$start 18
 [ERROR]0 : Error occurred while trying to activate bundle!
java.lang.NullPointerException
        at javax.servlet.GenericServlet.getServletContext(GenericServlet.java:159)
        at javax.servlet.GenericServlet.log(GenericServlet.java:253)
        at org.apache.felix.webconsole.AbstractWebConsolePlugin.readTemplateFile(AbstractWebConsolePlugin.java:864)
        at org.apache.felix.webconsole.AbstractWebConsolePlugin.readTemplateFile(AbstractWebConsolePlugin.java:832)
        at com.prosyst.mbs.impl.services.tee.webconsole.TeePlugin.<init>(Unknown Source)
        at com.prosyst.mbs.impl.services.tee.webconsole.Activator.registerPlugin(Unknown Source)
        at com.prosyst.mbs.impl.services.tee.webconsole.Activator.start(Unknown Source)
        at com.prosyst.mbs.impl.framework.BundleImpl.startIt(BundleImpl.java:4304)
        at com.prosyst.mbs.impl.framework.BundleImpl.simpleStart(BundleImpl.java:1744)
        at com.prosyst.mbs.impl.framework.BundleImpl.start0(BundleImpl.java:1642)
        at com.prosyst.mbs.impl.framework.BundleImpl.start0(BundleImpl.java:1515)
        at com.prosyst.mbs.impl.framework.BundleImpl.start(BundleImpl.java:1350)
        at com.prosyst.mbs.impl.framework.BundleImpl.start(BundleImpl.java:1060)
        at com.prosyst.util.impl.parser.DefaultFrameworkPlugable.start(DefaultFrameworkPlugable.java:1295)
        at com.prosyst.util.impl.parser.DefaultFrameworkPlugable.start(DefaultFrameworkPlugable.java:1277)
        at com.prosyst.util.impl.parser.DefaultFrameworkPlugable.executeCommand(DefaultFrameworkPlugable.java:499)
        at com.prosyst.util.PluggableCommandsProxy.executeCommand(PluggableCommandsProxy.java:103)
        at com.prosyst.util.impl.parser.ParserServiceImpl.parseCommand(ParserServiceImpl.java:323)
        at com.prosyst.util.impl.console.ConsoleAc
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 06:54:46.861,,,no_permission,,,,,,,,,,,,233538,,,Fri Nov 23 06:54:46 UTC 2012,,,,,,0|i07gv3:,41498,,,,,,,,"28/Mar/12 07:51;v_valchev;Fixed in svn. Felix, please set the fix version.",23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web Admin Log Plugin stops listing of log entries if message is null.,FELIX-3404,12548437,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,28/Mar/12 06:39,23/Nov/12 06:54,14/Mar/19 02:48,28/Mar/12 06:45,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,see title,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 06:54:47.9,,,no_permission,,,,,,,,,,,,233534,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i07gzz:,41520,,,,,,,,28/Mar/12 06:45;v_valchev;This is fixed Felix. Please set the Fix Version.,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nullpointer in autoconfprocessor for invalid metatype files,FELIX-3400,12547419,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,bramk,bramk,21/Mar/12 17:31,01/Apr/14 12:48,14/Mar/19 02:48,23/Mar/12 09:06,autoconf-rp-0.1.0,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"Ran into trouble when I was feeding autoconf some,  according to spec, invalid metatype files. MetadataReader does not catch them and AutoconfProcessor subsequently runs into nullpointers. Patch with basic additional validation checks attached for reference.",,,,,,,,,,,,,,,,,,,,21/Mar/12 17:35;bramk;FELIX-3400-validate.patch;https://issues.apache.org/jira/secure/attachment/12519270/FELIX-3400-validate.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-23 09:06:09.795,,,no_permission,,,,,,,,,,,,232577,,,Fri Mar 23 09:06:09 UTC 2012,,,,,,0|i07gmn:,41460,,,,,,,,23/Mar/12 09:06;marrs;Applied the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fileinstall is not able to handle configuration file if in a path containing braces,FELIX-3396,12546592,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,jbonofre,jbonofre,15/Mar/12 14:43,17/Mar/15 07:00,14/Mar/19 02:48,15/Mar/12 16:44,fileinstall-3.1.10,,,,,,fileinstall-3.2.0,,,,,,,File Install,,,,,,0,,,,,,"If fileinstall scans a directory with a path containing braces, the configuration file update fails.

This is due to the filter in the ConfigInstaller which doesn't escape the braces in the filter:

(felix.fileinstall.filename=/path/to/(test)/config...)

should be (with the escape):

(felix.fileinstall.filename=/path/to/\(test\)/config...)

Path with braces are a ""classic"" installation path especially on Windows (for instance c:\\Program Files\(x64)..).
",,,,,,,,,,KARAF-1127,,FELIX-3383,,,,,,,,15/Mar/12 14:44;jbonofre;FELIX-3396.patch;https://issues.apache.org/jira/secure/attachment/12518469/FELIX-3396.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-16 02:10:24.487,,,no_permission,,,,,,,,,,,,231750,,,Sun Apr 01 08:20:30 UTC 2012,,,,,,0|i07gu7:,41494,,,,,,,,"16/Mar/12 02:10;xiaming;How about '*' and '=' in the path? According to the spec, they both need to escape, right? See 3383 for a complete patch.","16/Mar/12 07:35;gnt;You're right, I'll apply your patch which is more complete.","01/Apr/12 07:55;xiaming;Hope we could get a fix release soon, thank you in advance!","01/Apr/12 08:20;xiaming;Oops, just saw 3.2.0 release already there :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected warning when using bnd-ipojo-plugin,FELIX-3391,12546228,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,loris,loris,13/Mar/12 13:30,27/Mar/12 08:10,14/Mar/19 02:48,25/Mar/12 15:07,ipojo-manipulator-1.8.2,,,,,,ipojo-manipulator-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"When I declare a component with the annotation @Component and I declare the instance in a metadata.xml file (not the component), I'm getting the following warning for each compenent type:
[WARNING] Bundle org.jdoe:foo:bundle:2.0.0-SNAPSHOT : The component type org.jdoe.FooComponent is duplicated.",,,,,,,,,,,,,,,,,,,,23/Mar/12 11:32;sauthieg;FELIX--_Duplicate_component_type_warnings_with_ipojo-bnd-plugin.patch;https://issues.apache.org/jira/secure/attachment/12519606/FELIX--_Duplicate_component_type_warnings_with_ipojo-bnd-plugin.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-23 11:32:26.356,,,no_permission,,,,,,,,,,,,231386,,,Tue Mar 27 08:10:42 UTC 2012,,,,,,0|i07ga7:,41404,,,,,,,,23/Mar/12 11:32;sauthieg;Here is a patch fixing the warning issue,"25/Mar/12 15:07;clement.escoffier;Fixed in trunk.

Please confirm the fix, then I'll cut a release of the manipulator.",27/Mar/12 08:10;loris;Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bnd iPOJO Plugin ignores annotated components,FELIX-3389,12546090,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,sauthieg,sauthieg,12/Mar/12 13:36,03/Feb/13 11:08,14/Mar/19 02:45,13/Mar/12 11:21,ipojo-manipulator-1.8.2,,,,,,ipojo-manipulator-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"The bnd plugin uses the ${classes} Bnd macro to query the system for classes annotated with @Component or @Handler.
The query format in use was ""@Component|@Handler"" but it was not the expected Bnd format.

An appropriate Bnd annotation query should looks like ""org.apache.felix.ipojo.annotations.*""",,,,,,,,,,,,,,,,,,,,12/Mar/12 13:39;sauthieg;0001-FELIX-FELIX-3389-Bnd-iPOJO-Plugin-ignores-annotated-.patch;https://issues.apache.org/jira/secure/attachment/12518024/0001-FELIX-FELIX-3389-Bnd-iPOJO-Plugin-ignores-annotated-.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-13 11:21:50.016,,,no_permission,,,,,,,,,,,,231248,,,Tue Mar 13 11:21:50 UTC 2012,,,,,,0|i07gdr:,41420,,,,,,,,12/Mar/12 13:39;sauthieg;The provided patch fixes the Bnd annotation query pattern,"13/Mar/12 08:02;sauthieg;Thanks for committing the patch.
Can you also publish a SNAPSHOT version ?

BTW, maybe it could be nice to have iPOJO in the Apache Jenkins server to automate SNAPSHOT deployment ?

https://builds.apache.org/view/A-F/view/Felix/
http://wiki.apache.org/general/Jenkins",13/Mar/12 11:21;clement.escoffier;Fixed in trunk (snapshots were also deployed),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
minor javadoc corrections in @Temporal annotation,FELIX-3380,12545876,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,clement.escoffier,rubytuesdaydono,rubytuesdaydono,09/Mar/12 17:07,04/Feb/13 12:34,14/Mar/19 02:48,14/Apr/12 10:37,iPOJO-1.8.0,,,,,,ipojo-temporal-dependency-handler-1.8.0,,,,,,,iPOJO,,,,,,0,javadoc,,,,,"correct documented default for timeout from ""true"" to 3000

http://svn.apache.org/repos/asf/felix/releases/org.apache.felix.ipojo.annotations-1.8.0/src/main/java/org/apache/felix/ipojo/handler/temporal/Temporal.java",,300,300,,0%,300,300,,,,,,,,,,,,,09/Mar/12 17:08;rubytuesdaydono;FELIX-3380-1.diff;https://issues.apache.org/jira/secure/attachment/12517745/FELIX-3380-1.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-09 17:27:26.07,,,no_permission,,,,,,,,,,,,231059,,,Mon Apr 23 14:35:36 UTC 2012,,,,,,0|i07gdz:,41421,,,,,,,,09/Mar/12 17:08;rubytuesdaydono;patch,"09/Mar/12 17:23;rubytuesdaydono;I couldn't find the correct version in JIRA, so I'm adding the SVN path to the affected source.  Please educate me if there is a better way to do this.  ","09/Mar/12 17:27;clement.escoffier;Hi,

Your patch looks good. Will apply it right now.","09/Mar/12 18:20;clement.escoffier;Patch applied un trunk.

BTW, You don't have to rename files when generating a patch.","11/Mar/12 01:36;rubytuesdaydono;apologies - at the risk of betraying my sciolism, it's my first patch.  i
should have renamed the original instead of the revision, or even piped
it, before invoking diff.  i'll take care next time.

thanks for your mentorship! ",14/Apr/12 10:37;clement.escoffier;Fixed in trunk since quite some time.,23/Apr/12 14:35;rubytuesdaydono;apologies - i should probably be cleaning up my own tickets once they're resolved.  thanks!  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use of java.lang.Properties in iPOJO Core,FELIX-3374,12545200,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,arminius,arminius,05/Mar/12 16:31,14/May/12 14:58,14/Mar/19 02:48,14/Apr/12 15:23,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"Setting the instance property ""requires.filters"" when property propagation is enabled for the component, results in the following error message:
""[ERROR]  : The propagated property requires.filters cannot be created correctly : Constructor not found exception during the creation of class java.util.Properties : java.util.Properties.<init>(java.lang.String)""
It seems that iPOJO tries to create java.util.Properties as service property values incorrectly.

Btw, I am just curious, what is the current policy for handling collections of string/value pairs in the iPOJO/Felix source code? Class java.util.Directory seems to be obsolete and Properties is not as universal as the java.util.Map<> interface.","JRE 6
Apache Felix Framework 4.0.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-14 14:57:47.415,,,no_permission,,,,,,,,,,,,230386,,,Mon May 14 14:58:24 UTC 2012,,,,,,0|i07gxb:,41508,,,,,,,,"14/Apr/12 14:57;clement.escoffier;Hi, I've fixed the issue in the trunk.

We're using Dictionary / Properties because the OSGi specification is relying on them (OSGi R 4.0, 4.1 and 4.2). It seems that there is some effort to update the API, but I didn't check so far. 

So, as the OSGi api is using such objects, we have decided to use them in iPOJO to be consistent. However, we probably will update this in iPOJO 2.0.",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File install logging doesn't notify user of important errors,FELIX-3373,12545146,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,albertdevs,albertdevs,05/Mar/12 09:37,17/Mar/15 07:00,14/Mar/19 02:48,16/Mar/12 07:44,fileinstall-3.1.10,,,,,,fileinstall-3.2.0,,,,,,,File Install,,,,,,0,logging,,,,,"When a bundle cannot be installed, no error is added to the log. Similarly, problems with jarring a directory are not logged as errors.

At the same time, logging is disabled by default. I would expect it to be set to the ERROR level, and only log important errors once.",,,,,,,,,,,,,,FELIX-1789,,,,,,11/Mar/12 17:33;albertdevs;fileinstall-logging.patch;https://issues.apache.org/jira/secure/attachment/12517901/fileinstall-logging.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,230332,,,Sun Mar 11 17:33:34 UTC 2012,,,,,,0|i07h7z:,41556,,,,,,,,05/Mar/12 10:07;albertdevs;I'll create a patch later this day which fixes this for the trunk version.,"05/Mar/12 22:26;albertdevs;Added patch file.

This patch does 3 things:

-It changes the default log level to ERROR.

-If the log level is set using the bundle context or a system property, this setting will become the default log level for all watchers, this according to the principle of least surprise. Configurations from the config admin can still override this value.

-Some logging statements got their severity raised from WARNING to ERROR because fileinstall didn't actually handle the problem, and hence might be important to the user. I've checked that these occur only once, in an effort to be not too verbose.","11/Mar/12 17:33;albertdevs;I've attached a patch which changes
the following things:

- By default, the component produces no log output. I would expect
that errors are important enough that they should be offered to the
logging system, hence I changed DirectoryWatcher to default to
LOG_ERROR.
- If a Configuration from the config-admin contains no log settings, I
altered the code to use the global log level as a default. Vice versa,
a Configuration can still override the global log level.
- Stuff like corrupt bundles may simply go unnoticed because those are
logged as warnings. I've altered the logging level for non-recoverable
situations to see everything of interest as an error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Configuration Webconsole Plugin seems to ignore the ocd ref element,FELIX-3366,12544581,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,,laeubi,laeubi,29/Feb/12 09:32,23/Sep/15 12:52,14/Mar/19 02:48,11/Sep/15 13:10,,,,,,,webconsole-4.2.12,,,,,,,Web Console,,,,,,0,,,,,,"If there is a desiginator like this:

<OCD id=""test.config.pid"" .... >
<Designate pid=""test.config.pid"">
	<Object ocdref=""test.config.pid"" />
</Designate>

everythiong works fine.

Using something different ad the OCD Id than the pid makes the webconsole plugin thing there is no OCD at all (it just provides a textfield where you can enter the properties by name):

<OCD id=""ocd1"" .... >
<Designate pid=""test.config.pid"">
	<Object ocdref=""ocd1"" />
</Designate>

maybe I get something wrong but I can't see from the spec that the pid must equal the ocd id (in fact the examples does alwys use a different name) the metatype service itself has not any problem with both notations.
","Equinox container with apache felix webadmin, http und metatype bundle",,,,,,,,,,,,,,,,,,,11/Sep/15 13:08;v_valchev;TEST-FELIX-3366.jar;https://issues.apache.org/jira/secure/attachment/12755399/TEST-FELIX-3366.jar,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-09-11 13:08:24.977,,,no_permission,,,,,,,,,,,,229767,,,Wed Sep 23 12:52:17 UTC 2015,,,,,,0|i1avdb:,271548,,,,,,,,"11/Sep/15 13:08;v_valchev;The attached bundle create a metatype xml, which is similar to the one provided. With the latest web console and metatype service it works just as expected.","11/Sep/15 13:10;v_valchev;There is a test case now, that proves the problem is fixed some time ago. Since I don't know when, I'm going to set this issue fixed for the next version of webconsole.
",23/Sep/15 12:52;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MetaDataReader exposes a private exception class on the public API,FELIX-3364,12544282,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,jeremias@apache.org,jeremias@apache.org,27/Feb/12 17:46,20/Nov/12 11:00,14/Mar/19 02:48,18/Oct/12 13:06,metatype-1.0.4,,,,,, metatype-1.0.6,,,,,,,Metatype Service,,,,,,0,patch,,,,,"MetaDataReader can be useful outside the Metatype bundle and is part of the bundle's public API. But some public methods of MetaDataReader expose XmlPullParserException which is a private class (from the embedded xmlpull):

public MetaData parse( URL url ) throws IOException, XmlPullParserException
public MetaData parse( InputStream ins ) throws IOException, XmlPullParserException

This prohibits the use of MetaDataReader from outside the Metatype bundle.",,,,,,,,,,,,,,,,,,,,27/Feb/12 17:50;jeremias@apache.org;xmlpullparser-visibility-patch.diff;https://issues.apache.org/jira/secure/attachment/12516188/xmlpullparser-visibility-patch.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-18 13:06:08.163,,,no_permission,,,,,,,,,,,,229519,,,Tue Nov 20 11:00:52 UTC 2012,,,,,,0|i0afhz:,58784,,,,,,,,27/Feb/12 17:50;jeremias@apache.org;I've created a patch that fixes the problem by throwing an IOException instead of the XMLPullParserException. That loses the original stack trace but that's probably still better than the other possible solution: exporting xmlpull. Maybe you can think of an even better approach. HTH,18/Oct/12 13:06;fmeschbe;Thanks for reporting and providing a patch. I have applied it in Rev. 1399648,20/Nov/12 11:00;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Native bundles cannot be installed on Windows Server 2008 r2 with the tag win32,FELIX-3363,12544158,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,nroduit,nroduit,26/Feb/12 07:54,10/Feb/14 19:47,14/Mar/19 02:48,29/Jun/12 22:16,framework-4.0.2,,,,,,framework-4.0.3,,,,,,,Framework,,,,,,1,,,,,,"  The Java property ""os.name"" is ""Windows Server 2008 R2"" on R2 system.
""osname=win32"" in the Bundle-NativeCode entry doe not work, this exception is thrown:org.osgi.framework.BundleException: Unresolved constraint in bundle native-lib-windows-x86 [6]: No matching native libraries found.

This osname alias needs to be added to the felix framework.

There is a workaround, just add
   osname=""windows server 2008 r2"";
after
   osname=win32;
in the Bundle-NativeCode entry. ",Windows Server 2008 R2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-29 08:44:21.397,,,no_permission,,,,,,,,,,,,229395,,,Fri Jun 29 22:16:37 UTC 2012,,,,,,0|i07gjz:,41448,,,,,,,,"29/Feb/12 08:44;albertdevs;I'd prefer to see both Server 2008 bugs fixed, so I've linked them.

Hopefully a dev can look into it.","16/Jun/12 19:36;rickhall;Would such a patch suffice:

--- src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(revision 1350978)
+++ src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(working copy)
@@ -378,6 +378,10 @@
             {
                 os = ""windows2003"";
             }
+            else if (value.indexOf(""2008"") >= 0)
+            {
+                os = ""windows2008"";
+            }
             else if (value.indexOf(""xp"") >= 0)
             {
                 os = ""windowsxp"";","17/Jun/12 08:17;nroduit;The issue is fixed with the following patch:

Index: src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java
===================================================================
--- src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(revision 1351067)
+++ src/main/java/org/apache/felix/framework/util/manifestparser/R4LibraryClause.java	(working copy)
@@ -140,6 +140,7 @@
             || currentOSName.equals(""windowsnt"")
             || currentOSName.equals(""windows2000"")
             || currentOSName.equals(""windows2003"")
+            || currentOSName.equals(""windows2008"")
             || currentOSName.equals(""windowsxp"")
             || currentOSName.equals(""windowsce"")
             || currentOSName.equals(""windowsvista"")
@@ -378,6 +379,10 @@
             {
                 os = ""windows2003"";
             }
+            else if (value.indexOf(""2008"") >= 0)
+            {
+                os = ""windows2008"";
+            } 
             else if (value.indexOf(""xp"") >= 0)
             {
                 os = ""windowsxp"";
",26/Jun/12 18:39;rickhall;Right. I missed the first part. Thanks. I'll put this in the framework 4.0.3 release.,"29/Jun/12 22:16;rickhall;Fix applied to 4.0.3 release candidate and framework trunk. Please close if satisfied, thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundle location is statically set for dynamically bound bundles,FELIX-3360,12543509,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,jsedding,jsedding,21/Feb/12 16:07,05/Sep/14 14:30,14/Mar/19 02:48,14/Aug/13 06:50, configadmin-1.2.8,,,,,,configadmin-1.8.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"The method ConfigurationAdminImpl#getConfiguration(pid) dynamically sets the configuration's bundle location if it is null. However, it uses ConfigurationImpl#setStaticBundleLocation(location) in order to do so. This should be changed to set the dynamic location. Attached is a proposed patch.

The issue I observed, that lead me to this bug, was as follows:

1. Installed a number of factory configurations and the bundle (version 1.0.0, bundle location: jcrinstall:/apps/sample/install/bundle-1.0.0.jar) providing the service implementation (using SCR) via Sling's OSGi Installer
2. Uninstalled the bundle.
3. Installed the bundle (version 1.0.2, bundle location: jcrinstall:/apps/sample/install/bundle-1.0.2.jar)

After this, the factory configurations were not bound to the bundle any longer, because they were still bound to the no longer existing bundle location jcrinstall:/apps/sample/install/bundle-1.0.0.jar. This basically leaves stale configurations and a badly configured system.

While Sling's OSGi Installer handles updates without changing the bundle location normally, the above scenario differs in that instead of an update, there is an uninstall + re-install happening. The Configuration Admin Service Specification 1.3 clearly states (in 104.4.1 Location Binding): ""When this dynamically bound bundle is subsequently uninstalled, the Configuration object's bundle location must be set to null again so it can be bound again later.""

Note: in the patch I also changed the return type of ConfigurationImpl#tryBindLocation() from boolean to void. Before, it always returned true, so the return value is meaningless. I almost ended up using it in an if statement because of the return type, which made me believe that it returns true if the bundle location is set and false otherwise.
",,,,,,,,,,,,,,KARAF-3204,,,,,,13/Aug/13 15:20;fmeschbe;FELIX-3360.patch;https://issues.apache.org/jira/secure/attachment/12597737/FELIX-3360.patch,21/Feb/12 16:18;jsedding;FELIX-3360.patch;https://issues.apache.org/jira/secure/attachment/12515375/FELIX-3360.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-21 16:52:17.464,,,no_permission,,,,,,,,,,,,228755,,,Sat Sep 28 15:26:59 UTC 2013,,,,,,0|i1avdz:,271551,,,,,,,,21/Feb/12 16:08;jsedding;proposed patch,"21/Feb/12 16:52;fmeschbe;Sorry, I have to decline this request because it would violate the spec.

The spec states that a configuration retrieved with the single argument getConfiguration(String pid) method must be statically bound to the calling bundle. So everything works correctly.

In fact your use case of uninstalling and re-installing a bundle to update it is not sensitive: You should really update the existing bundle. Not only will you keep the configuration properly bound but also will you not loose any potential bundle-private data (accessed through BundleContext.getDataFile(String)).

With Configuration Admin spec 1.4 new definitions of the bundle location exist and the Apache Felix SCR bundle (I assume you refer to that when you talk of the getConfiguration(String pid) method) will be updated to actually use an explicit bundle location of ""?*"" when accessing configuration to prevent this kind of binding of unbound configuration.","22/Feb/12 10:03;jsedding;> The spec states that a configuration retrieved with the single argument getConfiguration(String pid)
> method must be statically bound to the calling bundle. So everything works correctly. 

My understanding is that the bundle location is indeed bound statically when a call to getConfiguration(String pid) *creates* the configuration. If the configuration *already exists* and is not yet bound (i.e. bundle location is null), it is then dynamically bound to the calling bundle, and unbound when this bundle gets uninstalled.

If you don't agree, I would be grateful, if you could point me to the relevant section(s) in the spec. The rest of the argument is based on the assumption that the above understanding is correct.

The scenario I observed while debugging the issue is, of course, a little more complex:
1. Sling's OSGi Installer (it's what the spec refers to as ""management bundle"") creates the configuration (IMO correctly) using getConfiguration(String pid, null). [0]
2. Somewhere (I didn't observe where exactly) an event of type ConfigurationEvent.CM_UPDATED is fired.
3.The Event is handled o.a.f.scr.impl.config.ConfigurationComponentRegistry#configurationEvent, which calls #getConfiguration and finally ConfigurationAdmin#getConfiguration(String pid).

In the issue description I was referring to the single argument call to getConfiguration in step three. I.e. a previously unbound Configuration object gets bound dynamically to the bundle, which retrieves the existing Configuration. In this case, I expect the Configuration to get unbound, when the bundle is uninstalled. See also [1].

The changes in the patch reflect this scenario. A new Configuration object, created via one of the single argument methods, should have its staticBundleLocation field already set upon construction. So the point where the dynamicBundleLocation gets set can never be reached (it is guarded by a null check for bundle location).

OSGi Enterprise Spec Release 4, Version 4.2, Configuration Admin Service Spec Version 1.3:
[0] 104.4.1 Location Binding: ""These methods [the two argument versions of getConfiguration and createFactoryConfiguration] are intended for management bundles.""
[1] 104.4.1 Location Binding: ""A null location parameter may be used to create Configuration objects that are not bound. In this case, the objects become bound to a specific location the first time that they are used by a bundle. When this dynamically bound bundle is subsequently uninstalled, the Configuration object’s bundle location must be set to null again so it can be bound again later.""","15/Aug/12 13:04;fmeschbe;Reading over this issue again, I would think, that this is rather a problem of the Declarative Services implementation, which does not let go of configurations it assigns to bundles.

If you agree, I would reassign to the DS component as follows: Fix DS to make sure configurations are ""unassigned from bundles"" upon bundle uninstallation.",12/Aug/13 18:21;djencks;I am quite sure this is a CA problem not a DS problem.  I think Julian's patch looks like an improvement over the current code -- setting the config's bundle location by calling getConfiguration should be dynamic not static.  I don't know if Julian's patch is a complete solution.,"13/Aug/13 07:07;fmeschbe;This issue was discussed again on the OSGi Developer's list. The consensus seems to be that implicit bindings are dynamic and explicit bindings are static:

(a) dynamic/implicit
* getConfiguration(pid) -- configuration either created or location was null previously
* createFactoryConfiguration(pid) -- configuration is created
* Configuration supplied to ManagedService[Factory] -- if location was null previsouly

(b) static/explicit
* getConfiguration(pid, location) -- location is not null and configuration is created or location of existing configuration was null before
* createConfiguration(pid, location) -- where location is not null
* Configuration.setBundleLocation(location) -- where location is not null

Configuration.setBundleLocation(null) always removes any configuration binding, regardless of whether it is static or dynamic.","13/Aug/13 09:14;jsedding;{quote}
 I don't know if Julian's patch is a complete solution. 
{quote}

I think I agree that it's incomplete. I have experimented with integration tests, but could not reliably reproduce the issue (yet). In the scenario I described DS definitely also has its part, so I looked at whether DS uses ConfigurationAdmin#getConfiguration(String pid). And indeed it has one usage in the method org.apache.felix.scr.impl.config.ConfigurationSupport#getConfiguration(ConfigurationAdmin ca, String pid), which itself is called from a handful of other places.

Is it correct for DS to use the single argument signature ConfigurationAdmin#getConfiguration(String pid) or should it, as a management bundle, rather use ConfigurationAdmin#getConfiguration(String pid, String location) with a null location?

In any case, I think there is room for improvement regarding test coverage of ConfigurationAdmin#getConfiguration(String pid).

","13/Aug/13 12:29;fmeschbe;DS is not a management bundle and it should get the configuration using the ConfigurationAdmin service retrieved through the componet's bundle. So getConfiguration(pid) is correct and would create a dynamic location binding.

Julian's patch is close to complete (configurationFactory support is missing). I am working on a complete solution including tests.

As for current tests: There are no tests in the Configuration Admin no in the OSGi CT which cover these cases. I will add such tests to the OSGi CT.

BTW: The OSGi-dev list discussion is at http://www.mail-archive.com/osgi-dev@mail.osgi.org/msg02873.html",13/Aug/13 15:20;fmeschbe;Proposed updated patch considering also factory configurations.,"14/Aug/13 06:50;fmeschbe;I have applied my patch along with an integration test intended to validate dynamic binding semantics in Rev. 1513740:

- getConfiguration(pid) binds dynamically
- createConfiguration(pid) binds dynamically
- add integration tests to validate removal of dynamic bindings
- make sure dynamic binding is cleared if static binding is set","14/Aug/13 09:16;jsedding;Thanks for the fix, Felix. Thinking of ""implicitly"" binding a configuration rather than ""dynamically"" binding it makes sense to me and makes it easier to understand the spec/contract.",28/Sep/13 15:26;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Turn around to avoid to use the split verifier on Java 7,FELIX-3359,12543437,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,21/Feb/12 07:54,04/Feb/13 12:33,14/Mar/19 02:48,22/Feb/12 09:58,ipojo-manipulator-1.8.2,,,,,,ipojo-manipulator-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-21 08:46:37.929,,,no_permission,,,,,,,,,,,,228683,,,Wed Feb 22 09:58:29 UTC 2012,,,,,,0|i07ghj:,41437,,,,,,,,21/Feb/12 08:46;sauthieg;Thanks for the fix,22/Feb/12 09:58;clement.escoffier;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Objectweb ASM Clashes with IPojo,FELIX-3356,12543300,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,bob.ziuchkovski@gmail.com,bob.ziuchkovski@gmail.com,20/Feb/12 07:08,14/May/12 14:58,14/Mar/19 02:48,16/Apr/12 05:56,ipojo-manipulator-1.8.4,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"Ipojo automatically imports org.apache.felix.ipojo.architecture for bundles that it manages, and org.apache.felix.ipojo.architecture is marked as using org.objectweb.asm.  This creates conflicts for any ipojo-managed bundle that wishes to import and use a different objectweb asm version (i.e. 4.0) for non-ipojo purposes.  See the below output for an example:

Error executing command: Error starting bundles:
	Unable to start bundle 107: Uses constraint violation. Unable to resolve bundle revision test.service [107.0] because it is exposed to package 'org.objectweb.asm' from bundle revisions org.objectweb.asm.all [98.0] and org.apache.felix.ipojo [99.0] via two dependency chains.

Chain 1:
  test.service [107.0]
    import: (&(osgi.wiring.package=org.objectweb.asm)(version>=4.0.0)(!(version>=5.0.0)))
     |
    export: osgi.wiring.package=org.objectweb.asm
  org.objectweb.asm.all [98.0]

Chain 2:
  test.service [107.0]
    import: (&(osgi.wiring.package=org.apache.felix.ipojo.architecture)(version>=1.8.0))
     |
    export: osgi.wiring.package=org.apache.felix.ipojo.architecture; uses:=org.objectweb.asm
    export: osgi.wiring.package=org.objectweb.asm
  org.apache.felix.ipojo [99.0]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-20 07:42:28.463,,,no_permission,,,,,,,,,,,,228546,,,Mon May 14 14:58:28 UTC 2012,,,,,,0|i07g5z:,41385,,,,,,,,"20/Feb/12 07:42;djencks;Could you clarify if the problem is that the ipojo package in question actually uses asm classes in a method signature or by extending or implementing one of the classes, so that the uses clause is correct, or is this another example of bnd generating incorrect uses clauses for packages containing implementation classes because the uses clause generator scans the whole class, not just the class parents and method signatures?","20/Feb/12 08:21;bob.ziuchkovski@gmail.com;Hmm...it looks like bnd is getting the manifest correct, in that it only shows org.apache.felix.ipojo.handlers.dependency as using org.objectweb.asm.  However, it lists org.apache.felix.ipojo.architecture as using org.apache.felix.ipojo, which in turn is marked as using org.apache.felix.ipojo.handlers.dependency, which uses org.objectweb.asm.  I think the ipojo->ipojo.handlers.dependency use clause is probably coming from PrimitiveInstanceDescription.java.  At a glance I don't see anything else that would cause ipojo.architecture to pull in wiring for org.objectweb.asm, but I am not 100% certain.","21/Feb/12 08:13;clement.escoffier;iPOJO should keep ASM private. Because ven if we plan to switch to ASM 4.0, it does not fix the issue with bundle requiring ASM 3.0 (APIs absolutely not compatible). So, iPOJO core, composite and online manipulator should not export ASM packages.","16/Apr/12 05:56;clement.escoffier;Fixed in trunk.

ASM packages are now private to iPOJO bundles",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autoconf can't find Metatype service,FELIX-3355,12543279,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,bramk,bramk,19/Feb/12 22:24,01/Apr/14 12:48,14/Mar/19 02:48,15/Nov/13 14:05,autoconf-rp-0.1.0,,,,,,autoconf-rp-0.1.4,,,,,,,Deployment Admin,,,,,,0,,,,,,"Although Autoconf appears to consult MetaTypeService to resolve OCDs in code it never will. This is caused by the fact that the bundle does not import org.osgi.service.metatype, but embeds it. Any actual MetaTypeService will not be assignable.

The reason it doesn't fail is that the dependencymanager dependency is optional. As a result the AutoconfResourceProcessor operates against an injected NullObject. You never get any warning, but it simply never resolves OCDs. 

Besides fixing the import IMHO it would not be unreasnable to require MetaTypeService


{code}
Index: autoconf/pom.xml
===================================================================
--- autoconf/pom.xml    (revision 1245822)
+++ autoconf/pom.xml    (working copy)
@@ -86,7 +86,7 @@
                         <Bundle-Name>Apache Felix AutoConf Resource Processor</Bundle-Name>
                         <Bundle-Description>A customizer bundle that publishes a Resource Processor service that processes configuration resources shipped in a
 Deployment Package.</Bundle-Description>
                         <Bundle-Vendor>Apache Software Foundation</Bundle-Vendor>
-                        <Private-Package>org.apache.felix.deployment.rp.autoconf, org.apache.felix.metatype, org.apache.felix.metatype.internal.l10n, org.apach
e.felix.metatype.internal, org.kxml2.io;-split-package:=merge-first, org.xmlpull.v1;-split-package:=merge-first, org.osgi.service.metatype;-split-package:=merge
-first</Private-Package>
+                        <Private-Package>org.apache.felix.deployment.rp.autoconf, org.apache.felix.metatype, org.apache.felix.metatype.internal.l10n, org.apach
e.felix.metatype.internal, org.kxml2.io;-split-package:=merge-first, org.xmlpull.v1;-split-package:=merge-first</Private-Package>
                         <Export-Package>org.osgi.service.deploymentadmin.spi;version=""1.0""</Export-Package>
                         <DeploymentPackage-Customizer>true</DeploymentPackage-Customizer>
                         <Deployment-ProvidesResourceProcessor>org.osgi.deployment.rp.autoconf</Deployment-ProvidesResourceProcessor>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-20 13:01:30.081,,,no_permission,,,,,,,,,,,,228525,,,Fri Nov 15 14:05:28 UTC 2013,,,,,,0|i00yev:,3507,,,,,,,,"20/Feb/12 13:01;marrs;I agree that we should fix the import, preferably whilst still keeping the bundle self-contained. So that API package should be substitutable.

I do not agree it is reasonable to require MetaTypeService as that would contradict the spec (115.3.4): ""If the reference cannot be found in this file, it must consult the Meta Type service (if present) for the bundle that is associated with the PID that is configured."". To me the ""if present"" clearly states that we must not require it.",24/Apr/13 14:49;marrs;Make sure we fix this for the next release.,15/Nov/13 14:05;marrs;Committed a fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The implementation of org.osgi.service.packageadmin.PackageAdmin#getExportedPackages(Bundle), does not follow the spec.",FELIX-3353,12542642,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,yasuk,yasuk,15/Feb/12 07:13,16/Jun/12 19:16,14/Mar/19 02:48,16/Jun/12 19:16,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"Spec says 
PackageAdmin#getExportedPackages(Bundle) returnes null,  if the specified bundle has no exported packages.
But this method returns  ""NOT null"", under the following conditions:

BundleA :
  Export-Package: p.a

Bundle[] ba = { BundleA }

1. uninstall BundleA.
2. call org.osgi.service.packageadmin.PackageAdmin#refreshPackage(ba).
3. call org.osgi.service.packageadmin.PackageAdmin#getExportedPackages(BundleA).

I think BundleA has no exported packages, so PackageAdmin#getExportedPackages(BundleA) should returns null.

see:
http://www.osgi.org/javadoc/r4v43/org/osgi/service/packageadmin/PackageAdmin.html#getExportedPackages(org.osgi.framework.Bundle)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-16 19:16:59.806,,,no_permission,,,,,,,,,,,,227928,,,Sat Jun 16 19:16:59 UTC 2012,,,,,,0|i07ghz:,41439,,,,,,,,16/Jun/12 19:16;rickhall;Done. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Maven Bundle Plugin ignores resource properties configured inside <filters> section,FELIX-3352,12542588,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,wfrag,wfrag,14/Feb/12 20:10,12/Jun/13 23:46,14/Mar/19 02:48,07/Jun/13 21:24,maven-bundle-plugin-2.3.6,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,2,patch,,,,,"maven-bundle-plugin does not pass properties from the files configured inside <build><filters> section to the BND. As a result, all properties configured in external filter files are unresolved in the final bundle.
",,,,,,,,,,,,,,,,,,,,14/Feb/12 21:47;wfrag;felix-3352.patch;https://issues.apache.org/jira/secure/attachment/12514558/felix-3352.patch,14/Feb/12 21:22;wfrag;felix-3352.zip;https://issues.apache.org/jira/secure/attachment/12514550/felix-3352.zip,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-14 20:51:25.602,,,no_permission,,,,,,,,,,,,227874,,,Fri Jun 07 21:24:45 UTC 2013,,,,,,0|i0fuzb:,90617,,,,,,,,14/Feb/12 20:51;mcculls;Can you attach an example project? A patch would be even better ;),"14/Feb/12 21:22;wfrag;Attached example project. After ""mvn clean package"", look inside generate JAR file. One property (pom.property) is properly interpolated in the test.txt, but the other one (external.property) is not.

If you change the packaging to ""jar"", both properties are properly interpolated.",14/Feb/12 21:47;wfrag;Attached patch against svn trunk.,"07/Nov/12 17:34;hayos;The problem also applies maven-bundle-plugin-2.3.7.
Until resolution, a configurational workaround would be appreciated.
","08/Nov/12 07:35;fmeschbe;I think the problem is related to the bundle plugin actually picking up the resource from src/main/resources instead of from target/classes where the resources are placed.

As a workaround you can configure maven to copy the resources into a special location, e.g. target/resources, and the instruct the bundle plugin to pick them up from there using the <Include-Resource> directive.",08/Nov/12 11:31;hayos;Proposed workaround is feasible for me. Thanks.,07/Jun/13 21:24;mcculls;Fixed in r1490836,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wrong bundle manifest contents in some cases,FELIX-3349,12542423,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,igorf,igorf,13/Feb/12 17:17,12/Jun/13 23:46,14/Mar/19 02:48,07/Jun/13 21:49,maven-bundle-plugin-2.3.6,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"When maven-jar-plugin configuration uses relative manifestFile path (i.e. <manifestFile>META-INF/MANIFEST.MF</manifestFile>), org.apache.felix.bundleplugin.JarPluginConfiguration will calculate manifestFile relative to JVM current working directory instead of ${project.basedir}. This can result in unexpected/wrong generated bundle manifest contents for multi-module projects. I'll attach an example project that demonstrates the problem shortly.",,,,,,,,,,,,,,,,,,,,13/Feb/12 17:20;igorf;mbp-wrong-bsn.zip;https://issues.apache.org/jira/secure/attachment/12514375/mbp-wrong-bsn.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-07 21:49:43.726,,,no_permission,,,,,,,,,,,,227709,,,Fri Jun 07 21:49:43 UTC 2013,,,,,,0|i1avev:,271555,,,,,,,,"13/Feb/12 17:20;igorf;Running ""mvn clean package"" from the root of the attached project results in wrong Bundle-SymbolicName:this.aint.right . Running ""mvn clean package"" from bundle/ subdirectory generates expected Bundle-SymbolicName: maven-bundle-plugin.bundle",07/Jun/13 21:49;mcculls;Fixed in r1490846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StartLevel thread may terminate on uncaught exception,FELIX-3348,12542399,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,fmeschbe,fmeschbe,13/Feb/12 14:20,15/Feb/12 07:34,14/Mar/19 02:48,13/Feb/12 14:57,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"It looks like an uncaught exception is able to terminate the StartLevel thread thus causing the framework to not be properly controllable.

Sample issue: Felix.setActiveStartLevel may throw IllegalStateException if global lock cannot be acquired. This exception is not caught and causes StartLevel thread to terminate.",,,,,,,,,,,,,,,,,,,,14/Feb/12 08:30;fmeschbe;FELIX-3348-2.patch;https://issues.apache.org/jira/secure/attachment/12514468/FELIX-3348-2.patch,13/Feb/12 14:22;fmeschbe;FELIX-3348.patch;https://issues.apache.org/jira/secure/attachment/12514355/FELIX-3348.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-13 14:57:42.87,,,no_permission,,,,,,,,,,,,227685,,,Wed Feb 15 07:34:14 UTC 2012,,,,,,0|i07glj:,41455,,,,,,,,"13/Feb/12 14:22;fmeschbe;Proposed patch:
  - catching IllegalStateException rescheduling the start level change
  - catching other exceptions just continuing

Depending on the cause of the IllegalStateException, this may in fact cause the startlevel switch to be endlessly done. Maybe not scheduling the start level again is better ...",13/Feb/12 14:57;rickhall;Seems reasonable. I just applied the patch. Please close if satisfied. Thanks.,"14/Feb/12 08:30;fmeschbe;Thanks.

On second thought: my patch may introduce an endless loop without exit: The current request is placed at the first position if an IllegalStateException is thrown under the assumption this is a transient situation. If the exception keeps being thrown the same request is placed over and over again without any other request having a chance to enter.

Maybe it would be better to just retry once and on the second round log an error message but to not do it again ?","14/Feb/12 14:26;rickhall;Good point, I didn't think of that. Ok, I'll take a look again.","14/Feb/12 20:13;rickhall;Ok, I committed the second patch too. Please close if satisfied. Thanks.",15/Feb/12 07:34;fmeschbe;Thanks alot. I am happy with that.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upper-case environment variables end up in final manifest,FELIX-3347,12542238,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,mcculls,mcculls,mcculls,11/Feb/12 14:14,11/Feb/12 14:29,14/Mar/19 02:48,11/Feb/12 14:29,maven-bundle-plugin-2.3.5,maven-bundle-plugin-2.3.6,,,,,maven-bundle-plugin-2.3.7,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"On 10 Feb 2012, at 08:01, Tuomas Kiviaho wrote:
I'm having the exact same problem. Any news what might cause this. I upgraded
the bundle plugin from 2.0.1 to 2.3.6 and this started to appear.

See this thread http://www.mail-archive.com/users@felix.apache.org/msg11754.html for more discussion.

I tracked the cause down to https://issues.apache.org/jira/browse/FELIX-2449 which added the Maven session execution properties to the properties passed to bnd.
This change was needed so people could use command-line properties in bnd macros, otherwise you could get inconsistent results between Maven and bnd filtering.

Perhaps we should simply avoid adding any Maven session execution properties that start with an upper-case letter (bnd automatically copies these to the manifest).

Reminder: you can tell bnd to avoid copying entries to the manifest by listing the headers in the <_removeheaders> instruction.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,227525,,,Sat Feb 11 14:29:35 UTC 2012,,,,,,0|i07h4v:,41542,,,,,,,,11/Feb/12 14:29;mcculls;Fixed in r1243069,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File Install doesn't scan when the framework start level is lower than felix.fileinstall.start.level setting,FELIX-3346,12542136,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,albertdevs,albertdevs,10/Feb/12 15:35,17/Mar/15 07:00,14/Mar/19 02:48,16/Mar/12 08:12,,,,,,,fileinstall-3.2.0,,,,,,,File Install,,,,,,0,,,,,,"1. Set the OSGi start-level to 100 (Karaf default).

2. Configure the following setting in the system properties or factory config for FileInstall:
    felix.fileinstall.start.level = 150

3. Drop something in a folder watched by the File Install component. No bundles get installed or updated.

Expected behaviour is that bundles get installed, and obviously without them starting.","Karaf 2.2.5, Windows",,,,,,,,,,,,,FELIX-2021,,,,FELIX-2787,,15/Mar/12 22:25;albertdevs;fileinstall-startlevel2.patch;https://issues.apache.org/jira/secure/attachment/12518559/fileinstall-startlevel2.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-15 21:13:11.174,,,no_permission,,,,,,,,,,,,227423,,,Thu Mar 15 22:32:48 UTC 2012,,,,,,0|i07g9r:,41402,,,,,,,,"10/Feb/12 15:39;albertdevs;Just a note for someone willing to work on this:
fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java has the following on line 262:
                // Waiting for start level
                if (FileInstall.getStartLevel().getStartLevel() >= startLevel)
                {
                    Set/*<File>*/ files = scanner.scan(false);
                    // Check that there is a result.  If not, this means that the directory can not be listed,
                    // so it's presumably not a valid directory (it may have been deleted by someone).
                    // In such case, just sleep
                    if (files != null)
                    {
                        process(files);
                    }
                }

I'm not sure why that if was added (maybe process(...) has no idea about the start level) but this causes the component to idle when the start level configured in felix.fileinstall.start.level is not reached.","02/Mar/12 13:26;albertdevs;Issue FELIX-2021 introduced the start level feature. The comments mention that the scanner now waits for the start level because all bundles were automatically started, even when they weren't supposed to.

I'll see if I can supply a patch which fixes this issue but doesn't start bundles unless the right start level is reached.","11/Mar/12 17:41;albertdevs;I've attached a patch (""fileinstall-lognstartlvl.patch"") which changes
the following things: 

- When I configured the ""felix.fileinstall.start.level"" setting, the
component wouldn't run update or refresh when the framework's start
level is too low. I've introduced a new setting
""felix.fileinstall.active.level"" to configure the scan behaviour, e.g.
so you can set it higher than the system bundle start-level so that
the framework bundles resolve first. By default, the file install
component now always updates, irregardless of the
""felix.fileinstall.start.level"" setting.
- The bundle start level is now only set when a bundle is installed
and not every time a bundle gets restarted. I'd expect that a user
should be able to override the bundle start level instead of it being
reset each time the file install component triggers a bundle start.
- The bundle-start-level and start-new-bundles settings now work independently. The bundle start-level will get updated when configured, but the bundle will not be persistently started unless the start-setting is also true.

Please note that these changes might warrant a new minor release instead of a bug fix release.",15/Mar/12 21:09;albertdevs;I'm going to make a new patch... This one's faulty.,"15/Mar/12 21:13;gnt;I'm planning to do a release asap, so let me know when you think you'll have a working patch.","15/Mar/12 21:26;albertdevs;I've been testing the new code today, but I want to do one last test. I guess it'll be ready within the hour.","15/Mar/12 22:25;albertdevs;Updated patch (fileinstall-startlevel2.patch) attached.

Any bundles which can't be started at install time will now use a ""delayed start""; i.e. when the framework start level is raised, those bundles will attempt another start.

This patch also mitigates a ConcurrentModificationException in the bundleChanged method.","15/Mar/12 22:32;albertdevs;Ok, the patch is done.

Please let me know if there are any issues with this patch or the one I submitted for FELIX-3373 (file install logging).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrency problems in SCR,FELIX-3345,12542044,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,djencks,djencks,09/Feb/12 22:49,01/Aug/15 11:25,14/Mar/19 02:48,28/Nov/12 23:37, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"We've been encountering several exceptions thrown intermittently from DS.  They generally look like ungetting service on a disposed-of SCR BundleComponentActivator, ComponentManager, or DependencyManager.  There may be two threads trying to shut down the same bundles at the same time.  I'm not sure how to investigate the root cause or if this kind of behavior is expected.  The SCR code generally doesn't look very thread safe.  It's easy to ""fix"" the specific problems we see by adding more checks to the SCR code so the NPEs are avoided, or attempted use of closed bundle contexts are caught and ignored.  I'd be happy to keep looking into this but could use some hints about what should be happening.  Unless someone can come up with a better explanation and fix it would be great meanwhile to patch the code to avoid throwing the exceptions.

Here are some of the typical stack traces we see:

Stack Dump = org.osgi.framework.ServiceException: Exception in org.apache.felix.scr.impl.manager.DelayedComponentManager.ungetService()
	at org.eclipse.osgi.internal.serviceregistry.ServiceUse.releaseService(ServiceUse.java:287)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.releaseService(ServiceRegistrationImpl.java:562)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.releaseServicesInUse(ServiceRegistry.java:665)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.close(BundleContextImpl.java:91)
	at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:514)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:565)
	at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1161)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
	at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
	at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
	at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
	at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.NullPointerException
	at org.apache.felix.scr.impl.BundleComponentActivator.log(BundleComponentActivator.java:614)
	at org.apache.felix.scr.impl.BundleComponentActivator.log(BundleComponentActivator.java:589)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.log(AbstractComponentManager.java:633)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.log(AbstractComponentManager.java:1000)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.ungetService(AbstractComponentManager.java:964)
	at org.apache.felix.scr.impl.manager.DelayedComponentManager.ungetService(DelayedComponentManager.java:114)
	at org.eclipse.osgi.internal.serviceregistry.ServiceUse$3.run(ServiceUse.java:277)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.osgi.internal.serviceregistry.ServiceUse.releaseService(ServiceUse.java:275)
	... 14 more


Stack Dump = org.osgi.framework.ServiceException: Exception in org.apache.felix.scr.impl.manager.DelayedComponentManager.ungetService()
	at org.eclipse.osgi.internal.serviceregistry.ServiceUse.releaseService(ServiceUse.java:287)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.releaseService(ServiceRegistrationImpl.java:562)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:245)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.unregisterServices(ServiceRegistry.java:635)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.close(BundleContextImpl.java:88)
	at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:514)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:565)
	at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1161)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
	at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
	at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
	at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
	at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.IllegalStateException: BundleContext is no longer valid
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.checkValid(BundleContextImpl.java:931)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.ungetService(BundleContextImpl.java:634)
	at org.apache.felix.scr.impl.manager.DependencyManager.ungetService(DependencyManager.java:819)
	at org.apache.felix.scr.impl.manager.DependencyManager.unbind(DependencyManager.java:1000)
	at org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:880)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:268)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:135)
	at org.apache.felix.scr.impl.manager.DelayedComponentManager.deleteComponent(DelayedComponentManager.java:67)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Active.ungetService(AbstractComponentManager.java:1266)
	at org.apache.felix.scr.impl.manager.DelayedComponentManager.ungetService(DelayedComponentManager.java:114)
	at org.eclipse.osgi.internal.serviceregistry.ServiceUse$3.run(ServiceUse.java:277)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.osgi.internal.serviceregistry.ServiceUse.releaseService(ServiceUse.java:275)
	... 15 more


-------
This one is from FELIX-3307:

java.lang.NullPointerException 
at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1028) 
at org.apache.felix.scr.impl.manager.DependencyManager.serviceAdded(DependencyManager.java:308) 
at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:170) 
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104) 
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861) 
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) 
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148) 
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819) 
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771) 
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130) 
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214) 
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433) 
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:451) 
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:950) 
",,,,,,,,,,,,,FELIX-3307,,,,,,,09/Feb/12 23:22;djencks;FELIX-3345-2.diff;https://issues.apache.org/jira/secure/attachment/12514042/FELIX-3345-2.diff,22/Feb/12 07:53;djencks;FELIX-3345-3.diff;https://issues.apache.org/jira/secure/attachment/12515547/FELIX-3345-3.diff,23/Feb/12 01:04;djencks;FELIX-3345-4.diff;https://issues.apache.org/jira/secure/attachment/12515670/FELIX-3345-4.diff,01/Mar/12 23:23;djencks;FELIX-3345-5.diff;https://issues.apache.org/jira/secure/attachment/12516753/FELIX-3345-5.diff,09/Feb/12 22:57;djencks;FELIX-3345.diff;https://issues.apache.org/jira/secure/attachment/12514032/FELIX-3345.diff,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2012-03-08 04:16:14.655,,,no_permission,,,,,,,,,,,,227331,,,Wed Nov 28 23:37:30 UTC 2012,,,,,,0|i07go7:,41467,,,,,,,,"09/Feb/12 22:57;djencks;Detect and avoid error conditions, without much attempt to understand their cause.","09/Feb/12 23:08;djencks;Here are a couple more stack traces:

Stack Dump = java.lang.IllegalStateException: BundleContext is no longer valid
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.checkValid(BundleContextImpl.java:931)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.ungetService(BundleContextImpl.java:634)
	at org.apache.felix.scr.impl.config.ConfigurationSupport.configureComponentHolder(ConfigurationSupport.java:112)
	at org.apache.felix.scr.impl.ComponentRegistry.createComponentHolder(ComponentRegistry.java:437)
	at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:232)
	at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)
	at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)
	at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:274)
	at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:192)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
	at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1523)
	at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1459)
	at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1454)
	at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:391)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:299)
//some management code is trying to start a bundle here

Stack Dump = org.osgi.framework.BundleException: Exception in org.apache.felix.scr.impl.Activator.stop() of bundle org.apache.felix.scr.
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.stop(BundleContextImpl.java:791)
	at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:510)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:565)
	at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1161)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
	at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
	at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
	at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
	at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.IllegalStateException: BundleContext is no longer valid
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.checkValid(BundleContextImpl.java:931)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getBundle(BundleContextImpl.java:121)
	at org.apache.felix.scr.impl.Activator.disposeAllComponents(Activator.java:355)
	at org.apache.felix.scr.impl.Activator.stop(Activator.java:142)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:771)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.stop(BundleContextImpl.java:764)
	... 11 more
",09/Feb/12 23:22;djencks;This patch includes the previous one and works around the 2 additional problems,"22/Feb/12 07:53;djencks;I've finally managed to reproduce a similar problem in a test.  The attached includes a lot of logging additions to scr, ignores the existing integration tests, and adds one that demonstrates a similar problem.  It also always fails for unrelated reasons.  The interesting stack trace is 

java.lang.NullPointerException: No log service
        at org.apache.felix.scr.impl.BundleComponentActivator.log(BundleComponentActivator.java:623)
        at org.apache.felix.scr.impl.BundleComponentActivator.log(BundleComponentActivator.java:594)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.log(AbstractComponentManager.java:635)
        at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:596)
        at org.apache.felix.scr.impl.helper.BaseMethod$NotResolved.invoke(BaseMethod.java:552)
        at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:476)
        at org.apache.felix.scr.impl.helper.BindMethod.invoke(BindMethod.java:36)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeUnbindMethod(DependencyManager.java:1142)
        at org.apache.felix.scr.impl.manager.DependencyManager.unbind(DependencyManager.java:999)
        at org.apache.felix.scr.impl.manager.DependencyManager.close(DependencyManager.java:886)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:269)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:135)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1225)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:339)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceRemoved(DependencyManager.java:346)
        at org.apache.felix.scr.impl.manager.DependencyManager.serviceChanged(DependencyManager.java:253)
        at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
        at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)
        at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
        at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819)
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771)
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:225)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterComponentService(AbstractComponentManager.java:567)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1224)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.disposeInternal(AbstractComponentManager.java:360)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.dispose(AbstractComponentManager.java:197)
        at org.apache.felix.scr.impl.config.ImmediateComponentHolder.disposeComponents(ImmediateComponentHolder.java:356)
        at org.apache.felix.scr.impl.BundleComponentActivator.dispose(BundleComponentActivator.java:312)
        at org.apache.felix.scr.impl.Activator.disposeComponents(Activator.java:333)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:198)
        at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
        at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
        at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
        at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1523)
        at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1459)
        at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1454)
        at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:506)
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.stop(AbstractBundle.java:464)
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.stop(AbstractBundle.java:456)
        at org.apache.felix.scr.integration.concurrency.ConcurrentShutdownTest$Worker.run(ConcurrentShutdownTest.java:185)
        at java.lang.Thread.run(Thread.java:680)

By messing with the timing I've gotten into a state where we're trying to log on a BundleComponentActivator that has been shut down.  The activity being logged is different, but the NPE is the same.  Admittedly I added the log statement in question....

The basic scenario is two threads shutting stuff down concurrently, and an unbind method that takes a long time to return.

bundle A has a service s1
bundle B has a service s2 with a reference to s1, and an unbind method that takes a long time.

Stop A in thread 1; the thread gets stuck in unbind of s2.

Stop B in thread 2; this shuts down B so it's BundleComponentActivator no longer can log (the NPE).

If the unbind method in thread 1 now returns, it will try to log in B's BCA which has no log service tracker.

If you comment out my added logging statement you get a different NPE.","23/Feb/12 01:04;djencks;This is the same test but I removed all the stuff that didn't work.  I had to modify ds logging to always use system.out since I don't understand how to get it to use pax-logging in the test.

To be clear, this test is not in a committable form but should provide a way to see a concurrency problem repeatedly.","01/Mar/12 23:23;djencks;Patch that fixes the underlying NPE from the concurrency test, that we have also run into in production.","08/Mar/12 04:16;fmeschbe;Thanks for providing the patches. As indicated in [1] I have applied the patches as follows:

   FELIX-3345-2.diff in Rev. 1298266
   FELIX-3345-5.diff in Rev. 1298267

Patch FELIX-3345-6.diff referred to in the message seems to be missing. Doesn't matter, I'd like to apply the comprehensive test patch as of FELIX-3371 anyway.

[1] http://markmail.org/message/zzf4tjuky6wxm3v2",08/Mar/12 04:42;fmeschbe;What about the patches 3 and 4 ? Should these also be applied ? Are there any differences between them ?,"31/May/12 14:00;fmeschbe;What is the relationship of this issue with FELIX-3456 ?

Is this still reproducible ?",28/Nov/12 23:37;djencks;The relevant patches were all applied well before 1.6.2 was released,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions related to the pipe used in deployment admin,FELIX-3336,12541045,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,marrs,marrs,marrs,03/Feb/12 08:51,05/Jun/13 20:57,14/Mar/19 02:48,24/Apr/13 14:48,,,,,,,deploymentadmin-0.9.4,,,,,,,Deployment Admin,,,,,,0,,,,,,"Sporadically getting ""Pipe closed"" exceptions. Not reproducible yet, but seemingly related to a line containing ""input.close()"" in the ExplodingOutputtingInputStream. Needs investigation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-03 15:24:39.192,,,no_permission,,,,,,,,,,,,226397,,,Wed Apr 24 14:48:16 UTC 2013,,,,,,0|i00yef:,3505,,,,,,,,"03/Feb/12 12:43;marrs;A solution has been committed, but I'm not quite sure why it works. If you do a checkout, and run ""mvn clean install"" the test succeeds. If you apply this patch:

{code}

Index: src/main/java/org/apache/felix/deploymentadmin/ExplodingOutputtingInputStream.java
===================================================================
--- src/main/java/org/apache/felix/deploymentadmin/ExplodingOutputtingInputStream.java	(revision 1240137)
+++ src/main/java/org/apache/felix/deploymentadmin/ExplodingOutputtingInputStream.java	(working copy)
@@ -73,7 +73,7 @@
         super(inputStream, output);
         m_contentDir = root;
         m_indexFile = index;
-        m_input = new PipedInputStream(output /*, 8 FELIX-3336: if you provide such a small buffer, the error is reproducible (see below) */);
+        m_input = new PipedInputStream(output , 8 /* FELIX-3336: if you provide such a small buffer, the error is reproducible (see below) */);
         m_task = new Thread(this, ""Apache Felix DeploymentAdmin - ExplodingOutputtingInputStream"");
         m_task.start();
     }
@@ -129,16 +129,16 @@
             }
         }
         // FELIX-3336: if you include this code, the issue is gone
-        try {
-            byte[] bb = new byte[512];
-            int c = m_input.read(bb);
-            while (c != -1) {
-                c = m_input.read(bb);
-            }
-        }
-        catch (IOException e) {
-            e.printStackTrace();
-        }
+//        try {
+//            byte[] bb = new byte[512];
+//            int c = m_input.read(bb);
+//            while (c != -1) {
+//                c = m_input.read(bb);
+//            }
+//        }
+//        catch (IOException e) {
+//            e.printStackTrace();
+//        }
     }

{code}

And then run the test again, you get:

{code}

$ cat target/surefire-reports/org.apache.felix.deploymentadmin.ExplodingOutputtingInputStreamTest.txt 
-------------------------------------------------------------------------------
Test set: org.apache.felix.deploymentadmin.ExplodingOutputtingInputStreamTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.071 sec <<< FAILURE!
testStream(org.apache.felix.deploymentadmin.ExplodingOutputtingInputStreamTest)  Time elapsed: 1.057 sec  <<< ERROR!
java.io.IOException: Read end dead
	at java.io.PipedInputStream.checkStateForReceive(PipedInputStream.java:246)
	at java.io.PipedInputStream.awaitSpace(PipedInputStream.java:252)
	at java.io.PipedInputStream.receive(PipedInputStream.java:215)
	at java.io.PipedOutputStream.write(PipedOutputStream.java:132)
	at org.apache.felix.deploymentadmin.OutputtingInputStream.read(OutputtingInputStream.java:58)
	at org.apache.felix.deploymentadmin.ExplodingOutputtingInputStreamTest.testStream(ExplodingOutputtingInputStreamTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [...]

{code}

For some weird reason the read blocks and finally generates an exception because the pipe has been closed. I have no clue why the read blocks though, and why reading extra bytes from an underlying stream (m_input) that should have already been read completely (this ZipInputStream reads everything it should) unblocks the read. Admittedly, this is not the easiest piece of code to read, but I can't find a fundamental flaw in the approach. Maybe someone else can. :)","03/Feb/12 15:24;jajans;After some debugging, it appears that a ZipInputStream does *not* read all bytes from the underlying input stream, but stops after the last ZIP-entry (after this the central directory of the ZIP file is stored, which is not used by the implementation). Hence, the ExplodingOutputtingInputStream thinks it has read all underlying bytes, but in fact this is not the case. So, it terminates, while the other end still is processing the last couple of bytes (= central directory of ZIP-file). This explains why the above error occurs.

A solution would be to read the last couple of bytes in the input stream after the ZipInputStream is finished...

PS: one of the reasons why this might spuriously occur in real life is that the buffer size of PipedInputStream is large enough to read those last couple of bytes of the ZIP file...",24/Apr/13 14:48;marrs;This has been fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Whiteboard Web Console plugin does not properly display filters registered with the same pattern,FELIX-3335,12540912,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,02/Feb/12 12:30,28/Sep/13 17:40,14/Mar/19 02:48,02/Feb/12 12:32,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,The Whiteboard Web Console plugin uses a TreeMap to sort the registered filters by pattern. This causes to not display filters whose patterns are the same.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,226265,,,Thu Feb 02 12:32:34 UTC 2012,,,,,,0|i0vuwf:,183979,,,,,,,,02/Feb/12 12:32;fmeschbe;Fixed in Rev. 1239578,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SCR annotations @Activate @Deactivate @Modified in outer classes also affect nested classes, annotations in nested classes are ignored",FELIX-3332,12540552,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,daniel-faber,daniel-faber,31/Jan/12 13:22,18/Feb/13 08:05,14/Mar/19 02:48,30/Jan/13 21:31,maven-scr-plugin-1.7.2,maven-scr-plugin-1.7.4,,,,,maven-scr-plugin-1.10.0,scr ant task 1.4.0,scr generator 1.4.0,,,,,SCR Tooling,,,,,,0,,,,,,"When maven-scr-plugin processes components that are implemented as nested classes, SCR annotations @Activate @Deactivate @Modified in these nested classes are ignored.  Annotations in the outer class are used instead:


import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;

@Component
public class Outer {

    @Activate
    private void activateOuter() {
    }

    @Component
    public static class Nested1 {
    }

    @Component
    public static class Nested2 {

        @Activate
        private void activateNested2() {
        }

    }

}


results in this component description:


<?xml version=""1.0"" encoding=""UTF-8""?>
<components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.1.0"">
    <scr:component enabled=""true"" name=""Outer"" activate=""activateOuter"">
        <implementation class=""Outer""/>
        <property name=""service.pid"" value=""Outer""/>
    </scr:component>
    <scr:component enabled=""true"" name=""Outer$Nested1"" activate=""activateOuter"">
        <implementation class=""Outer$Nested1""/>
        <property name=""service.pid"" value=""Outer$Nested1""/>
    </scr:component>
    <scr:component enabled=""true"" name=""Outer$Nested2"" activate=""activateOuter"">
        <implementation class=""Outer$Nested2""/>
        <property name=""service.pid"" value=""Outer$Nested2""/>
    </scr:component>
</components>


All components have an activate=""activateOuter"" attribute.  Similar problems occur if the outer class is not a component or does not have an @Activate annotation:


public class Outer {

    @Component
    public static class Nested {

        @Activate
        private void activateNested() {
        }

    }

}

Here the activate attribute is missing:

<?xml version=""1.0"" encoding=""UTF-8""?>
<components xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.0.0"">
    <scr:component enabled=""true"" name=""Outer$Nested"">
        <implementation class=""Outer$Nested""/>
        <property name=""service.pid"" value=""Outer$Nested""/>
    </scr:component>
</components>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-25 13:51:10.35,,,no_permission,,,,,,,,,,,,225965,,,Wed Jan 30 21:31:22 UTC 2013,,,,,,0|i1avfz:,271560,,,,,,,,"25/Jan/13 13:51;cziegeler;With the switch to real annotations, inner classes are not supported at all - I'm not sure if inner classes are supported in general by DS but don't see a reason why not",30/Jan/13 20:49;cziegeler;I've added a first implementation to handler publiuc inner classes.,30/Jan/13 21:31;cziegeler;Tested with the above two examples. I think we can close this now,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Finding activate/deactivate/modified methods has numerous problems,FELIX-3325,12540279,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,djencks,djencks,28/Jan/12 23:12,20/Nov/12 10:58,14/Mar/19 02:48,29/Jan/12 13:07, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I've identified at least 3 problems in the code finding appropriate activate/deactivate/modified methods on DS components.

1. BaseMethod.getMethod wraps SuitableMethodNotAccessibleException exceptions in InvocationTargetExceptions, which prevents callers from detecting the SuitableMethodNotAccessibleException and responding appropriately.

2. ActivateMethod.doFindMethod: if it gets to looking for an empty method, it will return null if there isn't one, even if there was a previous SuitableMethodNotAccessible detected.  It should only return a non-null method.

3. ActivateMethod.getSingleParameterMethod will throw a SuitableMethodNotAccessibleException even if it finds an accessible suitable method after the non-accessible one.

In addition, ReferenceMetadata.validate does not make the object read-only by setting m_validate.",,,,,,,,,,,,,,,,,,,,28/Jan/12 23:22;djencks;FELIX-3325.diff;https://issues.apache.org/jira/secure/attachment/12512339/FELIX-3325.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-29 12:47:12.484,,,no_permission,,,,,,,,,,,,225692,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i07gpr:,41474,,,,,,,,28/Jan/12 23:22;djencks;Patch fixes the 4 problems noted in the description and adds unit tests for precedence and finding an accessible suitable method after finding a non-accessible suitable method.,"29/Jan/12 12:47;fmeschbe;Thanks for providing the patch.

> ReferenceMetadata.validate

right, not a big deal in reality, but good for code completeness.

> BaseMethod.getMethod

Wow, yeah, the expected exception is eaten.

> ActivateMethod.doFindMethod

right.

going to apply this patch.",29/Jan/12 13:07;fmeschbe;Applied your patch in Rev. 1237274,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ipojo composite throw ClassCastException when configuration is updated thru ConfigAdmin,FELIX-3323,12540167,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,dgay,dgay,27/Jan/12 18:14,14/May/12 14:58,14/Mar/19 02:48,09/Feb/12 16:52,iPOJO-1.8.0,,,,,,ipojo-composite-1.8.2,ipojo-core-1.8.2,,,,,,iPOJO,,,,,,0,composite,configurationadmin,ipojo,,,"1- Declare an iPojo composite
2- Create a configuration in ConfigAdmin for the composite
3- Update the configuration in ConfigAdmin

A ClassCastException is raised when the configuration is updated, for example  :
*ERROR* [org.apache.felix.ipojo.Factory, org.osgi.service.cm.ManagedServiceFactory, id=38, bundle=14]: Unexpected problem updating Configuration PID=foo.compo.26ec176f-6860-4100-a538-b5fb523d4a1f, fac
toryPID=foo.compo, bundleLocation=file:../foo-composite/target/foo-composite-1.0.0-SNAPSHOT.jar
java.lang.ClassCastException: org.apache.felix.ipojo.composite.CompositeManager cannot be cast to org.apache.felix.ipojo.InstanceManager
        at org.apache.felix.ipojo.IPojoFactory.updated(IPojoFactory.java:627)
        at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1567)
        at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
        at java.lang.Thread.run(Unknown Source)

A complete test project is available to reproduce the problem in this message : http://old.nabble.com/iPojo-Composite-to33188907.html
",Windows 7 - Felix 4.0.2 - Java 1.6.0_26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-09 16:51:48.825,,,no_permission,,,,,,,,,,,,225582,,,Mon May 14 14:58:25 UTC 2012,,,,,,0|i07gqv:,41479,,,,,,,,"09/Feb/12 16:51;clement.escoffier;Ohoh ! 

Stupid and simple bug, an unexpected and useless cast... 
I got your example running and working. 

Thanks !

","13/Feb/12 18:10;dgay;Hi Clement.

Thanks again for your help
When do you plan to release a version with the fix ?

Regards
David.","03/Apr/12 06:30;dgay;Hi,

Do you have any news when iPojo 1.8.2 will be available ?

Thanks, David","10/Apr/12 08:42;clement.escoffier;Now that the new manipulator is released, we will plan a release of the core and composite.","10/Apr/12 12:29;dgay;Thanks Clement for your feedback.
Regards. David",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebConsole UX: actions and status on bundle details don't update properly,FELIX-3320,12539908,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,stillalex,stillalex,26/Jan/12 15:07,23/Nov/12 06:54,14/Mar/19 02:48,26/Mar/12 20:11,,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"When looking at a bundle detail (both inline at /system/console/bundles and at the dedicated page: /system/console/bundles/id) the actions related to the bundle don't properly update the status and related actions.
For example:
 - I install a bundle 27, 
 - I navigate to /system/console/bundles/27: Status 'Installed' and under Actions I can start it (among other things)
 - Start the bundle: 
    - it doesn't update the proper 'Status' column. Instead the Status remains Installed and the 'Version' label td gets replaced with the new status
    - the 'Start' action doesn't get replaced with the 'Stop' action (this gets lost)

This happens in bundles.js namely because of using find() instead of children() [0]. 
Explanation: ""The .find() and .children() methods are similar, except that the latter only travels a single level down the DOM tree."" (from the jquery api). This affects bundle details page only, as it has an embedded table containing the details that is shown only on this page, thus making the find() calls select wrong components.

Will attach a patch shortly.

[0] http://api.jquery.com/children/",,,,,,,,,,,,,,,,,,,,26/Jan/12 15:09;stillalex;FELIX-3320.patch;https://issues.apache.org/jira/secure/attachment/12511986/FELIX-3320.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-26 20:11:04.709,,,no_permission,,,,,,,,,,,,225411,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i07g9z:,41403,,,,,,,,"26/Jan/12 15:09;stillalex;Proposed patch.

Replaced tr.find('td:eq(4)') with tr.children('td:eq(4)').
This handles the case where there are embedded tables and the selector can go awry.

Be kind to my flaky javascript :)",26/Mar/12 20:11;fmeschbe;Thanks for providing the patch. I have applied it in Rev. 1305533,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrency issue during Component Service registration,FELIX-3317,12539761,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,25/Jan/12 13:17,20/Nov/12 10:58,14/Mar/19 02:48,26/Jan/12 14:47, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"In our Sling-based application we saw the following behavior: The Sling ResourceResolverFactory is a component being activated. Yet every now and then a field of that component seems to become null which is not expected for an activated ResourceResolverFactory component and thus causes a NullPointerException.

Upon inspection I saw, that for the same Declarative Services component two Services have been registered where only one was actually expected.

Turns out that consumers of the ResoureResovlerFactory where all bound to the same service. The component on the other hand has been cycled due to a configuration update. So one service is backed by a deactivated component (whose field has been reset to null already) and the other service is live.

The problem is that the service backed by the deactivated method has not been unregistered and thus all consumers are hooked up to the deactivated instance causing all sorts of problems ...

This is what most probably happens in the AbstractComponentManager:

         *  T1 Unsatisfied.activate has set the state to Active already before calling registerService
         *  T1 registerService is called but the service registration field field is not assigned yet
                    during registerService ServiceListeners are called
         *  T2 A Configuration update comes in and Satisfied(Active).deactivate is called
         *  T2 calls unregisterComponentService; does nothing because the service registration field is not assigned
         *  T2 destroys component
         *  T1 assigns field from service registration

As a result the deactivated object's service registration may be unregistered later when the component is cycled again and the second service registration will only be unregistered when the providing bundle is restarted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,225264,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i07gbz:,41412,,,,,,,,"25/Jan/12 13:45;fmeschbe;There are multiple approaches to this problem:

(1) Try to delay the destruction of the component due to the configuration update if an ""incomplete"" satisified state is recognized

(2) Check state consistency after registering the service with the framework: If the state after registration is still the same as before and the service registration field has not been set (by another thread for example), the field is set. Otherwise the field is left untouched and the service is unregistered again (the backing object is most probably destroyed anyway).

The first solution must make sure to not create unsolvable deadlocks by for example employing a timout in the delay instead of just waiting. Also an indication of what ""incomplete"" means and is would be required.

The second solution really is a workaround since an invalid (or partially invalid) service object is being distributed causing all sorts of log messages (and may be trouble).","26/Jan/12 10:06;fmeschbe;Committed a first fix in Rev. 1236123

This implements the second option by checking the consistency before assigning the service registration field: If the state is (still) the same after registering the service and the service registration field is still null (concurrent execution might have already set the field) the field is set. Otherwise a WARN message is logged with the log service and the service is unregistered again.","26/Jan/12 10:54;fmeschbe;Improved state check in Rev. 1236132: a delayed or service factory component may be really activated during service registration and thus may change the state from Registered to Active. This is perfectly valid and thus must not cause the service registration to be thrown away.

Also improved logging of the Service Reference to get some usefull information out of it.",26/Jan/12 14:47;fmeschbe;I think this works now. Will create follow-up issues if problems surface.,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cookie handling seems not to work anymore,FELIX-3311,12539108,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,cziegeler,cziegeler,20/Jan/12 09:37,23/Nov/12 06:54,14/Mar/19 02:48,26/Jan/12 11:04,,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"Sorting the bundle list, switching to another tab and going back shows the bundle list in the original sort order but not in the one previously picked
As this information is in a cookie I assume that cookie handling does now work differently",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-25 13:11:14.608,,,no_permission,,,,,,,,,,,,224610,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i07gnz:,41466,,,,,,,,25/Jan/12 13:11;v_valchev;Changing the language also doesn't work for me.,"25/Jan/12 13:22;fmeschbe;I recently (FELIX-3290) changed the cookie handling to create consistent cookie names and also to make the cookies more long-lived.

Maybe this change didn't really work properly (it seems to have worked in my setup...)",26/Jan/12 11:04;v_valchev;Fixed in rev.1236136,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[patch] maven-bundle-plugin build fails with maven3 (manageArtifactSystemPath is missing),FELIX-3310,12539011,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,jcapik,jcapik,19/Jan/12 18:21,11/Feb/12 14:47,14/Mar/19 02:48,11/Feb/12 14:47,maven-bundle-plugin-2.3.6,,,,,,maven-bundle-plugin-2.3.7,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"The following patch overrides the previously mentioned abstract method:

http://jcapik.fedorapeople.org/files/maven-bundle-plugin/maven-bundle-plugin-manageArtifactSystemPath.patch
",Fedora Rawhide,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-19 18:32:03.686,,,no_permission,,,,,,,,,,,,224513,,,Sat Feb 11 14:47:42 UTC 2012,,,,,,0|i07gof:,41468,,,,,,,,"19/Jan/12 18:32;mcculls;Are you building with a patched pom file? The official source tree compiles against the Maven 2 API, and the Maven 3 runtime has a compatibility layer to handle this. ",11/Feb/12 14:47;mcculls;Fixed in r1243076,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dashes in qualifier get replaced by periods causing framework not to start up,FELIX-3309,12539003,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,janstey,janstey,19/Jan/12 17:35,30/Jul/14 07:16,14/Mar/19 02:48,29/May/14 08:02,framework-3.0.9,,,,,,framework-4.4.1,,,,,,,,,,,,,0,,,,,,"For a valid OSGi version such as 1.2.3.foo-123, the org.osgi.framework.Version class was throwing an ""invalid format"" error:

Could not create framework: java.lang.IllegalArgumentException: invalid format
java.lang.IllegalArgumentException: invalid format
 	at org.osgi.framework.Version.<init>(Version.java:140)
 	at org.apache.felix.framework.ExtensionManager$ExtensionManagerModule.<init>(ExtensionManager.java:628)
 	at org.apache.felix.framework.ExtensionManager.<init>(ExtensionManager.java:154)
 	at org.apache.felix.framework.Felix.<init>(Felix.java:385)
 	at org.apache.felix.framework.FrameworkFactory.newFramework(FrameworkFactory.java:28)

The cause of this was that in Felix.getFrameworkVersion the '-' character in the qualifier was getting replaced with a '.' so the version was changed to 1.2.3.foo.123 which wasn't valid anymore. Attaching a patch shortly that copies the code from VersionCleaner in the utils project to properly clean up the incoming version String.",,,,,,,,,,,,,,,,,,,,19/Jan/12 17:36;janstey;FELIX-3309.patch;https://issues.apache.org/jira/secure/attachment/12511143/FELIX-3309.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-19 17:48:03.129,,,no_permission,,,,,,,,,,,,224505,,,Thu May 29 08:02:39 UTC 2014,,,,,,0|i1auvr:,271469,,,,,,,,"19/Jan/12 17:48;rickhall;I don't believe that we can use regex/pattern if we want to stay compatible with the Java ME profiles.

So, we can improve the logic there, but we'll need to resort to cruder mechanisms.","19/Jan/12 20:12;janstey;How does this affect Java ME profiles? Sorry if this is obvious :) Also, I'm fine with using a cruder mechanism for this.

Thanks,
Jon",19/Jan/12 20:18;rickhall;If the framework uses regex then it won't run on ME profiles that don't have those packages. We just need to implement something that does it by hand...,29/May/14 07:17;bosschaert;I'll take a look at this.,"29/May/14 08:02;bosschaert;Resolved in http://svn.apache.org/viewvc?view=revision&revision=1598214
No regexp used.

I also included a unit test that covers [~janstey]'s use case and a few other ones.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lazy activation of bundles is not always working as expected,FELIX-3306,12538520,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,bstefanescu,bstefanescu,16/Jan/12 15:01,16/Jun/12 19:10,14/Mar/19 02:48,16/Jun/12 19:10,framework-4.0.2,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"When loading a class from a ""lazy"" bundle (e.g. Bundle-ActivationPolicy: lazy) the bundle is not always activated.
More precisely, when a bundle is triggering the activation of a chain of more than one lazy bundle (due to a class loading) not all the bundles in the chain are activated.

Example:
Let say we have 3 bundles: bundle1, bundle2 and bundle3. All those bundles are defining a lazy activation via: 'Bundle-ActivationPolicy: lazy'.
In the activator of bundle1 we load a class from bundle2. In activator of bundle2 we load a class from bundle3.
By starting (from the felix command line) the bundle1 - only the bundle2 will be activated even if the class from bundle3 is successfully loaded by the activator of bundle2.

You can find attached 3 bundles you can use to reproduce the bug. (they also contains the source code)

To reproduce the bug: 
Install a felix 4.0.2 (or 4.2.0-SNAPSHOT) and add the plugin ""org.apache.felix.fileinstall""
Configure the fileinstall plugin to load the bundles located inside the directory ./plugins:

felix.fileinstall.dir=./plugins

and put there the 3 bundles attached to the issue.

After starting Felix by typing ""lb -s"" I have:

{noformat}
START LEVEL 1
   ID|State      |Level|Symbolic name
    0|Active     |    0|org.apache.felix.framework (4.0.2)
    1|Active     |    1|org.apache.felix.bundlerepository (1.6.6)
    2|Active     |    1|org.apache.felix.fileinstall (3.1.10)
    3|Active     |    1|org.apache.felix.gogo.command (0.12.0)
    4|Active     |    1|org.apache.felix.gogo.runtime (0.10.0)
    5|Active     |    1|org.apache.felix.gogo.shell (0.10.0)
    6|Starting   |    1|bundle3 (1.0.0.201201161439)
    7|Starting   |    1|bundle1 (1.0.0.201201161439)
    8|Starting   |    1|bundle2 (1.0.0.201201161439)
{noformat}

which is OK since the 3 bundles are declared as ""lazy"" so they will enter the STARTING state.
Now start the bundle1 by typing ""start 7"". I have the following output:

{noformat}
>>> Bundle3Object loaded
Sarted bundle: bundle2
>>> Bundle2Object loaded
Started Bundle: bundle1
{noformat}

and typing again ""lb -s"" I have:

{noformat}
START LEVEL 1
   ID|State      |Level|Symbolic name
    0|Active     |    0|org.apache.felix.framework (4.0.2)
    1|Active     |    1|org.apache.felix.bundlerepository (1.6.6)
    2|Active     |    1|org.apache.felix.fileinstall (3.1.10)
    3|Active     |    1|org.apache.felix.gogo.command (0.12.0)
    4|Active     |    1|org.apache.felix.gogo.runtime (0.10.0)
    5|Active     |    1|org.apache.felix.gogo.shell (0.10.0)
    6|Starting   |    1|bundle3 (1.0.0.201201161439)
    7|Active     |    1|bundle1 (1.0.0.201201161439)
    8|Active     |    1|bundle2 (1.0.0.201201161439)
{noformat}

Which is NOT OK, since the bundle2 is loading a class 'Bundle3Object' from bundle3 in the activator - the bundle3 must be activated too but it is not.
You can see in the log made by bundle2 that Bundle3Object is correctly loaded (but the bundle3 not activated).

(You can see the bundle2 was correctly activated by bundle1 by loading a class from bundle2 but the bundle3 is not activated when bundle2 is loading a class from bundle3)

The fileinstall plugin seems to work correctly. I think the problem is in BundleWiringImpl$BundleClassLoader.findClass()


",,,,,,,,,,,,,,,,,,,,16/Jan/12 15:05;bstefanescu;bundle1_1.0.0.201201161439.jar;https://issues.apache.org/jira/secure/attachment/12510710/bundle1_1.0.0.201201161439.jar,16/Jan/12 15:05;bstefanescu;bundle2_1.0.0.201201161439.jar;https://issues.apache.org/jira/secure/attachment/12510711/bundle2_1.0.0.201201161439.jar,16/Jan/12 15:05;bstefanescu;bundle3_1.0.0.201201161439.jar;https://issues.apache.org/jira/secure/attachment/12510712/bundle3_1.0.0.201201161439.jar,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2012-01-16 20:28:49.552,,,no_permission,,,,,,,,,,,,224024,,,Sat Jun 16 19:10:07 UTC 2012,,,,,,0|i07gn3:,41462,,,,,,,,"16/Jan/12 20:28;rickhall;I think I see the issue. The lazy activation code works properly if it is triggered by class loads caused during the defineClass() operation, but not if the class loads occur when a lazy bundle is being activated as a result of a trigger (i.e., in the lazy bundle's start() method). This latter case is demonstrated by your example bundles.

The code doesn't expect the deferred list to grow during the activation of lazy bundles, so the lazy bundles added due to class loads during activation are effectively ignored. The code should be changed so that it grabs the deferred list first and inserts an empty deferred list back into the thread local before starting to activate. That way any subsequent class loads triggering lazy activation in the start() method will be handled in a similar fashion as any other class load triggering lazy activation.","16/Jan/12 20:54;rickhall;I've committed a potential fix to trunk. It works for me on your example bundles. Let me know if it works for you.

However, currently the code does not continue activating deferred bundles if there is an exception while activating the deferred bundles. Perhaps this should catch all exceptions and continue to activate the other bundles in the deferred list.

I'll keep this bug open until I address this aspect.",17/Jan/12 14:02;bstefanescu;Thanks it is working for me,"16/Jun/12 19:10;rickhall;I'm closing this issue as fixed. The code actually did catch BundleExceptions and continued to activate; however, I modified it to catch Throwable and log exception too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO Manipulator throws ClassNotFoundException,FELIX-3297,12537511,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,06/Jan/12 14:16,04/Feb/13 12:33,14/Mar/19 02:48,09/Feb/12 16:50,ipojo-manipulator-1.8.2,,,,,,ipojo-manipulator-1.8.4,,,,,,,iPOJO,,,,,,0,,,,,,"The new iPOJO manipulator (1.8.2) asks ASM to compute the bytecode frames. However, this may require ASM to load classes (dependencies of the manipulated class). If this classloading fails, the maniulatoion is aborted with  a:
java.lang.RuntimeException: java.lang.ClassNotFoundException: _THE_CLASS_",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-09 08:19:49.322,,,no_permission,,,,,,,,,,,,223017,,,Sun Apr 29 08:17:14 UTC 2012,,,,,,0|i07gpj:,41473,,,,,,,,"09/Jan/12 08:19;sauthieg;That's exactly the Exception I got when I tried the manipulator v1.8.2

Most of the time, it happens when dealing with exceptions in the code.
You can workaround (partially) this issue by changing your source code: changing scopes of variables, refining catch blocks, ... but the result is not always very natural :(","09/Feb/12 16:50;clement.escoffier;I've rolled back the Java 7 Frame support for now, as it sounds a lot more complex than expected.

So, without this, we turn around this issue. On Java 7, you needs to use the  -XX:-UseSplitVerifier JVM option",09/Feb/12 16:55;sauthieg;At build time or during runtime ?,09/Feb/12 17:30;clement.escoffier;Runtime. It instructs the JVM to not check the frames.,"29/Apr/12 08:17;bob.ziuchkovski@gmail.com;I am running into this problem as well, but during *build* time (using maven-ipojo-plugin v1.9.0-SNAPSHOT).  I passed maven 'export MAVEN_OPTS=""-XX:-UseSplitVerifier""', but the build still fails with:

Execution default of goal org.apache.felix:maven-ipojo-plugin:1.9.0-SNAPSHOT:ipojo-bundle failed: java.lang.ClassNotFoundException: <MY CLASS>

It's not all that critical, as I was mainly testing what would break if I switched to JDK7 (several other non-ipojo things as well, unfortunately).  However, I wanted to pass along the heads-up.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception while creating empty fragment bundles with version 2.3.6,FELIX-3293,12537139,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,chetanm,chetanm,04/Jan/12 06:35,12/Jun/13 23:46,14/Mar/19 02:48,01/Apr/13 23:49,maven-bundle-plugin-2.3.6,,,,,,maven-bundle-plugin-2.4.0,,,,,,,Maven Bundle Plugin,,,,,,5,,,,,,"While trying to create a fragment bundle which does not package any classes (for example fragment for system bundle to export system packages) the Maven Bundle Plugin 2.3.6 throws exception

[ERROR] Failed to execute goal org.apache.felix:maven-bundle-plugin:2.3.6:manifest (bundle-manifest) on project com.example.fragment.jcr: Cannot find <path removed>/example-fragment/target/classes (manifest goal must be run after compile phase) -> [Help 1]

This used to work with 2.3.5
",,,,,,,,,,,,,,,,,,,,04/Jan/12 06:36;chetanm;pom.xml;https://issues.apache.org/jira/secure/attachment/12509380/pom.xml,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-27 13:52:08.077,,,no_permission,,,,,,,,,,,,222649,,,Mon Apr 01 23:49:49 UTC 2013,,,,,,0|i1auwv:,271474,,,,,,,,04/Jan/12 06:36;chetanm;Sample pom.xml with maven bundle plugin configured to reproduce the issue,"27/Apr/12 13:52;pdudits;I second this. Other possibility would be to include skip parameter for that goal. In my project it is a default goal defined in parent pom, but we've got few modules that e. g. generate aggregate bundle via Embed-Dependencies instruction.",24/Jan/13 16:42;aaronjwhiteside;+1,01/Apr/13 23:49;mcculls;Fixed in latest 2.4.0-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when component exposed as a service with servicefactory = true,FELIX-3288,12535895,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,gawor@mcs.anl.gov,gawor@mcs.anl.gov,20/Dec/11 20:17,20/Nov/12 10:58,14/Mar/19 02:48,30/Jan/12 07:13, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I have a component that is exposed as a service and is also configured with servicefactory = true. I see the following NPE when shutting the framework:

java.lang.NullPointerException
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:252)
	at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:135)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.deactivate(AbstractComponentManager.java:1075)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.disposeInternal(AbstractComponentManager.java:357)
	at org.apache.felix.scr.impl.manager.AbstractComponentManager.dispose(AbstractComponentManager.java:196)
	at org.apache.felix.scr.impl.config.ConfiguredComponentHolder.disposeComponents(ConfiguredComponentHolder.java:299)
	at org.apache.felix.scr.impl.BundleComponentActivator.dispose(BundleComponentActivator.java:319)
	at org.apache.felix.scr.impl.Activator.disposeComponents(Activator.java:340)
	at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:207)

Since the component is configured with servicefactory = true, ServiceFactoryComponentManager is used to manage the object. ServiceFactoryComponentManager overrides the createComponent() method from ImmediateComponentManager. ServiceFactoryComponentManager also intended (I think) to override the corresponding deleteComponent() method from ImmediateComponentManager. However, the signature of the deleteComponent() in ImmediateComponentManager has changed a bit so the override doesn't work anymore. So that's what I think is causing the problem in this case.
",,,,,,,,,,,,,,,,,,,,24/Jan/12 19:47;gawor@mcs.anl.gov;FELIX-3288.patch;https://issues.apache.org/jira/secure/attachment/12511715/FELIX-3288.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-20 21:47:18.514,,,no_permission,,,,,,,,,,,,221578,,,Tue Nov 20 10:58:14 UTC 2012,,,,,,0|i07gmf:,41459,,,,,,,,20/Dec/11 21:47;fmeschbe;You might want to update the SCR bundle to the latest release (1.6.0 at this time). This contains lots of fixes since the virtually age-old 1.0.2 release.,"21/Dec/11 01:37;gawor@mcs.anl.gov;I just selected a wrong version by mistake.

","24/Jan/12 19:47;gawor@mcs.anl.gov;Small patch for this issue.
","30/Jan/12 03:27;gawor@mcs.anl.gov;Can someone please take a look at this? We are hitting this problem quite frequently. 
",30/Jan/12 03:32;djencks;The patch looks correct to me.  Is there any chance of compiling with java 5 and using @Override to catch stuff like this?,"30/Jan/12 07:13;fmeschbe;Thanks for providing the patch.

I have applied it in Rev. 1237548",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong vector and array handling in Configuration Admin plugin,FELIX-3285,12535693,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,19/Dec/11 12:34,23/Nov/12 06:54,14/Mar/19 02:48,19/Dec/11 12:36,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"There some issues when handling configuration updates:
- If a Collection type property is updated with no values, it should not be added as an empty collection, which is invalid. Rather it should be made sure to not set the property at all in the configuration
- If an attribute definition for an existing array property is missing, it should be synthesized with Integer.MAX_VALUE cardinality instead of Integer.MIN_VALUE, which would be a Vector/Collection",,,,,,,,,,FELIX-2117,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,221377,,,Fri Nov 23 06:54:46 UTC 2012,,,,,,0|i0rfn3:,158177,,,,,,,,19/Dec/11 12:36;fmeschbe;This issue showed when testing the implementation for FELIX-2117,19/Dec/11 12:36;fmeschbe;Fixed in Rev. 1220719,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException may be thrown if asynchronous bundle update fails,FELIX-3284,12535664,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,19/Dec/11 08:12,23/Nov/12 06:54,14/Mar/19 02:48,19/Dec/11 08:14,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"If the web console bundle gets restarted while a bundle is being updated in the BaseUpdateInstallerHelper thread and an exception happens during the update, the log message cannot be written causing a NullPointerException. This factually hides the actual problem.

The fix is to catch any exception when trying to log the message and just write the error to std err to at least get some indication of problems.

One such potential situation is failing to update the web console bundle itself (e.g. due to missing dependencies)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,221348,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i0rfkn:,158166,,,,,,,,19/Dec/11 08:14;fmeschbe;Fixed in Rev. 1220640,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"On KF, the Instance singleton strategy throws an UnsupportedOperationException when stopping",FELIX-3271,12535123,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,14/Dec/11 09:23,14/May/12 14:58,14/Mar/19 02:48,14/Dec/11 17:23,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"When we stop a bundle including an instance providing a service using the INSTANCE creation strategy, KF is calling hashCode on the registered proxy. This method is not supported and so we get an UnsupportedOperationException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,220807,,,Mon May 14 14:58:27 UTC 2012,,,,,,0|i0vyan:,184529,,,,,,,,14/Dec/11 17:23;clement.escoffier;Fixed in trunk.,14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deployment admin incorrectly takes snapshots of bundle data areas,FELIX-3270,12535008,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,marrs,marrs,13/Dec/11 20:10,01/Apr/14 12:48,14/Mar/19 02:48,13/Dec/11 20:11,deploymentadmin-0.9.0,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"The deployment admin implementation relies on a SnapshotCommand to make snapshots of bundle data areas. However, dus to a mistake in the store() method, these snapshots don't work. The method incorrectly invokes storeRecursive(). We actually ran into this issue because we saw an update deployment fail (hanging in this method because it managed to create an infinity copy).

storeRecursive(target, ... -> storeRecursive(source, ...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,220692,,,Tue Dec 13 20:11:42 UTC 2011,,,,,,0|i0vscf:,183565,,,,,,,,13/Dec/11 20:11;marrs;Fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Property is not properly parsed.,FELIX-3269,12534984,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,folarte,folarte,13/Dec/11 17:16,31/Aug/12 14:18,14/Mar/19 02:48,31/Aug/12 14:12,maven-scr-plugin-1.7.4,,,,,,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,,SCR Tooling,,,,,,0,,,,,,"When parsing the following property annotations:
-------------
    //
    @Property(value = ""127.0.0.1"" //
    , label = ""Server host"" //
    , description = ""IP address of host to connect to."" //
    )
    final static String HOST = ""host"";
    // 
    @Property(intValue = 5000 //
    , label = ""Yate server port"" //
    , description = ""Port number to connect to, <=0 to disable this server."" //
    )
    final static String PORT = ""port"";
    //
    @Property(value = """" //
    , label = ""Server name"" //
    , description = ""Name for this server."" //
    )
    final static String NAME = ""name"";
    //
    @Property(value = ""ALL"" //
    , label = ""Server purpose"" //
    , description = ""What this served is going to be used for, used to filter them."" //
    )
-------------

The metatype.xml is incorrectly generated ( extra chars from the source picked up into attribut name of AD element for port:

-------------
    <OCD id=""com.peoplecall.yate.server"" name=""Configuracion de socket"" description=""Conexiones a los servidores de yate."">
        <AD id=""host"" type=""String"" default=""127.0.0.1"" name=""Server host"" description=""IP address of host to connect to.""/>
        <AD id=""port"" type=""Integer"" default=""5000"" name=""/&#10;       &quot;Yate server port"" description=""Port number to connect to, &lt;=0 to disable this server.""/>
        <AD id=""name"" type=""String"" default="""" name=""Server name"" description=""Name for this server.""/>
        <AD id=""purpose"" type=""String"" default=""ALL"" name=""Server purpose"" description=""What this served is going to be used for, used to filter them.""/>
    </OCD>
------------

Notice it only happens in the non-string property, even if I use the same comment pattern as the others. I think this is related to a previously reported ( by me ) bug: https://issues.apache.org/jira/browse/FELIX-3234 and due to the SCR plugin reparsing the source code ( I suppose there is a reason for not going to the .class file to pick up annotations ).

","Ubuntu linux 11.10, amd64, Java 1.6 - seems to be a parser issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-14 07:39:18.061,,,no_permission,,,,,,,,,,,,220668,,,Fri Aug 31 14:12:00 UTC 2012,,,,,,0|i0vwrr:,184282,,,,,,,,"14/Dec/11 07:39;fmeschbe;Thanks for your report.

I would assume that this issue should be ""solving itself"" with FELIX-3247.","14/Dec/11 08:45;cziegeler;Yes, we use qdox for parsing the source which really has it's limitations - If you write all attributes in a single source code line it should work

We can't pick up the annotations from the class file as they are not contained :) As Felix pointed out with FELIX-3247 this will be solved and we wont use QDox anymore. Hopefully all these problems are fixed by then
Otherwise we would need to fix bugs in qdox which might not be that easy","31/Aug/12 14:12;cziegeler;QDox has been removed, so this should be resolved",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot build webconsole and webconsole-plugins with JDK 7,FELIX-3268,12534965,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,debrouxl,debrouxl,13/Dec/11 15:03,23/Nov/12 06:54,14/Mar/19 02:48,26/Mar/12 17:42,,,,,,,webconsole-4.0.0,webconsole-deployment-admin-plugin-1.0.0,webconsole-ds-plugin-1.0.0,webconsole-event-plugin-1.1.0,webconsole-obr-plugin-1.0.0,webconsole-shell-plugin-1.0.0,webconsole-upnp-plugin-1.0.2,Web Console,,,,,,0,patch,,,,,"A search in JIRA returned no match for ""native2ascii"" and no relevant match for ""native"", so I'm creating an issue.

When trying to build Felix SVN HEAD with JDK 7, the build process stops when it fails to invoke native2ascii in webconsole.
It seems that there was a change between JDK 6 and JDK 7, and the 1.0-alpha-1 version of org.codehaus.mojo:native2ascii-maven-plugin in multiple POMs cannot handle it. However, version 1.0-beta-1 (I obtained that version number by removing the ""version"" parameter entirely) can cope with JDK 7.
The patch below fixes the build problem in webconsole & webconsole-plugins:

diff --git a/webconsole-plugins/deppack/pom.xml b/webconsole-plugins/deppack/pom.xml
index 0c764e6..e576a57 100644
--- a/webconsole-plugins/deppack/pom.xml
+++ b/webconsole-plugins/deppack/pom.xml
@@ -40,7 +40,7 @@
 			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
 				<artifactId>native2ascii-maven-plugin</artifactId>
-				<version>1.0-alpha-1</version>
+				<version>1.0-beta-1</version>
 				<executions>
 					<execution>
 						<goals>
diff --git a/webconsole-plugins/ds/pom.xml b/webconsole-plugins/ds/pom.xml
index 40a3224..338f306 100644
--- a/webconsole-plugins/ds/pom.xml
+++ b/webconsole-plugins/ds/pom.xml
@@ -40,7 +40,7 @@
             <plugin>
                 <groupId>org.codehaus.mojo</groupId>
                 <artifactId>native2ascii-maven-plugin</artifactId>
-                <version>1.0-alpha-1</version>
+                <version>1.0-beta-1</version>
                 <executions>
                     <execution>
                         <goals>
diff --git a/webconsole-plugins/event/pom.xml b/webconsole-plugins/event/pom.xml
index b257032..2375eab 100644
--- a/webconsole-plugins/event/pom.xml
+++ b/webconsole-plugins/event/pom.xml
@@ -48,7 +48,7 @@
             <plugin>
                 <groupId>org.codehaus.mojo</groupId>
                 <artifactId>native2ascii-maven-plugin</artifactId>
-                <version>1.0-alpha-1</version>
+                <version>1.0-beta-1</version>
                 <executions>
                     <execution>
                         <goals>
diff --git a/webconsole-plugins/obr/pom.xml b/webconsole-plugins/obr/pom.xml
index c4a88f2..3854ca3 100644
--- a/webconsole-plugins/obr/pom.xml
+++ b/webconsole-plugins/obr/pom.xml
@@ -40,7 +40,7 @@
 			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
 				<artifactId>native2ascii-maven-plugin</artifactId>
-				<version>1.0-alpha-1</version>
+				<version>1.0-beta-1</version>
 				<executions>
 					<execution>
 						<goals>
diff --git a/webconsole-plugins/shell/pom.xml b/webconsole-plugins/shell/pom.xml
index 661d3cd..7f1b428 100644
--- a/webconsole-plugins/shell/pom.xml
+++ b/webconsole-plugins/shell/pom.xml
@@ -40,7 +40,7 @@
 			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
 				<artifactId>native2ascii-maven-plugin</artifactId>
-				<version>1.0-alpha-1</version>
+				<version>1.0-beta-1</version>
 				<executions>
 					<execution>
 						<goals>
diff --git a/webconsole-plugins/upnp/pom.xml b/webconsole-plugins/upnp/pom.xml
index 413da08..bb091a4 100644
--- a/webconsole-plugins/upnp/pom.xml
+++ b/webconsole-plugins/upnp/pom.xml
@@ -48,7 +48,7 @@
             <plugin>
                 <groupId>org.codehaus.mojo</groupId>
                 <artifactId>native2ascii-maven-plugin</artifactId>
-                <version>1.0-alpha-1</version>
+                <version>1.0-beta-1</version>
                 <executions>
                     <execution>
                         <goals>
diff --git a/webconsole/pom.xml b/webconsole/pom.xml
index bf4e1cb..b9f0db2 100644
--- a/webconsole/pom.xml
+++ b/webconsole/pom.xml
@@ -69,7 +69,7 @@
             <plugin>
                 <groupId>org.codehaus.mojo</groupId>
                 <artifactId>native2ascii-maven-plugin</artifactId>
-                <version>1.0-alpha-1</version>
+                <version>1.0-beta-1</version>
                 <executions>
                     <execution>
                         <goals>
","Debian unstable x86_64, JDK 7 from http://jdk7.java.net/download.html, Maven 3.0.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-17 13:58:51.878,,,no_permission,,,,,,,,,,,,220649,,,Fri Nov 23 06:54:48 UTC 2012,,,,,,0|i07grz:,41484,,,,,,,,17/Dec/11 13:58;fmeschbe;Thanks for providing the patch. I have applied it in Rev. 1215489,"21/Dec/11 15:28;debrouxl;I've just tried to recompile Felix from the trunk (r1221765), and the build failed in webconsole-plugins/event, because the pom.xml still contains a dependence on org.codehaus.mojo:native2ascii-maven-plugin:1.0-alpha-1. The other pom.xml files are OK, though.","26/Jan/12 11:00;v_valchev;The new native2ascii-maven-plugin actually does nothing. So localization is missing. My own plugins (build with ant) are localized correctly, but webconsole - doesn't show in the language I choose.

I looked at the jar file and it seems, that doesn't include any extra resources besides bundle.properties","26/Mar/12 15:45;fmeschbe;Looks like the 1.0-beta-1 version actually expects the files to be in the standard source location and not in a separate tree.

Moving the files to src/main/resources solves the problem.",26/Mar/12 15:56;fmeschbe;Moved the resources to src/main/resources in Rev. 1305413 and updated the event plugin to use 1.0-beta-1 of the native2ascii plugin in Rev. 1305415,26/Mar/12 17:42;fmeschbe;Resolving as fixed after removing empty folders in Rev. 1305472,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AJAX Error: Request Failed: FULL head,FELIX-3265,12534556,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,dacay,dacay,09/Dec/11 22:30,28/Sep/13 17:40,14/Mar/19 02:48,14/Aug/13 16:10,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,buffer,felix,jetty,,,"I have been using Web Console for a while to configure my DS components. But recently, one of my component's metatype.xml file got larger due to increase in configuration options for the component. Suddenly, now when I try to configure that component, even without changing a value, I get an AJAX error. Although sometimes there is no message inside the AJAX Error dialog at all, I frequently get a ""Request failed: FULL head"" message in the AJAX Error modal dialog. I have searched around the internet and it looks like the cause of this is about the size of the Jetty's header buffer (http://jira.codehaus.org/browse/JETTY-336).

Any fix is appreciated as this prevents me from debugging configuration of my component.","Windows Vista x86, Java 6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-14 14:21:55.051,,,no_permission,,,,,,,,,,,,220278,,,Wed Aug 14 16:10:09 UTC 2013,,,,,,0|i1auyf:,271481,,,,,,,,"14/Dec/11 14:21;fmeschbe;This might be a duplicate of FELIX-3162 for which I added new configuration options and actually already increased the default values to 16KB for the header buffer size.

This has not been released yet, so you might have to try a trunk build.",26/Mar/12 20:13;fmeschbe;I think this is not really a problem of the Web Console but is just exposed by the Web Console. Thus removing the web console as being affected,"14/Aug/13 16:10;jajans;I assume that the fix is sufficient; closing this issue. If not, please reopen it...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OBR resolver unable to pick up the highest bundle version when selecting the best candidate,FELIX-3257,12533863,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,psoreide,psoreide,05/Dec/11 10:30,06/Dec/11 09:47,14/Mar/19 02:48,06/Dec/11 05:44,bundlerepository-1.6.6,,,,,,bundlerepository-2.0.2,,,,,,,Bundle Repository (OBR),,,,,,0,,,,,,"When resolving bundles exporting the same package/version and the bundle symbolic name is the same; the bundle with the highest bundle version should be selected.
",,,,,,,,,,,,,,,,,,,,05/Dec/11 10:31;psoreide;FELIX-3257.patch;https://issues.apache.org/jira/secure/attachment/12506102/FELIX-3257.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-06 05:44:12.977,,,no_permission,,,,,,,,,,,,219589,,,Tue Dec 06 05:44:12 UTC 2011,,,,,,0|i0vya7:,184527,,,,,,,,06/Dec/11 05:44;rickhall;Seems reasonable. I applied the patch. Thanks. Please close if satisfied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
manifest goal generates wrong Export-Package when Embed-Dependency,FELIX-3254,12533820,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,igorf,igorf,04/Dec/11 23:02,11/Feb/12 18:34,14/Mar/19 02:48,11/Feb/12 18:34,maven-bundle-plugin-2.3.6,,,,,,maven-bundle-plugin-2.3.7,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,manifest goal does not seem to consider Embed-Dependency and _exportcontents when generating Export-Package in 2.3.6. This used to work in 2.3.5 and looks like a regression introduced by FELIX-3206. I'll attach a sample project that demonstrates the problem shortly.,,,,,,,,,,,,,,,,,,,,04/Dec/11 23:10;igorf;FELIX-3254.zip;https://issues.apache.org/jira/secure/attachment/12506066/FELIX-3254.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-04 23:10:44.549,,,no_permission,,,,,,,,,,,,219546,,,Sat Feb 11 18:34:39 UTC 2012,,,,,,0|i07g0f:,41360,,,,,,,,"04/Dec/11 23:10;mcculls;If it is related to FELIX-3206 (which actually fixes a previous regression wrt. the behaviour of the manifest goal) then it sounds like you need bnd to do a full rebuild of the bundle when creating the manifest (so bnd can fully analyze the embedded/merged content) in which case you can simply add <rebuildBundle>true</rebuildBundle> to the configuration to get the pre-FELIX-3206 behaviour.

Note that FELIX-3206 is unlikely to be reverted since there are valid use-cases when you don't want to rebuild the bundle in memory, and this was the original behaviour.","04/Dec/11 23:10;igorf;Attached FELIX-3254.zip is a sample project to demonstrate the problem

Generated bundle manifest is expected to have

{noformat}
Export-Package: de.pdark.decentxml;version=""1.3"",de.pdark.decentxml.dt
 d;version=""1.3"",de.pdark.decentxml.validation;version=""1.3""
{noformat}

This works with maven-bundle-plugin 2.3.5, but with 2.3.6 generated bundle manifest does not have Export-Package at all",04/Dec/11 23:15;igorf;I am not asking to revert FELIX-3206. m-b-p should be able to generate correct manifest for the attached project or at very least fail fast and with a clear error message.,"04/Dec/11 23:37;mcculls;Confirmed that the rebuildBundle setting:

  <configuration>
    <rebuildBundle>true</rebuildBundle>
    <instructions>
      <!-- ... -->
    </instructions>
  </configuration>

works and should be used for this use-case.

The original behaviour of the manifest goal (ie. long before 2.3.4 and FELIX-2817) was to take the content of the attached file (or target/classes) and generate a manifest based on that, and that only. The use-case was that you created the content by some other means (ie. not using Embed-Dependency, etc.) and wanted a manifest based on that content. A slightly different use-case came up in FELIX-2817 where people wanted the exact same results as doing bundle:bundle (which does an in-memory build) when they created the manifest - this is the same use-case as the attached project.

There's no solution that I know of which can accommodate both use-cases with the same goal - which is why the flag (rebuildBundle) was added to switch between the 'analyzer' approach that is quick and means you don't have to match the instructions with the content (but it doesn't handle all the Include-Resource instructions) and the 'builder' approach which does a full analysis but means your instructions must describe the content of the bundle.

We could add a warning if people use instructions that don't make sense with rebuildBundle=false - I think that's better than trying to guesstimate the right setting. ",11/Feb/12 18:34;mcculls;Fixed in r1243117 - if we're generating a manifest for the output directory and there is an Embed-Dependency instruction then we can safely assume that we need to build the bundle in-memory to get the correct result.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO Bnd Plugin do not write all the metadatas in the manifest,FELIX-3249,12533258,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,sauthieg,sauthieg,30/Nov/11 08:55,01/Dec/11 10:08,14/Mar/19 02:48,01/Dec/11 09:40,,,,,,,ipojo-manipulator-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"The iPOJO Bnd Plugin do not write all the metadatas in the manifest.
For example, the following XML content, will only produce a IPOJO-Components manifest header with the last <instance>.
{code:xml}
<ipojo>
  <component class=""com.acme.Thermometer"" />
  <instance component=""com.acme.Thermometer"" />
  <instance component=""com.acme.Thermometer"" />
</ipojo>
{code}",,,,,,,,,,,,,,,,,,,,30/Nov/11 08:59;sauthieg;FELIX-3249.patch;https://issues.apache.org/jira/secure/attachment/12505593/FELIX-3249.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-01 09:40:29.849,,,no_permission,,,,,,,,,,,,218986,,,Thu Dec 01 10:08:45 UTC 2011,,,,,,0|i1auzz:,271488,,,,,,,,30/Nov/11 08:59;sauthieg;Fix issue + added TestCase for non-regression testing,"01/Dec/11 09:40;clement.escoffier;Fixed in trunk.

I've applied the patch.

Thanks !","01/Dec/11 10:08;sauthieg;Thanks, any release foreseen ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autoconf handles metatype 1.1 cardinalty wrong,FELIX-3245,12532909,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,bramk,bramk,28/Nov/11 14:08,01/Apr/14 12:48,14/Mar/19 02:48,16/Dec/11 12:14,autoconf-rp-0.1.0,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"According to 105.13.2.12 in the R42 compendium spec cardinality is interpreted as:

  x = Integer.MIN_VALUE no limit, but use Vector
  x < 0 -x = max occurrences, store in Vector
  x > 0 x = max occurrences, store in array []
  x = Integer.MAX_VALUE no limit, but use array [] 
  x = 0 1 occurrence required

This is not what happens in autoconf 0.1. I'll attach a small patch that should be self-expl.",,,,,,,,,,,,,,,,,,,,28/Nov/11 14:09;bramk;autoconf_Cardinality.patch;https://issues.apache.org/jira/secure/attachment/12505333/autoconf_Cardinality.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-16 12:15:00.032,,,no_permission,,,,,,,,,,,,218641,,,Fri Dec 16 12:15:00 UTC 2011,,,,,,0|i0vv0n:,183998,,,,,,,,16/Dec/11 12:15;marrs;Patch applied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autoconf does not recognize non-local non-factory OCDs,FELIX-3243,12532649,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,bramk,bramk,24/Nov/11 19:37,01/Apr/14 12:48,14/Mar/19 02:48,31/Jan/12 08:21,autoconf-rp-0.1.0,,,,,,,,,,,,,Deployment Admin,,,,,,0,,,,,,"Small bug means this this never worked:

{code}
    private boolean isFactoryConfig(Designate designate) {
    	String factoryPid = designate.getFactoryPid();
    	return (factoryPid != null || !"""".equals(factoryPid));
    }
{code}
",,,,,,,,,,,,,,,,,,,,24/Nov/11 19:38;bramk;autoconf_isFactoryConfig.patch;https://issues.apache.org/jira/secure/attachment/12505032/autoconf_isFactoryConfig.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-31 08:21:40.994,,,no_permission,,,,,,,,,,,,218382,,,Tue Jan 31 08:21:40 UTC 2012,,,,,,0|i07gon:,41469,,,,,,,,"31/Jan/12 08:21;marrs;Patch applied, thanks Bram.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageAdmin#getExportedPackages does not work on packages exported by attached fragments,FELIX-3239,12532467,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,gnt,gnt,23/Nov/11 12:29,30/Jul/14 07:16,14/Mar/19 02:48,24/May/14 12:36,framework-4.0.1,,,,,,framework-4.4.1,,,,,,,,,,,,,2,,,,,,,,,,,,,,,,SLING-2808,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-02 14:20:12.335,,,no_permission,,,,,,,,,,,,218200,,,Mon May 26 11:58:57 UTC 2014,,,,,,0|i1av13:,271493,,,,,,,,"02/Apr/13 14:20;bdelacretaz;This used to work in 3.x versions (tested with 3.0.8 and 3.2.2) but does not in 4.0.1 or 4.0.2.

I have created a test at https://github.com/bdelacretaz/felix-fragment-tests - running ""mvn clean test -Dfelix.version=4.0.2"" at the top of that causes FragmentsTest.testPackageFromFragment to fail. 

The test is really simple, just calls getExportedPackage(""ch.x42.felix.fragmenttests.fragment"") where the ch.x42.felix.fragmenttests.fragment package is provided by the test's fragment-bundle which is attached to the test's host-bundle.

I haven't found a place in the Felix codebase to add such a test, that requires two test bundles.","27/Sep/13 12:37;rickhall;I think I understand why this started happening. While specifying the R5 resolver API we changed how we handled attached fragment capabilities. The old approach actually attached fragment capabilities to the host, but the new approach doesn't. This is likely the root of the issue. I'll try to take a look into it.",24/May/14 07:27;bosschaert;I'll have a look at this...,"24/May/14 12:36;bosschaert;Resolved in http://svn.apache.org/viewvc?view=revision&revision=1597276

Bertrand, this fixes the test failure that you posted earlier. I added a unit test that exposes the same behaviour as part of the commit.","26/May/14 11:58;bdelacretaz;Thanks David, your test does match my scenario. And it is *a bit* simpler than mine ;-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to filter out classes from identical package in a dependency,FELIX-3238,12532171,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,mcculls,bosschaert,bosschaert,21/Nov/11 16:38,02/Dec/11 15:44,14/Mar/19 02:48,28/Nov/11 14:36,maven-bundle-plugin-2.3.5,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"I as part of a refactoring a project is moving some classes from a package org.acme.foo from bundle A to a separate bundle B.
Unfortunately its not possible to move all the classes to the separate bundle so this introduces a split package. Both bundle A and bundle B export package org.acme.foo.

Bundle A has a maven dependency on bundle B.
What happens at the moment with the Maven Bundle Plugin 2.3.4 (we can't use 2.3.5 as it has FELIX-3058 ) is that all the classes from org.acme.foo that exist in bundle B are copied into the resulting bundle A.

Below the pom.xml of a test-setup that I created. Both the current project as well as ascii-pics-api-bundle-mbp dependency contain the org.coderthouhts.asciipics.impl package.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.coderthoughts</groupId>
    <artifactId>ascii-pics-parent-mbp</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>ascii-pics-provider-bundle-mbp</artifactId>
  <packaging>bundle</packaging>
  
  <dependencies>
    <dependency>
      <groupId>org.coderthoughts</groupId>
      <artifactId>ascii-pics-api-bundle-mbp</artifactId>
      <version>1.0.0</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.core</artifactId>
      <version>4.2.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
  
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Bundle-SymbolicName>${project.name}</Bundle-SymbolicName>
            <Bundle-Activator>org.coderthoughts.asciipics.Activator</Bundle-Activator>
            <Export-Package>org.coderthoughts.asciipics.impl;-split-package:=first</Export-Package>
          </instructions>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-28 14:36:18.205,,,no_permission,,,,,,,,,,,,217907,,,Mon Nov 28 15:08:29 UTC 2011,,,,,,0|i1av1b:,271494,,,,,,,,"21/Nov/11 16:50;bosschaert;I fabricated a small test setup here:

https://github.com/bosschaert/coderthoughts (branch: split-package)

The bundle ascii-pics-api-bundle-mbp contains org.coderthoughts.asciipics.impl.RogueClass
The bundle ascii-pics-provider-bundle-mbp contains the rest of the org.coderthoughts.asciipics.impl package and depends on the ascii-pics-api-bundle-mbp bundle.

To reproduce simply run 'mvn install' in the AsciiGraphicsService_MBP directory. 
Then look at the bundle in ascii-pics-provider-bundle-mbp/target/ascii-pics-provider-bundle-mbp-1.0.0-SNAPSHOT.jar and you will find the RogueClass inside the bundle.","23/Nov/11 22:37;bosschaert;Lowering the priority as Peter Kriens provided a workaround. In terms of the test setup, the following does the trick:

<instructions>
  <Bundle-SymbolicName>${project.name}</Bundle-SymbolicName>
  <Bundle-Activator>org.coderthoughts.asciipics.Activator</Bundle-Activator>
  <Export-Package></Export-Package>
  <Private-Package>org.coderthoughts.asciipics</Private-Package>
  <Include-Resource>target/classes</Include-Resource>
  <_exportcontents>org.coderthoughts.asciipics.impl</_exportcontents>
</instructions>

So the trick is to not include the package involved in Export-Package/Private-Package, but include the class resources. Then use _exportcontents to export that. This will not bring in the class files in the same package from the other bundle.","28/Nov/11 14:36;mcculls;BTW, the reason why the split-package directive on the Export-Package was not working was because the mbp adds "";-split-package:=merge-first"" by default to the list of private (local) packages. To see this use ""mvn clean install -X"" on the example project and look for the Private-Package instruction sent to bnd under ""BND Instructions"".

So another solution with mbp-2.3.4 is to use:

          <instructions>
            <Bundle-SymbolicName>${project.name}</Bundle-SymbolicName>
            <Bundle-Activator>org.coderthoughts.asciipics.Activator</Bundle-Activator>
            <Export-Package>org.coderthoughts.asciipics.impl;-split-package:=first</Export-Package>
            <Private-Package>org.coderthoughts.asciipics.*;-split-package:=first</Private-Package>
          </instructions>

ie. set the split-package directive on both instructions.

I've made some improvements to the default Export/Private-Package generator under r1207213 to make this easier to adapt in the future, so you can use:

          <instructions>
            <Bundle-SymbolicName>${project.name}</Bundle-SymbolicName>
            <Bundle-Activator>org.coderthoughts.asciipics.Activator</Bundle-Activator>
            <Export-Package>{local-packages};-split-package:=first</Export-Package>
            <Private-Package>{local-packages};-split-package:=first</Private-Package>
          </instructions>

for situations where you want to add directives in a parent pom, but don't know what packages are available. (This basically expands the existing support for ""{local-packages}"" to include its use inside Private-Package.)
","28/Nov/11 15:08;bosschaert;Thanks Stuart and Peter for your help.

David",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Property annotation raises exceptions on longValue=0L use ,FELIX-3234,12531926,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,folarte,folarte,18/Nov/11 11:39,31/Aug/12 14:19,14/Mar/19 02:48,31/Aug/12 14:08,maven-scr-plugin-1.7.2,maven-scr-plugin-1.7.4,scr annotations 1.6.0,,,,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,,SCR Tooling,,,,,,0,,,,,,"When putting longValue =0L I get an exception on build, note it MUST be '0L'. Exceptions does not hapen when using '0' ( without the long modifier ) or 1234567 or 1234567L

It seems problem occurs only with the '0L' value, as '00L' and '00000L' work fine ( I have tested the values '0', '0L', '00L','00000L', '1234567' and '1234567L' , and, after that, '0l', 00l' ( one and two zeroes, lowercase L ) and the only ones which do not work are '0L' and '0l', all the other ones build flawlessly ).

The contens of metatype.xml for the property are correct: ( with 00l ):

        <AD id=""reload.period"" type=""Long"" default=""0"" name=""Auto reload period"" description=""Sleep interval between reloading scans.""/>

Included below are captures for 0L and 0, results for the other ones are the same.

If needed I can try to strip the build to a minimum and send it.


----- with L modifier, raises exceptions: ------------

    @Property(label = ""Auto reload period"",
    description = ""Sleep interval between reloading scans."",longValue=0L)
    public final static String RELOAD_PERIOD = ""reload.period"";

leads to:

$ mvn clean install
[INFO] Scanning for projects...
[WARNING] POM for 'biz.aQute:bndlib:pom:1.43.0:runtime' is invalid.

Its dependencies (if any) will NOT be available to the current build.
[INFO] ------------------------------------------------------------------------
[INFO] Building numclass-cmtport
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
[INFO] Deleting file set: /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target (included: [**], excluded: [])
[INFO] [resources:resources {execution: default-resources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Compiling 6 source files to /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/classes
[INFO] [scr:scr {execution: generate-scr-scrdescriptor}]
[INFO] ------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] For input string: """"
[INFO] ------------------------------------------------------------------------
[INFO] Trace
java.lang.NumberFormatException: For input string: """"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
	at java.lang.Long.parseLong(Long.java:431)
	at com.thoughtworks.qdox.parser.impl.Parser.toLong(Parser.java:1180)
	at com.thoughtworks.qdox.parser.impl.Parser.yyparse(Parser.java:1784)
	at com.thoughtworks.qdox.parser.impl.Parser.parse(Parser.java:999)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:353)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:381)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:377)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getSources(JavaClassDescriptorManager.java:115)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassesFromSources(JavaClassDescriptorManager.java:459)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getSourceDescriptions(JavaClassDescriptorManager.java:361)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:234)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:184)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2 seconds
[INFO] Finished at: Fri Nov 18 13:00:44 CET 2011
[INFO] Final Memory: 23M/296M
[INFO] ------------------------------------------------------------------------

---------
--------- without the L modifer ( no problems )--------------

    @Property(label = ""Auto reload period"",
    description = ""Sleep interval between reloading scans."",longValue=0)
    public final static String RELOAD_PERIOD = ""reload.period"";

leads to:

$ mvn clean install
[INFO] Scanning for projects...
[WARNING] POM for 'biz.aQute:bndlib:pom:1.43.0:runtime' is invalid.

Its dependencies (if any) will NOT be available to the current build.
[INFO] ------------------------------------------------------------------------
[INFO] Building numclass-cmtport
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
[INFO] Deleting file set: /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target (included: [**], excluded: [])
[INFO] [resources:resources {execution: default-resources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Compiling 6 source files to /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/classes
[INFO] [scr:scr {execution: generate-scr-scrdescriptor}]
[INFO] Generating 2 MetaType Descriptors to /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/scr-plugin-generated/OSGI-INF/metatype/metatype.xml
[INFO] Writing abstract service descriptor /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/scr-plugin-generated/OSGI-INF/scr-plugin/scrinfo.xml with 1 entries.
[INFO] Generating 1 Service Component Descriptors to /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/scr-plugin-generated/OSGI-INF/serviceComponents.xml
[INFO] [resources:testResources {execution: default-testResources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 6 source files to /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
Nov 18, 2011 1:02:22 PM com.peoplecall.numclass.cmtport.CmtPortClassifier loadCmtData
WARNING: Error loading cmt data from ESTO NO EXISTE NI PATRAS previous contents kept.
Nov 18, 2011 1:02:22 PM com.peoplecall.numclass.cmtport.CmtPortClassifier loadPortData
WARNING: Error loading porting data from ESTO NO EXISTE NI PATRAS previous contents kept.
Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.558 sec

Results :

Tests run: 27, Failures: 0, Errors: 0, Skipped: 0

[INFO] [bundle:bundle {execution: default-bundle}]
[INFO] [install:install {execution: default-install}]
[INFO] Installing /home/folarte/NetBeansProjects/numclass/numclass-cmtport/target/numclass-cmtport-1.0-SNAPSHOT.jar to /home/folarte/.m2/repository/com/peoplecall/numclass-cmtport/1.0-SNAPSHOT/numclass-cmtport-1.0-SNAPSHOT.jar
[INFO] [bundle:install {execution: default-install}]
[INFO] Installing com/peoplecall/numclass-cmtport/1.0-SNAPSHOT/numclass-cmtport-1.0-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Fri Nov 18 13:02:23 CET 2011
[INFO] Final Memory: 28M/247M
[INFO] ------------------------------------------------------------------------




","$ mvn -V
Apache Maven 2.2.1 (rdebian-6)
Java version: 1.6.0_26
Java home: /usr/lib/jvm/java-6-sun-1.6.0.26/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"" version: ""3.0.0-12-generic"" arch: ""amd64"" Family: ""unix""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-18 14:44:44.768,,,no_permission,,,,,,,,,,,,217662,,,Fri Aug 31 14:08:14 UTC 2012,,,,,,0|i1av1r:,271496,,,,,,,,18/Nov/11 14:44;cziegeler;Looks like a bug in the qdox parser to me; I think we're already using the latest released qdox :(,"18/Nov/11 16:45;folarte;I'm really a novice maven-scr user, and I do not know qdox, but it seems as if the plugin is somehow scanning the source when it shouldn't.

I mean, no matter wether you write 0L, 0, 00L the java compiler should turn this into 0L into the class file. To test this I've made two runs, one failed with 0L, one successful with 0 and compared the .class files from both runs, are they are in fact identical.

In the version which failed with the 0L I have this exception trace ( pruned and commented ):

java.lang.NumberFormatException: For input string: """"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
	at java.lang.Long.parseLong(Long.java:431)
** this is the error
	at com.thoughtworks.qdox.parser.impl.Parser.toLong(Parser.java:1180)
	at com.thoughtworks.qdox.parser.impl.Parser.yyparse(Parser.java:1784)
	at com.thoughtworks.qdox.parser.impl.Parser.parse(Parser.java:999)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:353)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:381)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:377)
** this is qdox parsing sources 
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getSources(JavaClassDescriptorManager.java:115)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassesFromSources(JavaClassDescriptorManager.java:459)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getSourceDescriptions(JavaClassDescriptorManager.java:361)
** this is the plugin parsing.
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:234)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:184)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)

I'm not an expert in maven, qdox and scr. The problem seems to be the plugin needs to scan the sources looking for javadoc annotations, calls qdox for it and qdox barfs when it tries to compile the sources. (more on next comment)","18/Nov/11 16:55;folarte;To satisfy my curiosity I added ( by copying and mutilating the Property annotation def ) one annotation and one use of it to my project, and got the same behaviour, qdox exception when 0L, ok when naked 0.

I don't know when/how to report this to qdox or what to do with this, so I'm pasting the ( by my consideration ) relevant chunks here in hope someone more knodledgeable knows what to do with them.

If neccessary I can run version printing commands if someone feels it's my system configuration faults, but it smells like a faulty parser to me. When I have some time and learn a little more about file-attaching I'll try to reduce everything to a standalone mini-maven project and post it here.



-------------- the annotation ------------------
package com.peoplecall.numclass.cmtport;
    import java.lang.annotation.*;
@Target( { ElementType.TYPE, ElementType.FIELD })
@Retention(RetentionPolicy.SOURCE)
@Documented
public @interface TstAnnotation {
    long[] longValue() default {};
}
---------- The class which uses it -------------------
package com.peoplecall.numclass.cmtport;
public class TstAnnotated {
 
    @TstAnnotation(longValue=0)
    public final static String TST_STRING = ""tst_string"";
    
}
-------- The exception----------------

[INFO] [scr:scr {execution: generate-scr-scrdescriptor}]
[INFO] ------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] For input string: """"
[INFO] ------------------------------------------------------------------------
[INFO] Trace
java.lang.NumberFormatException: For input string: """"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
	at java.lang.Long.parseLong(Long.java:431)
	at com.thoughtworks.qdox.parser.impl.Parser.toLong(Parser.java:1180)
	at com.thoughtworks.qdox.parser.impl.Parser.yyparse(Parser.java:1784)
	at com.thoughtworks.qdox.parser.impl.Parser.parse(Parser.java:999)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:353)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:381)
	at com.thoughtworks.qdox.JavaDocBuilder.addSource(JavaDocBuilder.java:377)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getSources(JavaClassDescriptorManager.java:115)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassesFromSources(JavaClassDescriptorManager.java:459)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getSourceDescriptions(JavaClassDescriptorManager.java:361)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:234)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:184)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
[INFO] ------------------------------------------------------------------------








This has been tested with 1.7.2, I used 1.7.4 in my previous test.
",31/Aug/12 14:08;cziegeler;This has been solved with the latest release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfigurationManager.canReceive may throw NullPointerException,FELIX-3233,12531774,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,17/Nov/11 11:06,25/Sep/13 14:02,14/Mar/19 02:48,17/Nov/11 11:18, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"The ConfigurationManager.canReceive method checks whether a bundle can receive configuration bound to a certain location. This method may throw a NullPointerException if the bundle is null. This may be the case if the service has been unregistered between the event causing the canReceive to the called and the asynchronous handling.

For example:
  * Register ManagedService
  * Update Configuration
  * Unregister ManagedService
  * --> asynchronous processing of configuration update also calling canReceive

At the point in time of processing the configuration update, the service has been unregistered and ServiceReference.getBundle() returns null. Callers of canReceive should be fixed to ensure the bundle is not null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,217510,,,Wed Sep 25 14:02:36 UTC 2013,,,,,,0|i0vuzr:,183994,,,,,,,,17/Nov/11 11:18;fmeschbe;Fixed in Rev. 1203153,25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Disable update counter,FELIX-3231,12531632,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,16/Nov/11 15:24,25/Sep/13 14:02,14/Mar/19 02:48,17/Nov/11 10:07, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"Update counter checks have been added to prevent multiple configuration updates with the same configuration in certain race condition situations.

With the new R4.3 Configuration Admin (v1.4) it is now allowed that multiple ManagedService or ManagedServiceFactory services are registered with the same PID and that all receive the same configuration. This of course is incompatible with the current simple update counter mechanism.

For now we should just disable this check.",,,,,,,,,,,,,,,,,,FELIX-1542,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,217368,,,Wed Sep 25 14:02:33 UTC 2013,,,,,,0|i0vuzj:,183993,,,,,,,,17/Nov/11 09:16;fmeschbe;This reverts part of FELIX-1542. We still keep the counter of modifications to the configuration (for now because it helps with logging the operation),17/Nov/11 10:07;fmeschbe;Removed the lastUpdateTime field (and all references and uses) and renamed the lastModificationTime field to revision to reflect the intended use as a revision counter rather than a timestamp.,25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConfiguartionAdapter.setBundleLocation checks configuration permission incorrectly,FELIX-3230,12531604,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,16/Nov/11 12:12,25/Sep/13 14:02,14/Mar/19 02:48,08/Feb/12 08:01, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"The ConfigurationAdapter.setBundleLocation checks the configuration does not check for CP(*,CONFIGURE) if the configurations current location is null. This must be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,217340,,,Wed Sep 25 14:02:35 UTC 2013,,,,,,0|i0vuyf:,183988,,,,,,,,16/Nov/11 12:13;fmeschbe;Fixed the check in Rev. 1202654,08/Feb/12 08:01;fmeschbe;This is fixed.,25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ConfigurationAdmin.getConfiguration(String, String) and .createConfiguration(String) to generous",FELIX-3229,12531591,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,16/Nov/11 09:57,25/Sep/13 14:02,14/Mar/19 02:48,16/Nov/11 10:35, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"Similar to FELIX-3228, the ConfigurationAdmin.getConfiguration and createConfiguration methods with the location parameter do not properly check the null location properly.

R 4.3 Configuration Admin (v1.4) spec states:

• createFactoryConfiguration(String,String)
    • ConfigurationPermission[location,CONFIGURE] - if location is not null
    • ConfigurationPermission[""*"",CONFIGURE] - if location is null
• getConfiguration(String,String)
    • ConfigurationPermission[*,CONFIGURE] - if location is null or if the returned configuration c already exists and c.location is null
    • ConfigurationPermission[location,CONFIGURE] - if location is not null
    • ConfigurationPermission[c.location,CONFIGURE] - if the returned configuration c already exists and c.location is not null

Particularly the CP(""*"", CONFIGURE) case is not properly checked.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,217327,,,Wed Sep 25 14:02:37 UTC 2013,,,,,,0|i0vuzb:,183992,,,,,,,,"16/Nov/11 10:35;fmeschbe;Fixed the permission checks in Rev. 1202621

Also cleaned up the code a bit to properly keep the layering between the ConfigurationManager and ConfigurationAdminImpl classes.",25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration.getBundleLocation to generous,FELIX-3228,12531587,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,16/Nov/11 09:47,25/Sep/13 14:02,14/Mar/19 02:48,16/Nov/11 09:54, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"R 4.3 Configuration Admin (v.1.4) spec says that permissions on Configuration.getBundleLocation() must be check as follows:

• ConfigurationPermission[this.location,CONFIGURE] - if this.location is not null
• ConfigurationPermission[""*"",CONFIGURE] - if this.location is null

Currently the special case check in case of ""this.location is null"" is not correctly done thus granting permission to generously.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,217323,,,Wed Sep 25 14:02:36 UTC 2013,,,,,,0|i0vuyn:,183989,,,,,,,,16/Nov/11 09:54;fmeschbe;Fixed in Rev. 1202609,25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagedService.update must be called with null if configuration exists but is not visilbe,FELIX-3227,12531584,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,16/Nov/11 08:49,25/Sep/13 14:02,14/Mar/19 02:48,16/Nov/11 08:52, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,Specification compliance,,,,,0,,,,,,"R 4.3 Configuration Admin Specification (v1.4) prescribes in Section 104.5.3, that ManagedService.update must be called with null if configuration exists but is not visible to the ManagedService. Currently this call with null is only done according to the R 4.2 (v 1.3) specification if configuration does not exist.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,217320,,,Wed Sep 25 14:02:35 UTC 2013,,,,,,0|i0vuyv:,183990,,,,,,,,16/Nov/11 08:52;fmeschbe;Fixed in Rev. 1202591 as stipulated,16/Nov/11 12:08;fmeschbe;Adapted integration test case to MS.update being called with null for invisible configuration (used to not be called at all previously),25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Whiteboard servlet service registered with default HttpContext if registered before HttpContext service,FELIX-3226,12531423,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,15/Nov/11 08:07,11/Nov/13 04:53,14/Mar/19 02:48,05/Dec/11 20:30,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"If a Servlet service for whiteboard registration with the HttpService is registered before the HttpContext service referred to, the servlet is registered with a default context. This may cause problems in the service and prevent correct operation.

Rather the servlet registration should be delayed until the HttpContext arrives.

Likewise, once the HttpContext is unregistered, the servlet must be unregistered from the HttpService, too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-11 04:53:14.24,,,no_permission,,,,,,,,,,,,217159,,,Mon Nov 11 04:53:14 UTC 2013,,,,,,0|i0vuy7:,183987,,,,,,,,"05/Dec/11 20:21;fmeschbe;Add test dependency to commons-collections in Rev. 1210601
","05/Dec/11 20:30;fmeschbe;Improve HttpContext whiteboard support in Rev. 1210612
  - export constants
  - allow for sharing HttpContext services across bundles
    (must be declared)
  - delay Servlet/Filter registration as long as HttpContext
    service referred to is missing
  - add unit tests",11/Nov/13 04:53;chetanm;Updated the docs with revision [1540609|http://svn.apache.org/r1540609] about usage of {{context.shared}} service property which allows sharing of context across bundles,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[PATCH] build fails with ""unreported exception""",FELIX-3222,12531348,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,jcapik,jcapik,14/Nov/11 17:59,02/Dec/11 15:44,14/Mar/19 02:48,18/Nov/11 23:06,maven-bundle-plugin-2.3.5,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"The following error appears when building in the latest fedora-rawhide environment:

[ERROR] /projects/maven-plugin-bundle/maven-bundle-plugin-2.3.5/src/main/java/org/apache/felix/obrplugin/RemoteFileManager.java:[118,45] unreported exception org.apache.maven.repository.legacy.WagonConfigurationException; must be caught or declared to be thrown

The following patch solved the build issue (i know, that exception catchall is not the best solution):

http://jcapik.fedorapeople.org/files/maven-bundle-plugin/maven-bundle-plugin-unreported-exception.patch

",fedora-rawhide-x86_64,900,900,,0%,900,900,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-18 23:06:51.874,,,no_permission,,,,,,,,,,,,217084,,,Fri Nov 18 23:06:51 UTC 2011,,,,,,0|i1av27:,271498,,,,,,,,"18/Nov/11 23:06;mcculls;Resolved in r1203895

Note that the WagonConfigurationException is the right type to catch for the Maven2 API, but it has been deprecated in Maven3 and a legacy compatibility class added to the exception hierarchy.

Normally this would be fine (ie. build against Maven 2, run against Maven 2 or 3) but you appear to have your own custom build setup that's specifically targeting Maven 3. The safest solution in this case is to catch a common superclass.

Note: to make such issues easier to fix it would be good to mention any custom build setup, along with any changes to the project dependencies (ie. Maven 2 vs Maven 3)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when uninstall a bundle on enabled OSGi security,FELIX-3221,12531296,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,michael.hirsch,michael.hirsch,14/Nov/11 09:29,21/Nov/11 09:40,14/Mar/19 02:48,18/Nov/11 11:06,framework.security-2.0.0,,,,,,framework.security-2.0.1,,,,,,,Framework Security,,,,,,0,,,,,,"org.apache.felix.framework.BundleImpl#adapt returns null:
{code}
public synchronized <A> A adapt(Class<A> type)
    {
        ....
        else if (type == BundleRevision.class)
        {
            if (m_state == Bundle.UNINSTALLED)
            {
                return null;
            }
.....
{code}

This causes a NPE: 
StackTrace:
java.lang.NullPointerException
        at org.apache.felix.framework.SecurityProviderImpl.getSignerMatcher(SecurityProviderImpl.java:73)
        at org.apache.felix.framework.Felix.getSignerMatcher(Felix.java:4130)
        at org.apache.felix.framework.BundleImpl.getSignerCertificates(BundleImpl.java:901)
        at org.osgi.framework.SignerProperty.isBundleSigned(SignerProperty.java:110)
        at org.osgi.framework.AdminPermission$1.run(AdminPermission.java:884)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.osgi.framework.AdminPermission.getProperties(AdminPermission.java:875)
        at org.osgi.framework.AdminPermission.implies0(AdminPermission.java:671)
        at org.osgi.framework.AdminPermissionCollection.implies(AdminPermission.java:1014)
        at org.apache.felix.framework.security.util.Permissions.implies(Permissions.java:469)
        at org.apache.felix.framework.security.condpermadmin.ConditionalPermissionAdminImpl.eval(ConditionalPermissionAdminImpl.java:949)
        at org.apache.felix.framework.security.condpermadmin.ConditionalPermissionAdminImpl.hasPermission(ConditionalPermissionAdminImpl.java:882)
        at org.apache.felix.framework.SecurityProviderImpl.hasBundlePermission(SecurityProviderImpl.java:122)
        at org.apache.felix.framework.Felix.impliesBundlePermission(Felix.java:4139)
        at org.apache.felix.framework.BundleProtectionDomain.implies(BundleProtectionDomain.java:66)
        at java.security.AccessControlContext.checkPermission(Unknown Source)
        at java.security.AccessController.checkPermission(Unknown Source)
        at java.lang.SecurityManager.checkPermission(Unknown Source)
        at org.apache.felix.framework.BundleImpl.getLocation(BundleImpl.java:583)
        at org.apache.felix.cm.impl.ConfigurationManager.bundleChanged(ConfigurationManager.java:607)
        at org.apache.felix.framework.util.EventDispatcher$3.run(EventDispatcher.java:861)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:858)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
        at org.apache.felix.framework.util.EventDispatcher.run(EventDispatcher.java:1088)
        at org.apache.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:54)
        at org.apache.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:101)
        at java.lang.Thread.run(Unknown Source)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-18 11:06:00.664,,,no_permission,,,,,,,,,,,,217032,,,Mon Nov 21 09:40:53 UTC 2011,,,,,,0|i1av2f:,271499,,,,,,,,18/Nov/11 11:06;karlpauls;Rats. This should be using adapt(BundleRevisionImpl.class) as this internal class doesn't return null if the bundle has been uninstalled. I commited a fix for this. Can you please test and close this issue if it works for you? Thanks a lot!,21/Nov/11 09:40;michael.hirsch;This bugfix works for us. No NPE is thrown anymore. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Multiple ClassCastException(s) when invoking OSGi Service-Hooks (EventHook, FindHook)",FELIX-3220,12531292,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,karlpauls,michael.hirsch,michael.hirsch,14/Nov/11 08:52,21/Nov/11 09:39,14/Mar/19 02:48,18/Nov/11 11:04,framework-4.0.1,,,,,,framework-4.0.2,,,,,,,Framework,,,,,,0,,,,,,"*Scenario:*
- Register a EventHook in the OSGi service registry as described in the OSGi core specification 4.2. 
- Run felix with a SecurityManager
- The framework is not calling the EventHook during framework service (register, modify, and unregister service) operations.

*Expected Behavior*
- The framework code calls the EventHook during framework service (register, modify, and unregister service) operations. 

*Current Behavior:*
- A ClassCastException occurs in the framework code org.apache.felix.framework.util.SecureAction:1628
- Logged on ""WARNING"" Level

*Probably Caused By:*
The ClassCastException is caused by calling the wrong setter-method within the org.apache.felix.framework.util.SecureAction:1135 class. 
The ServiceEvent will never be set which causes that in line 1628 when invoking the EventHook the ServiceEvent argument is missing and parameters for the EventHook will be casted wrong.

Method: org.apache.felix.framework.util.SecureAction # invokeServiceEventHook
{code}
public void invokeServiceEventHook(
        org.osgi.framework.hooks.service.EventHook eh,
        ServiceEvent event, Collection<BundleContext> contexts)
        throws Exception
    { ....
      actions.set(Actions.INVOKE_SERVICE_EVENT_HOOK, eh, contexts);
     ....
    }
{code}

Method: org.apache.felix.framework.util.SecureAction.Actions # run
has wrong arguments: 
arg1 = EventHook
arg2 = Collection<BundleContext>
arg3 = null
{code}
case INVOKE_SERVICE_EVENT_HOOK:
                    ((org.osgi.framework.hooks.service.EventHook) arg1).event(
                        (ServiceEvent) arg2, (Collection<BundleContext>) arg3);
                    return null;
{code}


*Solution:*
Changing the method of setting the arguments for the Action class. Set also the ServiceEvent!
{code}
public void invokeServiceEventHook(
        org.osgi.framework.hooks.service.EventHook eh,
        ServiceEvent event, Collection<BundleContext> contexts)
        throws Exception
    { ....
      actions.set(Actions.INVOKE_SERVICE_EVENT_HOOK, eh, event, contexts);
     ....
    }
{code}


*Additional:*
# Meanwhile investigating code I found that also invoking the ServiceEventListenerHook has probably the same behavior! When calling the setter-method for setting the arguments for the Action class there is missing the ServiceEvent.

# Invoking FindHook using wrong action constant which causes a ClassCastException!
Actions.INVOKE_SERVICE_EVENT_HOOK need to be changed to Actions.INVOKE_SERVICE_FIND_HOOK
{code}
public void invokeServiceFindHook(
        org.osgi.framework.hooks.service.FindHook fh,
        BundleContext context, String name, String filter,
        boolean allServices, Collection<ServiceReference<?>> references)
        throws Exception
    {....
       actions.set(
                Actions.INVOKE_SERVICE_EVENT_HOOK, fh, context, name, filter,
                (allServices) ? Boolean.TRUE : Boolean.FALSE, references);
     ....}
{code}
","Enable OSGi Security, using Felix security bundle version 2.0.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-18 11:04:25.581,,,no_permission,,,,,,,,,,,,217028,,,Mon Nov 21 09:39:52 UTC 2011,,,,,,0|i0vwif:,184240,,,,,,,,"18/Nov/11 11:04;karlpauls;Yes, I think you are correct. I commited a fix (actually, I did go over all hook callbacks and did find some more of this kind of problems). Thanks a lot. Can you please test with the latest trunk and close this issue if it works for you.","21/Nov/11 09:39;michael.hirsch;I tested the EventHook and FindHook invocation and it works properly now!
Not tested is the invocation of other service hooks (e.g. ServiceEventListenerHook).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.felix.framework.cache.BundleCache.deleteDirectoryTreeRecursive throws NPE,FELIX-3211,12530848,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,lhochet,lhochet,09/Nov/11 10:42,20/Nov/11 19:49,14/Mar/19 02:48,20/Nov/11 19:49,framework-4.0.0,,,,,,framework-4.0.2,,,,,,,Framework,,,,,,0,,,,,,"The following exception was found in logs:
org.osgi.framework.BundleException: Unable to flush bundle cache.
	at org.apache.felix.framework.Felix.init(Felix.java:652)
	at icom.AppMain.initApplicationOsgi(AppMain.java:257)
	at icom.AppMain.main(AppMain.java:145)
Caused by: java.lang.NullPointerException
	at org.apache.felix.framework.cache.BundleCache.deleteDirectoryTreeRecursive(BundleCache.java:429)
	at org.apache.felix.framework.cache.BundleCache.deleteDirectoryTreeRecursive(BundleCache.java:431)
	at org.apache.felix.framework.cache.BundleCache.deleteDirectoryTree(BundleCache.java:371)
	at org.apache.felix.framework.cache.BundleCache.delete(BundleCache.java:213)
	at org.apache.felix.framework.Felix.init(Felix.java:648)
	... 2 more
The famework is started with the clear cache property.

Looking at BundleCache code, it doesn't check for null on the return of getSecureAction().listDirectory(target) (which eventually calls Files.list() which can return null from the native call","Windows 7 (32), Java 7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-10 04:44:38.939,,,no_permission,,,,,,,,,,,,216586,,,Thu Nov 10 04:44:38 UTC 2011,,,,,,0|i1av3z:,271506,,,,,,,,"10/Nov/11 04:44;rickhall;I committed a patch, please close this issue if you are satisfied. Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make sure the properties passed to BND only include string values,FELIX-3209,12530724,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,mcculls,mcculls,08/Nov/11 14:51,02/Dec/11 15:44,14/Mar/19 02:48,09/Nov/11 00:45,,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,216462,,,Wed Nov 09 00:45:55 UTC 2011,,,,,,0|i1av4f:,271508,,,,,,,,09/Nov/11 00:45;mcculls;Fixed in r1199573,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improper handling of nulls and substring matching at CapabilitySet/SimpleFilter,FELIX-3207,12530717,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,lgalfaso,lgalfaso,08/Nov/11 14:04,20/Nov/11 19:47,14/Mar/19 02:48,20/Nov/11 19:47,framework-4.0.1,,,,,,framework-4.0.2,,,,,,,Framework,,,,,,0,,,,,,"The current filter implementation has the following issues:
- Is not able to handle collections that have null values in it

- Substring matching does not handle the end of the string matching as expected

About this last part, below are the test cases
(attr=*foo*bar*bar)  should not match {attr=foobar} and it does
(attr=aaaa*aaaa) should not match {attr=aaaaaaa} and it does


",,,,,,,,,,,,,,,,,,,,08/Nov/11 14:06;lgalfaso;FELIX-3207.diff;https://issues.apache.org/jira/secure/attachment/12502917/FELIX-3207.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-09 03:31:00.211,,,no_permission,,,,,,,,,,,,216455,,,Wed Nov 09 14:20:44 UTC 2011,,,,,,0|i1av4v:,271510,,,,,,,,08/Nov/11 14:06;lgalfaso;Proposed patch,"09/Nov/11 03:31;rickhall;I've applied the patch and added your test cases. Please close if satisfied, thanks!",09/Nov/11 14:20;lgalfaso;Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restore the BND analyzer approach which creates a MANIFEST.MF based on the contents of the jar,FELIX-3206,12530658,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,aragot,aragot,08/Nov/11 00:12,06/Dec/11 14:24,14/Mar/19 02:48,28/Nov/11 15:39,maven-bundle-plugin-2.3.4,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"See http://www.mail-archive.com/users@felix.apache.org/msg11364.html

In FELIX-2817, we've lost the ability to create the MANIFEST.MF based on the contents of the jar. The current approach always uses the ""builder"" approach to assemble the contents of the jar, which makes it difficult/error prone to use BND to simply generate a manifest.

To see an example of the behavior I expect, see the mailing list and/or checkout this example: https://bitbucket.org/aragot/discrepancywithbndlib/src/670d96221620 (also look at the diff between the 2.1.0 and the 2.3.4 behavior: https://bitbucket.org/aragot/discrepancywithbndlib/changeset/670d96221620).

Thank you very much,
Adrien",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-28 15:39:23.439,,,no_permission,,,,,,,,,,,,216396,,,Tue Dec 06 14:24:23 UTC 2011,,,,,,0|i1av53:,271511,,,,,,,,"28/Nov/11 15:39;mcculls;Resolved in r1207309, reverted to old behaviour of generating the manifest from the current attached content, but still allow people to generate manifests by rebuilding the bundle in-memory by setting <rebuildBundle>true</rebuildBundle> in the configuration",28/Nov/11 15:40;mcculls;Deployed new snapshot for testing: https://repository.apache.org/content/repositories/snapshots/org/apache/felix/maven-bundle-plugin/2.4.0-SNAPSHOT/maven-bundle-plugin-2.4.0-20111128.153841-14.jar,"06/Dec/11 14:24;aragot;Thank you Stuart, the fix works well as far as I've tested. I'll start using it progressively (I'm moving from maven-bundle-plugin-2.0.0 so there is a gap).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error resolving system.bundle dependencies,FELIX-3205,12530618,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,mguillaume,mguillaume,07/Nov/11 19:20,20/Nov/11 19:49,14/Mar/19 02:48,20/Nov/11 19:49,framework-4.0.1,,,,,,framework-4.0.2,,,,,,,Framework,Specification compliance,,,,,0,,,,,,"Bundles with ""Require-Bundle: system.bundle"" fail to start with the error: missing requirement osgi.wiring.bundle=system.bundle.
Fragments with ""Fragment-Host: system.bundle"" fail to start with the error: missing requirement osgi.wiring.host=system.bundle.

They load fine if I replace (in FelixConstants) SYSTEM_BUNDLE_SYMBOLICNAME = ""org.apache.felix.framework"" with ""system.bundle"", but I doubt that's a good solution.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-08 08:31:51.708,,,no_permission,,,,,,,,,,,,216356,,,Tue Nov 08 17:16:16 UTC 2011,,,,,,0|i1av5b:,271512,,,,,,,,"08/Nov/11 08:31;rickhall;Those values were not properly being aliases in the bundle/host capabilities. I've committed a patch and it appears to work for me, please close this issue if you are satisfied.","08/Nov/11 17:16;mguillaume;This seems to be working, thanks!
I still have an issue with an extension bundle that isn't specifying the ""extension:=framework"" part, but the spec doesn't seem to say this should be the default so I suppose it's an issue with the bundle itself.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Security Problem: Getting full file access within the cache directory from one Bundle,FELIX-3196,12530014,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,michael.grammling,michael.grammling,03/Nov/11 08:23,20/Nov/11 19:57,14/Mar/19 02:48,20/Nov/11 19:57,framework.security-2.0.0,,,,,,framework.security-2.0.1,,,,,,,Framework Security,,,,,,0,,,,,,"It seems that there is a security problem in the ""Framework Security"" module of Felix.
I have full access to the bundle cache directory from each bundle.

Expectation: I should only get full access to the data storage of the bundle itself.
Actually I was able to create files from Bundle 25 inside the data storage of Bundle 0.
I even could delete the whole directory of Bundle 0.

I checked the same with Knopflerfish which does this check correctly.

Do I have to set more configuration parameters?
The OSGi specification defines that the framework should grant access to the bundle's data storage. ",felix-framework-4.0.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-03 18:44:19.341,,,no_permission,,,,,,,,,,,,215873,,,Mon Nov 07 17:13:37 UTC 2011,,,,,,0|i1av5z:,271515,,,,,,,,03/Nov/11 18:44;karlpauls;I confirm that there is a bug. I commited a fix to trunk and pushed a new snapshot. Please close this issue if it works for you. ,07/Nov/11 17:13;michael.grammling;The fix is working.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Manifest parser is not correctly handling escapes,FELIX-3194,12529499,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,rickhall,rickhall,31/Oct/11 16:27,20/Nov/11 19:48,14/Mar/19 02:48,20/Nov/11 19:48,framework-4.0.1,,,,,,framework-4.0.2,,,,,,,Framework,Specification compliance,,,,,0,,,,,,"The framework's OSGi header parser is basically flag escape characters, but isn't correctly turning off the flag on the next character, which then leads to parse errors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,215359,,,Mon Oct 31 16:31:53 UTC 2011,,,,,,0|i1av6f:,271517,,,,,,,,31/Oct/11 16:31;rickhall;Committed a patch to fix this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update the temporal dependency handler to use the new iPOJO Method interceptor API,FELIX-3193,12529492,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,31/Oct/11 15:39,04/Feb/13 12:33,14/Mar/19 02:48,31/Oct/11 18:20,,,,,,,ipojo-temporal-dependency-handler-1.8.0,,,,,,,iPOJO,,,,,,0,,,,,,The handler must be adapted to use the new MethodInterceptor methods,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,215352,,,Mon Oct 31 18:20:33 UTC 2011,,,,,,0|i0vuw7:,183978,,,,,,,,"31/Oct/11 18:20;clement.escoffier;Fixed in trunk.
The temporal handler requires iPOJO 1.9.0-SNAPSHOT (core 1.8.2 will be released soon)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Service properties are not updated if the properties were already propagated,FELIX-3192,12529491,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,31/Oct/11 15:36,14/May/12 14:58,14/Mar/19 02:48,31/Oct/11 18:21,,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"If a property is propagated to the service registration and if this property was already propagated, the value is not updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,215351,,,Mon May 14 14:58:26 UTC 2012,,,,,,0|i1av6n:,271518,,,,,,,,31/Oct/11 18:21;clement.escoffier;Fixed in trunk,14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mixing full-qualified Reference annotations and imported one results in no References exported to seviceComponents.xml,FELIX-3189,12529042,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,bpruessmann,bpruessmann,27/Oct/11 12:46,31/Aug/12 14:18,14/Mar/19 02:48,31/Aug/12 14:14,maven-scr-plugin-1.7.2,,,,,,maven-scr-plugin-1.8.0,scr ant task 1.2.0,scr generator 1.2.0,,,,,SCR Tooling,,,,,,0,,,,,,"If you are using 'org.apache.felix.scr.annotations.Reference' in a full-qualified way, also having it on the class' import list will put the maven-scr-plugin into a weird state. The resulting serviceComponents.xml will not contain any of the References, worse it will not contain any of the References of the classes that were processed later.",,,,,,,,,,,,,,,,,,,,27/Oct/11 12:47;bpruessmann;TestService.java;https://issues.apache.org/jira/secure/attachment/12501087/TestService.java,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-31 14:14:34.762,,,no_permission,,,,,,,,,,,,214902,,,Fri Aug 31 14:14:34 UTC 2012,,,,,,0|i0vwpz:,184274,,,,,,,,27/Oct/11 12:47;bpruessmann;Sample file exposing the erroneous behavior,31/Aug/12 14:14;cziegeler;This has been fixed with the latest version,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PATCH] exception org.apache.maven.project.artifact.InvalidDependencyVersionException has already been caught,FELIX-3188,12528863,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,jcapik,jcapik,26/Oct/11 11:50,02/Dec/11 15:44,14/Mar/19 02:48,26/Oct/11 12:25,maven-bundle-plugin-2.3.5,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"The following compilation error appears when compiling with javac 1.6.0_22

[ERROR] /home/jcapik/projects/maven-plugin-bundle/maven-bundle-plugin-2.3.5/src/main/java/org/apache/felix/bundleplugin/BundleAllPlugin.java:[278,12] exception org.apache.maven.project.artifact.InvalidDependencyVersionException has already been caught

There is a wrong order of exception catches. The following patch solved the issue for me.
http://jcapik.fedorapeople.org/files/maven-bundle-plugin/maven-bundle-plugin-exception-already-thrown.patch
",fedora-rawhide-x86_64,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-26 12:25:59.354,,,no_permission,,,,,,,,,,,,214723,,,Wed Oct 26 12:34:17 UTC 2011,,,,,,0|i1auhj:,271405,,,,,,,,"26/Oct/11 12:25;mcculls;Fixed in r1189167 - btw, I assume you're compiling this code against a newer version of the Maven API (the current pom specifies 2.0.7) because the change to make InvalidDependencyVersionException a subclass of ProjectBuildingException only came in Maven 3","26/Oct/11 12:34;jcapik;Yes, we've already switched to Maven 3 ...it was year ago :)

Thanks for applying ... ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Negative Embed-Dependency clauses aren't handled correctly,FELIX-3185,12528429,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,mcculls,mcculls,23/Oct/11 21:50,02/Dec/11 15:44,14/Mar/19 02:48,26/Oct/11 23:14,,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,See http://mail-archives.apache.org/mod_mbox/felix-users/201110.mbox/%3cFEF852C8B7836E4796B5CA0DD7B53B9F0E7EFA3CD3@PRDEXC101.igi.ig.local%3e thread,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,214289,,,Wed Oct 26 23:14:40 UTC 2011,,,,,,0|i1auhz:,271407,,,,,,,,"26/Oct/11 23:14;mcculls;Fixed in r1189530 and deployed new snapshot.

Negative clauses (those beginning with a !) will now reduce the set of available dependencies:

   !*;groupId=example, *;scope=compile|runtime

You can also now omit the primary artifact key at the beginning of each clause:

   !groupId=example, scope=compile|runtime
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Attribute requirement is not validated,FELIX-3183,12528370,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,22/Oct/11 12:25,20/Nov/12 11:00,14/Mar/19 02:48,22/Oct/11 12:27,metatype-1.0.4,,,,,, metatype-1.0.6,,,,,,,Metatype Service,,,,,,0,,,,,,The AD.validate method validates a false positive for a missing value even if a value would be required.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,214230,,,Tue Nov 20 11:00:52 UTC 2012,,,,,,0|i0l4cf:,121354,,,,,,,,22/Oct/11 12:27;fmeschbe;Fixed in Rev. 1187704,20/Nov/12 11:00;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ResolverImpl,FELIX-3178,12528253,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,rickhall,aschloss,aschloss,21/Oct/11 10:38,21/Nov/11 09:12,14/Mar/19 02:48,18/Nov/11 22:09,framework-4.0.0,,,,,,framework-4.0.2,,,,,,,Framework,,,,,,1,,,,,,"Bundle Resolution fails with NPE in both, Felix 4.0.0 and 4.0.1

ERROR: Bundle com.springsource.com.sun.tools.xjc [119] Error starting file:bundles/com.springsource.com.sun.tools.xjc.jar (java.lang.NullPointerException)
java.lang.NullPointerException
        at org.apache.felix.framework.resolver.ResolverImpl.mergeUses(ResolverImpl.java:856)
        at org.apache.felix.framework.resolver.ResolverImpl.calculatePackageSpaces(ResolverImpl.java:659)
        at org.apache.felix.framework.resolver.ResolverImpl.calculatePackageSpaces(ResolverImpl.java:609)
        at org.apache.felix.framework.resolver.ResolverImpl.resolve(ResolverImpl.java:181)
        at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:168)
        at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3811)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
        at java.lang.Thread.run(Thread.java:662)",Also reproduced on 4.0.1,,,,,,,,,,,,,,,,,,,21/Oct/11 10:39;aschloss;MANIFEST.MF;https://issues.apache.org/jira/secure/attachment/12500169/MANIFEST.MF,24/Oct/11 09:07;aschloss;npe.z01;https://issues.apache.org/jira/secure/attachment/12500413/npe.z01,24/Oct/11 09:07;aschloss;npe.z02;https://issues.apache.org/jira/secure/attachment/12500414/npe.z02,24/Oct/11 09:07;aschloss;npe.zip;https://issues.apache.org/jira/secure/attachment/12500415/npe.zip,11/Nov/11 11:00;aschloss;npe2.z01;https://issues.apache.org/jira/secure/attachment/12503360/npe2.z01,11/Nov/11 11:00;aschloss;npe2.z02;https://issues.apache.org/jira/secure/attachment/12503361/npe2.z02,11/Nov/11 11:00;aschloss;npe2.z03;https://issues.apache.org/jira/secure/attachment/12503362/npe2.z03,11/Nov/11 11:00;aschloss;npe2.z04;https://issues.apache.org/jira/secure/attachment/12503363/npe2.z04,11/Nov/11 11:00;aschloss;npe2.zip;https://issues.apache.org/jira/secure/attachment/12503364/npe2.zip,,,,,9.0,,,,,,,,,,,,,,,,,,,2011-10-21 21:01:11.06,,,no_permission,,,,,,,,,,,,97607,,,Mon Nov 21 09:12:48 UTC 2011,,,,,,0|i0vwe7:,184221,,,,,,,,21/Oct/11 10:39;aschloss;This is the bundle's manifest,"21/Oct/11 21:01;rickhall;Having the manifest alone isn't sufficient, since the error occurs after it has calculated its dependencies. I tried to recreate the error from a set of bundles from the SpringSource bundle repository, but for me it ended up resolving correctly.

Perhaps you could zip up and attach to this issue the set of bundles you use to see the error, then I can investigate it. Thanks.","24/Oct/11 09:07;aschloss;I did also include the start up profile that we use. Since I did remove all the Spring libraries as well as our own bundles, this container doesn't do much, but the error happens anyway. Thanks","24/Oct/11 15:13;rickhall;Do I just 'cat' these three files together (e.g., cat npe.z01 npe.z02 npe.zip > full.zip) or what?","24/Oct/11 15:44;aschloss;Sorry about that, please reassemble the zip using ""zip -s- npe -O full""","24/Oct/11 16:55;rickhall;Ok, I see what is going on. Previously, the framework treated caps/reqs from attached fragments as if they came from the host, but the R4.3 API treats attached caps/reqs as coming from the fragment making the host/fragment tuple explicit. Internally, the resolver deals with this by wrapping any attached caps/reqs to make it look like they come from the host hiding the host/fragment tuple.

Unfortunately, when calculating package sources during a resolve in getPackageSourceInternal() the wrapper is lost, which ultimately causes the NPE since the resolve subsequently tries to wire to a fragment capability directly, but cannot find its package space because it doesn't exist since it should be using the host's package space instead.

I'll need to think about the proper way to resolve this issue, but given this knowledge I should be able to create a simple test case to recreate it, so I'll attempt to do that first.","31/Oct/11 17:21;rickhall;Just a status update, I've created a test case to reproduce the bug in a much simpler scenario. Now I just have to figure out the best way to resolve it. Once i get something committed, I'll start to think about a 4.0.2 framework release.",31/Oct/11 20:12;aschloss;Thanks for taking this on; a 4.0.2 release would be greatly appreciated,"08/Nov/11 07:22;rickhall;I've committed a patch for this and deployed snapshots. Please let me know if it is working for you, thanks.

I'm not completely happy with the patch, so I may make improvements if I can think of any.",11/Nov/11 02:31;adreghiciu;I've run into same problem and I can confirm that 4.1.0-SNAPSHOT is working fine,11/Nov/11 03:06;rickhall;Great. We'll start a 4.0.2 release pretty soon.,"11/Nov/11 07:54;rickhall;Resolving as fixed, please close if satisfied. Thanks.","11/Nov/11 08:07;aschloss;I updated from felix-3.0.9 to 4.1.0-20111108.085917-4 and now I'm getting a different one:
ERROR: Bundle org.apache.servicemix.specs.jaxp-api-1.4 [177] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
        at org.apache.felix.framework.resolver.ResolverImpl.resolve(ResolverImpl.java:177)
        at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:168)
        at org.apache.felix.framework.Felix.resolveBundles(Felix.java:3783)
        at org.apache.felix.framework.Felix.findBundleEntries(Felix.java:1622)
        at org.apache.felix.framework.BundleImpl.findEntries(BundleImpl.java:303)
        at org.apache.servicemix.specs.locator.Activator.register(Activator.java:97)
        at org.apache.servicemix.specs.locator.Activator.bundleChanged(Activator.java:88)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)
        at org.apache.felix.framework.StatefulResolver.fireResolvedEvents(StatefulResolver.java:783)
        at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:203)
        at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3819)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:944)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:931)
",11/Nov/11 09:26;rickhall;Is this something I can easily recreate with the attached zip again or do I need something else?,"11/Nov/11 11:00;aschloss;Sorry about that, should've checked first. Seems to be due to another constellation that I did not have in the previous shrink-down. I did attach a new bundle collection that reproduces the problem.

Again, use ""zip -s- npe2 -O full"" to recombine the archive","18/Nov/11 22:08;rickhall;Ok, I've gotten to the bottom of this second issue. It is actually completely unrelated to the first issue, so technically we could open another bug on it, but it's probably not necessary.

This second issue has existed for a while, I believe. Essentially, candidates for bundle revisions are populated in a recursive fashion. The approach must allow for cycles and does this by essentially picking up where it left off on a given revision when it tries to populate a revision that it is already populating.

With this approach, it is possible that a given revision can fail at a deeper level in the recursion stack than where it started. However, there were certain scenarios where this would go unnoticed at the higher level because resolve failures do not necessarily get thrown to the top immediately.

To remedy this, after returning from a deeper recursion level, the algorithm must double check to make sure that the revision it is resolving didn't already fail in a deeper level.",18/Nov/11 22:09;rickhall;I've committed a patch and the supplied scenario now works for me. Please close if you are satisfied. Thanks.,21/Nov/11 09:12;aschloss;Works for me as well. Thanks for the help.,,,,,,,,,,,,,,,,,,,,,,,,
RankingComparator results in wrong results,FELIX-3175,12527906,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,20/Oct/11 10:28,25/Sep/13 14:02,14/Mar/19 02:48,20/Oct/11 12:16, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"The RankingComparator class is used for two cases: ordering ConfigurationPlugin services as per the service.cmRanking property and ordering services as per the service.ranking property. These orderings are slightly different for which the class does not provide properly:

* service.cmRanking sorts ascending and does not define an order amongst services with the same cmRanking value
* service.ranking sorts in descending property value order and defines to fall back to service.id ordering (ascending) in case of equal service.ranking values.

The RankingComparator should be fixed (and simplified) to cope with these two mechanisms.

This should also be tested using unit tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,92312,,,Wed Sep 25 14:02:34 UTC 2013,,,,,,0|i0vuv3:,183973,,,,,,,,20/Oct/11 12:16;fmeschbe;Fixed in Rev. 1186756,25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Local OBR install failes when there is a space in the full path,FELIX-3173,12527756,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,mcculls,bramk,bramk,19/Oct/11 14:47,24/Oct/11 08:23,14/Mar/19 02:48,23/Oct/11 20:18,,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"Testing with the 2.4.0-SNAPSHOT, 2.4.0-20111017.223737-10 to be exact, I get the following error. Seems the local OBR install fails because it does not like the space in the path.


{noformat}
[WARNING] Exception while updating local OBR: java.net.URISyntaxException: Illegal character in path at index 21: file:/C:/bramk/Apache Maven/local-repository/o
rg/amdatu/core/org.amdatu.core.tenant/0.2.1-SNAPSHOT/org.amdatu.core.tenant-0.2.1-SNAPSHOT.jar
java.lang.RuntimeException: java.net.URISyntaxException: Illegal character in path at index 21: file:/C:/bramk/Apache Maven/local-repository/org/amdatu/core/org
.amdatu.core.tenant/0.2.1-SNAPSHOT/org.amdatu.core.tenant-0.2.1-SNAPSHOT.jar
        at org.apache.felix.bundlerepository.impl.DataModelHelperImpl.createResource(DataModelHelperImpl.java:486)
        at org.apache.felix.obrplugin.ObrUpdate.updateRepository(ObrUpdate.java:195)
        at org.apache.felix.obrplugin.ObrInstall.updateLocalBundleMetadata(ObrInstall.java:184)
        at org.apache.felix.obrplugin.ObrInstall.execute(ObrInstall.java:143)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: java.net.URISyntaxException: Illegal character in path at index 21: file:/C:/bramk/Apache Maven/local-repository/org/amdatu/core/org.amdatu.core.tena
nt/0.2.1-SNAPSHOT/org.amdatu.core.tenant-0.2.1-SNAPSHOT.jar
        at java.net.URI$Parser.fail(URI.java:2809)
        at java.net.URI$Parser.checkChars(URI.java:2982)
        at java.net.URI$Parser.parseHierarchical(URI.java:3066)
        at java.net.URI$Parser.parse(URI.java:3014)
        at java.net.URI.<init>(URI.java:578)
        at java.net.URL.toURI(URL.java:918)
        at org.apache.felix.bundlerepository.impl.DataModelHelperImpl.createResource(DataModelHelperImpl.java:483)
        ... 22 more
{noformat}
","Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.6.0_25
Java home: C:\Program Files (x86)\Java\jdk1.6.0_25\jre
Default locale: nl_NL, platform encoding: Cp1252
OS name: ""windows 7"" version: ""6.1"" arch: ""x86"" Family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-23 20:18:46.307,,,no_permission,,,,,,,,,,,,89249,,,Mon Oct 24 08:23:39 UTC 2011,,,,,,0|i1auin:,271410,,,,,,,,"23/Oct/11 20:18;mcculls;Fixed in r1187964, deployed new snapshot (2.4.0-20111023.202015-11)",24/Oct/11 08:23;bramk;Confirmed on my environment,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Error when calling BundleContext.register(Class, Object, Dictionary)",FELIX-3172,12527635,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,fornacif,fornacif,18/Oct/11 18:20,14/May/12 14:58,14/Mar/19 02:48,19/Oct/11 15:11,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"I have an error when I try to call the simple BundleContext.register(Class, Object, Dictionary) method (note the type of the first argument).
It seems that the new signature of the BundleContext.register() method is not recognised by the IPojoContext.

This simple example reproduces the issue:

@Component
@Instantiate
public class Test{
	
	public Test(BundleContext bundleContext) {
		bundleContext.registerService(String.class, ""test"", null);
	}

}

With the following trace:

g! [ERROR]  : [com.fornacif.osgi.manager.internal.Manager-0] createInstance -> Cannot invoke the constructor method - the constructor throws an except
ion : org.apache.felix.ipojo.IPojoContext.registerService(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Dictionary;)Lorg/osgi/framework/ServiceRegistr
ation;
java.lang.AbstractMethodError: org.apache.felix.ipojo.IPojoContext.registerService(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Dictionary;)Lorg/osgi
/framework/ServiceRegistration;
        at com.fornacif.osgi.manager.internal.Manager.<init>(Manager.java:12)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
        at java.lang.reflect.Constructor.newInstance(Unknown Source)
        at org.apache.felix.ipojo.InstanceManager.createObject(InstanceManager.java:656)
        at org.apache.felix.ipojo.InstanceManager.getPojoObject(InstanceManager.java:844)
        at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:156)
        at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
        at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:471)
        at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:353)
        at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:166)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:301)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
        at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:343)
        at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:89)
        at org.apache.felix.ipojo.Extender.parse(Extender.java:269)
        at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
        at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
        at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:682)
        at java.lang.Thread.run(Unknown Source)
[ERROR] com.fornacif.osgi.manager.internal.Manager : Cannot create a POJO instance, the POJO constructor has thrown an exception: org.apache.felix.ipo
jo.IPojoContext.registerService(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Dictionary;)Lorg/osgi/framework/ServiceRegistration;
java.lang.RuntimeException: Cannot create a POJO instance, the POJO constructor has thrown an exception: org.apache.felix.ipojo.IPojoContext.registerS
ervice(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Dictionary;)Lorg/osgi/framework/ServiceRegistration;
        at org.apache.felix.ipojo.InstanceManager.createObject(InstanceManager.java:696)
        at org.apache.felix.ipojo.InstanceManager.getPojoObject(InstanceManager.java:844)
        at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:156)
        at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
        at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:471)
        at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:353)
        at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:166)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:301)
        at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
        at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:343)
        at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:89)
        at org.apache.felix.ipojo.Extender.parse(Extender.java:269)
        at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
        at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
        at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:682)
        at java.lang.Thread.run(Unknown Source)
[ERROR] com.fornacif.osgi.manager.internal.Manager : Cannot create a POJO instance, the POJO constructor has thrown an exception: org.apache.felix.ipo
jo.IPojoContext.registerService(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Dictionary;)Lorg/osgi/framework/ServiceRegistration;
[ERROR] iPOJO Instance Creator : A matching factory was found for {component=com.fornacif.osgi.manager.internal.Manager, instance.name=com.fornacif.os
gi.manager.internal.Manager-0}, but the instantiation failed : The configuration is not correct for the type com.fornacif.osgi.manager.internal.Manage
r : Cannot create a POJO instance, the POJO constructor has thrown an exception: org.apache.felix.ipojo.IPojoContext.registerService(Ljava/lang/Class;
Ljava/lang/Object;Ljava/util/Dictionary;)Lorg/osgi/framework/ServiceRegistration;
","Java 1.6, Apache Felix 4.0.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-19 15:11:51.068,,,no_permission,,,,,,,,,,,,88886,,,Mon May 14 14:58:28 UTC 2012,,,,,,0|i0vybj:,184533,,,,,,,,"19/Oct/11 15:11;clement.escoffier;Fixed in trunk.
Implements the new API
Updates service registration to avoid the cast issue
Propagates changes to iPOJO Service Context (and implementations)
Configures the maven-compiler-plugin to generate 1.4 bytecode (same trick as for the Felix framework)

Could you check ?

Thanks","20/Oct/11 04:24;fornacif;Thanks Clément for fixing this issue.

Unfortunately, after having updated all Felix projects from the trunk, I can't build the iPOJO modules due to compilation errors and specially the core module.
I tried while Maven 2 or 3.

Below one of the error I have : 
[ERROR] D:\dev\programs\felix\ipojo\core\src\main\java\org\apache\felix\ipojo\IPojoContext.java:[268,44] error: type ServiceReference does not take pa
rameters

It's been a while I didn't compile iPOJO modules from trunk so I don't know if my configuration is ok.
Any idea ?

Otherwise, is there a location where I can find the snapshot artifact?","20/Oct/11 07:39;clement.escoffier;Hi,

Weird error as it should compile using Java 5 and the ServiceReference<S> class from OSGi Core 4.3. Will update the whole trunk and check.

The snapshot is available from https://repository.apache.org/content/repositories/snapshots/org/apache/felix/org.apache.felix.ipojo/1.9.0-SNAPSHOT/org.apache.felix.ipojo-1.9.0-20111020.073814-3.jar
","20/Oct/11 17:58;fornacif;Replacing the iPOJO core bundle (1.8.0) by the trunk version (1.9.0-SNAPSHOT) fixed the issue.

Thanks.",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Description of EventAdminSubscriberHandler,FELIX-3164,12527212,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,joelschuster,joelschuster,14/Oct/11 15:09,04/Feb/13 12:34,14/Mar/19 02:48,21/Oct/11 09:46,iPOJO-1.6.0,,,,,,ipojo-eventadmin-handler-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"When using the ipojo webconsole or the ipojo arch gogo commands I get a NullPointerException from org.apache.felix.ipojo.architecture.InstanceDescription when I'm trying to take a look at any instance that has a @Subscriber annotation and event admin listener implementation.

I started taking a look at this and it seems that the problem stems from the m_description field of the org.apache.felix.ipojo.handlers.event.subscriber.EventAdminSubscriberHander being null when all the services are being examined by the InstanceDescription class.

Durring debugging I see that all the other service handlers have valid, non-null, descriptions but that the event admin one does not. I haven't spent any more time to determine why that is. I can say that the m_description IS being set and is valid during initialization in initializeComponentFactory() of EventAdminSubscriberHandler. Somehow it looses it somewhere along the way.

Here's the stack trace from the web console:

HTTP ERROR 500

Problem accessing /system/console/iPOJO/instances/org.snapteam.test.endpoint.ExampleIPojoComponent.d9eee2c0-3ce7-4742-afb0-5707e366e623.json. Reason:
    Server Error
Caused by:
java.lang.NullPointerException
	at org.apache.felix.ipojo.architecture.InstanceDescription.getHandlerDescription(InstanceDescription.java:111)
	at org.apache.felix.ipojo.webconsole.IPOJOPlugin.__getInstanceDetail(IPOJOPlugin.java:468)
	at org.apache.felix.ipojo.webconsole.IPOJOPlugin.getInstanceDetail(IPOJOPlugin.java)
	at org.apache.felix.ipojo.webconsole.IPOJOPlugin.__doGet(IPOJOPlugin.java:510)
	at org.apache.felix.ipojo.webconsole.IPOJOPlugin.doGet(IPOJOPlugin.java)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:437)
	at org.apache.felix.webconsole.internal.servlet.OsgiManager.service(OsgiManager.java:384)
	at org.apache.felix.webconsole.internal.KarafOsgiManager.doService(KarafOsgiManager.java:67)
	at org.apache.felix.webconsole.internal.KarafOsgiManager$1.run(KarafOsgiManager.java:47)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:396)
	at org.apache.felix.webconsole.internal.KarafOsgiManager.service(KarafOsgiManager.java:45)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:538)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:478)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:937)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:406)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:871)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)
	at org.eclipse.jetty.server.Server.handle(Server.java:346)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:589)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1048)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:601)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:214)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)
	at java.lang.Thread.run(Thread.java:662)


And from the gogo command line:


09:02:58,119 | INFO  | l Console Thread | araf.shell.console.jline.Console  258 | 25 - org.apache.karaf.shell.console - 2.2.2 | Exception caught while executing command
java.lang.NullPointerException
	at org.apache.felix.ipojo.architecture.InstanceDescription.getDescription(InstanceDescription.java:164)
	at org.apache.felix.ipojo.PrimitiveInstanceDescription.getDescription(PrimitiveInstanceDescription.java:165)
	at org.apache.felix.ipojo.arch.gogo.Arch.__instance(Arch.java:115)
	at org.apache.felix.ipojo.arch.gogo.Arch.instance(Arch.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_24]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_24]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_24]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_24]
	at org.apache.felix.gogo.runtime.Reflective.method(Reflective.java:136)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:79)[25:org.apache.karaf.shell.console:2.2.2]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:240)[25:org.apache.karaf.shell.console:2.2.2]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_24]



","Karaf 2.2.2
Windows 7
Java 1.6.0_24",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-21 09:46:18.638,,,no_permission,,,,,,,,,,,,85598,,,Fri Oct 21 09:46:18 UTC 2011,,,,,,0|i0vvqf:,184114,,,,,,,,"21/Oct/11 09:46;clement.escoffier;Hi,

The description must be set in the configure method and not in the initializeFactory method. I've fixed it in the trunk.

Could you try:
https://repository.apache.org/content/repositories/snapshots/org/apache/felix/org.apache.felix.ipojo.handler.eventadmin/1.9.0-SNAPSHOT/org.apache.felix.ipojo.handler.eventadmin-1.9.0-20111021.094635-2.jar",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in BundleRevisionImpl.close() when uninstalling a bundle,FELIX-3160,12526847,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,walkerr,walkerr,12/Oct/11 13:33,16/Jun/12 19:30,14/Mar/19 02:48,16/Jun/12 19:30,framework-4.0.0,,,,,,framework-4.2.0,,,,,,,Framework,,,,,,0,,,,,,"There seems to be a case where m_content can be null when uninstalling a bundle, causing the following code to throw an NPE:

    synchronized void close()
    {
        try
        {
            resolve(null);
        }
        catch (Exception ex)
        {
            ((BundleImpl) m_bundle).getFramework().getLogger().log(
                Logger.LOG_ERROR, ""Error releasing revision: "" + ex.getMessage(), ex);
        }
        
       m_content.close();


I've added a simple check for null around the close in my version to avoid the exception, which I'll check in.

I'm not sure of the scenarios where this can legally be null at this point, and whether there's some nastier underlying circumstance that needs investigating. We see it under the following circumstances:

* we register a listener that looks for framework STARTED
* when triggered, this iterates all bundles and performs an uninstall on ones which we determine are zombies leftover from a previous run

Aside from the fact we're calling uninstall from inside an event handling method, there doesn't anything else unusual about this code.
",,,,,,,,,,,,,,,,,,,,11/Nov/11 11:26;walkerr;Activator.java;https://issues.apache.org/jira/secure/attachment/12503365/Activator.java,02/Dec/11 09:58;walkerr;Felix3160.zip;https://issues.apache.org/jira/secure/attachment/12505866/Felix3160.zip,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-10-12 14:34:41.693,,,no_permission,,,,,,,,,,,,74145,,,Sat Jun 16 19:30:38 UTC 2012,,,,,,0|i1aujz:,271416,,,,,,,,"12/Oct/11 13:43;walkerr;Fix committed to test for null pointer.
Will close once reviewed and agreed that no further/deeper checks are needed.","12/Oct/11 14:34;rickhall;This doesn't sound right. Do you have something to help me reproduce the scenario? If not, are you saying it will always happen if I create a bundle that uninstalls another bundle after receiving the STARTED event?","12/Oct/11 17:34;walkerr;Certainly always happened our side.

Here's the code in our activator:

    public void start(BundleContext context) 
            throws 
                    Exception
    {
        this.context = context;
        ...
        // Only run sweeper once fully started
        this.context.addFrameworkListener(new FrameworkListener()
	        {
				public void frameworkEvent(FrameworkEvent evt) 
				{
					if (evt.getType() == FrameworkEvent.STARTED)
					{
				           runSweeper();
					}
					else if (evt.getType() == FrameworkEvent.ERROR)
					{
						diag.debug(""Framework error, bundle: "" + evt.getBundle(), evt.getThrowable());
					}
				}
	        });
    }


We added the diag.debug when we started getting framework errors - that's what nailed the source of the NPE

The runSweeper method is very simple. This is a framework restart - so we are warm starting using previously cached and started bundles. The sweeper looks for our transient bundles and cleans them out. They used START_TRANSIENT in the last run of the framework, this time around they only reach an INSTALLED state on startup.

    protected void runSweeper() 
    {
		// TODO Auto-generated method stub
    	for (Bundle bundle : this.context.getBundles())
    	{
    		try
    		{
	    		if (bundle.getSymbolicName().startsWith(VtLibrary.TRANSIENT_PREFIX) &&
	    		    bundle.getState() == Bundle.INSTALLED)
	    		{
	    			diag.debug(""Removing transient bundle: "" + bundle.toString());
	    			bundle.uninstall();
	    		}
    		}
    		catch (BundleException be)
    		{
                app.error(""Watchdog: sweeper error removing transient bundle: "" + bundle.getSymbolicName());    			
    		}
    	}
	}

Not really sure what the trigger for m_content being null at uninstall time - whether it's to do with the uninstall() being called from inside the event handle, or whether some facet of the framework restart has left m_content null.



","15/Oct/11 20:51;rickhall;I created a bundle like this:

public class Activator implements BundleActivator
{
    public void start(final BundleContext bc)
    {
        bc.addFrameworkListener(new FrameworkListener() {
            public void frameworkEvent(FrameworkEvent event)
            {
                if (event.getType() == FrameworkEvent.STARTED)
                {
                    for (Bundle b : bc.getBundles())
                    {
                        if ((b.getBundleId() != 0)
                            && (b != bc.getBundle())
                            && !b.getSymbolicName().startsWith(""org.apache.felix.gogo""))
                        {
                            try
                            {
                                b.uninstall();
                            }
                            catch (Exception ex)
                            {
                                System.out.println(""+++ Uninstall error: "" + ex);
                            }
                        }
                    }
                }
            }
        });
    }

    public void stop(BundleContext bc)
    {
    }
}

This was working for me, it was correctly deleting any non-shell bundles on framework restart. Perhaps there is something else I need to do to recreate. Perhaps you could see if my code above gives you an error too. Thanks.",17/Oct/11 05:51;walkerr;Sounds like there must be some other obscure factor at work here. Will try and assess what else is different in our setup and see if I can recreate with your bundle above.,"17/Oct/11 08:17;karlpauls;Richard, did you test with the current trunk? Rob commited a quick fix to it so if you are trying to reproduce you'd need to test against a revision before his commit ...","17/Oct/11 08:42;walkerr;Now that would be quite funny ... but I have an odd sense of humour ;)

There are 2 aspects I wonder if could be different in our setup.

* Our sweeper bundle runs at a start level of 2. The bundles being uninstalled have a start level of 1, but, they used START_TRANSIENT in the previous framework start. On the restart, they never get beyond a start state of INSTALLED due do the transient start option.

* The original JAR from which these bundles were started was a temporary file and will not be accessible on restarted (it's been deleted). The cached JAR and settings are of course still present. I don't recall any OSGi rule that says the original location/file that a bundle was installed from has to always be available, but maybe I forgot this?

- Rob
","17/Oct/11 14:09;rickhall;Yeah, I think Karl is correct. I'll look into it again later, thanks.","17/Oct/11 14:49;rickhall;I'm still not able to recreate, so I guess we'll have to try to recreate the exact scenario. If you can come up with something, let me know. Otherwise, I'll tinker around with it later and see if I can come up with something.","17/Oct/11 19:42;walkerr;Might take me a couple of days to get to it but will see if I can figure what sequence of start, restart and uninstall are needed to trigger this every time.","11/Nov/11 07:56;rickhall;Rob, I'm still waiting on you to help me recreate this situation...","11/Nov/11 08:16;walkerr;Yep, apols, got caught up with a ton of work on our next release so hadn't managed to get an isolated environment that recreates this yet. Still on my todo list, will update when I have.","11/Nov/11 09:53;walkerr;Struggling to recreate in a simplified form. I don't think it's as simple as just the uninstall inside the handler for the framework STARTED event.

I think it has something related to package admin - looking at the exception trace again, the log message I have after the uninstall has already been output. The Null pointer exception looks to happen asynchronously soon after:

===
11-11-11 10:35:39 DEBUG - Removing transient bundle: com.ascert.transient.vt.lib.lib_4047819872618789.jar [36]
11-11-11 10:35:39 DEBUG - Framework error, bundle: com.ascert.transient.vt.lib.lib_4047819872618789.jar [36]
java.lang.NullPointerException
        at org.apache.felix.framework.BundleRevisionImpl.close(BundleRevisionImpl.java:642)
        at org.apache.felix.framework.BundleImpl.closeRevisions(BundleImpl.java:154)
        at org.apache.felix.framework.BundleImpl.closeAndDelete(BundleImpl.java:138)
        at org.apache.felix.framework.Felix$RefreshHelper.refreshOrRemove(Felix.java:4640)
        at org.apache.felix.framework.Felix.refreshPackages(Felix.java:3952)
        at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:172)
        at java.lang.Thread.run(Thread.java:662)
===

My cut down example still has the same package refresh code in, but as yet isn't tripping the issue. 

Will continue trying to recreate","11/Nov/11 11:02;walkerr;Will run out of time to look further into this one shortly. Summary at this stage:

* the NPE happens every time in our own application setup
* the trigger seems to be to do with the uninstall of bundles started as transient from previous runs of the framework
* the exception itself seems to come out of a package refresh, which is triggered by the same bundle as we do the uninstall from
* it doesn't happen on a simple setup with just a few bundles - our application takes 3 to 5s to startup, and has around 48 bundles - implying maybe timing or complexity of bundle inter wiring could be a factor","11/Nov/11 11:25;walkerr;Just as I was about to give up - I think I got it!

Adding 1 more bundle to the startup set seemed to trigger it (http)

This is the bundle set I load:

===
felix.auto.install.1=""${bundle.root}/lib/ext/osgi.compendium.jar""

org.osgi.framework.startlevel.beginning=3

felix.auto.start.1=""${bundle.root}/lib/ext/felix.log.jar""

felix.auto.start.2=""${bundle.root}/lib/ext/httpjetty.jar"" \
                   ""${bundle.root}/lib/vt/watchdog.jar""

felix.auto.start.3=""${bundle.root}/lib/ext/shell.jar"" \
                   ""${bundle.root}/lib/ext/shelltui.jar""

# we'll start this transient so we have something to clean up
test.bundle=file:c:/mnt/data/vtmp/lib/shell.gui.jar
===

All the above bundles are standard from felix SVN, except my watchdog bundle. Will attach source for that.


Steps I take are:

1 - start cold with the above bundle set

2 -  from shell TUI start the shell.gui.jar transient (my activator code looks for this symbolic name on restart) e.g.

     -> install file:c:/mnt/data/vtmp/lib/shell.gui.jar
     Bundle ID: 7
     -> start -t 7

3 - kill the framework (I used Ctrl-C in fact, rather than clean shutdown)

4 - start the framework warm this time. NPE occurs after the auto uninstall of the shell GUI jar:

     C:\mnt\Data\runvt>vtmp
     Removing transient bundle: org.apache.felix.shell.gui [7]
     -> Framework error, bundle: org.apache.felix.shell.gui [7]
     java.lang.NullPointerException
             at org.apache.felix.framework.BundleRevisionImpl.close(BundleRevisionImpl.java:642)
             at org.apache.felix.framework.BundleImpl.closeRevisions(BundleImpl.java:154)
             at org.apache.felix.framework.BundleImpl.closeAndDelete(BundleImpl.java:138)
             at org.apache.felix.framework.Felix$RefreshHelper.refreshOrRemove(Felix.java:4640)
             at org.apache.felix.framework.Felix.refreshPackages(Felix.java:3952)
             at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:172)
             at java.lang.Thread.run(Thread.java:662)



===

Remember to comment out the workaround checked in to SVN to ensure the NPE appears:

    synchronized void close()
    {
        try
        {
            resolve(null);
        }
        catch (Exception ex)
        {
            ((BundleImpl) m_bundle).getFramework().getLogger().log(
                Logger.LOG_ERROR, ""Error releasing revision: "" + ex.getMessage(), ex);
        }
        
        //if (m_content != null)
        //{
            m_content.close();
        //}
        
        m_content = null;
        for (int i = 0; (m_contentPath != null) && (i < m_contentPath.size()); i++)
        {
            m_contentPath.get(i).close();
        }
        m_contentPath = null;
    }

","13/Nov/11 08:11;rickhall;Well, I was hopeful. I recreated the scenario as faithfully as I could, but it still works properly for me (and I remembered to comment out the null check).

Not sure what is going on. Maybe it is related to platform. To rule everything else out, could you create a self-contained zip of the exact scenario that can reproduce the situation for you and attach it here? Then I will try to use that exactly and see what I see.

If that doesn't work, then we'll have to make sure we are testing on the same platform (I'm on a Mac using Java 6) and go from there.","14/Nov/11 05:35;walkerr;That's a shame. I'll need to try and create a version my side that doesn't use our custom launcher, which is a bit too involved to make for a simple self contained example. Travelling with work the next week but will have a look when I get back.","14/Nov/11 05:36;walkerr;I should have added, we are Windows 7 and also Java 6, so I doubt there should be too many differences.","20/Nov/11 19:55;rickhall;Rob, I've reverted the patch for now, since it covers up the real issue. I'd rather have people suffer the exception so we might find the real solution quicker. You can always reapply the workaround after the 4.0.2 release or locally if you want. Otherwise, continue to help me reproduce it so I can fix it. Thanks.","02/Dec/11 08:18;walkerr;Battling to recreate this one in an isolated environment.

Happens every time on a warm start of our application, but can't seem to isolate the combination of bundles & bindings that trigger it.","02/Dec/11 09:37;walkerr;Yay! 

Finally nailed the recreation part. What triggers it is the refreshPackages call in the Activator sample code above. That only happens for a bundle with no exports, which wasn't the case for shell.gui. Swapping to an alternate bundle for the start -t and i can now recreate. Will tidy up my full example and post just now","02/Dec/11 09:39;rickhall;Good news, thanks for figuring it out.",02/Dec/11 09:58;walkerr;Worked example for recreating,"02/Dec/11 10:04;walkerr;Well - I've only figured how to recreate it, not actually fix the underlying cause. Baby steps ;)

Have attached a ZIP with the worked example. Afraid it's a Windows BAT file, should be hard to alter for .SH though.

I've set it up so that only the custom bundles are present (including the original example). The felix standard bundles load from the SVN tree to save upload, and also make it easier to retest when fixed. Just alter the following env var to set where felix is rooted:

set FELIX_HOME=C:/mnt/MiscProjs/felix


First you need a cold run to get things going:

   >go clean

Initial bundles will load, then a few seconds later the gui plugin will get loaded (that's really the only purpose of my main.Main class now - to autoload this to make recreating less typing). My output trace looks as follows:

===
C:\mnt\tmp\Felix3160>go clean

C:\mnt\tmp\Felix3160>set EXAMPLE_HOME=C:\mnt\tmp\Felix3160\/.

C:\mnt\tmp\Felix3160>set FELIX_HOME=C:/mnt/MiscProjs/felix

C:\mnt\tmp\Felix3160>set CLEAN=none

C:\mnt\tmp\Felix3160>if ""clean"" == ""clean"" set CLEAN=onFirstInit

C:\mnt\tmp\Felix3160>""C:\Program Files (x86)\Java\jdk1.6.0_27\bin\java"" -Dfelix.home=C:/mnt/MiscProjs/felix -Dexample.home=""C:\mnt\t
mp\Felix3160\/.""  -Dclean=onFirstInit -Dconfig=""C:\mnt\tmp\Felix3160\/./conf/config.properties"" -cp C:/mnt/MiscProjs/felix/main/targ
et/org.apache.felix.main-4.1.0-SNAPSHOT.jar;C:\mnt\tmp\Felix3160\/./lib/main.jar main.Main
initializeAdmin: org.apache.felix.framework.PackageAdminImpl@b8f82d
bundleChanged: watchdog [4]
-> bundleChanged: org.osgi.service.obr [5]
bundleChanged: org.osgi.service.obr [5]
bundleChanged: org.apache.felix.shell [6]
bundleChanged: org.apache.felix.shell.tui [1]
bundleChanged: org.apache.felix.shell.tui [1]
bundleChanged: org.apache.felix.shell.gui [2]
bundleChanged: org.apache.felix.shell.gui [2]
bundleChanged: org.apache.felix.framework [0]
bundleChanged: org.apache.felix.shell.gui.plugin [9]
bundleChanged: org.apache.felix.shell.gui.plugin [9]
bundleChanged: org.apache.felix.shell.gui.plugin [9]
===

At this stage Ctrl-C exit. The restart ""warm""

>go

It seems to be the refreshPackages call that triggers the NPE - which as above, only happens if the auto uninstalled bundle had no exports

My output trace from the warm start:

===
C:\mnt\tmp\Felix3160>go

C:\mnt\tmp\Felix3160>set EXAMPLE_HOME=C:\mnt\tmp\Felix3160\/.

C:\mnt\tmp\Felix3160>set FELIX_HOME=C:/mnt/MiscProjs/felix

C:\mnt\tmp\Felix3160>set CLEAN=none

C:\mnt\tmp\Felix3160>if """" == ""clean"" set CLEAN=onFirstInit

C:\mnt\tmp\Felix3160>""C:\Program Files (x86)\Java\jdk1.6.0_27\bin\java"" -Dfelix.home=C:/mnt/MiscProjs/felix -Dexample.home=""C:\mnt\t
mp\Felix3160\/.""  -Dclean=none -Dconfig=""C:\mnt\tmp\Felix3160\/./conf/config.properties"" -cp C:/mnt/MiscProjs/felix/main/target/org.
apache.felix.main-4.1.0-SNAPSHOT.jar;C:\mnt\tmp\Felix3160\/./lib/main.jar main.Main
initializeAdmin: org.apache.felix.framework.PackageAdminImpl@b8f82d
bundleChanged: watchdog [4]
bundleChanged: org.osgi.service.obr [5]
bundleChanged: org.osgi.service.obr [5]
bundleChanged: org.apache.felix.shell [6]
bundleChanged: org.apache.felix.shell.tui [1]
bundleChanged: org.apache.felix.shell.tui [1]
bundleChanged: org.apache.felix.shell.gui [2]
-> bundleChanged: org.apache.felix.shell.gui [2]
bundleChanged: org.apache.felix.framework [0]
Removing transient bundle: org.apache.felix.shell.gui.plugin [9]
bundleChanged: org.apache.felix.shell.gui.plugin [9]
bundleChanged: org.apache.felix.shell.gui.plugin [9]
refresh: org.apache.felix.shell.gui.plugin [9]
Framework error, bundle: org.apache.felix.shell.gui.plugin [9]
java.lang.NullPointerException
        at org.apache.felix.framework.BundleRevisionImpl.close(BundleRevisionImpl.java:639)
        at org.apache.felix.framework.BundleImpl.closeRevisions(BundleImpl.java:154)
        at org.apache.felix.framework.BundleImpl.closeAndDelete(BundleImpl.java:138)
        at org.apache.felix.framework.Felix$RefreshHelper.refreshOrRemove(Felix.java:4648)
        at org.apache.felix.framework.Felix.refreshPackages(Felix.java:3960)
        at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:172)
        at java.lang.Thread.run(Thread.java:662)
===






","03/Dec/11 07:19;rickhall;I was able to recreate and I've determined what is happening.

Basically, the framework auto-refreshes the bundle when you do an uninstall (since no one depends on it), then your worker explicitly refreshes the uninstalled bundle once it receives the UNINSTALLED event, but at this time the bundle has already been refreshed and is now stale. That's why the content is already null, since we end up refreshing a stale bundle.

During the refactoring for the the R4.3 API, we must have lost a check somewhere that avoided this situation. I believe the proper thing to do here is to just ignore stale bundles when refreshing. I'll investigate whether this is the correct behavior and, if so, will implement a fix.","03/Dec/11 07:37;rickhall;I've committed a patch that turns such an occurrence into a no-op, assuming for now that this is the right thing to do. Please check that the trunk framework fixes the issue for you. Thanks for your help.","05/Dec/11 06:45;walkerr;Thanks for the patch. Has fixed the NPE on our startup, good news as it means we can move back to trunk version.
Let me know if I should close the issue, or if you'd rather leave open until you've had a chance to investigate correct behaviour.",05/Dec/11 06:59;rickhall;Leave it open for now. I'll close it once I'm certain. Thanks for verifying the fix.,16/Jun/12 19:30;rickhall;I guess this is fine. I'm closing it as fixed.,,,,,,,,,,,,,
Filter parameter is ignored at getServiceReferences,FELIX-3150,12526082,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,lgalfaso,lgalfaso,06/Oct/11 17:28,16/Oct/11 00:38,14/Mar/19 02:48,10/Oct/11 15:58,framework-4.0.0,,,,,,framework-4.0.1,,,,,,,Framework,,,,,,0,,,,,,"The method
public <S> Collection<ServiceReference<S>> BundleContext::getServiceReferences(Class<S> clazz, String filter)

is ignoring the filter parameter. Looking at BundleContextImpl code, it looks like that is the case

   public <S> Collection<ServiceReference<S>> getServiceReferences(
       Class<S> clazz, String filter)
       throws InvalidSyntaxException
   {
       ServiceReference<S>[] refs =
           (ServiceReference<S>[]) getServiceReferences(clazz.getName(), null);   /// The filter param should be here instead of the null.
       return (refs == null)
           ? Collections.EMPTY_LIST
           : (Collection<ServiceReference<S>>) Arrays.asList(refs);
   }

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-10 15:58:42.023,,,no_permission,,,,,,,,,,,,49651,,,Mon Oct 10 15:58:42 UTC 2011,,,,,,0|i1aulj:,271423,,,,,,,,"10/Oct/11 15:58;rickhall;I committed a patch to pass the filter argument to the delegated method. We'll start a 4.0.1 release shortly. Thanks for catching this, please close if satisfied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VerifyError on Java 7,FELIX-3145,12525635,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,04/Oct/11 08:44,02/May/13 02:30,14/Mar/19 02:48,14/Nov/11 10:45,,,,,,,ipojo-manipulator-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"The manipulator must use a more recent version of ASM to avoid the following issue:
java.lang.VerifyError: Expecting a stackmap frame at branch target 5 in method acme.world.EmptyHelloNonImmediate._setInstanceManager(Lorg/apache/felix/ipojo/InstanceManager;)V at offset 1

","java 1.7.0
ant 1.8.2
felix 3.2.2
ipojo 1.6.0 1.6.2 1.8.0
bnd-task : bnd-0.0.401.jar
Ubuntu Linux ",,,,,,,,,,,,,FELIX-3568,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-27 22:22:49.536,,,no_permission,,,,,,,,,,,,44227,,,Wed Nov 30 17:04:01 UTC 2011,,,,,,0|i0vutr:,183967,,,,,,,,"14/Nov/11 09:53;clement.escoffier;There is two issues:
* ASM must be updated
* the manipulator must compute the frames

Running with  -XX:-UseSplitVerifier makes it works.","14/Nov/11 10:45;clement.escoffier;Fixed in trunk.

The new manipulator and the ant tasks are also deployed to the Maven apache.snapshots repository (https://repository.apache.org/content/repositories/snapshots/org/apache/felix/)

","27/Nov/11 22:22;calmant;For information, the modification done in revision 1201650 creates build problems in the iPOJO Nature plug-in for Eclipse : ASM doesn't find the classes in dependencies during manipulation anymore.

After tests, it seems that the problem comes from the ClassWriter.COMPUTE_FRAMES flag.

I'm currently using a specific version of the Manipulator, without this flag.
Is there any additional work to do before calling the manipulator, since this revision ?","30/Nov/11 16:34;clement.escoffier;Which version of ASM are you using ? 
To fix this issue, I've also bump the ASM version.","30/Nov/11 17:04;calmant;I'm using the org.objectweb.asm bundle version 3.3.1, available in the standard Eclipse 3.7.

As it's a class loading problem, due to the ASM way to work with COMPUTE_FRAMES, I think I'll have to provide a mini-ClassLoader that could look into dependencies output folders, JAR dependencies, etc.
I'm open to any other suggestions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Capabilities from resolved singleton bundles are not indexed correctly,FELIX-3137,12525078,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,rickhall,rickhall,28/Sep/11 16:35,28/Sep/11 17:07,14/Mar/19 02:48,28/Sep/11 17:07,framework-4.0.0,,,,,,framework-4.0.1,,,,,,,Framework,Specification compliance,,,,,0,,,,,,"Singleton bundle selection happens at the beginning of each resolve operation, at which point the highest version singleton is selected for each symbolic name grouping and the associated capabilities are indexed and made available in the resolver state. This works correctly when all bundles are unresolved; however, there is a bug when a singleton is resolved before a dependent bundle. In that case, the resolved singleton's capabilities are de-indexed and are never indexed again. The capabilities for a resolved singleton should not be de-indexed, since it has been selected and its capabilities should be available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,36766,,,Wed Sep 28 17:07:09 UTC 2011,,,,,,0|i1aunb:,271431,,,,,,,,28/Sep/11 17:07;rickhall;Committed patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endless loop: JavaClassDescriptorManager.getJavaClassDescription(),FELIX-3136,12525044,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,dkuffner,dkuffner,28/Sep/11 12:07,12/Mar/14 08:55,14/Mar/19 02:48,28/Sep/11 13:38,maven-scr-plugin-1.7.2,scr ant task 1.1.2,scr generator 1.1.2,,,,maven-scr-plugin-1.7.4,scr ant task 1.1.4,scr generator 1.1.4,,,,,SCR Tooling,,,,,,0,,,,,,"I try to use the Felix SCR generator library in a intellij plugin. I
created subclass the JavaClassDescriptorManager to return the sources
for the current build module. I have more or less copy cat the code
form the ANT SCR. It seems like that the JavaClassDescriptorManager.getJavaClassDescription method
will go into a endless loop if I return a source file which doesn't have a Component annotation. 

The problem seems to be in the while loop of the getJavaClassDescription method. The index variable will not increased. 


398  while ( result == null && index < javaClasses.length )
399            {
400                final JavaClass javaClass = javaClasses[index];
401                if ( javaClass.getFullyQualifiedName().equals( className ) )
402                {

    // <SNIP>   NO loop break condition in case javaClass is not annotated.

424                }
425                else
426                {
427                    index++;
428                }
429            }


I think by increasing the index always would resolve the bug.

Addtional Information: 
parse JavaDoc tags disabled

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-28 13:38:44.724,,,no_permission,,,,,,,,,,,,36592,,,Wed Sep 28 13:38:44 UTC 2011,,,,,,0|i1aunj:,271432,,,,,,,,"28/Sep/11 13:38;cziegeler;Many thanks for reporting this Daniel!

I fixed the problem in revision 1176879 - a possible workaround for you is to turn on parseJavadocs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong default HTTPS port used (433),FELIX-3134,12524804,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,27/Sep/11 06:54,28/Sep/13 17:40,14/Mar/19 02:48,27/Sep/11 06:56,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"The Jetty based implementation of the HTTP Service uses port 433 as the default port for HTTPS. This is problematic for non-root situations on *nix platforms (server ports <1024 are not allowed for non-root users) and is not the standard HTTPS port (which is 443).

We should change the default to be 8443 -- which goes along the lines of using 8080 as default for the HTTP port.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,17157,,,Tue Sep 27 06:56:26 UTC 2011,,,,,,0|i0vutj:,183966,,,,,,,,27/Sep/11 06:56;fmeschbe;Fixed in Rev. 1176234 -- using 8443 instead of 433 now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extensions not properly supported,FELIX-3132,12524575,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,25/Sep/11 18:37,23/Nov/12 06:54,14/Mar/19 02:48,25/Sep/11 19:06,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"Requests to the web console which have an extension are not always supported. For example to request the information on all bundles in JSON format by requesting /system/console/bundles.json does not work and results in a 404/NOT FOUND status.

The problem lies in the OSGiManager.getConsolePlugin(String) method, which just compares the label after the web console root URL against the labels of the registered plugins. This method should -- in case of no match -- check for extensions to cut off.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,3441,,,Fri Nov 23 06:54:45 UTC 2012,,,,,,0|i0rfpj:,158188,,,,,,,,25/Sep/11 19:06;fmeschbe;Resolved in Rev. 1175527 by checking for dots in the label if the label is not registered as a plugin,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nested composites throws StackOverflowError on instantiation,FELIX-3130,12524478,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,tsouza,tsouza,23/Sep/11 21:46,14/May/12 14:59,14/Mar/19 02:48,27/Sep/11 05:25,iPOJO-1.8.0,,,,,,ipojo-composite-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"The following metadata.xml describes a composite with another nested composite. Instantiating ""composite-external"" throws a StackOverflowError 

<?xml version=""1.0"" encoding=""UTF-8""?>
<ipojo xmlns=""org.apache.felix.ipojo"" xmlns:c=""org.apache.felix.ipojo.composite"">

	<component name=""comp-a"" classname=""test.ComponentAImpl"" />	
	
	<c:composite name=""composite-internal"">
		<instance component=""comp-a"" />
	</c:composite>
	
	<c:composite name=""composite-external"">
		<instance component=""composite-internal"" />
	</c:composite>
	
</ipojo>",,,,,,,,,,,,,,,,,,,,23/Sep/11 21:47;tsouza;stackoverflow.txt;https://issues.apache.org/jira/secure/attachment/12496329/stackoverflow.txt,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-25 14:31:58.941,,,no_permission,,,,,,,,,,,,3222,,,Mon May 14 14:59:08 UTC 2012,,,,,,0|i1aunr:,271433,,,,,,,,25/Sep/11 14:31;clement.escoffier;Your description looks correct. Could you tell me what 'comp-a' is doing (just the description).,26/Sep/11 13:48;clement.escoffier;I've reproduced the issue.,"26/Sep/11 17:08;tsouza;Actually... it's doing nothing, it's a simple class just like

public class ComponentAImpl {}","27/Sep/11 05:25;clement.escoffier;Fixed in trunk.

The composite was trying to instantiate itself... A snapshot version will be available soon from apache-snapshots.",14/May/12 14:59;clement.escoffier;iPOJO Compiste 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure embedded Jetty sends Date header,FELIX-3127,12524325,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,22/Sep/11 19:26,28/Sep/13 17:40,14/Mar/19 02:48,22/Sep/11 19:31,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"Interestingely embedded Jetty defaults to not sending the Date header (see http://jira.codehaus.org/browse/JETTY-1137)

We should just fix this by calling Server.setSendDateHeader(true) after creating the server instance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55877,,,Thu Sep 22 19:31:58 UTC 2011,,,,,,0|i0vupj:,183948,,,,,,,,22/Sep/11 19:31;fmeschbe;Fixed in Rev. 1174336.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR activates a service component while the containing bundle is stopping.,FELIX-3126,12524252,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,sorenp,sorenp,22/Sep/11 08:29,20/Nov/12 10:58,14/Mar/19 02:48,11/Oct/11 18:23, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I've got the following setup:

Bundle 1: Implements a pattern similar to the extender pattern. A bundle tracker monitors bundles containing a certain configuration entry. Each time a bundle with the coniguration entry enters or leaves the ACTIVE state, a service of the interface ""com.example.bundle1.Bundle1Service"" is unregistered and a new service with the same interface is re-registered.

Bundle 2: Has an immediate service component with the following configuration:

<component name=""Bundle2Component"" immediate=""true"" xmlns=""http://www.osgi.org/xmlns/scr/v1.1.0"">
	
	<implementation class=""com.example.bundle2.TestComponent"" />

	<service>
		<provide interface=""java.lang.Object"" />
	</service>

	<reference 
		name=""bundle1service"" 
		interface=""com.example.bundle1.Bundle1Service""
		cardinality=""1..1"" 
		policy=""static"" 
		bind=""setBundle1Service"" />

</component>

Situation: Both bundles have been started. The service component from bundle 2 is active and the reference is bound to the current Bundle1Service exported from bundle 1.

Now, when i stop bundle 2 the following occur:

1. The state of bundle 2 is changed to STOPPING
2. The state change is discovered by the service tracker in bundle 1 which causes it to unregister the Bundle1Service and then register a a new Bundle1Service.
3. The SCR discovers that the bundle1service reference of the component has become unsatisfied and deactivates the component.
4. The SCR discovers that the bundle1service reference of the component has become satisfied (with a new service) and activates the component.
5. The SCR tries to export the newly activated component as a service, but fails since the bundle is stopping.

The problem seems to be that SCR has not discovered that the bundle is STOPPING and disabled the component. A simple fix might be to check whether to disable the component based on bundle status before activating a new instance of the component.","FELIX-3.2.2, SCR-1.6.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-11 18:23:20.932,,,no_permission,,,,,,,,,,,,55878,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0l49j:,121341,,,,,,,,"11/Oct/11 18:23;fmeschbe;Committed a fix in Rev. 1181999 which prevents the component from being enabled or activated while the bundle is being stopped.

Can you please check, whether this helps you use case ? Thanks.","11/Oct/11 18:23;fmeschbe;Considering this issue fixed. If it ain't so, we can still reopen.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add back the manifest header indicating the provided service,FELIX-3121,12523718,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,20/Sep/11 13:48,18/Sep/12 20:06,14/Mar/19 02:48,20/Sep/11 15:10,eventadmin-1.2.14,,,,,,eventadmin-1.3.0,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55883,,,2011-09-20 13:48:38.0,,,,,,0|i1aup3:,271439,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parser check for empty strings is wrong,FELIX-3119,12523452,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,djencks,djencks,17/Sep/11 23:24,17/Mar/15 06:50,14/Mar/19 02:48,21/Sep/11 15:51,utils-1.1.0,,,,,,utils-1.1.2,,,,,,,Utils,,,,,,0,,,,,,"The parser skips empty strings but not whitespace, although it trims non-empty strings.  This is obviously not quite right.",,,,,,,,,,,,,,,,,,,,21/Sep/11 15:45;djencks;FELIX-3119-2.diff;https://issues.apache.org/jira/secure/attachment/12495385/FELIX-3119-2.diff,17/Sep/11 23:26;djencks;FELIX-3119.diff;https://issues.apache.org/jira/secure/attachment/12494948/FELIX-3119.diff,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-09-19 19:00:54.87,,,no_permission,,,,,,,,,,,,55885,,,Wed Sep 21 15:51:57 UTC 2011,,,,,,0|i0vuon:,183944,,,,,,,,17/Sep/11 23:26;djencks;The obvious fix for the problem.,"19/Sep/11 19:00;rickhall;I've applied this patch, please close is satisfied. Thanks.",20/Sep/11 23:03;djencks;Thanks!,"21/Sep/11 15:45;djencks;I forgot to include the bundlerepository change to actually use the new code in the snapshot util :-(

--- bundlerepository/pom.xml    (revision 1173726)
+++ bundlerepository/pom.xml    (working copy)
@@ -38,7 +38,7 @@
     <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>org.apache.felix.utils</artifactId>
-      <version>1.1.0</version>
+      <version>1.1.1-SNAPSHOT</version>
       <optional>true</optional>
     </dependency>
     <dependency>",21/Sep/11 15:45;djencks;_use_ the fixed utils code,21/Sep/11 15:51;rickhall;Done. Please close if satisfied. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when not implementing interface that is defined with @Service,FELIX-3117,12523160,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,janvolck,janvolck,15/Sep/11 07:40,15/Nov/11 16:19,14/Mar/19 02:48,27/Sep/11 12:20,maven-scr-plugin-1.7.0,maven-scr-plugin-1.7.2,scr ant task 1.1.2,scr generator 1.1.2,,,maven-scr-plugin-1.7.4,scr ant task 1.1.4,scr generator 1.1.4,,,,,SCR Tooling,,,,,,1,,,,,,"REPO: 

1) Create a class like following
@Component
@Service({EventHandler.class})
public class HelloWorld {

}

2) Compile class with maven-scr-plugin.


EXPECTED:
A warning or error message that tells me that HelloWorld.class does not implement EventHandler interface.

ACTUAL:
[INFO] ------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] null
[INFO] ------------------------------------------------------------------------
[INFO] Trace
java.lang.NullPointerException
	at org.apache.felix.scrplugin.tags.cl.ClassLoaderJavaClassDescription.isA(ClassLoaderJavaClassDescription.java:245)
	at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.isA(QDoxJavaClassDescription.java:309)
	at org.apache.felix.scrplugin.om.Interface.validate(Interface.java:68)
	at org.apache.felix.scrplugin.om.Service.validate(Service.java:99)
	at org.apache.felix.scrplugin.om.Component.validate(Component.java:327)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:342)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:192)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-27 12:20:43.781,,,no_permission,,,,,,,,,,,,19036,,,Tue Sep 27 12:20:43 UTC 2011,,,,,,0|i1aupj:,271441,,,,,,,,"27/Sep/11 12:20;cziegeler;Thanks for reporting this. I'Ve fixed this in revision 1176353

This is considered an error, therefore the build fails with an error (instead of a warning)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Saving configuration shows ""AJAX error"" dialog",FELIX-3116,12523157,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,v_valchev,v_valchev,v_valchev,15/Sep/11 07:04,23/Nov/12 06:54,14/Mar/19 02:48,15/Sep/11 07:06,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"Sometimes, specially in Firefox when saving configuration a dialog is popped saying AJAX error, and then almost immediately the page is reloaded.

The problem is in the javascript. Reloading the page interrupts the AJAX call, and this is the reason why the error pops-up. The reload should be done in a safer manner, when the AJAX call is completed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 06:54:48.762,,,no_permission,,,,,,,,,,,,55887,,,Fri Nov 23 06:54:48 UTC 2012,,,,,,0|i0rfjz:,158163,,,,,,,,15/Sep/11 07:06;v_valchev;fixed in rev.1170981,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in multi-module Maven project,FELIX-3113,12522878,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,dpishchukhin,dpishchukhin,13/Sep/11 10:20,15/Nov/11 16:19,14/Mar/19 02:48,28/Sep/11 14:24,maven-scr-plugin-1.7.2,,,,,,maven-scr-plugin-1.7.4,scr ant task 1.1.4,scr generator 1.1.4,,,,,SCR Tooling,,,,,,0,,,,,,"Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.7.2:scr failed.
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution generate-scr-scrdescriptor of goal org.apache.felix:maven-scr-plugin:1.7.2:scr failed.
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:110)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        ... 19 more
Caused by: java.lang.NullPointerException
        at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:435)
        at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.getSuperClass(QDoxJavaClassDescription.java:62)
        at org.apache.felix.scrplugin.tags.JavaClassDescriptionInheritanceComparator.compare(JavaClassDescriptionInheritanceComparator.java:58)
        at org.apache.felix.scrplugin.tags.JavaClassDescriptionInheritanceComparator.compare(JavaClassDescriptionInheritanceComparator.java:40)
        at java.util.Arrays.mergeSort(Unknown Source)
        at java.util.Arrays.sort(Unknown Source)
        at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:235)
        at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:184)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        ... 20 more","Windows Vista, Java 6, Maven 3.0.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-27 12:03:36.91,,,no_permission,,,,,,,,,,,,19007,,,Wed Sep 28 14:24:57 UTC 2011,,,,,,0|i0vwi7:,184239,,,,,,,,"27/Sep/11 12:03;cziegeler;Hi,

can you please attach a sample project or give more information about the problem?","27/Sep/11 18:46;dpishchukhin;Unfortunately, I cannot attach any test project, because I've tested only on my real project. 

There is a multi-module Maven project. Almost all modules are OSGi bundles (bundle packaging + maven-bundle-plugin). I've tried to configure scr-plugin in my root pom for all submodules. It works fine if I build only one submodule (even non-OSGI - normal JAR packaging). When I've tried to build whole project I've got above exception in a normal-JAR submodule. ","28/Sep/11 14:24;cziegeler;I finally found it and fixed it in revision 1176892

Thanks for reporting!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default for felix.fileinstall.start.level documented incorrectly,FELIX-3112,12522753,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,gnt,cdolan,cdolan,12/Sep/11 15:15,17/Mar/15 07:00,14/Mar/19 02:48,16/Mar/12 10:07,fileinstall-3.1.10,,,,,,fileinstall-3.2.0,,,,,,,File Install,,,,,,0,,,,,,"On the page http://felix.apache.org/site/apache-felix-file-install.html the variable ""felix.fileinstall.start.level"" is documented with a default value of ""false"". In the jar OSGI-INF/metatype/metatype.xml I can see that the real default is ""0"". This should be corrected.

But on a more fundamental level, what is the real default start level? Clearly, these bundles are not started at level 0. Trial-and-error with Karaf shows that it's really startlevel=60. Where does that come from? Could someone please add that to the documentation? Or if Karaf is the source of the value of 60, could the docs simply say that the container chooses the default start level?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55889,,,Mon Sep 12 16:21:09 UTC 2011,,,,,,0|i0vvrb:,184118,,,,,,,,"12/Sep/11 16:21;cdolan;I just found out where my startlevel=60 default comes from: karaf.startlevel.bundle=60
So, I think the docs should simply say ""0 means to use the default startlevel of the OSGi container""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInstall sorts artifact url handlers in the wrong order so that the ranking does not work correctly,FELIX-3109,12522252,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,08/Sep/11 13:02,17/Mar/15 07:00,14/Mar/19 02:48,08/Sep/11 13:16,fileinstall-3.1.10,,,,,,fileinstall-3.2.0,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,40370,,,Thu Sep 08 13:16:02 UTC 2011,,,,,,0|i0b3on:,62709,,,,,,,,"08/Sep/11 13:16;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/FileInstall.java
Committed r1166675
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR doesn't cope when the DS xml is not encoded using the default platform encoding.,FELIX-3108,12521563,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,not,not,07/Sep/11 09:56,20/Nov/12 10:58,14/Mar/19 02:48,07/Sep/11 10:48, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"I've been trying to use felix SCR on z/OS (insane I know). The default platform encoding for z/OS is EBCDIC. When parsing my DS component xml I get the following exception in the log:

!STACK 0
org.xmlpull.v1.XmlPullParserException: unterminated entity ref (position:TEXT ÃŒ_%Â€ÃŽÃÃŠÃ‹Ã'?>Â'...@1:239 in java.io.BufferedReader@71fedaf) 
	at org.kxml2.io.KXmlParser.exception(Unknown Source)
	at org.kxml2.io.KXmlParser.error(Unknown Source)
	at org.kxml2.io.KXmlParser.pushEntity(Unknown Source)
	at org.kxml2.io.KXmlParser.pushText(Unknown Source)
	at org.kxml2.io.KXmlParser.nextImpl(Unknown Source)
	at org.kxml2.io.KXmlParser.next(Unknown Source)
	at org.apache.felix.scr.impl.parser.KXml2SAXParser.parseXML(KXml2SAXParser.java:62)
	at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:227)

The component.xml is UTF-8 encoded not EBCDIC. The DS spec 112.4.2 (page 310) says that the file is UTF-8 encoded so it should be able to parse it. I suspect the BundleComponentActivator creates an InputStreamReader and doesn't provide an encoding which is why I see this problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-07 10:42:51.726,,,no_permission,,,,,,,,,,,,55892,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0l49r:,121342,,,,,,,,"07/Sep/11 10:42;fmeschbe;Autsch, you are right. What a young-boy's bug ;-)

Thanks for reporting",07/Sep/11 10:48;fmeschbe;Fixed in Rev. 1166104,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup dependencies of org.apache.felix.http.cometd,FELIX-3102,12521389,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,fmeschbe,jsedding,jsedding,05/Sep/11 21:19,28/Sep/13 17:40,14/Mar/19 02:48,23/Sep/11 13:39,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"The cometd implementation from FELIX-1796 has several issues regarding the dependencies.

1. It inroduces a cyclic dependency between org.apache.felix.http.cometd and org.apache.felix.http.api. API imports org.cometd,which is exported by o.a.f.h.cometd and o.a.f.h.cometd imports o.a.f.h.api. The dependency on o.a.f.h.api is merely present because the CometdService interface has been added. I propose to move the CometdService interface into o.a.f.h.cometd instead. 

This is an API change, however the HTTP API bundle with CometdService has not been released yet, afaik, so this should not be an issue.

2. The cometd bundle's Export-Package directive looks as follows

    org.apache.felix.http.api;version=${pom.version},
    org.cometd;version=1.0.beta7,
    org.mortbay.*;-split-package:=merge-first,
    org.osgi.service.http,
    javax.servlet.*;version=2.5;-split-package:=merge-first

It should only export ""org.cometd;version=1.0.beta7"", as the org.mortbay package is an implementation detail and the other three packages should be provided by other bundles.

The attached patch fixes this, and cleans up the dependencies section.

A nice side-effect of these changes is that the cometd bundle can just be deployed as-is even with older versions of HTTP Service.",,,,,,,,,,,,,,,,,,,,05/Sep/11 21:58;jsedding;FELIX-3102.patch;https://issues.apache.org/jira/secure/attachment/12493072/FELIX-3102.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-23 11:48:31.608,,,no_permission,,,,,,,,,,,,55898,,,Fri Sep 23 13:39:31 UTC 2011,,,,,,0|i0vqmn:,183287,,,,,,,,05/Sep/11 21:20;jsedding;proposed patch,"22/Sep/11 11:34;jsedding;I'm setting this to blocker, because the attached patch reverts a change to HTTP Service API, which hasn't been released yet.

The intent is not necessarily to get this patch included in http-2.2.2, but I believe the API change should be reviewed before a 2.2.2 release.

Feel free to reduce the priority if this doesn't seem appropriate.",23/Sep/11 11:48;fmeschbe;Thanks for reporting. I agree with your assessment of this being a blocker.,23/Sep/11 13:39;fmeschbe;Thanks for supplying the patch. I have applied in Rev. 1174750.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iPOJO new manipulator crashes when using a custom reporter,FELIX-3098,12521066,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,calmant,calmant,01/Sep/11 14:43,04/Feb/13 12:34,14/Mar/19 02:48,04/Sep/11 07:53,ipojo-manipulator-1.8.2,,,,,,ipojo-manipulator-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"When using the constructor Pojoization(Reporter), the given reporter is not stored.

The bug is at : org.apache.felix.ipojo.manipulator.Pojoization@80 : class member and parameter have the same name.
A patch is attached.",,,,,,,,,,,,,,,,,,,,01/Sep/11 14:44;calmant;patch;https://issues.apache.org/jira/secure/attachment/12492605/patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-04 07:53:20.502,,,no_permission,,,,,,,,,,,,55902,,,Sun Sep 04 07:53:20 UTC 2011,,,,,,0|i0vuqf:,183952,,,,,,,,01/Sep/11 14:44;calmant;Corrected constructor,"04/Sep/11 07:53;clement.escoffier;I've applied the patch. The bug was introduce by me during my last refactoring. Thanks !
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocalRepository is not updated when bundles are,FELIX-3097,12520900,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,jkeeping,jkeeping,31/Aug/11 10:02,17/Mar/15 06:52,14/Mar/19 02:48,05/Mar/15 08:30,bundlerepository-1.6.6,,,,,,bundlerepository-2.0.4,,,,,,,Bundle Repository (OBR),,,,,,1,,,,,,The local repository should contain resources for currently installed bundles but these can be out of date if a bundle is updated because the listener only responds to INSTALLED and UNINSTALLED bundle events.  It should also handle UPDATED events.,,,,,,,,,,,,,,,,,,,,23/Oct/13 17:08;krieb;FELIX-3097-patch-01.diff;https://issues.apache.org/jira/secure/attachment/12609881/FELIX-3097-patch-01.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-22 13:02:13.371,,,no_permission,,,,,,,,,,,,55903,,,Thu Mar 05 08:30:48 UTC 2015,,,,,,0|i1auqn:,271446,,,,,,,,"22/Oct/13 13:02;krieb;Is there a recommended work-around for this issue?  It is mainly affecting our use of Resolver.getRequiredResources().  The current implementation of Resolver.resolve() will remove all bundles in the local repository from the required set.  However, due to this bug, the local repository never gets updated to reflect currently installed bundles, so the required set always contains the remote versions of the bundles.  This results in Resolver.getRequiredResources() returning resources that are already installed and deployed on the local system.",23/Oct/13 17:08;krieb;Patch that appears to address the issue.,"23/Oct/13 20:18;rickhall;This patch seems reasonable to me. I'm not sure why it wasn't done that way originally, since it does make sense that it should track all changes to the installed bundle set.

This sort of relates to FELIX-3566 too, since the actual state of the local repository will probably not be 100% correct after an update until a refresh is performed.",23/Oct/13 21:17;krieb;What is the estimate on when bundlerepository-1.6.8 will be released?  Just curious how long before we see the fix in a release version.,"05/Mar/15 08:30;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/LocalRepositoryImpl.java
Committed r1664256
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Could not add FrameworkListener from ServiceListener,FELIX-3096,12520878,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,rickhall,hipa,hipa,31/Aug/11 06:36,13/Sep/11 08:01,14/Mar/19 02:48,12/Sep/11 21:44,framework-3.2.2,,,,,,framework-4.0.0,,,,,,,,,,,,,0,,,,,,"It's now impossible to add a FrameworkListener from ServiceListener in 3.2.x, worked in 3.0.9. The code below hangs in addFrameworkListener when it tries to acquire a global lock on the framework bundle.

Framework framework = ...
framework.init();

final BundleContext ctx = framework.getBundleContext();
ctx.addServiceListener(new ServiceListener() {
    public void serviceChanged(ServiceEvent event) {
        if (...) {
            ctx.addFrameworkListener(new FrameworkListener() {
                public void frameworkEvent(FrameworkEvent event) {
                    System.out.println(event);
                }
            });
        }
    }
});

StartLevel sl = (StartLevel) ctx.getService(ctx.getServiceReference(StartLevel.class.getName()));

// Install bundles, set start level.
...

framework.start();
framework.waitForStop();
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-31 07:29:27.254,,,no_permission,,,,,,,,,,,,55904,,,Mon Sep 12 21:44:23 UTC 2011,,,,,,0|i0vwfr:,184228,,,,,,,,31/Aug/11 07:29;fmeschbe;You might want to check with the latest trunk build which has a fix for FELIX-3000 committed. That calls the listeners without holding a lock any more.,"31/Aug/11 18:49;rickhall;I think this issue is different than FELIX-3000. The system bundle lock is being held because it is in the middle of being started, but on the start level thread (which is how the framework ultimately starts up its bundles) the outer listener code is being invoked, which requires the system bundle's lock to add a listener.

Technically, this is correct. It is a perfect example of what not to do, block the incoming thread and then make a call back into the framework on another thread. Of course, this one happens due to how the framework starts up...perhaps one approach would be to not use the start level thread on the initial start up of the framework so the startup would all happen on the same thread and thus the lock could be reentered.

I'll have to think about it.","12/Sep/11 18:31;rickhall;After more investigation, I think I've come to a way to resolve this. Due to some unrelated event dispatching refactoring for R4.3, we might be able to allow listeners to be added without holding the bundle lock. I still need to investigate it a little more, but so far so good.","12/Sep/11 21:44;rickhall;It should be working now in trunk. We avoid holding the bundle lock for adding listeners by double checking if the bundle context is still valid before adding the listener, which is guaranteed to happen before a bundle's listeners are removed when it is stopped or fail if it happens after.

Please close this issue if satisfied, thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR project does not build on machines with empty M2 repository,FELIX-3093,12520537,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,29/Aug/11 08:35,20/Nov/12 10:58,14/Mar/19 02:48,29/Aug/11 08:39,scr-1.6.2,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"The SCR project uses the Pax TinyBundles 1.0.0 which in turn depends on BND 0.0.330, which is not available any more. Upgrading to TinyBundles 1.1.0 fixes this dependency issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55907,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i0l48n:,121337,,,,,,,,29/Aug/11 08:39;fmeschbe;Fixed in Rev. 1162677 upgrading to TinyBundles 1.1.0 and adapting to new TinyBundle API.,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR factory components ignore reference target filters,FELIX-3090,12520454,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,pderop,pderop,27/Aug/11 22:06,20/Nov/12 10:58,14/Mar/19 02:48,17/Feb/12 13:28, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"This issue is described in the following post:

http://www.mail-archive.com/users@felix.apache.org/msg10925.html

Basically, when a component is declaring a factory (in order to register a ComponentFactory in the registry), 
then any extra Reference' target filters are not taken into acount.
This is a problem because the ComponentFactory is registered in the registry even if some References are not satisfied.

Consider the following example (It uses the BND SCR annotations):

@Component(factory = ""AFactory"")
public class A {
    @Reference(name=""YDependency"", target = ""(name=Z)"")
    void bind(Y y) {
        System.out.println(""A.bind("" + y + "")"");
    }

    @Activate
    void start() {
        System.out.println(""A.start"");
    }
}

public interface Y {
}

@Component(properties = { ""name=ZZZZZ"" })
public class YImpl implements Y {
}

@Component
public class AFactory {

    @Reference(target = ""(component.factory=AFactory)"")
    void bind(ComponentFactory AFactory) {
        System.out.println(""AFactory.bind("" + AFactory + "")"");
        try {
            ComponentInstance ci = AFactory.newInstance(null);
            A a = (A) ci.getInstance();
            System.out.println(""Created "" + a);
        }
        catch (Throwable t) {
            t.printStackTrace();
        }
    }
}

Here, the ""YDependency"" Reference of the ""A"" component is not satisfied, but the ComponentFactory for the
""A"" component is somehow registered, and when the ""AFactory"" component catches it, then it get the following exception,
when trying to instantiate the ""A"" component instance:

org.osgi.service.component.ComponentException: Failed activating component
        at org.apache.felix.scr.impl.manager.ComponentFactoryImpl.newInstance(ComponentFactoryImpl.java:120)
        at test.scr.factory.AFactory.bind(AFactory.java:15)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:227)
        at org.apache.felix.scr.impl.helper.BaseMethod.access$1(BaseMethod.java:219)
        at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:591)
        at org.apache.felix.scr.impl.helper.BaseMethod$NotResolved.invoke(BaseMethod.java:548)
        at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:472)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1028)
        at org.apache.felix.scr.impl.manager.DependencyManager.bind(DependencyManager.java:944)
        at org.apache.felix.scr.impl.manager.DependencyManager.open(DependencyManager.java:868)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:200)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:118)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1013)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:333)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:157)
        at org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:313)
        at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:253)
        at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:274)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:192)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3879)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1850)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1192)
        at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:266)
        at java.lang.Thread.run(Thread.java:662)
",,,,,,,,,,,,,,,,,,,,15/Sep/11 08:25;pderop;test-scr-factory.tgz;https://issues.apache.org/jira/secure/attachment/12494585/test-scr-factory.tgz,29/Aug/11 22:08;pderop;test-scr-factory.tgz;https://issues.apache.org/jira/secure/attachment/12492149/test-scr-factory.tgz,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-08-29 06:48:48.442,,,no_permission,,,,,,,,,,,,55910,,,Tue Nov 20 10:58:17 UTC 2012,,,,,,0|i07h5b:,41544,,,,,,,,"27/Aug/11 22:20;pderop;It seems that the root cause of the problem comes from the ComponentFactoryImpl.getProperties() method,
which does not include the target properties of references in the component properties.

Because of that, when the AbstractComponentManager.verifyDependencyManagers method is invoked,
it then invoke the DependencyManager.setTargetFilter method with a Property object which does not include
the target properties of references ...

The following fix sounds to work: in the end of the ComponentFactoryImpl.getProperties() method, just add the following:

    public Dictionary getProperties()
    {
        ......

        // add target properties of references
        List depMetaData = getComponentMetadata().getDependencies();
        for ( Iterator di = depMetaData.iterator(); di.hasNext(); )
        {
            ReferenceMetadata rm = ( ReferenceMetadata ) di.next();
            if ( rm.getTarget() != null )
            {
                props.put( rm.getTargetPropertyName(), rm.getTarget() );
            }
        }
      
        return props;
    }

Felix, can you verify this fix ? thanks.","29/Aug/11 06:48;fmeschbe;Thanks for proposing the patch. While this may perfectly work, I think it is not entirely correct:

(1) The getProperties() method is used to set the service registration properties, which I would think are not part of the ComponentFactory service registration. Thus adding them might be wrong. On the other hand, they might not hurt.

(2) The bigger issue is, that this only gives you part of the rent: A call to the newInstance method may provide even more target properties and thus may cause the selection to become entirely different. Consider a case where a service is registered with name=""xyz"". The ComponentFactory is predefined with target filter name=""abc"". This causes the ComponentFactory to be unsatisifed and not registered. Yet the newInstance method might have been called with a target filter name=""xyz"" thus actually satisifying the reference - but since the default prevents satisfaction, the newInstance method will never be called ....

(3) Theoretically timing may be such that the required service may just be unregistered between the user of the ComponentFactory getting the ComponentFactory service and calling the newInstance method in which case this would be a failure, too. So regardless of whether we do analyze target filters for the ComponentFactory registration or not, a ComponentException may be thrown on newInstance.

Given the second (and to some degree the third) issue, I am reluctant to such a patch.","29/Aug/11 08:59;pderop;oops, sorry Felix, my bad ... and thanks for the explanation.



On Mon, Aug 29, 2011 at 8:49 AM, Felix Meschberger (JIRA)

","29/Aug/11 09:28;fmeschbe;No worry.

So I think we should just close this as won't fix.","29/Aug/11 12:37;kmart216;Is there a way to be notified when a instance would be satisfied.  Otherwise, it seems the factory property and target service referneces don't mix.","29/Aug/11 14:28;fmeschbe;""don't mix"": You are probably right. But you could make the reference optional, dynamic. In this case it would always be satisifed albeit maybe not bound. Once the service becomes available, the component could then bind (or could be notified with a bind method).","29/Aug/11 22:06;pderop;But isn't it difficult to define the reference as optional ?
I mean for instance, if the factory component has many required dependencies and also provides a service, 
then this service might be registered when another component invokes newInstance... 
So the registered service might be used while the required dependencies are not there.

Another point that is troubling me is that in the spec, chapter 112.5.5 (Factory Component), it is stated the following:

""SCR must register a Component Factory service as soon as the component factory
becomes satisfied. The component factory is satisfied when the following
conditions are all satisfied:
• The component is enabled.
• Using the component properties specified by the component
description, all the component’s references are satisfied. A reference is
satisfied when the reference specifies optional cardinality or there is at
least one target service for the reference""

So, I don't understand why the component factory is currently registered, even if a reference filter is not satisfied ?
For clarity, I have joined to this issue a maven sample code (sample.tgz), which illustrates what I'm talking about:

- I have made a factory component ""A"", which depends on service ""B"" with target filter ""(foo=B2)"".
- I then have ""AFactory"" which tracks the ""A"" ComponentFactory. 
This component will instantiate ""A"" when the component factory is injected.
- I then have two component ""B1"" which implements B(foo=B1), and ""B2"" which implements B(foo=B2).
Both B1 and B2 are disabled.

So, when running the framework, go the webconsole/component.
At this point, ""A"" and ""AFactory"" are both unsatisfied (because we don't have any B services).

Now, enable B1 -> this will trigger the A's component factory registration, and AFactory will then catch it and will invoke
newInstance. However, because A required B2 (not B1), then the newInstance will throw:

org.osgi.service.component.ComponentException: Failed activating component
        at org.apache.felix.scr.impl.manager.ComponentFactoryImpl.newInstance(ComponentFactoryImpl.java:120)
        at test.scr.factory.AFactory.bind(AFactory.java:17)
...

Finally; enable ""B2"" from webconsole: this will have no effect, and in the end, the ""AFactory"" won't ever be able to instantiate ""A"".

So, am I making sense with this ? or am I missing something else ?
Thanks for your help.",29/Aug/11 22:08;pderop;here is the sample code,"15/Sep/11 08:25;pderop;oops, Felix; it seems that I forgot to attach the sample code in the previous post; so, I'm reattaching it.
By the way, I simplified the sample code: now I have a component ""A"" which declares factory=""A"", and which also depends on the ""B"" service 
but with the filter ""(foo=bar)"". And I then have a ""BImpl"" service which implements B, but with the service properties ""foo=zoo"".
So, according to the specification, the ComponentFactory for ""A"" should not be registered, but it is, and I then run into the following exception:

AFactory bind(Component: test.scr.factory.A (0))
org.osgi.service.component.ComponentException: Failed activating component
        at org.apache.felix.scr.impl.manager.ComponentFactoryImpl.newInstance(ComponentFactoryImpl.java:120)
        at test.scr.factory.AFactory.bind(AFactory.java:15)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:227)
        at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:38)
        at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:591)
        at org.apache.felix.scr.impl.helper.BaseMethod$NotResolved.invoke(BaseMethod.java:548)
        at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:472)
        at org.apache.felix.scr.impl.manager.DependencyManager.invokeBindMethod(DependencyManager.java:1028)
        at org.apache.felix.scr.impl.manager.DependencyManager.bind(DependencyManager.java:944)
        at org.apache.felix.scr.impl.manager.DependencyManager.open(DependencyManager.java:868)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:200)
        at org.apache.felix.scr.impl.manager.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:118)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager$Unsatisfied.activate(AbstractComponentManager.java:1013)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:333)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:157)
        at org.apache.felix.scr.impl.config.ImmediateComponentHolder.enableComponents(ImmediateComponentHolder.java:313)
        at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:253)
        at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:274)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:192)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3879)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1850)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1192)
        at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:266)
        at java.lang.Thread.run(Thread.java:662)

Please notice that another dev post seems to also report the same problem:

http://www.mail-archive.com/dev@felix.apache.org/msg22899.html

... Felix, don't you think that this issue should be reopened ?

thanks
/Pierre
",15/Sep/11 08:25;pderop;attached the second sample code ...,"17/Feb/12 11:23;fmeschbe;Reopening this issue after reconsidering as of [1]:

(1) Default Target property values are provided by the developer by intent so they probably should be respected (The target properties should still not be used as registration properties as required by Section 112.5.5: ""The service properties of the Component Factory service must not include the component properties."").

(2) It is true that a Dictionary object provided to the newInstance method may define different target properties. In this case a the satisfaction criteria for the ComponentFactory service and the desired new instance are in fact different as required by the spec (section 112.5.5 Factory Componet)

[1] http://markmail.org/message/hjks7q2qzz3p6hwn","17/Feb/12 13:28;fmeschbe;Added target properties to the selection criteria for service dependencies when satisfying the factory component.

Also added a test for this

Done in Rev. 1245441",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A component without ServicePermissions cannot be registered as a service,FELIX-3089,12520334,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,yasuk,yasuk,27/Aug/11 06:42,12/Oct/11 06:52,14/Mar/19 02:48,29/Aug/11 07:07, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Given the following Component XML
<?xml version=""1.0"" encoding=""UTF-8""?>
<scr:component immediate=""true"" xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.1.0"">
  <implementation class=""BindingImpl"" />
  <reference
    bind=""bind""
    unbind=""unbind""
    policy=""dynamic""
    cardinality=""0..1""
    interface=""ServiceProvider""
  />
  <service>
    <provide interface=""Binding"" />
  </service>
</scr:component>

When this component's bundle does not have ServicePermission[ServiceProvider , GET], Binding is not registered as a service.
But I think that Binding can be registered.
Because the component's reference specifies optional cardinality.
(see OSGi Compendium R4.2
       112.3.2 Reference Cardinality, 112.9.1 Service Permissions)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-29 06:54:04.065,,,no_permission,,,,,,,,,,,,55911,,,Wed Oct 12 06:52:37 UTC 2011,,,,,,0|i1aurr:,271451,,,,,,,,"29/Aug/11 06:54;fmeschbe;Agreed. I think this is this piece of code verifying dependencies:

            if ( !dm.hasGetPermission() ) {
                // bundle has no service get permission
**             satisfied = false;
            } else if ( !dm.isSatisfied() ) {
                // bundle would have permission but there are not enough services
                satisfied = false;
            }

At ** we should probably assume satisfaction if the reference is optional.",29/Aug/11 07:07;fmeschbe;Fixed in Rev. 1162659 by accepting an optional reference to which no permission is granted as satisifed,"12/Oct/11 06:52;yasuk;Close issue, passed my tests using the revision. Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Given invalid value, but the property isn't invalid.",FELIX-3087,12520111,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,yasuk,yasuk,25/Aug/11 13:32,20/Nov/12 10:58,14/Mar/19 02:48,09/Oct/11 14:04, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Given the following XML, the value of the property will be invalid.
But this property is a valid property, with a value of char 'a'.

<?xml version=""1.0"" encoding=""UTF-8""?>
  <scr:component xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.1.0"">
    <implementation class=""DummyClass"" /> 
    <property name=""test.property.Character"" type=""Character"" value=""ab"" />
  </scr:component>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-02 09:40:14.674,,,no_permission,,,,,,,,,,,,49528,,,Tue Nov 20 10:58:16 UTC 2012,,,,,,0|i0l493:,121339,,,,,,,,"02/Sep/11 09:40;fmeschbe;I am unclear here, what the correct result would actually be ...

The spec states for the value attribute, that the Integer.valueOf method should be used to convert the string to a character. The implementation currently just takes the first character in the string as the character value... maybe we should bring this to the OSGi Dev List","07/Sep/11 07:36;yasuk;Thank you for your reply and posting this to the OSGi-Dev List. 

""ab"" is a String , not a Character. So I thought that this is invalid. 
But check the spec again, this may not be a bug.

I will follow a decision of the developers.","07/Sep/11 09:12;fmeschbe;According to the spec, the string value must be converted to a Character using Integer.parseInt() which is expected to fail in this context -- the current implementation is of course wrong by (a) not using Integer.parseInt() and (b) not failing.

References:
- https://mail.osgi.org/pipermail/osgi-dev/2011-September/003226.html
- https://www.osgi.org/members/bugzilla/show_bug.cgi?id=2104","09/Oct/11 13:54;fmeschbe;In Rev. 1180605:
* Fix wrong Character/Char type conversion
* add unit tests
* refactor value conversion to do it during validation, which allows to fail value conversion on a component-level instead of a descriptor file level",09/Oct/11 14:04;fmeschbe;This works and the issue can be resolved.,"12/Oct/11 07:31;yasuk;Thanks a lot. But Boolean.parseBoolean() is used in PropertyMetadata.java.
I think this method should not be used. (see FELIX-2749)
",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException in PropertyMetadata.setValues(),FELIX-3086,12520105,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,yasuk,yasuk,25/Aug/11 12:43,12/Oct/11 06:51,14/Mar/19 02:48,02/Sep/11 09:31, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"Given the following XML, the value of the property will be char []{ 'a', 'b'}.
But PropertyMetadata.setValues() throws IllegalArgumentException.

<?xml version=""1.0"" encoding=""UTF-8""?>
<scr:component xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.1.0"">
  <implementation class=""DummyClass"" />
  <property name=""char_array_property"" type=""Character"">
    a
    b
  </property>
</scr:component>

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-02 09:31:10.239,,,no_permission,,,,,,,,,,,,55913,,,Wed Oct 12 06:51:47 UTC 2011,,,,,,0|i1aus7:,271453,,,,,,,,"02/Sep/11 09:31;fmeschbe;Thanks for reporting the issue. This has in fact been a glitch while migrating to DS 1.1.

Fixed in Rev. 1164431","12/Oct/11 06:51;yasuk;Close issue, passed my tests using the revision. Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Importing/exporting ""."" should not be allowed",FELIX-3085,12520101,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,bahjat.salem,bahjat.salem,25/Aug/11 11:59,31/Aug/11 23:45,14/Mar/19 02:48,31/Aug/11 18:21,framework-3.2.2,,,,,,framework-4.0.0,,,,,,,Framework,,,,,,0,,,,,,"In the Equinox implementation of OSGi, importing and exporting the default package (""."") is allowed, whereas it fails to produce the expected results under Apache Felix.",,,,,,,,,,,,,,,,,,,,25/Aug/11 12:04;bahjat.salem;consumingbundle_1.0.0.201108221544.jar;https://issues.apache.org/jira/secure/attachment/12491622/consumingbundle_1.0.0.201108221544.jar,25/Aug/11 12:04;bahjat.salem;equinox-3.6.2.R36x_v20110210-result.txt;https://issues.apache.org/jira/secure/attachment/12491626/equinox-3.6.2.R36x_v20110210-result.txt,25/Aug/11 12:04;bahjat.salem;felix-3.2.2-result.txt;https://issues.apache.org/jira/secure/attachment/12491625/felix-3.2.2-result.txt,25/Aug/11 12:04;bahjat.salem;legacy_code_1.0.0.201108221544.jar;https://issues.apache.org/jira/secure/attachment/12491623/legacy_code_1.0.0.201108221544.jar,25/Aug/11 12:04;bahjat.salem;resourcebundle_1.0.0.201108221544.jar;https://issues.apache.org/jira/secure/attachment/12491624/resourcebundle_1.0.0.201108221544.jar,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2011-08-25 14:03:59.107,,,no_permission,,,,,,,,,,,,55914,,,Wed Aug 31 23:45:43 UTC 2011,,,,,,0|i1ausf:,271454,,,,,,,,"25/Aug/11 12:04;bahjat.salem;The three bundles used for the tests and their console outputs under Felix 3.2.2 and Equinox 3.6.2.R36x_v20110210 have been attached to this bug.

These bundles contain their own sources.","25/Aug/11 14:03;rickhall;The Felix framework does not support exporting/importing the default package. First, it is a non-spec feature. Second, it is completely meaningless in OSGi, since by its very nature the default package is a split package and OSGi does not support exporting/importing the default package. There is no way to verify whether you have the correct provider, nor the resulting consistency.","31/Aug/11 18:18;rickhall;The character ""."" has no meaning in the spec except for when placed on the bundle class path. It does not have any defined meaning with respect to package imports or exports.","31/Aug/11 18:21;rickhall;Since there is some user expectation that ""."" means the default package, although it is not defined as such by the OSGi Alliance, I think it makes more sense to make specifying ""."" as a package name an install-time error for bundles using it.

I've committed a patch to trunk to implement this. Please close if satisfied. Thanks.",31/Aug/11 18:28;bahjat.salem;I filed this bug because my boss and I though that using the default package would be more convenient than attaching fragments to or modifying bundles that call getClassLoader().getResource() on one of their classes to retrieve configuration files on our JOnAS 5 server.,"31/Aug/11 18:39;rickhall;I can understand the desire for short cuts, but in this case it really is meaningless and completely outside the OSGi spec. Just consider if people started regularly using ""."" to import and export the default package in OSGi. It is very likely your import of ""."" may get resolved to someone else's export of ""."", which would definitely not be what you want.

Also, since it is non-spec'd behavior, using it means your bundles likely won't be portable across OSGi implementations, as you have witnessed by your experiments so far.","31/Aug/11 23:44;bahjat.salem;I confirm that installing a bundle that uses ""."" as a package name raises a BundleException.

Closing the ticket.","31/Aug/11 23:45;bahjat.salem;I confirm that installing a bundle that uses ""."" as a package name raises a BundleException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Bundles not allowed to add listeners while in STOPPING state,FELIX-3082,12519971,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,rickhall,rickhall,24/Aug/11 14:13,21/Nov/12 09:23,14/Mar/19 02:48,25/Aug/11 19:40,framework-3.2.2,,,,,,framework-4.0.0,,,,,,,Framework,Specification compliance,,,,,0,,,,,,"In framework 3.2.0 we tried to fix a race condition where bundles could continue to add listeners even after they had been stopped (FELIX-2748). As part of that fix, we made it so that bundles could no longer add listeners while in the STOPPING state, which is too restrictive from a spec point of view. We need to allow this again, but make sure we don't reintroduce the original issue we were trying to fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55916,,,Thu Aug 25 19:40:47 UTC 2011,,,,,,0|i0l7b3:,121834,,,,,,,,25/Aug/11 19:40;rickhall;Modified framework to allow bundles to add listeners/services while in the STOPPING state. The only non-obvious issue was that we had to invalidate the bundle context early to avoid race conditions where runaway threads in bundles could still do stuff after their activator stop() method had returned.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Abstract class is not detected as abstract,FELIX-3077,12519113,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,17/Aug/11 13:51,12/Mar/14 08:55,14/Mar/19 02:48,17/Aug/11 13:53,scr annotations 1.6.0,,,,,,scr annotations 1.7.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"When an abstract class is annotated, the componentAbstract attribute returns ""false"" although it should return ""true"" to exclude the abstract class from the generated component list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55921,,,Wed Aug 17 13:53:45 UTC 2011,,,,,,0|i0vwq7:,184275,,,,,,,,17/Aug/11 13:53;cziegeler;Fixed in revision 1158706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change to ServiceController status in current trunk does not re-register service,FELIX-3075,12518554,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,crochester,crochester,11/Aug/11 05:21,14/May/12 14:58,14/Mar/19 02:48,12/Aug/11 10:18,ipojo-core-1.8.2,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,ipojo,,,,,"The setValue method in ServiceController is ignoring changes to controller fields. If the value is set to true, and there is already a registration, then the method will not do anything. This occurs where you have a component that provides multiple interfaces but one is disabled on startup. When the serviceController for the disabled interface is changed to true the other, non-registered, interface is not registerd. I will attempt to attach a patch to ProvidedService that resolved the problem for me.",,,,,,,,,,,,,,,,,,,,11/Aug/11 05:22;crochester;ProvidedService.diff;https://issues.apache.org/jira/secure/attachment/12490080/ProvidedService.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-12 10:18:29.643,,,no_permission,,,,,,,,,,,,55923,,,Mon May 14 14:58:27 UTC 2012,,,,,,0|i1autb:,271458,,,,,,,,11/Aug/11 05:22;crochester;Diff to solve non-registration issue.,"11/Aug/11 05:24;crochester;Note, 

This does not affect the release 1.8.0 - the changes made for FELIX-2989 introduced the issue.","12/Aug/11 10:18;clement.escoffier;Hi,

I've applied the patch in the trunk. Thanks !",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR Plugin and dependencies with classifier cause issue depending on the order of dependency in pom.xml,FELIX-3070,12518116,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,chetanm,chetanm,06/Aug/11 17:00,15/Nov/11 16:20,14/Mar/19 02:48,27/Sep/11 12:58,maven-scr-plugin-1.7.2,,,,,,maven-scr-plugin-1.7.4,,,,,,,SCR Tooling,,,,,,0,,,,,,"Here is the scenario. I have two modules 
- ModuleA - It generates two artifact. One the main artifact and other a client artifact which has classifier set to 'client' i.e. 
-- scr-bug:moduleA:jar:1.0.0-SNAPSHOT
-- scr-bug:moduleA:jar:client:1.0.0-SNAPSHOT
- Module B - Has dependency on both artifacts.

Module A has a abstract service class which has Component 's componentAbstract set to true. This class has a service reference entry i.e. a variable with @Reference marked. Module B has a ExampleService which extends the AbstractService and it has been marked aith Component annotation

Now when ModuleB has dependencies defined in order 
-- scr-bug:moduleA:jar:client:1.0.0-SNAPSHOT
-- scr-bug:moduleA:jar:1.0.0-SNAPSHOT

Then SCR Plugin is able to locate the abstract component configuration and adds dependency on the required service (referred in AbstractService). However if the order is changed (i.e. classifier entry comes later) then SCR plguin ignores the config.

I have also attached the debug log. 

If you see scr-bug-log.txt (when dependency entry with classifier comes later) then it has entries which indicates that dependency without classifier has been ignored 
[DEBUG] Checking artifact org.apache.felix:org.apache.felix.scr.annotations:jar:1.6.0:provided
[DEBUG] Resolving artifact org.apache.felix:org.apache.felix.scr.annotations:jar:1.6.0:provided
[DEBUG] Checking artifact scr-bug:moduleA:jar:client:1.0.0-SNAPSHOT:compile
[DEBUG] Resolving artifact scr-bug:moduleA:jar:client:1.0.0-SNAPSHOT:compile

Seeing the code of MavenJavaClassDescriptorManager then it uses MavenProject.getArtifactMap() in the getDependencies method. It internally uses org.apache.maven.artifact.ArtifactUtils.artifactMapByVersionlessId [1]. This method only uses artifactId and groupId to create the map key and does not take into account the classifier. So the getDependencies logic should use some other method to obtain the depndencies
",,,,,,,,,,,,,,,,,,,,06/Aug/11 17:03;chetanm;scr-bug-log.txt;https://issues.apache.org/jira/secure/attachment/12489576/scr-bug-log.txt,06/Aug/11 17:02;chetanm;scr-bug.zip;https://issues.apache.org/jira/secure/attachment/12489574/scr-bug.zip,06/Aug/11 17:03;chetanm;scr-log.txt;https://issues.apache.org/jira/secure/attachment/12489575/scr-log.txt,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2011-09-27 12:58:36.555,,,no_permission,,,,,,,,,,,,19184,,,Tue Sep 27 12:58:36 UTC 2011,,,,,,0|i1autz:,271461,,,,,,,,06/Aug/11 17:02;chetanm;Maven project to demonstrate the issue,06/Aug/11 17:03;chetanm;SCR Plugin output logs depending on the scenario,"27/Sep/11 12:58;cziegeler;Thanks for reporting and especially for the test case, Chetan!

I've fixed this in revision 1176365

The code was a little bit strange and I guess we had a wrong idea of the maven api at the time of writing. :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Resolver gets into infinite loop in the face of a require-bundle cycle,FELIX-3062,12515845,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,rickhall,rickhall,30/Jul/11 15:48,30/Jul/11 15:50,14/Mar/19 02:48,30/Jul/11 15:50,framework-3.2.2,,,,,,framework-4.0.0,,,,,,,Framework,Specification compliance,,,,,0,,,,,,"When calculating the package space for a given bundle revision, if that revision requires a bundle that in turn requires it (i.e., create a cycle), then package space calculation gets stuck in an infinite loop. We need to add a cycle check in the this case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55934,,,Sat Jul 30 15:50:01 UTC 2011,,,,,,0|i1au53:,271349,,,,,,,,30/Jul/11 15:50;rickhall;Committed a fix for this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reexported packages are not calculate correctly leading to resolver and class loading bugs,FELIX-3059,12515494,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,mfr,mfr,27/Jul/11 08:55,11/Aug/11 15:57,14/Mar/19 02:48,11/Aug/11 15:37,framework-3.2.2,,,,,,framework-4.0.0,,,,,,,Framework,,,,,,0,,,,,,"As described in
 http://www.mail-archive.com/users@felix.apache.org/msg10677.html [1],

Require-Bundle with visibility:=reexport does not work transitively in Felix 3.2.2 (cannot comment wrt. other versions, only tested this one).

Similar issue with Felix M2 plugin described in http://www.mail-archive.com/felix-dev@incubator.apache.org/msg02622.html.

See attached zip for an example consisting of 4 bundles as described in [1].

Example works in Equinox, fails to load a.One in Felix 3.2.2.","Windows XP, JavaSE-1.6, Eclipse 3.6 Helios",,,,,,,,,,,,,,,,,,,27/Jul/11 08:57;mfr;reexport-example.zip;https://issues.apache.org/jira/secure/attachment/12487949/reexport-example.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-10 16:18:03.916,,,no_permission,,,,,,,,,,,,55937,,,Thu Aug 11 15:57:20 UTC 2011,,,,,,0|i1au5j:,271351,,,,,,,,"27/Jul/11 08:57;mfr;Example containing 4 bundles A, B, C, D  where B reexports A and C reexports B but D cannot see A directly.","10/Aug/11 14:55;mfr;After testing this again, there's even more to it.

If I simply put the 4 bundles (A to D) into the /bundle directory of the felix-framework installation, it fails to start as outlined due to not finding class a.One.
That is after calling the Activators for bundles A, B and C, in that order.

If, however, I force a reverse load order by naming the files 4_A*, 3_B*, 2_C* and 1_D* (* would be ""-$version.jar"" here), then suddenly it DOES find a.One and completes the activation of bundle D.
Ie, it will start activating D (works), then C, then B and lastly A (and cleaup in the reverse order).
Although, if I then use the console to refresh D at a later point, it will again FAIL to load a.One.

Very strange but I do not currently have the time to debug this.","10/Aug/11 16:18;rickhall;Although it did fail for me too in 3.2.2, I played around with this in my trunk build of the framework and it appears to be working:

g! lb
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (3.3.0.SNAPSHOT)
    1|Active     |    1|Apache Felix Bundle Repository (1.6.2)
    2|Active     |    1|Apache Felix Gogo Command (0.8.0)
    3|Active     |    1|Apache Felix Gogo Runtime (0.8.0)
    4|Active     |    1|Apache Felix Gogo Shell (0.8.0)
    5|Installed  |    1|A (1.0.0.qualifier)
    6|Installed  |    1|B (1.0.0.qualifier)
    7|Installed  |    1|FelixWorkPlugin (1.0.0.qualifier)
    8|Installed  |    1|FelixExtendedWorkPlugin (1.0.0.qualifier)
g! start 5 6 7 8
DEBUG: WIRE: [5.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [6.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [6.0] osgi.wiring.bundle; (osgi.wiring.bundle=A) -> [5.0]
a.One (b.Activator <- super() from b.Three)
b.Three (b.Activator)
a.One (b.Activator <- super() from a.Two)
a.Two (b.Activator)
a.One (b.Activator)
DEBUG: WIRE: [7.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [7.0] osgi.wiring.bundle; (osgi.wiring.bundle=B) -> [6.0]
a.One (c.Activator <- super() from c.Five <- super() from b.Three)
b.Three (c.Activator <- super() from c.Five)
c.Five (c.Activator)
a.One (c.Activator <- super() from c.Four <- super() from a.Two)
a.Two (c.Activator <- super() from c.Four)
c.Four (c.Activator)
a.One (c.Activator <- super() from b.Three)
b.Three (c.Activator)
a.One (c.Activator <- super() from a.Two)
a.Two (c.Activator)
a.One (c.Activator)
DEBUG: WIRE: [8.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [8.0] osgi.wiring.bundle; (osgi.wiring.bundle=C) -> [7.0]
a.One (d.Activator <- super() from c.Five <- super() from b.Three)
b.Three (d.Activator <- super() from c.Five)
c.Five (d.Activator)
a.One (d.Activator <- super() from c.Four <- super() from a.Two)
a.Two (d.Activator <- super() from c.Four)
c.Four (d.Activator)
a.One (d.Activator <- super() from b.Three)
b.Three (d.Activator)
a.One (d.Activator)
a.One (d.Activator <- super() from a.Two)
a.Two (d.Activator)
g! stop 5 6 7 8
g! refresh 5 6 7 8
g! start 8
DEBUG: WIRE: [6.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [6.0] osgi.wiring.bundle; (osgi.wiring.bundle=A) -> [5.0]
DEBUG: WIRE: [7.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [7.0] osgi.wiring.bundle; (osgi.wiring.bundle=B) -> [6.0]
DEBUG: WIRE: [8.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [8.0] osgi.wiring.bundle; (osgi.wiring.bundle=C) -> [7.0]
DEBUG: WIRE: [5.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
a.One (d.Activator <- super() from c.Five <- super() from b.Three)
b.Three (d.Activator <- super() from c.Five)
c.Five (d.Activator)
a.One (d.Activator <- super() from c.Four <- super() from a.Two)
a.Two (d.Activator <- super() from c.Four)
c.Four (d.Activator)
a.One (d.Activator <- super() from b.Three)
b.Three (d.Activator)
a.One (d.Activator)
a.One (d.Activator <- super() from a.Two)
a.Two (d.Activator)
g! refresh 8
g! DEBUG: WIRE: [8.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [8.0] osgi.wiring.bundle; (osgi.wiring.bundle=C) -> [7.0]
a.One (d.Activator <- super() from c.Five <- super() from b.Three)
b.Three (d.Activator <- super() from c.Five)
c.Five (d.Activator)
a.One (d.Activator <- super() from c.Four <- super() from a.Two)
a.Two (d.Activator <- super() from c.Four)
c.Four (d.Activator)
a.One (d.Activator <- super() from b.Three)
b.Three (d.Activator)
a.One (d.Activator)
a.One (d.Activator <- super() from a.Two)
a.Two (d.Activator)
g!

Could you test the latest snapshot build of the framework distribution and see if it is working for you? You should be able to use the snapshot build for development purposes, since it should be reasonably stable.","10/Aug/11 18:28;rickhall;BTW, I had noted another reexport visibility issue in my framework refactoring last month and it actually seems to be related to this issue. I'm trying to clean up remaining issues so I can do a framework release, so I decided to investigate your issue and this other issue today. As I say above, your issue appears to be addressed since I completely changed the way we are calculating visible packages.

The other issue was related to verifying class space consistency for a bundle. Turns out it was not doing the correct calculation for reexported packages. This error was actually the cause of your error in 3.2.2. In the old version, the calculation for visible packages was done using this erroneous reexport calculation, but now in trunk I actually calculate visible packages separately from how I verify them. So, even though I fixed the issue for visibility, it's not yet fixed for verification purposes.

I think I have a fix for verification that I'll commit shortly...I'll just commit it against this issue since it was the root cause of the issue for 3.2.2. So, it looks like we should be able to close this as fixed after I commit.","11/Aug/11 13:43;mfr;OK, I tested this with the 3.3.0-SNAPSHOT available from
 https://repository.apache.org/content/groups/snapshots/org/apache/felix/org.apache.felix.main/3.3.0-SNAPSHOT/org.apache.felix.main-3.3.0-20110810.161107-13.jar

and can confirm that this version does not exhibit the problem anymore.

Please note that I was not able to build the svn sources due to:

,-- error from ""mvn -Dpackaging=bundle install"" --
| Downloading: http://repository.apache.org/snapshots/org/apache/felix/maven-bundle-plugin/2.3.5-SNAPSHOT/maven-bundle-plugin-2.3.5-SNAPSHOT.pom
| [INFO] Unable to find resource 'org.apache.felix:maven-bundle-plugin:pom:2.3.5-SNAPSHOT' in repository apache.snapshots (http://repository.apache.org/snapshots)
| Downloading: http://repository.apache.org/snapshots/org/apache/felix/maven-bundle-plugin/2.3.5-SNAPSHOT/maven-bundle-plugin-2.3.5-SNAPSHOT.pom
| [INFO] Unable to find resource 'org.apache.felix:maven-bundle-plugin:pom:2.3.5-SNAPSHOT' in repository apache.snapshots (http://repository.apache.org/snapshots)
| [INFO] ------------------------------------------------------------------------
| [ERROR] BUILD ERROR
| [INFO] ------------------------------------------------------------------------
| [INFO] Error building POM (may not be this project's POM).
| 
| 
| Project ID: org.apache.felix:maven-bundle-plugin
| 
| Reason: POM 'org.apache.felix:maven-bundle-plugin' not found in repository: Unable to download the artifact from any repository
| 
|   org.apache.felix:maven-bundle-plugin:pom:2.3.5-SNAPSHOT
| 
| from the specified remote repositories:
|   apache.snapshots (http://repository.apache.org/snapshots),
|   ops4j (http://repository.ops4j.org/maven2),
|   central (http://repo1.maven.org/maven2),
|   aqute (http://www.aqute.biz/repo)
| 
|  for project org.apache.felix:maven-bundle-plugin
`---------

Also, downloading
 https://repository.apache.org/content/groups/snapshots/org/apache/felix/org.apache.felix.main/3.3.0-SNAPSHOT/org.apache.felix.main-3.3.0-20110810.161525-14.jar

results, although newer than the *-13.jar linked above, in a version 3.2.2 framework. Something seems amiss there.","11/Aug/11 13:55;rickhall;If you are trying to build from the top-level directory, then don't do that...it has been flaky forever.

To build the framework, just build these subprojects: framework, main, and main.distribution.

The main.distribution is only necessary to create the distribution, if you just want to run the framework you can do that from within the main subproject, which also contains the appropriate bin, bundle, and conf directories to launch the framework.

Regarding the inclusion of a 3.2.2 framework, maybe that was my fault since I was going back and forth between 3.3.0-SNAPSHOT and 3.2.2 to test this issue. I've just deployed new snapshots.","11/Aug/11 14:18;mfr;OK, I see.
I just followed http://felix.apache.org/site/building-felix.html to build it, but running maven in main/ worked.

Thanks and best regards.","11/Aug/11 15:37;rickhall;Ok, I committed a fix for the resolver verification aspect of this issue too. I updated the issue subject to more accurately reflect the underlying issue. I also added a couple test cases around this issue to avoid similar situations in the future, hopefully. Thanks for your help, although I'm obliged to tell you that you shouldn't be using reexport visibility in the first place since it is not modular. :-)

Please close this issue if you are satisfied. Thanks.","11/Aug/11 15:56;mfr;Well, regarding the issues that can arise from reexporting, I followed some of the discussions and feel there are pros and cons to both sides.

The small testcase I submitted was simply to demonstrate the issue and does in itself not really need to reexport stuff.
The issues arose in the first place when I tried to get eclipse-based bundles (they call them plugins) to work and eclipse uses this a lot.

Running these on top of (slightly modified) eclipse base plugins on top of felix does work so far, BTW, and it is actually only a few rather minor issues that prevent it out-of-the-box.
Considering to put up some blog or something about it, no time atm, though.

Wrt. to reexporting, the plugins I meant to get working also use it and rewriting them to use package imports instead does not help in the least with modularity.
In fact, to get them work prior to the fix (done, as I said), I had to import packages left, right and center, resulting in a jumbled mess that doesn't make sense (runtime implementation classes from at-first-glance completely unrelated bundles all over the place). So, to summarize, there sure are uses cases for reexporting. :>

Anyway, sorry for the wall of text and thanks again. Now hopefully jbosgi will pick this change up and start working, better, too.",11/Aug/11 15:57;mfr;Closing as requested after verifying fix in snapshot version.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven-bundle-plugin 2.3.5 incompatible with maven-source-plugin (regression),FELIX-3058,12515491,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,kwin,kwin,27/Jul/11 08:45,02/Dec/11 15:44,14/Mar/19 02:48,11/Oct/11 15:52,maven-bundle-plugin-2.3.5,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,5,,,,,,"Since version 2.3.5 the maven-bundle-plugin is incompatible with the maven-source-plugin. I get the following error message during the maven-sources-plugin:jar goal:
[WARNING] NOT adding sources to artifacts with classifier as Maven only supports one classifier per artifact. Current artifact [<GroupId>:<ArtifactId>:<Version>] has a [] classifier.

The problem does not occur with maven-bundle-plugin in version 2.3.4.

You can easily reproduce by creating a project with packaging ""bundle"" and just configuring the maven-source-plugin like this:

<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.2</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>",,,,,,,,,,,,,,,,,,,,28/Aug/11 18:43;arikkfir;patch;https://issues.apache.org/jira/secure/attachment/12492007/patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-28 18:43:14.649,,,no_permission,,,,,,,,,,,,55938,,,Mon Oct 24 16:40:53 UTC 2011,,,,,,0|i1au5r:,271352,,,,,,,,"28/Aug/11 18:43;arikkfir;Hi,

The problem is that the plugin sets an empty classifier ("""") instead of a null classifier. This can be easily solved by removing the ""<classifier></classifier>"" line from components.xml - I've attached a patch (apply at the ""bundleplugin"" dir, *not* the felix trunk dir)",11/Oct/11 15:52;mcculls;Fixed in r1166847 (empty classifier also caused an issue with the assembly plugin),"24/Oct/11 16:40;wolfgang.glas@ev-i.at;Please rol our a 2.3.6 version, because this problem affects all my bundle builds.

TIA, Wolfagng",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Event Admin deadlocks when sendEvent is called from within a handleEvent method,FELIX-3055,12515437,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,mbanner,mbanner,26/Jul/11 18:16,01/Aug/15 11:33,14/Mar/19 02:48,28/Jul/11 08:13,eventadmin-1.2.12,,,,,,eventadmin-1.2.14,,,,,,,Event Admin,,,,,,0,,,,,,"The Felix Event Admin service doesn't correctly handle the case where EventAdmin.sendEvent(Event) is called from within an EventHandler.handleEvent(Event) implementation.  This happens whether the original event (the one being handled by the EventHandler, not the one it is dispatching) was dispatched using EventAdmin.sendEvent(Event) or EventAdmin.postEvent(Event).

I have attached some sample code which should make this easy to reproduce.  Every time you invoke the ""dispatch foo"" command from the GoGo shell, it will post a ""foo"" event.  The handler for this event then attempts to send a new ""bar"" event.  Every time this happens, a thread in the event admin pool will become deadlocked.  If you run the dispatch command more times than the minimum number of threads in the pool (I think 20, by default), they will all be deadlocked and the event admin service will stop invoking event handlers (it seemed strange to me that this happens when you hit the minimum number of thread in the pool rather than the maximum, but I haven't had time to investigate that).

Also attached is a thread dump from when all 20 threads have become deadlocked.  Note that they are all stuck on line 240 of SyncDeliverTasks.java waiting on a rendezvous with the timer barrier (line numbers refer to the current revision on trunk, r1074155).  I suspect that this is because the attempt to rendezvous on line 266 is met by the attempt on line 208 in the case where the event handler recursively calls sendEvent, leaving line 240 with no corresponding call to meet.","Win2K8 R2, Java 1.6.0_17",,,,,,,,,,,,,,,,,,,26/Jul/11 18:17;mbanner;TestClass.java;https://issues.apache.org/jira/secure/attachment/12487874/TestClass.java,26/Jul/11 18:18;mbanner;threaddump.txt;https://issues.apache.org/jira/secure/attachment/12487875/threaddump.txt,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-07-27 16:46:08.265,,,no_permission,,,,,,,,,,,,40373,,,Thu Jul 28 15:04:49 UTC 2011,,,,,,0|i0b3n3:,62702,,,,,,,,26/Jul/11 18:17;mbanner;Class to help with reproducing issue.,26/Jul/11 18:18;mbanner;Attaching thread dump.,"27/Jul/11 16:46;cziegeler;I can't reproduce this right now, and the implementation passes the tck which tests this as well. I even wrote a massive test for this send 2000 events where each uses your pattern from your test - so maybe there is a difference in the environment we're using?
What os / java version are you using?","27/Jul/11 19:11;mbanner;Sorry, I didn't think about this being platform dependent.  I am seeing the issue on Win2k8 R2 with Java 1.6.0_17 and on Windows XP with Java 1.6.0_16, but NOT on RHEL 4 with Java 1.6.0_17.","27/Jul/11 20:54;cziegeler;Yeah, actually, it's me to say sorry...I was too dumb to correctly test...my event handler was configured to be ignored for timeout handling....running a correct test reveals the exact same problem as you describe :(
I'll have a look","28/Jul/11 08:13;cziegeler;Many thanks for reporting this, Matt!

Actually we had two problems: one of the this deadlock, but after fixing this I ran into starvation problems if more threads than the pool offers send cascading events. While the whole pool is processing the ""outer"" events, inner event sending is blocked as the pool has no free thread.

I've fixed both in revision 1151755 and ran some new tests on this version including
the tck. I couldn't detect any problems.

Would be great, Matt, if you could run your tests as well to verify.

Thanks!","28/Jul/11 15:04;mbanner;Everything looks good to me.  I tried my original test code as well as a new test that recursively calls sendEvent() a greater number of times than there are threads in the pool (to check for the starvation issue), and I also tried it out in our actual application as a sanity check.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PathInfo & ServletPath,FELIX-3054,12515276,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,diorcety,diorcety,25/Jul/11 15:07,13/Jun/14 09:27,14/Mar/19 02:48,12/Feb/14 08:54,,,,,,,,,,,,,,HTTP Service,,,,,,0,,,,,,"There is an bizarre choice with the splitting between PathInfo, ServletPath and ContextPath.
Indeed when i register a servlet (or a resource) to the path ""/path1""
In my HttpContext when i receive a request (in handleSecurity for example) the information associated with the request(/path1/abcd) are the following:
PathInfo: /path1/abcd
ServletPath: 
ContextPath: 

Isn't  a weird behaviour? 
A splitting like the following one, isn't it more logical?
PathInfo: /abcd
ServletPath: /path1
ContextPath: 

Thanks
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-12 08:54:36.638,,,no_permission,,,,,,,,,,,,55941,,,Wed Feb 12 08:54:36 UTC 2014,,,,,,0|i1au67:,271354,,,,,,,,12/Feb/14 08:54;jajans;Fixed in rev #1567569.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential deadlock if event handler throws Throwable and is bypassing timeout handling,FELIX-3053,12515247,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,25/Jul/11 11:54,01/Aug/15 11:33,14/Mar/19 02:48,25/Jul/11 11:56,eventadmin-1.2.12,,,,,,eventadmin-1.2.14,,,,,,,Event Admin,,,,,,0,,,,,,"If an event handler is bypassing the timeout handling (by configuration) and throws a throwable (like IllegalStateException), this can cause deadlocks as this is never catched and the internal state of the handlers goes out of sync.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,40376,,,Mon Jul 25 13:25:51 UTC 2011,,,,,,0|i0b3nj:,62704,,,,,,,,"25/Jul/11 11:56;cziegeler;With ususal timeout handling, this can't happen as the thread executor catches Throwables.
Added catching of throwables to the handler task in revision 1150645","25/Jul/11 13:25;cziegeler;Obviously, the description above was wrong: this happens only if an Error is thrown - and IllegalStateException is not an error but an exception which is handled correctly",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite loop in File Install if java.io.tmpdir is non-writable,FELIX-3047,12514744,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gawor@mcs.anl.gov,gawor@mcs.anl.gov,20/Jul/11 05:21,17/Mar/15 07:00,14/Mar/19 02:48,16/Mar/12 09:00,fileinstall-3.1.10,,,,,,fileinstall-3.2.0,,,,,,,File Install,,,,,,0,,,,,,"File Install (in prepareTempDir()) goes into an infinite loop if the java.io.tmpdir specifies a directory that is non-writable (e.g. somebody set java.io.tmpdir to a wrong directory by mistake). Since prepareTempDir() can be called on the same thread as the bundle activation this can prevent other bundles in the framework from starting.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55946,,,2011-07-20 05:21:52.0,,,,,,0|i07h33:,41534,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty array configuration value is read as null after restart,FELIX-3046,12514563,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,zdila,zdila,19/Jul/11 09:58,25/Sep/13 14:02,14/Mar/19 02:48,20/Oct/11 14:46, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"Value String[0] is stored in the backing file as
key=

After framework is restarted it is read as null value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-20 14:46:10.232,,,no_permission,,,,,,,,,,,,55947,,,Wed Sep 25 14:02:34 UTC 2013,,,,,,0|i0vuov:,183945,,,,,,,,"20/Oct/11 14:46;fmeschbe;Fixed in Rev. 1186839

Both empty arrays and empty collections have not been written properly. Likewise on read, they have not been read properly. With the fix empty arrays ([]) and collections ({}) are written and read back in. For arrays, the type can be supported. For collections the type, of course, is irrelevant and cannot be saved.",25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Resolver is not correctly resolving fragments in all cases,FELIX-3043,12514248,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,rickhall,rickhall,15/Jul/11 16:51,15/Aug/11 13:03,14/Mar/19 02:48,15/Aug/11 13:03,framework-3.2.2,,,,,,framework-4.0.0,,,,,,,Framework,Specification compliance,,,,,0,,,,,,The algorithm to merge fragments into hosts is not always correct when merging fragments into multiple hosts when there are dependencies among the resulting merged hosts. The current algorithm needs to be modified to keep the dependents list up to date in Candidates so that every merged cap/req gets replaced by the corresponding wrapped cap/req from the synthesized merged host module.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55950,,,Mon Aug 15 13:03:58 UTC 2011,,,,,,0|i1au7r:,271361,,,,,,,,"15/Jul/11 16:57;rickhall;I've committed a fix for this that appears to work, but I am not completely satisfied with it. I'll leave this issue open for now.",15/Aug/11 13:03;rickhall;Closing this as good enough.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven-scr-plugin generates StackOverflowError with custom annotation tag provider,FELIX-3041,12514066,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,sseifert@pro-vision.de,sseifert@pro-vision.de,14/Jul/11 13:34,28/Jul/11 08:54,14/Mar/19 02:48,14/Jul/11 16:48,maven-scr-plugin-1.7.2,,,,,,maven-scr-plugin-1.7.2,,,,,,,SCR Tooling,,,,,,0,,,,,,"the latest maven scr plugin 1.7.2 (currently in staging phase) produces a StackOverflowError when generating SCR metadata for a project with custom annotation tag provider.
the problem has its source in the fix for FELIX-2980 - if the commit rev. 1132617 is reverted it works as expected.

i'll attach a test project to reproduce the problem.",,,,,,,,,,,,,,,,,,,,14/Jul/11 13:35;sseifert@pro-vision.de;scrplugin-testproject.zip;https://issues.apache.org/jira/secure/attachment/12486440/scrplugin-testproject.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-14 15:24:42.951,,,no_permission,,,,,,,,,,,,55952,,,Thu Jul 14 16:48:27 UTC 2011,,,,,,0|i1au7z:,271362,,,,,,,,"14/Jul/11 13:40;sseifert@pro-vision.de;(excpert of the) stacktrace of the problem:

Exception in thread ""main"" java.lang.StackOverflowError
        at java.util.Hashtable.get(Hashtable.java:334)
        at com.thoughtworks.qdox.DefaultJavaClassCache.getClassByName(DefaultJavaClassCache.java:14)
        at com.thoughtworks.qdox.JavaClassContext.getClassByName(JavaClassContext.java:54)
        at com.thoughtworks.qdox.model.Type.getJavaClass(Type.java:290)
        at org.apache.felix.scrplugin.tags.annotation.defaulttag.DefaultAnnotationTagProvider.getTags(DefaultAnnotationTagProvider.java:45)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:159)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:141)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.hasScrPluginAnnotation(AnnotationTagProviderManager.java:176)
        at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:396)
        at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.getExternalFieldByName(QDoxJavaClassDescription.java:174)
        at org.apache.felix.scrplugin.tags.annotation.Util$1.visitAnnotationFieldRef(Util.java:412)
        at com.thoughtworks.qdox.model.annotation.AnnotationFieldRef.accept(AnnotationFieldRef.java:60)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationAdd(EvaluatingVisitor.java:143)
        at com.thoughtworks.qdox.model.annotation.AnnotationAdd.accept(AnnotationAdd.java:14)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationValueList(EvaluatingVisitor.java:330)
        at com.thoughtworks.qdox.model.annotation.AnnotationValueList.accept(AnnotationValueList.java:41)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.getValue(EvaluatingVisitor.java:28)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.getListValue(EvaluatingVisitor.java:35)
        at org.apache.felix.scrplugin.tags.annotation.Util.getAnnotationValues(Util.java:441)
        at org.apache.felix.scrplugin.tags.annotation.Util.getStringValues(Util.java:87)
        at org.apache.felix.scrplugin.tags.annotation.sling.SlingAnnotationTagProvider.getTags(SlingAnnotationTagProvider.java:78)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:159)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:141)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.hasScrPluginAnnotation(AnnotationTagProviderManager.java:176)
        at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:396)
        at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.getExternalFieldByName(QDoxJavaClassDescription.java:174)
        at org.apache.felix.scrplugin.tags.annotation.Util$1.visitAnnotationFieldRef(Util.java:412)
        at com.thoughtworks.qdox.model.annotation.AnnotationFieldRef.accept(AnnotationFieldRef.java:60)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationAdd(EvaluatingVisitor.java:143)
        at com.thoughtworks.qdox.model.annotation.AnnotationAdd.accept(AnnotationAdd.java:14)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationValueList(EvaluatingVisitor.java:330)
        at com.thoughtworks.qdox.model.annotation.AnnotationValueList.accept(AnnotationValueList.java:41)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.getValue(EvaluatingVisitor.java:28)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.getListValue(EvaluatingVisitor.java:35)
        at org.apache.felix.scrplugin.tags.annotation.Util.getAnnotationValues(Util.java:441)
        at org.apache.felix.scrplugin.tags.annotation.Util.getStringValues(Util.java:87)
        at org.apache.felix.scrplugin.tags.annotation.sling.SlingAnnotationTagProvider.getTags(SlingAnnotationTagProvider.java:78)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:159)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:141)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.hasScrPluginAnnotation(AnnotationTagProviderManager.java:176)
        at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:396)
        at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.getExternalFieldByName(QDoxJavaClassDescription.java:174)
        at org.apache.felix.scrplugin.tags.annotation.Util$1.visitAnnotationFieldRef(Util.java:412)
        at com.thoughtworks.qdox.model.annotation.AnnotationFieldRef.accept(AnnotationFieldRef.java:60)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationAdd(EvaluatingVisitor.java:143)
        at com.thoughtworks.qdox.model.annotation.AnnotationAdd.accept(AnnotationAdd.java:14)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationValueList(EvaluatingVisitor.java:330)
        at com.thoughtworks.qdox.model.annotation.AnnotationValueList.accept(AnnotationValueList.java:41)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.getValue(EvaluatingVisitor.java:28)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.getListValue(EvaluatingVisitor.java:35)
        at org.apache.felix.scrplugin.tags.annotation.Util.getAnnotationValues(Util.java:441)
        at org.apache.felix.scrplugin.tags.annotation.Util.getStringValues(Util.java:87)
        at org.apache.felix.scrplugin.tags.annotation.sling.SlingAnnotationTagProvider.getTags(SlingAnnotationTagProvider.java:78)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:159)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:141)
        at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.hasScrPluginAnnotation(AnnotationTagProviderManager.java:176)
        at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:396)
        at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.getExternalFieldByName(QDoxJavaClassDescription.java:174)
        at org.apache.felix.scrplugin.tags.annotation.Util$1.visitAnnotationFieldRef(Util.java:412)
        at com.thoughtworks.qdox.model.annotation.AnnotationFieldRef.accept(AnnotationFieldRef.java:60)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationAdd(EvaluatingVisitor.java:143)
        at com.thoughtworks.qdox.model.annotation.AnnotationAdd.accept(AnnotationAdd.java:14)
        at com.thoughtworks.qdox.model.annotation.EvaluatingVisitor.visitAnnotationValueList(EvaluatingVisitor.java:330)
        at com.thoughtworks.qdox.model.annotation.AnnotationValueList.accept(AnnotationValueList.java:41)
...
","14/Jul/11 15:24;cziegeler;Hi Stefan

many thanks for reporting and providing a test project!

I committed a potential fix in revision 1146749 - it seems that your project runs now.

The fix is just checking for recursion during the check - the better solution would be to change the AnnotationTagProvider interface and add a hasTags() or similar to it",14/Jul/11 16:29;sseifert@pro-vision.de;the workaround looks good for me - the plugin generates all expected SCR metadata without complaints.,14/Jul/11 16:48;cziegeler;Thanks Stefan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR cleans up delayed service components too aggressively,FELIX-3039,12513967,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,njbartlett,njbartlett,13/Jul/11 18:40,20/Nov/12 10:58,14/Mar/19 02:48,17/Oct/11 10:06,,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,2,,,,,,"In the case of an ordinary delayed service component, SCR immediately deactivates and destroys the component when its service is released by the consumer. In cases where a consumer occasionally binds and invokes the service (e.g. EventAdmin) this can cause the component to be continuously destroyed and recreated.

Note that Equinox's DS offers a little more control, we can choose either to immediately clean up or never clean up (and the default is never). This is still not very satisfactory though.

I think ideally there should be a configurable timeout, so that a component will be cleaned up only if it is not used for some time. I also think the default should be quite long, e.g. many minutes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-13 19:25:18.231,,,no_permission,,,,,,,,,,,,50966,,,Tue Nov 20 10:58:15 UTC 2012,,,,,,0|i0l49z:,121343,,,,,,,,"13/Jul/11 18:50;njbartlett;Correction, this should be a feature request, not a bug. The spec does not require either behaviour, implementations can clean up at their discretion.",13/Jul/11 19:25;andrei.pozolotin;good feature; is there any way to provide this config parameter in osgi-generic way?,"13/Jul/11 19:29;njbartlett;Not in a generic way because the spec does not state any such parameter name. Equinox uses a system property ""equinox.scr.dontDisposeInstances"" (http://wiki.eclipse.org/Equinox/RuntimeOptions) which can be true or false (default is true).

","09/Oct/11 17:16;fmeschbe;Actually the specification states that delayed components have to be deactivated and destroyed if not used any longer:

      If the service registered by a component configuration becomes unused
      because there are no more bundles using it, then SCR should deactivate
      that component configuration. This allows SCR implementations to eagerly
      reclaim activated component configurations. (112.5.4, Delayed Components)

While ""should"" of course is not a requirement, I understand it as a strong recommendation. On the other hand, since this still allows the implementation to keep the components alive, it might make sense to keep them alive.

Will consider an option ""ds.dontDisposeInstances"" as follows:
  * default: false -- to implement the spec recommendation
  * base (static) configuration by framework property (BundleContext.getProperty)
  * dynamic configuration through Configuration Admin (if available)","17/Oct/11 10:06;fmeschbe;In Rev. 1185082: Added new ds.delayed.keepInstances configuration property which allows to prevent delayed components from being clean up. By default this property is false (to implement the spec suggestion). The property can be set as a framework property or as part of the org.apache.felix.scr.ScrService configuration.

Also updated documentation at http://felix.apache.org/site/apache-felix-service-component-runtime.html#ApacheFelixServiceComponentRuntime-Configuration",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Plugin does not work with Java 5,FELIX-3037,12513930,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,cziegeler,cziegeler,13/Jul/11 14:04,02/Dec/11 15:44,14/Mar/19 02:48,17/Oct/11 11:02,maven-bundle-plugin-2.3.5,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,4,,,,,,"When trying to build projects with the latest maven bundle plugin and Java 5, I get:

INFO] 
[INFO] --- maven-bundle-plugin:2.3.5:bundle (default-bundle) @ org.apache.felix.eventadmin ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 19.227s
[INFO] Finished at: Wed Jul 13 16:01:41 CEST 2011
[INFO] Final Memory: 8M/21M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.felix:maven-bundle-plugin:2.3.5:bundle (default-bundle) on project org.apache.felix.eventadmin: Execution default-bundle of goal org.apache.felix:maven-bundle-plugin:2.3.5:bundle failed: An API incompatibility was encountered while executing org.apache.felix:maven-bundle-plugin:2.3.5:bundle: java.lang.NoSuchMethodError: java.lang.String.getBytes(Ljava/nio/charset/Charset;)[B
[ERROR] -----------------------------------------------------
[ERROR] realm =    plugin>org.apache.felix:maven-bundle-plugin:2.3.5
[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy
[ERROR] urls[0] = file:/Users/cziegeler/.m2/repository/org/apache/felix/maven-bundle-plugin/2.3.5/maven-bundle-plugin-2.3.5.jar
[ERROR] urls[1] = file:/Users/cziegeler/.m2/repository/biz/aQute/bndlib/1.43.0/bndlib-1.43.0.jar
[ERROR] urls[2] = file:/Users/cziegeler/.m2/repository/org/apache/felix/org.apache.felix.bundlerepository/1.6.6/org.apache.felix.bundlerepository-1.6.6.jar
[ERROR] urls[3] = file:/Users/cziegeler/.m2/repository/org/osgi/org.osgi.core/4.1.0/org.osgi.core-4.1.0.jar
[ERROR] urls[4] = file:/Users/cziegeler/.m2/repository/org/easymock/easymock/2.4/easymock-2.4.jar
[ERROR] urls[5] = file:/Users/cziegeler/.m2/repository/org/apache/maven/reporting/maven-reporting-api/2.0.7/maven-reporting-api-2.0.7.jar
[ERROR] urls[6] = file:/Users/cziegeler/.m2/repository/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.jar
[ERROR] urls[7] = file:/Users/cziegeler/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar
[ERROR] urls[8] = file:/Users/cziegeler/.m2/repository/commons-cli/commons-cli/1.0/commons-cli-1.0.jar
[ERROR] urls[9] = file:/Users/cziegeler/.m2/repository/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar
[ERROR] urls[10] = file:/Users/cziegeler/.m2/repository/org/apache/maven/maven-archiver/2.4.1/maven-archiver-2.4.1.jar
[ERROR] urls[11] = file:/Users/cziegeler/.m2/repository/org/codehaus/plexus/plexus-archiver/1.0/plexus-archiver-1.0.jar
[ERROR] urls[12] = file:/Users/cziegeler/.m2/repository/org/codehaus/plexus/plexus-io/1.0/plexus-io-1.0.jar
[ERROR] urls[13] = file:/Users/cziegeler/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.13/plexus-interpolation-1.13.jar
[ERROR] urls[14] = file:/Users/cziegeler/.m2/repository/org/apache/maven/shared/maven-dependency-tree/1.2/maven-dependency-tree-1.2.jar
[ERROR] urls[15] = file:/Users/cziegeler/.m2/repository/org/codehaus/plexus/plexus-utils/2.1/plexus-utils-2.1.jar
[ERROR] Number of foreign imports: 1
[ERROR] import: Entry[import  from realm ClassRealm[project>org.apache.felix:org.apache.felix.eventadmin:1.2.13-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]]

This can be reproduced for example with the Felix EventAdmin project

Switching to Java 6 solves the problem.",,,,,,,,,,,,FELIX-3083,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-31 22:04:15.312,,,no_permission,,,,,,,,,,,,55955,,,Mon Oct 17 11:02:49 UTC 2011,,,,,,0|i1au87:,271363,,,,,,,,"31/Aug/11 22:04;timeck;The underlying issue I think it is reported here: https://github.com/bnd/bnd/issues/67
","12/Sep/11 13:13;sebb@apache.org;A possible work-round is to add the following to the plugin reference:

<dependencies>
  <dependency>
    <groupId>biz.aQute</groupId>
    <artifactId>bndlib</artifactId>
    <!-- 1.43.0 requires Java 6; use previous version which works with Java 5-->
    <version>1.15.0</version>
  </dependency>
</dependencies>

This allows one to use the fixes in 2.3.5 under Java 5 (but not of course the fixes in bndlib 1.43.0)","14/Oct/11 13:46;mcculls;This has been fixed in BND, once the new version is on Maven central I'll update the maven-bundle-plugin",17/Oct/11 11:02;mcculls;Fixed in trunk (included local copy of bndlib 1.47 - this will be replaced by a proper dependency in the pom once bndlib has been fully tested and published to central).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Service registry hooks are not correctly filtering bundle contexts for event hook,FELIX-3033,12513704,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,rickhall,rickhall,11/Jul/11 18:22,11/Jul/11 20:17,14/Mar/19 02:48,11/Jul/11 20:17,framework-3.2.2,,,,,,framework-4.0.0,,,,,,,Framework,Specification compliance,,,,,0,,,,,,"When calling out to service registry EventHooks, the collection of bundle contexts is being treated as a list with duplicates when it should be treated as a set without duplicates. The end result being, if a hook removes a bundle context from the set, then it effectively filters all listeners from that bundle context. The current implementation allows a hook to remove a single listener, which is not correct.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55959,,,Mon Jul 11 20:17:02 UTC 2011,,,,,,0|i1au93:,271367,,,,,,,,11/Jul/11 20:17;rickhall;Committed a fix in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven3 deployment fails where maven2 works,FELIX-3031,12513685,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,mcculls,jocsch,jocsch,11/Jul/11 15:31,02/Dec/11 15:44,14/Mar/19 02:48,16/Oct/11 19:20,,,,,,,maven-bundle-plugin-2.3.6,,,,,,,Maven Bundle Plugin,,,,,,2,,,,,,"I want to deploy a bundle to a remote obr. I have configured the
bundle-plugin to use the default repository (which is a
filebased repository). Everything worked fine with maven 2. Now that I
switched to maven 3 I get the following error:

[INFO] --- maven-bundle-plugin:2.3.5:deploy (default-deploy) @ test ---
[INFO] LOCK file:///var/www/repository/repository.xml
[INFO] Downloading repository.xml
[INFO] Computed bundle uri: http://localhost/repository/example/test/1.0-SNAPSHOT/test-1.0-20110711.152943-4.jar
[ERROR] file doesn't exist: file:/home/markus/.m2/repository/example/test/1.0-SNAPSHOT/test-1.0-20110711.152943-4.jar
[INFO] Writing OBR metadata
[INFO] Uploading repository.xml
[INFO] UNLOCK file:///var/www/repository/repository.xml


The bundle plugin tries to retrieve the jar file from my local
repository. However the maven deploy plugin has also picked up the
remote repository and deployed the bundle in that repository
and not in my local repository.
That's different to maven2. When building with maven2 the bundle is
deployed in my local and in my remote repository by the deploy
plugin.
No idea what has changed (maybe I miss some configuration here?), but
for me it looks like the bundle plugin should pick up the bundle from
the default deploy repository instead of the local repository?
",,,,,,,,,,,,,,,,,,,,11/Jul/11 15:33;jocsch;mvn3bug.zip;https://issues.apache.org/jira/secure/attachment/12486070/mvn3bug.zip,15/Oct/11 20:10;hampelratte;obr_deploy.diff;https://issues.apache.org/jira/secure/attachment/12499159/obr_deploy.diff,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-10-15 20:10:56.242,,,no_permission,,,,,,,,,,,,55961,,,Sun Oct 16 19:20:57 UTC 2011,,,,,,0|i0vwrj:,184281,,,,,,,,11/Jul/11 15:33;jocsch;Most simple pom that demonstrates that behaviour.,"15/Oct/11 20:10;hampelratte;I'm getting the same error message. The problem seems to be, that the deployed jar contains a timestamp for unique snapshots. The jar in the local repo is named <bundle>-<version>-SNAPSHOT.jar . The SNAPSHOT keyword is used instead of timestamp. That's why, the lookup in the local repo fails.

I have replaced the URIs in ObrDeploy, so that the build result is used instead of the file in the local repository. This solves the problem for me. PLease have a look at the patch in obr_deploy.diff.

Best regards
Henrik","16/Oct/11 18:23;mcculls;There's a problem with that patch, in that it hardcodes the absolute path to the artifact on the local system in the remote OBR. While this might be OK for some scenarios, it will cause problems when the remote OBR is exposed from a different top-level URL. ",16/Oct/11 19:20;mcculls;Fixed in r1184903,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Better handle configuration unbinding,FELIX-3028,12513133,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,07/Jul/11 11:48,23/Nov/12 06:54,14/Mar/19 02:48,07/Jul/11 11:49,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"Unbinding of configuration in the ConfigManager class of the Web Console has some issues:

(1) If not configuration exists for a provided PID when unbinding is requested, a NullPointerException is thrown because the config variable is not null-checked

(2) Apache Felix Configuration Admin 1.2.8 sets and persists the static bundle location with the Configuration.setBundleLocation call. On the other hand internally a dynamic location is maintained if configuration is assigned to a ManagedService[Factory]. If the static location is cleared, the dynamic location is still set and calling Configuration.getBundleLocation still returns that dynamically assigned value. With a work around we can force the dynamic bundle location to also be cleared: If the bundle location is not null after setBundleLocation(null), we do setBundleLocation(non-null); setBundleLocation(null). The first call clears the dynamic bundle location while setting the static location to some non-null value. The second call then resets the static location back to null.

This second issue will probably be solved once the R4.3 Configuration Admin specification is publiziced and implemented, which handles bundle location setup in a more controlled manner.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55964,,,Fri Nov 23 06:54:47 UTC 2012,,,,,,0|i0rflr:,158171,,,,,,,,07/Jul/11 11:49;fmeschbe;Fixed in Rev. 1143777.,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Duplicate name&signature"" problem",FELIX-3012,12511647,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,gonzalem,gonzalem,27/Jun/11 13:04,04/Feb/13 12:34,14/Mar/19 02:48,10/Jul/11 06:21,iPOJO-1.6.0,iPOJO-1.8.0,,,,,ipojo-manipulator-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"Using iPOJO, i stumbled upon a problem involving one of my components. When I tried to instantiate it, the JVM threw an exception saying that there was some ""duplicate name&signature"". After countless hours of hopeless search, I found by chance that I had getters and setters misspelled: instead of 'getAttName' I had 'getattName', so I believe that the iPOJO class processing creates methods that matched my misspelled ones, which lead to this coincidence. After I fixed the method names, everything worked as expected.

I hope this info can be useful for anyone who has the same problem.",Ubuntu Linux 2.6.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-27 16:50:50.625,,,no_permission,,,,,,,,,,,,55980,,,Sun Jul 10 06:21:38 UTC 2011,,,,,,0|i0vunz:,183941,,,,,,,,"27/Jun/11 16:50;clement.escoffier;Hi,

Could you provide a test case such as a class where I can reproduce the issue ?

Thanks","08/Jul/11 08:08;clement.escoffier;Hi,

Thanks to Guillaume Sauthier, I was able to reproduce the issue with:
{code}
public class ClusterDaemon {

    private ArrayList ControlledServersNames;

    public ArrayList getControlledServersNames() {
        return null;
    }
}
{code}

There is a name conflict when iPOJO generates the getter of the field and the interceptor of the method. So, as you stated in the description, modifying the name of the field fixes the issue. I will have a look.

","10/Jul/11 06:21;clement.escoffier;Fixed in trunk.

Changed the PREFIX of intercepted methods, to avoid potential conflicts with generated getters and setters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSS in Felix Web Console,FELIX-3010,12511353,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,chaotic,chaotic,23/Jun/11 12:46,23/Nov/12 06:54,14/Mar/19 02:48,16/Jul/11 17:29,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,console,felix,xss,,,http://localhost:4502/system/console/configMgr/%3Cscript%3Ealert(23);%3C/script%3E,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-16 17:29:49.064,,,no_permission,,,,,,,,,,,,55982,,,Fri Nov 23 06:54:48 UTC 2012,,,,,,0|i0rfjb:,158160,,,,,,,,"16/Jul/11 17:29;cziegeler;The pid and filter pid is now filtered against invalid characters
Changed in revision 1147461",23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Abstract classes as service specifications generates warnings at runtime,FELIX-3009,12511226,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,rmasson,rmasson,22/Jun/11 11:51,14/May/12 14:58,14/Mar/19 02:48,03/Jul/11 18:23,iPOJO-1.6.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"Hi,

For API compatibility reason, we're inclined to use only abstract classes, not interfaces.
Releasing a versioned API, we want pieces of software based against any further version of the API to remain compatible with previous API versions even if methods have been added. Using abstract methods, we provide default implementations for every new method, ensuring that pieces of software developped using this API remain usable.

We therefore end up having abstract classes both for @Requires and @Provides annotations.
We noticed runtime warnings are being printed by iPOJO.


Firstly, for service requirements, such warnings are printed:
	(ERROR) [WARNING] com.SomeComponent : Proxies cannot be used on service dependency targetting non interface service specification com.AnAbstractClass
Disabling proxies (through annotation parameters or the ""ipojo.proxy"" system property) prevents the warning from being printed. But shouldn't proxies still be working with abstract classes? I'm quoting Peter Kriens's answer to the mail I sent to the users mailing-list subject, ""Abstract classes as service specifications"": ""There is actually no technical reason why you could not proxy with classes as long as they're not final. With iPOJO's byte weaving capabilities already in place you can easily create a subclass."".
The matter here is therefore to know whether or not proxies should be disabled with non final classes, since iPOJO should be (is?) able to handle those.



Secondly, for service specifications, we get those:
	(ERROR) [WARNING] com.AnotherComponent : The specification com.AnAbstractClassSpecification is not implemented by com.AnotherComponent it might be a superclass or the class itself.
Although, when look at com.A implementation, we have:
public class AnotherComponent extends AbstractClassSpecificationWithAdditions
with 
public abstract class AbstractClassSpecificationWithAdditions extends AnAbstractClassSpecification

While it's true that the specification is not ""implemented"", it is still being provided. The specification is extended instead of being implemented.
I took a look at the code implementation, and this seems to be handled in ProvidedServiceHandler.java:
	all = computeInterfaces(serviceSpecification, parent, desc.getBundleContext().getBundle());
Where ""all"" is a Set of the known interfaces. When it'll go through the provided specifications, it will check if the provided interfaces are contained in that Set. If not, the warning is printed.
Could it be possible to also take a look at superclasses?

Filed this as a bug, because non interface service requirements seem to be handled already and I'm not sure the current behavior is expected. Might be an evolution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-27 16:54:06.345,,,no_permission,,,,,,,,,,,,55983,,,Mon May 14 14:58:28 UTC 2012,,,,,,0|i0vybb:,184532,,,,,,,,"27/Jun/11 16:54;clement.escoffier;Hi,

Do you mean the interfaces from the super class (should be done), or including the super class(es) into 'all' ?

Anyway, the warning should not be printed if the component class extends the super class","28/Jun/11 07:45;rmasson;Hi,

The interfaces from the super classes are already included, I think.
I did mean to include the super classes, one way or another. They could be added to the 'all' set, which would allow the current check not to print the warning.","03/Jul/11 18:23;clement.escoffier;Fixed in trunk.

Now, iPOJO collects extended classes and checks wether the defined specifications are part of the implemented interfaces, extended classes or the implementation class itself.",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ServiceRegistryCache when dependency manager bundle is not started first,FELIX-3008,12511210,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,22/Jun/11 08:58,22/Jun/11 12:30,14/Mar/19 02:48,22/Jun/11 12:11,dependencymanager-3.0.0,,,,,,,,,,,,,Dependency Manager,,,,,,0,,,,,,"When the Dependency Manager filter index is used, we get the following exception if the dependency manager bundle is not started before other bundles:

Caused by: java.lang.NullPointerException
       at org.apache.felix.dm.impl.index.ServiceRegistryCache.open(ServiceRegistryCache.java:53)
       at org.apache.felix.dm.DependencyManager.<clinit>(DependencyManager.java:93)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-22 12:11:36.24,,,no_permission,,,,,,,,,,,,55984,,,Wed Jun 22 12:30:37 UTC 2011,,,,,,0|i1auan:,271374,,,,,,,,"22/Jun/11 12:11;marrs;Committed a fix. Please review and test, Pierre.","22/Jun/11 12:30;pderop;I'm happy with the fix !
closing it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compatibility API does not add components in DependencyManager,FELIX-3005,12510936,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,20/Jun/11 10:17,20/Jun/11 10:19,14/Mar/19 02:48,20/Jun/11 10:19,,,,,,,,,,,,,,,,,,,,0,,,,,,"In the Dependency Manager compatibility API, the method ""DependencyManager.add(Service s)"" does not add the service in the
actual org.apache.felix.dm.DependencyManager, and directly starts the service. This is a bug because the service should
be added in the real DependencyManager class, and should not be started directly by the compat layer.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55987,,,Mon Jun 20 10:19:48 UTC 2011,,,,,,0|i1aub3:,271376,,,,,,,,20/Jun/11 10:19;pderop;fixed in committed revision 1137588.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Embed the OBR specific information for the EventAdmin bundle in the manifest,FELIX-3002,12510566,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,16/Jun/11 12:59,01/Aug/15 11:32,14/Mar/19 02:48,16/Jun/11 13:26,eventadmin-1.2.12,,,,,,eventadmin-1.2.14,,,,,,,Event Admin,,,,,,0,,,,,,So that the OBR information generated by the maven-bundle-plugin bindex goal is correct,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,40366,,,2011-06-16 12:59:41.0,,,,,,0|i0b3of:,62708,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[gogo] help command throws ClassCastException if any osgi.command.function service property is not String[],FELIX-3001,12510545,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,db82407,db82407,db82407,16/Jun/11 08:58,16/Jun/11 16:01,14/Mar/19 02:48,16/Jun/11 11:06,gogo.command-0.8.0,,,,,,gogo.command-0.10.0,,,,,,,Gogo Command,,,,,,0,,,,,,"java.lang.ClassCastException: java.lang.String cannot be cast to
[Ljava.lang.String;
       at org.apache.felix.gogo.command.Basic.getCommands(Basic.java:384)
       at org.apache.felix.gogo.command.Basic.help(Basic.java:211)
       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
       at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
       at java.lang.reflect.Method.invoke(Unknown Source)
       at
org.apache.felix.gogo.runtime.Reflective.method(Reflective.java:136)
       at",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-16 16:01:52.249,,,no_permission,,,,,,,,,,,,50950,,,Thu Jun 16 16:01:52 UTC 2011,,,,,,0|i1aubb:,271377,,,,,,,,16/Jun/11 16:01;rickhall;fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.NullPointerException during shutdown while sending events,FELIX-2997,12510400,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,abroekhuis,abroekhuis,15/Jun/11 06:31,01/Aug/15 11:33,14/Mar/19 02:48,13/Jul/11 13:59,eventadmin-1.2.12,,,,,,eventadmin-1.2.14,,,,,,,Event Admin,,,,,,0,,,,,,"During shutdown of the framework, and while sending events, the EventAdmin gives the following NPE:
Exception in thread ""Event Test Generator"" java.lang.NullPointerException
       at org.apache.felix.eventadmin.impl.handler.BlacklistingHandlerTasks.createHandlerTasks(BlacklistingHandlerTasks.java:116)
       at org.apache.felix.eventadmin.impl.EventAdminImpl.sendEvent(EventAdminImpl.java:108)
       at org.apache.felix.eventadmin.impl.security.EventAdminSecurityDecorator.sendEvent(EventAdminSecurityDecorator.java:94)
       at mc.product.x.test.eventgenerator.XGenerator$1.run(XGenerator.java:55)
       at java.lang.Thread.run(Thread.java:680)

The EventAdmin is tracked and injected using the DependencyManager.

It doesn't seem to be reproducible all the time, I tried to create a small testcase, but no luck so far.
",Felix 3.2.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-23 09:21:28.717,,,no_permission,,,,,,,,,,,,40379,,,Wed Jul 13 13:59:28 UTC 2011,,,,,,0|i0b3o7:,62707,,,,,,,,"23/Jun/11 09:21;cziegeler;Hi Alexander, 
I committed a potential fix in revision 1138785
Can you please verify if this fixes the NPE?",13/Jul/11 13:59;cziegeler;Works for me - therefore setting to fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The service properties are updated despite there is no changes,FELIX-2995,12510085,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,13/Jun/11 09:57,14/May/12 14:58,14/Mar/19 02:48,13/Jun/11 10:15,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,The service registration is updated with new properties despite there is no real changes in the properties to publish. We need to take care that the properties have changed before triggering the update.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55994,,,Mon May 14 14:58:26 UTC 2012,,,,,,0|i0vy47:,184500,,,,,,,,13/Jun/11 10:15;clement.escoffier;Fixed in trunk,14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] Bug introduced into handling of native libraries during a fresh,FELIX-2990,12509835,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,rickhall,rickhall,10/Jun/11 14:12,10/Jun/11 15:19,14/Mar/19 02:48,10/Jun/11 15:19,framework-3.0.6,,,,,,framework-4.0.0,,,,,,,Framework,,,,,,0,,,,,,"In FELIX-2560 we modified how we handled module identifiers to allow bundle resource URLs to survive a refresh. These changes introduced a potential bug for native library handling by not always re-naming the revision directory when refreshing a bundle. Thus, it is possible that bundles with native libraries won't be able to link the the native library after refresh since the path to the native library doesn't change. This only impacts refreshing a bundle that hasn't been updated (i.e., only has a single revision), updated bundles are refresh correctly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,55999,,,Fri Jun 10 15:19:37 UTC 2011,,,,,,0|i1aucn:,271383,,,,,,,,"10/Jun/11 15:19;rickhall;I've committed a fix, which also adds a minor optimization of only renaming revision directories of bundles with native libraries.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using a Service Controller set to true can trigger a service registration-unregistration-registration sequence,FELIX-2989,12509813,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,10/Jun/11 10:30,14/May/12 14:58,14/Mar/19 02:48,10/Jun/11 10:58,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"When using a service controller set to true, it is possible to get the following sequence:
* the service is registered because the service controller si set to true
* the service is unregistered during the 'regular' registration process (unregistering the service is already registered) <= issue here.
* the service is registered during the regular registration process

The unregistration should not happen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,56000,,,Mon May 14 14:58:26 UTC 2012,,,,,,0|i0vynb:,184586,,,,,,,,10/Jun/11 10:58;clement.escoffier;Fixed in trunk.,14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DependencyManager ConfigurationDependency update isn't propagated to super classes,FELIX-2987,12509667,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,marrs,abroekhuis,abroekhuis,09/Jun/11 05:36,07/Jul/11 06:29,14/Mar/19 02:48,20/Jun/11 16:39,dependencymanager-3.0.0,,,,,,,,,,,,,Dependency Manager,,,,,,0,,,,,,"When using the latest release of the dependency manager (3.0.0), configuration dependencies aren't propagated towards parent classes. For previous releases this used to work (2.0.1).
To reproduce:
- Have an abstract class which implements the ManagedService interface and has the updated() method
- Create a class which extends the previous abstract class
- Create a new DependencyManager component with the created class as component
- Add a configuration dependency to the component","Felix 3.2.2, ConfigAdmin 1.2.8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-20 16:39:19.759,,,no_permission,,,,,,,,,,,,56002,,,Thu Jul 07 06:29:00 UTC 2011,,,,,,0|i1aucv:,271384,,,,,,,,"20/Jun/11 16:39;marrs;Added a test and fix for this issue.
Please test and close if ok.",07/Jul/11 06:29;abroekhuis;Tested and works. Thanks. Any idea when it will be available in a release?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.felix.prefs: org.osgi.service.log should not be mandatory,FELIX-2984,12509321,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,andrei.pozolotin,andrei.pozolotin,05/Jun/11 20:02,15/Oct/16 13:55,14/Mar/19 02:48,10/Oct/16 20:09,prefs-1.0.4,,,,,,prefs-1.1.0,,,,,,,Preferences Service,,,,,,0,,,,,,"it is not clear why

org.osgi.service.log should not be mandatory dependency for org.apache.felix.prefs

?

currently:

###############################################################

Manifest-Version: 1.0
Built-By: cziegeler
Bundle-Activator: org.apache.felix.prefs.impl.PreferencesManager
Created-By: Apache Maven Bundle Plugin
Bundle-License: http://www.apache.org/licenses/LICENSE-2.0.txt
Import-Package: org.apache.felix.prefs,org.osgi.framework,org.osgi.ser
 vice.log;version=""1.3"",org.osgi.service.prefs;version=""1.1"",org.osgi.
 util.tracker;version=""1.3""
Bnd-LastModified: 1253171053531
Export-Package: org.osgi.service.prefs;version=""1.1"",org.apache.felix.
 prefs;uses:=""org.osgi.service.prefs""
Bundle-Version: 1.0.4
Bundle-Name: Apache Felix Preferences Service
Bundle-Description: Implementation of the OSGi Preferences Service Spe
 cification 1.1
Build-Jdk: 1.5.0_20
Private-Package: org.apache.commons.codec,org.apache.commons.codec.bin
 ary,org.apache.felix.prefs.impl
Bundle-DocURL: http://www.apache.org/
Bundle-ManifestVersion: 2
Bundle-Vendor: The Apache Software Foundation
Bundle-SymbolicName: org.apache.felix.prefs
Tool: Bnd-0.0.238
Bundle-Category: osgi

###############################################################
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-10 20:09:25.905,,,no_permission,,,,,,,,,,,,50954,,,Mon Oct 10 20:09:25 UTC 2016,,,,,,0|i1audb:,271386,,,,,,,,"10/Oct/16 20:09;cziegeler;The log service is not used at all, therefore I removed the import completely",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WireAdmin doesn't export 'org.osgi.service.wireadmin',FELIX-2983,12509266,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,ancoron,ancoron,04/Jun/11 10:44,12/Aug/11 01:42,14/Mar/19 02:48,11/Aug/11 20:57,,,,,,,wireadmin-0.10.0,,,,,,,Wire Admin,,,,,,0,patch,,,,,"Currently, the wireadmin does not export 'org.osgi.service.wireadmin', in contrast to every other ""add-on"" service implementation.",trunk (REV: 1130978),,,,,,,,,,,,,,,,,,,04/Jun/11 10:45;ancoron;wireadmin.patch;https://issues.apache.org/jira/secure/attachment/12481448/wireadmin.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-11 20:57:50.159,,,no_permission,,,,,,,,,,,,56005,,,Fri Aug 12 01:42:21 UTC 2011,,,,,,0|i1audj:,271387,,,,,,,,04/Jun/11 10:45;ancoron;Attached a patch to also upgrade dependencies and parent.,"11/Aug/11 20:57;rickhall;I basically committed your patch. I didn't change the OSGi API dependencies to be the latest, since we should use the lowest version necessary. I also didn't explicitly set the import, since this is generated correctly, nor did I export the wireadmin package since it is just implementation details. Please close if you are satisfied. Thanks.","12/Aug/11 01:42;ancoron;Thanx for applying the changes.

As long as the API package is being exported it is fine for me. :-) Closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
noInitialDelay option does not work,FELIX-2982,12509216,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,janstey,janstey,03/Jun/11 18:01,17/Mar/15 07:00,14/Mar/19 02:48,07/Jun/11 06:58,fileinstall-3.1.10,,,,,,fileinstall-3.2.0,,,,,,,File Install,,,,,,1,,,,,,"The noInitialDelay option currently does not work - bundles are installed immediately regardless of the option's value. To reproduce this, I used Apache Karaf 2.2.1, which uses fileinstall 3.1.10. I edited the etc/org.apache.felix.fileinstall-deploy.cfg file to something like this:

{code}
felix.fileinstall.dir     = ${karaf.base}/deploy
felix.fileinstall.tmpdir  = ${karaf.data}/generated-bundles
felix.fileinstall.poll    = 10000
felix.fileinstall.noInitialDelay = false
{code}

I expected the jar I had in the deploy dir (http://repo1.maven.org/maven2/org/apache/camel/camel-core/2.7.2/camel-core-2.7.2.jar) to be installed 10 seconds after the container starts with this config, however it is installed immediately.

Attaching a proposed fix for this shortly.",fileinstall 3.1.10,,,,,,,,,,,,,,,,,,,03/Jun/11 18:02;janstey;FELIX-2982.patch;https://issues.apache.org/jira/secure/attachment/12481381/FELIX-2982.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-06 12:50:35.669,,,no_permission,,,,,,,,,,,,40372,,,Tue Jun 07 06:58:37 UTC 2011,,,,,,0|i0apvb:,60464,,,,,,,,"06/Jun/11 12:50;gnt;Yeah, I think the patch makes sense.   I'll apply it asap.","06/Jun/11 13:01;gnt;Though, the problem is that it would change the original behavior, so maybe introducing a new parameter would be better.","06/Jun/11 13:17;janstey;Yeah, I'm fine with a new parameter for this.","06/Jun/11 14:06;sahoo;1. The change looks fine except that why not sleep(poll) before calling initializeCurrentManagedBundles()? 
2. Because directory watcher thread could be scheduled after any amount of delay, the existing code does not ensure any lower bound for initial delay. In such a case, I don't think there is really a change in promised behavior. Why should we add yet another option in FileInstall, which is supposed to be a simple management agent? ",06/Jun/11 14:13;janstey;I used Thread.sleep instead of wait(poll) because FileInstall will call notify on the DirectoryWatcher in its initial wait(poll) call every time so there will never be an initial delay.,"06/Jun/11 14:17;janstey;Also, I'm fine with adding the delay before initializeCurrentManagedBundles(), though I haven't tested if this will change the behavior.","06/Jun/11 14:31;gnt;@sahoo: the noInitialDelay has this particular purpose as the first scan is executed in the same thread when the flag is set to true.
It was introduced to minimize the latency and make sure you could somewhat control a bit more what's going on, especially when the provisioning is not only done with fileinstall, which i think is the root of the problems.

If nobody thinks keeping the old behavior is important, we definitely do not need the delay, but i thought that would prevent possible behavioral changes.","06/Jun/11 15:28;sahoo;I understand the effect of noInitialDelay=true, but this bug is about noInitialDelay=false. When noInitialDelay=false, since currently there is no guaranteed lower bound for initial delay, I don't see what behavior we are breaking by introducing a lower bound for the delay.","06/Jun/11 16:08;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java
Committed r1132690

Patch from Jon improved with Sahoo suggestions.","06/Jun/11 16:11;janstey;Great, thanks guys.","06/Jun/11 18:00;sahoo;On a second look, I think there is a bug in the patch. Upon InterruptedException, it does not return from run(), it merely logs the exception. Please fix this.",06/Jun/11 18:28;gnt;Fixed,07/Jun/11 03:39;sahoo;Did you forget to mark it RESOLVED?,"07/Jun/11 06:58;gnt;Thx, I did not noticed you actually re-opened it, I thought it was just a comment.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to remove configuration properties using iPOJO's configuration handler,FELIX-2981,12509164,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,roblillack,roblillack,03/Jun/11 09:32,14/May/12 14:58,14/Mar/19 02:48,08/Oct/11 15:16,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,1,,,,,,"Hi,

using iPOJO's _very nice_ OSGi Configuration Admin integration I sadly seem unable to remove any properties from a configuration to ""reset"" this property back to it's default value. Comparing the following two classes---one using iPOJO the other one directly implementing the ManagedService interface ...

@Component(managedservice = ""example1"")
@Instantiate
public class Example1 {
    
    @Property
    private String key;
    
    @Updated
    private void updated() {
        System.out.format(""example1 = %s\n"", key);
    }
}

@Component
@Instantiate
public class Example2 implements ManagedService {
    BundleContext ctx;
    
    public Example2(BundleContext c) {
        ctx = c;
    }
    
    @Validate
    public void start() {
        ctx.registerService(ManagedService.class.getName(), this, getDefaults());
    }

    private Hashtable getDefaults() {
        Hashtable defaults = new Hashtable();
        defaults.put(Constants.SERVICE_PID, ""example2"");
        return defaults;
    }

    @Override
    public void updated(Dictionary properties) throws ConfigurationException {
        System.out.format(""example2 = %s\n"", properties == null ? null : properties.get(""key""));
    }
}


... with the code setting the properties looking like this ...

    public void set(String value) throws Exception {
        setProperty(""example1"", value);
        setProperty(""example2"", value);
    }
    
    public void unset() throws Exception {
        setProperty(""example1"", null);
        setProperty(""example2"", null);
    }
    
    private void setProperty(String srv, String value) throws IOException {
        Configuration cfg = configAdmin.getConfiguration(srv, null); 
        Dictionary p = cfg.getProperties();
        if (p == null) {
            p = new Properties();
        }
        
        if (value == null) {
            p.remove(""key"");
        } else {
            p.put(""key"", value);
        }
        cfg.update(p);
    }

... these are the results after calling set(""qsdasdasd"") followed by unset():

example1 = qsdasdasd
example2 = qsdasdasd
example1 = qsdasdasd
example2 = null

Am I using iPOJO the wrong way here? Thanks!","* Apache Felix Bundle Repository (1.6.0)
* Apache Felix Configuration Admin Service (1.2.8)
* Apache Felix Gogo Runtime (0.8.0)
* Apache Felix iPOJO (1.8.0)
* Apache Felix iPOJO Annotations (1.8.0)
* iPOJO Metadata (1.4.0)
* Apache Felix Preferences Service (1.0.4)
",,,,,,,,,,,,,,,,,,,06/Oct/11 15:38;roblillack;felix-2981-2.patch;https://issues.apache.org/jira/secure/attachment/12498013/felix-2981-2.patch,27/Sep/11 14:55;roblillack;felix-2981.patch;https://issues.apache.org/jira/secure/attachment/12496694/felix-2981.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-06-07 07:16:16.8,,,no_permission,,,,,,,,,,,,19384,,,Mon May 14 14:58:24 UTC 2012,,,,,,0|i1audr:,271388,,,,,,,,"07/Jun/11 07:16;clement.escoffier;Hi,

It's a bug. This behavior is working for service properties but not for plain properties. It should be the case. I will have a look ASAP. ","27/Sep/11 14:55;roblillack;Please consider the attached patch (to be applied in core/).

I simply introduced a default value for each property which gets used if the corresponding property value is missing from the configuration. As reconfigureProperty() checks for configuration changes, no needless reconfigurations are introduced and that's all there's to do, IMHO.","02/Oct/11 09:09;clement.escoffier;Hi,

I've applied the patch and ran the tests successfully. 

I've also deployed a version of iPOJO Core containing the fix:
https://repository.apache.org/content/repositories/snapshots/org/apache/felix/org.apache.felix.ipojo/1.9.0-SNAPSHOT/org.apache.felix.ipojo-1.9.0-20111002.090757-2.jar

Thanks for this fix !","06/Oct/11 15:38;roblillack;It seems like I introduced a bug here, upon creation of an instance without configuration an unnecessary REconfiguration takes place, which breaks:

[ERROR]  : Cannot call the updated method : null 
java.lang.NullPointerException
        at java.util.Hashtable.put(Hashtable.java:394)
        at org.apache.felix.ipojo.handlers.configuration.ConfigurationHandler.__notifyUpdated(ConfigurationHandler.java:551)
        at org.apache.felix.ipojo.handlers.configuration.ConfigurationHandler.notifyUpdated(ConfigurationHandler.java)
        at org.apache.felix.ipojo.handlers.configuration.ConfigurationHandler.__onCreation(ConfigurationHandler.java:510)
        at org.apache.felix.ipojo.handlers.configuration.ConfigurationHandler.onCreation(ConfigurationHandler.java)

The culprit is, that defaultValue() will return a real _injectable_ value which in turn is then fed into setValue() because equality cannot be checked anymore in reconfigureProperty(). I therefore propose the application of a second patch which fixes this behavior.","08/Oct/11 15:13;clement.escoffier;Hi, I've applied your second patch and had a closer look. IT looks good now. I plan to implement some tests to avoid future regression. Thanks !",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr failed. NullPointerException,FELIX-2980,12508836,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,andrei.pozolotin,andrei.pozolotin,31/May/11 14:54,28/Jul/11 08:54,14/Mar/19 02:48,23/Jun/11 08:21,,,,,,,maven-scr-plugin-1.7.2,scr generator 1.1.2,,,,,,SCR Tooling,,,,,,0,,,,,,"            public Class<?>[] value() {
                return Util.getClassArrayValue(annotation, ""value"", Service.class, desc.getClassLoader()); // line #80
            }



[ERROR] Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr (scr) on project barchart-plugin-core: Execution scr of goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr failed. NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr (scr) on project barchart-plugin-core: Execution scr of goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr failed.
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:225)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:534)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution scr of goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr failed.
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:116)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.apache.felix.scrplugin.tags.annotation.defaulttag.ServiceTag$1.value(ServiceTag.java:80)
	at org.apache.felix.scrplugin.tags.annotation.defaulttag.ServiceTag.createServiceTags(ServiceTag.java:87)
	at org.apache.felix.scrplugin.tags.annotation.defaulttag.DefaultAnnotationTagProvider.getTags(DefaultAnnotationTagProvider.java:50)
	at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:159)
	at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.getTags(AnnotationTagProviderManager.java:141)
	at org.apache.felix.scrplugin.tags.annotation.AnnotationTagProviderManager.hasScrPluginAnnotation(AnnotationTagProviderManager.java:176)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:396)
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getSourceDescriptions(JavaClassDescriptorManager.java:365)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:234)
	at org.apache.felix.scrplugin.mojo.SCRDescriptorMojo.execute(SCRDescriptorMojo.java:184)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:107)
	... 20 more

",,,,,,,,,,,,,,,,FELIX-3041,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-06 12:49:29.571,,,no_permission,,,,,,,,,,,,56006,,,Tue Jun 14 20:47:12 UTC 2011,,,,,,0|i0vwpj:,184272,,,,,,,,06/Jun/11 12:49;cziegeler;This has been introduced with a fix for another bug - it should work now.,"06/Jun/11 17:01;andrei.pozolotin;yes, NPE is gone, but my old problem FELIX-2948 is back, except there is no stack trace now:

6/6/11 11:52:32 AM CDT: Build errors for barchart-plugin-core; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr (scr) on project barchart-plugin-core: Execution scr of goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr failed.


########################################################################


6/6/11 11:52:32 AM CDT: [DEBUG] Configuring mojo org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr from plugin realm ClassRealm[plugin>org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT-2116311020, parent: sun.misc.Launcher$AppClassLoader@63c78e57]
6/6/11 11:52:32 AM CDT: [DEBUG] Configuring mojo 'org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr' with basic configurator -->
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) finalName = serviceComponents.xml
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) generateAccessors = true
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) metaTypeName = metatype.xml
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) outputDirectory = /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/target/classes
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) parseJavadoc = true
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) processAnnotations = true
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) project = MavenProject: com.barchart.platform:barchart-plugin-core:1.0.1-SNAPSHOT @ /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/pom.xml
6/6/11 11:52:32 AM CDT: [DEBUG]   (f) strictMode = false
6/6/11 11:52:32 AM CDT: [DEBUG] -- end configuration --
6/6/11 11:52:32 AM CDT: [DEBUG] Starting SCRDescriptorMojo....
6/6/11 11:52:32 AM CDT: [DEBUG] ..generating accessors: true
6/6/11 11:52:32 AM CDT: [DEBUG] ..parsing javadocs: true
6/6/11 11:52:32 AM CDT: [DEBUG] ..processing annotations: true
6/6/11 11:52:32 AM CDT: [DEBUG] ..auto detecting spec version
6/6/11 11:52:32 AM CDT: [DEBUG] Setting up QDox
6/6/11 11:52:32 AM CDT: [DEBUG] Scanning source tree /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/test/TestPlugin.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/test/BasePluginEDT.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/shutdown/ShutdownWindow.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/shutdown/ShutdownPlugin.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/session/SessionPlugin.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/session/SessionPane.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/config/ConfigPlugin.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/ui/DefaultApplicationWindow.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/ui/DefaultApplicationUI.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/system/HostSystemServiceProvider.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/space/TabbedWorkspaceContainer.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/space/TabbedWorkspaceManager.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/space/DefaultPluginWorkspaceFactory.java
6/6/11 11:52:32 AM CDT: [DEBUG] Adding source file /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/src/main/java/com/barchart/plugin/core/space/DefaultPluginWorkspace.java
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.test.TestPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Found qdox description for: com.barchart.plugin.core.test.TestPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.test.BasePluginEDT
6/6/11 11:52:32 AM CDT: [DEBUG] Found java annotation description for: com.barchart.plugin.core.test.BasePluginEDT
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.shutdown.ShutdownWindow
6/6/11 11:52:32 AM CDT: [DEBUG] Found qdox description for: com.barchart.plugin.core.shutdown.ShutdownWindow
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.shutdown.ShutdownPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Found java annotation description for: com.barchart.plugin.core.shutdown.ShutdownPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.session.SessionPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Found java annotation description for: com.barchart.plugin.core.session.SessionPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.session.SessionPane
6/6/11 11:52:32 AM CDT: [DEBUG] Found qdox description for: com.barchart.plugin.core.session.SessionPane
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.config.ConfigPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Found java annotation description for: com.barchart.plugin.core.config.ConfigPlugin
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.ui.DefaultApplicationWindow
6/6/11 11:52:32 AM CDT: [DEBUG] Found qdox description for: com.barchart.plugin.core.ui.DefaultApplicationWindow
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.ui.DefaultApplicationUI
6/6/11 11:52:32 AM CDT: [DEBUG] Found java annotation description for: com.barchart.plugin.core.ui.DefaultApplicationUI
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.system.HostSystemServiceProvider
6/6/11 11:52:32 AM CDT: [DEBUG] Found java annotation description for: com.barchart.plugin.core.system.HostSystemServiceProvider
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.space.TabbedWorkspaceContainer
6/6/11 11:52:32 AM CDT: [DEBUG] Found qdox description for: com.barchart.plugin.core.space.TabbedWorkspaceContainer
6/6/11 11:52:32 AM CDT: [DEBUG] Searching description for: com.barchart.plugin.core.space.TabbedWorkspaceManager
6/6/11 11:52:32 AM CDT: Build errors for barchart-plugin-core; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr (scr) on project barchart-plugin-core: Execution scr of goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr failed.

########################################################################
","06/Jun/11 17:04;andrei.pozolotin;same project builds fine with

			<dependency>
				<groupId>org.apache.felix</groupId>
				<artifactId>org.apache.felix.scr.annotations</artifactId>
				<version>1.5.0</version>
				<optional>true</optional>
			</dependency>

				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-scr-plugin</artifactId>
					<version>1.7.0</version>
				</plugin>
","07/Jun/11 07:15;cziegeler;Hi Andrei,

can you either send me your project or try adding a catch (Throwable) in JavaClassDescriptorManager line 409 and just log the exception there?

Thanks!","08/Jun/11 14:33;andrei.pozolotin;now I am getting NPE again :-)

it seems the repo is back to previous snapshot 2011-05-17:
https://repository.apache.org/content/groups/snapshots/org/apache/felix/maven-scr-plugin/1.7.1-SNAPSHOT/maven-scr-plugin-1.7.1-20110517.073734-2.pom

can you please publish a fresh build? (the dates on pom & jar do not look right)",12/Jun/11 09:38;cziegeler;I've now pulished the latest snapshots,"14/Jun/11 20:47;andrei.pozolotin;yes, switch to:

maven-scr-plugin-1.7.1-20110611.122016-3.pom 	Sat Jun 11 12:21:58 UTC 2011 	3487 	  

resolves both issues; thank you!

			<dependency>
				<groupId>org.apache.felix</groupId>
				<artifactId>org.apache.felix.scr.annotations</artifactId>
				<version>1.5.3-SNAPSHOT</version>
				<optional>true</optional>
			</dependency>

				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-scr-plugin</artifactId>
					<version>1.7.1-SNAPSHOT</version>
				</plugin>

				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<version>2.3.5-SNAPSHOT</version>
					<extensions>true</extensions>
				</plugin>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Declarative Services Components page only displayed if Configuration Admin and Metatype Service API is available,FELIX-2979,12508820,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,fmeschbe,fmeschbe,31/May/11 11:45,23/Nov/12 06:54,14/Mar/19 02:48,31/May/11 11:49,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"The Declarative Services Components page optionally displays a link to the Configuration page if the component can be configured. This requires the Configuration Admin or Metatype Service and their API to be available. If the services are not available or the API cannot be bound, the component shold still be shown but the configuration link be ommitted.

Currently the complete DS Components page is not shown if either or both of Configuration Admin and Metatype Service API packages are missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,56007,,,Fri Nov 23 06:54:46 UTC 2012,,,,,,0|i0rfnb:,158178,,,,,,,,31/May/11 11:49;fmeschbe;Fixed in Rev. 1129635 by using string literals instead of class literals to define the service names,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lookup reference policy does not work for inherited components,FELIX-2978,12508790,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,hipa,hipa,31/May/11 05:34,28/Jul/11 08:54,14/Mar/19 02:48,06/Jun/11 14:20,maven-scr-plugin-1.7.0,scr ant task 1.1.0,scr generator 1.1.0,,,,maven-scr-plugin-1.7.2,scr ant task 1.1.2,scr generator 1.1.2,,,,,SCR Tooling,,,,,,0,,,,,,"org.apache.felix.scrplugin.xml.ComponentDescriptorIO.generateXML(final String namespace,Reference reference, ContentHandler contentHandler, boolean isScrPrivateFile)
does not save strategy property of a reference.
org.apache.felix.scrplugin.xml.ComponentDescriptorIO.XmlHandler.startElement(String uri, String localName, String name, Attributes attributes)
does not load strategy property of a reference.

However org.apache.felix.scrplugin.SCRDescriptorGenerator.execute() uses Reference.isLookupStrategy() to determine the reference's strategy.",,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-06 14:20:28.471,,,no_permission,,,,,,,,,,,,56008,,,Mon Jun 06 14:20:28 UTC 2011,,,,,,0|i0vwpb:,184271,,,,,,,,06/Jun/11 14:20;cziegeler;Fixed in revision 1132653,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nearly all imports are marked as optional,FELIX-2974,12508396,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,cziegeler,cziegeler,26/May/11 07:23,13/Jun/14 09:27,14/Mar/19 02:48,12/Feb/14 13:33,http-2.2.0,,,,,,,,,,,,,HTTP Service,,,,,,0,,,,,,"The http bridge bundle marks nearly all imports as optional, including framework, its exported api, service tracker etc.
I guess without most of these, the bundle does not work at all",,,,,,,,,,,,,,,,,,,,10/Dec/12 19:46;mtheiss;FELIX-2974_1.patch;https://issues.apache.org/jira/secure/attachment/12560255/FELIX-2974_1.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-12 13:33:54.049,,,no_permission,,,,,,,,,,,,56012,,,Wed Feb 12 13:33:54 UTC 2014,,,,,,0|i14hgf:,234291,,,,,,,,"12/Feb/14 13:33;jajans;Cleaned up the import and exports for all bundles. Now only a ""bare minimum"" of packages is marked as optional. See rev #1567618.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuration changes cannot be made via Felix Web Console in IE7,FELIX-2971,12508198,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,christanto,christanto,24/May/11 14:37,23/Nov/12 06:54,14/Mar/19 02:48,30/May/11 11:18,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"Configuration changes cannot be made via Felix Web Console in IE7.

Step to replicate:
1. Log inside http://localhost/system/console/configMgr
2. Click one of the config to open the edit window
3. Modify a value
4. Save
5. Reopen the edit window, note that the value is still the same as before

This is due to the fact IE7 is not allowing name to be set. See [1].

Attached is the patch.

[1] http://bugs.jquery.com/ticket/4691",IE7,,,,,,,,,,,,,,,,,,,24/May/11 14:45;christanto;support.patch;https://issues.apache.org/jira/secure/attachment/12480261/support.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-30 11:18:00.742,,,no_permission,,,,,,,,,,,,56015,,,Fri Nov 23 06:54:45 UTC 2012,,,,,,0|i0rfpz:,158190,,,,,,,,"30/May/11 11:18;fmeschbe;Thanks for providing the patch.

Applied it in Rev. 1129126",30/May/11 11:18;fmeschbe;Fixed.,23/Nov/12 06:54;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DM/ Factory Configuration Adapter Service does not copy adapter dependencies,FELIX-2970,12508160,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,24/May/11 10:02,24/May/11 10:06,14/Mar/19 02:48,24/May/11 10:06,,,,,,,,,,,,,,Dependency Manager,,,,,,0,,,,,,"When defining a Factory Configuration Adapter Service which also has some dependencies, then these extra dependencies
are shared by all services created by the adapter.

This is a bug, and the extra-dependencies should be cloned/copied and each created service should have its own copy of the adapter dependencies.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,56016,,,Tue May 24 10:06:05 UTC 2011,,,,,,0|i1auen:,271392,,,,,,,,24/May/11 10:06;pderop;Committed a patch in revision 1126961.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scr annotations @Activate @Deactivate @Modified are not detected with class inheritance,FELIX-2963,12507953,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,andrei.pozolotin,andrei.pozolotin,21/May/11 02:22,15/Nov/11 16:19,14/Mar/19 02:48,16/Aug/11 07:45,maven-scr-plugin-1.7.0,maven-scr-plugin-1.7.2,scr ant task 1.0.0,scr ant task 1.1.2,scr generator 1.1.0,scr generator 1.1.2,maven-scr-plugin-1.7.4,scr ant task 1.1.4,scr generator 1.1.4,,,,,SCR Tooling,,,,,,1,,,,,,"// 1)  when I use a base component with scr lifecycle annotations:

@Component(componentAbstract = true)
public abstract class BasePluginEDT {

	@Activate
	protected final void activateEDT(final Map<String, String> config) {

	@Deactivate
	protected final void deactivateEDT(final Map<String, String> config) {

	@Modified
	protected final void modifiedEDT(final Map<String, String> config) {

// 2) which is inherited by a derived component:

@Service
@Component(name = PluginSpaceService.PID, policy = ConfigurationPolicy.REQUIRE, immediate = true)
public class BucketPlugin extends BasePluginEDT implements PluginSpaceService {


// 3) then xml for the derived component does not show annotated methods from the parent

    <scr:component enabled=""true"" immediate=""true"" name=""barchart.service.space"" configuration-policy=""require"">
        <implementation class=""com.ddfplus.core.space.BucketPlugin""/>
        <service servicefactory=""false"">
            <provide interface=""com.ddfplus.api.plugin.PluginSpaceService""/>
        </service>
        <property name=""service.pid"" type=""String"" value=""barchart.service.space""/>
        <reference name=""beanService"" interface=""com.ddfplus.api.host.HostBeanService"" cardinality=""1..1"" policy=""static"" bind=""bind"" unbind=""unbind""/>
        <reference name=""dispService"" interface=""com.ddfplus.api.host.HostDisplayService"" cardinality=""1..1"" policy=""static"" bind=""bind"" unbind=""unbind""/>
    </scr:component>
",,,,,,,,,,,,,,,,,,,,10/Aug/11 08:58;chetanm;scr-bug2.zip;https://issues.apache.org/jira/secure/attachment/12489953/scr-bug2.zip,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-06 11:31:46.276,,,no_permission,,,,,,,,,,,,56022,,,Tue Aug 16 07:45:24 UTC 2011,,,,,,0|i1auf3:,271394,,,,,,,,06/Jun/11 11:31;cziegeler;Can you please strip down the example and either attach the complete project to this bug or send it to me directly?,"06/Jun/11 16:40;andrei.pozolotin;Carsten:

here is a project:
https://github.com/carrot-garden/carrot-bugger/tree/master/carrot-bug-FELIX-2963-001

base class:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-FELIX-2963-001/src/main/java/bench/CompBase.java

class inherited from base:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-FELIX-2963-001/src/main/java/bench/CompInherited.java

result xml:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-FELIX-2963-001/example/serviceComponents.xml

steps to reproduce:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-FELIX-2963-001/launch/reproduce.sh

problem:
activate / deactivate annotations are present on the base class, but they do not make it into xml when inherited;

thanks again,

Andrei.","07/Jun/11 08:40;cziegeler;Thanks for the test project! I've committed a patch in revision 1132907 - I think everything is working fine. Could you please verify this?
",08/Jun/11 14:52;andrei.pozolotin;still does not work for me; probably I have wrong snapshot: maven-scr-plugin-1.7.1-20110517.073734-2.jar (latest from the repo) ?,"14/Jun/11 21:19;andrei.pozolotin;wow! getting close! 
(after update to the latest snapshot of scr plugin)
it DOES work, when @Component(componentAbstract = true) is located in the same bundle as derived component;
but it does NOT work if the parent is located in a different bundle; thank you.
","14/Jun/11 21:30;andrei.pozolotin;probably again has to do with exploded jar:

this error happens when building derived project only in eclipse with m2e:

6/14/11 4:24:32 PM CDT: Maven Builder: AUTO_BUILD 
6/14/11 4:24:32 PM CDT: [INFO] Using 'UTF-8' encoding to copy filtered resources.
6/14/11 4:24:32 PM CDT: [INFO] Copying 8 resources
6/14/11 4:24:32 PM CDT: [INFO] Copying 8 resources
6/14/11 4:24:32 PM CDT: [WARN] Unable to read SCR descriptor file from JAR File /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-backend/barchart-backend-api/target/classes at OSGI-INF/serviceComponents.xml
6/14/11 4:24:32 PM CDT: [WARN] Unable to read SCR descriptor file from JAR File /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-backend/barchart-backend-api/target/classes at OSGI-INF/serviceComponents.xml
6/14/11 4:24:33 PM CDT: [INFO] Writing abstract service descriptor /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/target/classes/OSGI-INF/scr-plugin/scrinfo.xml with 22 entries.
6/14/11 4:24:33 PM CDT: [INFO] Generating 22 Service Component Descriptors to /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/target/classes/OSGI-INF/serviceComponents.xml
6/14/11 4:24:33 PM CDT: [INFO] Using 'UTF-8' encoding to copy filtered resources.
6/14/11 4:24:33 PM CDT: [INFO] Copying 0 resource


this project contains parent:

6/14/11 4:24:32 PM CDT: [WARN] Unable to read SCR descriptor file from JAR File /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-backend/barchart-backend-api/target/classes at OSGI-INF/serviceComponents.xml

this project  contains derived:

6/14/11 4:24:33 PM CDT: [INFO] Generating 22 Service Component Descriptors to /home/user1/Workspaces/barchart-3.6-work/barchart-platform/barchart-plugin-core/target/classes/OSGI-INF/serviceComponents.xml

and in the parent - the serviceComponents.xml is present, but it contains no entries for @Component(componentAbstract = true) 
(only for some other non-abstract components)

so, basically scr plugin is either not able to find parent abstarct component descriptor or can not read parent xml at all
","14/Jun/11 21:38;andrei.pozolotin;idea: another possible cause:

I use these method names in derived:

	protected abstract void activate(Map<String, String> config)
			throws Exception;

	protected abstract void deactivate(Map<String, String> config)
			throws Exception;

	protected abstract void modified(Map<String, String> config)
			throws Exception;

chances are, since they are default names of these methods, (only w/o annotations)
they might overshadow something somewhere :-)
","23/Jun/11 08:20;cziegeler;Hi Andrei, can you turn on debug logging - this should show the exception when trying to read the serviceComponents.xml",13/Jul/11 14:40;cziegeler;I think this is fixed now. If not we can track the new problem with a new issue,"10/Aug/11 07:22;chetanm;I am facing the same issue. I tried to debug it and following flow is happening

1. org.apache.felix.scrplugin.SCRDescriptorGenerator#checkLifecycleMethod is called with ""activate""
2. It invokes the desc.getTagByName( Constants.COMPONENT )
3. The desc in this case is org.apache.felix.scrplugin.tags.cl.ClassLoaderJavaClassDescription#getTagByName

This method implementation is currently empty. However the component field has the required activate method name populated. So may be we need to use logic as done in getTagsByName","10/Aug/11 07:23;cziegeler;Reopening
","10/Aug/11 08:58;chetanm;Sample Maven project. If you build it then you can see the serviceComponents.xml in the moduleB has a reference entry (inherited from parent) but no entry for activate method.

However  if you see scrinfo.xml in moduleA then it has entry for activate method","11/Aug/11 11:53;cziegeler;Hi Chetan,

thanks for the information and sample project. I've implemented the getTagByName method in revision 1156580 and at least your test project runs fine now. I think we should give it some test drives before closing this.",16/Aug/11 07:04;chetanm;Thanks Carsten for the fix. I verified the fix by setting org.apache.felix:org.apache.felix.scr.generator:1.1.3-SNAPSHOT as the dependency on maven-bundle-plugin and it works as expected,"16/Aug/11 07:45;cziegeler;Thanks Chetan, so I set this to resolved :)",,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR doesn't detect invalid XML,FELIX-2962,12507912,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,pimlott,pimlott,20/May/11 19:00,20/Nov/12 10:58,14/Mar/19 02:48,05/Jun/11 13:03, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,xml,,,,,"The XML parser (kxml2) used by SCR doesn't detect many forms of incorrect XML, even basic errors like mismatched start and end tags.  This makes diagnosing component load errors very frustrating.  Please use a real XML parser.  It will save developers a lot of pain.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-23 10:18:43.767,,,no_permission,,,,,,,,,,,,56023,,,Tue Nov 20 10:58:13 UTC 2012,,,,,,0|i0l4af:,121345,,,,,,,,"23/May/11 10:18;fmeschbe;Thanks for reporting.

We use a ""real"" parser since KXml is a fast, light-weight, real parser. Hence I do not consider replacing the parser at this point in time.

But, I admit, that error reporting my be improved and you could help us do that !

If you could provide invalid XML and state the expected behaviour (in terms of logging, I would assume), this would help use improving error reporting. Thanks alot !

","23/May/11 20:09;pimlott;I can immediately offer (each line a complete example of a malformed XML file accepted by Felix SCR):

<a>
</a>
<a><b></a></b>

The XML 1.1 spec says that XML processors ""must report violations of this specification's well-formedness constraints"".  I would expect that if any of these were used as a Service-Component, I would get an exception about malformed XML from Bundle.start.

Beyond the correctness issue, quality of diagnostics is a key differentiator between implementations of OSGi, since they all follow the same spec.  I filed this issue because I got a totally misleading error message when I tried to start my bundle, where the root cause was malformed XML.  Worse, I want to write a program on top of Felix that accepts bundles.  If I can't provide accurate diagnostics to users about errors in their bundles, it hurts the quality of my program.","24/May/11 07:18;fmeschbe;Thanks for the samples. We can see what we can do.

>  I filed this issue because I got a totally misleading error message when I tried to start my bundle, where the root cause was malformed XML

Understandable. But you have to also understand that we cannot fix things if you don't show what is broken.

For example ""attached file xxx is broken XML and the message I got logged was yyy.""

Thanks for your comprehension.","24/May/11 20:00;pimlott;You're right, I should give a real-world example.  The one that tripped me is copy-n-pasted from page 145 of the OSGi 4.2 Enterprise Specification:

  <xml version=""1.0"" encoding=""UTF-8"">
  <scr:component name=""example.handler""
     xmlns:scr=""http://www.osgi.org/xmlns/scr/v1.1.0"">
     <implementation class=""com.acme.HandlerImpl""/>
     <property name=""event.topics"">some/topic</property>
     <service>
        <provide interface=
           ""org.osgi.service.event.EventHandler""/>
     </service>
  <scr:component>

Note the typo where the final tag is an open tag instead of a close.  (I reported this to OSGi: https://www.osgi.org/bugzilla/show_bug.cgi?id=120.)

When I started the service, I got this error:
ERROR: org.example.bundle (3): [null] Cannot register Component
org.osgi.service.component.ComponentException: Component null validation failed: Implementation class name missing
        at org.apache.felix.scr.impl.metadata.ComponentMetadata.validationFailure(ComponentMetadata.java:777)
        at org.apache.felix.scr.impl.metadata.ComponentMetadata.validate(ComponentMetadata.java:645)
        at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:241)
        at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:285)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:203)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3833)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1803)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:927)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:914)
        at Try.main(Try.java:78)

Actually, my component was successfully registered.  The error is about the empty component started by the second <scr:component> tag.  But due to this message, I went crazy trying to figure out what was wrong with my <implementation> tag.","30/May/11 11:07;fmeschbe;Excellent. Thanks, this helps.","30/May/11 12:44;fmeschbe;Added some checking code to ensure certain situations cause an Exception being thrown in Rev. 1129144:

  <a>  -- new: throws a ParseException now, used to be silently ignored
  </a>  -- already threw an exception
  <a><b></a></b> -- already threw an exception

the new check mechanism particularly should prevent cases like
   <scr:component ....>
      ....
   <scr:component>

Does this work for you ?","05/Jun/11 01:38;pimlott;This solves my case, thank you.",05/Jun/11 13:03;fmeschbe;Thanks for the feedback. Thus resolving fixed.,20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to remove previously added repository from OBR,FELIX-2958,12507645,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,gawor@mcs.anl.gov,gawor@mcs.anl.gov,18/May/11 19:29,18/May/11 19:54,14/Mar/19 02:48,18/May/11 19:44,bundlerepository-1.6.4,,,,,,bundlerepository-1.6.6,,,,,,,Bundle Repository (OBR),,,,,,0,,,,,,"When adding a new repository to OBR, the passed url is converted into an actual URL object and the repository is stored in a map under url.toExternalForm() key. However, when removing a repository, the raw url string is used remove the repository from the map. Because of the uri conversion to URL object in addRepository(), the passed in string and the string produced by URL.toExternalForm() might be slightly different. That can make removeRepository() not work right (the repository won't be removed).
For example, URL.toExternalForm() on file:///media/d/m2/repository.xml returns file:/media/d/m2/repository.xml.
",,,,,,,,,,,,,,,,,,,,18/May/11 19:31;gawor@mcs.anl.gov;FELIX-2958.patch;https://issues.apache.org/jira/secure/attachment/12479639/FELIX-2958.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-18 19:44:00.048,,,no_permission,,,,,,,,,,,,56027,,,Wed May 18 19:54:22 UTC 2011,,,,,,0|i0vy3r:,184498,,,,,,,,"18/May/11 19:31;gawor@mcs.anl.gov;Attached patch for this issue.
",18/May/11 19:44;rickhall;Applied the patch. Please close if you are satisfied. Thanks!,"18/May/11 19:54;gawor@mcs.anl.gov;Thank you!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scr-maven-plugin fails with org.maven.ide.eclipse plugin (exploded bundle),FELIX-2948,12507064,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,andrei.pozolotin,andrei.pozolotin,13/May/11 00:19,28/Jul/11 08:54,14/Mar/19 02:48,19/May/11 06:00,maven-scr-plugin-1.7.0,scr ant task 1.1.0,scr generator 1.1.0,,,,maven-scr-plugin-1.7.2,scr ant task 1.1.2,scr generator 1.1.2,,,,,SCR Tooling,,,,,,0,,,,,,"scr-maven-plugin fails with org.maven.ide.eclipse plugin (exploded bundle)


1) when you run scr-maven-plugin in the eclipse ide with m2e plugin
then it seems at first to work fine:

a) import this project in the eclipse with help of m2e:
https://github.com/carrot-garden/carrot-bugger/tree/master/carrot-bug-scr-maven-plugin-001

b) and run ""eclipse -> project -> clean""; it produces this success log:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-scr-maven-plugin-001/doc-inf/build-m2e.log


2) but when your try

a) a second project which depends on first:
https://github.com/carrot-garden/carrot-bugger/tree/master/carrot-bug-scr-maven-plugin-002

b) then ""eclipse -> project -> clean"" now produces the following failure log:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-scr-maven-plugin-002/doc-inf/build-m2e.log


3) this is because scr-maven-plugin expects dependency to be in the jar form
but m2e instead (and appropriately) provides a path to the exploded bundle in the ./target/classes
of the dependency project (if it is a workspace project);


4) the workaround is to disable workspace project resolution in m2e
but this impedes development speed considerably

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-13 05:35:27.954,,,no_permission,,,,,,,,,,,,56037,,,Thu May 19 06:00:45 UTC 2011,,,,,,0|i0vwp3:,184270,,,,,,,,"13/May/11 05:35;cziegeler;This looks like FELIX-2878  to me, can you please try latest from scr plugin from svn?","13/May/11 14:05;andrei.pozolotin;1) yes, the error message is similar to FELIX-2878

2) I updated both projects to latest snapshots

https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-scr-maven-plugin-001/pom.xml
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-scr-maven-plugin-002/pom.xml

<groupId>org.apache.felix</groupId>
<artifactId>org.apache.felix.scr.annotations</artifactId>
<version>1.5.3-SNAPSHOT</version>

<groupId>org.apache.felix</groupId>
<artifactId>maven-scr-plugin</artifactId>
<version>1.7.1-SNAPSHOT</version>

<groupId>org.apache.felix</groupId>
<artifactId>maven-bundle-plugin</artifactId>
<version>2.3.5-SNAPSHOT</version>

3) I still have the same error on eclipse->clean invocation on project #2

5/13/11 8:56:17 AM CDT: [ERROR] Unable to get scrinfo from artifact at /home/user1/Workspaces/github/carrot-bugger/carrot-bug-scr-maven-plugin-001/target/classes:0
5/13/11 8:56:17 AM CDT: Build errors for carrot-bug-scr-maven-plugin-002; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr (scr) on project carrot-bug-scr-maven-plugin-002: SCR Descriptor parsing had failures (see log)

4) the difference from FELIX-2878 is that here it is not a command line mvn run, but rather an embedded maven 3.0.0-XXX invocation from m2e plugin (eclipse maven builder) which does special class path substitutions for artifacts that are local workspace projects (this is analogues to the way felix handles ""reference:file:""  url for exploded bundles)

 
",16/May/11 16:25;cziegeler;Can you please append the whole stacktrace for the exception?,"16/May/11 21:20;andrei.pozolotin;success log on frist project:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-scr-maven-plugin-001/doc-inf/build-m2e-debug.log

failure log on second project:
https://github.com/carrot-garden/carrot-bugger/blob/master/carrot-bug-scr-maven-plugin-002/doc-inf/build-m2e-debug.log
","16/May/11 21:28;andrei.pozolotin;1) error complains about missing manifest, etc in target/classes:

5/16/11 4:13:42 PM CDT: [DEBUG] Trying to get manifest from artifact /home/user1/Workspaces/github/carrot-bugger/carrot-bug-scr-maven-plugin-001/target/classes
5/16/11 4:13:42 PM CDT: [DEBUG] Unable to get manifest from artifact /home/user1/Workspaces/github/carrot-bugger/carrot-bug-scr-maven-plugin-001/target/classes
5/16/11 4:13:42 PM CDT: [DEBUG] Trying to get scrinfo from artifact /home/user1/Workspaces/github/carrot-bugger/carrot-bug-scr-maven-plugin-001/target/classes
5/16/11 4:13:42 PM CDT: [DEBUG] ..generating descriptor for spec version: null
5/16/11 4:13:42 PM CDT: [ERROR] Unable to get scrinfo from artifact at /home/user1/Workspaces/github/carrot-bugger/carrot-bug-scr-maven-plugin-001/target/classes:0
5/16/11 4:13:42 PM CDT: Build errors for carrot-bug-scr-maven-plugin-002; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.1-SNAPSHOT:scr (scr) on project carrot-bug-scr-maven-plugin-002: SCR Descriptor parsing had failures (see log)


2) but first project has them:

#:~/Workspaces/github/carrot-bugger/carrot-bug-scr-maven-plugin-001/target$ ls -R
.:
classes  test-classes

./classes:
case_01  META-INF  OSGI-INF

./classes/case_01:
HostServiceConsumer.class

./classes/META-INF:
MANIFEST.MF

./classes/OSGI-INF:
scr-plugin  serviceComponents.xml

./classes/OSGI-INF/scr-plugin:
scrinfo.xml

./test-classes:
","17/May/11 07:38;cziegeler;It seems that I only fixed one place in FELIX-2878; I've now committed a new fix in revision 1104035 which should solve the problem - it checks whether an artifact is a jar file or a directory.
I've deployed the snapshots - can you please give it a try?","18/May/11 14:46;andrei.pozolotin;Carsten:

I tried maven-scr-plugin-1.7.1-20110517.073734-2.jar; it works! you are the best, thank you.

Andrei.",19/May/11 06:00;cziegeler;Thanks for testing!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SCR plugin: Parsing of ""options"" for property tag broken for java annotations",FELIX-2945,12506642,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,sseifert@pro-vision.de,sseifert@pro-vision.de,09/May/11 18:13,28/Jul/11 08:54,14/Mar/19 02:48,12/May/11 14:06, maven-scr-plugin-1.6.0,maven-scr-plugin-1.7.0,scr ant task 1.1.0,scr generator 1.0.0,scr generator 1.1.0,,maven-scr-plugin-1.7.2,scr ant task 1.1.2,scr generator 1.1.2,,,,,SCR Tooling,,,,,,0,,,,,,"since rev. 1072066 (see FELIX-2835) parsing ""options"" from *java* annotations (not javadoc annotations) is broken.
the PropertyHandler implementation was changed, and it did not match any longer with the parameter format used by the java annotations PropertyTag implementation.

i'll attach a patch which should handle both cases (though it tested it only with java annotations).",,,,,,,,,,,,,,,,,,,,09/May/11 18:15;sseifert@pro-vision.de;110509_FELIX-2945_propetyoptions.patch;https://issues.apache.org/jira/secure/attachment/12478625/110509_FELIX-2945_propetyoptions.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-12 05:27:03.958,,,no_permission,,,,,,,,,,,,56040,,,Thu May 12 14:06:36 UTC 2011,,,,,,0|i0vy2f:,184492,,,,,,,,"12/May/11 05:27;cziegeler;Hi Stefan

thanks for your patch - I've applied a slightly modified version in revision 1102170


Can you please give it a test?","12/May/11 11:51;sseifert@pro-vision.de;i tested it with our projects, it is working fine",12/May/11 14:06;cziegeler;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCR/ spec version 1.1-felix is causing NPE in XmlHandler,FELIX-2944,12506285,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,pderop,pderop,05/May/11 14:14,20/Nov/12 10:58,14/Mar/19 02:48,31/May/11 13:56, scr-1.6.0,scr generator 1.1.0,,,,,scr-1.6.2,scr generator 1.1.2,,,,,,Declarative Services (SCR),SCR Tooling,,,,,0,,,,,,"This issue is described in the following post: http://www.mail-archive.com/users@felix.apache.org/msg10138.html
and might also be related in the  FELIX-1898 issue.

When using SCR (trunk) and the new Reference ""updated"" callback, we have to specify the spec version ""1.1-felix"". 
However, when using such version, we get the following NPE at runtime: (latest scrplugin has been used to generate the scr xml descriptor):

java.lang.NullPointerException
        at org.apache.felix.scr.impl.metadata.XmlHandler.startElement(XmlHandler.java:237)
        at org.apache.felix.scr.impl.parser.KXml2SAXParser.parseXML(KXml2SAXParser.java:73)
        at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:227)
        at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:274)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:192)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3833)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1803)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1179)
        at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
        at java.lang.Thread.run(Thread.java:662)

Notice that this exception is displayed on stdout, and it would be probably better to log it using the log service;
From log service, we then get the following exception:

.scr.impl.parser.ParseException: Exception during parsing
        at org.apache.felix.scr.impl.metadata.XmlHandler.startElement(XmlHandler.java:333)
        at org.apache.felix.scr.impl.parser.KXml2SAXParser.parseXML(KXml2SAXParser.java:73)
        at org.apache.felix.scr.impl.BundleComponentActivator.loadDescriptor(BundleComponentActivator.java:227)
        at org.apache.felix.scr.impl.BundleComponentActivator.initialize(BundleComponentActivator.java:147)
        at org.apache.felix.scr.impl.BundleComponentActivator.<init>(BundleComponentActivator.java:111)
        at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:274)
        at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:192)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3833)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1803)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1179)
        at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
        at java.lang.Thread.run(Thread.java:662)

I think that the root cause of the problem is that the scrplugin is generating the following xml namespace:

    http://www.osgi.org/xmlns/scr/v1.1.0-felix

but the scr runtime is expecting the following namespace:

    http://felix.apache.org/xmlns/scr/v1.1.0-felix

so, there is a mismatch here.
The following patch seems to work and consists in fixing the class XmlHandler.java, in the SCR: 
The XmlHandler.NAMESPACE_URI_1_1_FELIX constant can be changed with the following scheme (which must match the one generated by the scrplugin):

    public static final String NAMESPACE_URI_1_1_FELIX = ""http://www.osgi.org/xmlns/scr/v1.1.0-felix"";

Or another option is to fix the scrplugin in order to use the felix.apache.org scheme ?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-31 12:50:52.806,,,no_permission,,,,,,,,,,,,56041,,,Tue Nov 20 10:58:18 UTC 2012,,,,,,0|i0l47z:,121334,,,,,,,,"31/May/11 12:50;fmeschbe;Thanks, Pierre, for tracking this down.

Actually, I think the problem is the SCR Plugin not setting the correct URI -- I don't think the Apache Felix project should define namespaces in the osgi.org domain. So the fix is to change the SCR Plugin to use the correct Namespace URI.

In fact, there is another issue: The XML parser should not print to stdout (already fixed in Rev. 1129137 for FELIX-2962) and should print something readable and not just throw a NPE.","31/May/11 12:54;fmeschbe;Fixed namespace URI in the SCR plugin (generator) Rev. 1129654.

To test this you can add a dependency to the SCR generator SNAPSHOT build in the SCR plugin configuration, e.g.:

            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-scr-plugin</artifactId>
                <version>1.7.0</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.felix</groupId>
                        <artifactId>org.apache.felix.scr.generator</artifactId>
                        <version>1.1.1-SNAPSHOT</version>
                    </dependency>
                </dependencies>
            </plugin>
","31/May/11 13:56;fmeschbe;Fixed handling in the XmlHandler class in Rev. 1129674 and a test case in Rev. 1129677

According to the specs, elements whose namespace is not know are to be ignored. This has been done for the <component> element. But then comes the <implementation> element which is handled but there is no component context to put information into and an NPE is generated.

Now, any element is ignored if there is no component context to fill data into.

We cannot log error or warn messages since the spec states that the XML parser is to be lenient has to ignore unknown elements and namespaces. We just log DEBUG messages in these cases.",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component generated by @SlingServlet does not match default settings of @Component,FELIX-2943,12506278,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,mikep,mikep,05/May/11 12:32,28/Jul/11 08:56,14/Mar/19 02:48,05/May/11 13:03,scr annotations 1.5.0,,,,,,scr annotations 1.6.0,,,,,,,SCR Tooling,,,,,,0,,,,,,"Using this annotation
{code}
@SlingServlet(
        paths = ""/my/cool/path""
)
{code}
the auto-generated component shows up unexpectedly in the configMgr dropdown. Looking at the generated metatype.xml one can also see that the servlet is listed there as configurable.

Looking at the JavaDoc comment of @SlingServlets generateComponent() i had expected that a default (= empty) @Component annotation would be created, which of course has metatype = false as a default. This unfortunately does not seem to be the case, causing our configMgr dropdown to be flooded with config entries for all our (non-configurable) servlets.","Maven 3.0.2 / Felix Framework Bundle 3.0.2 / CQ 5.3 (No HF, no FP)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-05 12:57:08.415,,,no_permission,,,,,,,,,,,,56042,,,Thu May 05 13:08:10 UTC 2011,,,,,,0|i1augv:,271402,,,,,,,,"05/May/11 12:32;mikep;FYI, as a workaround i now use:
{code}
@Component
@SlingServlet(
        generateComponent = false,
        paths = ""/my/cool/path""
)
{code}","05/May/11 12:57;cziegeler;Yes, I agree - this is a bug

I'll add the parameters for metatype, name, label, and description like we have for SlingFilter and metatype will default to false",05/May/11 13:03;cziegeler;Fixed in revision 1099777,"05/May/11 13:04;mikep;Cool, thanks! :)

I just saw another thing which might be related: SlingServletComponentTag tries to set immediate to true (unless i'm misunderstanding something), but currently this is not applied and the components are still registered as delayed.","05/May/11 13:08;mikep;Never mind my previous comment, it coincided with your checkin of the fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[Gogo Command] The ""info"" command throws an NPE if the specified bundle identifier doesn't exist",FELIX-2938,12505348,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,rickhall,rickhall,27/Apr/11 19:51,27/Apr/11 20:01,14/Mar/19 02:48,27/Apr/11 20:01,gogo.command-0.8.0,,,,,,gogo.command-0.10.0,,,,,,,Gogo Command,,,,,,0,,,,,,The routine for searching the repository just assumes that a bundle identifier can be found and doesn't check for a null value.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,50953,,,Wed Apr 27 20:01:19 UTC 2011,,,,,,0|i0vy1r:,184489,,,,,,,,27/Apr/11 20:01;rickhall;Committed a fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Gogo Command] OBR commands do not output anything when nothing is found,FELIX-2937,12505346,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,rickhall,rickhall,27/Apr/11 19:49,16/Jun/11 15:31,14/Mar/19 02:48,16/Jun/11 15:31,gogo.command-0.8.0,,,,,,gogo.command-0.10.0,,,,,,,Gogo Command,,,,,,0,,,,,,"When searching for bundles using the ""info"" command (for example), if nothing is matched then nothing is output to the user. This appears to be because the repository search routine is returning an empty array, but the command is expecting a null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,50952,,,Thu Jun 16 15:31:08 UTC 2011,,,,,,0|i0vy53:,184504,,,,,,,,27/Apr/11 20:01;rickhall;Committed a fix.,16/Jun/11 15:31;rickhall;changed summary,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Bundle-ClassPath contains ""."" despite using _wab instruction",FELIX-2934,12505270,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,mcculls,sahoo,sahoo,27/Apr/11 04:59,11/Oct/11 17:09,14/Mar/19 02:48,24/Jun/11 20:26,maven-bundle-plugin-2.3.4,,,,,,maven-bundle-plugin-2.3.5,,,,,,,Maven Bundle Plugin,,,,,,0,,,,,,"Since I didn't get much response in the forum [1], I am beginning to believe that it's not currently possible to easily build a WAB without ""."" in Bundle-ClassPath. It is important to have it fixed so that people can build valid web applications easily while using maven-bundle-plugin. While it is reasonably straight forward to build WABs with no embedded libraries, I have not found ways to build WAB with embedded libraries and yet no ""."" in BCP. Although I believe the fix should be in bnd as I suspected in the forum question I raised, it can also be in the plugin side if bnd is not changed.

[1] http://mail-archives.apache.org/mod_mbox/felix-users/201104.mbox/<4DB0E93D.8080109@oracle.com>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-24 20:26:22.908,,,no_permission,,,,,,,,,,,,56049,,,Fri Jun 24 20:26:22 UTC 2011,,,,,,0|i0vwfz:,184229,,,,,,,,24/Jun/11 20:26;mcculls;Fixed in r1139425,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[gogo] coercion mechanism invokes foo(String) instead of foo(int) - even with explicit int argument,FELIX-2927,12504885,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,db82407,db82407,db82407,21/Apr/11 12:56,17/Mar/15 07:06,14/Mar/19 02:48,12/Jun/11 14:02,gogo.runtime-0.8.0,,,,,,gogo.runtime-0.10.0,,,,,,,Gogo Runtime,,,,,,0,,,,,,"Equinox 3.7.M6 supports OSGi R4.3 which adds the overloaded method BundleContext.getBundle(String).

This causes gogo startup to fail, as it expects to invoke getBundle(int) but actually invokes getBundle(String).

Prior to R4.3, the gogo command: bundle 1
resulted in the String ""1"" being coerced into a long, so that getBundle(long) could be invoked.

Now that getBundle(String) exists, the result depends on the order that methods are returned from Class.getMethods(), which varies between platforms:

On Mac java version ""1.6.0_24"":

g! type bundle
bundle is Bundle context:bundle(long)
bundle is Bundle context:bundle()
bundle is Bundle context:bundle(String)


On Windows 2003 server, java version ""1.6.0_24"":
g! type bundle
bundle is Bundle context:bundle()
bundle is Bundle context:bundle(String)
bundle is Bundle context:bundle(long)

The first ""exact"" match wins, where ""exact"" just means that all supplied arguments are used.
On the Mac, getBundle(long) still wins, but on Windows getBundle(String) wins and the gogo startup scripts fails.

What's worse, is that even when you realise what is happening, it is still not possible to invoke getBundle(long):

g! 1L = new Long 1
g! bundle $1L

because in this case the long is coerced to a String to invoke get Bundle(String) and the getBundle(long) method is ignored.


There are at least two problems here:

1. the gogo coercion mechanism simply invokes the first method it can, regardless of whether any arguments needed to be converted.

It should instead try to score each method, perhaps adding to the score each time an argument needs to be converted,
then it could invoke the method with the lowest score.
However, there may still be occasions when two methods have the same score and gogo needs to behave deterministically
and allow either method to be invoked by supplying less ambiguous arguments.

2. all arguments in gogo start out as Strings, which make it awkward to prefer a method that takes an integer:
for example: g! bundle (new Long 1)

getBundle(long) is the most likely target method, but gogo does not any syntax to indicate that arguments should be treated as numbers rather than Strings. One possibility would be to recognize numbers in gogo's Tokenizer similar to the way that true/false are handled:

g! t = true
true
g! tt = 'true'
true
g! set t
Boolean       t               true
String          tt              true

The above shows that the bare word: true is tokenized as a Boolean, where as the quoted word 'true' is tokenized as a String.
So bare numbers could be tokenized as Numbers, and the existing coercion mechanism would convert them back to Strings as needed;
alternative by quoting something that looks like a number, you force it to be tokenized as a String.













",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,50951,,,Sun Jun 12 14:02:43 UTC 2011,,,,,,0|i0vs8n:,183548,,,,,,,,12/Jun/11 14:02;db82407;fixed by refactoring Reflective.java to give conversion cost for coercion.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No log message on missing activate method,FELIX-2926,12504837,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,fmeschbe,djencks,djencks,21/Apr/11 00:45,20/Nov/12 10:58,14/Mar/19 02:48,20/May/11 09:37, scr-1.6.0,,,,,,scr-1.6.2,,,,,,,Declarative Services (SCR),,,,,,0,,,,,,"DS spec 112.5.8 says:

If the activate attribute is specified and no suitable method is located, SCR must log an error message with the Log Service, if present,...

This is not implemented and the lack makes it really hard to figure out why the DS isn't activated.  ",,,,,,,,,,,,,,,,,,,,21/Apr/11 00:47;djencks;FELIX-2926.diff;https://issues.apache.org/jira/secure/attachment/12476957/FELIX-2926.diff,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-20 09:37:27.168,,,no_permission,,,,,,,,,,,,56056,,,Tue Nov 20 10:58:14 UTC 2012,,,,,,0|i0l4a7:,121344,,,,,,,,"21/Apr/11 00:47;djencks;logs missing activate, deactivate, and modified methods","20/May/11 09:37;fmeschbe;Thanks for reporting the bug and providing the patch.

Actually, the situation of a declared method not being found is already logged in the BaseMethod.setMethod method. But this is logged at DEBUG level, which is why the message is generally not printed.

I fixed this to log an error level message as stipulated by the spec in Revision: 1125294",20/Nov/12 10:58;fmeschbe;Close after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bundle stop hangs for http-2.2.0 in felix-3.2.0,FELIX-2924,12504815,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,db82407,db82407,20/Apr/11 18:16,27/Apr/11 19:21,14/Mar/19 02:48,21/Apr/11 14:03,framework-3.2.0,,,,,,framework-3.2.1,,,,,,,Framework,,,,,,0,,,,,,"stopping http jetty 2.2.0 hangs framework.

it is fine with http jetty 2.0.4 in framework 3.2.0
or with http jetty 2.2.0 in framework 3.0.9



$ cd felix-framework-3.2.0
$ java -jar bin/felix.jar 
____________________________
Welcome to Apache Felix Gogo

g! [INFO] Started jetty 6.1.x at port(s) HTTP:8080

g! lb
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (3.2.0)
    1|Active     |    1|Apache Felix Bundle Repository (1.6.2)
    2|Active     |    1|Apache Felix Gogo Command (0.8.0)
    3|Active     |    1|Apache Felix Gogo Runtime (0.8.0)
    4|Active     |    1|Apache Felix Gogo Shell (0.8.0)
    5|Active     |    1|Apache Felix Http Jetty (2.2.0)
g! stop 5

[ HANGS HERE ]

THREAD DUMP:

^\2011-04-20 19:07:35
Full thread dump Java HotSpot(TM) 64-Bit Server VM (19.1-b02-334 mixed mode):

""Timer-0"" daemon prio=5 tid=102a5f000 nid=0x10ac9c000 in Object.wait() [10ac9b000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f30aa0d0> (a java.util.TaskQueue)
        at java.util.TimerThread.mainLoop(Timer.java:509)
        - locked <7f30aa0d0> (a java.util.TaskQueue)
        at java.util.TimerThread.run(Timer.java:462)

""Poller SunPKCS11-Darwin"" daemon prio=1 tid=1019c0800 nid=0x10ab99000 waiting on condition [10ab98000]
   java.lang.Thread.State: TIMED_WAITING (sleeping)
        at java.lang.Thread.sleep(Native Method)
        at sun.security.pkcs11.SunPKCS11$TokenPoller.run(SunPKCS11.java:692)
        at java.lang.Thread.run(Thread.java:680)

""918201446@qtp-896472140-0"" prio=5 tid=1029cf800 nid=0x10a93c000 in Object.wait() [10a93b000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f42b2040> (a org.mortbay.thread.QueuedThreadPool$PoolThread)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:626)
        - locked <7f42b2040> (a org.mortbay.thread.QueuedThreadPool$PoolThread)

""Jetty HTTP Service"" daemon prio=5 tid=1029cd000 nid=0x10a839000 in Object.wait() [10a837000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f437f998> (a [Ljava.lang.Object;)
        at java.lang.Object.wait(Object.java:485)
        at org.apache.felix.framework.Felix.acquireBundleLock(Felix.java:4930)
        - locked <7f437f998> (a [Ljava.lang.Object;)
        at org.apache.felix.framework.Felix.removeServiceListener(Felix.java:2844)
        at org.apache.felix.framework.BundleContextImpl.removeServiceListener(BundleContextImpl.java:256)
        at org.osgi.util.tracker.ServiceTracker.close(ServiceTracker.java:391)
        - locked <7f4344008> (a org.apache.felix.http.base.internal.listener.HttpSessionAttributeListenerManager)
        at org.apache.felix.http.base.internal.HttpServiceController.unregister(HttpServiceController.java:144)
        at org.apache.felix.http.base.internal.DispatcherServlet.destroy(DispatcherServlet.java:54)
        at org.mortbay.jetty.servlet.ServletHolder.destroyInstance(ServletHolder.java:318)
        at org.mortbay.jetty.servlet.ServletHolder.doStop(ServletHolder.java:289)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:76)
        - locked <7f42f4cb0> (a java.lang.Object)
        at org.mortbay.jetty.servlet.ServletHandler.doStop(ServletHandler.java:174)
        - locked <7f42f49c8> (a org.mortbay.jetty.servlet.ServletHandler)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:76)
        - locked <7f42f4a38> (a java.lang.Object)
        at org.mortbay.jetty.handler.HandlerWrapper.doStop(HandlerWrapper.java:142)
        at org.mortbay.jetty.servlet.SessionHandler.doStop(SessionHandler.java:125)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:76)
        - locked <7f42f51a8> (a java.lang.Object)
        at org.mortbay.jetty.handler.HandlerWrapper.doStop(HandlerWrapper.java:142)
        at org.mortbay.jetty.handler.ContextHandler.doStop(ContextHandler.java:591)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:76)
        - locked <7f42f4890> (a java.lang.Object)
        at org.mortbay.jetty.handler.HandlerWrapper.doStop(HandlerWrapper.java:142)
        at org.mortbay.jetty.Server.doStop(Server.java:283)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:76)
        - locked <7f42f1d30> (a java.lang.Object)
        at org.apache.felix.http.jetty.internal.JettyService.stopJetty(JettyService.java:127)
        at org.apache.felix.http.jetty.internal.JettyService.run(JettyService.java:300)
        at java.lang.Thread.run(Thread.java:680)

""Gogo shell"" daemon prio=5 tid=102ab8800 nid=0x10a736000 waiting for monitor entry [10a733000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at org.osgi.util.tracker.ServiceTracker.close(ServiceTracker.java:380)
        - waiting to lock <7f4344008> (a org.apache.felix.http.base.internal.listener.HttpSessionAttributeListenerManager)
        at org.apache.felix.http.base.internal.HttpServiceController.unregister(HttpServiceController.java:144)
        at org.apache.felix.http.base.internal.AbstractHttpActivator.doStop(AbstractHttpActivator.java:52)
        at org.apache.felix.http.jetty.internal.JettyActivator.doStop(JettyActivator.java:39)
        at org.apache.felix.http.base.internal.AbstractActivator.stop(AbstractActivator.java:47)
        at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:651)
        at org.apache.felix.framework.Felix.stopBundle(Felix.java:2226)
        at org.apache.felix.framework.BundleImpl.stop(BundleImpl.java:963)
        at org.apache.felix.gogo.command.Basic.stop(Basic.java:817)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.felix.gogo.runtime.Reflective.method(Reflective.java:136)
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:469)
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:395)
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
        at org.apache.felix.gogo.shell.Console.run(Console.java:62)
        at org.apache.felix.gogo.shell.Shell.console(Shell.java:203)
        at org.apache.felix.gogo.shell.Shell.gosh(Shell.java:128)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.felix.gogo.runtime.Reflective.method(Reflective.java:136)
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:469)
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:395)
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
        at org.apache.felix.gogo.shell.Activator.run(Activator.java:75)
        at java.lang.Thread.run(Thread.java:680)

""FelixPackageAdmin"" daemon prio=5 tid=102a6c000 nid=0x10a623000 in Object.wait() [10a622000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f43306d0> (a org.apache.felix.framework.PackageAdminImpl)
        at java.lang.Object.wait(Object.java:485)
        at org.apache.felix.framework.PackageAdminImpl.run(PackageAdminImpl.java:350)
        - locked <7f43306d0> (a org.apache.felix.framework.PackageAdminImpl)
        at java.lang.Thread.run(Thread.java:680)

""FelixStartLevel"" daemon prio=5 tid=102ac0000 nid=0x10a520000 in Object.wait() [10a51f000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f4340e10> (a java.util.ArrayList)
        at java.lang.Object.wait(Object.java:485)
        at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:242)
        - locked <7f4340e10> (a java.util.ArrayList)
        at java.lang.Thread.run(Thread.java:680)

""FelixDispatchQueue"" prio=5 tid=102900000 nid=0x10a401000 in Object.wait() [10a400000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f4340fc8> (a java.util.ArrayList)
        at java.lang.Object.wait(Object.java:485)
        at org.apache.felix.framework.util.EventDispatcher.run(EventDispatcher.java:924)
        - locked <7f4340fc8> (a java.util.ArrayList)
        at org.apache.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:54)
        at org.apache.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:106)
        at java.lang.Thread.run(Thread.java:680)

""Low Memory Detector"" daemon prio=5 tid=101830000 nid=0x109f90000 runnable [00000000]
   java.lang.Thread.State: RUNNABLE

""CompilerThread1"" daemon prio=9 tid=10182f000 nid=0x109e8d000 waiting on condition [00000000]
   java.lang.Thread.State: RUNNABLE

""CompilerThread0"" daemon prio=9 tid=10182e800 nid=0x109d8a000 waiting on condition [00000000]
   java.lang.Thread.State: RUNNABLE

""Signal Dispatcher"" daemon prio=9 tid=10182d800 nid=0x109c87000 waiting on condition [00000000]
   java.lang.Thread.State: RUNNABLE

""Surrogate Locker Thread (CMS)"" daemon prio=5 tid=102886800 nid=0x109b84000 waiting on condition [00000000]
   java.lang.Thread.State: RUNNABLE

""Finalizer"" daemon prio=8 tid=10287e000 nid=0x1097fc000 in Object.wait() [1097fb000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f4341540> (a java.lang.ref.ReferenceQueue$Lock)
        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)
        - locked <7f4341540> (a java.lang.ref.ReferenceQueue$Lock)
        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)
        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)

""Reference Handler"" daemon prio=10 tid=10287d000 nid=0x1096f9000 in Object.wait() [1096f8000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f42b0210> (a java.lang.ref.Reference$Lock)
        at java.lang.Object.wait(Object.java:485)
        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
        - locked <7f42b0210> (a java.lang.ref.Reference$Lock)

""main"" prio=5 tid=102801000 nid=0x100601000 in Object.wait() [100600000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7f4341648> (a org.apache.felix.framework.util.ThreadGate)
        at org.apache.felix.framework.util.ThreadGate.await(ThreadGate.java:79)
        - locked <7f4341648> (a org.apache.felix.framework.util.ThreadGate)
        at org.apache.felix.framework.Felix.waitForStop(Felix.java:916)
        at org.apache.felix.main.Main.main(Main.java:295)

""VM Thread"" prio=9 tid=102878800 nid=0x1095f6000 runnable 

""Gang worker#0 (Parallel GC Threads)"" prio=9 tid=102802800 nid=0x10176a000 runnable 

""Gang worker#1 (Parallel GC Threads)"" prio=9 tid=102803000 nid=0x102301000 runnable 

""Concurrent Mark-Sweep GC Thread"" prio=9 tid=10284d800 nid=0x109302000 runnable 
""VM Periodic Task Thread"" prio=10 tid=101841800 nid=0x10a093000 waiting on condition 

""Exception Catcher Thread"" prio=10 tid=102801800 nid=0x100704000 runnable 
JNI global references: 947

Heap
 par new generation   total 19136K, used 3672K [7f3000000, 7f44c0000, 7f44c0000)
  eden space 17024K,  13% used [7f3000000, 7f3249bb8, 7f40a0000)
  from space 2112K,  62% used [7f42b0000, 7f43fc778, 7f44c0000)
  to   space 2112K,   0% used [7f40a0000, 7f40a0000, 7f42b0000)
 concurrent mark-sweep generation total 63872K, used 0K [7f44c0000, 7f8320000, 7fae00000)
 concurrent-mark-sweep perm gen total 21248K, used 10352K [7fae00000, 7fc2c0000, 800000000)","Mac OSX java version ""1.6.0_24""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-20 18:51:55.078,,,no_permission,,,,,,,,,,,,56058,,,Thu Apr 21 14:31:21 UTC 2011,,,,,,0|i0vy1b:,184487,,,,,,,,20/Apr/11 18:51;rickhall;I am pretty sure this is the same issue as FELIX-2913.,"21/Apr/11 13:50;rickhall;This bug doesn't actually duplicate FELIX-2913, but it is definitely related. I think we could solve this bug by relaxing locking when removing a listener (i.e., not acquire the bundle lock), since this would only be a no-op if a listener was removed after a bundle was stopped.","21/Apr/11 14:03;rickhall;Derek, I've committed a patch to avoid acquiring the lock for removing listeners, could you check to see if this works for you now? If so, please close the bug. Thanks.",21/Apr/11 14:31;db82407;patch fix on trunk resolves issue. Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Constructor of SecurityExceptino() which is incompatible to 1.4 is used  ,FELIX-2917,12504349,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,iyamasaki,iyamasaki,15/Apr/11 08:41,18/Apr/11 14:07,14/Mar/19 02:48,18/Apr/11 14:07,framework-3.2.0,,,,,,framework-3.2.1,,,,,,,Framework,,,,,,0,,,,,,"The constructor of SecurityException with Throwable must not be used.
For example, Felix.java has 
--------
throw new SecurityException(ex);
throw new SecurityException(""Unable to install custom SecurityManager: "" + security, t);
--------
Other classes might use those constructors.",J2SE-1.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-15 21:19:39.296,,,no_permission,,,,,,,,,,,,56065,,,Mon Apr 18 13:45:07 UTC 2011,,,,,,0|i0vy1z:,184490,,,,,,,,"15/Apr/11 21:19;rickhall;I have committed a patch to resolve this issue. I fixed the issue you pointed out, plus a couple more. Please close this issue if you are satisfied. Thanks.","18/Apr/11 08:37;iyamasaki;Richard, Thanks. I confirmed it.
Do you have any plan when framework-4.0.0 will be released ?","18/Apr/11 13:45;rickhall;4.0.0 won't be any time soon, but we are going to roll a 3.2.1 release this week, which will include this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential deadlock on shutdown,FELIX-2915,12504336,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,15/Apr/11 06:22,28/Jul/11 08:52,14/Mar/19 02:48,15/Apr/11 06:27,eventadmin-1.2.10,,,,,,eventadmin-1.2.12,,,,,,,Event Admin,,,,,,0,,,,,,"As noted in SLING-2051 there are situations where a deadlock on shutdown occurs - this is because the thread pool is waiting for shutdown and blocks the framework
The pool can't be properly shutdown as event handlers might be already down (this is an unfortunate but expected behaviour)

The pool shut not wait for shutdown",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,40425,,,Fri Apr 15 06:27:17 UTC 2011,,,,,,0|i0apwn:,60470,,,,,,,,15/Apr/11 06:27;cziegeler;Fixed in Revision 1092598,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Host name is lost in exceptions when dealing with Windows shared drives,FELIX-2912,12504093,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,gawor@mcs.anl.gov,gawor@mcs.anl.gov,12/Apr/11 19:24,11/May/11 14:47,14/Mar/19 02:48,11/May/11 14:43,bundlerepository-1.6.4,,,,,,bundlerepository-1.6.6,,,,,,,Bundle Repository (OBR),,,,,,0,,,,,,"When OBR repository URL specifies a Windows shared drive for example: file://myhost/mydir/myrepo.xml and the myrepo.xml specifies a relative uri to a mybundle.jar that does not exist in that location, OBR will throw the following exception (during Resolver.deploy()):

java.io.FileNotFoundException: mydir/mybundle.jar
        at sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:441)
        at org.apache.felix.bundlerepository.impl.FileUtil.openURL(FileUtil.java:203)
        at org.apache.felix.bundlerepository.impl.FileUtil.openURL(FileUtil.java:196)
        at org.apache.felix.bundlerepository.impl.ResolverImpl.deploy(ResolverImpl.java:598) 

The hostname part of the repository url is lost in the exception. 

The root cause of this is probably somewhere in the JDK but OBR could handle this case a bit better.
",,,,,,,,,,,,,,,,,,,,11/May/11 14:35;gawor@mcs.anl.gov;FELIX-2912.2.patch;https://issues.apache.org/jira/secure/attachment/12478829/FELIX-2912.2.patch,12/Apr/11 19:27;gawor@mcs.anl.gov;FELIX-2912.patch;https://issues.apache.org/jira/secure/attachment/12476153/FELIX-2912.patch,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-05-11 14:43:30.282,,,no_permission,,,,,,,,,,,,56069,,,Wed May 11 14:47:52 UTC 2011,,,,,,0|i0vy3b:,184496,,,,,,,,"12/Apr/11 19:27;gawor@mcs.anl.gov;Proposed patch for this issue. The code catches the FileNotFoundException and throws a new FileNotFoundException with full URL if the URL specified a hostname.
","11/May/11 14:35;gawor@mcs.anl.gov;Attached another version of the patch that is more generic.
","11/May/11 14:43;rickhall;I applied the patch. Please close this issue if satisfied, thanks!","11/May/11 14:47;gawor@mcs.anl.gov;Looks good. Thank you!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem calling _setInstanceManager on guice enhanced classe,FELIX-2907,12503616,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,avalynchel,avalynchel,07/Apr/11 09:19,14/May/12 14:58,14/Mar/19 02:48,10/Apr/11 15:19,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"If a pojo is created by some class enhancer, for example a method interceptor enhanced object returned by guice, the call to _setInstanceManager in InstanceManager fails. The reason is that the enhanced class is a subclass of the original pojo and that class only has the methods it chose to override. 
One solution to this is to travel up the class hierarchy until the _setInstanceManager method is found or Class.getSubclass() returns null (in which case we throw the usual error.",,,,,,,,,,,,,,,,,,,,07/Apr/11 09:20;avalynchel;enhanced_class_calling.patch;https://issues.apache.org/jira/secure/attachment/12475690/enhanced_class_calling.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-10 15:19:17.918,,,no_permission,,,,,,,,,,,,56074,,,Mon May 14 14:58:26 UTC 2012,,,,,,0|i1atyv:,271321,,,,,,,,07/Apr/11 09:20;avalynchel;Attached patch to fix it.,"10/Apr/11 15:19;clement.escoffier;I've applied the patch. Please tell me if it's ok.

Thanks !",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SCR plugin error with @Property(..., intValue=Integer.MAX_VALUE)",FELIX-2906,12503614,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,bdelacretaz,bdelacretaz,07/Apr/11 08:58,28/Jul/11 08:54,14/Mar/19 02:48,07/Apr/11 09:29,maven-scr-plugin-1.7.0,scr ant task 1.1.0,scr generator 1.1.0,,,,maven-scr-plugin-1.7.2,scr ant task 1.1.2,scr generator 1.1.2,,,,,SCR Tooling,,,,,,0,,,,,,"This annotation

@Property(name=Constants.SERVICE_RANKING, intValue=Integer.MAX_VALUE)

causes the plugin to fail:

Caused by: org.apache.felix.scrplugin.SCRDescriptorException: Unable to load class
	at org.apache.felix.scrplugin.JavaClassDescriptorManager.getJavaClassDescription(JavaClassDescriptorManager.java:429)
	at org.apache.felix.scrplugin.tags.qdox.QDoxJavaClassDescription.getExternalFieldByName(QDoxJavaClassDescription.java:173)
	at org.apache.felix.scrplugin.tags.annotation.Util$1.visitAnnotationFieldRef(Util.java:412)

The workaround is to import java.lang.Integer

This is similar to FELIX-1129 but I don't seem to be allowed to reopen that issue.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-07 09:15:30.285,,,no_permission,,,,,,,,,,,,56075,,,Thu Apr 07 09:29:13 UTC 2011,,,,,,0|i1atz3:,271322,,,,,,,,07/Apr/11 09:15;cziegeler;We need to add special handling for these values like we did for a single int value (cardinality e.g. works),07/Apr/11 09:29;cziegeler;Fixed in revision 1089790 by checking if a class is from the default package if no package is specified.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Service properties added by propagation overrides already existing properties,FELIX-2902,12503440,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,clement.escoffier,clement.escoffier,clement.escoffier,05/Apr/11 19:56,14/May/12 14:58,14/Mar/19 02:48,25/Apr/11 09:03,iPOJO-1.8.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"When a service property is propagated, the property is added to the list replacing a potentially existing property (same property name)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,56079,,,Mon May 14 14:58:28 UTC 2012,,,,,,0|i0vy13:,184486,,,,,,,,"06/Apr/11 07:20;clement.escoffier;A fix was committed in the trunk, but we need more tests.",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Framework] NPE from a host bundle during framework shutdown,FELIX-2901,12503399,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,rickhall,rickhall,rickhall,05/Apr/11 14:15,18/Apr/11 14:08,14/Mar/19 02:48,18/Apr/11 14:08,framework-3.2.0,,,,,,framework-3.2.1,,,,,,,Framework,,,,,,0,,,,,,"When shutting down the framework, if a fragment is released before its host bundle, an NPE results because the host is trying to remove itself from the fragment's wires, but the fragment no longer has any wires. This is likely an issue any time when a fragment is refreshed before the host. I think we just need a null check here. In 3.0.x this wasn't an issue because we didn't use wires in the fragment to keep track of host dependencies.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,56080,,,Thu Apr 07 19:31:12 UTC 2011,,,,,,0|i1atzj:,271324,,,,,,,,"07/Apr/11 18:45;rickhall;Example NPE:

! stop 0
g! ERROR: Bundle host [6] Error detaching fragments. (java.lang.NullPointerException)
java.lang.NullPointerException
	at java.util.ArrayList.<init>(ArrayList.java:131)
	at org.apache.felix.framework.ModuleImpl.attachFragments(ModuleImpl.java:1183)
	at org.apache.felix.framework.BundleImpl.closeModules(BundleImpl.java:138)
	at org.apache.felix.framework.BundleImpl.close(BundleImpl.java:101)
	at org.apache.felix.framework.Felix$SystemBundleActivator.stop(Felix.java:4593)
	at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:651)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2226)
	at org.apache.felix.framework.Felix$3.run(Felix.java:876)
	at java.lang.Thread.run(Thread.java:680)
",07/Apr/11 19:31;rickhall;Committed a fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gogo does not handles options but not parameters,FELIX-2894,12502739,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,db82407,pkriens,pkriens,29/Mar/11 17:40,17/Mar/15 07:06,14/Mar/19 02:48,12/Jun/11 14:01,,,,,,,gogo.runtime-0.10.0,,,,,,,Gogo Runtime,,,,,,0,,,,,,"If you create a function with a parameter then the correct method cannot be found:

public void xyz( @Parameter( names=""-v"", absentValue=""absent"") String string ) { return string; }

This method is not found for xyz -v abc

There were two bugs in the code:

- annotation values can never be null but null was checked for the presentValue to see if it was not there.
- After handling the parameters the new length of the command line was checked against the xargs. However, this still contained the parameter name + value. So the size was too high to match.

I've added a check for the Parameter.UNSPECIFIED when checking the status of presentValue and I removed the check for the length of xargs, only types is relevant I think. However, might need some other pair of eyes
",,,,,,,,,,,,,,FELIX-2927,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-07 19:44:52.742,,,no_permission,,,,,,,,,,,,56086,,,Sun Jun 12 14:01:14 UTC 2011,,,,,,0|i0vs8f:,183547,,,,,,,,"30/Mar/11 06:41;pkriens;Committed a fix but I think this needs better looking. The xargs list gets modified because with parameters, entries are removed. As it should be. However, I do not completely understand why xargs is checked. I've removed the check and all test cases run but it would be nice if someone looked deeper. Maybe when I work on 147 again I can take a deeper look.","07/Jun/11 19:44;db82407;The code currently committed to resolve this issue (has wrong issue id in comment so is not listed in subversion commits tab)

    r1086855 | pkriens | 2011-03-30 07:40:15 +0100 (Wed, 30 Mar 2011) | 1 line

    FELIX-2984 Invalid handling of parameters (options were ok). It works now and the tests are running but I am not confident this
    code is correct yet. Will probably have to rewrite this.

causes another problem:

no error is generated if too many args are supplied, as long as the initial args are ok

e.g. before this change, specifying too many args causes an error, as expected:

g! addcommand 1 2 3 4
gogo: IllegalArgumentException: Cannot coerce addcommand(String, String, String, String) to any of [(String, Object, String), (String, Object), (String, Object, Class)]


after this change, no error is issued:

g! addcommand 1 2 3 4
g! ","12/Jun/11 14:01;db82407;added new testcases for argument coercion, including Parameters.
Refactored Reflective.java to simplify code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Properties are not propagate to service by default,FELIX-2893,12502544,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,clement.escoffier,obigard,obigard,28/Mar/11 07:27,14/May/12 14:58,14/Mar/19 02:48,02/Apr/11 16:36,iPOJO-1.6.0,,,,,,ipojo-core-1.8.2,,,,,,,iPOJO,,,,,,0,,,,,,"When setting a unknown property on an iPojo component via the Config Admin, this property is not propagated to the service by default.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-02 16:34:20.105,,,no_permission,,,,,,,,,,,,56087,,,Mon May 14 14:58:25 UTC 2012,,,,,,0|i1au0f:,271328,,,,,,,,02/Apr/11 16:34;clement.escoffier;It appears that the propagation is not enabled by default which is not the expected behavior.,"02/Apr/11 16:36;clement.escoffier;Fixed in trunk.

Could you check with iPOJO-1.9.0-SNAPSHOT (from trunk)",14/May/12 14:58;clement.escoffier;iPOJO Core 1.8.2 was released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInstall starts non-daemon threads,FELIX-2890,12502334,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,sahoo,sahoo,24/Mar/11 22:59,17/Mar/15 07:00,14/Mar/19 02:48,16/Mar/12 08:20,fileinstall-3.1.10,,,,,,fileinstall-3.2.0,,,,,,,File Install,,,,,,1,,,,,,"The initial fileinstall thread can be a non-daemon thread as shown below:

""fileinstall-/space/ss141213/WS/gf/v3/publish/glassfish3/glassfish/modules/autostart/"" prio=10 tid=0x7b73d000 nid=0x1d77 in Object.wait() [0x7925c000]
""fileinstall-/space/ss141213/WS/gf/v3/publish/glassfish3/glassfish/domains/domain1/autodeploy/bundles/"" daemon prio=10 tid=0x0a3d7c00 nid=0x1d76 in Object.wait() [0x792ad000]

The first one here is created based on bundle context property where as the second one is on config event. Looking at the code, I see the code does not explicitly set daemon status, so the new thread just inherits the parent's daemon status. A simple fix like the below is needed to make sure that fileinstall always starts daemon thread so that even if the bundle is not stopped, the VM exits. 

Index: src/main/java/org/apache/felix/fileinstall/internal/FileInstall.java
===================================================================
--- src/main/java/org/apache/felix/fileinstall/internal/FileInstall.java	(revision 1063634)
+++ src/main/java/org/apache/felix/fileinstall/internal/FileInstall.java	(working copy)
@@ -214,6 +214,7 @@
             watcher.close();
         }
         watcher = new DirectoryWatcher(properties, context);
+        watcher.setDaemon(true);
         synchronized (watchers)
         {
             watchers.put(pid, watcher);

Let me know if you have objections or you think it is an incompatible change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-07 07:04:49.219,,,no_permission,,,,,,,,,,,,56090,,,Tue Jun 07 07:04:49 UTC 2011,,,,,,0|i07gqn:,41478,,,,,,,,07/Jun/11 07:04;gnt;It makes sense to me to configure threads as daemons.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid JSON content in http response after starting or stopping a bundle.,FELIX-2889,12501951,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,v_valchev,gschneck,gschneck,21/Mar/11 13:52,23/Nov/12 07:11,14/Mar/19 02:48,23/Nov/12 07:11,webconsole-3.1.8,,,,,,webconsole-4.0.0,,,,,,,Web Console,,,,,,0,,,,,,"When successfully starting of stopping a bundle via the Webconsole (POST request is sent with action=start/stop), the http response contains a bit of json ( {fragment:false,stateRaw:4} )  which is not fully respecting the JSON grammar : double-quotes missing on the attributes name.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-12 14:12:39.733,,,no_permission,,,,,,,,,,,,56091,,,Fri Nov 23 06:56:57 UTC 2012,,,,,,0|i0rfnj:,158179,,,,,,,,"12/Sep/11 14:12;v_valchev;Fixed in rev.1169752

About that JSON .. it is completely valid. The quotes are mandatory only if the key is not valid identifier, which is not our case.

The actual problem is that response omitted the content type header, and the browser wasn't able to recognize that the returned content is JSON.","12/Sep/11 16:26;jsedding;> The quotes are mandatory only if the key is not valid identifier

Where do you get this information from? According to the grammar on json.org the grammar, the key is defined to be a ""string"", and ""string"" is in turn defined to be surrounded by double quotes. Unconditionally.

This is different (i.e. More strict) from the syntax allowed when writing javascript objects.",12/Sep/11 17:32;v_valchev;It is my mistake. Obviously I didn't read the spec carefully.,"13/Sep/11 05:59;v_valchev;Added the quotes, svn rev.1170053

Thanks again for pointing out my mistake","13/Sep/11 13:10;jsedding;No worries, thanks for the fix!",23/Nov/12 06:54;fmeschbe;Close after release,"23/Nov/12 06:56;gschneck;Thank you for your message.

I'm currently out of office and have no access to email. I'll be back in the office on Monday, Dec. 3rd 2012.
In my absence, if your request is urgent please feel free to contact Gilles Metz at gmetz@adobe.com  or Jean-Claude Jung at jjung@adobe.com.

Regards,
Geoffroy Schneck

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"if you create a factory configuration and anybody takes a peek before you've had a chance to update, your pudding is trapped forever",FELIX-2888,12501910,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,aradzak,aradzak,20/Mar/11 23:22,25/Sep/13 14:02,14/Mar/19 02:48,16/Feb/12 14:02, configadmin-1.2.8,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,,,,,,0,,,,,,"If you create a factory configuration and then one of your bundle comrades (or another internal class) has a peek to see if there's anything ready yet, the original code that created the factory configuration is locked out because the peeker triggers a cache of a NEW configuration.

Here's the sequence

1) 
Userside -> call createFactoryConfiguration and catch the return value so you can do an update with it
felix side -> creates the configuration but doesn't cache it

2)
Userside -> let your friends know about the pid which they can peek at for future reference.  One of your friends is excited and peeks immediately (or soon after being informed).
felix side -> since an update hasn't been done yet, it creates a new configuration and puts it in cache

3)
Userside -> The code that called createFactoryConfiguration finishes its pondering and is ready to call conf.update(props) .. it gets no exception from the void method and so carries on with life.
felix side -> The cache already has something in it for this pid, so updates to the generated conf no longer have any effect, so the caller of createFactoryConfiguration's assumptions of update success are erroneous

4) 
Userside -> Someone does listConfigurations, and doesn't see this conf
felix side -> This is because the system still believes that the configuration has no properties

It's also useful to note that it is NOT a workaround to simply kludge things by doing a config regrab immediately before doing the update(props) operation because the config generated and cached by the peek call was NOT a factory configuration, because getConfiguration() had no reason to believe it should autogenerate a factory config, so it autogenerates a normal one.

I think (but am not totally sure) that this may have been a regression from FELIX-612",Ubuntu 10.04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-24 12:30:29.58,,,no_permission,,,,,,,,,,,,56092,,,Wed Sep 25 14:02:34 UTC 2013,,,,,,0|i07h3z:,41538,,,,,,,,"24/Mar/11 12:30;fmeschbe;Well, the createFactoryConfiguration method creates just a transient configuration object which is not persisted; in fact not even internally known to exist. So before informing ""your friends"" in the second step you currently would have to call Configuration.update(Dictionary) before informing ""your friends"".

In addition ""your excited friend"" taking a ""peek"" is probably calling getConfiguration this will create a Configuration if not existing yet -- which is the case here because the factory configuration does not exist yet. But then this now existing configuration is not a factory configuration but a singleton configuration whose Configuration.getFactoryPid() method will return null.

I think I can build this additional stability (kind of semi-caching the created factory configuration) into Configuration Admin without much effort.
","16/Feb/12 14:02;fmeschbe;Fixed in Rev. 1244978

Configuration retrieved through getConfiguration now also includes factory configuration which has not been persisted yet.

Also configuration retrieved from getConfiguration is always persisted (even new factory configuration not updated yet). This is to comply with the getConfiguration contract.",25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Properties upgrades,FELIX-2887,12501844,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rickhall,djencks,djencks,18/Mar/11 23:20,20/Sep/11 23:04,14/Mar/19 02:48,19/Sep/11 18:54,utils-1.1.0,,,,,,utils-1.1.2,,,,,,,Utils,,,,,,0,,,,,,"Properties should access System.getProperty(""line.separator"") in a protected block.

I want to be able to write entries with comments and multiple line values as well as read them.  The patch implements this; if for some reason this seems like a bad idea could we make storage, layout, and escapeKey accessible to subclasses?",,,,,,,,,,,,,,,,,,,,18/Mar/11 23:22;djencks;FELIX-2887.patch;https://issues.apache.org/jira/secure/attachment/12474042/FELIX-2887.patch,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-19 18:54:26.869,,,no_permission,,,,,,,,,,,,56093,,,Tue Sep 20 23:04:51 UTC 2011,,,,,,0|i1au0v:,271330,,,,,,,,"18/Mar/11 23:22;djencks;adds privileged block around system property access, adds methods to put entries with comments and multiple value lines.","19/Sep/11 18:54;rickhall;I've applied this patch, please close if you are satisfied.",20/Sep/11 23:04;djencks;thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The config admin bundle does not indicate its provided and required services dependencies,FELIX-2885,12501786,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,gnt,gnt,gnt,18/Mar/11 13:12,25/Sep/13 14:02,14/Mar/19 02:48,18/Mar/11 13:16,,,,,,,configadmin-1.4.0,,,,,,,Configuration Admin,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-23 01:27:43.554,,,no_permission,,,,,,,,,,,,40371,,,Wed Sep 25 14:02:36 UTC 2013,,,,,,0|i0apuf:,60460,,,,,,,,"23/Mar/11 01:27;fmeschbe;What is the problem here ? Thanks.

Background: We added the obr.xml file for the bundle plugin to be able to update the OBR with the required information without polluting the bundle manifest with deprecated headers....","23/Mar/11 11:49;gnt;So the overall idea is to have the bundle being self-described in terms of capabilities and requirements.  The manifest already contains all of the information at the module layer level (package imports, required bundles, etc...), but is missing the service level.   Tools such as OBR are able to recreate the OBR Resource based on the manifest (see the createResource methods on http://svn.apache.org/viewvc/felix/trunk/bundlerepository/src/main/java/org/apache/felix/bundlerepository/DataModelHelper.java?view=markup), and that's what is actually used by the maven bundle plugin when generating the obr xml description.

About those headers, I think the manifest is in 90% of the bundles quite unreadable for humans, mostly due to the use constraints which can generate very long headers, I'm not really convinced that adding this addition information will make it less usable.   In that case, I've made sure to generate the exact same information in the obr xml, but we could trim it down a bit by not adding the service.description and other fields.   On the fact that those headers are deprecated, I that's really a problem, I can change the header names, but I don't think the names are a real problem here, are they ?

Anyway, my use case is to use OBR to compute a transitive closure of the dependencies for a given bundle, but I don't necessarily have an real xml obr describing all the bundles.  Most of the time, bundles are self-describing, but the ConfigAdmin isn't.",25/Sep/13 14:02;fmeschbe;Close issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The multiplicity isn't taken into account by the maven bundle plugin and bundlerepository when generating the repository xml,FELIX-2884,12501784,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,18/Mar/11 13:06,24/Jun/11 12:36,14/Mar/19 02:48,18/Mar/11 13:16,,,,,,,bundlerepository-1.6.6,maven-bundle-plugin-2.3.5,,,,,,Bundle Repository (OBR),Maven Bundle Plugin,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,56095,,,2011-03-18 13:06:57.0,,,,,,0|i0vy7b:,184514,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
It's dangerous to use service instances as keys in a Map (in the http whiteboard bundle).,FELIX-2882,12501632,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,fmeschbe,marrs,marrs,16/Mar/11 23:26,28/Sep/13 17:40,14/Mar/19 02:48,05/Dec/11 20:30,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"In ExtenderManagerImpl.addMapping() the key that is used to store a tuple in a Map is actually the service instance that you get from the ServiceTracker. This is dangerous because you have absolutely no idea if that instance correctly implements equals() and hashCode(). It's usually better to use the ServiceReference as the key (which is guaranteed to correctly implement those methods). It's probably only a minor issue in practice, but still one you can look for a long time if it does bite you.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-17 12:07:56.192,,,no_permission,,,,,,,,,,,,56097,,,Mon Dec 05 20:30:31 UTC 2011,,,,,,0|i0vv4f:,184015,,,,,,,,17/Mar/11 12:07;fmeschbe;Alternatively (and more easily probably) an IdentityHashMap could be used instead of a regular HashMap,05/Dec/11 15:48;fmeschbe;To implement FELIX-3226 I have changed this to use the ServiceReference as the key,05/Dec/11 20:30;fmeschbe;Replace the service instances by the service reference as the key of the mappings in Rev. 1210612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in HTTP whiteboard bundle,FELIX-2881,12501631,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,marrs,marrs,marrs,16/Mar/11 23:11,28/Sep/13 17:40,14/Mar/19 02:48,05/Dec/11 20:35,http-2.2.0,,,,,,http-2.2.1,,,,,,,HTTP Service,,,,,,0,,,,,,"When starting up an OSGi application which uses the HTTP Jetty and whiteboard bundles, I get a concurrent modification exception a lot of the time:

ERROR: EventDispatcher: Error during dispatch. (java.util.ConcurrentModificationException)
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$ValueIterator.next(HashMap.java:822)
	at org.apache.felix.http.whiteboard.internal.manager.ExtenderManagerImpl.registerAll(ExtenderManagerImpl.java:175)
	at org.apache.felix.http.whiteboard.internal.manager.ExtenderManagerImpl.setHttpService(ExtenderManagerImpl.java:154)
	at org.apache.felix.http.whiteboard.internal.tracker.HttpServiceTracker.added(HttpServiceTracker.java:37)
	at org.apache.felix.http.whiteboard.internal.tracker.HttpServiceTracker.added(HttpServiceTracker.java:24)
	at org.apache.felix.http.whiteboard.internal.tracker.AbstractTracker.addingService(AbstractTracker.java:36)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:896)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)
	at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:233)
	at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:840)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:871)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:733)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:662)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3733)
	at org.apache.felix.framework.Felix.access$000(Felix.java:80)
	at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:717)
	at org.apache.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:107)
	at org.apache.felix.framework.Felix.registerService(Felix.java:2854)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:251)
	at org.apache.felix.http.base.internal.HttpServiceController.register(HttpServiceController.java:64)
	at org.apache.felix.http.base.internal.DispatcherServlet.init(DispatcherServlet.java:41)
	at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)
	at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
	at org.mortbay.jetty.Server.doStart(Server.java:224)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.apache.felix.http.jetty.internal.JettyService.initializeJetty(JettyService.java:145)
	at org.apache.felix.http.jetty.internal.JettyService.startJetty(JettyService.java:112)
	at org.apache.felix.http.jetty.internal.JettyService.run(JettyService.java:203)
	at java.lang.Thread.run(Thread.java:680)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-05 15:49:45.24,,,no_permission,,,,,,,,,,,,56098,,,Mon Dec 05 20:35:35 UTC 2011,,,,,,0|i0vsaf:,183556,,,,,,,,"16/Mar/11 23:18;marrs;Upon analysis of this issue, it seems the following scenario unfolds:

1) The HttpService goes live, as can be seen from the stack trace, and triggers a call to ExtenderManagerImpl.registerAll().
2) ExtenderManagerImpl.registerAll() loops over its internal collection (which seems well guarded by the synchronized keywords on all methods that manipulate or go over the internal HashMap).
3) At some point in time, actually before the exception occurs, some servlet is registered with the HttpService that in turn creates a new Servlet that is added to the service registry.
4) The addition of a new Servlet triggers a call to ExtenderManagerImpl.addMapping() on the same thread, so it already has the lock and modfies the internal collection.
5) A little while later, the iterator tries to proceed with the next element and fails with the exception printed above.

The underlying problem is that at point 3) we invoke another service while holding a lock. That is never a good idea. It's better to, for example, create a copy of the list whilst holding the lock and then iterating over that copy outside of the lock.",05/Dec/11 15:49;fmeschbe;Taking over to fix along with FELIX-3226,05/Dec/11 20:35;fmeschbe;Looks like Marcel already fixed this. Thus resolving.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Webconsole does not handle Vector<PrimitiveWrapper>,FELIX-2880,12501603,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,pkriens,pkriens,16/Mar/11 17:12,23/Sep/15 12:52,14/Mar/19 02:48,11/Sep/15 12:58,,,,,,,webconsole-4.2.12,,,,,,,Web Console,,,,,,0,,,,,,"An AD like:

    <AD name='Ints' id='ints' cardinality='-2147483648' required='true' type='Integer'/>

Should be edited as a list and returned as a Vector<Integer>. However, this shows as a  single integer in the webconsole, not a list editor. I guess it gets confused with primiitves?",,,,,,,,,,,,,,,,,,,,11/Sep/15 12:56;v_valchev;TEST-FELIX-2880.jar;https://issues.apache.org/jira/secure/attachment/12755396/TEST-FELIX-2880.jar,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-03-17 12:50:19.55,,,no_permission,,,,,,,,,,,,56099,,,Wed Sep 23 12:52:18 UTC 2015,,,,,,0|i1au1b:,271332,,,,,,,,17/Mar/11 12:50;fmeschbe;To the right of the input field there should be two buttons -- plus and minus -- klicking plus allows adding more values (klicking minus removes values).,30/Mar/11 07:28;pkriens;In this particular case it does not have the +/- and it creates an error when you save the screen,22/Oct/11 13:52;fmeschbe;I assume this is a web console issue ...,"22/Oct/11 13:53;fmeschbe;Still strange, I cannot reproduce this issue. I have added your sample <AD> to an existing metatype.xml and get the editor incl. the +/- as expected. I am using Web Console 3.1.6.","11/Sep/15 12:56;v_valchev;The attached test bundle proves, that the problem doesn't exist with the latest webconsole.","11/Sep/15 12:58;v_valchev;webconsole v4.2.12 is verified, that works correctly
the problem is probably fixed long ago, but now we have a test bundle, that proves it's fixed.",23/Sep/15 12:52;v_valchev;closing the issues after release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
