Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Cloners),Outward issue link (Reference),Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Coordination is not checked if its terminated,FELIX-6062,13216622,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,19/Feb/19 12:45,23/Feb/19 09:47,14/Mar/19 02:49,19/Feb/19 12:49,configadmin-1.9.10,,,,configadmin-1.9.12,,,,Configuration Admin,,0,,"When a coordination is used, it must be checked whether it is usable before a participant is added
",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 19 12:49:12 UTC 2019,,,,,,0|yi14rs:,9223372036854775807,,,,,,,,19/Feb/19 12:49;cziegeler;Fixed in rev 1853877,,,,,,,,,,,,,,,
Configuration Admin uses getDeclaredMethods without permission,FELIX-6061,13216620,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,timothyjward,timothyjward,timothyjward,19/Feb/19 12:40,23/Feb/19 09:47,14/Mar/19 02:49,20/Feb/19 08:34,configadmin-1.9.10,,,,configadmin-1.9.12,,,,Configuration Admin,,0,,"The use of getDeclaredMethods requires a security permission which Configuration Admin doesn't have. This needs to be fixed by either using getMethods (which doesn't need a permission) or adding the permission to Configuration Admin's permissions.perm

Removing the call would be preferred.

 

Note that this bug breaks the OSGi Compliance Tests",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 20 08:34:41 UTC 2019,,,,,,0|yi14rc:,9223372036854775807,,,,,,,,20/Feb/19 08:34;timothyjward;Changed to use getMethods() in SVN revision 1853885,,,,,,,,,,,,,,,
SCR exports promises,FELIX-6056,13215244,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,pkriens,pkriens,12/Feb/19 13:13,01/Mar/19 14:26,14/Mar/19 02:49,15/Feb/19 20:28,,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"Apache Felix SCR exports promises 1.0 as a convenience. However, since this package contains the implementation it is a +provider+. Originally, the import was correct for a provider, [1,1.1). however, last July it was increased to [1,2). This therefore against the semantic versioning specification that prescribes a minor import range when providing the implementation of an API.

Exporting an package like Promises is not a good idea anyway. It is only a convenience, promises have nothing to do with SCR in itself and that will always back fire in the end. Even exporting it correctly causes unnecessary version constraints since the order of resolving cannot be controlled. So if you have Promises 1.1 it depends on the order of resolving if SCR uses 1.0 or 1.1 and it creates nasty class spaces.

It is inconvenient to make SCR depend on Promises. Personally I would not have used promises or would have included the package privately. (No API of SCR depends on Promises) Since SCR is such a crucial base component I strongly recommend to not export it from SCR. ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-12 13:34:17.439,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 13 14:42:00 UTC 2019,,,,,,0|yi0wc0:,9223372036854775807,,,,,,,,"12/Feb/19 13:34;tjwatson;Also see FELIX-6043.  I'm perfectly fine having promises be imported.  But I will point out that SCR API DOES use promises with the following return types from:

org.osgi.service.component.runtime.ServiceComponentRuntime.enableComponent(ComponentDescriptionDTO)
org.osgi.service.component.runtime.ServiceComponentRuntime.disableComponent(ComponentDescriptionDTO)

And promises uses function.  Current versions of SCR release say they export function but they don't actually have any of the content from function.","12/Feb/19 13:55;pkriens;Yes, the API dependency is unfortunate since very few bundles use this class (let alone these rarely used methods). it is one of the few places where an OSGi spec references another spec than the framework. We always tried to keep these separate, which is imho good design. Not sure what happened here. The cost of not letting these functions use Promises would have been negligent.

The reason they export functions as well is I assume that Promises needs requires them. Another good reason not to export a package that is not yours.","12/Feb/19 23:34;tjwatson;OK, I think we should change to not export promises or function (only import them).","13/Feb/19 08:19;pkriens;Come on Tom! That was way too easy, this way you spoil all the fun! :)

Thanks a lot, any idea of a time frame?","13/Feb/19 11:07;cziegeler;I'm not sure what exactly we're trying to fix here. So far you need a single bundle for SCR. By not including promise/functions you out of a sudden need three bundles.
I understand the theoretical discussions about this, but in practice both bundles are released once every couple of years - next release will be with R8 I guess. 
So why can't we just inlcude the latest version, properly export/import it and are done with it for the next N years?","13/Feb/19 11:31;pkriens;By wrapping it in a single bundle you force others to follow {color:#333333}your{color} Promises' {color:#FF0000}implementation{color} and that version is not always compatible. in a runtime (The version we currently use for R7 is R6 promises.) Since SCR is such a fundamental bundle it should not force such constraints on other people's runtime.

Notice that this is mostly caused because it includes API {color:#FF0000}and{color} an implementation. An API only would still be not cohesive but would work ok. Since others do this as well, there is no backward compatibility on the API possible. You therefore must import it [1,1.1) This constrained will then likely cause multiple class spaces in more complex runtimes and that is almost always havoc. That is why importing [1,2) for a provided package is basically throwing a big wrench in the semantic versioning.

Exporting a package that is not part of your primary responsibility is fundamentally wrong in component based design. Yes, I feel we messed up on the SCR Runtime API to force Promises in the ScrComponentRuntime methods and it is inconvenient to require 3 instead of 1 bundle but the cause is the bad API design that references another spec, this causes an _external_ reference. Solving this problem by exporting those references is a hack and will cause problems.

At my customers I see the problems always around the bundles that start doing these hacks, never around simple clean honest manifests that refer to what they should refer to. Apache Felix has always been extremely good in this respect so I was quite surprised when I learned about this.

 ","13/Feb/19 11:45;cziegeler;Yes, I agree that we shouldn't have used Promises in the SCR Runtime API and its also a problem that promises has both API and impl in the same package.
I think we've updated to R7 promises now.
I'm still not 100% convinced about this, but in the end it's not important enough to spend too much time on it. It seems the current situation is causing problems, so let's change it and see what happens","13/Feb/19 12:48;pkriens;Since when are you guys so easy to convince? You spoil all the fun!  :)

BTW, I drove by Bielefeld last week and it was much nicer than I thought! :)

Thx

 ",13/Feb/19 13:26;cziegeler;That's impossible :) it doesn't exist...,"13/Feb/19 14:28;tjwatson;It wasn't hard to convince me because I didn't like these exports of util packages to begin with.  I just wasn't as motivated as you to change the current situation :)

I've been fixing a few other bugs in SCR so we can do our upgrade to SCR R7 for open liberty.  I'm still working through the testing of that before I want to consider a release of felix, but I think this issue should be fixed for the next SCR release.","13/Feb/19 14:42;tjwatson;I have a PR at: https://github.com/apache/felix/pull/183

Not sure why the magic linking in jira isn't happening for it.  I've reverted the dependencies back to 1.0 versions of promises and function because the implementation of SCR doesn't need the latest.  I've removed the exports and the explicit imports so that BND will calculate the imports and range.  This results in only promises getting imported at range [1.0,2.0) which I think is good.

I had to update the integration test to configure pax to install the promises and function bundles.  I will merge to trunk if I don't hear any objections today (we can always revert if needed).",,,,,
NullPointerException possible because ServiceReference.getBundle() can return null,FELIX-6055,13214465,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,07/Feb/19 21:24,01/Mar/19 14:26,14/Mar/19 02:49,07/Feb/19 21:51,scr-2.1.14,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"There are a couple of places in the SCR code where it gets the bundle object from ServiceReference.getBundle(). Unfortunately this method can return null when a service becomes unregistered. This can lead to FrameworkEvent errors with NPEs that look like the following:
{code}
 FrameworkEvent ERROR java.lang.NullPointerException
 at org.apache.felix.scr.impl.runtime.ServiceComponentRuntimeImpl.serviceChanged(ServiceComponentRuntimeImpl.java:491)
 at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:112)
 at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:923)
 at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:233)
 at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
 at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:865)
 at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:804)
 at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.setProperties(ServiceRegistrationImpl.java:171)
{code}

We should protect against such cases.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 07 21:51:01 UTC 2019,,,,,,0|yi0rjc:,9223372036854775807,,,,,,,,07/Feb/19 21:51;tjwatson;Fixed in svn revision 1853160,,,,,,,,,,,,,,,
HC Servlet rendering for json/verbose.txt is broken if property hc.name is missing,FELIX-6054,13214463,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,henzlerg,henzlerg,07/Feb/19 21:22,27/Feb/19 16:15,14/Mar/19 02:49,07/Feb/19 21:54,,,,,healthcheck.core 2.0.0,,,,Health Checks,,0,,"If a HC does not have the property hc.name (this property is explicitly optional), the servlet fails for format ""json"" or ""verbose.txt"" (""html"" and ""txt"" work just fine). 

The problem also exists in the latest Sling Version of Health Checks.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 07 21:54:19 UTC 2019,,,,,,0|yi0riw:,9223372036854775807,,,,,,,,07/Feb/19 21:54;henzlerg;Fixed in [r1853163|http://svn.apache.org/r1853163],,,,,,,,,,,,,,,
JMX Bean log should INFO/DEBUG level correctly,FELIX-6053,13214461,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,henzlerg,henzlerg,07/Feb/19 20:51,27/Feb/19 16:15,14/Mar/19 02:49,08/Feb/19 14:47,,,,,healthcheck.core 2.0.0,,,,Health Checks,,0,,"Currently the JMX LogTable does not differentiate between DEBUG/INFO in column ""level"" ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 08 14:47:24 UTC 2019,,,,,,0|yi0rig:,9223372036854775807,,,,,,,,08/Feb/19 14:47;henzlerg;Fixed in [r1853224|http://svn.apache.org/r1853224],,,,,,,,,,,,,,,
Ensure MBeans are registered also for legacy HCs,FELIX-6052,13214460,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,henzlerg,henzlerg,07/Feb/19 20:49,27/Feb/19 16:15,14/Mar/19 02:49,08/Feb/19 14:39,,,,,healthcheck.core 2.0.0,,,,Health Checks,,0,,"For execution, legacy HCs are already taken into account:
https://issues.apache.org/jira/browse/FELIX-5952?focusedCommentId=16643281&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16643281 

For JMX Bean registration, the same mechanism should kick in for consistency.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 08 14:39:42 UTC 2019,,,,,,0|yi0ri8:,9223372036854775807,,,,,,,,"08/Feb/19 14:39;henzlerg;Fixed in [r1853222|http://svn.apache.org/r1853222] by using the same filter expression as HealthCheckFilter is doing. Also improved filter to only include relevant services that have property ""hc.mbean.name"" set.",,,,,,,,,,,,,,,
Use abstract class for PrototypeRefPair implementations for Single vs. Multiple case,FELIX-6050,13214253,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,tjwatson,tjwatson,tjwatson,06/Feb/19 21:08,01/Mar/19 14:26,14/Mar/19 02:49,07/Feb/19 16:33,scr-2.1.14,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"The SCR implementation has two classes that keep track of prototype references from a service component:

org.apache.felix.scr.impl.manager.MultiplePrototypeRefPair
org.apache.felix.scr.impl.manager.SinglePrototypeRefPair

I'm not entirely sure what motivated the need for Multiple vs. Single here.  The Single one gets used if the service component is a singleton service component.  The Multiple one gets used for service components that are bundle or prototype service components.  The Multiple one will key the instances of the referenced prototype service by the ComponentContextImpl for the requiring service component.  That way if there are multiple instances of the requiring component each instance (and therefore ComponentContextImpl insteance) will get a unique instance of the required prototype service.

It appears the thought was that some optimizations could have been realized for the Singleton case so it has a specialized class separate from Multiple.  But I think this only makes the code hard to understand and I question that the current state of the code is providing any performance improvement.

I propose we remove the SinglePrototypeRefPair and rename the MultiplePrototypeRefPair to be simply PrototypeRefPair.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-06 22:18:19.311,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 07 16:33:57 UTC 2019,,,,,,0|yi0q8o:,9223372036854775807,,,,,,,,"06/Feb/19 22:18;githubbot;GitHub user tjwatson opened a pull request:

    https://github.com/apache/felix/pull/182

    FELIX-6050 - remove SinglePrototypeRefPair

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tjwatson/felix FELIX-6050

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/182.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #182
    
----
commit 1d2a62c36a7bb5ce8cf538447fcbe9d85265c343
Author: Tom Watson <tjwatson@...>
Date:   2019-02-06T21:13:33Z

    FELIX-6050 - remove SinglePrototypeRefPair

----
",06/Feb/19 22:46;djencks;The motivation was to provide a simpler quicker code path when there was only the one component with the reference; it leaves out a map and a map lookup.  I still think the two versions make some sense but I'm not going to argue.  It's not going to make any timing difference unless the component is using the locator strategy repeatedly over and over again; it does make a slight space difference.,"07/Feb/19 16:02;tjwatson;OK, we can keep the two versions, but I am going to refactor the code a bit so the two implementations Single vs. Multiple can share common code for dealing with ServiceObjects.",07/Feb/19 16:33;tjwatson;Refactored the PrototypeRefPair impls to share code.,,,,,,,,,,,,
Listeners registered with boolean property are ignored,FELIX-6049,13213936,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,tdriessen,tdriessen,05/Feb/19 15:16,01/Mar/19 14:13,14/Mar/19 02:49,07/Feb/19 06:40,http.base-4.0.4,http.bridge-4.0.4,http.jetty-4.0.6,,http.base-4.0.6,http.bridge-4.0.6,http.jetty-4.0.8,,HTTP Service,,0,,"I just tried to get a ServletContextListener to work, but did not succeed, although everything is done as defined by the spec.
 
Here you can find a minimal example of my setup [https://github.com/Sandared/io.jatoms.osgi.possiblebugs.scl]
 
The Servlet I'm registering is working fine, but the ServletContextListener that I registered too is never called. 
Even if I call getServletContext() from within the Servlet, my Listener is never called.
I would have expected the ServletContextListener to be called at least once, after a DefaultServletContext has been created by the ServletContainer
 
Additional Information:
The MySCL.java:
 
@Component
@HttpWhiteboardListener
public class MySCL implements ServletContextListener {
    @Override
    public void contextDestroyed(ServletContextEvent arg0) {
        System.out.println(""Destroyed"");
    }

    @Override
    public void contextInitialized(ServletContextEvent arg0) {
        System.out.println(""Initialized"");
    }
}
 
Bundles running:
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|OSGi System Bundle (3.13.100.v20180827-1536)|3.13.100.v20180827-1536
    1|Active     |    1|osgi.possiblebugs.scl.impl (0.0.1.201902051255)|0.0.1.201902051255
    2|Active     |    1|Apache Commons FileUpload (1.3.3)|1.3.3
    3|Active     |    1|Apache Commons IO (2.6.0)|2.6.0
    4|Active     |    1|Apache Felix Gogo Command (1.0.2)|1.0.2
    5|Active     |    1|Apache Felix Gogo Runtime (1.0.10)|1.0.10
    6|Active     |    1|Apache Felix Gogo Shell (1.0.0)|1.0.0
    7|Active     |    1|Apache Felix Http Jetty (4.0.6)|4.0.6Li
    8|Active     |    1|Apache Felix Servlet API (1.1.2)|1.1.2
    9|Active     |    1|Apache Felix Inventory (1.0.4)|1.0.4
   10|Active     |    1|Apache Felix Declarative Services (2.1.10)|2.1.10
   11|Active     |    1|Apache Felix Web Management Console (4.3.4)|4.3.4
   12|Active     |    1|Apache Felix Web Console Service Component Runtime/Declarative Services Plugin (2.0.8)|2.0.8
   13|Active     |    1|org.osgi:org.osgi.util.function (1.1.0.201802012106)|1.1.0.201802012106


List of components registered:
 
io.jatoms.osgi.possiblebugs.scl.MyServlet in bundle 1 (io.jatoms.osgi.possiblebugs.scl.impl:0.0.1.201902051258) enabled, 1 instance.
    Id: 1, State:ACTIVE
io.jatoms.osgi.possiblebugs.scl.MySCL in bundle 1 (io.jatoms.osgi.possiblebugs.scl.impl:0.0.1.201902051258) enabled, 1 instance.
    Id: 0, State:SATISFIED
 
Info for MySCL component:
Class:         io.jatoms.osgi.possiblebugs.scl.MySCL
Bundle:        1 (io.jatoms.osgi.possiblebugs.scl.impl:0.0.1.201902051258)
Enabled:       true
Immediate:     false
Services:      [javax.servlet.ServletContextListener]
Scope:         singleton
Config PID(s): [io.jatoms.osgi.possiblebugs.scl.MySCL], Policy: optional
Base Props:    (1 entry)
  osgi.http.whiteboard.listener<Boolean> = true

Component Configuration Id: 0
-----------------------------
State:        SATISFIED
Service:      50 [javax.servlet.ServletContextListener]
Config Props: (3 entries)
  component.id<Long> = 0
  component.name<String> = io.jatoms.osgi.possiblebugs.scl.MySCL
  osgi.http.whiteboard.listener<Boolean> = true
References:   (total 0)
 
Is there anything wrong with this setup? Or is this a bug of felix.http?",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-06 15:14:54.07,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 08 10:46:20 UTC 2019,,,,,,0|yi0oag:,9223372036854775807,,,,,,,,"06/Feb/19 15:14;cziegeler;Registration looks ok to me, it seems your listener is not picked up.
Can you debug and see whether ListenersTracker#getServiceInfo is called for your listener? ","06/Feb/19 16:27;tdriessen;ListenersTracker#getServiceInfo is called.

 

I searched a little bit and I think I found the reason why this is not working:

 

Within ListenerInfo constructor there is the following statement:

this.enabled = ""true"".equalsIgnoreCase(this.getStringProperty(ref, HttpWhiteboardConstants.HTTP_WHITEBOARD_LISTENER));

This one returns false although the value is actually set to ""true"".

This is because getStringProperty() returns null if the value asked for is not of type String.

The attribute HttpWhiteboardConstants.HTTP_WHITEBOARD_LISTENER is of type Boolean, so this statement evaluates to ""true"".equalsIgnoreCase(null);

 

The ""enabled"" value is then used in WhiteboardManager#addWhiteboardService to determine if the the service is actually valid, which it is not because it is not enabled.","06/Feb/19 16:31;tdriessen;A quick check validated this.

If I change my component like this:

@Component(property= \{HttpWhiteboardConstants.HTTP_WHITEBOARD_LISTENER + ""=true""})
public class MySCL implements ServletContextListener ...

it works as expected.","07/Feb/19 06:06;cziegeler;Thanks, yes in R6 this property needed to be of type String, we relaxed that for R7 but apparently forgot to adjust the code",07/Feb/19 06:37;cziegeler;Fixed in rev 1853114.,08/Feb/19 10:46;tdriessen;Thanks :),,,,,,,,,,
Component deactivation does not cause reference services to be ungotten,FELIX-6044,13213366,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,01/Feb/19 17:21,01/Mar/19 14:26,14/Mar/19 02:49,05/Feb/19 16:39,scr-2.1.14,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"The fix to FELIX-5974 has caused an issue for the default reference scope of bundle.  When a component has a simple @Reference and that component is deactivated the services that it references will not be ungotten by SCR.  This causes all kinds of issues for use counting of the consumed service.

The issue is that org.apache.felix.scr.impl.manager.DependencyManager.close(ComponentContextImpl<S>, EdgeInfo) is calling RefPair.unsetServiceObject now for all RefPair types.  The RefPair types MultiplePrototypeRefPair and SinglePrototypeRefPair were updated to have unsetServiceObject to also have that service be ungotten.  But the default SingleRefPair type was not.  This causes issues when ultimately the DependencyManagers are deactivated later which then closes the customizer for the dependency and org.apache.felix.scr.impl.manager.DependencyManager.AbstractCustomizer.ungetService(RefPair<S, T>) is called.  By this time there will now be a null service and it will not be ungotten.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-01 18:15:18.911,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 05 16:38:32 UTC 2019,,,,,,0|yi0ks0:,9223372036854775807,,,,,,,,"01/Feb/19 18:15;githubbot;GitHub user tjwatson opened a pull request:

    https://github.com/apache/felix/pull/180

    FELIX-6044 - avoid calling ungetServiceObject too early for simple case of SingleRefPair

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tjwatson/felix FELIX-6044

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/180.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #180
    
----
commit bf7f727dc812458133e1f8814a9f4ae6b5df3988
Author: Tom Watson <tjwatson@...>
Date:   2019-02-01T17:28:38Z

    FELIX-6044 - avoid calling ungetServiceObject too early for simple case
    of SingleRefPair

----
","05/Feb/19 16:38;githubbot;Github user tjwatson closed the pull request at:

    https://github.com/apache/felix/pull/180
",,,,,,,,,,,,,,
ClassNotFoundException org.osgi.util.function.Function,FELIX-6043,13213090,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,tjwatson,pleeplop,pleeplop,31/Jan/19 14:01,01/Mar/19 14:26,14/Mar/19 02:49,05/Feb/19 20:16,scr-2.1.14,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"The manifest declares org.osgi.util.function as exported but it is not embedded.

A quick fix is to declare the dependency with maven

see https://github.com/apache/felix/pull/177",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-31 19:05:23.744,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 13 14:46:02 UTC 2019,,,,,,0|yi0j2o:,9223372036854775807,,,,,,,,"31/Jan/19 19:05;tjwatson;This is the unfortunate consequence of embedding all the dependencies of your own API into the bundle.  In this case org.osgi.service.component.runtime uses org.osgi.util.promise which uses org.osgi.util.function.  Looks like an oversite when the export of function was added but there was not dependency on function.  I'm not sure why the build is not failing on this.  I thought bnd would complain for something like this.  SCR is currently implementing OSGi R7 but is embedding promise at version 1.0 (from OSGi R6).  I think the dependencies on promise and function should be updated to the latest versions for R7.  That is 1.1.1 for promise and 1.1 for function.

When we get to implementing R8 we will have to remember to up our dependencies on promise and function again to be whatever the R8 versions will be.",05/Feb/19 20:16;tjwatson;I updated the dependencies to include promise 1.1.1 and function 1.1,"06/Feb/19 09:02;githubbot;Github user pleeplop closed the pull request at:

    https://github.com/apache/felix/pull/177
",13/Feb/19 14:46;tjwatson;Notice that we now plan to only import promises (not export) with issue FELIX-6056.,,,,,,,,,,,,
scr gogo commands require gogo runtime to be present when scr resolves,FELIX-6041,13212566,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,29/Jan/19 15:01,01/Mar/19 14:26,14/Mar/19 02:49,29/Jan/19 19:30,scr-2.1.14,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"I cannot seem to find the actual jira issue this was worked under.  At some point in the 2.1 version of SCR the scr gogo commands were significantly reworked with the following commit:

https://github.com/apache/felix/commit/d6232f91ffb386835d3ae22dd2f003c854310ef5

This put a hard dependency on the gogo package {{org.apache.felix.service.command}} package.  The dependency was declared as optional, but this means that if the gogo.runtime bundle is installed/resolved after the scr bundle then the scr bundle will never wire to the package for the Converter service.  SCR then proceeds to register a Converter service using a ServiceFactory, but this service cannot be used for two reasons.
# For the gogo.runtime to see the service the scr bundle must be wired to the service package otherwise the framework will not give the service to the gogo.runtime.
# Even if the gogo.runtime could see the service the ServiceFactory would ultimately fail to create the Converter service object with some class loading error.
This ultimately leaves the scr commands that require DTO conversion/formating by the gogo.runtime to fall back to using toString which prints out confusing (for the user) json like output.

Perhaps some use of late binding dynamic import could be used, but that would require some kind of trigger to SCR to load the class from the package to force the dynamic wire and then registration of the Converter service.  Even then it would cause a re-resolve of the SCR bundle if the gogo bundles are then uninstalled which I would like to avoid.

One possible solution is to track the CommandProcessor service and when it is available then register a Proxy Converter service with the BundleContext of the bundle that registers the CommandProcessor.  This way we do not need a hard requirement on the {{org.apache.felix.service.command}} in order to get good output from the scr gogo commands.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-29 15:58:04.301,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 29 18:51:34 UTC 2019,,,,,,0|yi0fuo:,9223372036854775807,,,,,,,,"29/Jan/19 15:58;githubbot;GitHub user tjwatson opened a pull request:

    https://github.com/apache/felix/pull/174

    FELIX-6041 - allow scr commands to work when gogo.runtime resolves later

    Remove the optional dependency on org.apache.felix.service.command
    package to allow gogo.runtime to be installed and resolved after the SCR
    bundle.  This allows the scr gogo commands to work while avoiding a wire
    from the SCR bundle to the gogo packages.
    
    This is achieved by generating a proxy instance of the Converter service
    and registering it with the gogo.runtime BundleContext (or what ever
    bundle registers the CommandProcessor service.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tjwatson/felix FELIX-6041

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/174.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #174
    
----
commit 787f792afaaabcf6f5b50e1af4c496814f3c8364
Author: Tom Watson <tjwatson@...>
Date:   2019-01-29T15:45:12Z

    FELIX-6041 - allow scr commands to work when gogo.runtime resolves later
    
    Remove the optional dependency on org.apache.felix.service.command
    package to allow gogo.runtime to be installed and resolved after the SCR
    bundle.  This allows the scr gogo commands to work while avoiding a wire
    from the SCR bundle to the gogo packages.
    
    This is achieved by generating a proxy instance of the Converter service
    and registering it with the gogo.runtime BundleContext (or what ever
    bundle registers the CommandProcessor service.

----
","29/Jan/19 18:51;githubbot;Github user tjwatson closed the pull request at:

    https://github.com/apache/felix/pull/174
",,,,,,,,,,,,,,
Race condition prevents optional/greedy ref setter method from being called,FELIX-6036,13211336,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,bdaniel,bdaniel,23/Jan/19 17:30,01/Mar/19 14:26,14/Mar/19 02:49,25/Jan/19 14:40,scr-2.1.14,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"I have a component with an optional/dynamic/greedy reference. The target is registered directly with OSGi using BundleContext.registerService(). Normally, either SingleDynamicCustomizer.addedService() or SingleComponentManager.createImplementationObject() will succeed in binding the reference, but there is a race condition that can prevent the setter method from ever being called. 

 

The failure path is as follows:

1) SingleComponentManager.createImplementationObject calls open() on each of its DependencyManagers. This generates an OpenStatus where the RefPair list is empty because our target has not been registered yet. 

2) Before createImplementationObject() can set the component context, the customizer's addedService() method is called in response to the target service registration. It attempts to bind the target service, but that will not happen because the component context has not been set yet. 

3) createImplementationObject then creates the implementation, sets the component context, and goes through the list of OpenStatus objects to bind target services. The RefPair list for the OpenStatus object will still be empty, so we will not call the setter method for the reference we're concerned about. 

 

I'm not sure of a good way to fix this. I couldn't come up with a good approach using synchronization or earlier creation of the implementation object. At the moment I am working around this by refreshing the list of RefPairs in the OpenStatus object at the top of DependencyManager.bindDependency():
 
{code:java}
// Refresh ref list before binding
synchronized(m_tracker.tracked()) {
   status.refs=m_customizer.getRefs(status.trackingCount);
}
{code}
 ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-24 21:07:53.813,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 25 14:40:35 UTC 2019,,,,,,0|yi08b4:,9223372036854775807,,,,,,,,"24/Jan/19 21:07;githubbot;GitHub user tjwatson opened a pull request:

    https://github.com/apache/felix/pull/170

    FELIX-6036 - avoid stashing stale RefPair objects in OpenStatus

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tjwatson/felix fixSCR-6036

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/170.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #170
    
----
commit 072aa9539a9ce1636304ee25e4b1fc598959a393
Author: Tom Watson <tjwatson@...>
Date:   2019-01-24T16:46:13Z

    FELIX-6036 - avoid stashing stale RefPair objects in OpenStatus

----
","25/Jan/19 14:38;githubbot;Github user tjwatson closed the pull request at:

    https://github.com/apache/felix/pull/170
",25/Jan/19 14:40;tjwatson;Will be fixed in next release of SCR,,,,,,,,,,,,,
Felix Http Jetty does not have a service capability for the HttpService,FELIX-6029,13209891,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,timothyjward,timothyjward,timothyjward,16/Jan/19 11:51,01/Mar/19 14:14,14/Mar/19 02:49,30/Jan/19 11:00,http.jetty-4.0.6,,,,http.jetty-4.0.8,,,,HTTP Service,,0,,The Felix Http Jetty bundle provides an HttpService service but does not have a Provide-Capability for it. This prevents bundles which use the HttpService from resolving when used with Felix Http Jetty.,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-29 18:19:08.759,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 30 09:24:44 UTC 2019,,,,,,0|y002go:,9223372036854775807,,,,,,,,"29/Jan/19 18:19;githubbot;GitHub user timothyjward opened a pull request:

    https://github.com/apache/felix/pull/175

    Add a capability advertising that the HttpService is provided by this…

    … bundle
    
    Fixes FELIX-6029

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/timothyjward/felix httpservice-cap

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/175.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #175
    
----
commit 0e1bc622c612c6e4f7ce075cfedb7a3d72063609
Author: Tim Ward <timothyjward@...>
Date:   2019-01-29T16:16:58Z

    Add a capability advertising that the HttpService is provided by this bundle

----
","30/Jan/19 09:24;githubbot;Github user timothyjward closed the pull request at:

    https://github.com/apache/felix/pull/175
",,,,,,,,,,,,,,
SCR command problems,FELIX-6026,13209033,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,bdaniel,bdaniel,11/Jan/19 15:25,01/Mar/19 14:26,14/Mar/19 02:49,25/Jan/19 22:28,scr-2.1.14,,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"There are a couple of problems resulting from the changes to SCR commands in [https://github.com/apache/felix/pull/130] .

First, ScrInfo is not registered as a service when ds.info.service=true is specified in config admin. The core issue is that the setScrCommand method of ScrConfigurationImpl is never called, so it will not be available in this block around line 208:
{code:java}
if ( scrCommand != null )
{
scrCommand.updateProvideScrInfoService( infoAsService() );
}
{code}
That can be fixed by adding the following to the Activator.doStart() method (though I haven't spent much time thinking about better solutions):
{code:java}
m_configuration.setScrCommand(m_componentCommands);
{code}
Second, the ScrInfo list() and info() implementation no longer accept a null component ID. The javadoc for ScrInfo still indicates that a null ID will give information for all components. We have found this function invaluable for dumping the state of every component, so it would be nice to get this back.

 ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-25 22:17:35.753,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 25 22:28:57 UTC 2019,,,,,,0|u00r14:,9223372036854775807,,,,,,,,"25/Jan/19 22:17;githubbot;GitHub user tjwatson opened a pull request:

    https://github.com/apache/felix/pull/172

    FELIX-6026 - Fix ScrInfo service issues

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tjwatson/felix FELIX-6026

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/172.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #172
    
----
commit 07c1ebab265fc88fb95f34efad8a51e73220b009
Author: Tom Watson <tjwatson@...>
Date:   2019-01-25T14:27:14Z

    FELIX-6026 - Fix ScrInfo service issues

----
","25/Jan/19 22:27;githubbot;Github user tjwatson closed the pull request at:

    https://github.com/apache/felix/pull/172
",25/Jan/19 22:28;tjwatson;Will be fixed in 2.1.16 release.,,,,,,,,,,,,,
SCR bnd plugin sometimes fails with IncompatibleClassChangeError: Implementing class,FELIX-6023,13208860,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,sseifert@pro-vision.de,madamcin,madamcin,10/Jan/19 20:28,26/Jan/19 11:07,14/Mar/19 02:49,17/Jan/19 08:53,scr bnd plugin 1.9.0,,,,scr bnd plugin 1.9.2,,,,SCR Tooling,,0,patch-available," 

When building a project where a newer version of a dependency is embedded in the project artifact with a conflicting older version of said dependency is also present on the classpath, SOME environments encounter an exception that is similar to the following:
{noformat}
[ERROR] Manifest com.adobe.acs:acs-aem-commons-bundle:bundle:3.19.1-SNAPSHOT : Got unexpected exception while analyzing:org.apache.felix.scrplugin.SCRDescriptorException: Unable to load compiled class: com.google.common.base.Suppliers$SupplierFunctionImpl
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:156)
	at org.apache.felix.scrplugin.SCRDescriptorGenerator.execute(SCRDescriptorGenerator.java:146)
	at org.apache.felix.scrplugin.bnd.SCRDescriptorBndPlugin.analyzeJar(SCRDescriptorBndPlugin.java:178)
	at aQute.bnd.osgi.Analyzer.doPlugins(Analyzer.java:820)
	at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:229)
	at aQute.bnd.osgi.Builder.analyze(Builder.java:408)
	at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:850)
	at aQute.bnd.osgi.Builder.build(Builder.java:116)
	at org.apache.felix.bundleplugin.ManifestPlugin.getAnalyzer(ManifestPlugin.java:291)
	at org.apache.felix.bundleplugin.ManifestPlugin.execute(ManifestPlugin.java:98)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:384)
	at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:375)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:956)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:192)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: java.lang.IncompatibleClassChangeError: Implementing class
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.apache.felix.scrplugin.helper.ClassScanner.scanSources(ClassScanner.java:144)
	... 33 more

[ERROR] Error(s) found in manifest configuration{noformat}
The sequence of dependencies in the build should allow the preferred embedded version to be declared with higher precedence than the non-preferred version, but this sequence does not appear to be respected because of the use of a non-linked HashSet in `SCRDescriptorBndPlugin.getClassPath()` to post-process the list of classpath elements returned from Analyzer.getClasspath().

I attached to debug logs from the execution. the *.bnd-1.9.0.log file shows the `uber-jar` artifact listed before the `guava` artifact in the classpath log, but their order is reversed in the dependencies log.

I then replaced the HashSet with a LinkedHashSet in the bnd plugin and rebuilt the project, resulting in the *.bnd-1.9.1-SNAPSHOT.log, which shows the sequence of these two artifacts being the same in both the classpath log and the dependencies log.

See: [https://github.com/Adobe-Consulting-Services/acs-aem-commons/issues/1675] for background.","Maven home: /usr/local/Cellar/maven/3.6.0/libexec
Java version: 1.8.0_192, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""mac os x"", version: ""10.14.2"", arch: ""x86_64"", family: ""mac""",,,,,,,,,,,,10/Jan/19 20:24;madamcin;com.adobe.acs.acs-aem-commons-bundle.bnd-1.9.0.log;https://issues.apache.org/jira/secure/attachment/12954482/com.adobe.acs.acs-aem-commons-bundle.bnd-1.9.0.log,10/Jan/19 20:24;madamcin;com.adobe.acs.acs-aem-commons-bundle.bnd-1.9.1-SNAPSHOT.log;https://issues.apache.org/jira/secure/attachment/12954481/com.adobe.acs.acs-aem-commons-bundle.bnd-1.9.1-SNAPSHOT.log,,2.0,,,,,,,,,,,,,,,,,,,2019-01-10 20:33:52.602,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 23 08:43:21 UTC 2019,,,,,,0|u00pyo:,9223372036854775807,,,,,,,,"10/Jan/19 20:33;githubbot;GitHub user adamcin opened a pull request:

    https://github.com/apache/felix/pull/165

    FELIX-6023 bnd scrplugin preserve sequence of classpath entries.

    Replace the HashSet used for deduping classpath entries with a LinkedHashSet to retain the precedence established by the Analyzer.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adamcin/felix FELIX-6023

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/165.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #165
    
----
commit 0e50d6bdff9f53ef6fb5efe9aa8f9ff88d4c82d1
Author: Mark Adamcin <adamcin@...>
Date:   2019-01-10T20:29:40Z

    FELIX-6023 bnd scrplugin preserve sequence of classpath entries.

----
",17/Jan/19 02:50;madamcin;[~kwin] do you have any concerns with this change?,"17/Jan/19 06:11;kwin;[~madamcin] Looks good to me, but I am not a committer on Felix, so I cannot apply it.","17/Jan/19 08:52;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/165
","17/Jan/19 08:53;sseifert@pro-vision.de;thanks, patch applied in rev. 1851503",23/Jan/19 08:41;kwin;[~sseifert@pro-vision.de] Would you mind starting a release? This issue currently prevents some people building ACS AEM Commons (https://github.com/Adobe-Consulting-Services/acs-aem-commons/issues/1675).,"23/Jan/19 08:43;sseifert@pro-vision.de;yes, i can start a release vote today",,,,,,,,,
HttpService HttpServiceController should stop whiteboardManager before httpServicefactory,FELIX-5995,13202061,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,03/Dec/18 17:52,01/Mar/19 14:13,14/Mar/19 02:49,26/Feb/19 13:04,http.base-4.0.4,http.bridge-4.0.4,http.jetty-4.0.6,,http.base-4.0.6,http.bridge-4.0.6,http.jetty-4.0.8,,HTTP Service,,0,,"The HttpServiceController does in the register method start the httpServiceFactory and then the whiteboardManager. In the unregister method, it does stop the httpServiceFactory and then the whiteboardManager. That creates a problem as the whiteboardManager needs a started httpServiceFactory when services come in. 

The fix should be simple, we should stop the whiteboardManager before we stop the httpServiceFactory.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-25 16:21:03.792,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 26 13:04:57 UTC 2019,,,,,,0|s0148o:,9223372036854775807,,,,,,,,03/Dec/18 17:53;karlpauls;Done in r1848078.,"25/Feb/19 16:21;cziegeler;This breaks the integration tests, when the jetty bundle is stopped, the servlets are not properly destroyed","26/Feb/19 05:40;cziegeler;[~kpauls] I assume you've experienced exceptions on shutdown, Can you add the stacktrace to this issue?","26/Feb/19 10:16;karlpauls;Right, there was an NPE sometimes. It looked like this:

{noformat}
[FelixStartLevel] org.apache.felix.http.jetty [ServiceReference 114 from bundle 62 : org.apache.sling.startupfilter:0.0.1.Rev1764485 ref=[javax.servlet.Filter] properties={objectClass=[javax.servlet.Filter], osgi.http.whiteboard.context.select=(osgi.http.whiteboard.context.name=*), osgi.http.whiteboard.filter.pattern=/, service.bundleid=62, service.id=114, service.ranking=36864, service.scope=singleton, sling.filter.scope=REQUEST}] Exception while registering Filter service (java.lang.NullPointerException)
{noformat}

However, I still think that it makes sense to have the whiteboard be stopped before the httpServiceFactory. Unfortunately, there is this special case namely, that services registered with the http service directly are not stopped because the whiteboard provides the default context and they end-up being in that context. The stop of the whiteboard does clean-out the context(s) but only destroys the services that it published itself. For the one added via the http service it doesn't call destroy even so it releases the context - hence, afterwords, when the http service is stopped it doesn't find the service in the context anymore and it doesn't destroy it either. 

Oh well, I'm not familiar enough with the code to fix this - feel free to rollback the change for now and maybe push this issue out.","26/Feb/19 13:04;cziegeler;Actually after revisiting the javadocs for HttpService.unregister I think the test case is wrong. The javadoc says:
If the bundle which performed the registration is stopped or otherwise
 ""unget""s the Http Service without calling {@link #unregister(String)}
 then Http Service must automatically unregister the registration.
 However, if the registration was for a servlet, the {@code destroy}
 method of the servlet will not be called in this case since the bundle
 may be stopped

So when the jetty bundle is stopped, destroy must not be called. I've corrected the test case",,,,,,,,,,,
endpoint property for host 0.0.0.0 not resolved,FELIX-5994,13201933,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,egli,egli,03/Dec/18 08:39,01/Mar/19 14:14,14/Mar/19 02:49,03/Dec/18 22:38,http.jetty-4.0.6,,,,http.jetty-4.0.8,,,,HTTP Service,,0,,"The JettyService allows configuring the host to {{null}} or {{0.0.0.0}} which both result binding to all interfaces. While this works fine, the endpoint property is only correctly set when the host is {{null}}, but not when it is set to {{0.0.0.0}}. In the latter case it remains {{0.0.0.0}} (which potentially confuses down stream application depending on this endpoint property).

The problematic line of code seems to be in addEndpointProperties [here|https://github.com/apache/felix/blob/trunk/http/jetty/src/main/java/org/apache/felix/http/jetty/internal/JettyService.java#L794]",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-03 22:38:16.47,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 04 08:36:03 UTC 2018,,,,,,0|s013g8:,9223372036854775807,,,,,,,,"03/Dec/18 22:38;karlpauls;[~egli], I think I fixed it in http://svn.apache.org/viewvc?view=revision&revision=1848112. Please reopen if it isn't fixed.","04/Dec/18 08:36;egli;lgtm, thx!",,,,,,,,,,,,,,
DM ServiceTracker memory leak,FELIX-5990,13201110,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,28/Nov/18 13:46,02/Dec/18 17:16,14/Mar/19 02:49,28/Nov/18 14:14,dependencymanager-3.0.0,,,,org.apache.felix.dependencymanager-r14,,,,Dependency Manager,,0,,"We have an old memory leak that comes from dependency manager 3.0.0 version, where the dm ServiceTracker does not remove the Set used to register highest tracked services when an optional ServiceDependency becomes unavailable.

Here is the old code where the memory leak happens, in org.apache.felix.dm.tracker.ServiceTracker.java:

 
{code:java}
private void addHighestTrackedCache(ServiceReference reference) {
    Long serviceId = ServiceUtil.getServiceIdObject(reference);
    TreeSet services = (TreeSet) m_highestTrackedCache.get(serviceId);
    if (services == null) {
    services = new TreeSet();
    m_highestTrackedCache.put(serviceId, services);
    }
    services.add(reference);
}

private void removeHighestTrackedCache(ServiceReference reference) {
    Long serviceId = ServiceUtil.getServiceIdObject(reference);
    TreeSet services = (TreeSet) m_highestTrackedCache.get(serviceId);
    if (services != null) {
        services.remove(reference);
    }
}
{code}

So, the removeHighestTrackedCache does not remove the TreeSet from the m_highestTrackedCache when it becomes empty. 

So, the memory leak happens in the following situation: you have a Consumer component which has an optional dependency on a Provider, and the Provider service disappears and reappears a huge number of time.

The memory can grow slowly, but may lead to an OOM in case the framework is run for a very long time and if the Provider service is registered/unregistered a lot of time.


",,,,,,,,,,,,,28/Nov/18 13:49;pderop;dm.memoryleak.tgz;https://issues.apache.org/jira/secure/attachment/12949840/dm.memoryleak.tgz,28/Nov/18 13:48;pderop;oom.png;https://issues.apache.org/jira/secure/attachment/12949839/oom.png,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 28 14:14:10 UTC 2018,,,,,,0|s00yds:,9223372036854775807,,,,,,,,"28/Nov/18 13:48;pderop;Attached oom.png, which is screenshot of memoryanalyzer.","28/Nov/18 13:49;pderop;Attached  dm.memoryleak.tgz, which is a simple project that is reproducing the issue.",28/Nov/18 14:14;pderop;Committed a fix in revision 1847643.,,,,,,,,,,,,,
java.lang.IllegalArgumentException from AbstractLogger.format when logging debug message,FELIX-5989,13200700,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,26/Nov/18 22:51,01/Mar/19 14:26,14/Mar/19 02:49,26/Nov/18 22:59,scr-2.1.12,scr-2.1.14,,,scr-2.1.16,,,,Declarative Services (SCR),,0,,"If an eventFilter for a reference contains special formatting characters (e.g. ${}) then the debug log message formatting will fail with the following exception.  This is because we are passing null arguments and expecting them to be substituted into a debug message when there are really no place holders for substitution.
{code:java}
Unexpected failure enabling component holder com.ibm.ws.http.internal.HttpEndpointImpl Bundle:com.ibm.ws.transport.http(id=58) java.lang.IllegalArgumentException: can't parse argument number: accessLoggingRef
 at java.text.MessageFormat.makeFormat(MessageFormat.java:1429)
 at java.text.MessageFormat.applyPattern(MessageFormat.java:479)
 at java.text.MessageFormat.<init>(MessageFormat.java:362)
 at java.text.MessageFormat.format(MessageFormat.java:840)
 at org.apache.felix.scr.impl.logger.AbstractLogger.format(AbstractLogger.java:155)
 at org.apache.felix.scr.impl.logger.AbstractLogger.log(AbstractLogger.java:92)
 at org.apache.felix.scr.impl.logger.BundleLogger.log(BundleLogger.java:83)
 at org.apache.felix.scr.impl.BundleComponentActivator.addServiceListener(BundleComponentActivator.java:194)
 at org.apache.felix.scr.impl.manager.ServiceTracker.open(ServiceTracker.java:214)
 at org.apache.felix.scr.impl.manager.ServiceTracker.open(ServiceTracker.java:179)
 at org.apache.felix.scr.impl.manager.DependencyManager.setTargetFilter(DependencyManager.java:2209)
 at org.apache.felix.scr.impl.manager.DependencyManager.setTargetFilter(DependencyManager.java:2026)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager.updateTargets(AbstractComponentManager.java:1150)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:662)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:432)
 at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.enableComponents(ConfigurableComponentHolder.java:665)
 at org.apache.felix.scr.impl.BundleComponentActivator.initialEnable(BundleComponentActivator.java:339)
 at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:381)
 at org.apache.felix.scr.impl.Activator.access$200(Activator.java:49)
 at org.apache.felix.scr.impl.Activator$ScrExtension.start(Activator.java:263)
 at org.apache.felix.scr.impl.AbstractExtender.createExtension(AbstractExtender.java:196)
 at org.apache.felix.scr.impl.AbstractExtender.modifiedBundle(AbstractExtender.java:169)
 at org.apache.felix.scr.impl.AbstractExtender.modifiedBundle(AbstractExtender.java:49)
{code}",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 26 22:59:24 UTC 2018,,,,,,0|s00vv4:,9223372036854775807,,,,,,,,26/Nov/18 22:59;tjwatson;Fixed by not passing null arguments to the format when there are no place holders for the arguments in the log message.,,,,,,,,,,,,,,,
Felix framework unable to retrieve custom URL handlers when security is on,FELIX-5978,13197093,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,karlpauls,timothyjward,timothyjward,08/Nov/18 11:22,31/Jan/19 13:08,14/Mar/19 02:49,08/Nov/18 21:27,framework-6.0.0,framework-6.0.1,,,framework-6.0.2,,,,Framework,,0,,"When running with multiple frameworks in the same VM, custom URL Handlers, and OSGi security on there are a couple of problems:

 

Firstly, this security exception results in the custom URL handler being ignored. The framework should really be using a doPriv here.
{code:java}
java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""getClassLoader"")
at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)
at java.security.AccessController.checkPermission(AccessController.java:884)
at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
at java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader.java:1528)
at java.lang.Class.getClassLoader(Class.java:683)
at org.apache.felix.framework.URLHandlers.getFrameworkFromContext(URLHandlers.java:690)
at org.apache.felix.framework.URLHandlersStreamHandlerProxy.getStreamHandlerService(URLHandlersStreamHandlerProxy.java:574)
at org.apache.felix.framework.URLHandlersStreamHandlerProxy.toExternalForm(URLHandlersStreamHandlerProxy.java:474)
at java.net.URL.toExternalForm(URL.java:929)
at java.net.URL.toString(URL.java:915)
at java.lang.ClassLoader.defineClassSourceLocation(ClassLoader.java:678)
at java.lang.ClassLoader.defineClass(ClassLoader.java:762)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClass(BundleWiringImpl.java:2344)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClassParallel(BundleWiringImpl.java:2162)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2096)
at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1565)
at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:79)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1982)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
at org.apache.felix.cm.impl.ConfigurationManager.configure(ConfigurationManager.java:758)
{code}
Secondly, the wrong framework is returned some of the time due to the logic of URLHandlers.getFrameworkContext() - in this method it assumes that there will be a bundle class loader on the stack, which is not true when the launcher is starting a bundle (the framework reflectively loads the Activator type which requires a URL check to set the security domain).",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-08 12:12:54.966,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 08 21:28:08 UTC 2018,,,,,,0|s009qw:,9223372036854775807,,,,,,,,"08/Nov/18 12:12;githubbot;GitHub user timothyjward opened a pull request:

    https://github.com/apache/felix/pull/160

    [FELIX-5978] Ensure getClassLoader() is called in a safe way when sec…

    …urity is enabled
    
    Previously URLHandlers would explode when security was on because it didn't have permission to get the ClassLoader all the way down the stack
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/timothyjward/felix FELIX-5978

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/160.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #160
    
----
commit e30d80a31b03731fd1b67fb551d58b10741eb5d1
Author: Tim Ward <timothyjward@...>
Date:   2018-11-08T12:11:29Z

    [FELIX-5978] Ensure getClassLoader() is called in a safe way when security is enabled
    
    Previously URLHandlers would explode when security was on because it didn't have permission to get the ClassLoader all the way down the stack
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

----
","08/Nov/18 12:50;timothyjward;{quote}Secondly, the wrong framework is returned some of the time due to the logic of URLHandlers.getFrameworkContext() - in this method it assumes that there will be a bundle class loader on the stack, which is not true when the launcher is starting a bundle (the framework reflectively loads the Activator type which requires a URL check to set the security domain).
{quote}
While it would be nice to fix this, I've thought more deeply about it and I'm really not sure whether it is possible to fix without a significant change to the Felix BundleClassLoader (basically to register the Framework that is associated with the current class load). I would like some advice as to whether people think this would be a good idea. [~karlpauls]?","08/Nov/18 21:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/160
",08/Nov/18 21:28;karlpauls;I applied the patch provided by [~timothyjward] - thanks a lot!,,,,,,,,,,,,
Prototype scope references are not released on deactivation,FELIX-5974,13194397,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,timothyjward,timothyjward,26/Oct/18 12:18,01/Feb/19 17:23,14/Mar/19 02:49,03/Nov/18 13:46,scr-2.1.12,,,,scr-2.1.14,,,,Declarative Services (SCR),,0,,"Having read the stack overflow question on [Stack Overflow|https://stackoverflow.com/questions/52839641/osgi-ds-prototype-reference-not-released] I was pretty certain that the user must be doing something wrong, but in fact it seems as though SCR does a bad job of releasing Prototype scoped references when a component is disposed.

I looked into the code, and it seems that there are a lot of conflicting locations where prototype scope services are obtained and released. I propose tidying this up so that the ComponentServiceObjects is *always* used internally regardless of whether it is injected or not. This encapsulates all the access in a single location so it is less likely that the objects will leak.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-26 12:21:05.776,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 01 17:23:45 UTC 2019,,,,,,0|i3zoen:,9223372036854775807,,,,,,,,"26/Oct/18 12:21;githubbot;GitHub user timothyjward opened a pull request:

    https://github.com/apache/felix/pull/159

    Provide a refactoring to simplify prototype reference access

    This should also Fix FELIX-5974
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/timothyjward/felix FELIX-5974

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/159.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #159
    
----
commit 1a0973e08353bb0c4e959fb2a01b861c9cfcc39b
Author: Tim Ward <timothyjward@...>
Date:   2018-10-26T12:20:11Z

    Provide a refactoring to simplify prototype reference access
    
    This should also Fix FELIX-5974
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

----
","29/Oct/18 23:54;danielreuther;[~timothyjward], thanks again for working on this! I did some tests with your changes and all prototype-scoped services seem to get deactivated properly now (which wasn't the case before). However, it looks like the instances themselves still can't get garbage collected.

There's a chance my test is flawed but after calling ungetService for a component with a prototype reference, I still see MultiplePrototypeRefPair holding on to prototype and ComponentContextImpl instances.",30/Oct/18 16:41;timothyjward;I've updated the PR - hopefully this will now release the objects from the MultiplePrototypeRefPair as well as releasing the service instance.,"31/Oct/18 17:36;danielreuther;Thanks, Tim. This works fine for me—prototype instances seem to get collected properly now. This is also true for the Vaadin scenario mentioned in the Stackoverflow thread.","03/Nov/18 13:46;cziegeler;Thanks for the patch [~timothyjward], i've applied it in rev 1845660.",01/Feb/19 17:23;tjwatson;Notice that this fix has caused a regression with FELIX-6044,,,,,,,,,,
NPE at RuntimeDTOBuilder.java:74,FELIX-5966,13192047,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,bischofs@jena.de,bischofs@jena.de,16/Oct/18 21:21,01/Mar/19 14:13,14/Mar/19 02:49,19/Oct/18 07:03,http.base-4.0.4,http.bridge-4.0.4,http.jetty-4.0.6,,http.base-4.0.6,http.bridge-4.0.6,http.jetty-4.0.8,,HTTP Service,,0,,"Got a Nullpointer when asking for runtimeDTO of the second HttpServiceRuntime 

 
{code:java}
@Reference(policy = ReferencePolicy.DYNAMIC,cardinality=ReferenceCardinality.MULTIPLE)
public void bindHttpServiceRuntime(HttpServiceRuntime rt) {
RuntimeDTO dto = rt.getRuntimeDTO();
}

java.lang.NullPointerException
 at org.apache.felix.http.base.internal.runtime.dto.RuntimeDTOBuilder.createServiceDTO(RuntimeDTOBuilder.java:74)
 at org.apache.felix.http.base.internal.runtime.dto.RuntimeDTOBuilder.build(RuntimeDTOBuilder.java:56)
 at org.apache.felix.http.base.internal.service.HttpServiceRuntimeImpl.getRuntimeDTO(HttpServiceRuntimeImpl.java:92){code}
 

if i wait a second the serviceReference is set
{code:java}
@Reference(policy = ReferencePolicy.DYNAMIC,cardinality=ReferenceCardinality.MULTIPLE)
public void bindHttpServiceRuntime(HttpServiceRuntime rt) {

new Thread(new Runnable() {

@Override
public void run() {

try {
Thread.sleep(1000);
} catch (InterruptedException e) {
e.printStackTrace();
}
RuntimeDTO dto = rt.getRuntimeDTO();


}
}).start();
}
{code}
 regards",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-19 07:03:45.749,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 19 07:03:45 UTC 2018,,,,,,0|i3z9yn:,9223372036854775807,,,,,,,,"19/Oct/18 07:03;cziegeler;Fixed in rev 1844307
In addition to fixing the NPE, the ServiceReferenceDTO is now taken from the framework instead of reconstructing it",,,,,,,,,,,,,,,
TLS doesn't work for anonymous pages,FELIX-5964,13191182,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,karlpauls,asanso,asanso,12/Oct/18 12:14,18/Oct/18 20:49,14/Mar/19 02:49,12/Oct/18 13:08,,,,,http.sslfilter-1.2.6,,,,HTTP Service,,0,,"Currently the {{SslFilter}} doesn't work with anonymous pages.

In order to solve this would be enough to leverage the new {{Preprocessor}} feature",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-12 13:08:22.871,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 12 13:08:22 UTC 2018,,,,,,0|i3z4nr:,9223372036854775807,,,,,,,,"12/Oct/18 12:15;asanso;attaching simple patch
{code:java}
Index: pom.xml
===================================================================
--- pom.xml    (revision 1843651)
+++ pom.xml    (working copy)
@@ -75,7 +75,7 @@
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.service.http.whiteboard</artifactId>
-            <version>1.0.0</version>
+            <version>1.1.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
Index: src/main/java/org/apache/felix/http/sslfilter/internal/SslFilter.java
===================================================================
--- src/main/java/org/apache/felix/http/sslfilter/internal/SslFilter.java    (revision 1843651)
+++ src/main/java/org/apache/felix/http/sslfilter/internal/SslFilter.java    (working copy)
@@ -35,10 +35,11 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.osgi.service.cm.ConfigurationException;
+import org.osgi.service.http.whiteboard.Preprocessor;
 import org.osgi.service.log.LogService;
 
 @SuppressWarnings(""rawtypes"")
-public class SslFilter implements Filter
+public class SslFilter implements  Preprocessor
 {
     public static final String PID = ""org.apache.felix.http.sslfilter.SslFilter"";
 
Index: src/main/java/org/apache/felix/http/sslfilter/internal/SslFilterActivator.java
===================================================================
--- src/main/java/org/apache/felix/http/sslfilter/internal/SslFilterActivator.java    (revision 1843651)
+++ src/main/java/org/apache/felix/http/sslfilter/internal/SslFilterActivator.java    (working copy)
@@ -21,8 +21,6 @@
 import java.util.Dictionary;
 import java.util.Hashtable;
 
-import javax.servlet.Filter;
-
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
@@ -32,6 +30,7 @@
 import org.osgi.service.cm.ConfigurationException;
 import org.osgi.service.cm.ManagedService;
 import org.osgi.service.http.whiteboard.HttpWhiteboardConstants;
+import org.osgi.service.http.whiteboard.Preprocessor;
 import org.osgi.service.log.LogService;
 
 public class SslFilterActivator implements BundleActivator
@@ -84,7 +83,7 @@
         properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT, ""("" + HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME + ""=*)"");
         properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN, ""/"");
 
-        this.filterReg = context.registerService(Filter.class.getName(), filter, properties);
+        this.filterReg = context.registerService(Preprocessor.class.getName(), filter, properties);
 
         SystemLogger.log(LogService.LOG_DEBUG, ""SSL filter registered..."");
     }{code}",12/Oct/18 13:08;karlpauls;I applied the patch in r1843662 - thanks!,,,,,,,,,,,,,,
NPE when invoking a lifecycle runnable method from init method,FELIX-5956,13190145,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,pderop,pderop,08/Oct/18 16:48,22/Oct/18 09:02,14/Mar/19 02:49,08/Oct/18 20:18,org.apache.felix.dependencymanager-r1,,,,org.apache.felix.dependencymanager-r13,,,,Dependency Manager Runtime,,0,,"When you use a DM lifecycle controller in order to trigger component activation from the @Init method, a NPE is throw if you invoke the lifecylce runnable from the init method.

For example, the following code:

{code:java}
@Component
public class MyServiceImpl implements MyService {

    @LifecycleController
    volatile Runnable _start;

    @Init
    void init() {
        _start.run(); // immediately trigger service activation
    }
}
{code}

produces the following NPE:

{code}
Caused by: java.lang.NullPointerException
	at org.apache.felix.dm.runtime.ToggleServiceDependency.activate(ToggleServiceDependency.java:49)
	at org.apache.felix.dm.runtime.ServiceLifecycleHandler$ComponentStarter.run(ServiceLifecycleHandler.java:431)
	at org.apache.felix.dependencymanager.samples.hello.annot.ServiceProviderImpl.init(ServiceProviderImpl.java:47)
	... 65 more
{code}",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 08 20:18:48 UTC 2018,,,,,,0|i3yycf:,9223372036854775807,,,,,,,,"08/Oct/18 19:54;pderop;Added test case for this issue in revision 1843192:

Adding         org.apache.felix.dependencymanager.runtime.itest/src/org/apache/felix/dm/runtime/itest/components/FELIX5956.java
Adding         org.apache.felix.dependencymanager.runtime.itest/src/org/apache/felix/dm/runtime/itest/tests/FELIX5956Test.java

","08/Oct/18 20:18;pderop;Committed a fix in revision 1843196.


The problem was in the dm runtime ServiceLifecycleHandler.init() mehod, which was adding the internal toggle to the component *after* the component;init() method was called.

To fix, the internal toggle associated to the lifecycle runnable object must be added to the component *before* calling the init method.",,,,,,,,,,,,,,
Move changelog.txt to toplevel project dir,FELIX-5955,13189972,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,pderop,pderop,pderop,07/Oct/18 22:31,22/Oct/18 09:01,14/Mar/19 02:49,08/Oct/18 07:24,org.apache.felix.dependencymanager-r1,,,,org.apache.felix.dependencymanager-r13,,,,Dependency Manager,,0,,"Currently, chanlogs are stored in each dependency manager sub projects.

But the download felix link requires the changelog to be located at the toplevel source project directory. Moreover, it's easier to maintain one single changelog.txt file instead of having one for each DM sub projects.

let's have a single changelog.txt file stored in the DM toplevel source directory (dependencymanager/changelog;txt).

 

 ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 08 07:24:47 UTC 2018,,,,,,0|i3yx9z:,9223372036854775807,,,,,,,,08/Oct/18 07:24;pderop;fixed in revision 1843098,,,,,,,,,,,,,,,
NPE in  MultiplePrototypeRefPair.unsetServiceObject,FELIX-5950,13189376,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,olivierprouvost,olivierprouvost,04/Oct/18 09:10,13/Nov/18 11:04,14/Mar/19 02:49,18/Oct/18 05:29,,,,,scr-2.1.14,,,,Declarative Services (SCR),,0,,"I use Felix with the eclipse runtime (Photon 0918), and I get a NPE when running my application. 

 

Actually in the code of 

MultiplePrototypeRefPair.unsetServiceObject we have :  instances.get(key). 

If we search for the callers, the DependencyManager class call It like this : 

 

       protected void ungetService(RefPair<S, T> ref)

        {

            Object service = ref.unsetServiceObject(*null*);

            if (service != null)

 

Unfortunately, the instances map is a ConcurentHashMap which can not deal with null keys (it calls key.hashcode at the beginning), and this call will always raise an exception... 

Don't know what is the Felix version involved, but the bundle I use in my launch configuration is  (org.apache.felix.scr 2.0.14.v20180117)

 ",Mac OS X 10.14,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-04 09:25:22.588,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 15 16:55:32 UTC 2018,,,,,,0|i3ytlr:,9223372036854775807,,,,,,,,"04/Oct/18 09:25;pderop;Hello Olivier, 

I was preparing a new DM release, but I will look into your issue before releasing ; I will get back to you soon; thanks.","04/Oct/18 09:29;pderop;just to clarify, are you using Apache Felix Dependency Manager, or Apache Felix SCR ?

(in your message, you said you were using org.apache.felix.scr 2.0.14.v20180117 ?)

 ","04/Oct/18 09:32;olivierprouvost;I don't know if ti is Felix Dependency Manager ... Actually I use Apache Felix SCR plugin in my Eclipse Launch configuration. I saw in the class that was coming from Felix Dependency manager... 

I will join the trace","04/Oct/18 09:33;olivierprouvost;!MESSAGE FrameworkEvent ERROR

!STACK 0

+java.lang.NullPointerException+

       at java.util.concurrent.ConcurrentHashMap.get(Unknown Source)

       at org.apache.felix.scr.impl.manager.MultiplePrototypeRefPair.unsetServiceObject(+MultiplePrototypeRefPair.java:67+)

       at org.apache.felix.scr.impl.manager.DependencyManager$AbstractCustomizer.ungetService(+DependencyManager.java:222+)

       at org.apache.felix.scr.impl.manager.DependencyManager$MultipleDynamicCustomizer.removedService(+DependencyManager.java:392+)

       at org.apache.felix.scr.impl.manager.DependencyManager$MultipleDynamicCustomizer.removedService(+DependencyManager.java:291+)

       at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerRemoved(+ServiceTracker.java:1242+)

       at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.customizerRemoved(+ServiceTracker.java:1137+)

       at org.apache.felix.scr.impl.manager.ServiceTracker$AbstractTracked.untrack(+ServiceTracker.java:997+)

       at org.apache.felix.scr.impl.manager.ServiceTracker$Tracked.serviceChanged(+ServiceTracker.java:1176+)

       at org.apache.felix.scr.impl.BundleComponentActivator$ListenerInfo.serviceChanged(+BundleComponentActivator.java:127+)

       at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(+FilteredServiceListener.java:109+)

       at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(+BundleContextImpl.java:920+)

       at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(+EventManager.java:230+)

       at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(+ListenerQueue.java:148+)

       at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(+ServiceRegistry.java:862+)

       at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(+ServiceRegistry.java:801+)

       at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.unregister(+ServiceRegistrationImpl.java:222+)

       at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.unregister(+AbstractComponentManager.java:925+)

       at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.unregister(+AbstractComponentManager.java:890+)

       at org.apache.felix.scr.impl.manager.RegistrationManager.changeRegistration(+RegistrationManager.java:139+)

       at org.apache.felix.scr.impl.manager.AbstractComponentManager.unregisterService(+AbstractComponentManager.java:967+)

       at org.apache.felix.scr.impl.manager.AbstractComponentManager.doDeactivate(+AbstractComponentManager.java:822+)

       at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(+AbstractComponentManager.java:804+)

       at org.apache.felix.scr.impl.manager.AbstractComponentManager.dispose(+AbstractComponentManager.java:580+)

       at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.disposeComponents(+ConfigurableComponentHolder.java:706+)

       at org.apache.felix.scr.impl.BundleComponentActivator.dispose(+BundleComponentActivator.java:523+)

       at org.apache.felix.scr.impl.Activator.disposeComponents(+Activator.java:436+)

       at org.apache.felix.scr.impl.Activator.access$300(+Activator.java:52+)

       at org.apache.felix.scr.impl.Activator$ScrExtension.destroy(+Activator.java:290+)

       at org.apache.felix.scr.impl.AbstractExtender$1.run(+AbstractExtender.java:216+)

       at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)

       at java.util.concurrent.FutureTask.run(Unknown Source)

       at org.apache.felix.scr.impl.AbstractExtender.destroyExtension(+AbstractExtender.java:238+)

       at org.apache.felix.scr.impl.AbstractExtender.bundleChanged(+AbstractExtender.java:132+)

       at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(+BundleContextImpl.java:908+)

       at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(+EventManager.java:230+)

       at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(+ListenerQueue.java:148+)

       at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEventPrivileged(+EquinoxEventPublisher.java:230+)

       at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(+EquinoxEventPublisher.java:137+)

       at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(+EquinoxEventPublisher.java:129+)

       at org.eclipse.osgi.internal.framework.EquinoxContainerAdaptor.publishModuleEvent(+EquinoxContainerAdaptor.java:191+)

       at org.eclipse.osgi.container.Module.publishEvent(+Module.java:476+)

       at org.eclipse.osgi.container.Module.doStop(+Module.java:634+)

       at org.eclipse.osgi.container.Module.stop(+Module.java:498+)

       at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.decStartLevel(+ModuleContainer.java:1723+)

       at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(+ModuleContainer.java:1642+)

       at org.eclipse.osgi.container.SystemModule.stopWorker(+SystemModule.java:270+)

       at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule.stopWorker(+EquinoxBundle.java:192+)

       at org.eclipse.osgi.container.Module.doStop(+Module.java:636+)

       at org.eclipse.osgi.container.Module.stop(+Module.java:498+)

       at org.eclipse.osgi.container.SystemModule.stop(+SystemModule.java:202+)

       at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule$1.run(+EquinoxBundle.java:210+)

       at java.lang.Thread.run(Unknown Source)","04/Oct/18 09:38;pderop;It comes from SCR (check the package name):
{code:java}
at org.apache.felix.scr.impl.manager.MultiplePrototypeRefPair.unsetServiceObject(MultiplePrototypeRefPair.java:67){code}
please change the Components field of the Jira issue to ""Declarative Services (SCR)"".

 

thank you.","15/Oct/18 15:35;cziegeler;As a quick fix we could check for the argument being null and clear all instances.
I'm not 100% sure whether this is the correct fix though, it depends on which bundle is stopped - the one with the referenced service or the one referencing the service",15/Oct/18 16:55;cziegeler;Committed the above mentioned check in rev 1843926,,,,,,,,,
Felix Version Number is 0.0.0,FELIX-5946,13187980,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,tom@phinneyridge.com,tom@phinneyridge.com,27/Sep/18 17:02,28/Sep/18 14:56,14/Mar/19 02:49,28/Sep/18 14:56,,,,,,,,,Framework,,0,,"The framework reports Felix Version as 0.0.0

I've track the issue down and here's the problem:

File Felix.java - original code

{color:#000080}private static {color}String getFrameworkVersion()
{
 {color:#808080}// The framework version property.
{color} Properties props = {color:#000080}new {color}Properties();
 InputStream in = Felix.{color:#000080}class{color}.getResourceAsStream({color:#008000}""Felix.properties""{color});

------------------

Here's the change needed to  make it work

{color:#000080}private static {color}{color:#333333}String getFrameworkVersion(){color}
{color:#333333}{{color}
 {color:#808080}// The framework version property.
{color}{color:#333333} Properties props = {color}{color:#000080}new {color}{color:#333333}Properties();{color}
{color:#333333} InputStream in = Felix.{color}{color:#000080}class{color}{color:#333333}.getClassLoader().getResourceAsStream({color}{color:#008000}""Felix.properties""{color}{color:#333333});{color}

{color:#333333}alternative:{color}

{color:#333333}InputStream in = Felix.{color:#000080}class{color}.getResourceAsStream({color:#008000}""/Felix.properties""{color});{color}

{color:#333333}----------------------------{color}

Then add the Felix.properties resource to the root of the framework jar. Its content should contain:

{color:#000080}felix.version {color}= {color:#008000}6.0.1{color}

where 6.0.1 is replaced with the actual felix version.

{color:#333333}The problem is that getResourceAsStream(resource) is relative the location of the class if the resource does not start with a leading ""/"" . You could also resolve the problem by putting the ""Felix.properties"" file in the same directory as the Felix, but that seems like a strange place to locate it.{color}

{color:#333333}I looked for solution where the version number was obtained from the Bundle-Version in the ""MANIFEST.MF"",  but this information is not available when Felix is embedded in the application.  In an android environment, you can't add the ""Felix.properties"" file at runtime due to file access permissions.  You also can't solve the problem by adding a ""felix.version"" property to the config used to initialize the framework, it get's overwritten with a 0.0.0 version if the ""Felix.properties"" file does not exist.{color}",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 28 14:56:38 UTC 2018,,,,,,0|i3yl1b:,9223372036854775807,,,,,,,,"28/Sep/18 14:56;tom@phinneyridge.com;I figured out what's going on, and it not an issue.  I'll explain what's going just to document the scenario.

In my situation, I've added the felix framework source code to my project as a library module that is compiled and added as a dependent library jar to my application.

The source code does not contain the ""Felix.properties"" file.  It's a file added to the felix production jar downstream of the compilation process.  Appearently it extracts the version number from the pom.xml.  That all makes sense.  So in my situation, I'm responsible for adding the ""Felix.properties"" file.  So I added it to the library module project, but unfortunately I put it in the wrong place.  It needed to stored in my development environment at ""resources/org/apache/felix/framework/Felix.properties. I had put it at ""org/apache/felix/framework/Felix.properties"".  That's where the ""Felix.java"" exists.  The module build process will not add non java resources to the resulting jar file.  Non java resources need to be added to the ""resources"" directory.  So that was my mistake.  ",,,,,,,,,,,,,,,
Felix Framework freezes when resolving classes in parallel with Java 10,FELIX-5942,13187038,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,antoine.dessaigne,antoine.dessaigne,24/Sep/18 13:39,31/Jan/19 13:08,14/Mar/19 02:49,24/Sep/18 18:38,framework-6.0.1,,,,framework-6.0.2,,,,Framework,,2,,"Hello.

When resolving a class in parallel in Java 10, you end up with a freeze.

You end up with threads beeing blocked
{noformat}
""Thread-99"" #121 prio=5 os_prio=0 tid=0x000001bdaf679000 nid=0x69d4 in Object.wait()  [0x000000296d0fe000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at java.lang.Object.wait(java.base@10.0.2/Native Method)
	- waiting on <0x00000006c931dd20> (a [Ljava.lang.Object;)
	at java.lang.Object.wait(java.base@10.0.2/Object.java:328)
	at org.apache.felix.framework.Felix.acquireGlobalLock(Felix.java:4301)
	- waiting to re-lock in wait() <0x00000006c931dd20> (a [Ljava.lang.Object;)
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:413)
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3318)
	at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1618)
	at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:978)
	at org.apache.felix.framework.ConcurrentClassLoaderTest$1.run(ConcurrentClassLoaderTest.java:69){noformat}
You'll find attached a test reproducing the issue : [^ConcurrentClassLoaderTest.java]

Here's what you need to freeze felix :
 * Lots of threads trying to acquire the global lock
 ** here we're resolving a class from a bundle with dynamic import packages
 * An Oracle JDK 10 or OpenJDK 11
 ** it's working fine with Oracle JDK 8

 

Replacing the {{m_bundleLock}} by a fair {{ReentrantLock}} with a {{Condition}} makes it work with 10 parallel threads but still fails with 100 threads.",,,,,,,,,,,,,24/Sep/18 13:47;antoine.dessaigne;ConcurrentClassLoaderTest.java;https://issues.apache.org/jira/secure/attachment/12941048/ConcurrentClassLoaderTest.java,,,1.0,,,,,,,,,,,,,,,,,,,2018-09-24 13:47:50.191,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 25 09:03:46 UTC 2018,,,,,,0|i3yf8v:,9223372036854775807,,,,,,,,"24/Sep/18 13:47;karlpauls;[~antoine.dessaigne], can you clarify what this part means:

* An Oracle Java 10
** with an OpenJDK 11 it's not working
** with an Oracle Java 8 it's working

what is working on what version and is not working on which version?","24/Sep/18 13:49;antoine.dessaigne;Hello [~karlpauls],

Sure :)
 * with Oracle JDK 10 : freeze
 * with OpenJDK 11 (last early access) : freeze
 * with Oracle JDK 8","24/Sep/18 15:26;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/felix/pull/156

    FELIX-5942 - Replace wait/notify by lock/conditions in Felix to avoid freeze

    Fix proposal for [FELIX-5942](https://issues.apache.org/jira/browse/FELIX-5942).
    
    Instead of a single `Object` with calls to `wait` and `notifyAll` we're using a `Lock` with 2 `Condition` objects :
    * one when the waiting conditions on global lock acquisition have changed
    * one when the waiting conditions on bundle lock acquisition have changed

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/felix FELIX-5942

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/156.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #156
    
----
commit d906ec37291bbc7d9fd4bd3211aaae0b4f9eac00
Author: Antoine DESSAIGNE <antoine.dessaigne@...>
Date:   2018-09-24T15:22:12Z

    FELIX-5942 - Replace wait/notify by lock/conditions in Felix to avoid freeze

----
","24/Sep/18 15:27;antoine.dessaigne;Hello [~karlpauls],

I've just opened the [pull request #156|https://github.com/apache/felix/pull/156] with a fix proposal","24/Sep/18 18:36;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/156
","24/Sep/18 18:38;karlpauls;[~antoine.dessaigne], it looks like newer jdk versions have a changed behaviour when it comes to fairness and synchronized. Good catch - I applied a modified version of your patch that uses only one condition but sets the the lock to be fair. It seems to work with your test. 

Feel free to reopen this issue if it doesn't work for you. Many thanks for reporting and providing the patch!","25/Sep/18 09:03;antoine.dessaigne;Hello [~karlpauls],
Thanks for integrating it :)
Do you know when the release is planned ? As JDK11 will replace JDK10 in few hours :)
Thanks again.",,,,,,,,,
Metatype XML Namespace 1.4 not supported,FELIX-5936,13186834,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,cziegeler,rakeshk15,rakeshk15,22/Sep/18 18:58,03/Jan/19 16:40,14/Mar/19 02:49,23/Sep/18 09:25,metatype-1.2.0,,,,metatype-1.2.2,,,,Metatype Service,,0,,"*org.apache.felix.metatype.MetaDataReader* throws exception if the namespace in metatype xml is [http://www.osgi.org/xmlns/scr/v1.4.0]

and corresponding metatype is not being generated in Felix Web console when I deploy the bundle.

Following code only checks namespaces till v1.3
{code:java}
private void checkMetatypeNamespace() throws IOException
{
    final String namespace = this.parser.getNamespace();
    if (namespace != null && !"""".equals(namespace.trim()))
    {
        if (!NAMESPACE_1_0.equals(namespace) && !NAMESPACE_1_1.equals(namespace) && !NAMESPACE_1_2.equals(namespace) && !NAMESPACE_1_3.equals(namespace))
        {
            throw new IOException(""Unsupported Namespace: '"" + namespace + ""'"");
        }
        this.namespace = namespace;
    }
}{code}
this is the metatype generated by bnd-maven-plugin v4.0.0
{code:java}
<?xml version=""1.0"" encoding=""UTF-8""?>
<metatype:MetaData xmlns:metatype=""http://www.osgi.org/xmlns/metatype/v1.4.0"" localization=""OSGI-INF/l10n/com.adeptj.modules.jaxrs.resteasy.ResteasyConfig"">
<OCD id=""com.adeptj.modules.jaxrs.resteasy.ResteasyConfig"" name=""AdeptJ RESTEasy Configuration"" description=""Configuration for RESTEasy Framework"">
<AD id=""showException"" type=""Boolean"" name=""Show Exception Message as JSON"" description=""Whether to show exception message in error response"" default=""true""/>
</OCD>
<Designate pid=""com.adeptj.modules.jaxrs.resteasy.internal.ResteasyLifecycle"">
<Object ocdref=""com.adeptj.modules.jaxrs.resteasy.ResteasyConfig""/>
</Designate>
</metatype:MetaData>                                                                           {code}
IMHO, *Felix Metatype Service 1.2.0* is implementing the *OSGi Metatype Service Specification Version 1.4* and therefore should not fail for namespace v1.4.0

Please look into this.

Thanks,

Rakesh",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-23 09:17:24.926,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 03 16:40:52 UTC 2019,,,,,,0|i3ydzj:,9223372036854775807,,,,,,,,"23/Sep/18 09:17;cziegeler;The 1.4.0 namespace was initially missing in the specification, therefore we didn't implement it. But thanks for reporting",23/Sep/18 09:25;cziegeler;Fixed in rev 1841727,"23/Sep/18 11:10;rakeshk15;thanks for the prompt fix [~cziegeler]

I just tested 1.2.2 and it is working fine.",03/Jan/19 16:40;rotty3000;For posterity the commits for this issue are incorrectly tagged with the issue FELIX-5963,,,,,,,,,,,,
Configurator does not update existing Configurations,FELIX-5932,13185792,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,jalbert,jalbert,18/Sep/18 12:19,23/Sep/18 07:06,14/Mar/19 02:49,18/Sep/18 12:58,configurator-1.0.4,,,,configurator-1.0.6,,,,Configurator,,0,,"If I update a configuration in a Bunde and redeploy it, existing configurations are not updated. Delete and adding new configs works. 

 

Find atteched 3 Bundles:

test.component defines a Example Component, that has a activate, modefied and deactivate method. All Methods will print out the method name and its properties. 

test.config_v1 and v2 have a Config for this Component, where a properties has changed. It looks as follows:

{
 "":configurator:resource-version"": 1,
 "":configurator:policy"" : ""force"", 
 ""ExampleComponent"": 
 {
 "":configurator:policy"" : ""force"", 
 ""your.prop.here"": ""text"" 
 }
}",,,,,,,,,,,,,18/Sep/18 12:18;jalbert;test.component.jar;https://issues.apache.org/jira/secure/attachment/12940213/test.component.jar,18/Sep/18 12:18;jalbert;test.config_v1.jar;https://issues.apache.org/jira/secure/attachment/12940212/test.config_v1.jar,18/Sep/18 12:18;jalbert;test.config_v2.jar;https://issues.apache.org/jira/secure/attachment/12940211/test.config_v2.jar,3.0,,,,,,,,,,,,,,,,,,,2018-09-18 12:58:55.648,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 20 04:48:28 UTC 2018,,,,,,0|i3y7kv:,9223372036854775807,,,,,,,,"18/Sep/18 12:58;cziegeler;For some reason the update algorithm always assumed that the update is simply supplying the same configuration
This is fixed now in rev 1841224","20/Sep/18 04:48;cziegeler;[~jalbert] You don't need "":configurator:policy"" - the policy is only needed when someone changed the configuration manually between your bundle updates",,,,,,,,,,,,,,
Service reference is missing in DTO,FELIX-5930,13185355,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,16/Sep/18 08:39,23/Sep/18 07:09,14/Mar/19 02:49,16/Sep/18 09:29,scr-2.1.6,,,,scr-2.1.8,,,,Declarative Services (SCR),,0,,"The component configuration dto must contain the service reference if the configuration is satisfied or active, currently it is null.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Sep 16 09:15:48 UTC 2018,,,,,,0|i3y4vz:,9223372036854775807,,,,,,,,16/Sep/18 09:15;cziegeler;Fixed the service reference handling in rev 1840993,,,,,,,,,,,,,,,
Failed activation state not reported in DTOs,FELIX-5929,13185353,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,16/Sep/18 08:11,23/Sep/18 07:09,14/Mar/19 02:49,16/Sep/18 08:38,scr-2.1.6,,,,scr-2.1.8,,,,Declarative Services (SCR),,0,,With DS 1.4 a new state (failed activation) has been added. This state should be reported by the DTOs if an activation of a component failed (exception during activation). The new failureReason field contains the serialized exception,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Sep 16 08:22:14 UTC 2018,,,,,,0|i3y4vj:,9223372036854775807,,,,,,,,16/Sep/18 08:22;cziegeler;Changed the handling of the new state in rev 1840988. The state handling is now the same again as in 2.0.x and the new state is simply reported on the fact wether a failure reason exists or not.,,,,,,,,,,,,,,,
Single element Annotation type does not incorporate PREFIX_,FELIX-5927,13185001,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,13/Sep/18 20:22,23/Sep/18 07:09,14/Mar/19 02:49,16/Sep/18 08:02,scr-2.1.6,,,,scr-2.1.8,,,,Declarative Services (SCR),,0,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 13 20:47:28 UTC 2018,,,,,,0|i3y2pb:,9223372036854775807,,,,,,,,"13/Sep/18 20:47;cziegeler;Fixed in rev 1840866, added test case",,,,,,,,,,,,,,,
Logger instance is not set for constructor and reference injection,FELIX-5926,13184961,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,13/Sep/18 17:25,23/Sep/18 07:09,14/Mar/19 02:49,16/Sep/18 08:02,scr-2.1.6,,,,scr-2.1.8,,,,Declarative Services (SCR),,0,,"When a LoggerFactory is used as a service reference but the type of the constructor argument or the type used for the reference is Logger or FormattedLogger, this is currently filled with ""null""",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 13 20:46:37 UTC 2018,,,,,,0|i3y2gf:,9223372036854775807,,,,,,,,"13/Sep/18 20:46;cziegeler;Added potential fix in rev 1840846

",,,,,,,,,,,,,,,
export for package org.eclipse.jetty.security.authentication,FELIX-5921,13181901,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,jalbert,jalbert,29/Aug/18 12:08,20/Sep/18 18:32,14/Mar/19 02:49,16/Sep/18 14:04,http.jetty-4.0.4,,,,http.jetty-4.0.6,,,,HTTP Service,,0,,"The package org.eclipse.jetty.security.authentication is included in the felix.http bundle, but the export for org.eclipse.jetty.security.authentication is missing. ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-16 14:04:33.607,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Sep 16 14:04:33 UTC 2018,,,,,,0|i3xjvb:,9223372036854775807,,,,,,,,16/Sep/18 14:04;cziegeler;Added in rev 1841013,,,,,,,,,,,,,,,
[ConfigAdmin] AccessControlExceptions in ConfigurationAdmin methods,FELIX-5918,13181057,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cnoelle,cnoelle,24/Aug/18 21:01,12/Sep/18 12:16,14/Mar/19 02:49,12/Sep/18 10:15,configadmin-1.9.4,,,,configadmin-1.9.6,,,,Configuration Admin,,0,,"There are several calls to Bundle#getLocation in the public (API) methods in ConfigurationAdminImpl. When security is enabled these fail with AccessControlException if the caller of these methods does not have AdminPermission (""metadata"").

Preferrably the location should be accessed just once in the constructor (wrapped in a privileged block) and stored in a final field.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-12 10:15:44.389,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 12 12:16:33 UTC 2018,,,,,,0|i3xenz:,9223372036854775807,,,,,,,,12/Sep/18 10:15;cziegeler;Thanks for reporting [~cnoelle]. I've committed a potential fix in rev 1840649. Please give it a test,12/Sep/18 12:16;cnoelle;Thanks [~cziegeler],,,,,,,,,,,,,,
[Fwk security] Fix BundlePermission check for fragments,FELIX-5917,13181013,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,cnoelle,cnoelle,24/Aug/18 15:57,24/Aug/18 22:04,14/Mar/19 02:49,24/Aug/18 21:23,framework-6.0.1,,,,framework-6.0.2,,,,Framework,,0,,"With the current framework a fragment seems to require
(org.osgi.framework.BundlePermission ""*"" ""fragment"")
to attach to a host, instead of the expected and more restrictive
(org.osgi.framework.BundlePermission ""<host-symbolic-name>"" ""fragment"")

I have tested with Equinox as well, to make sure the provided symbolic name is correct etc., then it works as expected.",Framework 6.0.0 + Fwk security 2.6.0,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-24 21:23:57.161,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Aug 24 22:03:49 UTC 2018,,,,,,0|i3xee7:,9223372036854775807,,,,,,,,"24/Aug/18 21:23;karlpauls;I think I found it. Basically, it looks like we are using the wrong symbolic-name when we construct the BundlePermission to check for (namely, the one of the fragment instead of the host). 

Should be fixed in r1838966. Could you please try it with 6.1.0-SNAPSHOT and see if that makes it work for you and otherwise, reopen this issue?

Thanks a lot!","24/Aug/18 22:03;cnoelle;Solves it, thanks for the quick fix!",,,,,,,,,,,,,,
[Configurator] Too restrictive permissions.perm file,FELIX-5911,13180106,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cnoelle,cnoelle,21/Aug/18 01:04,18/Nov/18 09:57,14/Mar/19 02:49,26/Sep/18 14:06,configurator-1.0.4,configurator-1.0.6,,,configurator-1.0.8,,,,Configurator,,0,,"Configurator currently requests

(java.io.FilePermission ""-"" ""read,write,execute,delete"")

in its permissions.perm file (the ""-"" means all files and subfolders within and below the current working dir). However, the bundle tries to access files in the bundle storage area as well, whose location we cannot anticipate here. It can be configured by means of a framework property, for instance. The correct permission would be

(java.io.FilePermission ""<<ALL FILES>>"" ""read,write,execute,delete"") ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-26 12:35:38.313,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 15 13:36:43 UTC 2018,,,,,,0|i3x8tb:,9223372036854775807,,,,,,,,"24/Aug/18 10:18;cnoelle;In addition, when setting the property

configurator.initial=file:/path/to/file.json

it will try to access a file at arbitrary locations on the disk. What's worse: if a protocol different from ""file"" is used the access is likely to fail, for instance because Configurator does not have the appropriate network permission. There might be even custom permissions involved, when a custom protocol is used. From my point of view the only solution is to remove the permissions.perm file entirely. This should be fine; the system administrator can still restrict the set of applicable permissions for the bundle, if so desired. At compile time however we do not know which permissions will be needed. ","24/Aug/18 20:48;cnoelle;And, just in case the permissions.perm file is not removed, the permission
(""java.lang.reflect.ReflectPermission"" ""suppressAccessChecks"")
is missing too. Needed for Field#setAccessible(true) in ReflectionUtil.","26/Sep/18 09:50;cnoelle;What do you think, [~cziegeler]?","26/Sep/18 12:35;cziegeler;[~cnoelle] Thanks for reporting, somehow I missed this one for the 1.0.6 release :(
I agree, the best option is to remove the permissions.perm file as we really don't know what permissons are required","26/Sep/18 12:44;timothyjward;This permission request seems wrong. By default the OSGi framework should grant access to the bundle storage area ([see the security section in the core specification title|[https://osgi.org/specification/osgi.core/7.0.0/framework.security.html#framework.security.impliedpermissions]).] I'm not sure why the bundle should need to request other file permissions at all.

 

I would also really like to see reflection removed as it really shouldn't be necessary. The bundle is in complete control of the serialization, so I'm not sure why it hasn't been written purely using DataInput/DataOutput. There aren't any cycles, and none of the default serialisation behaviour is in use. To my mind this could (and should) all be re-implemented without any need for reflection, even while maintaining backward compatibility with existing saved data.

 

Finally, the additional permissions needed when the ""configurator.initial"" property is set need to be granted by the person launching the framework. They know that they have set security on, and what they have sent the configurator.initial property to. The Configurator bundle shouldn't be opening up the base options for this.","26/Sep/18 13:00;cnoelle;[~timothyjward]: as far as I understand the set of permissions granted by the system admin/the person launching the framework can only be a subset of the permissions requested in the permissions.perm file. More precisely, the effective set of permissions is the intersection of the ones in permissions.perm and the ones granted by the admin. It is hence not possible to configure additional permissions. Did I get this wrong?","26/Sep/18 13:05;cnoelle;[~timothyjward]: you are right regarding the bundle storage location, it does not require a permission request. The original issue description is wrong, but the issues mentioned in the first two comments probably remain.",26/Sep/18 14:06;cziegeler;Removed the file in rev 1842027,"26/Sep/18 14:09;cziegeler;I changed the title, I hope it fits better now.
For other things like the use of reflection we should create different issues","26/Sep/18 15:47;timothyjward;{quote}[~timothyjward]: as far as I understand the set of permissions granted by the system admin/the person launching the framework can only be a subset of the permissions requested in the permissions.perm file. More precisely, the effective set of permissions is the intersection of the ones in permissions.perm and the ones granted by the admin. It is hence not possible to configure additional permissions. Did I get this wrong?
{quote}
 

You can still use PermissionAdmin/ConditionalPermissionAdmin to control the permissions of a bundle and grant them wider permissions than they would otherwise have. You are correct, however that the permissions for a bundle cannot expand beyond those of the Java runtime as a whole.","26/Sep/18 17:41;cnoelle;I was not referring to the permissions of the Java runtime. According to the security spec (50.2.1 Local Permissions):
[https://osgi.org/specification/osgi.core/7.0.0/service.condpermadmin.html#i1534520] 

??Local permissions are defined by a Bundle Permission Resource that is contained in the bundle; this resource defines a set of _permissions_. These permissions must be enforced by the Framework for the given bundle. That is, a bundle can get less permissions than the local permissions but it can never get more permissions.??

The remainder of the section is also very clear about it: adding a permission to ConditionalPermissionAdmin does not overwrite the local perms.",26/Sep/18 18:23;karlpauls;yup,"15/Nov/18 13:36;cnoelle; [~cziegeler], any chance for a release in the near future?",,,
Set correct AccessControlContext when receiving configuration events,FELIX-5910,13180105,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cnoelle,cnoelle,21/Aug/18 00:51,23/Sep/18 07:09,14/Mar/19 02:49,16/Sep/18 20:12,scr-2.1.6,,,,scr-2.1.8,,,,Declarative Services (SCR),,0,,"ConfigAdmin requests a restricted set of permissions by means of a permissions.perm file, which must not restrict the permissions of other bundles to which it sends events. There is in fact a mechanism in place to prevent this, using the protection domain of the bundle, in the class ManagedServiceTracker (resolving the related issue https://issues.apache.org/jira/browse/FELIX-4362). However, the UpdateThread class does not use this mechanism; instead it explicitly sets an AccessControlContext based on its own protection domain, hence enforcing its own restricted set of permissions to the event listeners. Below are two examples of the resulting AccessControlExceptions I get... there is just one additional bundle in the stack trace, felix-scr, which has all permissions and can be ignored from the permissions point of view. 
By the way, removing the permissions.perm file from ConfigAdmin resolves the problem, confirming that the bug is indeed in ConfigAdmin. 

rg.slf4j.osgi-over-slf4j[org.apache.felix.configadmin.1.9.4] : [[org.osgi.service.cm.ConfigurationAdmin]]Unexpected problem delivering configuration event to [org.osgi.service.cm.ConfigurationListener, id=18, bundle=24/mvn:org.apache.felix/org.apache.felix.configadmin/1.9.4]
java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""getClassLoader"")
 at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)
 at java.base/java.security.AccessController.checkPermission(AccessController.java:895)
 at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:335)
 at java.base/java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader.java:2042)
 at java.base/java.lang.Class.getClassLoader(Class.java:807)
 at org.apache.felix.scr.impl.inject.methods.BaseMethod.findMethod(BaseMethod.java:158)
 at org.apache.felix.scr.impl.inject.methods.BaseMethod.access$400(BaseMethod.java:41)
 at org.apache.felix.scr.impl.inject.methods.BaseMethod$NotResolved.resolve(BaseMethod.java:602)
 at org.apache.felix.scr.impl.inject.methods.BaseMethod$NotResolved.methodExists(BaseMethod.java:626)
 at org.apache.felix.scr.impl.inject.methods.BaseMethod.methodExists(BaseMethod.java:528)
 at org.apache.felix.scr.impl.inject.methods.ActivateMethod.invoke(ActivateMethod.java:315)
 at org.apache.felix.scr.impl.inject.methods.ActivateMethod.invoke(ActivateMethod.java:307)
 at org.apache.felix.scr.impl.manager.SingleComponentManager.invokeModifiedMethod(SingleComponentManager.java:810)
 at org.apache.felix.scr.impl.manager.SingleComponentManager.modify(SingleComponentManager.java:765)
 at org.apache.felix.scr.impl.manager.SingleComponentManager.reconfigure(SingleComponentManager.java:683)
 at org.apache.felix.scr.impl.manager.SingleComponentManager.reconfigure(SingleComponentManager.java:647)
 at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.configurationUpdated(ConfigurableComponentHolder.java:435)
 at org.apache.felix.scr.impl.manager.RegionConfigurationSupport.configurationEvent(RegionConfigurationSupport.java:288)
 at org.apache.felix.scr.impl.manager.RegionConfigurationSupport$1.configurationEvent(RegionConfigurationSupport.java:91)
 at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.sendEvent(ConfigurationManager.java:1667)
 at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:1635)
 at org.apache.felix.cm.impl.UpdateThread$1.run(UpdateThread.java:126)
 at org.apache.felix.cm.impl.UpdateThread$1.run(UpdateThread.java:123)
 at java.base/java.security.AccessController.doPrivileged(Native Method)
 at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:122)
 at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:105)
 at java.base/java.lang.Thread.run(Thread.java:844)

org.slf4j.osgi-over-slf4j[org.apache.felix.configadmin.1.9.4] : [[org.osgi.service.cm.ConfigurationAdmin]]Unexpected problem delivering configuration event to [org.osgi.service.cm.ConfigurationListener, id=18, bundle=24/mvn:org.apache.felix/org.apache.felix.configadmin/1.9.4]
java.security.AccessControlException: access denied (""org.osgi.framework.ServicePermission"" ""java.lang.Runnable"" ""register"")
 at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)
 at java.base/java.security.AccessController.checkPermission(AccessController.java:895)
 at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:335)
 at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:322)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.register(AbstractComponentManager.java:891)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.register(AbstractComponentManager.java:877)
 at org.apache.felix.scr.impl.manager.RegistrationManager.changeRegistration(RegistrationManager.java:128)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:944)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:727)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:661)
 at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:427)
 at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.configurationUpdated(ConfigurableComponentHolder.java:440)
 at org.apache.felix.scr.impl.manager.RegionConfigurationSupport.configurationEvent(RegionConfigurationSupport.java:288)
 at org.apache.felix.scr.impl.manager.RegionConfigurationSupport$1.configurationEvent(RegionConfigurationSupport.java:91)
 at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.sendEvent(ConfigurationManager.java:1667)
 at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:1635)
 at org.apache.felix.cm.impl.UpdateThread$1.run(UpdateThread.java:126)
 at org.apache.felix.cm.impl.UpdateThread$1.run(UpdateThread.java:123)
 at java.base/java.security.AccessController.doPrivileged(Native Method)
 at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:122)
 at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:105)
 at java.base/java.lang.Thread.run(Thread.java:844)","- Felix fwk 6.0.0 
- Felix security 2.6.0
- Felix config admin 1.9.4 and 1.9.5-SNAPSHOT",,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-12 10:15:31.606,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Sep 16 20:08:54 UTC 2018,,,,,,0|i3x8t3:,9223372036854775807,,,,,,,,12/Sep/18 10:15;cziegeler;Thanks for reporting [~cnoelle]. I've committed a potential fix in rev 1840649. Please give it a test,"12/Sep/18 12:19;cnoelle;[~cziegeler], I think you forgot to include the fix in the commit. No changes in UpdateThread so far, the bug is still present.",12/Sep/18 12:59;cziegeler;[~cnoelle] The change is in FireConfigurationEvent,12/Sep/18 13:09;cziegeler;[~cnoelle] Is there an easy way to reproduce the issue?,"12/Sep/18 13:51;cnoelle;Ok, sorry. In any case, the issue is still there. I tracked it down a little further: there are these two arrays in the  FireConfigurationEvent class, 

private final ConfigurationListener[] listeners;

private final Bundle[] listenerProvider;

In my case there is an entry of type org.apache.felix.scr.impl.manager.RegionConfigurationSupport$1 in the listeners array, with the configadmin bundle in the listenersProvider array at the corresponding position. Hence the scr-callback is executed with permissions of the configadmin bundle. The reason is that scr uses the CA bundle context to register a service, see the #start-method in [https://github.com/apache/felix/blob/trunk/scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java]

So maybe it's rather an scr issue now.

 ","12/Sep/18 14:17;cziegeler;Thanks, yes this looks like a SCR bug, it has to register the listener using the config admin bundle and therefore the listener is executed in the wrong bundle context","12/Sep/18 15:17;cnoelle;By the way, to reproduce the issue:
 * create/use a ds-component which expects a component property type (@interface) in the activate method
 * start with security enabled
 * create a configuration with location ""?"" for the component (I did this by means of the configurator; when running with security you need to use a snapshot version and remove the permissions.perm file, due to some other bugs; but it shouldn't matter how the configuration is created)
 * change the configuration at runtime ","12/Sep/18 17:21;timothyjward;{quote}Thanks, yes this looks like a SCR bug
{quote}
 

I agree with this. SCR should definitely be removing itself from the stack by setting the relevant access control context before calling any lifecycle methods on the component. Otherwise SCR requires AllPermission (which is probably what it has if nobody has created a proper permissions file for it) which is a bad thing.","12/Sep/18 17:59;cnoelle;In general you are right, [~timothyjward]. Note however that here the issue is not that SCR is on the call stack where it shouldn't, but rather that ConfigAdmin is (although the root cause for this is in SCR).",13/Sep/18 22:02;cziegeler;[~cnoelle] I've committed a potential fix to SCR in rev 1840868. It would be great if you could give this a try. Thanks!,"16/Sep/18 20:08;cnoelle;Looks good to me, thanks a lot [~cziegeler]",,,,,
NoClassDefFoundError for the CM Security Domain combiner,FELIX-5908,13179060,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,timothyjward,timothyjward,15/Aug/18 12:16,17/Sep/18 08:04,14/Mar/19 02:49,16/Aug/18 08:40,configadmin-1.9.4,,,,configadmin-1.9.6,,,,Configuration Admin,,0,,"This is a pretty weird bug, so I'll try to explain it.

When running with security on the Configuration Admin Updater thread applies an Access Control Context which, amongst other things, sets up a Domain Combiner. This Domain Combiner lazily creates a combined Protection Domain based on the target bundle.

 

All of this works fine until you end up in the following situation:
 # The MS/MSF being called attempts to perform a checked operation (for which they may or may not have permission)
 # The Check causes the CM Domain Combiner to be instantiated, triggering a class load if it is the first time
 # The Loading of the class can then trigger *more* security checks in some cases, for example setting the CodeSource of the class being defined can require a security check if there are multiple frameworks in the VM, or if the code was installed from a custom URL handler that has a custom toExternalForm() implementation
 # This security check retrievers the CM Domain Combiner, which attempts to load the class again
 # The Java ClassLoader detects the cycle and throws a NoClassDefFoundError

 

I am setting up a ""simple"" test demonstrating this (it necessarily has several moving parts) and a proposed patch.

 ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-15 12:55:48.259,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 16 10:38:13 UTC 2018,,,,,,0|i3x2e7:,9223372036854775807,,,,,,,,"15/Aug/18 12:55;githubbot;GitHub user timothyjward opened a pull request:

    https://github.com/apache/felix/pull/150

    Configuration Admin Security can cause a NoClassDefFoundError

    Fixes FELIX-5908

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/timothyjward/felix config-security

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/150.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #150
    
----
commit 561a99c53854c0449bd922a344f9eee513df5222
Author: Tim Ward <timothyjward@...>
Date:   2018-08-15T12:21:20Z

    FELIX-5908 - Tests to demonstrate the NoClassDefFoundError that can occur with security on
    
    Also includes general security tests to ensure that Config Admin runs correctly with Security on
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

commit 007a88b104deb92fcd890d81bbac5a0df1ec4708
Author: Tim Ward <timothyjward@...>
Date:   2018-08-15T12:52:30Z

    FELIX-5908 Avoid a NoClassDefFoundError by eagerly instantiating the ProtectionDomain
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

----
","15/Aug/18 12:57;timothyjward;The attached GitHub Pull Request contains two commits, the first containing tests demonstrating the issue, the second containing a fix for the issue","16/Aug/18 08:40;cziegeler;Thanks [~timothyjward] That's really a subtle bug
I've applied your fix together with the tests in rev 1838162.
Due to that we're now depending on a snapshot of framework.security
[~kpauls] Can we get a release of framework.security in the near future to get rid of this snapshot dependency?","16/Aug/18 08:45;karlpauls;[~cziegeler], yes, I'm  planning to cut a framework 6.0.1 and a framework.security 2.6.1 release soon.","16/Aug/18 09:02;timothyjward;[~cziegeler] the other option would be update the ConfigurationTestBase installBundle method to add a dummy file into the generated test bundles. 

Adding a dummy file makes these bundles not “manifest only” and therefore avoids FELIX-5906 blowing up the tests. If this change is made then security 2.6.0 can be used. 

I avoided working around that bug in the patch as it wasn’t part of the minimum necessary changes for testing/fixing, and I figured the test changes were complex enough already!","16/Aug/18 10:11;cziegeler;While a snapshot dependency is obviously not ideal and we should avoid it in general, I think it's fine for this case, especially if we get a release soon. We just need to wait with a configadmin release until the snapshot dependency is released.",16/Aug/18 10:38;karlpauls;vote is on its way :-),,,,,,,,,
Installing Manifest only bundles causes ArrayIndexOutOfBoundsException from Felix Security,FELIX-5906,13178682,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,timothyjward,timothyjward,13/Aug/18 19:39,24/Aug/18 21:25,14/Mar/19 02:49,14/Aug/18 07:50,framework.security-2.6.0,,,,framework.security-2.6.1,,,,Framework Security,,0,,"The Felix security Provider returns an empty array, rather than null when [finding certificates|[https://github.com/apache/felix/blob/trunk/framework.security/src/main/java/org/apache/felix/framework/security/verifier/BundleDNParser.java#L274].] This then causes an ArrayIndexOutOfBoundsException when [this line|https://github.com/apache/felix/blob/trunk/framework.security/src/main/java/org/apache/felix/framework/security/verifier/BundleDNParser.java#L475] is reached",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-13 21:53:16.398,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 07:50:50 UTC 2018,,,,,,0|i3x027:,9223372036854775807,,,,,,,,"13/Aug/18 21:53;karlpauls;Good catch - I think I fixed it in r1837982. 

[~timothyjward], could you test it with the current trunk (2.7.0-SNAPSHOT) and see if it works for you now?",14/Aug/18 07:16;timothyjward;[~karlpauls] - that seems to have done the trick! Now back to trying to reproduce the config admin bug that started me down this rabbit hole. :),"14/Aug/18 07:50;karlpauls;Perfect, thanks for reporting.",,,,,,,,,,,,,
SCR cannot access method getLogger from LogService R7,FELIX-5905,13178531,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,romale,romale,13/Aug/18 08:30,23/Sep/18 07:09,14/Mar/19 02:49,16/Sep/18 13:32,scr-2.1.2,,,,scr-2.1.8,,,,Declarative Services (SCR),,0,,"I'm using SCR 2.1.5-SNAPSHOT with Felix LogService R7 and Felix Log-Extension.

The LogService bundle is installed in the boot classpath (with Felix Logback & SLF4J APIs), and I'm using Log-Extension to expose LogService services to the OSGi environment.

When using SCR, the method ValueUtils#getLogger cannot get access to the method LogService#getLogger using reflection for unknown reason: IllegalAccessException.

The LogService implementation used as argument (coming from Felix LogService) owns the right method, but the reflection code failed with this exception.

I tried a ""workaround"", using ""setAccessible(true)"" to the method handle, before invoking the method on the LogService implementation: now it works as expected.

I'm not sure if it's related to my setup, meanwhile I need this call to ""setAccessible"" in order to get the expected behaviour. Without it, SCR failed to get a logger instance, and my components fail with a NPE.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-13 16:00:57.593,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Sep 16 13:32:35 UTC 2018,,,,,,0|i3wz4v:,9223372036854775807,,,,,,,,"13/Aug/18 16:00;cziegeler;The getLogger method is public, so I fail to see why setAccessible(true) is required here
[~rotty3000] Do you have any idea?","13/Aug/18 16:05;rotty3000;super weird, is there a way to get a basic example project that reproduces the issue?","17/Aug/18 06:16;cziegeler;[~romale] I guess this is related to your setup, could you maybe find out which LoggerFactory implementation class is used at runtime with reflection?","10/Sep/18 20:15;cnoelle;Could this be caused by the class being package private? I believe that both the class and the method need to be public in order to access a method reflectively without a call to Method#setAccessible(true).

See https://github.com/apache/felix/blob/trunk/log/src/main/java/org/apache/felix/log/LogServiceImpl.java ","14/Sep/18 06:18;cziegeler;[~cnoelle] Good catch, yes this might be the problem
[~romale] Is there any chance that you try your setup with changing the LogServiceImpl class as mentioned above to public?",16/Sep/18 13:32;cziegeler;Added setAccessible(true) in rev 1841008,,,,,,,,,,
"SCR is creating a logger instance using name ""null""",FELIX-5904,13178494,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,romale,romale,13/Aug/18 00:35,20/Aug/18 07:19,14/Mar/19 02:49,13/Aug/18 09:45,scr-2.1.6,,,,scr-2.1.6,,,,Declarative Services (SCR),,0,,"When using LogService 1.2 from OSGi r7 together with SCR 2.1.4, the following error happens:

{{org.osgi.framework.BundleException: Activator start error in bundle org.apache.felix.scr [8].}}
{{ at org.apache.felix.framework.Felix.activateBundle(Felix.java:2448)}}
{{ at org.apache.felix.framework.Felix.startBundle(Felix.java:2304)}}
{{ at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1535)}}
{{ at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)}}
{{ at java.lang.Thread.run(Thread.java:748)}}
{{Caused by: java.lang.NullPointerException}}
{{ at org.apache.felix.log.RootLoggerContextImpl.getEffectiveLogLevel(RootLoggerContextImpl.java:53)}}
{{ at org.apache.felix.log.LoggerContextImpl.getEffectiveLogLevel(LoggerContextImpl.java:70)}}
{{ at org.apache.felix.log.LoggerImpl.isErrorEnabled(LoggerImpl.java:216)}}
{{ at org.apache.felix.scr.impl.logger.R7LogServiceLogger.isLogEnabled(R7LogServiceLogger.java:48)}}
{{ at org.apache.felix.scr.impl.logger.AbstractLogger.isLogEnabled(AbstractLogger.java:72)}}
{{ at org.apache.felix.scr.impl.logger.AbstractLogger.log(AbstractLogger.java:110)}}
{{ at org.apache.felix.scr.impl.Activator.restart(Activator.java:143)}}
{{ at org.apache.felix.scr.impl.config.ScrConfigurationImpl.configure(ScrConfigurationImpl.java:213)}}
{{ at org.apache.felix.scr.impl.config.ScrConfigurationImpl.start(ScrConfigurationImpl.java:118)}}
{{ at org.apache.felix.scr.impl.Activator.start(Activator.java:100)}}
{{ at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)}}
{{ at org.apache.felix.framework.Felix.activateBundle(Felix.java:2398)}}
{{ ... 4 more}}

It looks like SCR is trying to create a Logger instance through LoggerFactory with name=null.

Specs from OSGi r7 do not clearly specify what happens when the logger name is null.

The LogService implementation from Felix does not check whether the value is null or not. I think this behaviour is normal: one should not expect a method to work normally if nothing in the documentation say anything about nullability.

The Logger instance is created from R7LogServiceLogger, which is created by LogServiceSupport#getLogger. This instance is internally used by the bundle.

I think a default logger name should be set for this internal logger.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-13 05:15:14.811,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 13 09:45:20 UTC 2018,,,,,,0|i3wywn:,9223372036854775807,,,,,,,,"13/Aug/18 05:15;cziegeler;Due to this bug, I canceled the 2.1.4 release (as this was supposed to fix R7 logging problems).","13/Aug/18 05:19;cziegeler;Thanks for reporting [~romale]. I've committed a fix in rev 1837919, could you please verify using latest from master?",13/Aug/18 08:22;romale;Looks good to me!,13/Aug/18 09:45;cziegeler;Thanks,,,,,,,,,,,,
java.lang.IllegalArgumentException: Bundle org.apache.felix.scr is not resolved with R7 LogService,FELIX-5902,13177571,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,rakeshk15,rakeshk15,08/Aug/18 01:51,20/Aug/18 07:19,14/Mar/19 02:49,09/Aug/18 09:50,scr-2.1.2,,,,scr-2.1.6,,,,Declarative Services (SCR),,0,,"I have updated to SCR 2.1.2 with Felix LogService 1.2.0 and getting 

java.lang.IllegalArgumentException: Bundle org.apache.felix.scr [81] is not resolved.

IMHO, this happens due to the *org.apache.felix.log.LogServiceImpl*#getLogger(Bundle bundle, String name, Class<L> loggerType) checking if the calling Bundle is in *active* or *resolved* state.  **  Since the SCR bundle is in *starting* state which throws the above mentioned exception.

 

Here is the stack trace.

 
{code:java}
java.lang.IllegalArgumentException: Bundle org.apache.felix.scr [81] is not resolved.
at org.apache.felix.log.LogServiceImpl.getLogService(LogServiceImpl.java:153)
at org.apache.felix.log.LogServiceImpl.getLogger(LogServiceImpl.java:146)
at org.apache.felix.scr.impl.logger.R7LogServiceLogger.<init>(R7LogServiceLogger.java:35)
at org.apache.felix.scr.impl.logger.LogServiceSupport.getLogger(LogServiceSupport.java:69)
at org.apache.felix.scr.impl.logger.LogServiceEnabledLogger.getLogger(LogServiceEnabledLogger.java:106)
at org.apache.felix.scr.impl.logger.AbstractLogger.isLogEnabled(AbstractLogger.java:71)
at org.apache.felix.scr.impl.logger.AbstractLogger.log(AbstractLogger.java:110)
at org.apache.felix.scr.impl.Activator.restart(Activator.java:143)
at org.apache.felix.scr.impl.config.ScrConfigurationImpl.configure(ScrConfigurationImpl.java:213)
at org.apache.felix.scr.impl.config.ScrConfigurationImpl.start(ScrConfigurationImpl.java:118)
at org.apache.felix.scr.impl.Activator.start(Activator.java:100)
at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
at org.apache.felix.framework.Felix.activateBundle(Felix.java:2398)
at org.apache.felix.framework.Felix.startBundle(Felix.java:2304)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1535)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)
at java.lang.Thread.run(Thread.java:748){code}
 

Please look into this as I am blocked due to this.","MacOS 10.14, JDK 8, bnd-maven-plugin 4.0.0",,,,,,,,,,,,08/Aug/18 13:07;rakeshk15;SCRandLogServiceBundleIds.png;https://issues.apache.org/jira/secure/attachment/12934811/SCRandLogServiceBundleIds.png,08/Aug/18 01:47;rakeshk15;Screenshot 2018-08-08 at 7.16.38 AM.png;https://issues.apache.org/jira/secure/attachment/12934744/Screenshot+2018-08-08+at+7.16.38+AM.png,08/Aug/18 01:47;rakeshk15;Screenshot 2018-08-08 at 7.17.09 AM.png;https://issues.apache.org/jira/secure/attachment/12934743/Screenshot+2018-08-08+at+7.17.09+AM.png,3.0,,,,,,,,,,,,,,,,,,,2018-08-09 07:23:10.023,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 09 09:50:13 UTC 2018,,,,,,0|i3wt7j:,9223372036854775807,,,,,,,,"08/Aug/18 02:14;rakeshk15;SCR 2.1.0 works with Felix Log Service 1.2.0 though.

Only change I could see now is w.r.t finding out whether runtime is *r7Enabled*

*SCR 2.1.0 Code*
{code:java}
this.r7Enabled = ""org.osgi.service.log.LoggerFactory"".equals(this.logService.getClass().getSuperclass().getName());{code}
The getSuperClass always returns *java.lang.Object* which can never be equals to *org.osgi.service.log.LoggerFactory* and resulted in using *R6LogServiceLogger*

 

*SCR 2.1.2 Code,* the code is corrected though and *R7LogServiceLogger* is invoked which results in the *java.lang.IllegalArgumentException***

 
{code:java}
private static boolean checkForLoggerFactory(Class<?> clazz)
{
    while ( clazz != null )
    {
        final Class<?>[] is = clazz.getInterfaces();
        for(final Class<?> c : is)
        {
            if ( ""org.osgi.service.log.LoggerFactory"".equals(c.getName()) )
            {
                return true;
            }
            if ( checkForLoggerFactory(c) )
            {
                return true;
            }
        }
        clazz = clazz.getSuperclass();
    }
    return false;
}
{code}
 

 ","08/Aug/18 13:05;rakeshk15;this happens intermittently, specifically when the Log Service bundle is activated before the SCR bundle.

Please see the SCRandLogServiceBundleIds screenshot attached.","09/Aug/18 07:23;cziegeler;I think this need to be fixed in the Log Service. Logging should work for a starting bundle, otherwise you have no change to log in the BundleActivator#start method
For this particular error, this could be avoided in LogServiceImpl with checking that the bundle parameter in getLogger is the same as m_bundle - which should be the case, but that would just be a workaround. The real fix, as mentioned above is to allow logging for starting and probably stopping bundles. I understand that getBundleContext does not work in these states but such a bundle could get the LogService in that state","09/Aug/18 07:44;cziegeler;Actually my above comment is missing the fact, that the getLogger(Bundle, String, Class) method is used which explicitly states that the bundle needs to be resolved in the specification. It's possible to log in an bundle activator but not by using this method (which makes sense).
So SCR should not use this method to get the logger for itself as it already has the LogService/LoggerFactory from the service registry. For the logger instance SCR gets on behalf of extended bundles, the bundles are in the resolved/active state, so that's fine to use the bundle as a first argument
Or in other words, we need to fix this in SCR","09/Aug/18 07:57;cziegeler;Thanks for reporting this [~rakeshk15]
I've committed a fix in rev 1837694 to SCR. Could you please try latest SCR from trunk?","09/Aug/18 09:01;rakeshk15;Thanks for the prompt fix [~cziegeler]

I just built/deployed the 2.1.3-SNAPSHOT and it worked perfectly.",09/Aug/18 09:50;cziegeler;Thanks [~rakeshk15] for verifying,,,,,,,,,
java.io.NotSerializableException: org.apache.felix.configurator.impl.json.OrderedDictionary,FELIX-5898,13176974,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,cvgaviao,cvgaviao,05/Aug/18 17:57,10/Aug/18 13:26,14/Mar/19 02:49,06/Aug/18 06:11,configurator-1.0.2,,,,configurator-1.0.4,,,,Configurator,,0,,"I'm using ubuntu 18.04 with Java 8.
I've created a simple example in order to test felix.configurator bundle. 
When running the example inside a Eclipse PDE I received the exception below:

{code:java}
14:32:53.253||ERROR|Unable to persist state to state.ser|L.org.apache.felix.configurator||L.o.a.f.configurator@?[Apache Felix Configurator Worker Thread]

java.io.NotSerializableException: org.apache.felix.configurator.impl.json.OrderedDictionary
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
    at org.apache.felix.configurator.impl.model.Config.writeObject(Config.java:80)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1140)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
    at java.util.ArrayList.writeObject(ArrayList.java:766)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1140)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
    at org.apache.felix.configurator.impl.model.ConfigList.writeObject(ConfigList.java:59)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1140)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
    at java.util.TreeMap.writeObject(TreeMap.java:2438)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1140)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
    at org.apache.felix.configurator.impl.model.AbstractState.writeObject(AbstractState.java:49)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1140)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
    at org.apache.felix.configurator.impl.model.State.writeState(State.java:98)
    at org.apache.felix.configurator.impl.Configurator.process(Configurator.java:398)
    at org.apache.felix.configurator.impl.Configurator$1$1.run(Configurator.java:113)
    at org.apache.felix.configurator.impl.WorkerQueue.run(WorkerQueue.java:76)
    at java.lang.Thread.run(Thread.java:748) 
{code}

I also did some investigations and discovered that the _*org.apache.felix.configurator.impl.json.OrderedDictionary*_ is not implementing _java.io.Serializable_

",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-05 19:19:05.263,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 06 09:39:16 UTC 2018,,,,,,0|i3wpiv:,9223372036854775807,,,,,,,,"05/Aug/18 19:19;githubbot;GitHub user cvgaviao opened a pull request:

    https://github.com/apache/felix/pull/148

    Fixing FELIX-5898

    added java.io.Serializable to
    org.apache.felix.configurator.impl.json.OrderedDictionary

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cvgaviao/felix FELIX-5898

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/148.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #148
    
----
commit cf774aa6d4622a4d235b63a1649ad82cbb669f2f
Author: Cristiano Gavião <cvgaviao@...>
Date:   2018-08-05T19:03:43Z

    Fixing FELIX-5898
    
    added java.io.Serializable to
    org.apache.felix.configurator.impl.json.OrderedDictionary

----
",06/Aug/18 06:11;cziegeler;Thanks for your patch [~cvgaviao]. It's applied in rev 1837480,06/Aug/18 09:39;cvgaviao;I that need to thank you [~cziegeler] (and all other felix guys) for so many years of excellent works ! ;) ,,,,,,,,,,,,,
org.apache.felix.http.proxy.ProxyServlet NullPointerException,FELIX-5897,13176854,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,dnebing,dnebing,03/Aug/18 23:54,20/Sep/18 18:32,14/Mar/19 02:49,20/Aug/18 07:26,http.proxy-3.0.2,,,,http.proxy-3.0.4,,,,HTTP Service,,0,,"I have equinox embedded in a war, using http.proxy 3.0.2 to proxy traffic from WAR context into OSGi container.

When deploying an updated WAR, all servlets including ProxyServlet will have the destroy() method invoked.

An NPE will be generated by ProxyServlet if the servlet has not serviced any requests:

 
{code:java}
03-Aug-2018 20:01:35.386 SEVERE [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.ApplicationContext.log Servlet [proxy] threw unload() exception
 javax.servlet.ServletException: Servlet.destroy() for servlet [proxy] threw exception
 at org.apache.catalina.core.StandardWrapper.unload(StandardWrapper.java:1312)
 at org.apache.catalina.core.StandardWrapper.stopInternal(StandardWrapper.java:1635)
 at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:226)
 at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5466)
 at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:226)
 at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:845)
 at org.apache.catalina.startup.HostConfig.undeploy(HostConfig.java:1433)
 at org.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1341)
 at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1619)
 at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:314)
 at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:94)
 at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1166)
 at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1390)
 at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1394)
 at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1362)
 at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException
 at org.apache.felix.http.proxy.ProxyServlet.destroy(ProxyServlet.java:132)
 at org.apache.catalina.core.StandardWrapper.unload(StandardWrapper.java:1301)
 ... 15 more
{code}
The relevant code is:
{code:java}
@Override
public void destroy()
{
 this.tracker.close();
 super.destroy();
}{code}
The ProxyServlet does a lazy call to doInit() on the first incoming service() call.  doInit() will create the tracker instance, otherwise this value is null.

The fix is to wrap the tracker.close() line with a check to see that the tracker is not null before invoking the close() method.",,,,,,,,,,,,,04/Aug/18 00:09;dnebing;FELIX-5897.patch;https://issues.apache.org/jira/secure/attachment/12934352/FELIX-5897.patch,,,1.0,,,,,,,,,,,,,,,,,,,2018-08-20 07:26:23.125,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 20 07:26:23 UTC 2018,,,,,,0|i3wos7:,9223372036854775807,,,,,,,,04/Aug/18 00:10;dnebing;Submitted patch file to resolve the NPE.,20/Aug/18 07:26;cziegeler;Thanks for your patch [~dnebing] It's applied in rev 1838410,,,,,,,,,,,,,,
JQuery Security bug CVE-2015-9251 in Web Console,FELIX-5893,13175773,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,Varun G,Varun G,31/Jul/18 09:01,13/Nov/18 10:36,14/Mar/19 02:49,06/Aug/18 14:44,webconsole-4.3.4,,,,webconsole-4.3.8,,,, Console,,0,,"Hi Experts,

    In our product we are using Sling version 6 in one of our release.(Working on Migration to Sling 10 for next versions)

    Recently we came across a security bug CVE-2015-9251.
     (CVE-2015-9251 is a vulnerability to allow an attacker to execute arbitrary code when text/javascript responses are received from cross-origin ajax requests not containing the option `dataType`. Its CVSS score is 6.1 in NVD.).
     

   To fix this an up-gradation of jQuery to versions greater than 3.0.0 is required.
     
     In our product we are using felix  web console dependency which contains jQuery of version 1.3.2.js.
  
     As part of the fix for the security bug we need to upgrade the jQuery in the jar that are mentioned above.
     For that we checked the latest versions for the above mentioned jars and identified that the jQuery versions are not above v3.0.0.
     So could you please help us in upgrading them as soon as possible.
     
 Thanks,
 Varun.",,,,,,,,,,,,,06/Aug/18 14:15;christanto;FELIX-5893.diff;https://issues.apache.org/jira/secure/attachment/12934485/FELIX-5893.diff,,,1.0,,,,,,,,,,,,,,,,,,,2018-08-06 14:17:21.28,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 07 09:21:37 UTC 2018,,,,,,0|i3wien:,9223372036854775807,,,,,,,,"06/Aug/18 14:17;christanto;The attached FELIX-5893.diff will update jquery to version 3. Since version 3 is not fully compatible with 1.x, we have to use jquery-migrate.

I tested manually and it seems to be working nicely.

Also note that jquery-ui is not upgraded. There were styling glitches when I tried that.","06/Aug/18 14:44;cziegeler;Thanks [~christanto] . I did a quick verification as well and indeed everything looks still ok.
I've applied your patch in rev 1837529 in a slightly different variant as the web console also supports debugging of the javascript","07/Aug/18 09:21;Varun G;Hi Team,
Thanks for the quick fix.
Could anyone share the URL or repository location to get this jar. Need it ASAP.

Thanks,
Varun.",,,,,,,,,,,,,
Repeated calls to getFactoryConfiguration return different configuration instances,FELIX-5892,13175175,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,timothyjward,timothyjward,27/Jul/18 14:30,03/Aug/18 07:02,14/Mar/19 02:49,28/Jul/18 08:25,configadmin-1.9.2,,,,configadmin-1.9.4,,,,Configuration Admin,,0,,"When using the new getFactoryConfiguration methods the Configuration Admin implementation does not store a newly created configuration in its local cache. This results in a new configuration object being created each time which means that the revision field is reset to 1. Any updates made to the newly acquired configuration are thus not delivered to ManagedServiceFactory instances because they are deemed to be ""too old"", at least until the revision count of the new configuration overtakes the old one.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-27 14:33:58.684,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jul 28 08:25:24 UTC 2018,,,,,,0|i3wepz:,9223372036854775807,,,,,,,,"27/Jul/18 14:33;githubbot;GitHub user timothyjward opened a pull request:

    https://github.com/apache/felix/pull/147

    [FELIX-5892] Repeated calls to getFactoryConfiguration return differe…

    …nt backing instances
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/timothyjward/felix config-cache

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #147
    
----
commit 8c1932171b8ecb88223430928433ffe9bcaf87c5
Author: Tim Ward <timothyjward@...>
Date:   2018-07-27T14:32:04Z

    [FELIX-5892] Repeated calls to getFactoryConfiguration return different backing instances
    
    Signed-off-by: Tim Ward <timothyjward@apache.org>

----
",28/Jul/18 08:25;cziegeler;Thanks [~timothyjward] . I've applied your patch in rev 1836873,,,,,,,,,,,,,,
Extension Bundle capabilities do not index correctly,FELIX-5889,13172514,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,16/Jul/18 23:25,24/Aug/18 21:26,14/Mar/19 02:49,16/Jul/18 23:28,framework-6.0.0,,,,framework-6.0.1,,,,Framework,,0,,"When an extension bundle adds capabilities to the framework these are not correctly index by the resolver. This in turn, leads to bundles not being able to require these capabilities. 
",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 16 23:28:04 UTC 2018,,,,,,0|i3vybj:,9223372036854775807,,,,,,,,"16/Jul/18 23:28;karlpauls;Fixed in r1836072.
",,,,,,,,,,,,,,,
Error logged by org.apache.felix.framework.BundleWiringImpl.getClassByDelegation,FELIX-5886,13171926,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,karlpauls,chris@die-schneider.net,chris@die-schneider.net,13/Jul/18 07:16,24/Aug/18 21:26,14/Mar/19 02:49,13/Jul/18 09:10,framework-6.0.0,,,,framework-6.0.1,,,,Framework,,0,,"I just tried to run the tests of felix systemready against the current felix framework 6.0.0. I get a lot of error log messages like below. The tests still succeed though.

 

ERROR: DirectoryContent: Unable to read bytes for file org/osgi/service/http/context/ServletContextHelper.class from file /Users/cschneid/checkout/felix-trunk/systemready/target/classes/org/osgi/service/http/context/ServletContextHelper.class

For the full stack trace see:

[https://paste.apache.org/42g8]",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-13 09:08:59.079,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jul 13 09:10:24 UTC 2018,,,,,,0|i3vuw7:,9223372036854775807,,,,,,,,"13/Jul/18 09:08;karlpauls;Yes, it looks like we log a little to aggressively in case of a referenced exploded dir. We should only log an error if we can't load the bytes of an existing entry for some reason but _not_ if the entry doesn't exit at all. 

Oh well, at a minimum, it only looks ugly because of the error log message - it doesn't impact anything else (except having ugly log messages when nothing really happened). For now, these can be ignored.

Good find - thanks a lot for reporting! ",13/Jul/18 09:10;karlpauls;Fixed in r1835798. You can try with 6.1.0-SNAPSHOT.,,,,,,,,,,,,,,
Felix SCR uses an overly restrictive import range for promises,FELIX-5885,13171772,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,timothyjward,timothyjward,12/Jul/18 16:16,06/Aug/18 15:06,14/Mar/19 02:49,13/Jul/18 04:56,scr-2.1.0,,,,scr-2.1.2,,,,Declarative Services (SCR),,0,,"The Felix SCR bundle embeds the OSGi promise library at version 1.0 to make it easy to deploy DS. This is great, but the import range used is [1.0,1.1), which prevents users of the DS API from using promises 1.1.

There should be no reason that Felix SCR needs to have a provider import range - it should be able to substitute any backward compatible version and use a range of [1,2).",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-13 04:56:57.023,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jul 13 04:56:57 UTC 2018,,,,,,0|i3vty7:,9223372036854775807,,,,,,,,13/Jul/18 04:56;cziegeler;Fixed in rev 1835788,,,,,,,,,,,,,,,
org.osgi.framework.os.name et.al. are not obeyed,FELIX-5875,13169141,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,pkriens,pkriens,29/Jun/18 11:43,09/Jul/18 10:31,14/Mar/19 02:49,29/Jun/18 14:24,framework-5.6.10,,,,framework-6.0.0,,,,Framework,,0,,"The OSGi specification states that org.osgi.framework.os.name is a configuration property. If it is not set then the framework should provide an appropriate value.

However, the Felix code always sets this property itself, regardless if there is already a value set. This makes it impossible to override.

 

I've created a patch on Github https://github.com/apache/felix/pull/145",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-29 12:08:45.544,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 29 14:30:44 UTC 2018,,,,,,0|i3vdsv:,9223372036854775807,,,,,,,,"29/Jun/18 12:08;karlpauls;Good catch! [~pkriens], are you going to commit it or do you want me todo it for you?","29/Jun/18 13:20;pkriens;I feel more comfortable when you do it ... But the patch on Github should be a good start. (Github PR's work? Isn't Felix not still in SVN?)

 

 ","29/Jun/18 13:33;karlpauls;[~pkriens], ok - I'll apply it (PR's only partially work as yes, we are still SVN). However, I think I need to make a little change as the felix version should be set regardless of whether there is an os.version given (see my comment on the PR).",29/Jun/18 14:24;karlpauls;Done in r1834684. Please reopen if you don't like it.,29/Jun/18 14:30;pkriens;Wow! That was quick! Thanks,,,,,,,,,,,
Handle relative path elements in bundle classpath,FELIX-5870,13166368,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,15/Jun/18 14:01,09/Jul/18 10:31,14/Mar/19 02:49,15/Jun/18 14:03,framework-5.6.10,,,,framework-6.0.0,,,,Framework,,0,,"We have to handle relative path elements in the bundle classpath to make sure we are not allowing entries to be unpacked outside of the bundle cache:

https://res.cloudinary.com/snyk/image/upload/v1528192501/zip-slip-vulnerability/technical-whitepaper.pdf",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 15 14:03:05 UTC 2018,,,,,,0|i3uwyf:,9223372036854775807,,,,,,,,15/Jun/18 14:03;karlpauls;Done in r1833597.,,,,,,,,,,,,,,,
reference field of type Logger for service LoggerFactory is always null,FELIX-5867,13165648,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,rotty3000,rotty3000,rotty3000,12/Jun/18 18:43,06/Aug/18 15:06,14/Mar/19 02:49,13/Jun/18 01:36,,,,,scr-2.1.2,,,,Declarative Services (SCR),,0,,"When trying the following snippet as defined in the r7 spec:

{code}
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.log.Logger;
import org.osgi.service.log.LoggerFactory;

@Component
public class WithLogger {

    @Reference(service = LoggerFactory.class)
    private Logger logger;

    @Activate
    void activate() {
        logger.info(l -> l.info(""TESTING""));
    }

}
{code}

the logger field is always null with no obvious errors in the logs.

There's an obvious error due to the NPE in the activate method, but not why the reference field is null.


 The SCR logs as follows:

{code}
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) BundleComponentActivator : Bundle active
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)BundleComponentActivator : Descriptor locations OSGI-INF/org.apache.aries.cdi.test.components.WithLogger.xml
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) BundleComponentActivator : ComponentHolder created.
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)BundleComponentActivator : May enable component holder org.apache.aries.cdi.test.components.WithLogger
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)BundleComponentActivator :Enabling component holder org.apache.aries.cdi.test.components.WithLogger
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state disabled
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state disabled
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Component can not be activated since it is in state disabled
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state disabled
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) Updating target filters
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)No change in target property for dependency logger: currently registered: false
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) No existing service listener to unregister for dependency logger
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Setting target property for dependency logger to null
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)New service tracker for logger, initial active: false, previous references: {}, classFilter: (objectClass=org.osgi.service.log.LoggerFactory), eventFilter null, initialReferenceFilter (objectClass=org.osgi.service.log.LoggerFactory)
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)dm logger tracker reset (closed)
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)classNameFilter: (objectClass=org.osgi.service.log.LoggerFactory) event filter: null
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)dm logger tracking 1 SingleStatic added \{org.osgi.service.log.LogService, org.osgi.service.log.LoggerFactory, org.eclipse.equinox.log.ExtendedLogService}=\{service.id=2, service.bundleid=0, service.scope=bundle} (enter)
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)dm logger tracking 1 SingleStatic active: false trackerOpened: false optional: false
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)dm logger tracking 1 SingleStatic added \{org.osgi.service.log.LogService, org.osgi.service.log.LoggerFactory, org.eclipse.equinox.log.ExtendedLogService}=\{service.id=2, service.bundleid=0, service.scope=bundle} (exit)
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)dm logger tracker opened
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)registering service listener for dependency logger
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Changed state from disabled to unsatisfiedReference
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) Component enabled
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) ActivateInternal
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state unsatisfiedReference
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state unsatisfiedReference
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Activating component from state unsatisfiedReference
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state unsatisfiedReference
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state unsatisfiedReference
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Changed state from unsatisfiedReference to satisfied
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Checking constructor public org.apache.aries.cdi.test.components.WithLogger()
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Found constructor with 0 arguments : public org.apache.aries.cdi.test.components.WithLogger()
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)getting field: logger
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Locating field logger in class org.apache.aries.cdi.test.components.WithLogger
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Found field: private org.osgi.service.log.Logger org.apache.aries.cdi.test.components.WithLogger.logger
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) This thread collected dependencies
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) getService (single component manager) dependencies collected.
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state satisfied
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Querying state satisfied
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)For dependency logger, optional: false; to bind: [[RefPair: ref: [\{org.osgi.service.log.LogService, org.osgi.service.log.LoggerFactory, org.eclipse.equinox.log.ExtendedLogService}=\{service.id=2, service.bundleid=0, service.scope=bundle}] service: [null]]]
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)getting activate: activate
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Found activate method: void org.apache.aries.cdi.test.components.WithLogger.activate()
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)invoking activate: activate: parameters []
[main] ERROR o.a.a.cdi.test.components.WithLogger:67 - bundle cdi-itests.services-one:0.0.2.201806121839 (37)[org.apache.aries.cdi.test.components.WithLogger(0)] : The activate method has thrown an exception
java.lang.NullPointerException: null
    at org.apache.aries.cdi.test.components.WithLogger.activate(WithLogger.java:17)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.apache.felix.scr.impl.inject.methods.BaseMethod.invokeMethod(BaseMethod.java:228)
    at org.apache.felix.scr.impl.inject.methods.BaseMethod.access$1(BaseMethod.java:218)
    at org.apache.felix.scr.impl.inject.methods.BaseMethod$Resolved.invoke(BaseMethod.java:664)
    at org.apache.felix.scr.impl.inject.methods.BaseMethod.invoke(BaseMethod.java:510)
    at org.apache.felix.scr.impl.inject.methods.ActivateMethod.invoke(ActivateMethod.java:317)
    at org.apache.felix.scr.impl.inject.methods.ActivateMethod.invoke(ActivateMethod.java:307)
    at org.apache.felix.scr.impl.manager.SingleComponentManager.createImplementationObject(SingleComponentManager.java:334)
    at org.apache.felix.scr.impl.manager.SingleComponentManager.createComponent(SingleComponentManager.java:114)
    at org.apache.felix.scr.impl.manager.SingleComponentManager.getService(SingleComponentManager.java:947)
    at org.apache.felix.scr.impl.manager.SingleComponentManager.getServiceInternal(SingleComponentManager.java:919)
    at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:750)
    at org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:661)
    at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:427)
    at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.enableComponents(ConfigurableComponentHolder.java:665)
    at org.apache.felix.scr.impl.BundleComponentActivator.initialEnable(BundleComponentActivator.java:339)
    at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:381)
    at org.apache.felix.scr.impl.Activator.access$2(Activator.java:312)
    at org.apache.felix.scr.impl.Activator$ScrExtension.start(Activator.java:263)
    at org.apache.felix.scr.impl.AbstractExtender.createExtension(AbstractExtender.java:196)
    at org.apache.felix.scr.impl.AbstractExtender.modifiedBundle(AbstractExtender.java:169)
    at org.apache.felix.scr.impl.AbstractExtender.modifiedBundle(AbstractExtender.java:1)
    at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:488)
    at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
    at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:232)
    at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:450)
    at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:908)
    at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
    at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEventPrivileged(EquinoxEventPublisher.java:230)
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:137)
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:129)
    at org.eclipse.osgi.internal.framework.EquinoxContainerAdaptor.publishModuleEvent(EquinoxContainerAdaptor.java:191)
    at org.eclipse.osgi.container.Module.publishEvent(Module.java:476)
    at org.eclipse.osgi.container.Module.start(Module.java:467)
    at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:428)
    at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:447)
    at org.apache.aries.cdi.test.cases.AbstractTestCase.installBundle(AbstractTestCase.java:143)
    at org.apache.aries.cdi.test.cases.AbstractTestCase.installBundle(AbstractTestCase.java:136)
    at org.apache.aries.cdi.test.cases.AbstractTestCase.beforeClass(AbstractTestCase.java:69)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
    at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)
    at junit.framework.TestSuite.runTest(TestSuite.java:252)
    at junit.framework.TestSuite.run(TestSuite.java:247)
    at aQute.junit.Activator.test(Activator.java:351)
    at aQute.junit.Activator.run(Activator.java:187)
    at aQute.launcher.Launcher.lambda$serviceChanged$0(Launcher.java:1345)
    at aQute.launcher.Launcher.run(Launcher.java:347)
    at aQute.launcher.Launcher.main(Launcher.java:147)
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)DependencyManager: logger close component unbinding from org.apache.felix.scr.impl.manager.ComponentContextImpl@46b695ec at tracking count 1 refpairs: [[RefPair: ref: [\{org.osgi.service.log.LogService, org.osgi.service.log.LoggerFactory, org.eclipse.equinox.log.ExtendedLogService}=\{service.id=2, service.bundleid=0, service.scope=bundle}] service: [null]]]
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37) Failed creating the component instance; see log for reason
[main] DEBUG LogService.cdi-itests.services-one:? - bundle cdi-itests.services-one:0.0.2.201806121839 (37)Changed state from satisfied to failed
{code}",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-12 20:09:03.23,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 12 21:09:03 UTC 2018,,,,,,0|i3us8n:,9223372036854775807,,,,,,,,"12/Jun/18 20:09;cziegeler;Thanks for reporting, [~rotty3000] - is there any chance I can easily reproduce this?","12/Jun/18 20:15;rotty3000;it's pretty easy:
 * use latest equinox framework (RC here http://download.eclipse.org/eclipse/updates/4.8milestones/S-4.8RC4a-201806110500/plugins/org.eclipse.osgi_3.13.0.v20180409-1500.jar)
 * use the latest SCR (including the fix for FELIX-5865)
 * create the component I showed above
 * run","12/Jun/18 20:41;githubbot;GitHub user rotty3000 opened a pull request:

    https://github.com/apache/felix/pull/141

    FELIX-5867 reference field of type Logger for service LoggerFactory i…

    …s always null
    
    Signed-off-by: Raymond Auge <rotty3000@apache.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rotty3000/felix FELIX-5867

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/141.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #141
    
----
commit ef4dbf7629f7264f1311d3c2b3548c7c8feb21dc
Author: Raymond Auge <rotty3000@...>
Date:   2018-06-12T20:30:30Z

    FELIX-5867 reference field of type Logger for service LoggerFactory is always null
    
    Signed-off-by: Raymond Auge <rotty3000@apache.org>

----
","12/Jun/18 20:54;rotty3000;I tested the fix also with FormatterLogger and it works.

It's not currently possible to test bind methods or constructor injection because bnd is not yet generating the correct component description.","12/Jun/18 21:08;githubbot;Github user rotty3000 closed the pull request at:

    https://github.com/apache/felix/pull/141
",12/Jun/18 21:09;rotty3000;applied at git-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1833423 13f79535-47bb-0310-9956-ffa450edef68,,,,,,,,,,
scr does not respect the log level set in LoggerAdmin,FELIX-5866,13165623,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,rotty3000,rotty3000,12/Jun/18 17:05,06/Aug/18 15:06,14/Mar/19 02:49,13/Jun/18 13:58,,,,,scr-2.1.2,,,,Declarative Services (SCR),,0,,"With R7 logging, configuration of logging levels takes place through the LoggerAdmin.

SCR first checks it's own log level configuration ignoring the level set in LoggerAdmin.

I believe that when r7 logging is enabled, the SCR should first check the LoggerAdmin level and only then fallback to the SCR configuration.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-12 19:56:09.762,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jun 13 13:58:46 UTC 2018,,,,,,0|i3us33:,9223372036854775807,,,,,,,,"12/Jun/18 19:56;cziegeler;I'm not sure if it should work this way. It has always been like this, a two level check, first the SCR config is checked and then the logger is checked. So if the logger is set to DEBUG and the SCR config is set to INFO, you won't get debug messages.
","12/Jun/18 20:05;rotty3000;But my understanding of LogService 1.4 LoggerAdmin is to control the logging configuration. It doesn't make sense to me to have to configure logging in two different places. I also don't think it will make sense to others.

BTW, ConfigurationAdmin is working perfectly with Log service 1.4 with no external configuration needed so I don't think SCR is a common case.","12/Jun/18 20:07;rotty3000;I'm also not suggesting changing how pre r7 logging works, just r7+.","12/Jun/18 20:07;rotty3000;In fact SCR could use LoggerAdmin to set it's log level from it's configuration if it so chooses, as long as it uses LoggerAdmin to handle the level checking.",12/Jun/18 20:08;cziegeler;But it's the same issue with pre r7 logging - why should it work different in the two cases?,"12/Jun/18 20:10;rotty3000;Because prior to r7 there was no management API for logging, which is why SCR had to have it's own configuration setting in the first place.","12/Jun/18 20:13;cziegeler;But it is using log levels and uses those in pre r7 with the LogService and if the LogService is not blindly logging everything, it's exactly the same","12/Jun/18 20:20;rotty3000;I understand that it's using the same levels. It's not the levels which are the issue, the issue is that if I use LoggerAdmin to set the log level for SCR, it's ignored completely, which is unexpected.","12/Jun/18 20:25;rotty3000;for example:
{code:java}
    @Reference
    void setLoggerAdmin(LoggerAdmin loggerAdmin) {
        LoggerContext loggerContext = loggerAdmin.getLoggerContext(""org.apache.felix.scr"");
        
        Map<String, LogLevel> levels = new HashMap<String, LogLevel>();
        levels.put(Logger.ROOT_LOGGER_NAME, LogLevel.DEBUG);
        
        loggerContext.setLogLevels(levels);
    }
{code}
 this should put SCR into debug, but it doesn't.","12/Jun/18 20:28;rotty3000;I could certainly understand if SCR was not bound to a r7 log service, but it is!","12/Jun/18 20:29;cziegeler;oh I see, now I understand :) ...yes makes sense","12/Jun/18 20:44;githubbot;GitHub user rotty3000 opened a pull request:

    https://github.com/apache/felix/pull/142

    FELIX-5866 scr does not respect the log level set in LoggerAdmin

    Signed-off-by: Raymond Auge <rotty3000@apache.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rotty3000/felix FELIX-5866

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/142.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #142
    
----
commit ec5bd8e0d2b4b87207a2b176912c948b882d4332
Author: Raymond Auge <rotty3000@...>
Date:   2018-06-12T17:33:52Z

    FELIX-5866 scr does not respect the log level set in LoggerAdmin
    
    Signed-off-by: Raymond Auge <rotty3000@apache.org>

----
",13/Jun/18 06:10;cziegeler;[~rotty3000] I've committed a slightly different variant in rev 1833438 . Please cross check. It's not necessary a better solution but keeps the reference to the scr config in a single place,13/Jun/18 13:58;rotty3000;[~cziegeler] that worked for me (y),"13/Jun/18 13:58;githubbot;Github user rotty3000 closed the pull request at:

    https://github.com/apache/felix/pull/142
",
SCR r7 logging support doesn't work on equinox framework,FELIX-5865,13165605,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,rotty3000,rotty3000,12/Jun/18 15:50,06/Aug/18 15:06,14/Mar/19 02:49,12/Jun/18 19:54,,,,,scr-2.1.2,,,,Declarative Services (SCR),,0,,"What happens is that there is a class name check against the LogService returned and rather than checking that the object implements LoggerFactory it does:
{code:java}
""org.osgi.service.log.LoggerFactory"".equals(
    this.logService.getClass().getSuperclass().getName())
{code}
which in the case of Equinox isn't correct.

The code should recurse through the class hierarchy until it finds no super type that is a LoggerFactory.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-12 16:00:12.592,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 12 19:54:31 UTC 2018,,,,,,0|i3urz3:,9223372036854775807,,,,,,,,"12/Jun/18 16:00;cziegeler;Thanks for reporting - checking for a superclass name doesn't sound right at all, it needs to check for an interface with that name.",12/Jun/18 16:15;cziegeler;[~rotty3000] I've added a potential fix in rev 1833407 - could you please check whether this solves the problem?,12/Jun/18 16:24;rotty3000;testing ...,12/Jun/18 16:59;rotty3000;This solved this issue. Thank you!,12/Jun/18 19:54;cziegeler;Thanks,,,,,,,,,,,
Additional server configured through OSGi factory configurations starts and stops immediately,FELIX-5858,13160266,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,Smushkevich,Smushkevich,18/May/18 06:25,06/Aug/18 15:08,14/Mar/19 02:49,02/Aug/18 14:05,http.jetty-4.0.0,,,,http.jetty-4.0.4,,,,HTTP Service,,0,easyfix,"When I disable a default server specifying a negative port and configure an additional server  through OSGi factory configurations i get a server started and immediately stopped:
{code:java}
2018-05-18 08:15:11.149:INFO:oejsh.ContextHandler:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): Started o.e.j.s.ServletContextHandler@4aefeb72{/,null,AVAILABLE}
2018-05-18 08:15:11.150:INFO:oejs.Server:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): Started @1448ms
2018-05-18 08:15:11.150:INFO:oejs.session:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): node0 Scavenging every 660000ms
2018-05-18 08:15:11.194:INFO:oejs.AbstractConnector:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): Started ServerConnector@6dfbaedd{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}
2018-05-18 08:15:11.240:INFO:oejus.SslContextFactory:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): x509=X509@17c0c47f(budget,h=[],w=[]) for SslContextFactory@4d9ec6f9[provider=null,keyStore=bundleresource://4.fwk1864230087/etc/keystore/keystore,trustStore=null]
2018-05-18 08:15:11.517:INFO:oejs.AbstractConnector:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): Started ServerConnector@feb016f{SSL,[ssl, http/1.1]}{0.0.0.0:8443}
2018-05-18 08:15:12.102:INFO:oejs.AbstractConnector:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): Stopped ServerConnector@6dfbaedd{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}
2018-05-18 08:15:12.104:INFO:oejs.AbstractConnector:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): Stopped ServerConnector@feb016f{SSL,[ssl, http/1.1]}{0.0.0.0:8443}
2018-05-18 08:15:12.104:INFO:oejs.session:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): node0 Stopped scavenging
2018-05-18 08:15:12.105:INFO:oejsh.ContextHandler:CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.felix.http]): Stopped o.e.j.s.ServletContextHandler@4aefeb72{/,null,UNAVAILABLE}

{code}
Checking code of Jetty activator I see, that it stops factory on ungetting it.
{code:java}
final Dictionary<String, Object> factoryProps = new Hashtable<>();
factoryProps.put(Constants.SERVICE_PID, JettyService.PID);
factoryProps.put(Constants.SERVICE_VENDOR, ""The Apache Software Foundation"");
factoryProps.put(Constants.SERVICE_DESCRIPTION, ""Managed Service Factory for the Jetty Http Service"");
this.jettyServiceFactoryReg = this.getBundleContext().registerService(""org.osgi.service.cm.ManagedServiceFactory"",
new ServiceFactory()
{

@Override
public Object getService(final Bundle bundle,
final ServiceRegistration registration)
{
return new JettyManagedServiceFactory(getBundleContext());
}

@Override
public void ungetService(final Bundle bundle,
final ServiceRegistration registration,
final Object service)
{
((JettyManagedServiceFactory)service).stop();
}
}, factoryProps);

{code}
It should not happen actually, because it shutdowns the server.

Please fix it.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-02 12:38:28.999,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 02 12:38:28 UTC 2018,,,,,,0|i3tvhb:,9223372036854775807,,,,,,,,"02/Aug/18 12:38;cziegeler;Thanks for reporting, [~Smushkevich] I've committed a potential fix in rev 1837292, could you please test based on the latest source code?",,,,,,,,,,,,,,,
ClassNotFoundException with complex JSON String with Array,FELIX-5847,13158105,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,bischofs@jena.de,bischofs@jena.de,09/May/18 06:40,10/Aug/18 13:26,14/Mar/19 02:49,06/Aug/18 06:09,configurator-1.0.0,,,,configurator-1.0.4,,,,Configurator,,1,,"Hi,

when starting Felix with a complex JSON String(with an array inside ) in the""configurator.initial"" Property i got this error.

 

property:

 
{code:java}
configurator.initial='{\
    "":configurator:version"":""0.0.1"",\
    "":configurator:symbolic-name"":""MyInitialConfig"",\
    ""org.bipolis.kernel.Installer"": {\
        ""bundles"": [{\
            ""id"": 0,\
            ""lastModified"": 0,\
            ""state"": 0,\
            ""symbolicName"": ""org.apach.."",\
            ""version"": ""5.9.0.SNAPSHOT""\
        }, {\
            ""id"": 1,\
            ""lastModified"": 1525845711642,\
            ""state"": 0,\
            ""symbolicName"": ""org.apach."",\
            ""version"": ""4.12.0.1""\
        }]\
    }\
}'{code}
 

 

Error:

 
{code:java}
! Failed to start bundle org.apache.felix.configurator-1.0.0, exception activator error org.apache.johnzon.core.JsonProviderImpl not found from: javax.json.spi.JsonProvider:doLoadProvider#132
org.osgi.framework.BundleException: Activator start error in bundle org.apache.felix.configurator [13].
    at org.apache.felix.framework.Felix.activateBundle(Felix.java:2448)
    at org.apache.felix.framework.Felix.startBundle(Felix.java:2304)
    at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
    at aQute.launcher.Launcher.startBundles(Launcher.java:517)
    at aQute.launcher.Launcher.activate(Launcher.java:423)
    at aQute.launcher.Launcher.run(Launcher.java:301)
    at aQute.launcher.Launcher.main(Launcher.java:147)
Caused by: javax.json.JsonException: org.apache.johnzon.core.JsonProviderImpl not found
    at javax.json.spi.JsonProvider.doLoadProvider(JsonProvider.java:132)
    at javax.json.spi.JsonProvider.provider(JsonProvider.java:64)
    at javax.json.Json.createArrayBuilder(Json.java:84)
    at org.apache.felix.configurator.impl.json.JSONUtil.build(JSONUtil.java:269)
    at org.apache.felix.configurator.impl.json.JSONUtil.getTypedValue(JSONUtil.java:397)
    at org.apache.felix.configurator.impl.json.JSONUtil.readConfigurationsJSON(JSONUtil.java:245)
    at org.apache.felix.configurator.impl.json.JSONUtil.readJSON(JSONUtil.java:166)
    at org.apache.felix.configurator.impl.Configurator.start(Configurator.java:261)
    at org.apache.felix.configurator.impl.ServicesListener.notifyChange(ServicesListener.java:117)
    at org.apache.felix.configurator.impl.ServicesListener$1.addingService(ServicesListener.java:73)
    at org.apache.felix.configurator.impl.ServicesListener$1.addingService(ServicesListener.java:65)
    at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
    at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:871)
    at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
    at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
    at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
    at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
    at org.apache.felix.configurator.impl.ServicesListener.<init>(ServicesListener.java:93)
    at org.apache.felix.configurator.impl.Activator.start(Activator.java:36)
    at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
    at org.apache.felix.framework.Felix.activateBundle(Felix.java:2398)
    ... 6 more
Caused by: java.lang.ClassNotFoundException: org.apache.johnzon.core.JsonProviderImpl
    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at javax.json.spi.JsonProvider.doLoadProvider(JsonProvider.java:129)
    ... 26 more{code}
 ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-06 06:09:15.408,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 06 06:09:15 UTC 2018,,,,,,0|i3ti7z:,9223372036854775807,,,,,,,,"06/Aug/18 06:09;cziegeler;Thanks for reporting
I've fixed this in rev 1837479",,,,,,,,,,,,,,,
org.apache.felix.cm.impl.persistence.PersistenceManagerProxy broken,FELIX-5845,13157912,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,domagoj,domagoj,08/May/18 14:21,26/May/18 14:38,14/Mar/19 02:49,08/May/18 14:41,configadmin-1.9.0,,,,configadmin-1.9.2,,,,Configuration Admin,,0,easyfix,"Caused by a typo in *line 230*, the proxy is currently unusable.

{{if ( targetedFactoryPid{color:#d04437}s{color}.equals(factoryPid) )}}

should actually be

{{if ( targetedFactoryPid.equals(factoryPid) )}}

else it will never find something. Sorry for not supplying a patch for this trivial mistake.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-08 14:41:23.124,,,no_permission,,,,Important,,,,,,,,9223372036854775807,,,Tue May 08 14:41:23 UTC 2018,,,,,,0|i3th13:,9223372036854775807,,,,,,,,08/May/18 14:41;cziegeler;Thanks [~domagoj] . I've fixed the typo in rev 1831192,,,,,,,,,,,,,,,
MvnArtifact org.apache.felix.felix-parent.5-SNAPSHOT not avaylible,FELIX-5842,13155652,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,,bischofs@jena.de,bischofs@jena.de,27/Apr/18 08:22,07/May/18 08:55,14/Mar/19 02:49,03/May/18 21:30,,,,,,,,,Framework,,0,," 

Hi,

 

 

the artifact
{code:java}
org.apache.felix.framework 5.9.0-SNAPSHOT{code}
uses the

 
{code:java}
felix-parent 5-SNAPSHOT
{code}
But this is not published.

 ",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2018-04-27 08:22:50.0,,,,,,0|i3t3if:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,
Async/sync Thread Pool Ratio is not changeable at runtime,FELIX-5831,13152750,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,graben,graben,16/Apr/18 15:09,07/May/18 03:45,14/Mar/19 02:49,17/Apr/18 06:00,eventadmin-1.4.10,,,,eventadmin-1.5.0,,,,Event Admin,,0,,"There is a small bug in Configuration.java line 338. I think it should be
{code:java}
config.get(...){code}
instead of 
{code:java}
m_bundleContext.getProperty(...){code}
to be changeable at runtime.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-16 18:32:19.376,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Tue Apr 17 06:01:06 UTC 2018,,,,,,0|i3slrb:,9223372036854775807,,,,,,,,"16/Apr/18 18:32;githubbot;GitHub user graben opened a pull request:

    https://github.com/apache/felix/pull/133

    FELIX-5831: Use config instead of bundleContext to get property

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/graben/felix FELIX-5831

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/133.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #133
    
----
commit 61a37fbc8fc5c5a154f05339e5d5d0d0a763bd2c
Author: Benjamin Graf <benjamin.graf@...>
Date:   2018-04-16T18:31:14Z

    FELIX-5831: Use config instead of bundleContext to get property

----
","17/Apr/18 06:00;cziegeler;Thanks for your patch [~graben] . Good catch!

I've applied the patch in rev 1829335","17/Apr/18 06:01;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/133
",,,,,,,,,,,,,
Container session should not be invalidated,FELIX-5819,13148776,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,29/Mar/18 03:31,30/Apr/18 08:11,14/Mar/19 02:49,29/Mar/18 03:34,http.base-3.0.18,http.bridge-3.0.18,http.jetty-3.4.8,,http.base-4.0.0,http.bridge-4.0.0,http.jetty-4.0.0,,HTTP Service,,0,,"Currently when a http whiteboard managed session is invalidated, the container session is also invalidated if the session has no other session attributes. This is making a false assumption about when the container session should be invalidated. Therefore the container should not be invalidated automatically but rely on normal container invalidation",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 04 09:17:02 UTC 2018,,,,,,0|i3rxcn:,9223372036854775807,,,,,,,,"29/Mar/18 03:34;cziegeler;Fixed in the R7 branch in rev 1827955

and in master in rev 1827956",04/Apr/18 09:17;cziegeler;Added a junit test case to verify the behaviour,,,,,,,,,,,,,,
Duplicate events send to session listener for http context,FELIX-5815,13147135,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,22/Mar/18 12:42,30/Apr/18 08:11,14/Mar/19 02:49,22/Mar/18 13:25,http.base-3.0.18,http.bridge-3.0.18,http.jetty-3.4.8,,http.base-4.0.0,http.bridge-4.0.0,http.jetty-4.0.0,,HTTP Service,,0,,Session events might be sent twice to session listeners registered with the context of the http service.,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 22 13:25:10 UTC 2018,,,,,,0|i3rn9r:,9223372036854775807,,,,,,,,22/Mar/18 13:25;cziegeler;Fixed the R7 branch in rev 1827484 and master in rev 1827485,,,,,,,,,,,,,,,
Unstable service id should not be used for session attribute names,FELIX-5814,13147104,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,22/Mar/18 10:07,30/Apr/18 08:11,14/Mar/19 02:49,22/Mar/18 11:02,http.base-3.0.18,http.bridge-3.0.18,http.jetty-3.4.8,,http.base-4.0.0,http.bridge-4.0.0,http.jetty-4.0.0,,HTTP Service,,0,,"To support mulitple inner servlet contexts within the context provided by the container and separate sesssion for each of these contexts, currently the service id of the registered servlet context (ServletContextHelper) is used as part of the key to form the session attribute name.

If running in a clustered setup with some kind of session replication, the other nodes in the cluster might have different service ids for the same context. Therefore such an approach fails in this setup.

We should use the context name which is stable.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 22 11:02:45 UTC 2018,,,,,,0|i3rn2v:,9223372036854775807,,,,,,,,"22/Mar/18 11:02;cziegeler;Changed the R7 branch to use the name instead of the id in rev 1827475

Changed the master branch to use the name instead of the id in rev 1827476",,,,,,,,,,,,,,,
EventAdmin async threads should be named,FELIX-5813,13146601,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,volteanu,volteanu,20/Mar/18 17:26,07/May/18 03:45,14/Mar/19 02:49,21/Mar/18 08:34,eventadmin-1.4.10,,,,eventadmin-1.5.0,,,,Event Admin,,0,,"Similar to FELIX-5006, the threads created in the async thread pools, should also be named. 

The patch should be trivial:
{code}
diff --git a/eventadmin/impl/src/main/java/org/apache/felix/eventadmin/impl/tasks/DefaultThreadPool.java b/eventadmin/impl/src/main/java/org/apache/felix/eventadmin/impl/tasks/DefaultThreadPool.java
index c582fdf47..b71f51bdc 100644
--- a/eventadmin/impl/src/main/java/org/apache/felix/eventadmin/impl/tasks/DefaultThreadPool.java
+++ b/eventadmin/impl/src/main/java/org/apache/felix/eventadmin/impl/tasks/DefaultThreadPool.java
@@ -76,6 +76,7 @@ public class DefaultThreadPool
                     thread.setPriority( Thread.NORM_PRIORITY );
                     thread.setDaemon( true );

+                    thread.setName(""EventAdminAsyncThread #"" + threadCounter.getAndIncrement());
                     return thread;
                 }
             };
{code}",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-21 08:34:13.417,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Wed Mar 21 08:34:13 UTC 2018,,,,,,0|i3rjzz:,9223372036854775807,,,,,,,,"20/Mar/18 17:30;volteanu;[~cziegeler], I've seen you handled FELIX-5006, so when you have time, could you please have a look here also?","21/Mar/18 08:34;cziegeler;Thanks for your patch, [~volteanu]

It's applied in rev 1827394",,,,,,,,,,,,,,
External session id differs from internal session id,FELIX-5812,13146497,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,20/Mar/18 10:05,30/Apr/18 08:11,14/Mar/19 02:49,20/Mar/18 10:11,http.base-3.0.18,http.bridge-3.0.18,http.jetty-3.4.8,,http.base-4.0.0,http.bridge-4.0.0,http.jetty-4.0.0,,HTTP Service,,0,,"With the addition of the http whiteboard support, the session id returned is the session id from the container plus the internal context id. As the http whiteboard manager needs to manage different contexts within the context from the container, the session objects need to be different as well. Therefore the implementation is currently using a different id for each of these sessions.

However, this creates a difference between the internal session id and the one from the container and might lead to problems with session replication solutions or even creating links containing the session id as this session id is unknown to the container.

There is nothing in the specification preventing us from using the same session id for different sessions. As all of these are bound to the same container session with the same id, this should be fine and avoids the problems mentioned above.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 20 10:11:30 UTC 2018,,,,,,0|i3rjcv:,9223372036854775807,,,,,,,,"20/Mar/18 10:11;cziegeler;Fixed in the R7 branch with commit 1827288

and in the main branch with commit 1827289",,,,,,,,,,,,,,,
URLHandlers ContentHandler fails to load sun.net.www.content on Java 9,FELIX-5810,13145632,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,16/Mar/18 09:50,09/Jul/18 10:31,14/Mar/19 02:49,16/Mar/18 09:52,framework-5.6.10,,,,framework-6.0.0,,,,Framework,,0,,"We are affected by a change in content handler location in java9 (as is equinox: https://bugs.eclipse.org/bugs/show_bug.cgi?id=532255). 

We need to add ""sun.awt.www.content"" to the default search list.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 16 09:52:22 UTC 2018,,,,,,0|i3re0n:,9223372036854775807,,,,,,,,16/Mar/18 09:52;karlpauls;Done in r1826947.,,,,,,,,,,,,,,,
Do not hide the cause when a problem occurs in URLHandlersStreamHandlerProxy,FELIX-5807,13145015,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,gnt,gnt,gnt,14/Mar/18 12:40,09/Jul/18 10:31,14/Mar/19 02:49,14/Mar/18 13:10,,,,,framework-6.0.0,,,,Framework,,0,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-14 13:23:03.074,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 14 13:23:03 UTC 2018,,,,,,0|i3ra7r:,9223372036854775807,,,,,,,,"14/Mar/18 13:10;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
 M framework/src/main/java/org/apache/felix/framework/URLHandlersStreamHandlerProxy.java
Committed r1826710",14/Mar/18 13:23;karlpauls;I ported the patch to the R7 branch.,,,,,,,,,,,,,,
Fix bugs in Service Factory unregister callback handling,FELIX-5799,13143502,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,08/Mar/18 09:58,09/Jul/18 10:31,14/Mar/19 02:49,17/Mar/18 01:07,framework-5.6.10,,,,framework-6.0.0,,,,Framework,,0,,The R7 spec adds new service scopes that need to be implemented.,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Mar 17 01:07:49 UTC 2018,,,,,,0|i3r1bj:,9223372036854775807,,,,,,,,"17/Mar/18 01:07;karlpauls;I fixed the problem in r1827055. 

Basically, we only did catch Exception on callbacks to ungetService which could cause problems if it did throw an Error (or a Throwable I guess). 

Furthermore, we had a glitch in our handling of usage counts for protoype scoped factories. The count needs to be based on the services returned from the factory - i.e., if the factory returns the same service instance multiple times, we do need to use the same usage count object and only call back to the factory when the given object has been returned the same amount of times.",,,,,,,,,,,,,,,
Webconsole Memory Usage Plugin can cause deadlock,FELIX-5789,13138781,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,15/Feb/18 14:30,28/Feb/18 16:56,14/Mar/19 02:49,21/Feb/18 13:44,webconsole-memoryusage-plugin-1.0.6,,,,webconsole-memoryusage-plugin-1.0.8,,,,Web Console,,0,,"When the o.a.f.webconsole.plugins.memoryusage bundle is refreshed it is possible that it causes a deadlock because it has dynamic imports that are only triggered from inside a service factory callback that is synchronized.

That can cause the following deadlock situation:


{code:java}
""CM Configuration Updater (ManagedService Update: pid=[org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator])"" #9822 daemon prio=5 os_prio=31 tid=0x00007fe7494c1800 nid=0x9607 in Object.wait() [0x0000700008f4c000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at org.apache.felix.framework.Felix.acquireGlobalLock(Felix.java:5366)
	- locked <0x00000006c0261148> (a [Ljava.lang.Object;)
	at org.apache.felix.framework.StatefulResolver.resolve(StatefulResolver.java:528)
	at org.apache.felix.framework.BundleWiringImpl.searchDynamicImports(BundleWiringImpl.java:1717)
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1617)
	at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClass(BundleWiringImpl.java:2410)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2194)
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1607)
	at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.apache.felix.webconsole.plugins.memoryusage.internal.Activator$3.createObject(Activator.java:72)
	at org.apache.felix.webconsole.plugins.memoryusage.internal.Activator$AbstractServiceFactory.getService(Activator.java:121)
	- locked <0x000000077ce19440> (a org.apache.felix.webconsole.plugins.memoryusage.internal.Activator$3)
	at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:347)
	at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:247)
	at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:350)
	at org.apache.felix.framework.Felix.getService(Felix.java:3737)
	at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:470)
	at org.apache.felix.cm.impl.helper.BaseTracker.getRealService(BaseTracker.java:207)
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updateService(ManagedServiceTracker.java:102)
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.provideConfiguration(ManagedServiceTracker.java:85)
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.provide(ConfigurationManager.java:1097)
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.run(ConfigurationManager.java:1053)
	at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:138)
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:105)
	at java.lang.Thread.run(Thread.java:745)

""FelixFrameworkWiring"" #21 daemon prio=5 os_prio=31 tid=0x00007fe7450eb000 nid=0x6103 waiting for monitor entry [0x000070000790c000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at org.apache.felix.webconsole.plugins.memoryusage.internal.Activator$AbstractServiceFactory.getService(Activator.java:118)
	- waiting to lock <0x000000077ce19440> (a org.apache.felix.webconsole.plugins.memoryusage.internal.Activator$3)
	at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:347)
	at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:247)
	at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:350)
	at org.apache.felix.framework.Felix.getService(Felix.java:3737)
	at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:470)
	at org.apache.felix.metatype.internal.ManagedServiceTracker.addingService(ManagedServiceTracker.java:52)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:318)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)
	at org.apache.felix.metatype.internal.MetaTypeServiceImpl.<init>(MetaTypeServiceImpl.java:76)
	at org.apache.felix.metatype.internal.Activator.start(Activator.java:107)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
	at org.apache.felix.framework.Felix$RefreshHelper.restart(Felix.java:5097)
	at org.apache.felix.framework.Felix.refreshPackages(Felix.java:4291)
	at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:188)
	at java.lang.Thread.run(Thread.java:745)
{code}",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 21 13:44:28 UTC 2018,,,,,,0|i3q893:,9223372036854775807,,,,,,,,21/Feb/18 13:44;karlpauls;I fixed it in r1824965 by turning the dynamic imports into optional imports and removing the import on the log packages (and use reflection instead). ,,,,,,,,,,,,,,,
Wrong port 433 instread of 443 used as default port for https ,FELIX-5787,13137621,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,10/Feb/18 11:33,30/Apr/18 08:11,14/Mar/19 02:49,10/Feb/18 11:39,http.jetty-3.4.8,,,,http.jetty-4.0.0,,,,HTTP Service,,0,,"There is a typo in the metatype info for the default port - instead of 443 its 433

This only affects the metatype, so only if someone is generating an osgi configuration based on the metatype and not checking/changing the port, it will have an effect. This happens for example when using the web console",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 10 11:39:29 UTC 2018,,,,,,0|i3q13b:,9223372036854775807,,,,,,,,10/Feb/18 11:39;cziegeler;Fixed in the main branch (R6) in rev 1823742 and in the R7 branch in rev 1823743,,,,,,,,,,,,,,,
Http endpoint property must be set,FELIX-5781,13135324,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,01/Feb/18 06:35,30/Apr/18 08:11,14/Mar/19 02:49,01/Feb/18 06:37,http.bridge-3.0.18,,,,http.bridge-4.0.0,,,,HTTP Service,,0,,"According to the spec, the property osgi.http.endpoint must always be set, at least to the value ""/"". Currently - unless configured - this property is not set at all",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 01 06:37:17 UTC 2018,,,,,,0|i3pmxr:,9223372036854775807,,,,,,,,01/Feb/18 06:37;cziegeler;Fixed in rev 1822848,,,,,,,,,,,,,,,
Cycles in DS depending on bundle order,FELIX-5780,13133786,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,djencks,pkriens,cziegeler,25/Jan/18 18:16,13/Jul/18 09:51,14/Mar/19 02:49,26/Apr/18 05:20,,,,,scr-2.0.14,,,,Declarative Services (SCR),,0,,"Following test case:

       top.jar: Top @Reference volatile List<Bottom>
       bottom.jar: Bottom @Reference Top

In SCR 2.0.2:
      top.jar, bottom.jar -> OK, see trace
           new Top()
           Top.activate()
           new Bottom()
           Bottom.top=<top>
           Bottom.activate()
          Top.bottom +=<bottom>

      bottom.jar, top.jar -> FAILS but recovers
          [osgi.enroute.examples.concurrency.cycle.bottom.Bottom(1)] 
          Circular reference detected, getService returning null
          new Top()
          Top.activate()
          new Bottom()
          Bottom.top=<top>
          Bottom.activate()
          Top.bottom +=<bottom>

In SCR 2.0.4 and later

     top.jar,bottom.jar -> OK

           new Top()
           Top.activate()
           new Bottom()
           Bottom.top=<top>
           Bottom.activate()
           Top.bottom +=<bottom>

      bottom.jar, top.jar -> FAILS and DOES NOT RECOVER!
           new Bottom()
           new Top()
           Top.activate()
           new Bottom()

The Bottom component never gets added to Top. This is a very serious problem for reliable systems. I see this behaviour on 2.0.4, 2.0.6, and 2.0.8

----------
I've traced the cycle problem in 2.0.2. What happens is:
1) The Bottom configuration is started. There is no Top, so it is not satisfied
2) The Top configuration is started. It is satisfied since it can live with 0 Bottoms. 
3) The top configuration registers Top
4) The bottom configuration sees a Top and initiates Bottom
5) The bottom configuration gets Top (which is under construction)
6) The top configuration looks at its dependencies
7) The top configuration sees there is a Bottom now and tries to get it
8) The bottom factory is called again on the same thread and blows up

I am not sure what happens in 2.0.4 and later but it does look scary that Bottom is now never added to the Top.

---- Fix
I tried to do the activation in a background thread that but that failed. I think the cycle should be detected and and de Top should not get its dynamic dependencies after the activate method returned. But, just a guess, this is complicated stuff.

---- Workaround
The workaround is to not let Top register as a service but manually register it at the end of the activate method. Since the service is then already initialized and registered, the Bottom will not get activated until the Top is done.

There is a bnd workspace that consistently shows this output.
https://github.com/pkriens/felix.scr.cycle

I've added 4 log files. 2.0.4 and 2.0.8 seem to act very similar
",MacOS + Windows + Linux,,,,,,,,,,FELIX-5618,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-03 11:36:41.44,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jul 13 09:51:30 UTC 2018,,,,,,0|i3pdh3:,9223372036854775807,,,,,,,,03/Apr/18 11:36;rinswind;[~djencks] any progress on this one?,09/May/18 15:21;esinyakub;[~djencks] I am a bit confused here. Is the issue fixed in scr-2.0.14? [~pkriens] has said multiple times in FELIX-5618 that this version still contains the problem and there isn't any additional development on this one except the status and the fix version.,"13/Jul/18 07:43;mherchet;[~cziegeler]

In FELIX-5618 it says the Issue isnt fixed in scr-2.0.14 but this clone is fixed/closed.

We have a ""Circular Reference"" problem using 2.0.14 that seems to be related to this Issue so it indeed doesnt seem to be gone.","13/Jul/18 07:53;cziegeler;Thanks for the update, could you please test with the latest release 2.1.0? (I fear the problem is still in there but just to be sure)
And if the problem still exists, open a new issue? (unfortunately we can't reopen closed issues)","13/Jul/18 09:43;mherchet;Its hard to tell, cause it seems to depend on bundle order or smth. similar but I think the behavior didnt change between 2.0.14 and 2.1.0",13/Jul/18 09:51;mherchet;Opened a new Issue: FELIX-5887,,,,,,,,,,
Service properties not updated for lazy service when configuration changes,FELIX-5775,13132442,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,cziegeler,cziegeler,cziegeler,20/Jan/18 15:18,30/Apr/18 08:13,14/Mar/19 02:49,20/Jan/18 15:45,scr-2.0.14,,,,scr-2.1.0,,,,Declarative Services (SCR),,0,,"If a lazy component is registered as a service, and this component is taking configurations, then the service properties are not updated if the component instance itself has not been instantiated yet.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jan 20 15:45:19 UTC 2018,,,,,,0|i3p573:,9223372036854775807,,,,,,,,"20/Jan/18 15:19;cziegeler;The code currently uses the component context (impl) to get the service registration for updating the properties. However, if the component is not instantiated yet, there is no component context. Therefore getting the service registration fails and the service properties are not updated.","20/Jan/18 15:45;cziegeler;Fixed in the R7 branch with rev 1821750 in the R6 with rev 1821754

Unfortunately with this change, the behaviour for components returning service properties in activate change as the MutablePropertiesTest#test_mutable_properties_consumer fails. With this change, the service properties are updated earlier now which I guess makes that test fail as the service properties returned by activate happen later. I've no clear idea how this work, so I leave the old behaviour (bug) for components in the proprietary felix namespace as is.",,,,,,,,,,,,,,
Metatype generation via bnd plugin creates incorrect file names,FELIX-5771,13129892,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,rombert,rombert,10/Jan/18 15:59,11/Jan/18 07:05,14/Mar/19 02:49,11/Jan/18 07:05,maven-scr-plugin-1.25.0,scr ant task 1.17.0,scr bnd plugin 1.8.0,scr generator 1.17.0,maven-scr-plugin-1.26.0,scr ant task 1.18.0,scr bnd plugin 1.9.0,scr generator 1.18.0,SCR Tooling,,0,,"When using the scr bnd plugin to generate SCR descriptors and an `l10n/metatype.properties` file is found, the name of the metatype.properties file is incorrect.

The error I'm getting is {noformat}[ERROR] Manifest org.apache.jackrabbit:oak-segment-tar:bundle:1.10-SNAPSHOT : Got unexpected exception while analyzing:org.apache.felix.scrplugin.SCRDescriptorException: metatype properties file must be stored outside of OSGI-INF/metatype, move it to OSGI-INF/l10n{noformat}

Note the missing '/' between l10n and the file name.

I've traced it down to a problem in the scr.generator project, I'll attach a trivial patch which makes it work.",,,,,,,,,,OAK-7137,,,10/Jan/18 15:59;rombert;FELIX-5771.patch;https://issues.apache.org/jira/secure/attachment/12905494/FELIX-5771.patch,,,1.0,,,,,,,,,,,,,,,,,,,2018-01-11 07:05:03.777,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Thu Jan 11 07:05:03 UTC 2018,,,,,,0|i3oqwv:,9223372036854775807,,,,,,,,"11/Jan/18 07:05;cziegeler;Thanks for your patch, Robert. it's applied",,,,,,,,,,,,,,,
SCR should not bind prototype_required reference to bundle scope service,FELIX-5769,13129267,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,nbartlett,nbartlett,08/Jan/18 15:11,30/Apr/18 08:13,14/Mar/19 02:49,09/Jan/18 10:47,scr-2.0.14,,,,scr-2.1.0,,,,Declarative Services (SCR),,0,,"I have a consumer component that refers to a service using prototype_required service scope:

{code:java}
@Component
public class ConsumerComponent {
    @Reference(scope = ReferenceScope.PROTOTYPE_REQUIRED)
    Runnable runnable;
}
{code}

And another component that provides the correct service type BUT uses bundle scope:

{code:java}
@Component(scope = ServiceScope.BUNDLE)
public class ProviderComponent implements Runnable {
    @Override
    public void run() {}
}
{code}

According to the OSGi R6 Compendium spec, section 112.3.5, the reference should not bind to the service because ""for a bound service of a reference with prototype required reference scope, only services registered with prototype service scope can be considered as target services ... A service that does not use prototype service scope cannot be used as a bound service for a reference with prototype required reference scope since the service cannot provide a distinct service object for each component instance"".

However in SCR 2.0.14, the consumer component is in fact bound to the service as shown below.

I have used factory config to create three instances of the consumer component. All three are satisfied and active:

{noformat}
 [   7]   com.effectiveosgi.ConsumerComponent  enabled
    [   5] [active      ] com.effectiveosgi.ConsumerComponent.f89094ca-85d6-4f22-ae73-198e6977ba8e (com.effectiveosgi.ConsumerComponent )
    [   6] [active      ] com.effectiveosgi.ConsumerComponent.e2cb08d0-4b4d-48c8-b6cc-248bc1bfdc92 (com.effectiveosgi.ConsumerComponent )
    [   7] [active      ] com.effectiveosgi.ConsumerComponent.9b7e9c7e-be11-442e-b9c7-2c6e9ea70544 (com.effectiveosgi.ConsumerComponent )
{noformat}

The scr:info command shows that all three component instances are bound to the same service, and that is is bundle scope:

{noformat}
g! scr:info com.effectiveosgi.ConsumerComponent
*** Bundle: example (7)
Component Description:
  Name: com.effectiveosgi.ConsumerComponent
  Implementation Class: com.effectiveosgi.ConsumerComponent
  Default State: enabled
  Activation: immediate
  Configuration Policy: optional
  Activate Method: activate
  Deactivate Method: deactivate
  Modified Method: -
  Configuration Pid: [com.effectiveosgi.ConsumerComponent]
  Reference: runnable
    Interface Name: java.lang.Runnable
    Cardinality: 1..1
    Policy: static
    Policy option: reluctant
    Reference Scope: prototype_required
  Component Description Properties:
  Component Configuration:
    ComponentId: 5
    State: active      
    SatisfiedReference: runnable
      Target: null
      Bound to:        35
      Reference Properties:
          component.id = 8
          component.name = com.effectiveosgi.ProviderComponent
          objectClass = [java.lang.Runnable]
          service.bundleid = 7
          service.id = 35
          service.scope = bundle
    Component Configuration Properties:
        _com.effectiveosgi.rt.config.filePath = /Users/neil.bartlett/Projects/eosgi-runtime/_assembly/load/http-config.yaml
        _com.effectiveosgi.rt.config.identity = tertiary
        component.id = 5
        component.name = com.effectiveosgi.ConsumerComponent
        org.osgi.service.http.port = 8081
        service.factoryPid = com.effectiveosgi.ConsumerComponent
        service.pid = com.effectiveosgi.ConsumerComponent.f89094ca-85d6-4f22-ae73-198e6977ba8e
  Component Configuration:
    ComponentId: 6
    State: active      
    SatisfiedReference: runnable
      Target: null
      Bound to:        35
      Reference Properties:
          component.id = 8
          component.name = com.effectiveosgi.ProviderComponent
          objectClass = [java.lang.Runnable]
          service.bundleid = 7
          service.id = 35
          service.scope = bundle
    Component Configuration Properties:
        _com.effectiveosgi.rt.config.filePath = /Users/neil.bartlett/Projects/eosgi-runtime/_assembly/load/http-config.yaml
        _com.effectiveosgi.rt.config.identity = secondary
        component.id = 6
        component.name = com.effectiveosgi.ConsumerComponent
        org.osgi.service.http.port = 8081
        service.factoryPid = com.effectiveosgi.ConsumerComponent
        service.pid = com.effectiveosgi.ConsumerComponent.e2cb08d0-4b4d-48c8-b6cc-248bc1bfdc92
  Component Configuration:
    ComponentId: 7
    State: active      
    SatisfiedReference: runnable
      Target: null
      Bound to:        35
      Reference Properties:
          component.id = 8
          component.name = com.effectiveosgi.ProviderComponent
          objectClass = [java.lang.Runnable]
          service.bundleid = 7
          service.id = 35
          service.scope = bundle
    Component Configuration Properties:
        _com.effectiveosgi.rt.config.filePath = /Users/neil.bartlett/Projects/eosgi-runtime/_assembly/load/http-config.yaml
        _com.effectiveosgi.rt.config.identity = primary
        component.id = 7
        component.name = com.effectiveosgi.ConsumerComponent
        org.osgi.service.http.port = 8080
        service.factoryPid = com.effectiveosgi.ConsumerComponent
        service.pid = com.effectiveosgi.ConsumerComponent.9b7e9c7e-be11-442e-b9c7-2c6e9ea70544
{noformat}",,,,,,,,,,,,,09/Jan/18 08:34;nbartlett;scr-debug.log;https://issues.apache.org/jira/secure/attachment/12905239/scr-debug.log,,,1.0,,,,,,,,,,,,,,,,,,,2018-01-09 09:51:57.348,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 09 10:47:03 UTC 2018,,,,,,0|i3on27:,9223372036854775807,,,,,,,,09/Jan/18 08:34;nbartlett;[~cziegeler] asked me to turn on SCR debug logging. Log attached. NB this is the output of the `log debug` command so is in reverse chronological order.,"09/Jan/18 09:51;cziegeler;The SCR service tracker (which is a modified version of the framework service tracker) is using three filters: one to do the initial query against the service registry, one to add a service listeners and finally a filter to filter the events send to that listener.
The initial filter is an and combination of the listener filter and the event filter. The listener filter uses only the service interface for filtering while the event filter is used to filter based on a provided target and the prototype required option.
It seems, right now this event filter is not calculated correctly and only works if a target is provided in addition. If no target is provided, it's always empty","09/Jan/18 09:56;nbartlett;Confirmed: SCR works correctly according to the spec IF the reference has a target attribute.

{noformat}
2018.01.09 09:27:29 DEBUG - Bundle: example - [com.effectiveosgi.ConsumerComponent(3)] New service tracker for runnable, initial active: false, previous references: {}, classFilter: (objectClass=java.lang.Runnable), eventFilter (&(service.scope=prototype)(language=*)), initialReferenceFilter (&(objectClass=java.lang.Runnable)(service.scope=prototype)(language=*))
{noformat}",09/Jan/18 10:04;cziegeler;I've committed a potential fix in rev 1820632 (2.0.x branch) and rev 1820633 (r7 branch),"09/Jan/18 10:37;nbartlett;Thanks Carsten. I've tested the 2.0.x version and it works correctly, i.e. the references remain unbound and I see this in the log:

{noformat}
2018.01.09 10:36:04 DEBUG - Bundle: example - [com.effectiveosgi.ConsumerComponent(3)] New service tracker for runnable, initial active: false, previous references: {}, classFilter: (objectClass=java.lang.Runnable), eventFilter (service.scope=prototype), initialReferenceFilter (&(objectClass=java.lang.Runnable)(service.scope=prototype))
{noformat}

",09/Jan/18 10:47;cziegeler;Thanks for verifying,,,,,,,,,,
DM Lambda stop callback not being called,FELIX-5768,13129126,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Blocker,Fixed,pderop,pderop,pderop,07/Jan/18 23:14,22/Oct/18 09:01,14/Mar/19 02:49,07/Jan/18 23:24,org.apache.felix.dependencymanager-r8,,,,org.apache.felix.dependencymanager-r13,,,,Dependency Manager Lambda,,0,,"It has been reported from the felix users mailing list an issue where a component defined with dm-lambda API is never called in its ""stop"" callback when the bundle is stopped.

indeed, the dm-lambda DependencyManagerActivator.stop method has a bug and does not clear the dependency manager when the bundle is stopped: the current code of the DependencyManagerActivator.stop method is this:

{code}
    public void stop(BundleContext context) throws Exception {
        destroy();
    }
{code}

and of course, the manager must be cleared, like it is the case with the original DependencyActivatorBase.stop method:

{code}
    public void stop(BundleContext context) throws Exception {
        destroy();
        m_manager.clear();
    }
{code}

it is too bad that no tests were testing this so basic behavior, so I will first add it soon.
",,,,,,,,,,,,,07/Jan/18 23:42;pderop;org.apache.felix.dependencymanager.lambda-1.1.2.jar;https://issues.apache.org/jira/secure/attachment/12905001/org.apache.felix.dependencymanager.lambda-1.1.2.jar,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jan 07 23:42:55 UTC 2018,,,,,,0|i3om7b:,9223372036854775807,,,,,,,,"07/Jan/18 23:22;pderop;Added the following testcase in revision 1820507, which reproduces the issue.

org.apache.felix.dm.lambda.itest.StopCallbackTest",07/Jan/18 23:24;pderop;Applied a fix in revision 1820508: the DependencyManagerActivator.stop method is now properly clearing the manager when the bundle is stopped.,07/Jan/18 23:42;pderop;Attached to this issue the org.apache.felix.dependencymanager.lambda-1.1.2.jar bundle which contains the fix for this issue.,,,,,,,,,,,,,
StackOverflowError thrown during URL construction,FELIX-5759,13123265,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,karlpauls,kamali.ali,kamali.ali,06/Dec/17 18:27,09/Jul/18 10:31,14/Mar/19 02:49,07/Dec/17 23:29,framework-5.6.10,,,,framework-6.0.0,,,,,,0,,"I get the following callstack resulting in a stack overflow error when building a URL object:
{code}
[info]   at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:401)
[info]   at java.net.URL.<init>(URL.java:622)
[info]   at java.net.URL.<init>(URL.java:490)
[info]   at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:401)
[info]   at java.net.URL.<init>(URL.java:622)
[info]   at java.net.URL.<init>(URL.java:490)
[info]   at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:401)
[info]   at java.net.URL.<init>(URL.java:622)
[info]   at java.net.URL.<init>(URL.java:490)
[info]   at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:401)
[info]   at java.net.URL.<init>(URL.java:622)
[info]   at java.net.URL.<init>(URL.java:490)
[info]   at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:401)
[info]   at java.net.URL.<init>(URL.java:622)
[info]   at java.net.URL.<init>(URL.java:490)
[info]   at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:401)
[info]   at java.net.URL.<init>(URL.java:622)
[info]   at java.net.URL.<init>(URL.java:490)
[info]   at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:401)
{code}

Using org.apache.felix.framework 4.4.1 and Java 1.8.0_111 running on Ubuntu.

We started getting this exception after upgrading to Spark 2.2.0, after some investigation we realized Spark 2.2.0 registers its own {{URLStreamHandlerFactory}}:
{code}
package org.apache.spark.sql.internal

object SharedState extends Logging {
  try {
    URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory())
  } catch {
    case e: Error =>
      logWarning(""URL.setURLStreamHandlerFactory failed to set FsUrlStreamHandlerFactory"")
  }
...
{code}

Looks like the bug is related to line 128 in {{URLHandlers.java}}:
{code}
            URLStreamHandler handler = getBuiltInStreamHandler(protocol, factory);
            if (handler != null)
            {
                URL url = new URL(protocol, null, -1, """", handler);
                m_handlerToURL.put(handler, url);
            }
{code}
This code assumes there is a unique mapping from handlers to protocols, which doesn't seem to be a valid assumption, at least not with Spark. Spark URL handler factory is returning the same handler instance for both {{file}} and {{ftp}} protocols. When {{URLHandlers}} is initializing it first tries to register a handler for {{file}} and then for {{ftp}}, but because the factory returns the same handler we end up replacing the URL object we have for {{file}} with {{ftp}} in {{m_handlerToURL}}.

Later when a URL is being constructed it calls {{createURLStreamHandler}} from URLHandlers, at the end of this method:
{code}
        // If built-in content handler, then create a proxy handler.
        return addToStreamCache(protocol,
            new URLHandlersStreamHandlerProxy(protocol, m_secureAction,
                handler, (URL) m_handlerToURL.get(handler)));
{code}

Note that it's trying to use {{m_handlerToURL}} to look up the protocol for the handler, and in case of {{file}} instead of returning a URL with protocol set to {{file}} it returns a URL with protocol set to {{ftp}}, so {{URLHandlersStreamHandlerProxy}} gets constructed with {{m_builtInURL}} set to {{ftp}}.

Later in URL.java we have this code:
{code}
            if ((context != null) && ((newProtocol == null) ||
                            newProtocol.equalsIgnoreCase(context.protocol))) {
                // inherit the protocol handler from the context
                // if not specified to the constructor
                if (handler == null) {
                    handler = context.handler;
                }
{code}
This code only uses the handler if protocols match, but in this case protocols don't match because it's expected to be {{file}} but we receive {{ftp}} that comes from {{m_builtInURL}}, and the code falls back to asking the factory to create a new handler:
{code}
            if (handler == null &&
                (handler = getURLStreamHandler(protocol)) == null) {
                throw new MalformedURLException(""unknown protocol: ""+protocol);
            }
{code}

The factory returns a handler with protocol set to {{ftp}} again and we get stuck in a loop.

Looking at the newest Felix code looks like the assumption of having a unique handler per protocol is still there, so I believe this bug still exists in the newest Felix as well.

To reproduce this bug before starting a bundle you only need to register a factory that returns the same handler instance for {{file}} and {{ftp}}.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-07 23:29:28.389,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 23:29:28 UTC 2017,,,,,,0|i3nm73:,9223372036854775807,,,,,,,,"07/Dec/17 23:29;karlpauls;[~kamali.ali], yes, that seems to be an issue and it is still present in the current version of Felix. I commited a fix for this in r1817441. 

Could you please test it with the current trunk (i.e., framework-5.7.0-SNAPSHOT) and close this issue if it works for you or reopen when it doesn't?

Thanks!",,,,,,,,,,,,,,,
error in default.properties contained in jar org.apache.felix.framework-5.6.10.jar,FELIX-5754,13122376,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,karlpauls,tom@phinneyridge.com,tom@phinneyridge.com,02/Dec/17 19:40,09/Jul/18 10:31,14/Mar/19 02:49,07/Dec/17 23:24,framework-5.6.10,,,,framework-6.0.0,,,,Framework,,0,,"I'll be describing the issue, explain where the problem occurs and why, and a possible fix that I have verified. 

The default.properties file contained in jar: org.apache.felix.framework-5.6.10.jar needs the line:
org.osgi.util..tracker; version=1.5.1 \
changed to:
org.osgi.util..tracker; version=1.5.1, \

(a comma entered after the version number.)

Without the comma added, the class: org.osgi.framework.Version
throws an unrecoverable exception when the version is parsed.
I tracked the issue down and found out that the string value for minor part of the version number which should have been the string ""1"" was instead having the value ""1      #"".
The Interger.parse(""1    #"") is what's throwing the exception (since the # character is not numeric).  If you look deeper at the default.properties file you see it contains the following:

 org.osgi.util.tracker; version=1.5.1 \
 ${jre-${java.specification.version}} \
 ${jre-${felix.detect.jpms}} \

#
# Java platform package export properties.

I don't know what the ${jre-$  entries are for, but they seem to have been evaluated to the empty string.  So that's how the minor version subpart string gets to be ""1     #"" instead of ""1""

I repackage the jar with that one change in  place and Felix starts up correctly.

Note: Another possible solution is to eliminate the continuation character ""\"" at the end of the
version since it appears to be last entry.  I just don't understand what the motivation for the {jre-$ entries are so I don't want to claim my solution is necessarily the right solution for all circumstances, since another possible solution would be to eliminate the  continuation character ""\"" at the end of the line:  ""${jre-${felix.detect.jpms}} \"" .

What's makes the issue critical is that the 5.6.10 release will not work on Android without this change, and it's a bit tricky and time consuming to discover the cause.  ( I'm not sure why this isn't an issue for any environment(it might be!), but the strongest claim I can make is that it is an issue in the android environment.

And lastly just to be clear, the exception is thrown when the Felix object is first created.  Here's
a snippet of what that code looks like:

        String apkFileDir = ConsoleActivity.consoleActivity.getFilesDir().toString();
        config.put(""osgi.signature.support.verify"", ""false""); // signed jar checking disabled for development
        config.put( .....


        Felix f = new Felix(config);




",android os version 26,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-03 21:40:00.803,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 23:24:14 UTC 2017,,,,,,0|i3ngs7:,9223372036854775807,,,,,,,,"03/Dec/17 21:40;karlpauls;[~tom@phinneyridge.com] - I agree that this last continuation seems to be a mistake. Sorry about that. However, this seems to indicate that we can't find a matching jre package list. Could you tell me what the ""java.specification.version"" system property resolves to on android?

Furthermore, as a quick fix (that doesn't require to hack the felix jar) you should be able to override the ""org.osgi.framework.system.packages"" by setting it as a system or framework property when you start felix.","07/Dec/17 23:24;karlpauls;I removed the continuation in r1817440. [~tom@phinneyridge.com], please try it with the current trunk (i.e., framework-5.7.0-SNAPSHOT) and see if that resolves the issue for you. If so, please close this issue - otherwise, please reopen.

Thanks for reporting!",,,,,,,,,,,,,,
Wrong require capability for http whiteboard,FELIX-5753,13121219,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,28/Nov/17 08:26,01/Dec/17 14:41,14/Mar/19 02:49,28/Nov/17 08:27,http.sslfilter-1.2.2,,,,http.sslfilter-1.2.4,,,,HTTP Service,,0,,"The require capability should not use a fixed version but a version range, otherwise it will not resolve once we update the http implementation",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Nov 28 08:27:33 UTC 2017,,,,,,0|i3n9o7:,9223372036854775807,,,,,,,,28/Nov/17 08:27;cziegeler;Fixed in rev 1816521,,,,,,,,,,,,,,,
Empty collections should be allowed as property value,FELIX-5745,13118447,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,15/Nov/17 05:02,30/Apr/18 08:04,14/Mar/19 02:49,15/Nov/17 05:03,configadmin-1.8.16,,,,configadmin-1.9.0,,,,Configuration Admin,,0,,"Currently a property value of an empty collection is not allowed and an IllegalArgumentException is thrown. However, there is nothing in the spec that says such value is not allowed.
Therefore we should remove this check",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 15 05:03:02 UTC 2017,,,,,,0|i3mslr:,9223372036854775807,,,,,,,,15/Nov/17 05:03;cziegeler;Removed in rev 1815288,,,,,,,,,,,,,,,
Update to jetty 9.3.22.v20171030,FELIX-5740,13115626,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,cziegeler,cziegeler,cziegeler,02/Nov/17 13:28,05/Nov/17 11:27,14/Mar/19 02:49,02/Nov/17 13:28,,,,,http.jetty-3.4.6,,,,HTTP Service,,0,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 13:28:39 UTC 2017,,,,,,0|i3mb8v:,9223372036854775807,,,,,,,,02/Nov/17 13:28;cziegeler;Updated in rev 1814073,,,,,,,,,,,,,,,
Strange behaviour with Lazy-ActivationPolicy and autostart,FELIX-5739,13115562,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,mherchet,mherchet,02/Nov/17 08:35,08/Jan/18 14:47,14/Mar/19 02:49,08/Jan/18 14:47,scr-2.0.10,,,,scr-2.0.14,,,,Declarative Services (SCR),,0,,"Iam using felix.scr with Equinox (e4 application)

Scenario:
Bundle A has Bundle-ActivationPolicy: lazy
Bundle A has startLevel=4
Bundle A provides Service S1 via ComponentDefinition
Bundle B listens for REGISTER-Event of S1 and retrieves it via BundleContext.getService(serviceEvent.getServiceReference())

When Bundle A has autostart = false everything behaves as expected:
* Equinox-ModuleContainer increases actual level to 4
* Equinox-ModuleContainer starts lazyOnly-Bundles with StartLevel 4
* Bundle A BundleState changes to STARTING
* felix.scr reacts to BundleEvent for STARTING of Bundle A, and parses the ComponentDefinitions
* felix.scr registers a ServiceFactory for S1
* Bundle B reacts to ServiceEvent for REGISTER of S1 and calls BundleContext.getService(serviceEvent.getServiceReference())
* The ServiceFactory for S1 loads Class of S1
* The responsible Equinox-BundleClassLoader starts Bundle A
* Activator#start of Bundle A is called
* Instance of S1 is created
* S1.activate() is called

When Bundle A has autostart = true something (in my opinion) weird happens:
* Equinox-ModuleContainer increases actual level to 4
* Equinox-ModuleContainer starts lazyOnly-Bundles with StartLevel 4
* Bundle A BundleState changes to STARTING
* felix.scr reacts to BundleEvent for STARTING of Bundle A, and parses the ComponentDefinitions
* felix.scr registers a ServiceFactory for S1
* Bundle B reacts to ServiceEvent for REGISTER of S1 and calls BundleContext.getService(serviceEvent.getServiceReference())
* The ServiceFactory for S1 loads Class of S1
* The responsible Equinox-BundleClassLoader (!) DOESNT start Bundle A
* Instance of S1 is created
* S1.activate() is called
* Equinox-ModuleContainer starts autostartedOnly-Bundles with StartLevel 4 (module#start returns fast for Modules that are not autostarted)
* Activator#start of Bundle A is called
* Bundle A BundleState changes to ACTIVE
In this case we have a Lazy-BundleA and its services #activate-Method is called before its Activator#start... should this even be possible?
I'm not sure why one would even use LazyActivationPolicy in combination with autostart but I'm pretty sure it didnt behave this way before we updated to eclipse-oxygen and felix.scr","felix.scr 2.0.10
eclipse 4.7.0
equinox
windows",,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-08 16:06:55.684,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 09 10:30:43 UTC 2017,,,,,,0|i3mauv:,9223372036854775807,,,,,,,,"02/Nov/17 13:06;mherchet;I have to add that the ""right"" behaviour with autostart=false scenario doesnt seem to be reliable:
When I start it from the Eclipse-Workspace with a launch-config it may work 10 times... then I change the launch-config a bit to try some things, revert the launch-config back to the original state and it doesnt work anymore (behaves like the autostart=true scenario). When I change some things in the launch-config again, start and end the application, change the launch-config back to its original state and start it again it may work again.

Looks like it depends on some kind of order in the launch-config or something like that... ","08/Nov/17 16:06;tjwatson;If there is an ordering issue in the case where the activation policy is actually configured to be used then it seems like that would be an Equinox issue.  I suggest you open a bug with Equinox if that is the case.  But for your consistently failing case, it sounds like the bundle is not be marked to use the activation policy at all.  The Felix DS method:

org.apache.felix.scr.impl.ComponentRegistry.isBundleActive(Bundle)

This method should check org.osgi.framework.startlevel.BundleStartLevel.isActivationPolicyUsed() before returning true in the STARTING case.  If the activation policy is not set to be used then even though the bundle says its activation policy is 'lazy' the framework will behave as though the bundle does not and it will treat it as an eagerly activated bundle.  In this case it will not activate it automatically on first class load.","09/Nov/17 07:49;cziegeler;Thanks [~tjwatson]. Minor correction :) ComponentRegistry.isBundleActive(Bundle) is only used by the ScrInfo command, the problematic code is in the AbstractExtender from the felix.utils bundle. It's suffering from the same problem though","09/Nov/17 10:22;cziegeler;I've added the additional check in rev 1814713 (and rev 1814712 for the R7 branch).
[~mherchet] Could you maybe give this version a try and report back?",09/Nov/17 10:30;mherchet;Will have the chance to work on the related project next week and give some feedback asap.,,,,,,,,,,,
EventAdmin IgnoreTopic config. property doesn't support wildcards,FELIX-5738,13115309,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,jassuncao,jassuncao,01/Nov/17 09:12,07/May/18 03:45,14/Mar/19 02:49,16/Apr/18 12:59,,,,,eventadmin-1.5.0,,,,Event Admin,,0,,"EventAdminImpl is using package name matchers to implement IgnoreTopic, namely  PackageMatcher and SubPackageMatcher. These won't work when org.apache.felix.eventadmin.IgnoreTopic is set with a wildcard, such as org/osgi/service/log/*
",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-21 08:38:15.941,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 12:59:27 UTC 2018,,,,,,0|i3m9an:,9223372036854775807,,,,,,,,"21/Mar/18 08:38;cziegeler;[~jassuncao] The configuration of this property is slightly different than configuration topics for an event handler. From the metatype description: ""If a single value ends with a dot, all topics in exactly this package are ignored. f a single value ends with a star, all topics in this package and all sub packages are ignored.

So in your case you need to specify org/osgi/service/log* - without the slash","13/Apr/18 09:39;graben;[~cziegeler] that's not correct if using org/osgi/service/log* you internally get SubPackageMatcher with following packageName ""org/osgi/service/log."" which does not match with e.g. ""org/osgi/service/log/LogEntry/LOG_INFO"" because of the added dot at the end.

IMHO this is still an open issue.","16/Apr/18 12:57;cziegeler;[~graben] Thanks, you're right of course","16/Apr/18 12:59;cziegeler;I've moved the matchers to a separate class, fixed the above mentioned issue and added some test cases.

Rev 1829267",,,,,,,,,,,,
forward custom properties in a configuration to HttpRuntimeService,FELIX-5736,13113035,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,jalbert,jalbert,30/Oct/17 14:04,05/Nov/17 11:27,14/Mar/19 02:49,02/Nov/17 11:15,http.jetty-3.4.4,,,,http.jetty-3.4.6,,,,HTTP Service,,0,,"In order to use the whiteboard target in a meaningful manner, it would make sense, to set custom properties in a configuration to the HttpRuntimeService as well. 

This can be achieved by forwarding all properties, that are no known configuration properties or by defining some kind of prefix, similar to the HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_INIT_PARAM_PREFIX. The prefix solution should then be added to the runtime properties without the prefix.
",,,,,,,,,,,,,01/Nov/17 14:22;jalbert;FELIX-5736.patch;https://issues.apache.org/jira/secure/attachment/12895205/FELIX-5736.patch,,,1.0,,,,,,,,,,,,,,,,,,,2017-11-02 09:30:17.615,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 11:15:52 UTC 2017,,,,,,0|i3lv9r:,9223372036854775807,,,,,,,,"01/Nov/17 14:35;jalbert;Implementation of a possible solution.

- moved JettyConfig constatns to externally available JettyConfigConstants (might be something fo a extra ticket/patch)
- added JettyConfigConstants.FELIX_CUSTOM_HTTP_RUNTIME_PROPERTY_PREFIX = ""org.apache.felix.http.runtime.prefix.""
- properties with this prefix will be forwarded without the prefix part to the Whiteboard Runtime and can be filtered upon","02/Nov/17 09:30;cziegeler;Thanks for the patch [~jalbert]. I'Ve applied a slightly modified version in rev 1814050 and rev 1814051 (R7 branch).
I didn't apply the move of the constants. This is in order to keep the changes minimal as we have to maintain two branches atm (R6 + R7)
I changed the name of the property to ""org.apache.felix.http.runtime.init."" as this is more inline with the other props for similar cases like ""servlet.init"", ""filter.init"" etc.","02/Nov/17 10:36;jalbert;[~cziegeler] This is fine with me. will the rev you mentioned be available via maven central? If not, where can I find the artifacts?","02/Nov/17 11:15;cziegeler;[~jalbert] I've deployed the snapshot now to the Apche snapshot repository.
I think it makes sense to cut a 3.4.6 release",,,,,,,,,,,,
The plugin generates wrong service requirements when using a jndi name in jpa,FELIX-5734,13112606,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,27/Oct/17 13:58,18/Dec/17 16:30,14/Mar/19 02:49,27/Oct/17 15:20,maven-bundle-plugin-3.3.0,,,,maven-bundle-plugin-3.4.0,,,,Maven Bundle Plugin,,0,,"Budle-maven-plugin generate incorrect Require-Capability from persistance.xml if is used the following syntax:  
{code:xml|title=persistence.xml}
<persistence-unit>
    <jta-data-source>osgi:service/jdbc/h2DS</jta-data-source>
</persistence-unit>
{code}

{code:title=MANIFEST.MF}
Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.8))""
 ,osgi.service;effective:=active;objectClass=jdbc;filter:=h2DS,osgi.ex
 tender;osgi.extender=""aries.jpa"",osgi.service;effective:=active;objec
 tClass=""javax.transaction.TransactionManager""
{code}
",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 27 15:20:45 UTC 2017,,,,,,0|i3lsmv:,9223372036854775807,,,,,,,,"27/Oct/17 15:20;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	A	tools/maven-bundle-plugin/src/test/java/org/apache/felix/bundleplugin/JpaPluginTest.java
	M	tools/maven-bundle-plugin/src/main/resources/org/apache/felix/bundleplugin/jpa.xsl
Committed r1813543
",,,,,,,,,,,,,,,
Different separators in localization attribute,FELIX-5730,13112047,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,reizy,reizy,25/Oct/17 18:14,15/Jan/18 05:54,14/Mar/19 02:49,08/Nov/17 13:44,maven-scr-plugin-1.25.0,scr ant task 1.17.0,scr bnd plugin 1.8.0,scr generator 1.17.0,maven-scr-plugin-1.26.0,scr ant task 1.18.0,scr bnd plugin 1.9.0,scr generator 1.18.0,SCR Tooling,,0,,"maven-scr-plugin 1.25.0 generates:
<metatype:MetaData xmlns:metatype=""http://www.osgi.org/xmlns/metatype/v1.0.0"" localization=""OSGI-INF\l10n/com.Test"">

Looks like the reason:

{quote}public class MetaTypeIO {
 private static final String NEW_LOCATION = ""OSGI-INF"" + File.separatorChar + ""l10n"";
...
 metatypeLocation = NEW_LOCATION + ""/"" + baseName;{quote}

",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-08 13:44:19.365,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 08 13:44:19 UTC 2017,,,,,,0|i3lp73:,9223372036854775807,,,,,,,,08/Nov/17 13:44;cziegeler;Fixed in rev 1814580,,,,,,,,,,,,,,,
NoSuchFieldError when @Reference referenceInterface type different than field type,FELIX-5729,13111916,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,cziegeler,ioancris,ioancris,25/Oct/17 09:24,15/Jan/18 05:55,14/Mar/19 02:49,08/Nov/17 15:19,,,,,maven-scr-plugin-1.26.0,scr ant task 1.18.0,scr bnd plugin 1.9.0,scr generator 1.18.0,SCR Tooling,,0,,"{{NoSuchFieldError}} is thrown when injecting dependencies for a component {{Foo}} that has a field {{bar}} of type {{T1}} with {{@Reference(referenceInterface = T2.class)}} and {{T2}} implements {{T1}}.
This error is caused by the bind/unbind methods generated by maven-scr-plugin which have bytecode generated for get/set field {{bar}} operations with field descriptor of type {{T2}} instead of {{T1}}.

Bytecode:
{code:java}
protected void bindBar(T2);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #95                 // Field bar:LT2;
       5: return

  protected void unbindBar(T2);
    Code:
       0: aload_0
       1: getfield      #95                 // Field bar:LT2;
       4: aload_1
       5: if_acmpne     13
       8: aload_0
       9: aconst_null
      10: putfield      #95                 // Field bar:LT2;
{code}

StackTrace:
{noformat}
The bindBar method has thrown an exception (java.lang.NoSuchFieldError: bar)
java.lang.NoSuchFieldError: bar
	at Foo.bindBar(Foo.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.felix.scr.impl.inject.BaseMethod.invokeMethod(BaseMethod.java:224)
	at org.apache.felix.scr.impl.inject.BaseMethod.access$500(BaseMethod.java:39)
	at org.apache.felix.scr.impl.inject.BaseMethod$Resolved.invoke(BaseMethod.java:617)
	at org.apache.felix.scr.impl.inject.BaseMethod.invoke(BaseMethod.java:501)
	at org.apache.felix.scr.impl.inject.BindMethod.invoke(BindMethod.java:655)
	at org.apache.felix.scr.impl.manager.DependencyManager.doInvokeBindMethod(DependencyManager.java:1722)
	at org.apache.felix.scr.impl.manager.DependencyManager.open(DependencyManager.java:1556)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.createImplementationObject(SingleComponentManager.java:261)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.createComponent(SingleComponentManager.java:109)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.getService(SingleComponentManager.java:906)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.getServiceInternal(SingleComponentManager.java:879)
	at org.apache.felix.scr.impl.manager.SingleComponentManager.getService(SingleComponentManager.java:823)
{noformat}",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-08 15:19:35.614,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 08 15:19:35 UTC 2017,,,,,,0|i3loe7:,9223372036854775807,,,,,,,,08/Nov/17 15:19;cziegeler;Fixed in rev 1814588,,,,,,,,,,,,,,,
Dead Lock in DM,FELIX-5716,13110136,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,pderop,pderop,pderop,17/Oct/17 21:48,22/Oct/18 09:01,14/Mar/19 02:49,29/Mar/18 20:12,org.apache.felix.dependencymanager-r1,,,,org.apache.felix.dependencymanager-r13,,,,,,0,,"I just found an unfortunate deadlock when using latest DM r11 and latest SCR 2.0.12 in the same JVM.

I believe that the same issue applies to both DM and SCR (I may have to open a seperate issue for SCR).

First, here is the deadlock:

{code}
Found one Java-level deadlock:
=============================
""CM Event Dispatcher (Fire ConfigurationEvent: pid=com.alcatel.as.http.ioh.impl.HttpIOH)"":
  waiting to lock monitor 0x00007f8188004538 (object 0x00000000eb38d420, a org.apache.felix.dm.tracker.ServiceTracker$Tracked),
  which is held by ""FelixDispatchQueue""
""FelixDispatchQueue"":
  waiting for ownable synchronizer 0x00000000c0699f30, (a java.util.concurrent.locks.ReentrantLock$FairSync),
  which is held by ""CM Event Dispatcher (Fire ConfigurationEvent: pid=com.alcatel.as.http.ioh.impl.HttpIOH)""

Java stack information for the threads listed above:
===================================================
""CM Event Dispatcher (Fire ConfigurationEvent: pid=com.alcatel.as.http.ioh.impl.HttpIOH)"":
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChangedHideAspects(ServiceTracker.java:1140)
        - waiting to lock <0x00000000eb38d420> (a org.apache.felix.dm.tracker.ServiceTracker$Tracked)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:1054)
        at org.apache.felix.framework.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:990)
        at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:838)
        at org.apache.felix.framework.EventDispatcher.fireServiceEvent(EventDispatcher.java:545)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4579)
        at org.apache.felix.framework.Felix.access$000(Felix.java:105)
        at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:419)
        at org.apache.felix.framework.ServiceRegistry.servicePropertiesModified(ServiceRegistry.java:588)
        at org.apache.felix.framework.ServiceRegistrationImpl.setProperties(ServiceRegistrationImpl.java:131)
        at org.apache.felix.scr.impl.manager.SingleComponentManager.updateServiceRegistration(SingleComponentManager.java:558)
        at org.apache.felix.scr.impl.manager.SingleComponentManager.modify(SingleComponentManager.java:755)
        at org.apache.felix.scr.impl.manager.SingleComponentManager.reconfigure(SingleComponentManager.java:645)
        at org.apache.felix.scr.impl.manager.SingleComponentManager.reconfigure(SingleComponentManager.java:609)
        at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.configurationUpdated(ConfigurableComponentHolder.java:426)
        at org.apache.felix.scr.impl.manager.RegionConfigurationSupport.configurationEvent(RegionConfigurationSupport.java:284)
        at org.apache.felix.scr.impl.manager.RegionConfigurationSupport$1.configurationEvent(RegionConfigurationSupport.java:89)
        at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.sendEvent(ConfigurationManager.java:2090)
        at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:2058)
        at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:141)
        at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:109)
        at java.lang.Thread.run(Thread.java:748)
""FelixDispatchQueue"":
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000000c0699f30> (a java.util.concurrent.locks.ReentrantLock$FairSync)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireNanos(AbstractQueuedSynchronizer.java:934)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(AbstractQueuedSynchronizer.java:1247)
        at java.util.concurrent.locks.ReentrantLock.tryLock(ReentrantLock.java:442)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.obtainLock(AbstractComponentManager.java:228)
        at org.apache.felix.scr.impl.manager.AbstractComponentManager.obtainStateLock(AbstractComponentManager.java:279)
        at org.apache.felix.scr.impl.manager.SingleComponentManager.getService(SingleComponentManager.java:806)
        at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:347)
        at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:247)
        at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:350)
        at org.apache.felix.framework.Felix.getService(Felix.java:3721)
        at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:470)
        at org.apache.felix.dm.impl.ServiceEventImpl.getEvent(ServiceEventImpl.java:86)
        at org.apache.felix.dm.impl.ServiceDependencyImpl.addingService(ServiceDependencyImpl.java:251)
        at org.apache.felix.dm.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1276)
        at org.apache.felix.dm.tracker.AbstractTracked.trackAdding(AbstractTracked.java:279)
        at org.apache.felix.dm.tracker.AbstractTracked.trackInitial(AbstractTracked.java:188)
        - locked <0x00000000eb38d420> (a org.apache.felix.dm.tracker.ServiceTracker$Tracked)
        at org.apache.felix.dm.tracker.ServiceTracker.open(ServiceTracker.java:387)
        - locked <0x00000000eb38d420> (a org.apache.felix.dm.tracker.ServiceTracker$Tracked)
        - locked <0x00000000eb38cd00> (a org.apache.felix.dm.tracker.ServiceTracker)
        at org.apache.felix.dm.tracker.ServiceTracker.open(ServiceTracker.java:320)
        at org.apache.felix.dm.tracker.ServiceTracker.open(ServiceTracker.java:296)
        at org.apache.felix.dm.impl.ServiceDependencyImpl.start(ServiceDependencyImpl.java:235)
        at org.apache.felix.dm.impl.ComponentImpl.startDependencies(ComponentImpl.java:1360)
        at org.apache.felix.dm.impl.ComponentImpl.performTransition(ComponentImpl.java:1059)
        at org.apache.felix.dm.impl.ComponentImpl.handleChange(ComponentImpl.java:1010)
        at org.apache.felix.dm.impl.ComponentImpl.lambda$start$2(ComponentImpl.java:426)
        at org.apache.felix.dm.impl.ComponentImpl$$Lambda$7/201251057.run(Unknown Source)
        at org.apache.felix.dm.impl.SerialExecutor.runTask(SerialExecutor.java:138)
        at org.apache.felix.dm.impl.SerialExecutor.runTasks(SerialExecutor.java:120)
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:86)
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:105)
        at org.apache.felix.dm.impl.ComponentImpl.start(ComponentImpl.java:424)
        at org.apache.felix.dm.impl.ComponentScheduler.add(ComponentScheduler.java:69)
        at org.apache.felix.dm.DependencyManager.add(DependencyManager.java:136)
        at com.alcatel.as.service.coordinator.impl.Activator.init(Activator.java:16)
        at org.apache.felix.dm.DependencyActivatorBase.start(DependencyActivatorBase.java:75)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2239)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2145)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl$DeployedBundle.start(BundleInstallerImpl.java:1056)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.startBundles(BundleInstallerImpl.java:728)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.finishInitialisation(BundleInstallerImpl.java:230)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.frameworkEvent(BundleInstallerImpl.java:213)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.start(BundleInstallerImpl.java:174)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2239)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2145)
        at org.apache.felix.framework.Felix.updateBundle(Felix.java:2506)
        at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:1018)
        at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:1004)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.checkSelfUpdate(BundleInstallerImpl.java:273)
        at com.alcatel.as.service.bundleinstaller.impl.BundleInstallerImpl.frameworkEvent(BundleInstallerImpl.java:192)
        at org.apache.felix.framework.EventDispatcher.invokeFrameworkListenerCallback(EventDispatcher.java:881)
        at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:830)
        at org.apache.felix.framework.EventDispatcher.run(EventDispatcher.java:1147)
        at org.apache.felix.framework.EventDispatcher.access$000(EventDispatcher.java:54)
        at org.apache.felix.framework.EventDispatcher$1.run(EventDispatcher.java:102)
        at java.lang.Thread.run(Thread.java:748)

Found 1 deadlock.
{code}

now, here is my first interpretation of what is going on:

in SCR:
=====

Configuration Admin is delivering a configuration update event to SCR. So, the org.apache.felix.scr.impl.manager.RegionConfigurationSupport.configurationEvent() method is then called. This method then indirectly triggers a call to the SingleComponentManager.reconfigure method, which then calls SingleComponentManager.modify method. Here is the modify() method:

{code}
    private boolean modify(boolean configurationDeleted)
    {
        //0 SCR 112.7.1 If configuration is deleted, and version is < 1.3 and no flag set, then deactivate unconditionally.
        // For version 1.3 and later, or with a flag, more sensible behavior is allowed.
        if ( configurationDeleted && !getComponentMetadata().isDeleteCallsModify()){
            return false;
        }

        // 1. no live update if there is no declared method
        if ( getComponentMetadata().getModified() == null )
        {
            log( LogService.LOG_DEBUG, ""No modified method, cannot update dynamically"", null );
            return false;
        }
        // invariant: we have a modified method name

        // 2. get and check configured method
        // invariant: modify method is configured and found

        // 3. check whether we can dynamically apply the configuration if
        // any target filters influence the bound services
        final Map<String, Object> props = getProperties();
        for ( DependencyManager<S, ?> dm: getDependencyManagers() )
        {
            if ( !dm.canUpdateDynamically( props ) )
            {
                log( LogService.LOG_DEBUG,
                        ""Cannot dynamically update the configuration due to dependency changes induced on dependency {0}"",
                        new Object[] {dm.getName()}, null );
                return false;
            }
        }
        // invariant: modify method existing and no static bound service changes

        // 4. call method (nothing to do when failed, since it has already been logged)
        //   (call with non-null default result to continue even if the
        //    modify method call failed)
        obtainStateLock(  );
        try
        {
            //cf 112.5.12 where invoking modified method before updating target services is specified.
            final MethodResult result = invokeModifiedMethod();
            updateTargets( props );
            if ( result == null )
            {
                // log an error if the declared method cannot be found
                log( LogService.LOG_ERROR, ""Declared modify method ''{0}'' cannot be found, configuring by reactivation"",
                        new Object[] {getComponentMetadata().getModified()}, null );
                return false;
            }

            // 5. update the target filter on the services now, this may still
            // result in unsatisfied dependencies, in which case we abort
            // this dynamic update and have the component be deactivated
            if ( !verifyDependencyManagers() )
            {
                log( LogService.LOG_DEBUG,
                        ""Updating the service references caused at least one reference to become unsatisfied, deactivating component"",
                        null );
                return false;
            }

            // 6. update service registration properties if we didn't just do it
            if ( result.hasResult() )
            {
                setServiceProperties( result, null );
            }
            else
            {
                updateServiceRegistration();
            }
     ...
{code}

This is problematic because we see that the modify method is invoking the updateServiceRegistration while holding the StateLock. (the obtainStateLock() method is called and then the service registration is updaded). 

Here, the listener is a DM component, but this component is internally synchronized on it's service tracker, and is currently blocked, trying to dereference the DS service, but it can't because the DS service state lock is currently held by the modify method.

in the next section, I'm now analyzing what is doing DM and will propose a patch in order to make sure DM does not hold any locks while calling bundleContext.getService(ref) ... this will fix the issue.

Dependency Manager
=================

In dependency manager, now let's analyze the the FelixDispatchQueue stacktrace: we open the DM service tracker, but the open method (in the DM service tracker) calls the AbstractTracked.trackInitial while holding the lock on ServiceTracker$Tracked. Then this triggers the customizer ""addingService"" method call, which then perform a getService. But the getService then tries to dereference a declarative service component, and the stacktrace is then blocked because the DS component state lock is currently locked by the other ""CM Event Dispatcher""
So, in the end, I think that there is something wrong in both SCR and DM :

1) SCR obtain the state lock while update the service registration.
This is , I think, unfortunate because updating the service registration while holding a lock is like hodling a lock while calling foreign code (you don't know what will do the service listener when you update the service registration).

2) and DM calls the customizer ""addingService"" method while holding the lock on the service tracker. This is also not satisfying.

So, at minimul, in DM I do believe that we should manage to not invoke the customizer.addingService while holding the lock on the DM service tracker.

now, I have given a look into the DM ServiceTracker.open method and it is currently implemented like this:

{code}
	public void open(boolean trackAllServices, boolean trackAllAspects) {
		if (debug) {
			System.out.println(""[ServiceTracker] "" + debugKey + "" T"" + Thread.currentThread().getId() + "" open"");
		}
		final Tracked t;
		synchronized (this) {
			if (tracked != null) {
				return;
			}
			if (DEBUG) {
				System.out.println(""ServiceTracker.open: "" + filter); 
			}
			m_trackAllAspects = trackAllAspects;
			t = trackAllServices ? new AllTracked() : new Tracked();
			synchronized (t) {
				try {
					context.addServiceListener(t, listenerFilter);
					ServiceReference[] references = null;
					if (trackClass != null) {
						references = getInitialReferences(trackAllServices,
								trackClass, null);
					}
					else {
						if (trackReference != null) {
							if (trackReference.getBundle() != null) {
								references = new ServiceReference[] {trackReference};
							}
						}
						else { /* user supplied filter */
							references = getInitialReferences(trackAllServices,
									null,
									(listenerFilter != null) ? listenerFilter
											: filter.toString());
						}
					}
					/* set tracked with the initial references */
					t.setInitial(references);
					
					// only actually schedules the actions for execution within this synchronized block,
					// but do the actual execution afterwards.
					t.trackInitial(); 

				}
				catch (InvalidSyntaxException e) {
					throw new RuntimeException(
							""unexpected InvalidSyntaxException: ""
									+ e.getMessage(), e); 
				}
			}
			tracked = t;
		}
		/* Call tracked outside of synchronized region */
		// just trigger the executor
		t.getExecutor().execute();
	}
{code}

As you can see the ""t.trackInitial()"" is invoked from within the synchronized block. This method actually schedules customizer ""added"" callbacks, which will be invoked properly outside of the synchronized block  (when t.getExecutor().executor() will be called).
But please notice that the the issue is that the t.trackInitial() will also invoke the ""addingService"" customizer callback from the synchronized block. Doing so will end up dereferencing the DS service reference while we are holding the ServiceTracker lock.

Interestingly, notice that the BundleTracker is not calling the t.trackInitial() method from the synchronized block.

so, I have attempted to make a patch, which seems to resolve the issue. All tests are passing OK, and we don't experience the deadlock anymore, and I would appreciate if another DM developer or user could take a look at my proposed patch, to make sure I don't have messed up :-)

thanks",,,,,,,,,,,,,17/Oct/17 21:48;pderop;deadlock.proposed.patch.txt;https://issues.apache.org/jira/secure/attachment/12892690/deadlock.proposed.patch.txt,,,1.0,,,,,,,,,,,,,,,,,,,2018-03-29 10:40:52.437,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 29 20:12:32 UTC 2018,,,,,,0|i3ldtz:,9223372036854775807,,,,,,,,17/Oct/17 21:49;pderop;Attaching the proposed patch.,"29/Mar/18 10:40;sstoel;My application was also experiencing a deadlock after unregistering certain services with aspects, after applying this patch it is working as expected.","29/Mar/18 11:56;pderop;thanks for reporting;

I should committed the patch a long time ago  (I'm sorry). I will manage to do it this week-end.

I think I will also make a new release the next week (it will also include the enhancements that have been made in https://github.com/pderop/dm.enhanced).

thank you

 ",29/Mar/18 20:12;pderop;Committed the patch in revision 1828022.,,,,,,,,,,,,
Maven Bundle Plugin - Broken and non https links,FELIX-5712,13108534,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Trivial,Fixed,sseifert@pro-vision.de,nevel,nevel,11/Oct/17 08:55,18/Dec/17 16:30,14/Mar/19 02:49,08/Dec/17 15:32,maven-bundle-plugin-3.3.0,,,,maven-bundle-plugin-3.4.0,,,,Maven Bundle Plugin,,0,,"The linking from https://commons.apache.org/proper/commons-weaver/commons-weaver-build-tools/plugins.html to https://felix.apache.org/maven-bundle-plugin/ seems to be broken. Also, the former page seems to contain http links instead of https ones.
",Website only,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-08 15:31:35.27,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 08 15:32:25 UTC 2017,,,,,,0|i3l4gv:,9223372036854775807,,,,,,,,"08/Dec/17 15:31;sseifert@pro-vision.de;the problem is the <url> generated for the maven-bundle-plugin - it's automatically generated from the url of the parent pom (https://felix.apache.org) and the artifact id is appended - which results in the wrong url.
the felix website is by default still used with HTTP (although HTTPs works as well).","08/Dec/17 15:32;sseifert@pro-vision.de;Completed: At revision: 1817515  

should be solved with the next release",,,,,,,,,,,,,,
SCR can't be wired to recent gogo-runtime versions,FELIX-5704,13106442,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,gnt,gnt,gnt,02/Oct/17 14:36,08/Jan/18 14:47,14/Mar/19 02:49,08/Jan/18 14:46,,,,,scr-2.0.14,,,,Declarative Services (SCR),,0,,"SCR can only be wired to gogo-runtime < 1.0.0 which has the status=provisional attribute on the import.
Since gogo is out for a year now, I think we should upgrade and remove the status=provisional attribute on the package import.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 02 14:45:51 UTC 2017,,,,,,0|i3ks67:,9223372036854775807,,,,,,,,"02/Oct/17 14:45;gnt;Committing to https://svn.apache.org/repos/asf/felix/trunk ...
	M	osgi-r7/scr/pom.xml
	M	scr/pom.xml
Committed r1810367
",,,,,,,,,,,,,,,
All files in OSG-INF/metatype must be considered,FELIX-5702,13105010,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,26/Sep/17 07:49,02/Oct/18 15:04,14/Mar/19 02:49,26/Sep/17 08:04,metatype-1.1.4,,,,metatype-1.1.6,,,,Metatype Service,,0,,According to the spec all files in OSG-INF/metatype must be considered metatype documents (XML) files. Currently the implementation reads only files ending in .xml which is violating the spec.,,,,,,,,,,,,FELIX-5700,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 08:04:19 UTC 2017,,,,,,0|i3kje7:,9223372036854775807,,,,,,,,26/Sep/17 08:04;cziegeler;Solved in rev 1809712,,,,,,,,,,,,,,,
metatype.properties file must not be in OSGI-INF/metatype,FELIX-5701,13104831,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,25/Sep/17 16:40,30/Sep/17 10:44,14/Mar/19 02:49,25/Sep/17 16:41,webconsole-event-plugin-1.1.6,,,,webconsole-event-plugin-1.1.8,,,,Web Console,,0,,According to the metatype spec the metatype.properties file must reside out of the OSGI-INF/metatype directory,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 25 16:41:56 UTC 2017,,,,,,0|i3kian:,9223372036854775807,,,,,,,,25/Sep/17 16:41;cziegeler;Moved to /OSGI-INF/l10n in rev 1809642,,,,,,,,,,,,,,,
Metatype generation wrongly puts properties files into metatype directory,FELIX-5700,13104830,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,cziegeler,cziegeler,25/Sep/17 16:39,02/Oct/18 15:04,14/Mar/19 02:49,26/Sep/17 07:20,maven-scr-plugin-1.24.0,scr generator 1.16.0,,,maven-scr-plugin-1.25.0,scr bnd plugin 1.8.0,scr generator 1.17.0,,SCR Tooling,,0,,"The maven scr plugin currently assumes that the properties file for localization is in OSGI-INF/metatype. However this wrong and not according to the spec.
The Eclipse metatype implementation actually creates an error while the Felix implementation is more lenient.
The OSGI-INF/metatype directory must only contain XML files",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 07:20:04 UTC 2017,,,,,,0|i3kiaf:,9223372036854775807,,,,,,,,"26/Sep/17 07:20;cziegeler;I've changed the generator to use the l10n directory by default instead of the metatype directory for properties.
In addition if a module is using the metatype directory for properties the build will fail now. While this makes upgrading the plugin a little bit harder, it ensures that the spec is respected. And projects basically just need to rename their directory.",,,,,,,,,,,,,,,
getServiceProperties returns null instead of empty dictionary,FELIX-5683,13097498,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,pderop,pderop,25/Aug/17 05:41,22/Oct/18 09:01,14/Mar/19 02:49,26/Sep/18 16:53,org.apache.felix.dependencymanager-r9,,,,org.apache.felix.dependencymanager-r13,,,,Dependency Manager,,0,,"There are two issues:

1)

In the felix users mailing list (see [1]), Bram reported the following:

when you set a component service properties like this:

{code}
Component component = 
m_dependencyManager.createComponent().setInterface(ApplicationService.class.getName(),new Properties());
component.getServiceProperties().put(""a"", ""b"");
{code}

then you get a NPE because the component.getServiceProperties() method returns null instead of the empty dictionary that has been set in the setInterfaceMethod.

This is a regression made in r9 release, in the FELIX-5522 where a refactoring was done regarding aspect service properties.

A fix can be made in order to behave like before (that is : avoid the NPE). 

2)

Bram, I may be wrong but I think that one new issue is that the dictionary returned by the getServiceProperties() method was so far (since the initial version of felix dm 2.0.1) a copy of the service properties dictionary maintained in the ComponentImpl, so if you would like to do set service properties like this:

{code}
Component component = m_dependencyManager.createComponent().setInterface(ApplicationService.class.getName(),new Properties());
component.getServiceProperties().put(""a"", ""b"");
m_dependencyManager.add(component);  // won't add ""a=b"" properties
{code}

then the ""a"" property will be set in the copy of the internal dictionary returned by the getServiceProperties() method, and the ""a=b"" service properties won't be set when the component is added in the m_dependencyManager.

So, if what I'm saying is correct and if you would like to see this new behavior implemented, please open a new jira issue and I will manage to implement it; thanks

PS: I'm now fixing the 1) regression, in order to avoid the NPE.

[1] http://www.mail-archive.com/users%40felix.apache.org/msg17939.html",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-25 07:02:34.888,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 26 16:53:37 UTC 2018,,,,,,0|i3j9sf:,9223372036854775807,,,,,,,,"25/Aug/17 05:51;pderop;Committed a patch in revision 1806124 which resolves the 1) issue (avoid the NPE) and added the corresponding test:

org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5683_GetServicePropertiesReturnsNullTest.java

","25/Aug/17 07:02;brampouwelse;[~pderop]  Thanks for the quick response! 

I'll try to do a test with the trunk version later today. 

> Bram, I may be wrong but I think that one new issue is that the dictionary returned by the getServiceProperties() method was so far (since the initial version of felix dm 2.0.1) a copy of the service properties dictionary maintained in the ComponentImpl, so if you would like to do set service properties like this:

I'm not sure that's a real issue I am aware that, furthermore I think that changing this behavior would be another breaking change. ","25/Aug/17 07:27;jajans;{quote}
> Bram, I may be wrong but I think that one new issue is that the dictionary returned by the getServiceProperties() method was so far (since the initial version of felix dm 2.0.1) a copy of the service properties dictionary maintained in the ComponentImpl, so if you would like to do set service properties like this:

I'm not sure that's a real issue I am aware that, furthermore I think that changing this behavior would be another breaking change.
{quote}

I tend to agree with Bram here, I think it would cause more trouble than it is worth: with the current (DM 2.0.1) behaviour, you can create ""atomic"" updates to the service properties by retrieving them, modifying them and updating them in a single call. With the proposed change it would allow the service properties to reflect ""partial"" changes while we're updating them.",25/Aug/17 07:50;brampouwelse;There is however another change that I think would be nice.. I thinkit would be easier for consumers if the getServiceProperties method never returns null (so even if the component was initialized without service properties just return a new dictionary). ,"25/Aug/17 08:02;mariang;The javadoc on {{Component.getServiceProperties()}} should be updated to reflect the new API logic.
+1 to always return an empty dictionary and never null.","25/Aug/17 13:16;pderop;ok; 

and Jan Willem, what is your opinion ?

thanks.","25/Aug/17 13:27;jajans;As Marian and Bram suggested, I would also opt for always returning a {{Dictionary}} instance that is either empty if no service properties were defined for the service, or a *copy* of Dictionary with the existing service properties. It would make the usage pattern very clear regardless whether there were service properties defined on the original service.","17/Oct/17 20:15;pderop;I finally did a fix to now never return null from the getServicesProperties() method.
I'm sorry for the delay.
please close this if you are ok.

thank you.",26/Sep/18 16:53;pderop;committed in revision 1842034.,,,,,,,
Uninstall should throw an exception if called while the bundle is starting or stopping,FELIX-5676,13093939,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,10/Aug/17 22:56,25/Aug/17 21:34,14/Mar/19 02:49,10/Aug/17 22:58,framework-5.6.6,,,,framework-5.6.8,,,,Framework,,0,,"If uninstall is called on a bundle from within the thread that is currently starting or stopping the bundle (i.e., the bundle is trying to change its own state while holding its bundle lock) we currently just let the uninstall happen. 

That can cause the bundle to be delivered to other bundles as starting or stopping or active while actually being uninstalled already. Instead, we should detect this situation and throw an IllegalStateException instead (as per spec).",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 10 22:58:18 UTC 2017,,,,,,0|i3io1j:,9223372036854775807,,,,,,,,10/Aug/17 22:58;karlpauls;Fixed in r1804741.,,,,,,,,,,,,,,,
Cannot launch Felix on Raspberry Pi: problem with normalizeOSVersion(),FELIX-5672,13092200,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,03/Aug/17 13:59,25/Aug/17 21:34,14/Mar/19 02:49,03/Aug/17 20:40,framework-5.6.6,,,,framework-5.6.8,,,,Framework,,0,,"Launching the Felix Framework on the Raspberry Pi fails with the following error:

{code}
 java -jar bin/felix.jar
Could not create framework: java.lang.IllegalArgumentException: invalid version ""4.9.35."": invalid format
java.lang.IllegalArgumentException: invalid version ""4.9.35."": invalid format
	at org.osgi.framework.Version.<init>(Version.java:147)
	at org.apache.felix.framework.util.manifestparser.NativeLibraryClause.normalizeOSVersion(NativeLibraryClause.java:770)
	at org.apache.felix.framework.Felix.initializeFrameworkProperties(Felix.java:4617)
	at org.apache.felix.framework.Felix.<init>(Felix.java:384)
	at org.apache.felix.framework.FrameworkFactory.newFramework(FrameworkFactory.java:28)
	at org.apache.felix.main.Main.main(Main.java:287)
Caused by: java.util.NoSuchElementException
	at java.util.StringTokenizer.nextToken(StringTokenizer.java:349)
	at java.util.StringTokenizer.nextToken(StringTokenizer.java:377)
	at org.osgi.framework.Version.<init>(Version.java:138)
	... 5 more
{code}

Seems that the normalizeOSVersion() function can't handle the Pi OS version number which is reported as:
{code}
uname -a
Linux mypi 4.9.35+ #1014 Fri Jun 30 14:34:49 BST 2017 armv6l GNU/Linux
{code}","java version ""1.8.0_65""
Java(TM) SE Runtime Environment (build 1.8.0_65-b17)
Java HotSpot(TM) Client VM (build 25.65-b01, mixed mode)",,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 20:40:13 UTC 2017,,,,,,0|i3idkn:,9223372036854775807,,,,,,,,03/Aug/17 20:40;bosschaert;Fixed in https://svn.apache.org/viewvc?view=revision&revision=1804043,,,,,,,,,,,,,,,
Registering a PersistenceManager causes duplicate caches,FELIX-5669,13091591,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,brandan.jeter,brandan.jeter,01/Aug/17 15:30,07/Aug/17 05:49,14/Mar/19 02:49,02/Aug/17 09:18,configadmin-1.8.12,,,,configadmin-1.8.16,,,,Configuration Admin,,0,,"When registering a PersistenceManager, the next call to a method in ConfigurationManager will call getPersistenceManagers(). Instead of preserving the existing CachingPersistenceManagerProxy that wraps the default FilePersistenceManager, ConfigurationManager creates a brand new one. But previous Configuration objects still have reference to the old CachingPersistenceManagerProxy, so when one of them gets deleted/updated it does not get deleted/updated in the ConfigurationManager's reference.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-01 15:36:48.567,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 14:15:45 UTC 2017,,,,,,0|i3i9u7:,9223372036854775807,,,,,,,,"01/Aug/17 15:36;githubbot;GitHub user brjeter opened a pull request:

    https://github.com/apache/felix/pull/115

    FELIX-5669 Fixing bug in ConfigurationManager that duplicates PersistenceManager caches

    The `ConfigurationManager` duplicates `CachingPersistenceManagerProxy`s when `getPersistenceManagers()` is called after registering a new `PersistenceManager`. This fixes it to use the previous `CachingPersistenceManagerProxy` if one exists.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/brjeter/felix FELIX-5669

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/115.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #115
    
----
commit ab6655478dd1390a8399d258bc4eccf94ad991d4
Author: Brandan Jeter <brandanjeter@gmail.com>
Date:   2017-08-01T15:32:47Z

    FELIX-5669 Fixing bug in ConfigurationManager that duplicates PersistenceManager caches

----
",01/Aug/17 15:37;brandan.jeter;PR: https://github.com/apache/felix/pull/115,"02/Aug/17 09:18;cziegeler;Thanks [~brandan.jeter] for reporting and your patch.
I've applied a slightly modified version in rev 1803786 in the R7 branch for config admin. The difference is just that any proxy, whether caching or non caching is continued to be used.
Please cross check
","02/Aug/17 14:53;brandan.jeter;[~cziegeler], thanks for applying that so quickly! Another difference between your patch and mine is that the PersistenceManagerProxy classes are now exposing their delegatees to consuming classes rather than doing the check internally. Regardless, I don't think it's a big deal.

Other questions I had: Are you guys going to release a ConfigAdmin 1.8.15? And when do you think you guys are going do the next release and do you know the earliest version of Karaf that it will be in?

Thanks again.","02/Aug/17 15:08;githubbot;Github user brjeter closed the pull request at:

    https://github.com/apache/felix/pull/115
","03/Aug/17 06:10;cziegeler;[~brandan.jeter] Yes, right, the deletagee is now accessible - but as these are all internal classes I think this is fine.
I've backported the fix to the 1.8.x branch in revision 1803950 - it would be great if you can give it a quick lock. I can then start the 1.8.16 release, so it should be available next week.
I don't know when Karaf will pick it up though",03/Aug/17 14:15;brandan.jeter;Okay that's perfect! The backport revision looks good! Thanks again.,,,,,,,,,
Prevent Nullpointer when receiving a ServiceEvent for a service that has been already unregistered.,FELIX-5668,13091164,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,31/Jul/17 11:19,30/Sep/17 10:44,14/Mar/19 02:49,31/Jul/17 11:20,webconsole-event-plugin-1.1.6,,,,webconsole-event-plugin-1.1.8,,,,Web Console,,0,,"The ServiceReference of a ServiceEvent may return null for getBundle() if the service has been unregistered already. We need to check for that being the case to avoid an NPE (I think this only happens in strange corner cases where the eventdelivery gets stacked).

",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 31 11:20:34 UTC 2017,,,,,,0|i3i77j:,9223372036854775807,,,,,,,,31/Jul/17 11:20;karlpauls;Fixed in r1803519.,,,,,,,,,,,,,,,
Update Jetty to 9.3.20.v20170531 to fix CVE-2017-9735,FELIX-5664,13085505,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,antoine.dessaigne,antoine.dessaigne,07/Jul/17 12:48,14/Jul/17 09:24,14/Mar/19 02:49,11/Jul/17 08:28,http.jetty-3.4.2,,,,http.jetty-3.4.4,,,,HTTP Service,,2,,"The current http.jetty version uses Jetty 9.3.15.v20161220 which is sensitive to CVE-2017-9735, see:
* https://nvd.nist.gov/vuln/detail/CVE-2017-9735
* https://github.com/eclipse/jetty.project/issues/1556

The CVE fix has been released in Jetty 9.3.20.v20170531 or 9.4.6.v20170531, so http.jetty need to be updated.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-11 08:28:25.842,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 11 08:45:06 UTC 2017,,,,,,0|i3h8sn:,9223372036854775807,,,,,,,,11/Jul/17 08:28;cziegeler;Updated in rev 1801567,11/Jul/17 08:45;antoine.dessaigne;Thank you very much!,,,,,,,,,,,,,,
DM released sources can't be rebuilt,FELIX-5657,13082705,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Critical,Fixed,pderop,pderop,pderop,27/Jun/17 05:47,01/Jul/17 17:43,14/Mar/19 02:49,27/Jun/17 06:03,org.apache.felix.dependencymanager-r9,,,,org.apache.felix.dependencymanager-r11,,,,Dependency Manager,,0,,"since FELIX-5228, dm has been updated with bndlib 3.3.0. but at this point a refactoring has been made and junit/hamcrest jars were moved from cnf/buildrepo to cnf/non-osgirepo.

the problem is: the release/build.gradle script has not been updated in order to include the cnf/non-osgirepo in the dm-deps zip, leading to a fatal compile error.

notice that using latest bndtools, it could be possible to manage to avoid using a dm-deps zip, because we'll do this later.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2017-06-27 05:47:50.0,,,,,,0|i3grkv:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,
Unintended Web Console RESTful API change,FELIX-5638,13070718,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,karlpauls,karlpauls,karlpauls,10/May/17 08:34,12/May/17 20:03,14/Mar/19 02:49,10/May/17 13:22,webconsole-4.3.0,webconsole-4.3.2,,,webconsole-4.3.4,,,,Web Console,,0,,"Starting with 4.3.0 the Web Console RESTful API has a change in bundles.json where the ""status"" is added again to the ""s"" array. That wasn't intended and does make much sense.

I will remove it again.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 10 13:22:25 UTC 2017,,,,,,0|i3erbj:,9223372036854775807,,,,,,,,10/May/17 13:22;karlpauls;Fixed in r1794700,,,,,,,,,,,,,,,
Component of aspect service does not have any service properties anymore,FELIX-5636,13070349,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,pderop,JeroenDaanen,JeroenDaanen,09/May/17 09:06,01/Jul/17 17:41,14/Mar/19 02:49,11/May/17 13:17,org.apache.felix.dependencymanager-r10,org.apache.felix.dependencymanager-r9,,,org.apache.felix.dependencymanager-r11,,,,Dependency Manager,,0,,"The Component for an aspect service does not have service properties. It looks like this is broken since r.1781908 (had a quick look, but could not find the cause in the time I had available).
Without these properties it is not possible to add a dependency in the init method of the aspect based on one of the aspected service properties.

Example to test it:
{code}
public class Activator extends DependencyActivatorBase {

	@Override
	public void init(BundleContext context, DependencyManager manager) throws Exception {
		Properties properties = new Properties();
		properties.put(""PropKey"", ""PropValue"");
		Component aComponent = manager.createComponent().setInterface(X.class.getName(), properties).setImplementation(new A());
		manager.add(aComponent);
		
		manager.add(manager.createAspectService(X.class, null, 100).setImplementation(B.class));
	}


	public static class A implements X {
		public void init(Component component) {
			System.out.println(""Service properties in A: "" + component.getServiceProperties());
		}
	}

	public static class B implements X {
		public void init(Component component) {
			System.out.println(""Service properties in B: "" + component.getServiceProperties());
		}
	}

	public interface X {

	}

}
{code}
The init of B shows empty properties, I expected the inherited properties, aspect ranking etc.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-09 10:38:37.937,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu May 11 13:17:28 UTC 2017,,,,,,0|i3ep2f:,9223372036854775807,,,,,,,,"09/May/17 10:38;pderop;Hello Jeroen,

Thanks for reporting this. It's probably a regression made in r8 version. The original service properties are propagated, but once the aspect service is registered, and not at the time the aspect init callback is invoked (it was the case until r8 version).

I see now what's wrong, but I need to do some more analysis and will work on a fix today. 
thanks.
","09/May/17 11:13;JeroenDaanen;Thanks Pierre. We're using a dependency manager compiled from revision 1776903 (2017/01/02) where the issue is not present yet, so it must have been introduced afterwards.","09/May/17 11:58;pderop;Thanks; actually, I think the regression is in r9 version (r8 is ok I think).
I will work on the issue today.","11/May/17 05:41;pderop;Added testcase for this issue in rv 1794779:

org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5636_PropagateServicePropertiesToAspectInitCallback.java","11/May/17 06:26;pderop;Committed a patch in revision 1794788:

The ComponentImpl.getServiceProperties() method is now always calling the calculateServiceProperties() method because since r9 version, the AspectServiceImpl is now calculating the aspect properties using a service property propagate callback method (see AspectServiceImpl.AspectPropagateCallback inner class).

The AspectServiceImpl.getServiceProperties() method has been renamed to getAspectServiceProperties() in order to insist on the fact that this method should only return the properties of the aspect and not of the merge between the aspect properties and the inherited service properties.

Jeroen, please turn this issue to Resolved if you are satisfied, thank you.",11/May/17 13:17;JeroenDaanen;Issue has been fixed. Thanks Pierre.,,,,,,,,,,
NullObject is created for a required dependency if the component is removed and added again to the dependency manager,FELIX-5630,13068379,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Minor,Fixed,pderop,JeroenDaanen,JeroenDaanen,02/May/17 10:23,01/Jul/17 17:41,14/Mar/19 02:49,04/May/17 06:49,org.apache.felix.dependencymanager-r1,,,,org.apache.felix.dependencymanager-r11,,,,Dependency Manager,,0,,"I have a component A with a required dependency to B and C. 
I add A, B and C to the dependency manager. 
Then I remove A and B. 
Finally I only add A again. Now the exception ""Could not create null object for class com.example.Activator$B is thrown"". See the attached Activator.
I did not expect that a NullObject is ever created for a required dependency.",,,,,,,,,,,,,02/May/17 10:23;JeroenDaanen;Activator.java;https://issues.apache.org/jira/secure/attachment/12865935/Activator.java,,,1.0,,,,,,,,,,,,,,,,,,,2017-05-02 13:19:04.642,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu May 04 08:47:52 UTC 2017,,,,,,0|i3ecwv:,9223372036854775807,,,,,,,,"02/May/17 13:19;pderop;Thanks for reporting Jeroen;

It looks like you found an old bug which is not a regression (the issue seems to also happen with old dm 3.xx or even with dm 2.xx versions).
I will investigate this issue soon.
(the issue may also happen with BundleDependencies).","02/May/17 13:26;pderop;oops, no, the issue is probably a regression starting from dm4 r1 version ...","02/May/17 22:02;pderop;Added test case for this issue in revision 1793591.

The same kind of problem also happens when you use a required BundleDependency: when you restart the component and if the dependency bundle is unavailable, then a NullObject bundle is auto-injected.","02/May/17 22:06;pderop;I committed a candidate fix in revision 1793592, where the AbstractDependency.stop() method is now resetting the m_available flag to false. The FELIX5630_NullObjectTest test is now passing ok with the patch.

Jeroen, can you please turn this issue to resolved state if you are ok with the patch.

thanks !","04/May/17 06:49;JeroenDaanen;Your patch fixes the issue. Thanks Pierre!

By the way, r9 in the 'unreleased versions' section of 'affects versions.","04/May/17 08:47;pderop;I forgot to make the r9 version as released. Now it is done. 
thanks Jeroen",,,,,,,,,,
Global lock in FieldHandler.NotResolved::resolve method can cause deadlock,FELIX-5628,13068154,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,01/May/17 16:14,22/Sep/17 08:55,14/Mar/19 02:49,21/Jun/17 14:28,,,,,scr-2.0.12,,,,Declarative Services (SCR),,0,,Similar to FELIX-5615 but for the FieldHandler resolution.,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2017-05-01 16:14:52.0,,,,,,0|i3ebiv:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,
Class loading issues while finding fields causes an NPE,FELIX-5627,13067488,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,tjwatson,tjwatson,27/Apr/17 20:00,22/Sep/17 08:55,14/Mar/19 02:49,01/May/17 16:16,,,,,scr-2.0.12,,,,Declarative Services (SCR),,0,,"See eclipse bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=515873

The following snippet of an NPE can happen

Caused by: java.lang.NullPointerException
	at org.apache.felix.scr.impl.inject.FieldHandler.validateField(FieldHandler.java:279)
	at org.apache.felix.scr.impl.inject.FieldHandler.access$500(FieldHandler.java:51)
	at org.apache.felix.scr.impl.inject.FieldHandler$NotResolved.resolve(FieldHandler.java:839)
	at org.apache.felix.scr.impl.inject.FieldHandler$NotResolved.fieldExists(FieldHandler.java:864)
	at org.apache.felix.scr.impl.inject.FieldHandler.fieldExists(FieldHandler.java:918)

This is because org.apache.felix.scr.impl.inject.FieldHandler.findField(SimpleLogger) can return null.  In this case it is returning null because of a NoClassDefFoundError which is caught in org.apache.felix.scr.impl.inject.FieldHandler.getField(Class<?>, boolean, boolean, SimpleLogger) and null ultimately is returned.  It seems a null check is the correct fix here since later on it appears that null may be used when things are not as expected.

While investigating this issue I found the field handler implementation suffers from the same global lock strategy as the BaseMethod implementation did in FELIX-5615",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-28 05:41:54.622,,,no_permission,,,https://bugs.eclipse.org/bugs/show_bug.cgi?id=515873,,,,,,,,,9223372036854775807,,,Mon May 01 16:16:42 UTC 2017,,,,,,0|i3e7ev:,9223372036854775807,,,,,,,,"28/Apr/17 05:41;cziegeler;I've added a null check in http://svn.apache.org/viewvc?rev=1792985&view=rev 
I think the R7 branch is not affected as the code has been refactored there
But we still should fix the global lock problem for fields",01/May/17 16:16;tjwatson;I opened FELIX-5628 to track the global lock problem as a separate issue. Marking this issue as resolved.,,,,,,,,,,,,,,
Global lock in BaseMethod.NotResolved::resolve method can cause deadlock,FELIX-5615,13063918,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,tjwatson,tjwatson,tjwatson,13/Apr/17 20:08,28/Apr/17 08:40,14/Mar/19 02:49,20/Apr/17 13:32,,,,,scr-2.0.10,,,,Declarative Services (SCR),,0,,"See eclipse bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=515215

org.apache.felix.scr.impl.inject.BaseMethod.NotResolved has a single instance which is held by the static field NotResolved.INSTANCE

This means that the synchronized method NotResolved::resolve holds the global lock on this NotResolved.INSTANCE object.  It is unclear why this complete method needs to be synchronized.  But is is also unclear why it has to be a global lock also.  Is this by design? or a consequence of some refactoring that made this method act on a global lock?

This is causing issues because while calling BaseMethod::findMethod reflection is done which can then trigger additional class loads.  These can then result in lazy activation to be triggered.  There is a whole set of deadlock situations that could happen during lazy activation while this global lock is being held.

I have not studied the code in detail, but it appears BaseMethod:findMethod is stateless and it is unclear why we need to hold a lock between calls to BaseMethod::findMethod and BaseMethod::setMethod (let alone a global lock).",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,https://bugs.eclipse.org/bugs/show_bug.cgi?id=515215,,,,,,,,,9223372036854775807,,,Thu Apr 20 13:32:57 UTC 2017,,,,,,0|i3dlzr:,9223372036854775807,,,,,,,,"14/Apr/17 17:20;tjwatson;I found something suspicious in the method BindMethod::doFindMethod which gets called by BaseMethod::findMethod while holding the NotResolved.INSTANCE global lock.

In the method BindMethod::doFindMethod it does change the state of the field BindMethod::m_paramTypes and then returns the found Method object.  So it would appear this lock is making the change in state for the following atomic:

BindMethod::m_paramTypes
BaseMethod::m_method
BaseMethod::m_state

I think we should look at protecting this atomic operation in a different way.  I am pretty sure the global lock is not needed here while setting the state of these fields.  But I also would like to avoid holding any locks between the calls to BaseMethod::findMethod and BaseMethod::setMethod.  To do that I would return a composite object back from BaseMethod::findMethod and BaseMethod::doFindMethod that contained the method and any other specific object the subclass needs when the method is ultimately set.  This way we can synchronize on BaseMethod::setMethod to make the operation atomic.

Here is an initial attempt at doing this https://github.com/tjwatson/felix/commits/felix-5615",20/Apr/17 13:32;tjwatson;I released the fix to the R6 and R7 implementations of SCR.,,,,,,,,,,,,,,
SCR bundle fails to start without Config Admin,FELIX-5613,13063318,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,cziegeler,nbartlett,nbartlett,11/Apr/17 21:36,01/May/17 18:08,14/Mar/19 02:49,23/Apr/17 09:57,,,,,scr-2.0.10,,,,Declarative Services (SCR),,0,,"SCR 2.0.8 still imports package {{org.osgi.service.cm}} as optional, but it does not start when there is no export of that package available.

I know that SCR should be able to work without a Config Admin implementation but it clearly does not work at all without an import of the API package, therefore it should not be marked as an optional import.

Stack trace:

{noformat}
! Failed to start bundle org.apache.felix.scr-2.0.8, exception activator error org/osgi/service/cm/ConfigurationListener from: java.lang.ClassLoader:defineClass1#-2
org.osgi.framework.BundleException: Activator start error in bundle org.apache.felix.scr [5].
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2276)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2144)
        [... snip ...]
Caused by: java.lang.NoClassDefFoundError: org/osgi/service/cm/ConfigurationListener
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClass(BundleWiringImpl.java:2370)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2154)
        at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1542)
        at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at org.apache.felix.scr.impl.Activator.doStart(Activator.java:157)
        at org.apache.felix.utils.extender.AbstractExtender.start(AbstractExtender.java:114)
        at org.apache.felix.scr.impl.Activator.restart(Activator.java:142)
        at org.apache.felix.scr.impl.config.ScrConfigurationImpl.configure(ScrConfigurationImpl.java:196)
        at org.apache.felix.scr.impl.config.ScrConfigurationImpl.start(ScrConfigurationImpl.java:117)
        at org.apache.felix.scr.impl.Activator.start(Activator.java:110)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2226)
        ... 11 more
Caused by: java.lang.ClassNotFoundException: org.osgi.service.cm.ConfigurationListener not found by org.apache.felix.scr [5]
        at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1574)
        at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        ... 27 more
{noformat}

",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-12 04:07:39.755,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon May 01 18:08:14 UTC 2017,,,,,,0|i3diaf:,9223372036854775807,,,,,,,,"12/Apr/17 04:07;djencks;So here's the culprit, if my copy of the code is accurate:

    public RegionConfigurationSupport registerRegionConfigurationSupport(
            ServiceReference<ConfigurationAdmin> reference) {

Why doesn't type erasure eliminate all reference to config admin???

I imagine we can fix this by using ServiceReference<?> and casting it in the RegionConfigurationSupport constructor, but I'd like to know how my understanding of generics is wrong.","21/Apr/17 00:48;cziegeler;If you decompile the class file it shows ServiceReference<ConfigurationAdmin>, so it seems its really not erased
More info at 
http://stackoverflow.com/questions/339699/java-generics-type-erasure-when-and-what-happens","22/Apr/17 11:16;nbartlett;I tried this and it didn't help.

Loading class ComponentRegistry triggers loading of RegionConfigurationSupport because it is used as a method parameter and return value in several methods. RegionConfigurationSupport necessarily loads ConfigurationListener because it implements that interface.

I note that RegionConfigurationSupport registers *itself* (i.e. 'this') as a ConfigurationListener in its start method. This is a detail of RegionConfigurationSupport that doesn't need to be exposed outside the class. It could be refactored to register a private inner class object. I think this would allow the CNFE/NCDFE to be caught and ignored inside the RegionConfigurationSupport#start() method.","22/Apr/17 22:42;githubbot;GitHub user neilxb opened a pull request:

    https://github.com/apache/felix/pull/105

    FELIX-5613 - SCR bundle fails to start without Config Admin

    RegionConfigurationSupport does not need to directly implement ConfigurationListener. By registering an anonymous inner class, the class loading errors are isolated to this class and do not prevent the bundle from starting.
    
    **Testing Note**
    
    I tried **very** hard to write a PAX Exam integration test that would prove SCR works when there is no exporter of `org.osgi.service.cm`, but I believe this is impossible due to a limitation of PAX Exam. The testing framework always contains the OSGi Compendium bundle version 4.2.0 (`org.osgi:org.osgi.compendium:4.2.0`) because it is a dependency of PAX. Compendium exports `org.osgi.service.cm` version 1.3.0. It cannot be removed as far as I can tell.
    
    I have verified manually that SCR works in both a framework with Config Admin and a framework without Config Admin. However without an automated test it is always possible somebody will make a change that makes SCR dependent on Config Admin once again. I would suggest migrating to bnd-testing-maven-plugin as this does not pollute the testing framework with dependencies.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/njbartlett/felix FELIX-5613

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/felix/pull/105.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #105
    
----
commit 2b8dbb83289bf37bb4563b30c05a826fd777ea71
Author: Neil Bartlett <njbartlett@gmail.com>
Date:   2017-04-22T18:05:53Z

    FELIX-5613 - SCR bundle fails to start without Config Admin
    
    RegionConfigurationSupport does not need to directly implement Config-
    uartionListener. By registering an anonymous inner class, the class
    loading errors can be isolated to this class rather than bubbling up
    to the bundle activator.

----
",23/Apr/17 09:57;cziegeler;Thanks for the patch [~nbartlett]. I've applied it in rev 1792348,"23/Apr/17 09:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/felix/pull/105
","01/May/17 18:08;tjwatson;Note that for the port of this fix to osgi-r7/scr codebase I had to add back the following imports, otherwise scr failed to compile the solution for FELIX-5354:

import org.osgi.service.cm.ConfigurationException;
import org.osgi.service.cm.ManagedService;

I don't think this issue has been re-introduced in the osgi-r7/scr codebase, but it needs to be verified.",,,,,,,,,
Maven bundle plugin does not support Java 9 Multi-Release jars,FELIX-5592,13057364,Bug,Closed,FELIX,Felix,software,karlpauls,"OSGi container, services, and related tools",http://felix.apache.org,Major,Fixed,nbartlett,ralph.goers@dslextreme.com,ralph.goers@dslextreme.com,19/Mar/17 17:05,18/Dec/17 16:30,14/Mar/19 02:49,14/Dec/17 16:19,maven-bundle-plugin-3.2.0,,,,maven-bundle-plugin-3.4.0,,,,Maven Bundle Plugin,,0,,"Log4j 2 currently packages its jars with the maven-bundle-plugin. To support Java 9 we are moving towards using Multi-Release jars to pick up the Java 9 features.  However, when the Maven bundle plugin encouters classes in META-INF/versions/9 it emits an error message saying ""Classes found in the wrong directory:"", which is incorrect for a Multi-Release jar in Java 9.",,,,,,,,,,,,FELIX-5760,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-19 17:11:06.374,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 14 16:19:04 UTC 2017,,,,,,0|i3chkn:,9223372036854775807,,,,,,,,19/Mar/17 17:11;io7m;It's the same root cause as this: https://issues.apache.org/jira/browse/FELIX-5527,"19/Mar/17 17:21;ralph.goers@dslextreme.com;Thanks, I just read that thread. I have no plans to subscribe to the bnd-tools mailing list so I can't comment there. Java 9 is scheduled to be released in a few months. As such Log4j 2 needs to have support in place for that. The spec for multi-release jars is not going to change and if it was going to that would have happened a year or more ago. It sounds like they are sticking their heads in the sand hoping the problem will go away. Instead it is going to get worse. To be honest, supporting Java 9 is a much higher priority to me than supporting OSGi.","19/Mar/17 18:12;io7m;I think the main issue is that OSGi doesn't have any way of representing ""classes that are only loaded in a specific jvm environment"". As I mentioned in that thread, the right way to do this is via services (both in OSGi and Java 9), but that's not much help for existing code that isn't structured as services.","19/Mar/17 19:59;ralph.goers@dslextreme.com;If I get what you are suggesting, the Java 9 replacement classes would need to have unique names or be in different packages. and then the code that wants to use these would have to use the ServiceLoader to locate the implementations and somehow pick the one for the current jdk.  This seems like a lot more work than what is required of the application for multi-release support. On the upside, I suppose it would make debugging easier. But as far as I can tell, the only reason for doing it with the service loader is to make OSGi ""happy"".","19/Mar/17 20:45;io7m;I don't want to be seen as strongly suggesting you should or shouldn't do anything: I don't know enough about your particular case. Some projects want to use multi-release jars to deliver code that is present on both (Java < 9) and (Java >= 9). Other projects want to use multi-release jars to deliver code that has extra functionality on (Java >= 9). An example of the latter is the LWJGL project: They use the new stack-walking API for performance reasons if it's available, but if it isn't, the code works but more slowly.

If I was dealing with situations like the above, I think I'd do the following:

1. Work out what kind of API my optional code needed. This is the ""provider"" API; the API that the main module uses to communicate with its own optional functionality. I'd define it as a set of interfaces and publish them in an API jar (call it ""api.jar""). I'd write an OSGi manifest that exported the API, and a Java 9 module descriptor that exported the API in the same manner.

2. Write a (Java < 9) implementation of that API and publish it in its own jar (call it ""jdk8.jar""). I'd write an OSGi manifest that publishes my implementation as providing the services declared in ""api.jar"" and declare it as requiring a runtime environment of (Java < 9). I'd add META-INF/service/* files that publish the implementation as normal Java services.

3. Write a (Java >= 9) implementation of that API and publish it in its own jar (call it ""jdk9.jar""). I'd write an OSGi manifest that publishes my implementation as providing the services declared in ""api.jar"" and declare it as requiring a runtime environment of (Java >= 9). I'd add a Java 9 module descriptor that states that it provides the services defined in the API jar.

I believe with this arrangement that an OSGi container would then automatically pick up the right implementation based on the current Java environment and the information in the manifest.

Outside of an OSGi container, with a (Java < 9) environment and all of the jars placed on the class path, only the implementation in ""jdk8.jar"" will be picked up (because the ""jdk9.jar"" only declares services via the module descriptor).

Outside of an OSGi container, with a (Java >= 9) environment and all of the jars placed on the *module* path, I believe only the ""jdk9.jar"" implementation will be picked up. I'm not exactly certain on this as there may be some interaction with Java 9's ""automodules"" system. Best case, only the (Java > 9) service implementation will be picked up. Worst case, they'll both be picked up and it'll be the responsibility of the service consumer to pick the ""better"" implementation. You'd need a method defined on the API to allow implementations to be ranked in some manner.

It's certainly more work than multi-release jars but, in my opinion it's a more disciplined approach. It makes optional and possibly platform-specific dependencies explicit and uses a well-understood API (ServiceLoader) to work with the code instead of, for example, resorting to class path and reflection hacks. This is the standard way to represent optional functionality (or multiple implementations) in OSGi and I would guess that it'll become the recommended way to do things in Java 9 as it appears to be heavily influenced by the methodologies people have arrived at on the OSGi side. Java 9's module system appears to be a simpler and far less dynamic clone of OSGi in most aspects, so the same techniques tend to apply.","19/Mar/17 21:15;io7m;Er, to clarify, ServiceLoader isn't used in OSGi. Generally though, if a piece of code is written to work well with the ServiceLoader API, then it can be made to work under OSGi with next to no effort. With OSGi's ""declarative services"", it's just a couple of annotations that aren't retained in any form (they're used to generate a small piece of XML metadata that's injected into the jar file and used by the OSGi container).","19/Mar/17 21:33;ralph.goers@dslextreme.com;Interestingly, we want to use a multi-release jar for exactly the same reason as LWJGL. Log4j 2 has to walk the stack to get location information into the logs. 

A major problem with your proposal is we don't want more jars. We have an API jar and an impl jar and then jars for a whole bunch of optional things. We don't want users on Java 9 to have to include an extra jar to get better performance, nor do we want user's to have to pick and choose between jars that are compiled for their environment. Log4j 2 as a whole compiles with Java 7. To get the build to work I did have to create a maven module that compiles with Java 9, but the classes generated there are copied into either the API or impl jar as appropriate. 

This all works fine except for the Maven bundle plugin.",01/Nov/17 20:42;dmlloyd;We (JBoss) are also moving to multi-release JARs for many of our projects.  Those projects which use the maven-bundle-plugin will lose OSGi support until this issue is resolved.,01/Nov/17 20:49;ralph.goers@dslextreme.com;As of Log4j 2.9 Log4j has been using multi-release jars so this problem could be impacting users even if they aren't migrating to Java 9.,"06/Dec/17 22:52;nbartlett;The underlying issue to be fixed is in bnd, which is consumed by maven-bundle-plugin (and other tools). I have raised the following issue: https://github.com/bndtools/bnd/issues/2227","07/Dec/17 00:11;nbartlett;You can continue using the maven-bundle-plugin with your multi-release JARs by adding the following configuration:

{noformat}
          <configuration>
            <instructions>
              <_fixupmessages>""Classes found in the wrong directory"";is:=warning</_fixupmessages>
            </instructions>
          </configuration>
{noformat}

Note that the Java-9-specific parts will not be visible in OSGi, because OSGi will need enhancements to its runtime (the problem is that the Java 9 parts could have different dependencies, and OSGi does not support dependencies that are conditional upon the runtime Java version). Work on addressing this limitation is underway. In the meantime, the above snippet will allow you to keep using the maven-bundle-plugin to support OSGi users running on Java 8 and below.","07/Dec/17 00:36;dmlloyd;Great tip Neil, thanks.  That at least might be enough to let our builds actually complete.","07/Dec/17 13:55;ralph.goers@dslextreme.com;I also had to add 

{code}
        <dependencies>
          <dependency>
            <groupId>biz.aQute.bnd</groupId>
            <artifactId>biz.aQute.bndlib</artifactId>
            <version>3.5.0</version>
          </dependency>
        </dependencies>
{code}

to my plugin declaration to ignore the maven-info.java file.
","07/Dec/17 15:23;nbartlett;Thanks Ralph. That last part is because the processing of module-info.class was fixed in bnd 3.4.0 but there has not been a release of maven-bundle-plugin. In the meantime bnd has released version 3.5.0.

Can we have a new release of maven-bundle-plugin please?? [~cziegeler]","07/Dec/17 16:37;karlpauls;[~nbartlett], can you create an issue and do the update? If so, I can do a new release.","14/Dec/17 16:19;karlpauls;This should be fixed with the upcomming maven-bundle-plugin 3.4.0 release - where by ""fixed"" I mean it should at least allow to build with multi-release jars. Ultimately, we will need some spec level support to fully support multi-release jars (see the bnd issues mentioned) but that might be in the works.

I'm resolving this issue as fixed for now as the problem should have gone away. When we know how spec level support might look like we need to open a new issue to implement the changes. "
